from nmspy.hooking import HookFactory
import nmspy.data.function_overloads as overloads

class packed_store_active___un_3C_unf_3E_vyf(HookFactory):
    _name = "packed_store_active___un_3C_unf_3E_vyf"

class dot___vyf_3C_3_3E_vyf_3C_3_3E_(HookFactory):
    _name = "dot___vyf_3C_3_3E_vyf_3C_3_3E_"

class length___vyf_3C_3_3E_(HookFactory):
    _name = "length___vyf_3C_3_3E_"

class cross___vyf_3C_3_3E_vyf_3C_3_3E_(HookFactory):
    _name = "cross___vyf_3C_3_3E_vyf_3C_3_3E_"

class ClosestPointOnTriangle___vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_(HookFactory):
    _name = "ClosestPointOnTriangle___vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_"

class IntersectRaySphere___vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_vyf(HookFactory):
    _name = "IntersectRaySphere___vyf_3C_3_3E_vyf_3C_3_3E_vyf_3C_3_3E_vyf"

class sub_14001D810(HookFactory):
    _name = "sub_14001D810"

class Module_InitializeHelper(HookFactory):
    _name = "Module_InitializeHelper"

class LoadModule(HookFactory):
    _name = "LoadModule"

class ValidateModuleHandle(HookFactory):
    _name = "ValidateModuleHandle"

class NvAPI_Initialize(HookFactory):
    _name = "NvAPI_Initialize"

class sub_14002A2F0(HookFactory):
    _name = "sub_14002A2F0"

class sub_14002A3F0(HookFactory):
    _name = "sub_14002A3F0"

class sub_14002A450(HookFactory):
    _name = "sub_14002A450"

class sub_14002A4B0(HookFactory):
    _name = "sub_14002A4B0"

class nvGetSystemDirectoryW(HookFactory):
    _name = "nvGetSystemDirectoryW"

class sub_14002A620(HookFactory):
    _name = "sub_14002A620"

class sub_14002A790(HookFactory):
    _name = "sub_14002A790"

class StringCchCopyW(HookFactory):
    _name = "StringCchCopyW"
    _overload: overloads.StringCchCopyW.overloads = "STRSAFE_LPWSTR, size_t, STRSAFE_LPCWSTR"
    @classmethod
    def overload(cls, overload_args: overloads.StringCchCopyW.overloads):
        cls._overload = overload_args
        return cls

class StringCbCopyW(HookFactory):
    _name = "StringCbCopyW"

class StringCchCopyNW(HookFactory):
    _name = "StringCchCopyNW"

class StringCchCatW(HookFactory):
    _name = "StringCchCatW"
    _overload: overloads.StringCchCatW.overloads = "STRSAFE_LPWSTR, size_t, STRSAFE_LPCWSTR"
    @classmethod
    def overload(cls, overload_args: overloads.StringCchCatW.overloads):
        cls._overload = overload_args
        return cls

class StringCbCatW(HookFactory):
    _name = "StringCbCatW"

class sub_14002AC40(HookFactory):
    _name = "sub_14002AC40"

class sub_14002ADB0(HookFactory):
    _name = "sub_14002ADB0"

class sub_14002AEC0(HookFactory):
    _name = "sub_14002AEC0"

class sub_14002B010(HookFactory):
    _name = "sub_14002B010"

class sub_14002B1D0(HookFactory):
    _name = "sub_14002B1D0"

class sub_14002B480(HookFactory):
    _name = "sub_14002B480"

class sub_14002B510(HookFactory):
    _name = "sub_14002B510"

class sub_14002B5B0(HookFactory):
    _name = "sub_14002B5B0"

class sub_14002B6F0(HookFactory):
    _name = "sub_14002B6F0"

class sub_14002B920(HookFactory):
    _name = "sub_14002B920"

class sub_14002BAF0(HookFactory):
    _name = "sub_14002BAF0"

class sub_14002BC20(HookFactory):
    _name = "sub_14002BC20"

class sub_14002BE10(HookFactory):
    _name = "sub_14002BE10"

class sub_14002C0C0(HookFactory):
    _name = "sub_14002C0C0"

class sub_14002C290(HookFactory):
    _name = "sub_14002C290"

class nvLoadLibraryFromTrustedLocationExW(HookFactory):
    _name = "nvLoadLibraryFromTrustedLocationExW"

class nvGetDriverStoreW(HookFactory):
    _name = "nvGetDriverStoreW"

class sub_14002C820(HookFactory):
    _name = "sub_14002C820"

class nvGetDriverRegkeyW(HookFactory):
    _name = "nvGetDriverRegkeyW"

class nvDetectDisplayDriverModuleRegistrationW(HookFactory):
    _name = "nvDetectDisplayDriverModuleRegistrationW"

class nvDetectDisplayDriverModuleLocationW(HookFactory):
    _name = "nvDetectDisplayDriverModuleLocationW"

class nvLoadSystemLibraryExW(HookFactory):
    _name = "nvLoadSystemLibraryExW"

class cTkAnimVectorBlendNode:
    class ClassPointerRender(HookFactory):
        _name = "cTkAnimVectorBlendNode::ClassPointerRender"
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimVectorBlendNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimVectorBlendNode::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimVectorBlendNode::WriteToXMLNode"

class cGcCreatureComponent:
    class sAccessoryInfo:
        class sLightInfo:
            class sLightInfo(HookFactory):
                _name = "cGcCreatureComponent::sAccessoryInfo::sLightInfo::sLightInfo"
        class UpdateLaser(HookFactory):
            _name = "cGcCreatureComponent::sAccessoryInfo::UpdateLaser"
        class UpdateLights(HookFactory):
            _name = "cGcCreatureComponent::sAccessoryInfo::UpdateLights"
        class UpdateMeshRefresh(HookFactory):
            _name = "cGcCreatureComponent::sAccessoryInfo::UpdateMeshRefresh"
        class Clear(HookFactory):
            _name = "cGcCreatureComponent::sAccessoryInfo::Clear"
    class GetExtraPartNode(HookFactory):
        _name = "cGcCreatureComponent::GetExtraPartNode"
    class GetType(HookFactory):
        _name = "cGcCreatureComponent::GetType"
    class GetTypedComponent(HookFactory):
        _name = "cGcCreatureComponent::GetTypedComponent"
        _overload: overloads.cGcCreatureComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcCreatureComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcCreatureComponent::FindFirstTypedComponent"
    class GetRole(HookFactory):
        _name = "cGcCreatureComponent::GetRole"
    class HasFur(HookFactory):
        _name = "cGcCreatureComponent::HasFur"
    class IsBaby(HookFactory):
        _name = "cGcCreatureComponent::IsBaby"
    class GetScaler(HookFactory):
        _name = "cGcCreatureComponent::GetScaler"
    class GetRelMatrix(HookFactory):
        _name = "cGcCreatureComponent::GetRelMatrix"
    class GetHead(HookFactory):
        _name = "cGcCreatureComponent::GetHead"
    class GetNavigation(HookFactory):
        _name = "cGcCreatureComponent::GetNavigation"
    class GetSizeClass(HookFactory):
        _name = "cGcCreatureComponent::GetSizeClass"
    class GetNumComponents(HookFactory):
        _name = "cGcCreatureComponent::GetNumComponents"
    class GetIsDead(HookFactory):
        _name = "cGcCreatureComponent::GetIsDead"
    class GetUsingIndoorNavigation(HookFactory):
        _name = "cGcCreatureComponent::GetUsingIndoorNavigation"
    class IsFemale(HookFactory):
        _name = "cGcCreatureComponent::IsFemale"
    class GetId(HookFactory):
        _name = "cGcCreatureComponent::GetId"
    class GetTree(HookFactory):
        _name = "cGcCreatureComponent::GetTree"
    class GetAudioObject(HookFactory):
        _name = "cGcCreatureComponent::GetAudioObject"
    class GetFwd(HookFactory):
        _name = "cGcCreatureComponent::GetFwd"
    class RegisterPersistentGrassPusher(HookFactory):
        _name = "cGcCreatureComponent::RegisterPersistentGrassPusher"
    class UnregisterPersistentGrassPusher(HookFactory):
        _name = "cGcCreatureComponent::UnregisterPersistentGrassPusher"
    class Error(HookFactory):
        _name = "cGcCreatureComponent::Error"
    class GetRoutine(HookFactory):
        _name = "cGcCreatureComponent::GetRoutine"
    class GetObb(HookFactory):
        _name = "cGcCreatureComponent::GetObb"
    class GetPerception(HookFactory):
        _name = "cGcCreatureComponent::GetPerception"
    class GetPerceptionDistance(HookFactory):
        _name = "cGcCreatureComponent::GetPerceptionDistance"
    class GetKnowledge(HookFactory):
        _name = "cGcCreatureComponent::GetKnowledge"
    class GetEnergy(HookFactory):
        _name = "cGcCreatureComponent::GetEnergy"
    class ModifyEnergy(HookFactory):
        _name = "cGcCreatureComponent::ModifyEnergy"
    class SetWantsToDespawn(HookFactory):
        _name = "cGcCreatureComponent::SetWantsToDespawn"
    class IsBeingFed(HookFactory):
        _name = "cGcCreatureComponent::IsBeingFed"
    class GetTypeID(HookFactory):
        _name = "cGcCreatureComponent::GetTypeID"
    class GetPetInteractionAttachment(HookFactory):
        _name = "cGcCreatureComponent::GetPetInteractionAttachment"
    class GetMovementMode(HookFactory):
        _name = "cGcCreatureComponent::GetMovementMode"
    class GetCreatureSizeValue(HookFactory):
        _name = "cGcCreatureComponent::GetCreatureSizeValue"
    class GetPreferredLod(HookFactory):
        _name = "cGcCreatureComponent::GetPreferredLod"
    class cGcCreatureComponent(HookFactory):
        _name = "cGcCreatureComponent::cGcCreatureComponent"
    class OnAttached(HookFactory):
        _name = "cGcCreatureComponent::OnAttached"
    class SetUpBehaviourTree(HookFactory):
        _name = "cGcCreatureComponent::SetUpBehaviourTree"
    class AllocatePerception(HookFactory):
        _name = "cGcCreatureComponent::AllocatePerception"
    class FreePerception(HookFactory):
        _name = "cGcCreatureComponent::FreePerception"
    class ClassifyCreatureRidingSize(HookFactory):
        _name = "cGcCreatureComponent::ClassifyCreatureRidingSize"
    class Prepare(HookFactory):
        _name = "cGcCreatureComponent::Prepare"
    class LookInfo:
        class LookInfo(HookFactory):
            _name = "cGcCreatureComponent::LookInfo::LookInfo"
    class SetLookPoint(HookFactory):
        _name = "cGcCreatureComponent::SetLookPoint"
    class SetSwarm(HookFactory):
        _name = "cGcCreatureComponent::SetSwarm"
    class UpdateRender(HookFactory):
        _name = "cGcCreatureComponent::UpdateRender"
    class Update(HookFactory):
        _name = "cGcCreatureComponent::Update"
    class GiveDeathResources(HookFactory):
        _name = "cGcCreatureComponent::GiveDeathResources"
    class PlayDeathEffect(HookFactory):
        _name = "cGcCreatureComponent::PlayDeathEffect"
    class GetCreatureDiscoveryConstructionData(HookFactory):
        _name = "cGcCreatureComponent::GetCreatureDiscoveryConstructionData"
    class GetFeedingProduct(HookFactory):
        _name = "cGcCreatureComponent::GetFeedingProduct"
        _overload: overloads.cGcCreatureComponent.GetFeedingProduct.overloads = "cGcCreatureComponent *, TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcCreatureComponent.GetFeedingProduct.overloads):
            cls._overload = overload_args
            return cls
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureComponent::UpdatePostPhysics"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureComponent::RenderNGui"
    class NetSerialize(HookFactory):
        _name = "cGcCreatureComponent::NetSerialize"
    class IsInView(HookFactory):
        _name = "cGcCreatureComponent::IsInView"
    class DoEffectDeath(HookFactory):
        _name = "cGcCreatureComponent::DoEffectDeath"
    class Ragdoll(HookFactory):
        _name = "cGcCreatureComponent::Ragdoll"
    class GetLeader(HookFactory):
        _name = "cGcCreatureComponent::GetLeader"
    class IncreaseFeedingTasksDone(HookFactory):
        _name = "cGcCreatureComponent::IncreaseFeedingTasksDone"
    class ResetFeedingTasksToDo(HookFactory):
        _name = "cGcCreatureComponent::ResetFeedingTasksToDo"
    class StartFeeding(HookFactory):
        _name = "cGcCreatureComponent::StartFeeding"
    class DoStartFeeding(HookFactory):
        _name = "cGcCreatureComponent::DoStartFeeding"
    class Feed(HookFactory):
        _name = "cGcCreatureComponent::Feed"
    class DoFeed(HookFactory):
        _name = "cGcCreatureComponent::DoFeed"
    class Harvest(HookFactory):
        _name = "cGcCreatureComponent::Harvest"
    class DoHarvest(HookFactory):
        _name = "cGcCreatureComponent::DoHarvest"
    class GetBumMatrix(HookFactory):
        _name = "cGcCreatureComponent::GetBumMatrix"
    class GiveHarvestResources(HookFactory):
        _name = "cGcCreatureComponent::GiveHarvestResources"
    class DoHarvestingCooldown(HookFactory):
        _name = "cGcCreatureComponent::DoHarvestingCooldown"
    class GetHarvestingDesc(HookFactory):
        _name = "cGcCreatureComponent::GetHarvestingDesc"
    class GetHarvestingProduct(HookFactory):
        _name = "cGcCreatureComponent::GetHarvestingProduct"
    class GetMinHarvestResourceBlobs(HookFactory):
        _name = "cGcCreatureComponent::GetMinHarvestResourceBlobs"
    class NetUpdateAttitude(HookFactory):
        _name = "cGcCreatureComponent::NetUpdateAttitude"
    class SetFriendlyAttitude(HookFactory):
        _name = "cGcCreatureComponent::SetFriendlyAttitude"
    class SetCreatureMarker(HookFactory):
        _name = "cGcCreatureComponent::SetCreatureMarker"
    class Ride(HookFactory):
        _name = "cGcCreatureComponent::Ride"
    class GetNavRadiusAndHeight(HookFactory):
        _name = "cGcCreatureComponent::GetNavRadiusAndHeight"
    class GetRoughRadiusAndHeight(HookFactory):
        _name = "cGcCreatureComponent::GetRoughRadiusAndHeight"
    class GetRoutineMoveSpeed(HookFactory):
        _name = "cGcCreatureComponent::GetRoutineMoveSpeed"
    class GetRidingVignetteStrength(HookFactory):
        _name = "cGcCreatureComponent::GetRidingVignetteStrength"
    class GetDamageMultiplier(HookFactory):
        _name = "cGcCreatureComponent::GetDamageMultiplier"
    class GetStartingHealth(HookFactory):
        _name = "cGcCreatureComponent::GetStartingHealth"
    class UpdateDiscoveredStatus(HookFactory):
        _name = "cGcCreatureComponent::UpdateDiscoveredStatus"
    class GetPlayerDamage(HookFactory):
        _name = "cGcCreatureComponent::GetPlayerDamage"
    class GetDiscoryThumbnailParams(HookFactory):
        _name = "cGcCreatureComponent::GetDiscoryThumbnailParams"
    class CanRide(HookFactory):
        _name = "cGcCreatureComponent::CanRide"
    class IsBeingRidden(HookFactory):
        _name = "cGcCreatureComponent::IsBeingRidden"
    class GetRidingMatrix(HookFactory):
        _name = "cGcCreatureComponent::GetRidingMatrix"
    class CalcRidingMatrix(HookFactory):
        _name = "cGcCreatureComponent::CalcRidingMatrix"
    class GetRidingLegSpread(HookFactory):
        _name = "cGcCreatureComponent::GetRidingLegSpread"
    class OnHit(HookFactory):
        _name = "cGcCreatureComponent::OnHit"
    class CloneAndAttachNode(HookFactory):
        _name = "cGcCreatureComponent::CloneAndAttachNode"
    class Release(HookFactory):
        _name = "cGcCreatureComponent::Release"
    class GetUpdatePeriod(HookFactory):
        _name = "cGcCreatureComponent::GetUpdatePeriod"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcCreatureComponent::NetSerializeOnInit"
    class DoPetSetUp(HookFactory):
        _name = "cGcCreatureComponent::DoPetSetUp"
    class RefreshAccessories(HookFactory):
        _name = "cGcCreatureComponent::RefreshAccessories"
    class HasLaserAccessory(HookFactory):
        _name = "cGcCreatureComponent::HasLaserAccessory"
    class IsDissolving(HookFactory):
        _name = "cGcCreatureComponent::IsDissolving"
    class DoDissolve(HookFactory):
        _name = "cGcCreatureComponent::DoDissolve"
    class UpdateDissolveProgress(HookFactory):
        _name = "cGcCreatureComponent::UpdateDissolveProgress"
    class SetPetAccessoryState(HookFactory):
        _name = "cGcCreatureComponent::SetPetAccessoryState"
    class GetNumAccessories(HookFactory):
        _name = "cGcCreatureComponent::GetNumAccessories"
    class GetAccessoryCustomisation(HookFactory):
        _name = "cGcCreatureComponent::GetAccessoryCustomisation"
    class CreateNetworkedParticleEffect(HookFactory):
        _name = "cGcCreatureComponent::CreateNetworkedParticleEffect"
    class SetSketchVariableLocal(HookFactory):
        _name = "cGcCreatureComponent::SetSketchVariableLocal"
    class DoCreatureNetworkEvent(HookFactory):
        _name = "cGcCreatureComponent::DoCreatureNetworkEvent"
    class DoCreatureNetworkEventLocal(HookFactory):
        _name = "cGcCreatureComponent::DoCreatureNetworkEventLocal"
    class LaunchProjectile(HookFactory):
        _name = "cGcCreatureComponent::LaunchProjectile"
    class AmInterestedInOwnership(HookFactory):
        _name = "cGcCreatureComponent::AmInterestedInOwnership"
    class OnOwnershipTransfer(HookFactory):
        _name = "cGcCreatureComponent::OnOwnershipTransfer"
    class ShouldAbandon(HookFactory):
        _name = "cGcCreatureComponent::ShouldAbandon"
    class UpdateInteractionTitle(HookFactory):
        _name = "cGcCreatureComponent::UpdateInteractionTitle"
    class SpawnPetEgg(HookFactory):
        _name = "cGcCreatureComponent::SpawnPetEgg"
    class GetInitialAttitudeTowardsPlayer(HookFactory):
        _name = "cGcCreatureComponent::GetInitialAttitudeTowardsPlayer"
    class InitData(HookFactory):
        _name = "cGcCreatureComponent::InitData"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureComponent::GetTypeNameHash64"
    class GetTargetPointSize(HookFactory):
        _name = "cGcCreatureComponent::GetTargetPointSize"
    class ShouldDespawnOnRagdoll(HookFactory):
        _name = "cGcCreatureComponent::ShouldDespawnOnRagdoll"
    class DestroyTree(HookFactory):
        _name = "cGcCreatureComponent::DestroyTree"
    class GetSeed(HookFactory):
        _name = "cGcCreatureComponent::GetSeed"
    class GetCreatureRoleData(HookFactory):
        _name = "cGcCreatureComponent::GetCreatureRoleData"

class TkHandle:
    class Root(HookFactory):
        _name = "TkHandle::Root"
    class GetLookup(HookFactory):
        _name = "TkHandle::GetLookup"

class cTkVector3:
    class cTkVector3(HookFactory):
        _name = "cTkVector3::cTkVector3"

class cTkColour:
    class cTkColour(HookFactory):
        _name = "cTkColour::cTkColour"
    class SetFromHSV(HookFactory):
        _name = "cTkColour::SetFromHSV"
    class GetAsHSV(HookFactory):
        _name = "cTkColour::GetAsHSV"
    class NmzInterpolate(HookFactory):
        _name = "cTkColour::NmzInterpolate"

class cTkSeed:
    class cTkSeed(HookFactory):
        _name = "cTkSeed::cTkSeed"
        _overload: overloads.cTkSeed.cTkSeed.overloads = "cTkSeed *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSeed.cTkSeed.overloads):
            cls._overload = overload_args
            return cls
    class NGuiRender(HookFactory):
        _name = "cTkSeed::NGuiRender"

class cTkMatrix34:
    class cTkMatrix34(HookFactory):
        _name = "cTkMatrix34::cTkMatrix34"
    class VectorTransformMatrix(HookFactory):
        _name = "cTkMatrix34::VectorTransformMatrix"

class cGcScanner:
    class TerrainResourcePosition:
        class TerrainResourcePosition(HookFactory):
            _name = "cGcScanner::TerrainResourcePosition::TerrainResourcePosition"
    class cGcScanner(HookFactory):
        _name = "cGcScanner::cGcScanner"
    class Prepare(HookFactory):
        _name = "cGcScanner::Prepare"
    class Update(HookFactory):
        _name = "cGcScanner::Update"
    class GetTerrainResourceString(HookFactory):
        _name = "cGcScanner::GetTerrainResourceString"
    class UpdateToolScan(HookFactory):
        _name = "cGcScanner::UpdateToolScan"
    class AddMarkerToShipPilot(HookFactory):
        _name = "cGcScanner::AddMarkerToShipPilot"
    class UpdateZoom(HookFactory):
        _name = "cGcScanner::UpdateZoom"
    class UpdateScanEffect(HookFactory):
        _name = "cGcScanner::UpdateScanEffect"
    class UpdateRender(HookFactory):
        _name = "cGcScanner::UpdateRender"
    class RenderVR(HookFactory):
        _name = "cGcScanner::RenderVR"
    class RenderHeadsUp(HookFactory):
        _name = "cGcScanner::RenderHeadsUp"
    class TriggerAt(HookFactory):
        _name = "cGcScanner::TriggerAt"
    class IsScannerCharged(HookFactory):
        _name = "cGcScanner::IsScannerCharged"
    class IsHotspotSurveyingActive(HookFactory):
        _name = "cGcScanner::IsHotspotSurveyingActive"
    class CreateAndAddNodeSpecificScan(HookFactory):
        _name = "cGcScanner::CreateAndAddNodeSpecificScan"
    class UpdateScannedAsteroids(HookFactory):
        _name = "cGcScanner::UpdateScannedAsteroids"
    class FadeInAndOutAlphaCallback(HookFactory):
        _name = "cGcScanner::FadeInAndOutAlphaCallback"
    class ScannedMarkersAlphaCallback(HookFactory):
        _name = "cGcScanner::ScannedMarkersAlphaCallback"
    class ScannedMarkersBaseColourCallback(HookFactory):
        _name = "cGcScanner::ScannedMarkersBaseColourCallback"
    class ScannedMarkersFresnelIntensityCallback(HookFactory):
        _name = "cGcScanner::ScannedMarkersFresnelIntensityCallback"
    class GetBuildingNode(HookFactory):
        _name = "cGcScanner::GetBuildingNode"
    class CreateAndAddSimpleTimedScan(HookFactory):
        _name = "cGcScanner::CreateAndAddSimpleTimedScan"
    class RemoveTimedScan(HookFactory):
        _name = "cGcScanner::RemoveTimedScan"
    class UpdateScannedNode(HookFactory):
        _name = "cGcScanner::UpdateScannedNode"
    class GetScanConfig(HookFactory):
        _name = "cGcScanner::GetScanConfig"
    class FuelAsteroidInfo:
        class ConstructMarker(HookFactory):
            _name = "cGcScanner::FuelAsteroidInfo::ConstructMarker"
    class GetLastScanTime(HookFactory):
        _name = "cGcScanner::GetLastScanTime"

class cTkResourceDescriptor:
    class cTkResourceDescriptor(HookFactory):
        _name = "cTkResourceDescriptor::cTkResourceDescriptor"
        _overload: overloads.cTkResourceDescriptor.cTkResourceDescriptor.overloads = "cTkResourceDescriptor *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceDescriptor.cTkResourceDescriptor.overloads):
            cls._overload = overload_args
            return cls
    class GetSeed(HookFactory):
        _name = "cTkResourceDescriptor::GetSeed"
    class FromString(HookFactory):
        _name = "cTkResourceDescriptor::FromString"
    class GetSize(HookFactory):
        _name = "cTkResourceDescriptor::GetSize"
    class GetDescriptor(HookFactory):
        _name = "cTkResourceDescriptor::GetDescriptor"
    class Equals(HookFactory):
        _name = "cTkResourceDescriptor::Equals"
    class AddDescriptor(HookFactory):
        _name = "cTkResourceDescriptor::AddDescriptor"
    class ToString(HookFactory):
        _name = "cTkResourceDescriptor::ToString"
    class HashAltID(HookFactory):
        _name = "cTkResourceDescriptor::HashAltID"
    class DistortInstance(HookFactory):
        _name = "cTkResourceDescriptor::DistortInstance"
        _overload: overloads.cTkResourceDescriptor.DistortInstance.overloads = "cTkResourceDescriptor *, const char *, const cTkSeed *, const cTkSeed *, const TkID<256> *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceDescriptor.DistortInstance.overloads):
            cls._overload = overload_args
            return cls
    class GenerateDistortedInstanceFromList(HookFactory):
        _name = "cTkResourceDescriptor::GenerateDistortedInstanceFromList"
    class GenerateInstance(HookFactory):
        _name = "cTkResourceDescriptor::GenerateInstance"
        _overload: overloads.cTkResourceDescriptor.GenerateInstance.overloads = "cTkResourceDescriptor *, const char *, const cTkSeed *, const TkID<256> *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceDescriptor.GenerateInstance.overloads):
            cls._overload = overload_args
            return cls
    class GenerateInstanceFromGuide(HookFactory):
        _name = "cTkResourceDescriptor::GenerateInstanceFromGuide"
    class GenerateInstanceFromList(HookFactory):
        _name = "cTkResourceDescriptor::GenerateInstanceFromList"
    class GenerateInstanceFromModel(HookFactory):
        _name = "cTkResourceDescriptor::GenerateInstanceFromModel"
    class GetModelDescriptorList(HookFactory):
        _name = "cTkResourceDescriptor::GetModelDescriptorList"
    class GetResourceFilter(HookFactory):
        _name = "cTkResourceDescriptor::GetResourceFilter"
    class SearchForID(HookFactory):
        _name = "cTkResourceDescriptor::SearchForID"
    class SelectPart(HookFactory):
        _name = "cTkResourceDescriptor::SelectPart"
    class ShouldLoadMesh(HookFactory):
        _name = "cTkResourceDescriptor::ShouldLoadMesh"
        _overload: overloads.cTkResourceDescriptor.ShouldLoadMesh.overloads = "cTkResourceDescriptor *, const TkID<256> *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceDescriptor.ShouldLoadMesh.overloads):
            cls._overload = overload_args
            return cls
    class Validate(HookFactory):
        _name = "cTkResourceDescriptor::Validate"

class cTkSmartResHandle:
    class cTkSmartResHandle(HookFactory):
        _name = "cTkSmartResHandle::cTkSmartResHandle"
        _overload: overloads.cTkSmartResHandle.cTkSmartResHandle.overloads = "cTkSmartResHandle *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSmartResHandle.cTkSmartResHandle.overloads):
            cls._overload = overload_args
            return cls
    class Release(HookFactory):
        _name = "cTkSmartResHandle::Release"
    class GetHandle(HookFactory):
        _name = "cTkSmartResHandle::GetHandle"
    class DecRef(HookFactory):
        _name = "cTkSmartResHandle::DecRef"
    class GetPResource(HookFactory):
        _name = "cTkSmartResHandle::GetPResource"
    class IncRef(HookFactory):
        _name = "cTkSmartResHandle::IncRef"
    class MakePersistent(HookFactory):
        _name = "cTkSmartResHandle::MakePersistent"

class cTkRigidBody:
    class GetIndexOfProxyOfBody(HookFactory):
        _name = "cTkRigidBody::GetIndexOfProxyOfBody"
    class cTkRigidBody(HookFactory):
        _name = "cTkRigidBody::cTkRigidBody"
        _overload: overloads.cTkRigidBody.cTkRigidBody.overloads = "cTkRigidBody *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkRigidBody.cTkRigidBody.overloads):
            cls._overload = overload_args
            return cls
    class GetCollisionFilterGroup(HookFactory):
        _name = "cTkRigidBody::GetCollisionFilterGroup"
    class GetNode(HookFactory):
        _name = "cTkRigidBody::GetNode"
    class GetMatrix(HookFactory):
        _name = "cTkRigidBody::GetMatrix"
    class GetPosition(HookFactory):
        _name = "cTkRigidBody::GetPosition"
    class GetAabb(HookFactory):
        _name = "cTkRigidBody::GetAabb"
        _overload: overloads.cTkRigidBody.GetAabb.overloads = "cTkRigidBody *, cTkVector3 *, cTkVector3 *, const cTkMatrix34 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkRigidBody.GetAabb.overloads):
            cls._overload = overload_args
            return cls
    class GetLocalAabb(HookFactory):
        _name = "cTkRigidBody::GetLocalAabb"
    class SetCollisionFilterGroup(HookFactory):
        _name = "cTkRigidBody::SetCollisionFilterGroup"
    class GetCollisionFilterMask(HookFactory):
        _name = "cTkRigidBody::GetCollisionFilterMask"
    class SetCollisionFilterMask(HookFactory):
        _name = "cTkRigidBody::SetCollisionFilterMask"
    class ClosestPoint(HookFactory):
        _name = "cTkRigidBody::ClosestPoint"
    class GetCenterOfMassWorld(HookFactory):
        _name = "cTkRigidBody::GetCenterOfMassWorld"
    class GetMass(HookFactory):
        _name = "cTkRigidBody::GetMass"
    class DisableContactResponse(HookFactory):
        _name = "cTkRigidBody::DisableContactResponse"
    class AlignAroundAxis(HookFactory):
        _name = "cTkRigidBody::AlignAroundAxis"
    class GetAngularFactor(HookFactory):
        _name = "cTkRigidBody::GetAngularFactor"
    class SetAngularFactor(HookFactory):
        _name = "cTkRigidBody::SetAngularFactor"
    class Align(HookFactory):
        _name = "cTkRigidBody::Align"
    class EnableContactResponse(HookFactory):
        _name = "cTkRigidBody::EnableContactResponse"
    class SetMatrix(HookFactory):
        _name = "cTkRigidBody::SetMatrix"
    class QueueForPrePhysUpdate(HookFactory):
        _name = "cTkRigidBody::QueueForPrePhysUpdate"
    class Activate(HookFactory):
        _name = "cTkRigidBody::Activate"
    class ResetHasContacts(HookFactory):
        _name = "cTkRigidBody::ResetHasContacts"
    class UseCharacterPhysics(HookFactory):
        _name = "cTkRigidBody::UseCharacterPhysics"
    class AlignPosition(HookFactory):
        _name = "cTkRigidBody::AlignPosition"
    class GetLinearVelocityAtPoint(HookFactory):
        _name = "cTkRigidBody::GetLinearVelocityAtPoint"
    class GetProperties(HookFactory):
        _name = "cTkRigidBody::GetProperties"
    class ApplyAngularKeyFrame(HookFactory):
        _name = "cTkRigidBody::ApplyAngularKeyFrame"
    class ApplyAngularVelocityDelta(HookFactory):
        _name = "cTkRigidBody::ApplyAngularVelocityDelta"
    class ApplyAngularVelocityDeltaAtPoint(HookFactory):
        _name = "cTkRigidBody::ApplyAngularVelocityDeltaAtPoint"
    class ApplyCentralForce(HookFactory):
        _name = "cTkRigidBody::ApplyCentralForce"
    class ApplyCentralForceLimited(HookFactory):
        _name = "cTkRigidBody::ApplyCentralForceLimited"
    class ApplyCentralImpulse(HookFactory):
        _name = "cTkRigidBody::ApplyCentralImpulse"
    class ApplyCentralImpulseLimited(HookFactory):
        _name = "cTkRigidBody::ApplyCentralImpulseLimited"
    class ApplyLinearKeyFrame(HookFactory):
        _name = "cTkRigidBody::ApplyLinearKeyFrame"
    class ApplyLinearVelocityDelta(HookFactory):
        _name = "cTkRigidBody::ApplyLinearVelocityDelta"
    class ApplyTorque(HookFactory):
        _name = "cTkRigidBody::ApplyTorque"
    class ApplyTorqueImpulse(HookFactory):
        _name = "cTkRigidBody::ApplyTorqueImpulse"
    class ApplyTorqueImpulseLimited(HookFactory):
        _name = "cTkRigidBody::ApplyTorqueImpulseLimited"
    class AssertOnCheckSupport(HookFactory):
        _name = "cTkRigidBody::AssertOnCheckSupport"
    class AttachCompoundRigidBody(HookFactory):
        _name = "cTkRigidBody::AttachCompoundRigidBody"
    class Construct(HookFactory):
        _name = "cTkRigidBody::Construct"
    class Destruct(HookFactory):
        _name = "cTkRigidBody::Destruct"
    class DisableGravity(HookFactory):
        _name = "cTkRigidBody::DisableGravity"
    class DisableKinematic(HookFactory):
        _name = "cTkRigidBody::DisableKinematic"
    class EnableGravity(HookFactory):
        _name = "cTkRigidBody::EnableGravity"
    class EnableKinematic(HookFactory):
        _name = "cTkRigidBody::EnableKinematic"
    class ForceInertiaOfBox(HookFactory):
        _name = "cTkRigidBody::ForceInertiaOfBox"
    class GetAngularVelocity(HookFactory):
        _name = "cTkRigidBody::GetAngularVelocity"
    class GetGroundNormal(HookFactory):
        _name = "cTkRigidBody::GetGroundNormal"
    class GetHavokBody(HookFactory):
        _name = "cTkRigidBody::GetHavokBody"
    class GetInertiaModelSpace(HookFactory):
        _name = "cTkRigidBody::GetInertiaModelSpace"
    class GetLinearVelocity(HookFactory):
        _name = "cTkRigidBody::GetLinearVelocity"
    class IsCreated(HookFactory):
        _name = "cTkRigidBody::IsCreated"
    class IsLocallyOwned(HookFactory):
        _name = "cTkRigidBody::IsLocallyOwned"
    class IsOnClimbable(HookFactory):
        _name = "cTkRigidBody::IsOnClimbable"
    class IsOnGround(HookFactory):
        _name = "cTkRigidBody::IsOnGround"
    class MarkAsClimbable(HookFactory):
        _name = "cTkRigidBody::MarkAsClimbable"
    class MarkAsClimbsClimbable(HookFactory):
        _name = "cTkRigidBody::MarkAsClimbsClimbable"
    class MarkAsInstances(HookFactory):
        _name = "cTkRigidBody::MarkAsInstances"
    class MarkAsNotCollidingWithPlayerShip(HookFactory):
        _name = "cTkRigidBody::MarkAsNotCollidingWithPlayerShip"
    class MarkAsPlayerShip(HookFactory):
        _name = "cTkRigidBody::MarkAsPlayerShip"
    class MarkAsPlayerVehicle(HookFactory):
        _name = "cTkRigidBody::MarkAsPlayerVehicle"
    class MarkAsTerrain(HookFactory):
        _name = "cTkRigidBody::MarkAsTerrain"
    class Prepare(HookFactory):
        _name = "cTkRigidBody::Prepare"
    class RenderNGui(HookFactory):
        _name = "cTkRigidBody::RenderNGui"
    class ResetBroadphase(HookFactory):
        _name = "cTkRigidBody::ResetBroadphase"
    class SetAngularVelocity(HookFactory):
        _name = "cTkRigidBody::SetAngularVelocity"
    class SetCharacterPhysicsMaxSlopeAngle(HookFactory):
        _name = "cTkRigidBody::SetCharacterPhysicsMaxSlopeAngle"
    class SetCharacterPhysicsUpVector(HookFactory):
        _name = "cTkRigidBody::SetCharacterPhysicsUpVector"
    class SetCollisionFilters(HookFactory):
        _name = "cTkRigidBody::SetCollisionFilters"
    class SetDamping(HookFactory):
        _name = "cTkRigidBody::SetDamping"
    class SetDebugRender(HookFactory):
        _name = "cTkRigidBody::SetDebugRender"
    class SetGravityFactor(HookFactory):
        _name = "cTkRigidBody::SetGravityFactor"
    class SetLinearDamping(HookFactory):
        _name = "cTkRigidBody::SetLinearDamping"
    class SetLinearVelocity(HookFactory):
        _name = "cTkRigidBody::SetLinearVelocity"
    class SetQuality(HookFactory):
        _name = "cTkRigidBody::SetQuality"
    class SetRelMatrix(HookFactory):
        _name = "cTkRigidBody::SetRelMatrix"
    class SetRelMatrixFromWorld(HookFactory):
        _name = "cTkRigidBody::SetRelMatrixFromWorld"
    class SetRelMatrixFromWorldPreNormalizedV128(HookFactory):
        _name = "cTkRigidBody::SetRelMatrixFromWorldPreNormalizedV128"
    class UpdateProxiesContactEnable(HookFactory):
        _name = "cTkRigidBody::UpdateProxiesContactEnable"

class BaseIndex:
    class BaseIndex(HookFactory):
        _name = "BaseIndex::BaseIndex"
        _overload: overloads.BaseIndex.BaseIndex.overloads = "BaseIndex *"
        @classmethod
        def overload(cls, overload_args: overloads.BaseIndex.BaseIndex.overloads):
            cls._overload = overload_args
            return cls

class cTkReplicatedVariableBase:
    class Construct(HookFactory):
        _name = "cTkReplicatedVariableBase::Construct"

class cGcNotificationSequence:
    class ShowFutureObjectives(HookFactory):
        _name = "cGcNotificationSequence::ShowFutureObjectives"
    class GetCurrentGroup(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentGroup"
    class GetSectionToHideFromLogForIndex(HookFactory):
        _name = "cGcNotificationSequence::GetSectionToHideFromLogForIndex"
    class GetCurrentSectionWithTargetID(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentSectionWithTargetID"
    class Begin(HookFactory):
        _name = "cGcNotificationSequence::Begin"
    class GetMissionDataTitle(HookFactory):
        _name = "cGcNotificationSequence::GetMissionDataTitle"
    class UseCommunityMissionForLog(HookFactory):
        _name = "cGcNotificationSequence::UseCommunityMissionForLog"
    class GetCurrentCategory(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentCategory"
    class GetCurrentIcon(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentIcon"
    class GetIconAtStage(HookFactory):
        _name = "cGcNotificationSequence::GetIconAtStage"
    class GetCurrentFrontendPageHint(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentFrontendPageHint"
    class GetCurrentInventoryHint(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentInventoryHint"
    class GetCurrentFrontendPageLocID(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentFrontendPageLocID"
    class Restart(HookFactory):
        _name = "cGcNotificationSequence::Restart"
    class GoBackToStage(HookFactory):
        _name = "cGcNotificationSequence::GoBackToStage"
    class Load(HookFactory):
        _name = "cGcNotificationSequence::Load"
    class Save(HookFactory):
        _name = "cGcNotificationSequence::Save"
    class cGcNotificationSequence(HookFactory):
        _name = "cGcNotificationSequence::cGcNotificationSequence"
    class Update(HookFactory):
        _name = "cGcNotificationSequence::Update"
    class HasText(HookFactory):
        _name = "cGcNotificationSequence::HasText"
    class GetText(HookFactory):
        _name = "cGcNotificationSequence::GetText"
    class CanBeRestarted(HookFactory):
        _name = "cGcNotificationSequence::CanBeRestarted"
    class IsBasePartUnlockedByMission(HookFactory):
        _name = "cGcNotificationSequence::IsBasePartUnlockedByMission"
    class GetSubtitle(HookFactory):
        _name = "cGcNotificationSequence::GetSubtitle"
    class GetDescription(HookFactory):
        _name = "cGcNotificationSequence::GetDescription"
    class ShowCommunityProgress(HookFactory):
        _name = "cGcNotificationSequence::ShowCommunityProgress"
    class GetCurrentColour(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentColour"
    class NGuiRender(HookFactory):
        _name = "cGcNotificationSequence::NGuiRender"
    class ShouldBeInLog(HookFactory):
        _name = "cGcNotificationSequence::ShouldBeInLog"
    class CanBeRenounced(HookFactory):
        _name = "cGcNotificationSequence::CanBeRenounced"
    class RenounceMission(HookFactory):
        _name = "cGcNotificationSequence::RenounceMission"
    class SelectWeekendEventMissionID(HookFactory):
        _name = "cGcNotificationSequence::SelectWeekendEventMissionID"
    class GetMultiplayerMissionType(HookFactory):
        _name = "cGcNotificationSequence::GetMultiplayerMissionType"
        _overload: overloads.cGcNotificationSequence.GetMultiplayerMissionType.overloads = "const TkID<128> *, const cTkSeed *, const bool, const cGcGenericMissionSequence *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNotificationSequence.GetMultiplayerMissionType.overloads):
            cls._overload = overload_args
            return cls
    class OnSequenceComplete(HookFactory):
        _name = "cGcNotificationSequence::OnSequenceComplete"
    class GetAppropriateMissionSurveyHint(HookFactory):
        _name = "cGcNotificationSequence::GetAppropriateMissionSurveyHint"
    class GetMissionPhotoTargetPhotoBuilding(HookFactory):
        _name = "cGcNotificationSequence::GetMissionPhotoTargetPhotoBuilding"
    class GetMissionPhotoTargetBuilding(HookFactory):
        _name = "cGcNotificationSequence::GetMissionPhotoTargetBuilding"
    class GetCurrentSection(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentSection"
    class GetCurrentSectionWithIcon(HookFactory):
        _name = "cGcNotificationSequence::GetCurrentSectionWithIcon"
    class AddStage(HookFactory):
        _name = "cGcNotificationSequence::AddStage"

class cTkComponent:
    class IsLocalPlayerEntityOwner(HookFactory):
        _name = "cTkComponent::IsLocalPlayerEntityOwner"
    class RenderNGui(HookFactory):
        _name = "cTkComponent::RenderNGui"
    class Release(HookFactory):
        _name = "cTkComponent::Release"
    class GetUpdatePeriod(HookFactory):
        _name = "cTkComponent::GetUpdatePeriod"
    class SetWantsUpdate(HookFactory):
        _name = "cTkComponent::SetWantsUpdate"
    class RegisterReplicatedVariable(HookFactory):
        _templates = ("T0", )
        _name = "cTkComponent::RegisterReplicatedVariable<{T0}>"
    class AddComponent(HookFactory):
        _name = "cTkComponent::AddComponent"
    class GetComponent(HookFactory):
        _name = "cTkComponent::GetComponent"
    class GetEntityOwnerPlayerId(HookFactory):
        _name = "cTkComponent::GetEntityOwnerPlayerId"
    class GetMatrix(HookFactory):
        _name = "cTkComponent::GetMatrix"
    class GetNetReplicateComponent(HookFactory):
        _name = "cTkComponent::GetNetReplicateComponent"
    class GetNetworkId(HookFactory):
        _name = "cTkComponent::GetNetworkId"
    class HasComponent(HookFactory):
        _name = "cTkComponent::HasComponent"
    class IsNetReplicated(HookFactory):
        _name = "cTkComponent::IsNetReplicated"

class CAkParameterNodeBase:
    class SetAdvSettingsParams(HookFactory):
        _name = "CAkParameterNodeBase::SetAdvSettingsParams"
    class BeforeEffectsUpdate(HookFactory):
        _name = "CAkParameterNodeBase::BeforeEffectsUpdate"
    class OnPreRelease(HookFactory):
        _name = "CAkParameterNodeBase::OnPreRelease"
    class PositioningChangeNotification(HookFactory):
        _name = "CAkParameterNodeBase::PositioningChangeNotification"
    class IsInHdrHierarchy(HookFactory):
        _name = "CAkParameterNodeBase::IsInHdrHierarchy"
    class CAkParameterNodeBase(HookFactory):
        _name = "CAkParameterNodeBase::CAkParameterNodeBase"
    class MetadataGetArray:
        class Accumulate(HookFactory):
            _name = "CAkParameterNodeBase::MetadataGetArray::Accumulate"
    class AddChildByPtr(HookFactory):
        _name = "CAkParameterNodeBase::AddChildByPtr"
    class AddRef(HookFactory):
        _name = "CAkParameterNodeBase::AddRef"
    class AddToIndex(HookFactory):
        _name = "CAkParameterNodeBase::AddToIndex"
    class AddToURendererActiveNodes(HookFactory):
        _name = "CAkParameterNodeBase::AddToURendererActiveNodes"
    class AdjustCount(HookFactory):
        _name = "CAkParameterNodeBase::AdjustCount"
    class AllocateMetadata(HookFactory):
        _name = "CAkParameterNodeBase::AllocateMetadata"
    class ApplyAllSIS(HookFactory):
        _name = "CAkParameterNodeBase::ApplyAllSIS"
    class ApplyTransitionsOnProperties(HookFactory):
        _name = "CAkParameterNodeBase::ApplyTransitionsOnProperties"
    class BypassFX(HookFactory):
        _name = "CAkParameterNodeBase::BypassFX"
    class CheckAndDeleteActivityChunk(HookFactory):
        _name = "CAkParameterNodeBase::CheckAndDeleteActivityChunk"
    class CheckAndDeleteGameObjLimiter(HookFactory):
        _name = "CAkParameterNodeBase::CheckAndDeleteGameObjLimiter"
    class ClearLimitersAndMakeDirty(HookFactory):
        _name = "CAkParameterNodeBase::ClearLimitersAndMakeDirty"
    class CreateGameObjectLimiter(HookFactory):
        _name = "CAkParameterNodeBase::CreateGameObjectLimiter"
    class DecrementActivityCount(HookFactory):
        _name = "CAkParameterNodeBase::DecrementActivityCount"
    class DecrementActivityCountValue(HookFactory):
        _name = "CAkParameterNodeBase::DecrementActivityCountValue"
    class DecrementPlayCountValue(HookFactory):
        _name = "CAkParameterNodeBase::DecrementPlayCountValue"
    class DeleteActivityChunk(HookFactory):
        _name = "CAkParameterNodeBase::DeleteActivityChunk"
    class EnableActivityChunk(HookFactory):
        _name = "CAkParameterNodeBase::EnableActivityChunk"
    class Ensure3DAutomationAllocated(HookFactory):
        _name = "CAkParameterNodeBase::Ensure3DAutomationAllocated"
    class FindCustomProp(HookFactory):
        _name = "CAkParameterNodeBase::FindCustomProp"
    class FreePathInfo(HookFactory):
        _name = "CAkParameterNodeBase::FreePathInfo"
    class Get2DParams(HookFactory):
        _name = "CAkParameterNodeBase::Get2DParams"
    class Get3DAutomationParams(HookFactory):
        _name = "CAkParameterNodeBase::Get3DAutomationParams"
    class Get3DPanning(HookFactory):
        _name = "CAkParameterNodeBase::Get3DPanning"
    class GetAttachedPropFX(HookFactory):
        _name = "CAkParameterNodeBase::GetAttachedPropFX"
    class GetBypassFX(HookFactory):
        _name = "CAkParameterNodeBase::GetBypassFX"
    class GetControlBus(HookFactory):
        _name = "CAkParameterNodeBase::GetControlBus"
    class GetDepth(HookFactory):
        _name = "CAkParameterNodeBase::GetDepth"
    class GetMaxNumInstances(HookFactory):
        _name = "CAkParameterNodeBase::GetMaxNumInstances"
    class GetMaxRadius(HookFactory):
        _name = "CAkParameterNodeBase::GetMaxRadius"
    class GetMetadataArray(HookFactory):
        _name = "CAkParameterNodeBase::GetMetadataArray"
    class GetMixingBus(HookFactory):
        _name = "CAkParameterNodeBase::GetMixingBus"
    class GetModulatorParamXfrms(HookFactory):
        _name = "CAkParameterNodeBase::GetModulatorParamXfrms"
    class GetNumMetadata(HookFactory):
        _name = "CAkParameterNodeBase::GetNumMetadata"
    class GetPathState(HookFactory):
        _name = "CAkParameterNodeBase::GetPathState"
    class GetPositioningParams(HookFactory):
        _name = "CAkParameterNodeBase::GetPositioningParams"
    class GetPriority(HookFactory):
        _name = "CAkParameterNodeBase::GetPriority"
    class GetPropAndRTPCAndState(HookFactory):
        _name = "CAkParameterNodeBase::GetPropAndRTPCAndState"
    class GetSIS(HookFactory):
        _name = "CAkParameterNodeBase::GetSIS"
    class GetStateSyncTypes(HookFactory):
        _name = "CAkParameterNodeBase::GetStateSyncTypes"
    class GetStatic3DParams(HookFactory):
        _name = "CAkParameterNodeBase::GetStatic3DParams"
    class HasListenerRelativeRouting(HookFactory):
        _name = "CAkParameterNodeBase::HasListenerRelativeRouting"
    class IncrementActivityCount(HookFactory):
        _name = "CAkParameterNodeBase::IncrementActivityCount"
    class IncrementActivityCountValue(HookFactory):
        _name = "CAkParameterNodeBase::IncrementActivityCountValue"
    class IncrementPlayCountValue(HookFactory):
        _name = "CAkParameterNodeBase::IncrementPlayCountValue"
    class IsException(HookFactory):
        _name = "CAkParameterNodeBase::IsException"
    class IsInfiniteLooping(HookFactory):
        _name = "CAkParameterNodeBase::IsInfiniteLooping"
    class IsMidiBreakLoopOnNoteOff(HookFactory):
        _name = "CAkParameterNodeBase::IsMidiBreakLoopOnNoteOff"
    class IsMidiNoteTracking(HookFactory):
        _name = "CAkParameterNodeBase::IsMidiNoteTracking"
    class MainBypassFX(HookFactory):
        _name = "CAkParameterNodeBase::MainBypassFX"
    class Notification(HookFactory):
        _name = "CAkParameterNodeBase::Notification"
    class Parent(HookFactory):
        _name = "CAkParameterNodeBase::Parent"
    class ParentBus(HookFactory):
        _name = "CAkParameterNodeBase::ParentBus"
    class Pause(HookFactory):
        _name = "CAkParameterNodeBase::Pause"
    class PrepareNodeData(HookFactory):
        _name = "CAkParameterNodeBase::PrepareNodeData"
    class ProcessGameObjectLimiter(HookFactory):
        _name = "CAkParameterNodeBase::ProcessGameObjectLimiter"
    class ProcessGlobalLimiter(HookFactory):
        _name = "CAkParameterNodeBase::ProcessGlobalLimiter"
    class RegisterParameterTarget(HookFactory):
        _name = "CAkParameterNodeBase::RegisterParameterTarget"
    class Release(HookFactory):
        _name = "CAkParameterNodeBase::Release"
    class RemoveFromURendererActiveNodes(HookFactory):
        _name = "CAkParameterNodeBase::RemoveFromURendererActiveNodes"
    class RemoveOutputBus(HookFactory):
        _name = "CAkParameterNodeBase::RemoveOutputBus"
    class ResetAkProp(HookFactory):
        _name = "CAkParameterNodeBase::ResetAkProp"
    class ResetBypassFX(HookFactory):
        _name = "CAkParameterNodeBase::ResetBypassFX"
    class ResetFXBypass(HookFactory):
        _name = "CAkParameterNodeBase::ResetFXBypass"
    class Resume(HookFactory):
        _name = "CAkParameterNodeBase::Resume"
    class SafeDisconnectActivityChunk(HookFactory):
        _name = "CAkParameterNodeBase::SafeDisconnectActivityChunk"
    class SetAkProp(HookFactory):
        _name = "CAkParameterNodeBase::SetAkProp"
        _overload: overloads.CAkParameterNodeBase.SetAkProp.overloads = "CAkParameterNodeBase *, AkPropID, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkParameterNodeBase.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetAuxParams(HookFactory):
        _name = "CAkParameterNodeBase::SetAuxParams"
    class SetMaxReachedBehavior(HookFactory):
        _name = "CAkParameterNodeBase::SetMaxReachedBehavior"
    class SetMetadata(HookFactory):
        _name = "CAkParameterNodeBase::SetMetadata"
    class SetNodeBaseParams(HookFactory):
        _name = "CAkParameterNodeBase::SetNodeBaseParams"
    class SetOverLimitBehavior(HookFactory):
        _name = "CAkParameterNodeBase::SetOverLimitBehavior"
    class SetPositioningParams(HookFactory):
        _name = "CAkParameterNodeBase::SetPositioningParams"
    class SetRTPC(HookFactory):
        _name = "CAkParameterNodeBase::SetRTPC"
    class SetVVoicesOptOverrideParent(HookFactory):
        _name = "CAkParameterNodeBase::SetVVoicesOptOverrideParent"
    class StartSISTransition(HookFactory):
        _name = "CAkParameterNodeBase::StartSISTransition"
    class StartSisMuteTransitions(HookFactory):
        _name = "CAkParameterNodeBase::StartSisMuteTransitions"
    class Stop(HookFactory):
        _name = "CAkParameterNodeBase::Stop"
    class TriggerModulators(HookFactory):
        _name = "CAkParameterNodeBase::TriggerModulators"
    class UnPrepareNodeData(HookFactory):
        _name = "CAkParameterNodeBase::UnPrepareNodeData"
    class Unmute(HookFactory):
        _name = "CAkParameterNodeBase::Unmute"
    class Unregister(HookFactory):
        _name = "CAkParameterNodeBase::Unregister"
    class UnregisterParameterTarget(HookFactory):
        _name = "CAkParameterNodeBase::UnregisterParameterTarget"
    class UnsetRTPC(HookFactory):
        _name = "CAkParameterNodeBase::UnsetRTPC"
    class UpdateBaseParams(HookFactory):
        _name = "CAkParameterNodeBase::UpdateBaseParams"
    class _GetBypassAllFX(HookFactory):
        _name = "CAkParameterNodeBase::_GetBypassAllFX"

class cTkComponentPool:
    class cTkComponentPool(HookFactory):
        _name = "cTkComponentPool::cTkComponentPool"
    class GetComponent(HookFactory):
        _name = "cTkComponentPool::GetComponent"
    class HasComponent(HookFactory):
        _name = "cTkComponentPool::HasComponent"
    class Free(HookFactory):
        _name = "cTkComponentPool::Free"

class cTkComponentManager:
    class GetInstance(HookFactory):
        _name = "cTkComponentManager::GetInstance"
    class GetTypeIndex(HookFactory):
        _name = "cTkComponentManager::GetTypeIndex"
    class GetPool(HookFactory):
        _name = "cTkComponentManager::GetPool"
    class PushComponentMask(HookFactory):
        _name = "cTkComponentManager::PushComponentMask"
    class SetComponentMask(HookFactory):
        _name = "cTkComponentManager::SetComponentMask"
    class Allocate(HookFactory):
        _name = "cTkComponentManager::Allocate"
    class CompareComponentPools(HookFactory):
        _name = "cTkComponentManager::CompareComponentPools"
    class Construct(HookFactory):
        _name = "cTkComponentManager::Construct"
    class Free(HookFactory):
        _name = "cTkComponentManager::Free"
    class IsRegisteredComponent(HookFactory):
        _name = "cTkComponentManager::IsRegisteredComponent"
    class RenderNGui(HookFactory):
        _name = "cTkComponentManager::RenderNGui"
    class SortComponentPools(HookFactory):
        _name = "cTkComponentManager::SortComponentPools"
    class Update(HookFactory):
        _name = "cTkComponentManager::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cTkComponentManager::UpdatePostPhysics"
    class UpdateRender(HookFactory):
        _name = "cTkComponentManager::UpdateRender"

class cGcDiscoveryPayload:
    class cGcDiscoveryPayload(HookFactory):
        _name = "cGcDiscoveryPayload::cGcDiscoveryPayload"

class cGcDiscoveryData:
    class cGcDiscoveryData(HookFactory):
        _name = "cGcDiscoveryData::cGcDiscoveryData"
    class Invalidate(HookFactory):
        _name = "cGcDiscoveryData::Invalidate"
    class SavePersistent(HookFactory):
        _name = "cGcDiscoveryData::SavePersistent"
    class LoadPersistent(HookFactory):
        _name = "cGcDiscoveryData::LoadPersistent"
    class HashSpooky(HookFactory):
        _name = "cGcDiscoveryData::HashSpooky"

class cTkAnimationComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkAnimationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkAnimationComponent::InitData"
    class cTkAnimationComponent(HookFactory):
        _name = "cTkAnimationComponent::cTkAnimationComponent"
    class GetTypedComponent(HookFactory):
        _name = "cTkAnimationComponent::GetTypedComponent"
    class SetAnimSpeed(HookFactory):
        _name = "cTkAnimationComponent::SetAnimSpeed"
        _overload: overloads.cTkAnimationComponent.SetAnimSpeed.overloads = "cTkAnimationComponent *, float, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.SetAnimSpeed.overloads):
            cls._overload = overload_args
            return cls
    class SetAnimTime(HookFactory):
        _name = "cTkAnimationComponent::SetAnimTime"
        _overload: overloads.cTkAnimationComponent.SetAnimTime.overloads = "cTkAnimationComponent *, float, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.SetAnimTime.overloads):
            cls._overload = overload_args
            return cls
    class HasAnim(HookFactory):
        _name = "cTkAnimationComponent::HasAnim"
    class GetAnimLength(HookFactory):
        _name = "cTkAnimationComponent::GetAnimLength"
        _overload: overloads.cTkAnimationComponent.GetAnimLength.overloads = "cTkAnimationComponent *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.GetAnimLength.overloads):
            cls._overload = overload_args
            return cls
    class IsAnimControl(HookFactory):
        _name = "cTkAnimationComponent::IsAnimControl"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkAnimationComponent::FindFirstTypedComponent"
    class SetBlendWeight(HookFactory):
        _name = "cTkAnimationComponent::SetBlendWeight"
    class GetAnimTime(HookFactory):
        _name = "cTkAnimationComponent::GetAnimTime"
        _overload: overloads.cTkAnimationComponent.GetAnimTime.overloads = "cTkAnimationComponent *, const cTkAnimInstanceHandle *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.GetAnimTime.overloads):
            cls._overload = overload_args
            return cls
    class GetNumAnimFrames(HookFactory):
        _name = "cTkAnimationComponent::GetNumAnimFrames"
    class GetAnimFrameInt(HookFactory):
        _name = "cTkAnimationComponent::GetAnimFrameInt"
    class SetMirrored(HookFactory):
        _name = "cTkAnimationComponent::SetMirrored"
    class FreezeAllAnims(HookFactory):
        _name = "cTkAnimationComponent::FreezeAllAnims"
    class GetAnimUnscaledLength(HookFactory):
        _name = "cTkAnimationComponent::GetAnimUnscaledLength"
    class GetAnimActionFrame(HookFactory):
        _name = "cTkAnimationComponent::GetAnimActionFrame"
        _overload: overloads.cTkAnimationComponent.GetAnimActionFrame.overloads = "cTkAnimationComponent *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.GetAnimActionFrame.overloads):
            cls._overload = overload_args
            return cls
    class GetAnimFrame(HookFactory):
        _name = "cTkAnimationComponent::GetAnimFrame"
    class GetAnimSpeed(HookFactory):
        _name = "cTkAnimationComponent::GetAnimSpeed"
    class GetAnimMirrored(HookFactory):
        _name = "cTkAnimationComponent::GetAnimMirrored"
    class SetAnimMirrored(HookFactory):
        _name = "cTkAnimationComponent::SetAnimMirrored"
    class GetLayerHandleForAnim(HookFactory):
        _name = "cTkAnimationComponent::GetLayerHandleForAnim"
    class OnAttached(HookFactory):
        _name = "cTkAnimationComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkAnimationComponent::Prepare"
    class Update(HookFactory):
        _name = "cTkAnimationComponent::Update"
    class NetSerialize(HookFactory):
        _name = "cTkAnimationComponent::NetSerialize"
    class RenderNGui(HookFactory):
        _name = "cTkAnimationComponent::RenderNGui"
    class GetActiveAnimIndices(HookFactory):
        _name = "cTkAnimationComponent::GetActiveAnimIndices"
    class GetAnimIndex(HookFactory):
        _name = "cTkAnimationComponent::GetAnimIndex"
    class GetAnimationUnitTime(HookFactory):
        _name = "cTkAnimationComponent::GetAnimationUnitTime"
    class GetAnimsWithPrefix(HookFactory):
        _name = "cTkAnimationComponent::GetAnimsWithPrefix"
    class GetBlendWeight(HookFactory):
        _name = "cTkAnimationComponent::GetBlendWeight"
    class GetGameData(HookFactory):
        _name = "cTkAnimationComponent::GetGameData"
    class GetLocatorForAnim(HookFactory):
        _name = "cTkAnimationComponent::GetLocatorForAnim"
        _overload: overloads.cTkAnimationComponent.GetLocatorForAnim.overloads = "cTkAnimationComponent *, const TkID<128> *, const TkID<128> *, float, bool, cTkVector3 *, cTkQuaternion *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.GetLocatorForAnim.overloads):
            cls._overload = overload_args
            return cls
    class GetMoveLocatorForAnim(HookFactory):
        _name = "cTkAnimationComponent::GetMoveLocatorForAnim"
    class IsAnimActive(HookFactory):
        _name = "cTkAnimationComponent::IsAnimActive"
        _overload: overloads.cTkAnimationComponent.IsAnimActive.overloads = "cTkAnimationComponent *, const TkID<128> *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.IsAnimActive.overloads):
            cls._overload = overload_args
            return cls
    class IsAnimActiveByIndex(HookFactory):
        _name = "cTkAnimationComponent::IsAnimActiveByIndex"
    class IsAnimLooping(HookFactory):
        _name = "cTkAnimationComponent::IsAnimLooping"
    class LoadAndMapAnimation(HookFactory):
        _name = "cTkAnimationComponent::LoadAndMapAnimation"
    class MatchAnimTimes(HookFactory):
        _name = "cTkAnimationComponent::MatchAnimTimes"
    class Play(HookFactory):
        _name = "cTkAnimationComponent::Play"
    class PlayAnimAndMatch(HookFactory):
        _name = "cTkAnimationComponent::PlayAnimAndMatch"
    class PlayAnimAndOffsetByBlend(HookFactory):
        _name = "cTkAnimationComponent::PlayAnimAndOffsetByBlend"
    class PlayOnLayer(HookFactory):
        _name = "cTkAnimationComponent::PlayOnLayer"
    class SetAnimActive(HookFactory):
        _name = "cTkAnimationComponent::SetAnimActive"
    class Stop(HookFactory):
        _name = "cTkAnimationComponent::Stop"
        _overload: overloads.cTkAnimationComponent.Stop.overloads = "cTkAnimationComponent *, const TkID<128> *, float, eCurve"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAnimationComponent.Stop.overloads):
            cls._overload = overload_args
            return cls
    class UpdateRemoteAnimations(HookFactory):
        _name = "cTkAnimationComponent::UpdateRemoteAnimations"

class cTkDynamicChainComponent:
    class DefaultRenderNGui(HookFactory):
        _name = "cTkDynamicChainComponent::DefaultRenderNGui"
    class Update(HookFactory):
        _name = "cTkDynamicChainComponent::Update"
    class OnAttached(HookFactory):
        _name = "cTkDynamicChainComponent::OnAttached"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkDynamicChainComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkDynamicChainComponent::InitData"

class ComponentInstancercTkAnimationComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkAnimationComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkAnimationComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkAnimationComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkAnimationComponent::DestructInstance"

class ComponentLoadInstancercTkAnimationComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercTkAnimationComponent::Register"

class cGcCustomInventoryComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCustomInventoryComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCustomInventoryComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcCustomInventoryComponent::GetTypedComponent"
    class RenderNGui(HookFactory):
        _name = "cGcCustomInventoryComponent::RenderNGui"

class ComponentInstancercGcCustomInventoryComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCustomInventoryComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCustomInventoryComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCustomInventoryComponent::DestructInstance"

class ComponentInstancercGcFleetHologramComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcFleetHologramComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcFleetHologramComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcFleetHologramComponent::ConstructInstance"

class cGcFoliageComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcFoliageComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcFoliageComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcFoliageComponent::DefaultRenderNGui"
    class OnAttached(HookFactory):
        _name = "cGcFoliageComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcFoliageComponent::Prepare"

class ComponentInstancercGcFoliageComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcFoliageComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcFoliageComponent::ConstructInstance"

class ComponentInstancercGcNPCInteractiveObjectComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNPCInteractiveObjectComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcNPCInteractiveObjectComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCInteractiveObjectComponent::ConstructInstance"

class ComponentInstancercGcSentinelRobotComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcSentinelRobotComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcSentinelRobotComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSentinelRobotComponent::ConstructInstance"

class cTkRandomComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkRandomComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkRandomComponent::InitData"
    class RandomFloat(HookFactory):
        _name = "cTkRandomComponent::RandomFloat"
    class GetRNG(HookFactory):
        _name = "cTkRandomComponent::GetRNG"
    class GetTypedComponent(HookFactory):
        _name = "cTkRandomComponent::GetTypedComponent"
    class RandomInt(HookFactory):
        _name = "cTkRandomComponent::RandomInt"
    class AddComponent(HookFactory):
        _name = "cTkRandomComponent::AddComponent"
    class OnAttached(HookFactory):
        _name = "cTkRandomComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkRandomComponent::Prepare"

class ComponentInstancercTkRandomComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkRandomComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkRandomComponent::ConstructInstance"

class ComponentInstancercGcWiringSocketComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcWiringSocketComponent::AllocateInstances"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcWiringSocketComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcWiringSocketComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcWiringSocketComponent::ConstructInstance"

class cTkNetReplicatedEntityComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::InitData"
    class GetNumComponents(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::FindFirstTypedComponent"
    class AllowComponent(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::AllowComponent"
    class NetSerializeOnInit(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::NetSerializeOnInit"
    class OnAttached(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::Release"
    class UpdateRemoteActive(HookFactory):
        _name = "cTkNetReplicatedEntityComponent::UpdateRemoteActive"

class ComponentInstancercTkNetReplicatedEntityComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkNetReplicatedEntityComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkNetReplicatedEntityComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkNetReplicatedEntityComponent::ConstructInstance"

class ComponentInstancercGcShipOwnershipComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcShipOwnershipComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcShipOwnershipComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcShipOwnershipComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcShipOwnershipComponent::ConstructInstance"

class cGcProjectileImpact:
    class cGcProjectileImpact(HookFactory):
        _name = "cGcProjectileImpact::cGcProjectileImpact"
        _overload: overloads.cGcProjectileImpact.cGcProjectileImpact.overloads = "cGcProjectileImpact *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProjectileImpact.cGcProjectileImpact.overloads):
            cls._overload = overload_args
            return cls
    class Init(HookFactory):
        _name = "cGcProjectileImpact::Init"
        _overload: overloads.cGcProjectileImpact.Init.overloads = "cGcProjectileImpact *, cGcProjectileData *, const cTkVector3 *, const cTkVector3 *, const cTkVector3 *, float, cTkRigidBody *, cGcOwnerConcept *, int, eDamageType, const std::vector<cGcImpactCombatEffectData,TkSTLAllocatorShim<cGcImpactCombatEffectData,4,-1> > *, const std::vector<cGcCombatEffectDamageMultiplier,TkSTLAllocatorShim<cGcCombatEffectDamageMultiplier,4,-1> > *, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProjectileImpact.Init.overloads):
            cls._overload = overload_args
            return cls
    class IsFromLocalPlayer(HookFactory):
        _name = "cGcProjectileImpact::IsFromLocalPlayer"
    class IsFromRemotePlayer(HookFactory):
        _name = "cGcProjectileImpact::IsFromRemotePlayer"
    class IsFromVehicle(HookFactory):
        _name = "cGcProjectileImpact::IsFromVehicle"
    class IsFromSpaceship(HookFactory):
        _name = "cGcProjectileImpact::IsFromSpaceship"
    class FromFaction(HookFactory):
        _name = "cGcProjectileImpact::FromFaction"

class cGcLaserBeam:
    class cGcLaserBeam(HookFactory):
        _name = "cGcLaserBeam::cGcLaserBeam"
    class IsTracerMode(HookFactory):
        _name = "cGcLaserBeam::IsTracerMode"
    class Construct(HookFactory):
        _name = "cGcLaserBeam::Construct"
    class Fire(HookFactory):
        _name = "cGcLaserBeam::Fire"
    class Overheat(HookFactory):
        _name = "cGcLaserBeam::Overheat"
    class Deactivate(HookFactory):
        _name = "cGcLaserBeam::Deactivate"
    class Update(HookFactory):
        _name = "cGcLaserBeam::Update"
    class UpdateRender(HookFactory):
        _name = "cGcLaserBeam::UpdateRender"
    class HitTerrain(HookFactory):
        _name = "cGcLaserBeam::HitTerrain"
    class UpdateBeam(HookFactory):
        _name = "cGcLaserBeam::UpdateBeam"
    class Release(HookFactory):
        _name = "cGcLaserBeam::Release"
    class IsFromPlayer(HookFactory):
        _name = "cGcLaserBeam::IsFromPlayer"

class cGcWeapon:
    class GetActiveInventoryItem(HookFactory):
        _name = "cGcWeapon::GetActiveInventoryItem"
    class GetCurrentRange(HookFactory):
        _name = "cGcWeapon::GetCurrentRange"
    class GetCurrentSpeed(HookFactory):
        _name = "cGcWeapon::GetCurrentSpeed"

class AkDevice:
    class PluginContext:
        class GetDownstreamGain(HookFactory):
            _templates = ("T0", )
            _name = "AkDevice::PluginContext<{T0}>::GetDownstreamGain"
        class GetOutputID(HookFactory):
            _templates = ("T0", )
            _name = "AkDevice::PluginContext<{T0}>::GetOutputID"
        class GetParentChannelConfig(HookFactory):
            _templates = ("T0", )
            _name = "AkDevice::PluginContext<{T0}>::GetParentChannelConfig"
        class GetPluginMedia(HookFactory):
            _templates = ("T0", )
            _name = "AkDevice::PluginContext<{T0}>::GetPluginMedia"
        class GetProcessorFeatures(HookFactory):
            _templates = ("T0", )
            _name = "AkDevice::PluginContext<{T0}>::GetProcessorFeatures"
    class GetSpreadCache(HookFactory):
        _name = "AkDevice::GetSpreadCache"
    class AkDevice(HookFactory):
        _name = "AkDevice::AkDevice"
    class AddCaptureCallbackStruct(HookFactory):
        _name = "AkDevice::AddCaptureCallbackStruct"
    class AllocMemoryCaptureCallbackStruct(HookFactory):
        _name = "AkDevice::AllocMemoryCaptureCallbackStruct"
    class Allocate3DAudioResources(HookFactory):
        _name = "AkDevice::Allocate3DAudioResources"
    class ClearEffects(HookFactory):
        _name = "AkDevice::ClearEffects"
    class ClearSink(HookFactory):
        _name = "AkDevice::ClearSink"
    class ConnectMix(HookFactory):
        _name = "AkDevice::ConnectMix"
    class CreateDummy(HookFactory):
        _name = "AkDevice::CreateDummy"
    class CreateSink(HookFactory):
        _name = "AkDevice::CreateSink"
    class DeleteDeviceAndDisconnectMix(HookFactory):
        _name = "AkDevice::DeleteDeviceAndDisconnectMix"
    class DestroyPanCaches(HookFactory):
        _name = "AkDevice::DestroyPanCaches"
    class FileCaptureCallbackStruct:
        class DoCallbackFunc(HookFactory):
            _name = "AkDevice::FileCaptureCallbackStruct::DoCallbackFunc"
        class IsValid(HookFactory):
            _name = "AkDevice::FileCaptureCallbackStruct::IsValid"
    class CaptureImpl:
        class MemoryCaptureCallbackStruct:
            class DoCallbackFunc(HookFactory):
                _name = "AkDevice::CaptureImpl::MemoryCaptureCallbackStruct::DoCallbackFunc"
    class FindCaptureCallbackFunc(HookFactory):
        _name = "AkDevice::FindCaptureCallbackFunc"
    class ForceReset(HookFactory):
        _name = "AkDevice::ForceReset"
    class GetEffect(HookFactory):
        _name = "AkDevice::GetEffect"
    class SinkPluginContext:
        class GetNumRefillsInVoice(HookFactory):
            _name = "AkDevice::SinkPluginContext::GetNumRefillsInVoice"
        class IsPrimary(HookFactory):
            _name = "AkDevice::SinkPluginContext::IsPrimary"
        class SignalAudioThread(HookFactory):
            _name = "AkDevice::SinkPluginContext::SignalAudioThread"
    class GetOutputID(HookFactory):
        _name = "AkDevice::GetOutputID"
    class GetSpeakerAngles(HookFactory):
        _name = "AkDevice::GetSpeakerAngles"
    class InitDefaultAngles(HookFactory):
        _name = "AkDevice::InitDefaultAngles"
    class BaseCaptureCallbackStruct:
        class IsMatch(HookFactory):
            _name = "AkDevice::BaseCaptureCallbackStruct::IsMatch"
    class MixForCapture(HookFactory):
        _name = "AkDevice::MixForCapture"
    class RefreshSink3DAudioCapabilities(HookFactory):
        _name = "AkDevice::RefreshSink3DAudioCapabilities"
    class Release3DAudioResources(HookFactory):
        _name = "AkDevice::Release3DAudioResources"
    class SetAudioDevice(HookFactory):
        _name = "AkDevice::SetAudioDevice"
    class SetSpeakerAngles(HookFactory):
        _name = "AkDevice::SetSpeakerAngles"
    class StartOutputCapture(HookFactory):
        _name = "AkDevice::StartOutputCapture"
    class StopOutputCapture(HookFactory):
        _name = "AkDevice::StopOutputCapture"
    class UpdateEffect(HookFactory):
        _name = "AkDevice::UpdateEffect"
    class UpdateEffects(HookFactory):
        _name = "AkDevice::UpdateEffects"

class cEgSceneNode:
    class GetClassOverride(HookFactory):
        _name = "cEgSceneNode::GetClassOverride"
    class cEgSceneNode(HookFactory):
        _name = "cEgSceneNode::cEgSceneNode"
        _overload: overloads.cEgSceneNode.cEgSceneNode.overloads = "cEgSceneNode *, const cEgSceneNode *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgSceneNode.cEgSceneNode.overloads):
            cls._overload = overload_args
            return cls
    class SetTransform(HookFactory):
        _name = "cEgSceneNode::SetTransform"
    class GetParameterInt(HookFactory):
        _name = "cEgSceneNode::GetParameterInt"
    class SetParameterInt(HookFactory):
        _name = "cEgSceneNode::SetParameterInt"
    class GetParameterFloat(HookFactory):
        _name = "cEgSceneNode::GetParameterFloat"
    class SetParameterFloat(HookFactory):
        _name = "cEgSceneNode::SetParameterFloat"
    class GetParameterVec3(HookFactory):
        _name = "cEgSceneNode::GetParameterVec3"
    class SetParameterVec3(HookFactory):
        _name = "cEgSceneNode::SetParameterVec3"
    class GetParameterStr(HookFactory):
        _name = "cEgSceneNode::GetParameterStr"
    class SetParameterStr(HookFactory):
        _name = "cEgSceneNode::SetParameterStr"
    class GetVisibleBBox(HookFactory):
        _name = "cEgSceneNode::GetVisibleBBox"
    class SetHasAsyncUpdate(HookFactory):
        _name = "cEgSceneNode::SetHasAsyncUpdate"
    class SetHasLods(HookFactory):
        _name = "cEgSceneNode::SetHasLods"
    class SetRenderable(HookFactory):
        _name = "cEgSceneNode::SetRenderable"
    class ComputeTransformInOffsetSpace(HookFactory):
        _name = "cEgSceneNode::ComputeTransformInOffsetSpace"
    class ComputePrevTransformInOffsetSpace(HookFactory):
        _name = "cEgSceneNode::ComputePrevTransformInOffsetSpace"

class cGcVehicleWeapon:
    class GetNumModes(HookFactory):
        _name = "cGcVehicleWeapon::GetNumModes"
    class GetLastFireTime(HookFactory):
        _name = "cGcVehicleWeapon::GetLastFireTime"
    class GetLastModeChangeTime(HookFactory):
        _name = "cGcVehicleWeapon::GetLastModeChangeTime"
    class SetModeIndex(HookFactory):
        _name = "cGcVehicleWeapon::SetModeIndex"
    class GetPrimaryStat(HookFactory):
        _name = "cGcVehicleWeapon::GetPrimaryStat"
    class GetListOfModesIfActiveOrNot(HookFactory):
        _name = "cGcVehicleWeapon::GetListOfModesIfActiveOrNot"
    class GetTerrainEditMode(HookFactory):
        _name = "cGcVehicleWeapon::GetTerrainEditMode"
    class UsingTerrainAdvancedMode(HookFactory):
        _name = "cGcVehicleWeapon::UsingTerrainAdvancedMode"
    class ShowingTerrainEditNotifies(HookFactory):
        _name = "cGcVehicleWeapon::ShowingTerrainEditNotifies"
    class ResetTerrainMode(HookFactory):
        _name = "cGcVehicleWeapon::ResetTerrainMode"
    class GetInventoryItem(HookFactory):
        _name = "cGcVehicleWeapon::GetInventoryItem"
    class GetWeaponRange(HookFactory):
        _name = "cGcVehicleWeapon::GetWeaponRange"
    class GetWeaponSpeed(HookFactory):
        _name = "cGcVehicleWeapon::GetWeaponSpeed"

class cGcPlayerEffectsComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPlayerEffectsComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPlayerEffectsComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcPlayerEffectsComponent::DefaultRenderNGui"
    class cGcPlayerEffectsComponent(HookFactory):
        _name = "cGcPlayerEffectsComponent::cGcPlayerEffectsComponent"
    class GetTypedComponent(HookFactory):
        _name = "cGcPlayerEffectsComponent::GetTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcPlayerEffectsComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcPlayerEffectsComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerEffectsComponent::Release"
    class Update(HookFactory):
        _name = "cGcPlayerEffectsComponent::Update"
    class UpdateEffects(HookFactory):
        _name = "cGcPlayerEffectsComponent::UpdateEffects"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerEffectsComponent::UpdateRender"
    class TriggerEffect(HookFactory):
        _name = "cGcPlayerEffectsComponent::TriggerEffect"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerEffectsComponent::RenderNGui"
    class ShouldFreezePlayerMovement(HookFactory):
        _name = "cGcPlayerEffectsComponent::ShouldFreezePlayerMovement"
    class IsEffectRunning(HookFactory):
        _name = "cGcPlayerEffectsComponent::IsEffectRunning"
    class ReplicateEffect(HookFactory):
        _name = "cGcPlayerEffectsComponent::ReplicateEffect"
    class Dissolve:
        class Render(HookFactory):
            _name = "cGcPlayerEffectsComponent::Dissolve::Render"
    class GetNumComponents(HookFactory):
        _name = "cGcPlayerEffectsComponent::GetNumComponents"

class ComponentInstancercGcPlayerEffectsComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerEffectsComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcPlayerEffectsComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerEffectsComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerEffectsComponent::DestructInstance"

class cGcScannableComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcScannableComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcScannableComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcScannableComponent::GetTypedComponent"
    class ShowInFreighterBranchRoom(HookFactory):
        _name = "cGcScannableComponent::ShowInFreighterBranchRoom"
    class GetCompassRange(HookFactory):
        _name = "cGcScannableComponent::GetCompassRange"
    class HasComponent(HookFactory):
        _name = "cGcScannableComponent::HasComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcScannableComponent::GetNumComponents"
    class Prepare(HookFactory):
        _name = "cGcScannableComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcScannableComponent::Update"
    class GetPosition(HookFactory):
        _name = "cGcScannableComponent::GetPosition"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcScannableComponent::FindFirstTypedComponent"

class ComponentInstancercGcScannableComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcScannableComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcScannableComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcScannableComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcScannableComponent::DestructInstance"

class cGcDestructableComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcDestructableComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcDestructableComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcDestructableComponent::GetTypedComponent"
        _overload: overloads.cGcDestructableComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcDestructableComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetNumComponents(HookFactory):
        _name = "cGcDestructableComponent::GetNumComponents"
    class Destroy(HookFactory):
        _name = "cGcDestructableComponent::Destroy"
        _overload: overloads.cGcDestructableComponent.Destroy.overloads = "cGcDestructableComponent *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcDestructableComponent.Destroy.overloads):
            cls._overload = overload_args
            return cls
    class GivesResource(HookFactory):
        _name = "cGcDestructableComponent::GivesResource"
    class GetDiscoveryResource(HookFactory):
        _name = "cGcDestructableComponent::GetDiscoveryResource"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcDestructableComponent::FindFirstTypedComponent"
    class CleanUpDestructionNodes(HookFactory):
        _name = "cGcDestructableComponent::CleanUpDestructionNodes"
    class OnAttached(HookFactory):
        _name = "cGcDestructableComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcDestructableComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcDestructableComponent::Update"
    class DoGiveReward(HookFactory):
        _name = "cGcDestructableComponent::DoGiveReward"
    class DoLootReward(HookFactory):
        _name = "cGcDestructableComponent::DoLootReward"
    class DoGiveSubstances(HookFactory):
        _name = "cGcDestructableComponent::DoGiveSubstances"
    class GetDiscoveryReward(HookFactory):
        _name = "cGcDestructableComponent::GetDiscoveryReward"
    class PlayDestroyEffects(HookFactory):
        _name = "cGcDestructableComponent::PlayDestroyEffects"
    class RenderNGui(HookFactory):
        _name = "cGcDestructableComponent::RenderNGui"
    class CalculateDestroyEffectMatrices(HookFactory):
        _name = "cGcDestructableComponent::CalculateDestroyEffectMatrices"
    class RefreshPersistency(HookFactory):
        _name = "cGcDestructableComponent::RefreshPersistency"
    class GiveResourceFromDamage(HookFactory):
        _name = "cGcDestructableComponent::GiveResourceFromDamage"
    class ResetHidden(HookFactory):
        _name = "cGcDestructableComponent::ResetHidden"
    class GetPersistentInteractionBuffer(HookFactory):
        _name = "cGcDestructableComponent::GetPersistentInteractionBuffer"
    class Release(HookFactory):
        _name = "cGcDestructableComponent::Release"

class ComponentInstancercGcDestructableComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcDestructableComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcDestructableComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcDestructableComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcDestructableComponent::DestructInstance"

class ComponentLoadInstancercGcDestructableComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcDestructableComponent::Register"

class cGcGrabbableComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcGrabbableComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcGrabbableComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcGrabbableComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcGrabbableComponent::Release"
    class GetGrabbable(HookFactory):
        _name = "cGcGrabbableComponent::GetGrabbable"
    class Update(HookFactory):
        _name = "cGcGrabbableComponent::Update"
    class GetGrabbableData(HookFactory):
        _name = "cGcGrabbableComponent::GetGrabbableData"
    class GetTypedComponent(HookFactory):
        _name = "cGcGrabbableComponent::GetTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcGrabbableComponent::GetNumComponents"

class ComponentInstancercGcGrabbableComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcGrabbableComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcGrabbableComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcGrabbableComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcGrabbableComponent::DestructInstance"

class cGcSpaceshipEngineEffects:
    class Settings:
        class Settings(HookFactory):
            _name = "cGcSpaceshipEngineEffects::Settings::Settings"
    class cGcSpaceshipEngineEffects(HookFactory):
        _name = "cGcSpaceshipEngineEffects::cGcSpaceshipEngineEffects"
    class Destruct(HookFactory):
        _name = "cGcSpaceshipEngineEffects::Destruct"
    class Update(HookFactory):
        _name = "cGcSpaceshipEngineEffects::Update"
    class UpdateRender(HookFactory):
        _name = "cGcSpaceshipEngineEffects::UpdateRender"
    class UpdateTrailsResource(HookFactory):
        _name = "cGcSpaceshipEngineEffects::UpdateTrailsResource"
    class UpdateFreighterEngineEffectResource(HookFactory):
        _name = "cGcSpaceshipEngineEffects::UpdateFreighterEngineEffectResource"

class cGcAISpaceshipComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAISpaceshipComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAISpaceshipComponent::InitData"
    class cGcAISpaceshipComponent(HookFactory):
        _name = "cGcAISpaceshipComponent::cGcAISpaceshipComponent"
    class GetTypedComponent(HookFactory):
        _name = "cGcAISpaceshipComponent::GetTypedComponent"
        _overload: overloads.cGcAISpaceshipComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAISpaceshipComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcAISpaceshipComponent::FindFirstTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcAISpaceshipComponent::GetNumComponents"
    class IsAboutToWarp(HookFactory):
        _name = "cGcAISpaceshipComponent::IsAboutToWarp"
    class IsWarping(HookFactory):
        _name = "cGcAISpaceshipComponent::IsWarping"
    class GetClass(HookFactory):
        _name = "cGcAISpaceshipComponent::GetClass"
    class IsPositionInHangar(HookFactory):
        _name = "cGcAISpaceshipComponent::IsPositionInHangar"
    class GetResourceSeed(HookFactory):
        _name = "cGcAISpaceshipComponent::GetResourceSeed"
    class OnAttached(HookFactory):
        _name = "cGcAISpaceshipComponent::OnAttached"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcAISpaceshipComponent::NetSerializeOnInit"
    class Prepare(HookFactory):
        _name = "cGcAISpaceshipComponent::Prepare"
    class DockPlayerShips(HookFactory):
        _name = "cGcAISpaceshipComponent::DockPlayerShips"
    class IsPlayerShipDockedInFreighter(HookFactory):
        _name = "cGcAISpaceshipComponent::IsPlayerShipDockedInFreighter"
    class Update(HookFactory):
        _name = "cGcAISpaceshipComponent::Update"
    class UpdateVisibility(HookFactory):
        _name = "cGcAISpaceshipComponent::UpdateVisibility"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcAISpaceshipComponent::UpdatePostPhysics"
    class Release(HookFactory):
        _name = "cGcAISpaceshipComponent::Release"
    class IsLeader(HookFactory):
        _name = "cGcAISpaceshipComponent::IsLeader"
    class FireLasers(HookFactory):
        _name = "cGcAISpaceshipComponent::FireLasers"
    class SetAttackDefinition(HookFactory):
        _name = "cGcAISpaceshipComponent::SetAttackDefinition"
    class Attack(HookFactory):
        _name = "cGcAISpaceshipComponent::Attack"
    class FireProjectiles(HookFactory):
        _name = "cGcAISpaceshipComponent::FireProjectiles"
    class NotifyNetworkOfAttack(HookFactory):
        _name = "cGcAISpaceshipComponent::NotifyNetworkOfAttack"
    class GetFaction(HookFactory):
        _name = "cGcAISpaceshipComponent::GetFaction"
    class GetRole(HookFactory):
        _name = "cGcAISpaceshipComponent::GetRole"
    class IsFrigateFlyby(HookFactory):
        _name = "cGcAISpaceshipComponent::IsFrigateFlyby"
    class SetInactive(HookFactory):
        _name = "cGcAISpaceshipComponent::SetInactive"
    class GetInventoryStore(HookFactory):
        _name = "cGcAISpaceshipComponent::GetInventoryStore"
    class GetTechOnlyInventoryStore(HookFactory):
        _name = "cGcAISpaceshipComponent::GetTechOnlyInventoryStore"
    class GetCargoInventoryStore(HookFactory):
        _name = "cGcAISpaceshipComponent::GetCargoInventoryStore"
    class GenerateInventory(HookFactory):
        _name = "cGcAISpaceshipComponent::GenerateInventory"
    class ActivateAlarm(HookFactory):
        _name = "cGcAISpaceshipComponent::ActivateAlarm"
    class GetCommander(HookFactory):
        _name = "cGcAISpaceshipComponent::GetCommander"
    class RequestFadeIn(HookFactory):
        _name = "cGcAISpaceshipComponent::RequestFadeIn"
    class RequestWarpIn(HookFactory):
        _name = "cGcAISpaceshipComponent::RequestWarpIn"
    class RequestWarpOut(HookFactory):
        _name = "cGcAISpaceshipComponent::RequestWarpOut"
    class AmInterestedInOwnership(HookFactory):
        _name = "cGcAISpaceshipComponent::AmInterestedInOwnership"
    class SetShipVisible(HookFactory):
        _name = "cGcAISpaceshipComponent::SetShipVisible"
    class OverrideData(HookFactory):
        _name = "cGcAISpaceshipComponent::OverrideData"
    class OnOwnershipTransfer(HookFactory):
        _name = "cGcAISpaceshipComponent::OnOwnershipTransfer"
    class StartDocked(HookFactory):
        _name = "cGcAISpaceshipComponent::StartDocked"
    class TakeDamage(HookFactory):
        _name = "cGcAISpaceshipComponent::TakeDamage"
    class TakeOffAndWarpOutCrashedShip(HookFactory):
        _name = "cGcAISpaceshipComponent::TakeOffAndWarpOutCrashedShip"
    class SpawnPilotNPC(HookFactory):
        _name = "cGcAISpaceshipComponent::SpawnPilotNPC"
    class RequestNPCSpawn(HookFactory):
        _name = "cGcAISpaceshipComponent::RequestNPCSpawn"
    class SwitchToComplexCollision(HookFactory):
        _name = "cGcAISpaceshipComponent::SwitchToComplexCollision"
    class AddNavigationArea(HookFactory):
        _name = "cGcAISpaceshipComponent::AddNavigationArea"
    class RemoveNavigationArea(HookFactory):
        _name = "cGcAISpaceshipComponent::RemoveNavigationArea"
    class UpdateFreighterVisibility(HookFactory):
        _name = "cGcAISpaceshipComponent::UpdateFreighterVisibility"
    class OnHitCallback(HookFactory):
        _name = "cGcAISpaceshipComponent::OnHitCallback"
    class OnHitEnergyShieldCallback(HookFactory):
        _name = "cGcAISpaceshipComponent::OnHitEnergyShieldCallback"
    class UpdateRender(HookFactory):
        _name = "cGcAISpaceshipComponent::UpdateRender"
    class GetLaserDamageLevel(HookFactory):
        _name = "cGcAISpaceshipComponent::GetLaserDamageLevel"
    class IsAbandoned(HookFactory):
        _name = "cGcAISpaceshipComponent::IsAbandoned"
    class HasComponent(HookFactory):
        _name = "cGcAISpaceshipComponent::HasComponent"

class ComponentInstancercGcAISpaceshipComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcAISpaceshipComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcAISpaceshipComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAISpaceshipComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcAISpaceshipComponent::DestructInstance"

class cGcStagedJetEngine:
    class cGcStagedJetEngine(HookFactory):
        _name = "cGcStagedJetEngine::cGcStagedJetEngine"
    class Prepare(HookFactory):
        _name = "cGcStagedJetEngine::Prepare"
    class AddJetStage(HookFactory):
        _name = "cGcStagedJetEngine::AddJetStage"
    class UpdatePower(HookFactory):
        _name = "cGcStagedJetEngine::UpdatePower"
    class UpdateStage(HookFactory):
        _name = "cGcStagedJetEngine::UpdateStage"
    class UpdateLight(HookFactory):
        _name = "cGcStagedJetEngine::UpdateLight"
    class Release(HookFactory):
        _name = "cGcStagedJetEngine::Release"

class cGcAudioEmitterScaffold:
    class cGcAudioEmitterScaffold(HookFactory):
        _name = "cGcAudioEmitterScaffold::cGcAudioEmitterScaffold"
    class Prepare(HookFactory):
        _name = "cGcAudioEmitterScaffold::Prepare"
    class Release(HookFactory):
        _name = "cGcAudioEmitterScaffold::Release"
    class Update(HookFactory):
        _name = "cGcAudioEmitterScaffold::Update"

class ComponentLoadInstancercGcAISpaceshipComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcAISpaceshipComponent::Register"

class cGcSpaceshipWeapons:
    class UsingAmmo(HookFactory):
        _name = "cGcSpaceshipWeapons::UsingAmmo"
    class IsReloading(HookFactory):
        _name = "cGcSpaceshipWeapons::IsReloading"
    class GetHeatFactor(HookFactory):
        _name = "cGcSpaceshipWeapons::GetHeatFactor"
    class HasOverheated(HookFactory):
        _name = "cGcSpaceshipWeapons::HasOverheated"
    class GetLastFireTime(HookFactory):
        _name = "cGcSpaceshipWeapons::GetLastFireTime"
    class GetLastModeChangeTime(HookFactory):
        _name = "cGcSpaceshipWeapons::GetLastModeChangeTime"
    class GetModeIndex(HookFactory):
        _name = "cGcSpaceshipWeapons::GetModeIndex"
    class SetModeIndex(HookFactory):
        _name = "cGcSpaceshipWeapons::SetModeIndex"
    class GetPrimaryStat(HookFactory):
        _name = "cGcSpaceshipWeapons::GetPrimaryStat"
    class IsCriticalShot(HookFactory):
        _name = "cGcSpaceshipWeapons::IsCriticalShot"
    class GetListOfModesIfActiveOrNot(HookFactory):
        _name = "cGcSpaceshipWeapons::GetListOfModesIfActiveOrNot"
    class cGcSpaceshipWeapons(HookFactory):
        _name = "cGcSpaceshipWeapons::cGcSpaceshipWeapons"
    class ClearLockTarget(HookFactory):
        _name = "cGcSpaceshipWeapons::ClearLockTarget"
    class Construct(HookFactory):
        _name = "cGcSpaceshipWeapons::Construct"
    class Prepare(HookFactory):
        _name = "cGcSpaceshipWeapons::Prepare"
    class GetCurrentShootPoints(HookFactory):
        _name = "cGcSpaceshipWeapons::GetCurrentShootPoints"
    class Update(HookFactory):
        _name = "cGcSpaceshipWeapons::Update"
    class UpdateAutoLockTarget(HookFactory):
        _name = "cGcSpaceshipWeapons::UpdateAutoLockTarget"
    class UpdateManualLockTarget(HookFactory):
        _name = "cGcSpaceshipWeapons::UpdateManualLockTarget"
    class UpdateRender(HookFactory):
        _name = "cGcSpaceshipWeapons::UpdateRender"
    class Release(HookFactory):
        _name = "cGcSpaceshipWeapons::Release"
    class CycleWeapon(HookFactory):
        _name = "cGcSpaceshipWeapons::CycleWeapon"
    class GetReloadProgress(HookFactory):
        _name = "cGcSpaceshipWeapons::GetReloadProgress"
    class GetOverheatProgress(HookFactory):
        _name = "cGcSpaceshipWeapons::GetOverheatProgress"
    class GetDamageTypeForMode(HookFactory):
        _name = "cGcSpaceshipWeapons::GetDamageTypeForMode"
    class GetActiveInventoryItem(HookFactory):
        _name = "cGcSpaceshipWeapons::GetActiveInventoryItem"
    class IsProjectile(HookFactory):
        _name = "cGcSpaceshipWeapons::IsProjectile"
    class GetWeaponSpeed(HookFactory):
        _name = "cGcSpaceshipWeapons::GetWeaponSpeed"
    class GetWeaponRange(HookFactory):
        _name = "cGcSpaceshipWeapons::GetWeaponRange"
    class RenderImGui(HookFactory):
        _name = "cGcSpaceshipWeapons::RenderImGui"
    class IsPotentialTarget(HookFactory):
        _name = "cGcSpaceshipWeapons::IsPotentialTarget"
    class TurnOffWeapons(HookFactory):
        _name = "cGcSpaceshipWeapons::TurnOffWeapons"
    class GetDamagePotential(HookFactory):
        _name = "cGcSpaceshipWeapons::GetDamagePotential"
    class GetAverageBarrelPos(HookFactory):
        _name = "cGcSpaceshipWeapons::GetAverageBarrelPos"
    class CanFire(HookFactory):
        _name = "cGcSpaceshipWeapons::CanFire"
    class GetAlertPoint(HookFactory):
        _name = "cGcSpaceshipWeapons::GetAlertPoint"
    class GetOverHeatTime(HookFactory):
        _name = "cGcSpaceshipWeapons::GetOverHeatTime"
    class GetHeatWarningFactor(HookFactory):
        _name = "cGcSpaceshipWeapons::GetHeatWarningFactor"
    class HasWeapon(HookFactory):
        _name = "cGcSpaceshipWeapons::HasWeapon"
    class CalculateDPS(HookFactory):
        _name = "cGcSpaceshipWeapons::CalculateDPS"
    class CalculateDamagePerHit(HookFactory):
        _name = "cGcSpaceshipWeapons::CalculateDamagePerHit"
    class GetInventoryItemForShot(HookFactory):
        _name = "cGcSpaceshipWeapons::GetInventoryItemForShot"
    class ReportFailureToFire(HookFactory):
        _name = "cGcSpaceshipWeapons::ReportFailureToFire"

class hknpLodShapeFunctions:
    class estimateNumShapeKeys(HookFactory):
        _name = "hknpLodShapeFunctions::estimateNumShapeKeys"
    class getMutationSignals(HookFactory):
        _name = "hknpLodShapeFunctions::getMutationSignals"
    class getReflectType(HookFactory):
        _name = "hknpLodShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpLodShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpLodShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpLodShapeFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpLodShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpLodShapeFunctions::calcBoundingSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpLodShapeFunctions::calcMinAngleBetweenFaces"
    class castRay(HookFactory):
        _name = "hknpLodShapeFunctions::castRay"
    class getLeafShapes(HookFactory):
        _name = "hknpLodShapeFunctions::getLeafShapes"
    class getMassProperties(HookFactory):
        _name = "hknpLodShapeFunctions::getMassProperties"
    class getTypeName(HookFactory):
        _name = "hknpLodShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpLodShapeFunctions::makeClone"
    class queryAabb(HookFactory):
        _name = "hknpLodShapeFunctions::queryAabb"
        _overload: overloads.hknpLodShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpLodShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class cGcSpaceshipComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSpaceshipComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSpaceshipComponent::InitData"
    class cGcSpaceshipComponent(HookFactory):
        _name = "cGcSpaceshipComponent::cGcSpaceshipComponent"
    class GetData(HookFactory):
        _name = "cGcSpaceshipComponent::GetData"
    class GetTypedComponent(HookFactory):
        _name = "cGcSpaceshipComponent::GetTypedComponent"
        _overload: overloads.cGcSpaceshipComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcSpaceshipComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetNumComponents(HookFactory):
        _name = "cGcSpaceshipComponent::GetNumComponents"
    class GetInWorldLocator(HookFactory):
        _name = "cGcSpaceshipComponent::GetInWorldLocator"
    class IsFollowModeActive(HookFactory):
        _name = "cGcSpaceshipComponent::IsFollowModeActive"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcSpaceshipComponent::FindFirstTypedComponent"
    class DisableAlignWaitingForFrosting(HookFactory):
        _name = "cGcSpaceshipComponent::DisableAlignWaitingForFrosting"
    class OnAttached(HookFactory):
        _name = "cGcSpaceshipComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSpaceshipComponent::Prepare"
    class CheckForDocked(HookFactory):
        _name = "cGcSpaceshipComponent::CheckForDocked"
    class Update(HookFactory):
        _name = "cGcSpaceshipComponent::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcSpaceshipComponent::UpdatePostPhysics"
    class Release(HookFactory):
        _name = "cGcSpaceshipComponent::Release"
    class TakeControl(HookFactory):
        _name = "cGcSpaceshipComponent::TakeControl"
    class Eject(HookFactory):
        _name = "cGcSpaceshipComponent::Eject"
    class SetPilotedCollisionFlags(HookFactory):
        _name = "cGcSpaceshipComponent::SetPilotedCollisionFlags"
    class CalculateFreighterApproachFactor(HookFactory):
        _name = "cGcSpaceshipComponent::CalculateFreighterApproachFactor"
    class CheckCrashEffectActivationState(HookFactory):
        _name = "cGcSpaceshipComponent::CheckCrashEffectActivationState"
    class UseThirdPersonCamera(HookFactory):
        _name = "cGcSpaceshipComponent::UseThirdPersonCamera"
    class IsWithinAtmosphericCombatRange(HookFactory):
        _name = "cGcSpaceshipComponent::IsWithinAtmosphericCombatRange"
    class GetTakeOffCost(HookFactory):
        _name = "cGcSpaceshipComponent::GetTakeOffCost"
    class HasValidLandingSite(HookFactory):
        _name = "cGcSpaceshipComponent::HasValidLandingSite"
    class GetCockpitCameraLocatorPos(HookFactory):
        _name = "cGcSpaceshipComponent::GetCockpitCameraLocatorPos"
    class GetCockpitCameraLocatorRenderSpaceOffsetPos(HookFactory):
        _name = "cGcSpaceshipComponent::GetCockpitCameraLocatorRenderSpaceOffsetPos"
    class GetCockpitPlayerLocatorMatrix(HookFactory):
        _name = "cGcSpaceshipComponent::GetCockpitPlayerLocatorMatrix"
    class NetSerialize(HookFactory):
        _name = "cGcSpaceshipComponent::NetSerialize"
    class GetVelocity(HookFactory):
        _name = "cGcSpaceshipComponent::GetVelocity"
    class GetWeaponRange(HookFactory):
        _name = "cGcSpaceshipComponent::GetWeaponRange"
    class SetupClassControlBonuses(HookFactory):
        _name = "cGcSpaceshipComponent::SetupClassControlBonuses"
    class UpdateControlled(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateControlled"
    class UpdateHeightSmoothing(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateHeightSmoothing"
    class UpdateForwardCollisionCasts(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateForwardCollisionCasts"
    class UpdateCockpit(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateCockpit"
    class CanBeDestroyedByShip(HookFactory):
        _name = "cGcSpaceshipComponent::CanBeDestroyedByShip"
    class CalculateSafeLanding(HookFactory):
        _name = "cGcSpaceshipComponent::CalculateSafeLanding"
    class TakeDamage(HookFactory):
        _name = "cGcSpaceshipComponent::TakeDamage"
    class SetEngineIgnition(HookFactory):
        _name = "cGcSpaceshipComponent::SetEngineIgnition"
    class UseTakeOffFuel(HookFactory):
        _name = "cGcSpaceshipComponent::UseTakeOffFuel"
    class IsDockingLandingOrTakingOff(HookFactory):
        _name = "cGcSpaceshipComponent::IsDockingLandingOrTakingOff"
    class IsLanding(HookFactory):
        _name = "cGcSpaceshipComponent::IsLanding"
    class IsOnGround(HookFactory):
        _name = "cGcSpaceshipComponent::IsOnGround"
    class HasWorkingEngine(HookFactory):
        _name = "cGcSpaceshipComponent::HasWorkingEngine"
    class CanTakeOff(HookFactory):
        _name = "cGcSpaceshipComponent::CanTakeOff"
    class ReportCannotTakeOff(HookFactory):
        _name = "cGcSpaceshipComponent::ReportCannotTakeOff"
    class UpdateHover(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateHover"
    class GetDockOutpost(HookFactory):
        _name = "cGcSpaceshipComponent::GetDockOutpost"
    class IsWithinDistanceAndAngleRange(HookFactory):
        _name = "cGcSpaceshipComponent::IsWithinDistanceAndAngleRange"
    class IsOutsideDistanceAndAngleRange(HookFactory):
        _name = "cGcSpaceshipComponent::IsOutsideDistanceAndAngleRange"
    class CanDock(HookFactory):
        _name = "cGcSpaceshipComponent::CanDock"
    class RenderNGui(HookFactory):
        _name = "cGcSpaceshipComponent::RenderNGui"
    class UpdateRender(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateRender"
    class UpdateLanding(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateLanding"
    class OnLandingGroundManeuvreComplete(HookFactory):
        _name = "cGcSpaceshipComponent::OnLandingGroundManeuvreComplete"
    class SetLanding(HookFactory):
        _name = "cGcSpaceshipComponent::SetLanding"
        _overload: overloads.cGcSpaceshipComponent.SetLanding.overloads = "cGcSpaceshipComponent *, cGcOutpostComponent *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcSpaceshipComponent.SetLanding.overloads):
            cls._overload = overload_args
            return cls
    class SetTakeOff(HookFactory):
        _name = "cGcSpaceshipComponent::SetTakeOff"
    class GetFoVSpring(HookFactory):
        _name = "cGcSpaceshipComponent::GetFoVSpring"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcSpaceshipComponent::GetPhysicsMatrix"
    class GetRigidBody(HookFactory):
        _name = "cGcSpaceshipComponent::GetRigidBody"
    class BecomeActivelyFlying(HookFactory):
        _name = "cGcSpaceshipComponent::BecomeActivelyFlying"
    class ThrustActive(HookFactory):
        _name = "cGcSpaceshipComponent::ThrustActive"
    class BrakeActive(HookFactory):
        _name = "cGcSpaceshipComponent::BrakeActive"
    class UpdateJoysticks(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateJoysticks"
    class ShouldDelayTakeOff(HookFactory):
        _name = "cGcSpaceshipComponent::ShouldDelayTakeOff"
    class IsHoldingControlStick(HookFactory):
        _name = "cGcSpaceshipComponent::IsHoldingControlStick"
    class DisplayPulseDriveWarning(HookFactory):
        _name = "cGcSpaceshipComponent::DisplayPulseDriveWarning"
    class AllowedToMoveGrabbable(HookFactory):
        _name = "cGcSpaceshipComponent::AllowedToMoveGrabbable"
    class GetSalvageValue(HookFactory):
        _name = "cGcSpaceshipComponent::GetSalvageValue"
    class GetVolumetricLightStrength(HookFactory):
        _name = "cGcSpaceshipComponent::GetVolumetricLightStrength"
    class SetVolumetricLightStrength(HookFactory):
        _name = "cGcSpaceshipComponent::SetVolumetricLightStrength"
    class Salvage(HookFactory):
        _name = "cGcSpaceshipComponent::Salvage"
    class UpdateVisibility(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateVisibility"
    class DoThirdPersonWarpWander(HookFactory):
        _name = "cGcSpaceshipComponent::DoThirdPersonWarpWander"
    class UpdateVolumetricLights(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateVolumetricLights"
    class UpdateFollowModeState(HookFactory):
        _name = "cGcSpaceshipComponent::UpdateFollowModeState"
    class IsInverted(HookFactory):
        _name = "cGcSpaceshipComponent::IsInverted"
    class IsLow(HookFactory):
        _name = "cGcSpaceshipComponent::IsLow"
    class TriggerTakeOffLandingVibration(HookFactory):
        _name = "cGcSpaceshipComponent::TriggerTakeOffLandingVibration"
    class GetShipCentreMatrix(HookFactory):
        _name = "cGcSpaceshipComponent::GetShipCentreMatrix"
    class OnHit(HookFactory):
        _name = "cGcSpaceshipComponent::OnHit"

class ComponentInstancercGcSpaceshipComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcSpaceshipComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSpaceshipComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSpaceshipComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcSpaceshipComponent::DestructInstance"

class cGcVehicleCockpit:
    class cGcVehicleCockpit(HookFactory):
        _name = "cGcVehicleCockpit::cGcVehicleCockpit"
    class SetGlassFrosted(HookFactory):
        _name = "cGcVehicleCockpit::SetGlassFrosted"
    class GetScaleFromCockpitLocator(HookFactory):
        _name = "cGcVehicleCockpit::GetScaleFromCockpitLocator"
    class Construct(HookFactory):
        _name = "cGcVehicleCockpit::Construct"
    class AddCockpit(HookFactory):
        _name = "cGcVehicleCockpit::AddCockpit"
    class RemoveCockpit(HookFactory):
        _name = "cGcVehicleCockpit::RemoveCockpit"
    class Release(HookFactory):
        _name = "cGcVehicleCockpit::Release"
    class SetStoppedVFXNodesEnabled(HookFactory):
        _name = "cGcVehicleCockpit::SetStoppedVFXNodesEnabled"
    class UpdateLoading(HookFactory):
        _name = "cGcVehicleCockpit::UpdateLoading"
    class DoEnter(HookFactory):
        _name = "cGcVehicleCockpit::DoEnter"
    class DoExit(HookFactory):
        _name = "cGcVehicleCockpit::DoExit"
    class RayTestForExitPoint(HookFactory):
        _name = "cGcVehicleCockpit::RayTestForExitPoint"
    class UpdateActiveAnimation(HookFactory):
        _name = "cGcVehicleCockpit::UpdateActiveAnimation"
    class EndActiveAnimation(HookFactory):
        _name = "cGcVehicleCockpit::EndActiveAnimation"
    class FinaliseExit(HookFactory):
        _name = "cGcVehicleCockpit::FinaliseExit"
    class OnStoppedMoving(HookFactory):
        _name = "cGcVehicleCockpit::OnStoppedMoving"
    class Update(HookFactory):
        _name = "cGcVehicleCockpit::Update"
    class UpdateTransform(HookFactory):
        _name = "cGcVehicleCockpit::UpdateTransform"
    class UpdateSpeedMesh(HookFactory):
        _name = "cGcVehicleCockpit::UpdateSpeedMesh"
    class UpdateAtmosphere(HookFactory):
        _name = "cGcVehicleCockpit::UpdateAtmosphere"
    class SetVisibility(HookFactory):
        _name = "cGcVehicleCockpit::SetVisibility"
    class RenderNGui(HookFactory):
        _name = "cGcVehicleCockpit::RenderNGui"

class cGcCustomisationComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCustomisationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCustomisationComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcCustomisationComponent::Prepare"

class ComponentInstancercGcCustomisationComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCustomisationComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCustomisationComponent::ConstructInstance"

class ComponentLoadInstancercGcCustomisationComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcCustomisationComponent::Register"

class cTkTemplatedComponentUpdater:
    class OnInit(HookFactory):
        _templates = ("T0", )
        _name = "cTkTemplatedComponentUpdater<{T0}>::OnInit"
    class UpdateComponentsRender(HookFactory):
        _templates = ("T0", )
        _name = "cTkTemplatedComponentUpdater<{T0}>::UpdateComponentsRender"
    class UpdateComponentsPostPhysics(HookFactory):
        _templates = ("T0", )
        _name = "cTkTemplatedComponentUpdater<{T0}>::UpdateComponentsPostPhysics"
    class UpdateComponents(HookFactory):
        _templates = ("T0", )
        _name = "cTkTemplatedComponentUpdater<{T0}>::UpdateComponents"

class cTkReplicatedVariable:
    class IsOwned(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariable<{T0}>::IsOwned"
    class Construct(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariable<{T0}>::Construct"
    class IsLocalPlayerEntityOwner(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariable<{T0}>::IsLocalPlayerEntityOwner"

class cTkReplicatedVariableTemplated:
    class SerializeOrDeserialize(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariableTemplated<{T0}>::SerializeOrDeserialize"
    class Set(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariableTemplated<{T0}>::Set"

class cTkQuadVertex:
    class cTkQuadVertex(HookFactory):
        _name = "cTkQuadVertex::cTkQuadVertex"

class cTkDynamicArray:
    class Deallocate(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::Deallocate"
    class GetSize(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::GetSize"
    class Allocate(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::Allocate"
    class AllocateAndCopyFrom(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::AllocateAndCopyFrom"
    class begin(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::begin"
    class end(HookFactory):
        _templates = ("T0", )
        _name = "cTkDynamicArray<{T0}>::end"

class cTkStringUtilities:
    class CopyIntoBuffer(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::CopyIntoBuffer"
    class InsertCharacter(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::InsertCharacter"
    class Remove(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::Remove"
    class ReplaceAll(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::ReplaceAll"
    class Replace(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::Replace"
    class InsertPrefix(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::InsertPrefix"
    class ShiftLeft(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::ShiftLeft"
    class InsertString(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::InsertString"
    class FormatNumberLocalised(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::FormatNumberLocalised"
    class IsEmpty(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::IsEmpty"
    class TrimRightPreserveTags(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::TrimRightPreserveTags"
    class GetDecimalCharacter(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::GetDecimalCharacter"
    class GetNumericalSeparator(HookFactory):
        _templates = ("T0", )
        _name = "cTkStringUtilities<{T0}>::GetNumericalSeparator"

class cGcAsteroidTypeMask:
    class cGcAsteroidTypeMask(HookFactory):
        _name = "cGcAsteroidTypeMask::cGcAsteroidTypeMask"

class cGcDebugEditor:
    class IsActive(HookFactory):
        _name = "cGcDebugEditor::IsActive"
    class GetSelectedNode(HookFactory):
        _name = "cGcDebugEditor::GetSelectedNode"
    class Update(HookFactory):
        _name = "cGcDebugEditor::Update"
    class Deactivate(HookFactory):
        _name = "cGcDebugEditor::Deactivate"
    class Activate(HookFactory):
        _name = "cGcDebugEditor::Activate"
    class CalculatePlaceMatrix(HookFactory):
        _name = "cGcDebugEditor::CalculatePlaceMatrix"

class cGcPortalComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPortalComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPortalComponent::InitData"
    class GetNumComponents(HookFactory):
        _name = "cGcPortalComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcPortalComponent::GetTypedComponent"
        _overload: overloads.cGcPortalComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPortalComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class PortalNguiCallback(HookFactory):
        _name = "cGcPortalComponent::PortalNguiCallback"
    class OnAttached(HookFactory):
        _name = "cGcPortalComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcPortalComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcPortalComponent::Update"
    class WarpPlayer(HookFactory):
        _name = "cGcPortalComponent::WarpPlayer"
    class ActivateRune(HookFactory):
        _name = "cGcPortalComponent::ActivateRune"
    class ActivateRuneInternal(HookFactory):
        _name = "cGcPortalComponent::ActivateRuneInternal"
    class Release(HookFactory):
        _name = "cGcPortalComponent::Release"
    class IsCommunityPortal(HookFactory):
        _name = "cGcPortalComponent::IsCommunityPortal"
    class ResetTerminal(HookFactory):
        _name = "cGcPortalComponent::ResetTerminal"
    class ResetEverythingExceptTerminal(HookFactory):
        _name = "cGcPortalComponent::ResetEverythingExceptTerminal"
    class DisablePortalInteraction(HookFactory):
        _name = "cGcPortalComponent::DisablePortalInteraction"

class ComponentInstancercGcPortalComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcPortalComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPortalComponent::ConstructInstance"

class ComponentInstancercGcTriggerActionComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcTriggerActionComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcTriggerActionComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcTriggerActionComponent::ConstructInstance"

class ComponentInstancercGcSimpleIkRecoilComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcSimpleIkRecoilComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcSimpleIkRecoilComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSimpleIkRecoilComponent::ConstructInstance"

class cTkDebugRenderer:
    class ClearBuffers(HookFactory):
        _name = "cTkDebugRenderer::ClearBuffers"
    class Construct(HookFactory):
        _name = "cTkDebugRenderer::Construct"
    class RegisterLogMessage(HookFactory):
        _name = "cTkDebugRenderer::RegisterLogMessage"
    class RegisterText3D(HookFactory):
        _name = "cTkDebugRenderer::RegisterText3D"

class cGcGraphicsManager:
    class UpdateRender(HookFactory):
        _name = "cGcGraphicsManager::UpdateRender"
    class cGcGraphicsManager(HookFactory):
        _name = "cGcGraphicsManager::cGcGraphicsManager"
    class Construct(HookFactory):
        _name = "cGcGraphicsManager::Construct"
    class Destruct(HookFactory):
        _name = "cGcGraphicsManager::Destruct"
    class Prepare(HookFactory):
        _name = "cGcGraphicsManager::Prepare"
    class Update(HookFactory):
        _name = "cGcGraphicsManager::Update"
    class SetShaderUniformDefault(HookFactory):
        _name = "cGcGraphicsManager::SetShaderUniformDefault"
        _overload: overloads.cGcGraphicsManager.SetShaderUniformDefault.overloads = "cGcGraphicsManager *, const char *, double, double, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGraphicsManager.SetShaderUniformDefault.overloads):
            cls._overload = overload_args
            return cls
    class SetShaderUniformArrayDefault(HookFactory):
        _name = "cGcGraphicsManager::SetShaderUniformArrayDefault"
    class LoadSequenceNvgOverlay(HookFactory):
        _name = "cGcGraphicsManager::LoadSequenceNvgOverlay"
    class RenderMemoryPoolOverlayNVG(HookFactory):
        _name = "cGcGraphicsManager::RenderMemoryPoolOverlayNVG"
    class UpdateAntiAliasingSettings(HookFactory):
        _name = "cGcGraphicsManager::UpdateAntiAliasingSettings"
    class ModelViewAllowedComponentsCallback(HookFactory):
        _name = "cGcGraphicsManager::ModelViewAllowedComponentsCallback"
    class ModelViewAttachmentPrepareCallback(HookFactory):
        _name = "cGcGraphicsManager::ModelViewAttachmentPrepareCallback"

class cGcMaintenanceComponent:
    class RefreshPersistency(HookFactory):
        _name = "cGcMaintenanceComponent::RefreshPersistency"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcMaintenanceComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcMaintenanceComponent::InitData"
    class cGcMaintenanceComponent(HookFactory):
        _name = "cGcMaintenanceComponent::cGcMaintenanceComponent"
    class GetTypedComponent(HookFactory):
        _name = "cGcMaintenanceComponent::GetTypedComponent"
        _overload: overloads.cGcMaintenanceComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMaintenanceComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetNumComponents(HookFactory):
        _name = "cGcMaintenanceComponent::GetNumComponents"
    class SetModelNode(HookFactory):
        _name = "cGcMaintenanceComponent::SetModelNode"
    class GetInheritedTypedComponent(HookFactory):
        _name = "cGcMaintenanceComponent::GetInheritedTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcMaintenanceComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcMaintenanceComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcMaintenanceComponent::Update"
    class Release(HookFactory):
        _name = "cGcMaintenanceComponent::Release"
    class CanInteract(HookFactory):
        _name = "cGcMaintenanceComponent::CanInteract"
    class Interact(HookFactory):
        _name = "cGcMaintenanceComponent::Interact"
    class GetName(HookFactory):
        _name = "cGcMaintenanceComponent::GetName"
    class GetDescription(HookFactory):
        _name = "cGcMaintenanceComponent::GetDescription"
    class GetInWorldUIScale(HookFactory):
        _name = "cGcMaintenanceComponent::GetInWorldUIScale"
    class GetInWorldUIMinDistOverride(HookFactory):
        _name = "cGcMaintenanceComponent::GetInWorldUIMinDistOverride"
    class GetInWorldUIForcedOffset(HookFactory):
        _name = "cGcMaintenanceComponent::GetInWorldUIForcedOffset"
    class UseInWorldUICameraUp(HookFactory):
        _name = "cGcMaintenanceComponent::UseInWorldUICameraUp"
    class GetMaintenanceSlotPosition(HookFactory):
        _name = "cGcMaintenanceComponent::GetMaintenanceSlotPosition"
    class GetModelViewerRenderData(HookFactory):
        _name = "cGcMaintenanceComponent::GetModelViewerRenderData"
    class UsePlayerCam(HookFactory):
        _name = "cGcMaintenanceComponent::UsePlayerCam"
    class UseAlignToCamera(HookFactory):
        _name = "cGcMaintenanceComponent::UseAlignToCamera"
    class RevertAllSlots(HookFactory):
        _name = "cGcMaintenanceComponent::RevertAllSlots"
    class CompleteAllSlots(HookFactory):
        _name = "cGcMaintenanceComponent::CompleteAllSlots"
    class Save(HookFactory):
        _name = "cGcMaintenanceComponent::Save"
    class DeleteSavedState(HookFactory):
        _name = "cGcMaintenanceComponent::DeleteSavedState"
    class LoadInventory(HookFactory):
        _name = "cGcMaintenanceComponent::LoadInventory"
    class Setup(HookFactory):
        _name = "cGcMaintenanceComponent::Setup"
    class Seed(HookFactory):
        _name = "cGcMaintenanceComponent::Seed"
    class UpdateRequiresMaintenance(HookFactory):
        _name = "cGcMaintenanceComponent::UpdateRequiresMaintenance"
    class GenerateInventoryElement(HookFactory):
        _name = "cGcMaintenanceComponent::GenerateInventoryElement"
    class CompleteItemRequirements(HookFactory):
        _name = "cGcMaintenanceComponent::CompleteItemRequirements"
    class StartDamageTimers(HookFactory):
        _name = "cGcMaintenanceComponent::StartDamageTimers"
    class GetSavePosition(HookFactory):
        _name = "cGcMaintenanceComponent::GetSavePosition"
    class GetPersistancyData(HookFactory):
        _name = "cGcMaintenanceComponent::GetPersistancyData"
    class PopulateMaintenanceInventoryContainer(HookFactory):
        _name = "cGcMaintenanceComponent::PopulateMaintenanceInventoryContainer"

class ComponentInstancercGcMaintenanceComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcMaintenanceComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcMaintenanceComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcMaintenanceComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcMaintenanceComponent::DestructInstance"

class cGcEggMachineComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcEggMachineComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcEggMachineComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcEggMachineComponent::DefaultRenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcEggMachineComponent::GetTypedComponent"
        _overload: overloads.cGcEggMachineComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcEggMachineComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetNumComponents(HookFactory):
        _name = "cGcEggMachineComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcEggMachineComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcEggMachineComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcEggMachineComponent::Update"
    class UpdateEggMachineState(HookFactory):
        _name = "cGcEggMachineComponent::UpdateEggMachineState"
    class GetAnimationStateValue(HookFactory):
        _name = "cGcEggMachineComponent::GetAnimationStateValue"
    class Interact(HookFactory):
        _name = "cGcEggMachineComponent::Interact"
    class PageOpened(HookFactory):
        _name = "cGcEggMachineComponent::PageOpened"
    class HasAnythingInInputs(HookFactory):
        _name = "cGcEggMachineComponent::HasAnythingInInputs"
    class HasValidInputInSlot(HookFactory):
        _name = "cGcEggMachineComponent::HasValidInputInSlot"
    class GetItemInSlot(HookFactory):
        _name = "cGcEggMachineComponent::GetItemInSlot"
    class PeekSlotMaxDosageForItem(HookFactory):
        _name = "cGcEggMachineComponent::PeekSlotMaxDosageForItem"
    class ValidateAndUpdateInputCreatureInfo(HookFactory):
        _name = "cGcEggMachineComponent::ValidateAndUpdateInputCreatureInfo"
    class UpdateOuputEgg(HookFactory):
        _name = "cGcEggMachineComponent::UpdateOuputEgg"
    class UpdateGrowthDosage(HookFactory):
        _name = "cGcEggMachineComponent::UpdateGrowthDosage"
    class UpdateTraitDosage(HookFactory):
        _name = "cGcEggMachineComponent::UpdateTraitDosage"
    class UpdateAccessoriesDosage(HookFactory):
        _name = "cGcEggMachineComponent::UpdateAccessoriesDosage"
    class UpdateColourDosage(HookFactory):
        _name = "cGcEggMachineComponent::UpdateColourDosage"
    class UpdateOutputEggScale(HookFactory):
        _name = "cGcEggMachineComponent::UpdateOutputEggScale"
    class UpdateOutputEggTraits(HookFactory):
        _name = "cGcEggMachineComponent::UpdateOutputEggTraits"
    class UpdateOutputEggAccessories(HookFactory):
        _name = "cGcEggMachineComponent::UpdateOutputEggAccessories"

class ComponentInstancercGcEggMachineComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcEggMachineComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcEggMachineComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcEggMachineComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcEggMachineComponent::DestructInstance"

class cGcFrontendManager:
    class RequestPage(HookFactory):
        _name = "cGcFrontendManager::RequestPage"
    class RequestPageWithHint(HookFactory):
        _name = "cGcFrontendManager::RequestPageWithHint"
    class MessageBoxData:
        class MessageBoxData(HookFactory):
            _name = "cGcFrontendManager::MessageBoxData::MessageBoxData"
    class cGcFrontendManager(HookFactory):
        _name = "cGcFrontendManager::cGcFrontendManager"
    class ShowMessageBox(HookFactory):
        _name = "cGcFrontendManager::ShowMessageBox"
    class RequestDeactivate(HookFactory):
        _name = "cGcFrontendManager::RequestDeactivate"
    class IsShopPage(HookFactory):
        _name = "cGcFrontendManager::IsShopPage"
    class GetPhotoModeUI(HookFactory):
        _name = "cGcFrontendManager::GetPhotoModeUI"
    class HasQueuedPage(HookFactory):
        _name = "cGcFrontendManager::HasQueuedPage"
    class QueuedFrontendPages:
        class PushPage(HookFactory):
            _name = "cGcFrontendManager::QueuedFrontendPages::PushPage"
    class QueueFrontendPage(HookFactory):
        _name = "cGcFrontendManager::QueueFrontendPage"
    class IsMenuPage(HookFactory):
        _name = "cGcFrontendManager::IsMenuPage"
    class PageGroup:
        class InGroup(HookFactory):
            _name = "cGcFrontendManager::PageGroup::InGroup"
        class GetNextPage(HookFactory):
            _name = "cGcFrontendManager::PageGroup::GetNextPage"
        class GetPreviousPage(HookFactory):
            _name = "cGcFrontendManager::PageGroup::GetPreviousPage"
    class Construct(HookFactory):
        _name = "cGcFrontendManager::Construct"
    class Preload(HookFactory):
        _name = "cGcFrontendManager::Preload"
    class Prepare(HookFactory):
        _name = "cGcFrontendManager::Prepare"
    class AssignButtonIcons(HookFactory):
        _name = "cGcFrontendManager::AssignButtonIcons"
    class AddFreighterToInventoryPage(HookFactory):
        _name = "cGcFrontendManager::AddFreighterToInventoryPage"
    class FinaliseDeactivation(HookFactory):
        _name = "cGcFrontendManager::FinaliseDeactivation"
    class UpdateRender(HookFactory):
        _name = "cGcFrontendManager::UpdateRender"
    class GetCurrentInitialPage(HookFactory):
        _name = "cGcFrontendManager::GetCurrentInitialPage"
    class Activate(HookFactory):
        _name = "cGcFrontendManager::Activate"
        _overload: overloads.cGcFrontendManager.Activate.overloads = "cGcFrontendManager *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendManager.Activate.overloads):
            cls._overload = overload_args
            return cls
    class LoadPage(HookFactory):
        _name = "cGcFrontendManager::LoadPage"
    class PreloadDirectory(HookFactory):
        _name = "cGcFrontendManager::PreloadDirectory"
    class RebuildInventoryGroups(HookFactory):
        _name = "cGcFrontendManager::RebuildInventoryGroups"
    class RebuildPauseGroup(HookFactory):
        _name = "cGcFrontendManager::RebuildPauseGroup"
    class UpdateAllowedInteractions(HookFactory):
        _name = "cGcFrontendManager::UpdateAllowedInteractions"
    class ShouldRenderCursor(HookFactory):
        _name = "cGcFrontendManager::ShouldRenderCursor"
    class InterpretPageLocID(HookFactory):
        _name = "cGcFrontendManager::InterpretPageLocID"
    class UpdateSubInventorySelection(HookFactory):
        _name = "cGcFrontendManager::UpdateSubInventorySelection"
    class RequestInteraction(HookFactory):
        _name = "cGcFrontendManager::RequestInteraction"
    class RequestMaintenancePage(HookFactory):
        _name = "cGcFrontendManager::RequestMaintenancePage"
    class DisplayTechMulti(HookFactory):
        _name = "cGcFrontendManager::DisplayTechMulti"
    class DisplayTech(HookFactory):
        _name = "cGcFrontendManager::DisplayTech"
    class DisplaySpecialProduct(HookFactory):
        _name = "cGcFrontendManager::DisplaySpecialProduct"
    class DisplayMessage(HookFactory):
        _name = "cGcFrontendManager::DisplayMessage"
    class TransferBetweenInventories(HookFactory):
        _name = "cGcFrontendManager::TransferBetweenInventories"
    class HandleInteractionsReset(HookFactory):
        _name = "cGcFrontendManager::HandleInteractionsReset"
    class TerminatePendingInteraction(HookFactory):
        _name = "cGcFrontendManager::TerminatePendingInteraction"
    class Deactivate(HookFactory):
        _name = "cGcFrontendManager::Deactivate"
    class IsShowingMissionHandInRewards(HookFactory):
        _name = "cGcFrontendManager::IsShowingMissionHandInRewards"
    class IsCurrentPageInventory(HookFactory):
        _name = "cGcFrontendManager::IsCurrentPageInventory"
    class AddDiscoveryThumbnailRequest(HookFactory):
        _name = "cGcFrontendManager::AddDiscoveryThumbnailRequest"
    class EnqueueRender3D(HookFactory):
        _name = "cGcFrontendManager::EnqueueRender3D"
    class Render2D(HookFactory):
        _name = "cGcFrontendManager::Render2D"
    class DrawCursor(HookFactory):
        _name = "cGcFrontendManager::DrawCursor"
    class DrawFrontendCursor(HookFactory):
        _name = "cGcFrontendManager::DrawFrontendCursor"
    class RenderPage(HookFactory):
        _name = "cGcFrontendManager::RenderPage"
    class RenderPCOSK(HookFactory):
        _name = "cGcFrontendManager::RenderPCOSK"
    class AreShipOperationsAllowed(HookFactory):
        _name = "cGcFrontendManager::AreShipOperationsAllowed"
    class AllowedToOpenFrontendPages(HookFactory):
        _name = "cGcFrontendManager::AllowedToOpenFrontendPages"
    class UpdateDialogBox(HookFactory):
        _name = "cGcFrontendManager::UpdateDialogBox"
    class ShowDialogBox(HookFactory):
        _name = "cGcFrontendManager::ShowDialogBox"
    class ShowQuitDialog(HookFactory):
        _name = "cGcFrontendManager::ShowQuitDialog"
    class IsInteractingWithCreature(HookFactory):
        _name = "cGcFrontendManager::IsInteractingWithCreature"

class cGcSlotIcon:
    class cGcSlotIcon(HookFactory):
        _name = "cGcSlotIcon::cGcSlotIcon"
    class Invalidate(HookFactory):
        _name = "cGcSlotIcon::Invalidate"

class MenuAction:
    class MenuAction(HookFactory):
        _name = "MenuAction::MenuAction"
        _overload: overloads.MenuAction.MenuAction.overloads = "MenuAction *"
        @classmethod
        def overload(cls, overload_args: overloads.MenuAction.MenuAction.overloads):
            cls._overload = overload_args
            return cls

class cGcBuildMenu:
    class HasParentMenu(HookFactory):
        _name = "cGcBuildMenu::HasParentMenu"
    class BuildGroups:
        class NavigateStart(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::NavigateStart"
        class NavigateUp(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::NavigateUp"
        class EnsureGroup(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::EnsureGroup"
        class SetObjectColourMaterialLink(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::SetObjectColourMaterialLink"
        class GetChildNodeIndex(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::GetChildNodeIndex"
        class SetObjectAvailable(HookFactory):
            _name = "cGcBuildMenu::BuildGroups::SetObjectAvailable"
    class sBuildOptionsGui:
        class Reset(HookFactory):
            _name = "cGcBuildMenu::sBuildOptionsGui::Reset"
    class Prepare(HookFactory):
        _name = "cGcBuildMenu::Prepare"
    class Update(HookFactory):
        _name = "cGcBuildMenu::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBuildMenu::UpdateRender"
    class Render(HookFactory):
        _name = "cGcBuildMenu::Render"
    class ShouldRenderCursor(HookFactory):
        _name = "cGcBuildMenu::ShouldRenderCursor"
    class Activate(HookFactory):
        _name = "cGcBuildMenu::Activate"
    class Close(HookFactory):
        _name = "cGcBuildMenu::Close"
    class TriggerClose(HookFactory):
        _name = "cGcBuildMenu::TriggerClose"
    class ShouldClose(HookFactory):
        _name = "cGcBuildMenu::ShouldClose"
    class UpdateControlsString(HookFactory):
        _name = "cGcBuildMenu::UpdateControlsString"
    class AllowedToOpenFrontendPages(HookFactory):
        _name = "cGcBuildMenu::AllowedToOpenFrontendPages"
    class SetBreadcrumb(HookFactory):
        _name = "cGcBuildMenu::SetBreadcrumb"
    class UpdateBaseIndex(HookFactory):
        _name = "cGcBuildMenu::UpdateBaseIndex"
    class UpdateContextualControls(HookFactory):
        _name = "cGcBuildMenu::UpdateContextualControls"
    class UpdateSelectionMode(HookFactory):
        _name = "cGcBuildMenu::UpdateSelectionMode"
    class UpdatePlacementMode(HookFactory):
        _name = "cGcBuildMenu::UpdatePlacementMode"
    class UpdateBrowseMode(HookFactory):
        _name = "cGcBuildMenu::UpdateBrowseMode"
    class BuildBuildingGroups(HookFactory):
        _name = "cGcBuildMenu::BuildBuildingGroups"
    class IsPointedAt(HookFactory):
        _name = "cGcBuildMenu::IsPointedAt"
    class SetPathToBreadcrumb(HookFactory):
        _name = "cGcBuildMenu::SetPathToBreadcrumb"
    class UpdateControlOptions(HookFactory):
        _name = "cGcBuildMenu::UpdateControlOptions"

class cGcGalaxyPathMenu:
    class UpdateControlsString(HookFactory):
        _name = "cGcGalaxyPathMenu::UpdateControlsString"
    class Update(HookFactory):
        _name = "cGcGalaxyPathMenu::Update"
    class Activate(HookFactory):
        _name = "cGcGalaxyPathMenu::Activate"
    class TriggerClose(HookFactory):
        _name = "cGcGalaxyPathMenu::TriggerClose"

class MessageBase:
    class MessageBase(HookFactory):
        _name = "MessageBase::MessageBase"

class cGcHUDManager:
    class GetQuickMenu(HookFactory):
        _name = "cGcHUDManager::GetQuickMenu"
    class cGcHUDManager(HookFactory):
        _name = "cGcHUDManager::cGcHUDManager"
    class GetNotifications(HookFactory):
        _name = "cGcHUDManager::GetNotifications"
    class StartFlash(HookFactory):
        _name = "cGcHUDManager::StartFlash"
    class ClearMissionUpUpdateMessages(HookFactory):
        _name = "cGcHUDManager::ClearMissionUpUpdateMessages"
    class GetChargingInventory(HookFactory):
        _name = "cGcHUDManager::GetChargingInventory"
    class HasActiveDetailMessage(HookFactory):
        _name = "cGcHUDManager::HasActiveDetailMessage"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcHUDManager::RenderNGuiCallback"
    class CollectedResource:
        class CollectedResource(HookFactory):
            _name = "cGcHUDManager::CollectedResource::CollectedResource"
        class CreateAmountString(HookFactory):
            _name = "cGcHUDManager::CollectedResource::CreateAmountString"
    class Construct(HookFactory):
        _name = "cGcHUDManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcHUDManager::Prepare"
    class Update(HookFactory):
        _name = "cGcHUDManager::Update"
    class UpdateSolidOverlayTransition(HookFactory):
        _name = "cGcHUDManager::UpdateSolidOverlayTransition"
    class UpdateSolidOverlayUniforms(HookFactory):
        _name = "cGcHUDManager::UpdateSolidOverlayUniforms"
    class UpdateRender(HookFactory):
        _name = "cGcHUDManager::UpdateRender"
    class IsStageActive(HookFactory):
        _name = "cGcHUDManager::IsStageActive"
    class EnqueueRender3D(HookFactory):
        _name = "cGcHUDManager::EnqueueRender3D"
    class RenderPostScene(HookFactory):
        _name = "cGcHUDManager::RenderPostScene"
    class RenderPostSceneTrackArrows(HookFactory):
        _name = "cGcHUDManager::RenderPostSceneTrackArrows"
    class RenderPostSceneStatMessages(HookFactory):
        _name = "cGcHUDManager::RenderPostSceneStatMessages"
    class RenderPostSceneOSDMessages(HookFactory):
        _name = "cGcHUDManager::RenderPostSceneOSDMessages"
    class RenderPostSceneSkipMessage(HookFactory):
        _name = "cGcHUDManager::RenderPostSceneSkipMessage"
    class RenderMessage(HookFactory):
        _name = "cGcHUDManager::RenderMessage"
    class RenderMessage_Internal(HookFactory):
        _name = "cGcHUDManager::RenderMessage_Internal"
    class RenderMissionMessage(HookFactory):
        _name = "cGcHUDManager::RenderMissionMessage"
    class RenderMissionDetailMessage(HookFactory):
        _name = "cGcHUDManager::RenderMissionDetailMessage"
    class RenderNotifications(HookFactory):
        _name = "cGcHUDManager::RenderNotifications"
    class RenderNGui(HookFactory):
        _name = "cGcHUDManager::RenderNGui"
    class UpdateThumbnailQueue(HookFactory):
        _name = "cGcHUDManager::UpdateThumbnailQueue"
    class GetModelResourceRenderer(HookFactory):
        _name = "cGcHUDManager::GetModelResourceRenderer"
    class EnqueueRenderThumbnailQueue(HookFactory):
        _name = "cGcHUDManager::EnqueueRenderThumbnailQueue"
    class RenderOffscreen2D(HookFactory):
        _name = "cGcHUDManager::RenderOffscreen2D"
    class RenderImmediate2D(HookFactory):
        _name = "cGcHUDManager::RenderImmediate2D"
    class RenderEffectLayer(HookFactory):
        _name = "cGcHUDManager::RenderEffectLayer"
    class IsRenderingInFront(HookFactory):
        _name = "cGcHUDManager::IsRenderingInFront"
    class SetBooting(HookFactory):
        _name = "cGcHUDManager::SetBooting"
    class CancelIntro(HookFactory):
        _name = "cGcHUDManager::CancelIntro"
    class IsDisabled(HookFactory):
        _name = "cGcHUDManager::IsDisabled"
    class RenderDiscoveryInfo(HookFactory):
        _name = "cGcHUDManager::RenderDiscoveryInfo"
    class UpdateIntroSequence(HookFactory):
        _name = "cGcHUDManager::UpdateIntroSequence"
    class Release(HookFactory):
        _name = "cGcHUDManager::Release"
    class SetCinematicMode(HookFactory):
        _name = "cGcHUDManager::SetCinematicMode"
    class AddOSDMessageResource(HookFactory):
        _name = "cGcHUDManager::AddOSDMessageResource"
    class GenerationMessage(HookFactory):
        _name = "cGcHUDManager::GenerationMessage"
    class PrepareAndAddCreatureMessage(HookFactory):
        _name = "cGcHUDManager::PrepareAndAddCreatureMessage"
    class AddSeasonMessage(HookFactory):
        _name = "cGcHUDManager::AddSeasonMessage"
    class AddStoryMessage(HookFactory):
        _name = "cGcHUDManager::AddStoryMessage"
    class AddCommunityTierCompleteMessage(HookFactory):
        _name = "cGcHUDManager::AddCommunityTierCompleteMessage"
    class AdjustPositionForHUDScaling(HookFactory):
        _name = "cGcHUDManager::AdjustPositionForHUDScaling"
    class ShowShipOutOfRangeMessage(HookFactory):
        _name = "cGcHUDManager::ShowShipOutOfRangeMessage"
    class ShowFreighterOutOfRangeMessage(HookFactory):
        _name = "cGcHUDManager::ShowFreighterOutOfRangeMessage"
    class ShowVehicleOutOfRangeMessage(HookFactory):
        _name = "cGcHUDManager::ShowVehicleOutOfRangeMessage"
    class ShowShipBrokenMessage(HookFactory):
        _name = "cGcHUDManager::ShowShipBrokenMessage"
    class ShowInventoryFullMessage(HookFactory):
        _name = "cGcHUDManager::ShowInventoryFullMessage"
    class ShowInsufficientFundsMessage(HookFactory):
        _name = "cGcHUDManager::ShowInsufficientFundsMessage"
    class ShowTwitchRewardLockedMessage(HookFactory):
        _name = "cGcHUDManager::ShowTwitchRewardLockedMessage"
    class ShowTwitchOwnedMessage(HookFactory):
        _name = "cGcHUDManager::ShowTwitchOwnedMessage"
    class ShowTechnologyAwardedMessage(HookFactory):
        _name = "cGcHUDManager::ShowTechnologyAwardedMessage"
    class ShowTechnologyAlreadyKnownMessage(HookFactory):
        _name = "cGcHUDManager::ShowTechnologyAlreadyKnownMessage"
    class GetLocalisedTemperature(HookFactory):
        _name = "cGcHUDManager::GetLocalisedTemperature"
    class RemoveActiveMarker(HookFactory):
        _name = "cGcHUDManager::RemoveActiveMarker"
    class ClearMissionDetailMessages(HookFactory):
        _name = "cGcHUDManager::ClearMissionDetailMessages"
    class RemoveInteractionOffScreenRenderer(HookFactory):
        _name = "cGcHUDManager::RemoveInteractionOffScreenRenderer"
    class GetLastDetailMessageTime(HookFactory):
        _name = "cGcHUDManager::GetLastDetailMessageTime"

class cGcPlayerExperienceDirector:
    class GetFrigateFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetFrigateFlyby"
    class cGcPlayerExperienceDirector(HookFactory):
        _name = "cGcPlayerExperienceDirector::cGcPlayerExperienceDirector"
    class ValidShipSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::ValidShipSpawn"
        _overload: overloads.cGcPlayerExperienceDirector.ValidShipSpawn.overloads = "cGcPlayerExperienceDirector *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerExperienceDirector.ValidShipSpawn.overloads):
            cls._overload = overload_args
            return cls
    class PiratesIncoming(HookFactory):
        _name = "cGcPlayerExperienceDirector::PiratesIncoming"
    class GetRobots(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetRobots"
    class SetPulseEncounterOverrideChance(HookFactory):
        _name = "cGcPlayerExperienceDirector::SetPulseEncounterOverrideChance"
    class BountyTarget(HookFactory):
        _name = "cGcPlayerExperienceDirector::BountyTarget"
    class Construct(HookFactory):
        _name = "cGcPlayerExperienceDirector::Construct"
    class LoadCreatureResources(HookFactory):
        _name = "cGcPlayerExperienceDirector::LoadCreatureResources"
    class Prepare(HookFactory):
        _name = "cGcPlayerExperienceDirector::Prepare"
    class IsDebugSceneRiddenPet(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsDebugSceneRiddenPet"
    class Update(HookFactory):
        _name = "cGcPlayerExperienceDirector::Update"
    class UpdateTimerAccelerators(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateTimerAccelerators"
    class SpawnTrailerNPC(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnTrailerNPC"
    class AllowedToSpawnTraders(HookFactory):
        _name = "cGcPlayerExperienceDirector::AllowedToSpawnTraders"
    class WarpSquadAway(HookFactory):
        _name = "cGcPlayerExperienceDirector::WarpSquadAway"
    class UpdateNotificationMessages(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateNotificationMessages"
    class IsPulseEncounterSpaceEgg(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPulseEncounterSpaceEgg"
    class StartPirates(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartPirates"
    class StartClosestFreighterBattle(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartClosestFreighterBattle"
    class StartPulseEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartPulseEncounter"
    class StartBackgroundSpaceEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartBackgroundSpaceEncounter"
    class IsPulseEncounterWithShip(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPulseEncounterWithShip"
    class IsPulseEncounterAbandonedFreighter(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPulseEncounterAbandonedFreighter"
    class IsAnyPlayerWithinRange(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsAnyPlayerWithinRange"
    class StartSandWorm(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartSandWorm"
    class AddPirateKiller(HookFactory):
        _name = "cGcPlayerExperienceDirector::AddPirateKiller"
    class UpdatePirates(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdatePirates"
    class UpdatePirateRaidBuildingTarget(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdatePirateRaidBuildingTarget"
    class UpdatePulseEncounters(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdatePulseEncounters"
    class CleanUpEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::CleanUpEncounter"
    class PrepareEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::PrepareEncounter"
    class UpdateBackgroundSpaceEncounters(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateBackgroundSpaceEncounters"
    class CleanUpBackgroundSpaceEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::CleanUpBackgroundSpaceEncounter"
    class PrepareBackgroundSpaceEncounter(HookFactory):
        _name = "cGcPlayerExperienceDirector::PrepareBackgroundSpaceEncounter"
    class IsShipClearOfSolarSystemObjects(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsShipClearOfSolarSystemObjects"
    class UpdateSeason(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateSeason"
    class ShowBountyOSDMessage(HookFactory):
        _name = "cGcPlayerExperienceDirector::ShowBountyOSDMessage"
    class IsPlayerInSpace(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPlayerInSpace"
    class BeginPirateAttack(HookFactory):
        _name = "cGcPlayerExperienceDirector::BeginPirateAttack"
    class BeginPlanetaryPirateAttack(HookFactory):
        _name = "cGcPlayerExperienceDirector::BeginPlanetaryPirateAttack"
    class ValidFreighterSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::ValidFreighterSpawn"
    class TrySpawnAmbientFreighters(HookFactory):
        _name = "cGcPlayerExperienceDirector::TrySpawnAmbientFreighters"
    class GenerateAmbientBountyInfo(HookFactory):
        _name = "cGcPlayerExperienceDirector::GenerateAmbientBountyInfo"
    class RenderNGuiMap(HookFactory):
        _name = "cGcPlayerExperienceDirector::RenderNGuiMap"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerExperienceDirector::RenderNGui"
    class RequestPirateBounty(HookFactory):
        _name = "cGcPlayerExperienceDirector::RequestPirateBounty"
    class RequestStartPirates(HookFactory):
        _name = "cGcPlayerExperienceDirector::RequestStartPirates"
    class SetSpacePirateTimer(HookFactory):
        _name = "cGcPlayerExperienceDirector::SetSpacePirateTimer"
    class SetPlanetPirateTimer(HookFactory):
        _name = "cGcPlayerExperienceDirector::SetPlanetPirateTimer"
    class UpdatePlanetExperience(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdatePlanetExperience"
    class AddToCombatSquad(HookFactory):
        _name = "cGcPlayerExperienceDirector::AddToCombatSquad"
    class PickRandomSentinelWave(HookFactory):
        _name = "cGcPlayerExperienceDirector::PickRandomSentinelWave"
    class PickRandomSentinelSequence(HookFactory):
        _name = "cGcPlayerExperienceDirector::PickRandomSentinelSequence"
    class CanSpawnSentinelWave(HookFactory):
        _name = "cGcPlayerExperienceDirector::CanSpawnSentinelWave"
    class GetPendingSentinelSummon(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetPendingSentinelSummon"
    class ClearPendingSentinelSummon(HookFactory):
        _name = "cGcPlayerExperienceDirector::ClearPendingSentinelSummon"
    class GetMaxSpawnableSentinels(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetMaxSpawnableSentinels"
    class GetSentinelShootCooldownModifier(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetSentinelShootCooldownModifier"
    class IsCreatureInActiveFiendCombat(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsCreatureInActiveFiendCombat"
    class ActivateFiendsAsReward(HookFactory):
        _name = "cGcPlayerExperienceDirector::ActivateFiendsAsReward"
    class CreatureRemoved(HookFactory):
        _name = "cGcPlayerExperienceDirector::CreatureRemoved"
    class GetSpawnArchetypeData(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetSpawnArchetypeData"
    class DoFlybyFrigateSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::DoFlybyFrigateSpawn"
    class GetRewardFreighter(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetRewardFreighter"
    class NotifyDroneDeploy(HookFactory):
        _name = "cGcPlayerExperienceDirector::NotifyDroneDeploy"
    class DeactivateDrones(HookFactory):
        _name = "cGcPlayerExperienceDirector::DeactivateDrones"
    class UpdateFreighterExperience(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateFreighterExperience"
    class UpdateSpaceExperience(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateSpaceExperience"
    class UpdateSpawnRequests(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateSpawnRequests"
    class UpdateAssistanceSpawns(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateAssistanceSpawns"
    class UpdateSpacePolice(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateSpacePolice"
    class StartPolice(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartPolice"
    class EscapedPolice(HookFactory):
        _name = "cGcPlayerExperienceDirector::EscapedPolice"
    class SpawnPoliceForWanted(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnPoliceForWanted"
    class SpawnPolice(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnPolice"
    class GetPirateInterestLevel(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetPirateInterestLevel"
    class GetPoliceCargoInterestLevel(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetPoliceCargoInterestLevel"
    class RequestTraders(HookFactory):
        _name = "cGcPlayerExperienceDirector::RequestTraders"
    class CheckForSpaceBattle(HookFactory):
        _name = "cGcPlayerExperienceDirector::CheckForSpaceBattle"
    class GenerateSpaceBattlePosition(HookFactory):
        _name = "cGcPlayerExperienceDirector::GenerateSpaceBattlePosition"
    class HasActiveSpaceBattleInCurrentSystem(HookFactory):
        _name = "cGcPlayerExperienceDirector::HasActiveSpaceBattleInCurrentSystem"
    class IsPlayerCloseToSpaceBattle(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPlayerCloseToSpaceBattle"
    class IsPositionCloseToSpaceBattle(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPositionCloseToSpaceBattle"
    class GetClosestFreighterLeader(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetClosestFreighterLeader"
    class GetClosestFreighter(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetClosestFreighter"
    class GetClosestFreighterSquad(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetClosestFreighterSquad"
    class GetClosestShipOfType(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetClosestShipOfType"
    class PoliceIncomingTimer(HookFactory):
        _name = "cGcPlayerExperienceDirector::PoliceIncomingTimer"
    class ResetPoliceEntrance(HookFactory):
        _name = "cGcPlayerExperienceDirector::ResetPoliceEntrance"
    class DoRequestShipSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::DoRequestShipSpawn"
    class DoDirectShipSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::DoDirectShipSpawn"
    class StartFreighters(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartFreighters"
    class IsHost(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsHost"
    class SpawnFreighters(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnFreighters"
    class StartSpaceBattleMainFleet(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartSpaceBattleMainFleet"
    class StartSpaceBattleFlyBy(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartSpaceBattleFlyBy"
    class CalculateRandomViewableSpawn(HookFactory):
        _name = "cGcPlayerExperienceDirector::CalculateRandomViewableSpawn"
    class SpawnInterceptFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnInterceptFlyby"
    class ActiveSquad(HookFactory):
        _name = "cGcPlayerExperienceDirector::ActiveSquad"
    class IsTradingInProgress(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsTradingInProgress"
    class NotifyTradingEnd(HookFactory):
        _name = "cGcPlayerExperienceDirector::NotifyTradingEnd"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerExperienceDirector::UpdateRender"
    class Release(HookFactory):
        _name = "cGcPlayerExperienceDirector::Release"
    class MessageCrimeReport(HookFactory):
        _name = "cGcPlayerExperienceDirector::MessageCrimeReport"
    class ReportFiendCrime(HookFactory):
        _name = "cGcPlayerExperienceDirector::ReportFiendCrime"
    class ClearSpawns(HookFactory):
        _name = "cGcPlayerExperienceDirector::ClearSpawns"
    class ClearPirateSpawns(HookFactory):
        _name = "cGcPlayerExperienceDirector::ClearPirateSpawns"
    class DespawnDefenceForce(HookFactory):
        _name = "cGcPlayerExperienceDirector::DespawnDefenceForce"
    class DespawnFleetContainingFreighter(HookFactory):
        _name = "cGcPlayerExperienceDirector::DespawnFleetContainingFreighter"
    class DeployCargoShield(HookFactory):
        _name = "cGcPlayerExperienceDirector::DeployCargoShield"
    class IsCargoProbeActive(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsCargoProbeActive"
    class IsHostileProbeActive(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsHostileProbeActive"
    class IsPulseEncounterAvailable(HookFactory):
        _name = "cGcPlayerExperienceDirector::IsPulseEncounterAvailable"
    class ActiveFiendCombat(HookFactory):
        _name = "cGcPlayerExperienceDirector::ActiveFiendCombat"
    class FreighterBattleActive(HookFactory):
        _name = "cGcPlayerExperienceDirector::FreighterBattleActive"
    class GetBountyAmount(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetBountyAmount"
    class GetLastPirateRaidBuildingTarget(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetLastPirateRaidBuildingTarget"
    class GetActivePirateCount(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetActivePirateCount"
    class DebugFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::DebugFlyby"
    class SpawnTrackedShip(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnTrackedShip"
    class GetExperienceSpawnForShip(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetExperienceSpawnForShip"
    class NotifyShipPurchase(HookFactory):
        _name = "cGcPlayerExperienceDirector::NotifyShipPurchase"
    class SpawnSentinels(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnSentinels"
    class SpawnDestroyedAsteroidCreatures(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnDestroyedAsteroidCreatures"
    class DebugSpawnSentinelMech(HookFactory):
        _name = "cGcPlayerExperienceDirector::DebugSpawnSentinelMech"
    class GetCreatureResource(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetCreatureResource"
        _overload: overloads.cGcPlayerExperienceDirector.GetCreatureResource.overloads = "cGcPlayerExperienceDirector *, TkStrongType<int,TkStrongTypeIDs::TkResHandleID> *, eCreatureType"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerExperienceDirector.GetCreatureResource.overloads):
            cls._overload = overload_args
            return cls
    class SpawnFiends(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnFiends"
    class SpawnFishFiends(HookFactory):
        _name = "cGcPlayerExperienceDirector::SpawnFishFiends"
    class StartPatrolDrones(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartPatrolDrones"
    class StartFrigateFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartFrigateFlyby"
        _overload: overloads.cGcPlayerExperienceDirector.StartFrigateFlyby.overloads = "cGcPlayerExperienceDirector *, const sFrigateFlybyRequest *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerExperienceDirector.StartFrigateFlyby.overloads):
            cls._overload = overload_args
            return cls
    class StartFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartFlyby"
    class SelectPirateAttackDefinition(HookFactory):
        _name = "cGcPlayerExperienceDirector::SelectPirateAttackDefinition"
    class StartTraderMissionSpaceFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartTraderMissionSpaceFlyby"
    class StartSpaceFlyby(HookFactory):
        _name = "cGcPlayerExperienceDirector::StartSpaceFlyby"
    class GetFreighterSpawnsCount(HookFactory):
        _name = "cGcPlayerExperienceDirector::GetFreighterSpawnsCount"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcPlayerExperienceDirector::OnNetworkPlayerStateEvent"
    class OnWantedLevelNotify(HookFactory):
        _name = "cGcPlayerExperienceDirector::OnWantedLevelNotify"
    class RPCRemotePlayerJoinedBattle(HookFactory):
        _name = "cGcPlayerExperienceDirector::RPCRemotePlayerJoinedBattle"
    class RPCRemoteGiveBountyReward(HookFactory):
        _name = "cGcPlayerExperienceDirector::RPCRemoteGiveBountyReward"
    class SetPoliceArriveState(HookFactory):
        _name = "cGcPlayerExperienceDirector::SetPoliceArriveState"
    class SetPirateState(HookFactory):
        _name = "cGcPlayerExperienceDirector::SetPirateState"
    class ClearRepairer(HookFactory):
        _name = "cGcPlayerExperienceDirector::ClearRepairer"
    class CheckAllowedToRepair(HookFactory):
        _name = "cGcPlayerExperienceDirector::CheckAllowedToRepair"

class cGcApplication:
    class Construct(HookFactory):
        _name = "cGcApplication::Construct"
    class Data:
        class Data(HookFactory):
            _name = "cGcApplication::Data::Data"
    class NotifyResolutionChangedCallback(HookFactory):
        _name = "cGcApplication::NotifyResolutionChangedCallback"
    class Destruct(HookFactory):
        _name = "cGcApplication::Destruct"
    class Update(HookFactory):
        _name = "cGcApplication::Update"
    class DrainFileLoadsAndPollableTasks(HookFactory):
        _name = "cGcApplication::DrainFileLoadsAndPollableTasks"
        _overload: overloads.cGcApplication.DrainFileLoadsAndPollableTasks.overloads = "bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcApplication.DrainFileLoadsAndPollableTasks.overloads):
            cls._overload = overload_args
            return cls
    class HideSimulationNodes(HookFactory):
        _name = "cGcApplication::HideSimulationNodes"
    class ShowSimulationNodes(HookFactory):
        _name = "cGcApplication::ShowSimulationNodes"
    class AllowPause(HookFactory):
        _name = "cGcApplication::AllowPause"
    class ChangeAppGameMode(HookFactory):
        _name = "cGcApplication::ChangeAppGameMode"
    class UpdateInputManagers(HookFactory):
        _name = "cGcApplication::UpdateInputManagers"
    class GetSimulation(HookFactory):
        _name = "cGcApplication::GetSimulation"
    class GetRealityManager(HookFactory):
        _name = "cGcApplication::GetRealityManager"
    class GetGameState(HookFactory):
        _name = "cGcApplication::GetGameState"
    class GetSeasonalData(HookFactory):
        _name = "cGcApplication::GetSeasonalData"
    class GetHUDManager(HookFactory):
        _name = "cGcApplication::GetHUDManager"
    class GetCameraManager(HookFactory):
        _name = "cGcApplication::GetCameraManager"
    class GetInputManager(HookFactory):
        _name = "cGcApplication::GetInputManager"
    class GetVibrationManager(HookFactory):
        _name = "cGcApplication::GetVibrationManager"
    class GetTimeManager(HookFactory):
        _name = "cGcApplication::GetTimeManager"
    class GetGraphicsManager(HookFactory):
        _name = "cGcApplication::GetGraphicsManager"
    class GetAudioManager(HookFactory):
        _name = "cGcApplication::GetAudioManager"
    class GetAtlasManager(HookFactory):
        _name = "cGcApplication::GetAtlasManager"
    class GetDebugRenderer(HookFactory):
        _name = "cGcApplication::GetDebugRenderer"
    class GetDebugEditor(HookFactory):
        _name = "cGcApplication::GetDebugEditor"
    class GetNGuiManager(HookFactory):
        _name = "cGcApplication::GetNGuiManager"
    class GetFrontendManager(HookFactory):
        _name = "cGcApplication::GetFrontendManager"
    class GetInWorldUIManager(HookFactory):
        _name = "cGcApplication::GetInWorldUIManager"
    class GetGalaxyMap(HookFactory):
        _name = "cGcApplication::GetGalaxyMap"
    class GetFirstBootContext(HookFactory):
        _name = "cGcApplication::GetFirstBootContext"
    class GetNetworkManager(HookFactory):
        _name = "cGcApplication::GetNetworkManager"
    class VRAssertCallback(HookFactory):
        _name = "cGcApplication::VRAssertCallback"
    class UpdateVRAssertMessage(HookFactory):
        _name = "cGcApplication::UpdateVRAssertMessage"
    class IsAccessibleUIEnabled(HookFactory):
        _name = "cGcApplication::IsAccessibleUIEnabled"
    class cGcApplication(HookFactory):
        _name = "cGcApplication::cGcApplication"

class cGcRealityManager:
    class cGcRealityManager(HookFactory):
        _name = "cGcRealityManager::cGcRealityManager"
    class LookupNameByID(HookFactory):
        _name = "cGcRealityManager::LookupNameByID"
    class LookupSubstanceCategoryByID(HookFactory):
        _name = "cGcRealityManager::LookupSubstanceCategoryByID"
    class IsProceduralItem(HookFactory):
        _name = "cGcRealityManager::IsProceduralItem"
    class LookUpNumberOfAlienInteractions(HookFactory):
        _name = "cGcRealityManager::LookUpNumberOfAlienInteractions"
    class GetMaxProgressionIndexOfGenericAlienInteractions(HookFactory):
        _name = "cGcRealityManager::GetMaxProgressionIndexOfGenericAlienInteractions"
    class GetPlayerWeaponPropertiesData(HookFactory):
        _name = "cGcRealityManager::GetPlayerWeaponPropertiesData"
    class LoadTexture(HookFactory):
        _name = "cGcRealityManager::LoadTexture"
    class LoadModel(HookFactory):
        _name = "cGcRealityManager::LoadModel"
    class LookupAlienInteractions_Internal(HookFactory):
        _name = "cGcRealityManager::LookupAlienInteractions_Internal"
    class GetAlienPuzzle(HookFactory):
        _name = "cGcRealityManager::GetAlienPuzzle"
        _overload: overloads.cGcRealityManager.GetAlienPuzzle.overloads = "cGcRealityManager *, const TkID<256> *, eInteractionType, eAlienRace, cTkSeed"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRealityManager.GetAlienPuzzle.overloads):
            cls._overload = overload_args
            return cls
    class GetTradingClassData(HookFactory):
        _name = "cGcRealityManager::GetTradingClassData"
    class LookupIconByID(HookFactory):
        _name = "cGcRealityManager::LookupIconByID"
    class LookupPinObjectiveByID(HookFactory):
        _name = "cGcRealityManager::LookupPinObjectiveByID"
    class AmountOfItemNeededToBuildTech(HookFactory):
        _name = "cGcRealityManager::AmountOfItemNeededToBuildTech"
    class AmountOfItemNeededToBuildProduct(HookFactory):
        _name = "cGcRealityManager::AmountOfItemNeededToBuildProduct"
    class IsItemProcFreighterDeployableProduct(HookFactory):
        _name = "cGcRealityManager::IsItemProcFreighterDeployableProduct"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcRealityManager::RenderNGuiCallback"
    class Construct(HookFactory):
        _name = "cGcRealityManager::Construct"
    class GetCurrentRealityIteration(HookFactory):
        _name = "cGcRealityManager::GetCurrentRealityIteration"
    class SetHomeRealityIteration(HookFactory):
        _name = "cGcRealityManager::SetHomeRealityIteration"
    class RenderNGui(HookFactory):
        _name = "cGcRealityManager::RenderNGui"
    class LoadMissionSectionIcons(HookFactory):
        _name = "cGcRealityManager::LoadMissionSectionIcons"
    class LookupSubstanceByID(HookFactory):
        _name = "cGcRealityManager::LookupSubstanceByID"
    class LookupLegacyItemByID(HookFactory):
        _name = "cGcRealityManager::LookupLegacyItemByID"
    class LookupConsumableItemByID(HookFactory):
        _name = "cGcRealityManager::LookupConsumableItemByID"
    class LookupDamageMultiplier(HookFactory):
        _name = "cGcRealityManager::LookupDamageMultiplier"
    class LookupEmoteByID(HookFactory):
        _name = "cGcRealityManager::LookupEmoteByID"
    class CollectMatchingSubstances(HookFactory):
        _name = "cGcRealityManager::CollectMatchingSubstances"
    class LookupDiscoveryWorth(HookFactory):
        _name = "cGcRealityManager::LookupDiscoveryWorth"
    class ReplaceTechnology(HookFactory):
        _name = "cGcRealityManager::ReplaceTechnology"
    class IsTitleValid(HookFactory):
        _name = "cGcRealityManager::IsTitleValid"
    class GetPlayerTitle(HookFactory):
        _name = "cGcRealityManager::GetPlayerTitle"
    class GetNextTechnology(HookFactory):
        _name = "cGcRealityManager::GetNextTechnology"
    class LookupAlienInteractionByIndex(HookFactory):
        _name = "cGcRealityManager::LookupAlienInteractionByIndex"
    class GetAlienPuzzleCategories(HookFactory):
        _name = "cGcRealityManager::GetAlienPuzzleCategories"
    class GetAlienRaceName(HookFactory):
        _name = "cGcRealityManager::GetAlienRaceName"
    class RegisterBuyTradingItemById(HookFactory):
        _name = "cGcRealityManager::RegisterBuyTradingItemById"
    class RegisterSellTradingItemById(HookFactory):
        _name = "cGcRealityManager::RegisterSellTradingItemById"
    class ReplenishTradingItemById(HookFactory):
        _name = "cGcRealityManager::ReplenishTradingItemById"
    class GetResourceIconFromLookup(HookFactory):
        _name = "cGcRealityManager::GetResourceIconFromLookup"
    class GetPickupIconFromLookup(HookFactory):
        _name = "cGcRealityManager::GetPickupIconFromLookup"
    class GenerateProceduralProduct(HookFactory):
        _name = "cGcRealityManager::GenerateProceduralProduct"
        _overload: overloads.cGcRealityManager.GenerateProceduralProduct.overloads = "cGcRealityManager *, eProceduralProductCategory, const cTkSeed *, eRarity, eQuality"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRealityManager.GenerateProceduralProduct.overloads):
            cls._overload = overload_args
            return cls
    class GetProceduralProductCategory(HookFactory):
        _name = "cGcRealityManager::GetProceduralProductCategory"
    class IsItemProcFreighterProduct(HookFactory):
        _name = "cGcRealityManager::IsItemProcFreighterProduct"
    class IsItemProcDismantleProduct(HookFactory):
        _name = "cGcRealityManager::IsItemProcDismantleProduct"
    class GetTechIDFromHash(HookFactory):
        _name = "cGcRealityManager::GetTechIDFromHash"
    class GetHashedIDForTech(HookFactory):
        _name = "cGcRealityManager::GetHashedIDForTech"
    class GenerateTechPackProduct(HookFactory):
        _name = "cGcRealityManager::GenerateTechPackProduct"
    class GenerateProceduralTechnologyID(HookFactory):
        _name = "cGcRealityManager::GenerateProceduralTechnologyID"
        _overload: overloads.cGcRealityManager.GenerateProceduralTechnologyID.overloads = "cGcRealityManager *, TkID<128> *, eProceduralTechnologyCategory, const cTkSeed *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRealityManager.GenerateProceduralTechnologyID.overloads):
            cls._overload = overload_args
            return cls
    class GenerateProceduralTechnology(HookFactory):
        _name = "cGcRealityManager::GenerateProceduralTechnology"
    class ClearCachedTechnologiesWithTranslatedText(HookFactory):
        _name = "cGcRealityManager::ClearCachedTechnologiesWithTranslatedText"
    class GetAbandonedFreighterSeedFromUA(HookFactory):
        _name = "cGcRealityManager::GetAbandonedFreighterSeedFromUA"
    class GetAbandonedFreighterRaceFromUA(HookFactory):
        _name = "cGcRealityManager::GetAbandonedFreighterRaceFromUA"
    class GenerateFreighterPasswordDesc(HookFactory):
        _name = "cGcRealityManager::GenerateFreighterPasswordDesc"
    class GenerateFreighterCaptLogDesc(HookFactory):
        _name = "cGcRealityManager::GenerateFreighterCaptLogDesc"
    class GenerateFreighterCrewListDesc(HookFactory):
        _name = "cGcRealityManager::GenerateFreighterCrewListDesc"
    class GenerateRarity(HookFactory):
        _name = "cGcRealityManager::GenerateRarity"
    class GenerateFreighterTechQuality(HookFactory):
        _name = "cGcRealityManager::GenerateFreighterTechQuality"
    class ConstructRepairTechForTech(HookFactory):
        _name = "cGcRealityManager::ConstructRepairTechForTech"
    class ExtractInfoFromProcID(HookFactory):
        _name = "cGcRealityManager::ExtractInfoFromProcID"
    class LookupTechnologyByID(HookFactory):
        _name = "cGcRealityManager::LookupTechnologyByID"
    class LookupProceduralTechDataByID(HookFactory):
        _name = "cGcRealityManager::LookupProceduralTechDataByID"
    class LookupProductByID(HookFactory):
        _name = "cGcRealityManager::LookupProductByID"
    class LookupRecipeByID(HookFactory):
        _name = "cGcRealityManager::LookupRecipeByID"
    class GetChargeValue(HookFactory):
        _name = "cGcRealityManager::GetChargeValue"
    class IsProductEasyToBuy(HookFactory):
        _name = "cGcRealityManager::IsProductEasyToBuy"
    class LookupDeployTechnologyFromProduct(HookFactory):
        _name = "cGcRealityManager::LookupDeployTechnologyFromProduct"
    class LookupDeployTechnologyFromProcTechID(HookFactory):
        _name = "cGcRealityManager::LookupDeployTechnologyFromProcTechID"
    class LookupDeployTechCategoryFromProduct(HookFactory):
        _name = "cGcRealityManager::LookupDeployTechCategoryFromProduct"
    class LookupDeployTechCategoryFromDeployID(HookFactory):
        _name = "cGcRealityManager::LookupDeployTechCategoryFromDeployID"
    class LookupRewardByID(HookFactory):
        _name = "cGcRealityManager::LookupRewardByID"
    class LookupGenericRewardByID(HookFactory):
        _name = "cGcRealityManager::LookupGenericRewardByID"
    class LookupInventoryEntryByID(HookFactory):
        _name = "cGcRealityManager::LookupInventoryEntryByID"
    class LookupPurchasableSpecialByID(HookFactory):
        _name = "cGcRealityManager::LookupPurchasableSpecialByID"
    class LookupUnlockableSeasonRewardByID(HookFactory):
        _name = "cGcRealityManager::LookupUnlockableSeasonRewardByID"
    class LookupUnlockableTwitchRewardByID(HookFactory):
        _name = "cGcRealityManager::LookupUnlockableTwitchRewardByID"
    class LookupUnlockableTwitchRewardByProductID(HookFactory):
        _name = "cGcRealityManager::LookupUnlockableTwitchRewardByProductID"
    class LookupUnlockablePlatformRewardByID(HookFactory):
        _name = "cGcRealityManager::LookupUnlockablePlatformRewardByID"
    class LookupUnlockablePlatformRewardByProductID(HookFactory):
        _name = "cGcRealityManager::LookupUnlockablePlatformRewardByProductID"
    class LookupMission(HookFactory):
        _name = "cGcRealityManager::LookupMission"
    class LookupMissionTable(HookFactory):
        _name = "cGcRealityManager::LookupMissionTable"
    class LookupMissionByRewardID(HookFactory):
        _name = "cGcRealityManager::LookupMissionByRewardID"
    class LookupMissionByCostID(HookFactory):
        _name = "cGcRealityManager::LookupMissionByCostID"
    class LookupMissionByDialogID(HookFactory):
        _name = "cGcRealityManager::LookupMissionByDialogID"
    class LookupMissionByScanEvent(HookFactory):
        _name = "cGcRealityManager::LookupMissionByScanEvent"
    class LookupBaseStatbyID(HookFactory):
        _name = "cGcRealityManager::LookupBaseStatbyID"
    class LookupItemAverageSellPriceById(HookFactory):
        _name = "cGcRealityManager::LookupItemAverageSellPriceById"
    class LookUpCostByID(HookFactory):
        _name = "cGcRealityManager::LookUpCostByID"
    class LookupDamageByID(HookFactory):
        _name = "cGcRealityManager::LookupDamageByID"
    class LookupSettlementPerkByID(HookFactory):
        _name = "cGcRealityManager::LookupSettlementPerkByID"
    class LookupSubstanceBySeed(HookFactory):
        _name = "cGcRealityManager::LookupSubstanceBySeed"
    class LookupSubstanceSecondary(HookFactory):
        _name = "cGcRealityManager::LookupSubstanceSecondary"
    class LookupAlienWordBySeed(HookFactory):
        _name = "cGcRealityManager::LookupAlienWordBySeed"
    class GetBaseTechFromProcId(HookFactory):
        _name = "cGcRealityManager::GetBaseTechFromProcId"
    class GetEmotesList(HookFactory):
        _name = "cGcRealityManager::GetEmotesList"

class cGcGameState:
    class cGcGameState(HookFactory):
        _name = "cGcGameState::cGcGameState"
    class GetMPMissionTracker(HookFactory):
        _name = "cGcGameState::GetMPMissionTracker"
    class Construct(HookFactory):
        _name = "cGcGameState::Construct"
    class Prepare(HookFactory):
        _name = "cGcGameState::Prepare"
    class Update(HookFactory):
        _name = "cGcGameState::Update"
    class Destruct(HookFactory):
        _name = "cGcGameState::Destruct"
    class ComputeWarpCapability(HookFactory):
        _name = "cGcGameState::ComputeWarpCapability"
    class ComputeWarpEngineJumpDistanceInLightyears(HookFactory):
        _name = "cGcGameState::ComputeWarpEngineJumpDistanceInLightyears"
    class SendRemoteEgg(HookFactory):
        _name = "cGcGameState::SendRemoteEgg"
    class OnReceiveRemoteByteBeatSong(HookFactory):
        _name = "cGcGameState::OnReceiveRemoteByteBeatSong"
    class OnReceiveRemoteItems(HookFactory):
        _name = "cGcGameState::OnReceiveRemoteItems"
    class OnReceiveRemoteCreatureEgg(HookFactory):
        _name = "cGcGameState::OnReceiveRemoteCreatureEgg"
    class LoadState(HookFactory):
        _name = "cGcGameState::LoadState"
    class SetInventoryStoreBalance(HookFactory):
        _name = "cGcGameState::SetInventoryStoreBalance"
    class LoadSpecificSave(HookFactory):
        _name = "cGcGameState::LoadSpecificSave"
    class LoadFromPersistentStorage(HookFactory):
        _name = "cGcGameState::LoadFromPersistentStorage"
    class GetDefaultSaveDataFilename(HookFactory):
        _name = "cGcGameState::GetDefaultSaveDataFilename"
    class SetFreshStartSpwanData(HookFactory):
        _name = "cGcGameState::SetFreshStartSpwanData"
    class UpgradePatch0To1(HookFactory):
        _name = "cGcGameState::UpgradePatch0To1"
    class UpgradePatch1ToUpdate1(HookFactory):
        _name = "cGcGameState::UpgradePatch1ToUpdate1"
    class UpgradeUpdate1ToUpdate1_1(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1ToUpdate1_1"
    class UpgradeUpdate1_2ToUpdate1_3(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_2ToUpdate1_3"
    class UpgradeUpdate1_3ToUpdate1_33(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_3ToUpdate1_33"
    class UpgradeUpdate1_33ToUpdate1_35(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_33ToUpdate1_35"
    class UpgradeUpdate1_39ToUpdate1_4Internal(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_39ToUpdate1_4Internal"
    class UpgradeUpdate1_4InternalToUpdate1_4(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_4InternalToUpdate1_4"
    class UpgradeUpdate1_4ToUpdate1_5(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_4ToUpdate1_5"
    class UpgradeUpdate1_5ToUpdate1_51(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_5ToUpdate1_51"
    class UpgradeUpdate1_62ToUpdate1_8(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_62ToUpdate1_8"
    class UpgradeUpdate1_8ToUpdate1_81(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_8ToUpdate1_81"
    class UpgradeUpdate1_82ToUpdate1_83(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_82ToUpdate1_83"
    class UpgradeUpdate1_83ToUpdate1_84(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_83ToUpdate1_84"
    class UpgradeUpdate1_84ToUpdate1_85(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_84ToUpdate1_85"
    class UpgradeUpdate1_86ToUpdate1_87(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_86ToUpdate1_87"
    class UpgradeUpdate1_91ToUpdate3_30(HookFactory):
        _name = "cGcGameState::UpgradeUpdate1_91ToUpdate3_30"
    class UpgradeUpdate3_30ToUpdate3_32(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_30ToUpdate3_32"
    class UpgradeUpdate3_32ToUpdate3_34(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_32ToUpdate3_34"
    class UpgradeUpdate3_34ToUpdate3_35(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_34ToUpdate3_35"
    class UpgradeUpdate3_36ToUpdate3_52(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_36ToUpdate3_52"
    class UpgradeUpdate3_53ToUpdate3_80(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_53ToUpdate3_80"
    class UpgradeUpdate3_80ToUpdate3_81(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_80ToUpdate3_81"
    class UpgradeUpdate3_81ToUpdate3_85(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_81ToUpdate3_85"
    class UpgradeUpdate3_85ToUpdate3_94(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_85ToUpdate3_94"
    class UpgradeUpdate3_94ToUpdate4_00(HookFactory):
        _name = "cGcGameState::UpgradeUpdate3_94ToUpdate4_00"
    class UpgradeUpdate4_00ToUpdate4_04(HookFactory):
        _name = "cGcGameState::UpgradeUpdate4_00ToUpdate4_04"
    class UpgradeUpdate4_04ToUpdate4_05(HookFactory):
        _name = "cGcGameState::UpgradeUpdate4_04ToUpdate4_05"
    class UpgradeUpdate4_05ToUpdate4_09(HookFactory):
        _name = "cGcGameState::UpgradeUpdate4_05ToUpdate4_09"
    class SaveSpawnLocation(HookFactory):
        _name = "cGcGameState::SaveSpawnLocation"
    class SaveProgress(HookFactory):
        _name = "cGcGameState::SaveProgress"
    class SaveThreadData:
        class SaveThreadData(HookFactory):
            _name = "cGcGameState::SaveThreadData::SaveThreadData"
    class SaveProgressThread(HookFactory):
        _name = "cGcGameState::SaveProgressThread"
    class OnSaveProgressCompleted(HookFactory):
        _name = "cGcGameState::OnSaveProgressCompleted"
    class WriteStateToJSON(HookFactory):
        _name = "cGcGameState::WriteStateToJSON"
    class OverwriteDataFromJSON(HookFactory):
        _name = "cGcGameState::OverwriteDataFromJSON"
    class CopyNewElements(HookFactory):
        _name = "cGcGameState::CopyNewElements"
    class CleanUpSuitInventory(HookFactory):
        _name = "cGcGameState::CleanUpSuitInventory"
    class GetPlayerSpawnMatrix(HookFactory):
        _name = "cGcGameState::GetPlayerSpawnMatrix"
    class GetPlayerDeathRespawnMatrix(HookFactory):
        _name = "cGcGameState::GetPlayerDeathRespawnMatrix"
    class GetShipSpawnMatrix(HookFactory):
        _name = "cGcGameState::GetShipSpawnMatrix"
    class GetPlayerFreighterOwnershipForCurrentSystem(HookFactory):
        _name = "cGcGameState::GetPlayerFreighterOwnershipForCurrentSystem"
    class GetPlayerFreighterOwnership(HookFactory):
        _name = "cGcGameState::GetPlayerFreighterOwnership"
        _overload: overloads.cGcGameState.GetPlayerFreighterOwnership.overloads = "cGcGameState *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGameState.GetPlayerFreighterOwnership.overloads):
            cls._overload = overload_args
            return cls
    class GetPlayerFleetManager(HookFactory):
        _name = "cGcGameState::GetPlayerFleetManager"
    class GetPlayerFleetManagerWriteable(HookFactory):
        _name = "cGcGameState::GetPlayerFleetManagerWriteable"
        _overload: overloads.cGcGameState.GetPlayerFleetManagerWriteable.overloads = "cGcGameState *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGameState.GetPlayerFleetManagerWriteable.overloads):
            cls._overload = overload_args
            return cls
    class UpdateSummary(HookFactory):
        _name = "cGcGameState::UpdateSummary"
    class GetAtlasPathProgress(HookFactory):
        _name = "cGcGameState::GetAtlasPathProgress"

class cGcPlayerShipOwnership:
    class cGcPlayerShipOwnership(HookFactory):
        _name = "cGcPlayerShipOwnership::cGcPlayerShipOwnership"
    class Prepare(HookFactory):
        _name = "cGcPlayerShipOwnership::Prepare"
    class Update(HookFactory):
        _name = "cGcPlayerShipOwnership::Update"
    class Release(HookFactory):
        _name = "cGcPlayerShipOwnership::Release"
    class GetPrimaryShip(HookFactory):
        _name = "cGcPlayerShipOwnership::GetPrimaryShip"
    class SpawnNewShip(HookFactory):
        _name = "cGcPlayerShipOwnership::SpawnNewShip"
    class DestroyShip(HookFactory):
        _name = "cGcPlayerShipOwnership::DestroyShip"
    class SwitchPlayerShip(HookFactory):
        _name = "cGcPlayerShipOwnership::SwitchPlayerShip"
    class TakeOwnership(HookFactory):
        _name = "cGcPlayerShipOwnership::TakeOwnership"
    class GetShipIndex(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipIndex"
    class GetShipComponent(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipComponent"
    class GetShipData(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipData"
    class GetNumShipsWithWorkingEngines(HookFactory):
        _name = "cGcPlayerShipOwnership::GetNumShipsWithWorkingEngines"
    class ShipHasWorkingEngineIgnoreEverythingIsFree(HookFactory):
        _name = "cGcPlayerShipOwnership::ShipHasWorkingEngineIgnoreEverythingIsFree"
    class CanSalvageShip(HookFactory):
        _name = "cGcPlayerShipOwnership::CanSalvageShip"
    class GetLivingShipInventoryIndex(HookFactory):
        _name = "cGcPlayerShipOwnership::GetLivingShipInventoryIndex"
    class GetShipMatrix(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipMatrix"
    class CacheShipFreighterDockIndexes(HookFactory):
        _name = "cGcPlayerShipOwnership::CacheShipFreighterDockIndexes"
    class SetNextSummonIsFree(HookFactory):
        _name = "cGcPlayerShipOwnership::SetNextSummonIsFree"
    class CreatePlayerShipGenerationTask(HookFactory):
        _name = "cGcPlayerShipOwnership::CreatePlayerShipGenerationTask"
    class GetPlayerShipName(HookFactory):
        _name = "cGcPlayerShipOwnership::GetPlayerShipName"
    class RefreshSpaceshipComponent(HookFactory):
        _name = "cGcPlayerShipOwnership::RefreshSpaceshipComponent"
    class UpdateMeshRefresh(HookFactory):
        _name = "cGcPlayerShipOwnership::UpdateMeshRefresh"
    class GetShipIndexFromNode(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipIndexFromNode"
    class CanConsiderSummoningShip(HookFactory):
        _name = "cGcPlayerShipOwnership::CanConsiderSummoningShip"
    class CanSummonShip(HookFactory):
        _name = "cGcPlayerShipOwnership::CanSummonShip"
    class RequestShipSpawn(HookFactory):
        _name = "cGcPlayerShipOwnership::RequestShipSpawn"
    class GetShipSummonPostion(HookFactory):
        _name = "cGcPlayerShipOwnership::GetShipSummonPostion"
    class ClearShipDataAtIndex(HookFactory):
        _name = "cGcPlayerShipOwnership::ClearShipDataAtIndex"
    class GetValidShipIndicies(HookFactory):
        _name = "cGcPlayerShipOwnership::GetValidShipIndicies"
    class GetThumbnail(HookFactory):
        _name = "cGcPlayerShipOwnership::GetThumbnail"

class cGcPlacementArc:
    class cGcPlacementArc(HookFactory):
        _name = "cGcPlacementArc::cGcPlacementArc"
    class Update(HookFactory):
        _name = "cGcPlacementArc::Update"
    class Render(HookFactory):
        _name = "cGcPlacementArc::Render"
    class Reset(HookFactory):
        _name = "cGcPlacementArc::Reset"
    class GetArcPosition(HookFactory):
        _name = "cGcPlacementArc::GetArcPosition"
    class CalculateAimMatrix(HookFactory):
        _name = "cGcPlacementArc::CalculateAimMatrix"

class cGcPlayerFreighterOwnership:
    class cGcPlayerFreighterOwnership(HookFactory):
        _name = "cGcPlayerFreighterOwnership::cGcPlayerFreighterOwnership"
    class SetFreighterOwnershipSyncMessage(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetFreighterOwnershipSyncMessage"
    class IsRemotelyOwned(HookFactory):
        _name = "cGcPlayerFreighterOwnership::IsRemotelyOwned"
    class Construct(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Construct"
    class Prepare(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Release"
    class Destruct(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Destruct"
    class CacheFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CacheFreighter"
    class FixNPCResource(HookFactory):
        _name = "cGcPlayerFreighterOwnership::FixNPCResource"
    class Load(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Load"
    class Update(HookFactory):
        _name = "cGcPlayerFreighterOwnership::Update"
    class RequestFreighterSpawn(HookFactory):
        _name = "cGcPlayerFreighterOwnership::RequestFreighterSpawn"
        _overload: overloads.cGcPlayerFreighterOwnership.RequestFreighterSpawn.overloads = "cGcPlayerFreighterOwnership *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerFreighterOwnership.RequestFreighterSpawn.overloads):
            cls._overload = overload_args
            return cls
    class CallFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CallFreighter"
    class CreateTeleporterEndpoint(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CreateTeleporterEndpoint"
    class SetTeleporterEndpoint(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetTeleporterEndpoint"
    class DespawnFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::DespawnFreighter"
    class GetFreighterSpawnPostion(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterSpawnPostion"
    class SpawnNewFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SpawnNewFreighter"
    class DestroyFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::DestroyFreighter"
    class SetCustomFreighterName(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetCustomFreighterName"
    class GetFreighterName(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterName"
    class GetFreighterNode(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterNode"
    class SetFreighterLocation(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetFreighterLocation"
    class GetFreighterResourceWriteable(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterResourceWriteable"
    class GetFreighterComponent(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterComponent"
    class GetFreighterBaseComponent(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterBaseComponent"
    class SetFreighterHomeSystemSeed(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetFreighterHomeSystemSeed"
    class GetFreighterSeed(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterSeed"
    class GetOwnerId(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetOwnerId"
    class OnRemotePlayerSwitchedFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::OnRemotePlayerSwitchedFreighter"
    class SwitchPlayerFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SwitchPlayerFreighter"
    class ResetPlayerFreighterBase(HookFactory):
        _name = "cGcPlayerFreighterOwnership::ResetPlayerFreighterBase"
    class SetFreighterMatrix(HookFactory):
        _name = "cGcPlayerFreighterOwnership::SetFreighterMatrix"
    class GetFreighterLocation(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterLocation"
    class ClaimFreighterBase(HookFactory):
        _name = "cGcPlayerFreighterOwnership::ClaimFreighterBase"
    class OwnsFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::OwnsFreighter"
    class ExistsInCurrentSystem(HookFactory):
        _name = "cGcPlayerFreighterOwnership::ExistsInCurrentSystem"
    class IsInCurrentSystem(HookFactory):
        _name = "cGcPlayerFreighterOwnership::IsInCurrentSystem"
    class IsFreighterInventoryAccessible(HookFactory):
        _name = "cGcPlayerFreighterOwnership::IsFreighterInventoryAccessible"
    class CanConsiderSummoningFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CanConsiderSummoningFreighter"
    class CanConsiderDismissingFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CanConsiderDismissingFreighter"
    class CanSummonFreighter(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CanSummonFreighter"
    class RequestFreighterDespawn(HookFactory):
        _name = "cGcPlayerFreighterOwnership::RequestFreighterDespawn"
    class UpdateRaceAndNPCResource(HookFactory):
        _name = "cGcPlayerFreighterOwnership::UpdateRaceAndNPCResource"
    class CreatePlayerFreighterGenerationTask(HookFactory):
        _name = "cGcPlayerFreighterOwnership::CreatePlayerFreighterGenerationTask"
    class ApplyFreighterOwnershipSyncMessage(HookFactory):
        _name = "cGcPlayerFreighterOwnership::ApplyFreighterOwnershipSyncMessage"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcPlayerFreighterOwnership::OnNetworkPlayerStateEvent"
    class OnAmbientFreighterBaseRestructure(HookFactory):
        _name = "cGcPlayerFreighterOwnership::OnAmbientFreighterBaseRestructure"
    class GetFreighterInteriorMatrix(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GetFreighterInteriorMatrix"
    class UpdateOwnershipsActiveInSystems(HookFactory):
        _name = "cGcPlayerFreighterOwnership::UpdateOwnershipsActiveInSystems"
    class DespawnFreighterWithFleet(HookFactory):
        _name = "cGcPlayerFreighterOwnership::DespawnFreighterWithFleet"
    class GenerateFreighterReplicatedCustomColourOptions(HookFactory):
        _name = "cGcPlayerFreighterOwnership::GenerateFreighterReplicatedCustomColourOptions"

class cGcWonderManager:
    class cGcWonderManager(HookFactory):
        _name = "cGcWonderManager::cGcWonderManager"
    class Construct(HookFactory):
        _name = "cGcWonderManager::Construct"
    class Update(HookFactory):
        _name = "cGcWonderManager::Update"
    class GetWonderData(HookFactory):
        _name = "cGcWonderManager::GetWonderData"
    class GetWonderDataWritable(HookFactory):
        _name = "cGcWonderManager::GetWonderDataWritable"
    class TriggerOSDMessage(HookFactory):
        _name = "cGcWonderManager::TriggerOSDMessage"
    class OnProcProductReceived(HookFactory):
        _name = "cGcWonderManager::OnProcProductReceived"
    class ClearRecord(HookFactory):
        _name = "cGcWonderManager::ClearRecord"
    class DiscoveryDataSubmitted(HookFactory):
        _name = "cGcWonderManager::DiscoveryDataSubmitted"
    class GenerateDiscoveryExport(HookFactory):
        _name = "cGcWonderManager::GenerateDiscoveryExport"
    class SetWondersForRender(HookFactory):
        _name = "cGcWonderManager::SetWondersForRender"
    class UpdatePlayerEnvironmentRecords(HookFactory):
        _name = "cGcWonderManager::UpdatePlayerEnvironmentRecords"
    class TrySetRecords(HookFactory):
        _name = "cGcWonderManager::TrySetRecords"
    class TrySetRecord(HookFactory):
        _name = "cGcWonderManager::TrySetRecord"
    class ProcessDiscoveryExport(HookFactory):
        _name = "cGcWonderManager::ProcessDiscoveryExport"
    class ProcessPlanetDiscovery(HookFactory):
        _name = "cGcWonderManager::ProcessPlanetDiscovery"
    class ProcessCreatureDiscovery(HookFactory):
        _name = "cGcWonderManager::ProcessCreatureDiscovery"
    class ProcessFloraDiscovery(HookFactory):
        _name = "cGcWonderManager::ProcessFloraDiscovery"
    class ProcessMineralDiscovery(HookFactory):
        _name = "cGcWonderManager::ProcessMineralDiscovery"
    class CreateWonderDiscoveryExport(HookFactory):
        _name = "cGcWonderManager::CreateWonderDiscoveryExport"

class cGcUserSettings:
    class cGcUserSettings(HookFactory):
        _name = "cGcUserSettings::cGcUserSettings"
    class GetShipHUDVROffset(HookFactory):
        _name = "cGcUserSettings::GetShipHUDVROffset"
    class InitDefaultUserSettingsForThisDevice(HookFactory):
        _name = "cGcUserSettings::InitDefaultUserSettingsForThisDevice"
    class GetUseShipAutoControlVignette(HookFactory):
        _name = "cGcUserSettings::GetUseShipAutoControlVignette"
    class IsFlightInverted(HookFactory):
        _name = "cGcUserSettings::IsFlightInverted"
    class LoadState(HookFactory):
        _name = "cGcUserSettings::LoadState"
    class GetGyroMeleeHackEnabled(HookFactory):
        _name = "cGcUserSettings::GetGyroMeleeHackEnabled"
    class LoadPlatformSettingsStateFromStorage(HookFactory):
        _name = "cGcUserSettings::LoadPlatformSettingsStateFromStorage"
    class LoadSettingsAccountDataStateFromStorage(HookFactory):
        _name = "cGcUserSettings::LoadSettingsAccountDataStateFromStorage"
    class WriteStateToStorage(HookFactory):
        _name = "cGcUserSettings::WriteStateToStorage"
    class WriteStateToStorageThread(HookFactory):
        _name = "cGcUserSettings::WriteStateToStorageThread"
    class WriteSettingsAccountDataStateToStorage(HookFactory):
        _name = "cGcUserSettings::WriteSettingsAccountDataStateToStorage"
    class UpdateAll(HookFactory):
        _name = "cGcUserSettings::UpdateAll"
    class IsVoiceChatEnabled(HookFactory):
        _name = "cGcUserSettings::IsVoiceChatEnabled"
    class SetLookSensitivity(HookFactory):
        _name = "cGcUserSettings::SetLookSensitivity"
    class SetFlightSensitivity(HookFactory):
        _name = "cGcUserSettings::SetFlightSensitivity"
    class SetCursorSensitivity(HookFactory):
        _name = "cGcUserSettings::SetCursorSensitivity"
    class GetLookSensitivity(HookFactory):
        _name = "cGcUserSettings::GetLookSensitivity"
    class GetUIColourScheme(HookFactory):
        _name = "cGcUserSettings::GetUIColourScheme"
    class UseOldMouseFlight(HookFactory):
        _name = "cGcUserSettings::UseOldMouseFlight"
    class GetVRVehiclesUseWorldControls(HookFactory):
        _name = "cGcUserSettings::GetVRVehiclesUseWorldControls"

class cGcPersistentInteractionsManager:
    class cGcPersistentInteractionsManager(HookFactory):
        _name = "cGcPersistentInteractionsManager::cGcPersistentInteractionsManager"
    class Construct(HookFactory):
        _name = "cGcPersistentInteractionsManager::Construct"
    class Update(HookFactory):
        _name = "cGcPersistentInteractionsManager::Update"
    class InitializeFromData(HookFactory):
        _name = "cGcPersistentInteractionsManager::InitializeFromData"
    class PopulateArrays(HookFactory):
        _name = "cGcPersistentInteractionsManager::PopulateArrays"
    class FindPlayerBaseBufferByBasePosition(HookFactory):
        _name = "cGcPersistentInteractionsManager::FindPlayerBaseBufferByBasePosition"
    class GetPlayerBuffersInRange(HookFactory):
        _name = "cGcPersistentInteractionsManager::GetPlayerBuffersInRange"
    class GetInteractionBuffer(HookFactory):
        _name = "cGcPersistentInteractionsManager::GetInteractionBuffer"
    class LoadGalacticAddressBuffers(HookFactory):
        _name = "cGcPersistentInteractionsManager::LoadGalacticAddressBuffers"

class cGcPlayerState:
    class cGcPlayerState(HookFactory):
        _name = "cGcPlayerState::cGcPlayerState"
    class ResetTime(HookFactory):
        _name = "cGcPlayerState::ResetTime"
    class GetSeasonState(HookFactory):
        _name = "cGcPlayerState::GetSeasonState"
    class HasPortalInterference(HookFactory):
        _name = "cGcPlayerState::HasPortalInterference"
    class TryRemoveFromInventories(HookFactory):
        _name = "cGcPlayerState::TryRemoveFromInventories"
        _overload: overloads.cGcPlayerState.TryRemoveFromInventories.overloads = "cGcPlayerState *, const std::vector<enum InventoryChoice,TkSTLAllocatorShim<enum InventoryChoice,4,-1> > *, const cGcInventoryElement *, TryStoreMode"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.TryRemoveFromInventories.overloads):
            cls._overload = overload_args
            return cls
    class IsTechKnown(HookFactory):
        _name = "cGcPlayerState::IsTechKnown"
    class Construct(HookFactory):
        _name = "cGcPlayerState::Construct"
    class LoadFromData(HookFactory):
        _name = "cGcPlayerState::LoadFromData"
    class FindLastDifferentGalacticAddress(HookFactory):
        _name = "cGcPlayerState::FindLastDifferentGalacticAddress"
    class SetTitle(HookFactory):
        _name = "cGcPlayerState::SetTitle"
    class AdjustStatFromInventory(HookFactory):
        _name = "cGcPlayerState::AdjustStatFromInventory"
    class CalculateChoiceMap(HookFactory):
        _name = "cGcPlayerState::CalculateChoiceMap"
    class SaveToData(HookFactory):
        _name = "cGcPlayerState::SaveToData"
    class ValidateReturnPortalMarkerPosition(HookFactory):
        _name = "cGcPlayerState::ValidateReturnPortalMarkerPosition"
    class Clear(HookFactory):
        _name = "cGcPlayerState::Clear"
    class SetupInventory(HookFactory):
        _name = "cGcPlayerState::SetupInventory"
    class GetPlayerNameWithTitle(HookFactory):
        _name = "cGcPlayerState::GetPlayerNameWithTitle"
    class UnlockTitle(HookFactory):
        _name = "cGcPlayerState::UnlockTitle"
    class UnlockTrophy(HookFactory):
        _name = "cGcPlayerState::UnlockTrophy"
    class AddItemsToInventory(HookFactory):
        _name = "cGcPlayerState::AddItemsToInventory"
    class IsLocationSurveyed(HookFactory):
        _name = "cGcPlayerState::IsLocationSurveyed"
    class FindExistingSettlementState(HookFactory):
        _name = "cGcPlayerState::FindExistingSettlementState"
        _overload: overloads.cGcPlayerState.FindExistingSettlementState.overloads = "cGcPlayerState *, const unsigned __int64, const cTkVector3 *, const float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.FindExistingSettlementState.overloads):
            cls._overload = overload_args
            return cls
    class FindOrAssignSettlementState(HookFactory):
        _name = "cGcPlayerState::FindOrAssignSettlementState"
    class GetNextSettlementState(HookFactory):
        _name = "cGcPlayerState::GetNextSettlementState"
    class GetKnownSettlementStatesInPlanet(HookFactory):
        _name = "cGcPlayerState::GetKnownSettlementStatesInPlanet"
    class UpdateLocalSettlementStates(HookFactory):
        _name = "cGcPlayerState::UpdateLocalSettlementStates"
    class UpdateLocalSettlementState(HookFactory):
        _name = "cGcPlayerState::UpdateLocalSettlementState"
    class IsUAInSameSystemAsPlayer(HookFactory):
        _name = "cGcPlayerState::IsUAInSameSystemAsPlayer"
    class GetPlayerUniverseAddress(HookFactory):
        _name = "cGcPlayerState::GetPlayerUniverseAddress"
    class GetPlayerUniverseAddressPacked(HookFactory):
        _name = "cGcPlayerState::GetPlayerUniverseAddressPacked"
    class GetPlayerMatchmakingUniverseAddress(HookFactory):
        _name = "cGcPlayerState::GetPlayerMatchmakingUniverseAddress"
    class ChangeCurrentGalacticLocation(HookFactory):
        _name = "cGcPlayerState::ChangeCurrentGalacticLocation"
    class GoToRealityIndex(HookFactory):
        _name = "cGcPlayerState::GoToRealityIndex"
    class MoveAndStack(HookFactory):
        _name = "cGcPlayerState::MoveAndStack"
    class MoveAndStackAllowed(HookFactory):
        _name = "cGcPlayerState::MoveAndStackAllowed"
    class PackageTechnology(HookFactory):
        _name = "cGcPlayerState::PackageTechnology"
    class DeployProduct(HookFactory):
        _name = "cGcPlayerState::DeployProduct"
    class GetRelevantProcTechTierFromInventory(HookFactory):
        _name = "cGcPlayerState::GetRelevantProcTechTierFromInventory"
    class GetDeployTechFromProduct(HookFactory):
        _name = "cGcPlayerState::GetDeployTechFromProduct"
    class TryStoreInCurrentInventory(HookFactory):
        _name = "cGcPlayerState::TryStoreInCurrentInventory"
        _overload: overloads.cGcPlayerState.TryStoreInCurrentInventory.overloads = "cGcPlayerState *, const cGcRealitySubstanceData *, int, TryStoreMode"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.TryStoreInCurrentInventory.overloads):
            cls._overload = overload_args
            return cls
    class GetCurrentInventories(HookFactory):
        _name = "cGcPlayerState::GetCurrentInventories"
    class TryStoreInInventory_Internal(HookFactory):
        _name = "cGcPlayerState::TryStoreInInventory_Internal"
        _overload: overloads.cGcPlayerState.TryStoreInInventory_Internal.overloads = "cGcPlayerState *, int, const cGcInventoryElement *, cGcInventoryIndex, TryStoreMode"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.TryStoreInInventory_Internal.overloads):
            cls._overload = overload_args
            return cls
    class TryStoreInInventory(HookFactory):
        _name = "cGcPlayerState::TryStoreInInventory"
        _overload: overloads.cGcPlayerState.TryStoreInInventory.overloads = "cGcPlayerState *, int, const cGcInventoryElement *, cGcInventoryIndex, TryStoreMode"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.TryStoreInInventory.overloads):
            cls._overload = overload_args
            return cls
    class TryStoreInMultipleInventories(HookFactory):
        _name = "cGcPlayerState::TryStoreInMultipleInventories"
    class TryToRemoveFromSpecificInventory(HookFactory):
        _name = "cGcPlayerState::TryToRemoveFromSpecificInventory"
    class TryRemoveFromInventory(HookFactory):
        _name = "cGcPlayerState::TryRemoveFromInventory"
    class TryRemoveFromAllInventories(HookFactory):
        _name = "cGcPlayerState::TryRemoveFromAllInventories"
    class TryRemoveIllegalItemsFromInventories(HookFactory):
        _name = "cGcPlayerState::TryRemoveIllegalItemsFromInventories"
    class IsInventoryFull(HookFactory):
        _name = "cGcPlayerState::IsInventoryFull"
    class ClearInventoryHistories(HookFactory):
        _name = "cGcPlayerState::ClearInventoryHistories"
    class GetNumFilledSlots(HookFactory):
        _name = "cGcPlayerState::GetNumFilledSlots"
    class GetHealth(HookFactory):
        _name = "cGcPlayerState::GetHealth"
    class GetHealthPips(HookFactory):
        _name = "cGcPlayerState::GetHealthPips"
    class GetCurrentMaxHealthPips(HookFactory):
        _name = "cGcPlayerState::GetCurrentMaxHealthPips"
    class GetHealthPipSize(HookFactory):
        _name = "cGcPlayerState::GetHealthPipSize"
    class GetApproxDefenseUpgradeLevel(HookFactory):
        _name = "cGcPlayerState::GetApproxDefenseUpgradeLevel"
    class GetApproxCombatUpgradeLevelShip(HookFactory):
        _name = "cGcPlayerState::GetApproxCombatUpgradeLevelShip"
    class GetApproxCombatUpgradeLevel(HookFactory):
        _name = "cGcPlayerState::GetApproxCombatUpgradeLevel"
    class GiveProductResources(HookFactory):
        _name = "cGcPlayerState::GiveProductResources"
    class GetEnergy(HookFactory):
        _name = "cGcPlayerState::GetEnergy"
    class ModifyAndReturnHealth(HookFactory):
        _name = "cGcPlayerState::ModifyAndReturnHealth"
    class RestoreStatus(HookFactory):
        _name = "cGcPlayerState::RestoreStatus"
    class RestoreShipStatus(HookFactory):
        _name = "cGcPlayerState::RestoreShipStatus"
    class GetMaximumHealth(HookFactory):
        _name = "cGcPlayerState::GetMaximumHealth"
    class GetMaximumPersonalHealth(HookFactory):
        _name = "cGcPlayerState::GetMaximumPersonalHealth"
    class GetMaximumShipHealth(HookFactory):
        _name = "cGcPlayerState::GetMaximumShipHealth"
    class GetMaximumShield(HookFactory):
        _name = "cGcPlayerState::GetMaximumShield"
    class FindFirstRogueBoxItem(HookFactory):
        _name = "cGcPlayerState::FindFirstRogueBoxItem"
    class FindFirstCreatureEgg(HookFactory):
        _name = "cGcPlayerState::FindFirstCreatureEgg"
    class QueryAnyInventoryHasDeployableTech(HookFactory):
        _name = "cGcPlayerState::QueryAnyInventoryHasDeployableTech"
    class QueryInventoryHasProductOfType(HookFactory):
        _name = "cGcPlayerState::QueryInventoryHasProductOfType"
    class QueryInventoryHasEggModifierIngredient(HookFactory):
        _name = "cGcPlayerState::QueryInventoryHasEggModifierIngredient"
    class QueryAmountInInventory(HookFactory):
        _name = "cGcPlayerState::QueryAmountInInventory"
        _overload: overloads.cGcPlayerState.QueryAmountInInventory.overloads = "cGcPlayerState *, const InventoryChoice, const cGcInventoryElement *, bool, bool, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.QueryAmountInInventory.overloads):
            cls._overload = overload_args
            return cls
    class QueryAmountInInventories(HookFactory):
        _name = "cGcPlayerState::QueryAmountInInventories"
    class QueryAmountInAllInventories(HookFactory):
        _name = "cGcPlayerState::QueryAmountInAllInventories"
        _overload: overloads.cGcPlayerState.QueryAmountInAllInventories.overloads = "cGcPlayerState *, const cGcInventoryElement *, bool, bool, bool, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.QueryAmountInAllInventories.overloads):
            cls._overload = overload_args
            return cls
    class QueryAnyInventoryHasItem(HookFactory):
        _name = "cGcPlayerState::QueryAnyInventoryHasItem"
    class HasIllegalProductInAnyInventory(HookFactory):
        _name = "cGcPlayerState::HasIllegalProductInAnyInventory"
    class HasIllegalProduct(HookFactory):
        _name = "cGcPlayerState::HasIllegalProduct"
    class CollectAllMatchingInventoryElements(HookFactory):
        _name = "cGcPlayerState::CollectAllMatchingInventoryElements"
    class CollectAllMatchingInventoryElementsInInventories(HookFactory):
        _name = "cGcPlayerState::CollectAllMatchingInventoryElementsInInventories"
    class IsItemValid(HookFactory):
        _name = "cGcPlayerState::IsItemValid"
    class IsTechInstalled(HookFactory):
        _name = "cGcPlayerState::IsTechInstalled"
    class MatchesSpecialSeasonThreeTech(HookFactory):
        _name = "cGcPlayerState::MatchesSpecialSeasonThreeTech"
    class CanBuildTechnology(HookFactory):
        _name = "cGcPlayerState::CanBuildTechnology"
    class PostTechInstalled(HookFactory):
        _name = "cGcPlayerState::PostTechInstalled"
    class CanRepairTechnology(HookFactory):
        _name = "cGcPlayerState::CanRepairTechnology"
        _overload: overloads.cGcPlayerState.CanRepairTechnology.overloads = "cGcPlayerState *, const cGcInventoryStore *, const InventoryChoice, const cGcInventoryIndex *, const bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.CanRepairTechnology.overloads):
            cls._overload = overload_args
            return cls
    class RepairTechnology(HookFactory):
        _name = "cGcPlayerState::RepairTechnology"
    class ChargeForFree(HookFactory):
        _name = "cGcPlayerState::ChargeForFree"
    class ChargeTechnology(HookFactory):
        _name = "cGcPlayerState::ChargeTechnology"
    class TrashItem(HookFactory):
        _name = "cGcPlayerState::TrashItem"
    class TrashInventory(HookFactory):
        _name = "cGcPlayerState::TrashInventory"
    class DismantleTechnology(HookFactory):
        _name = "cGcPlayerState::DismantleTechnology"
        _overload: overloads.cGcPlayerState.DismantleTechnology.overloads = "cGcPlayerState *, cGcInventoryStore *, cGcInventoryStore *, const cGcInventoryElement *, const cGcInventoryIndex *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.DismantleTechnology.overloads):
            cls._overload = overload_args
            return cls
    class DismantleResults(HookFactory):
        _name = "cGcPlayerState::DismantleResults"
    class CanBuildProduct(HookFactory):
        _name = "cGcPlayerState::CanBuildProduct"
    class CanBuildOne(HookFactory):
        _name = "cGcPlayerState::CanBuildOne"
    class GetNumBuildable(HookFactory):
        _name = "cGcPlayerState::GetNumBuildable"
    class BuildProduct(HookFactory):
        _name = "cGcPlayerState::BuildProduct"
    class TryBuildOne(HookFactory):
        _name = "cGcPlayerState::TryBuildOne"
    class BuildBuildingProduct(HookFactory):
        _name = "cGcPlayerState::BuildBuildingProduct"
    class GetShipCargoValue(HookFactory):
        _name = "cGcPlayerState::GetShipCargoValue"
    class GetShipCargoIllegalItemsValue(HookFactory):
        _name = "cGcPlayerState::GetShipCargoIllegalItemsValue"
    class GetNumSuitStartingSlots(HookFactory):
        _name = "cGcPlayerState::GetNumSuitStartingSlots"
    class GetAssociatedInventories(HookFactory):
        _name = "cGcPlayerState::GetAssociatedInventories"
    class GetInventoriesFor(HookFactory):
        _name = "cGcPlayerState::GetInventoriesFor"
        _overload: overloads.cGcPlayerState.GetInventoriesFor.overloads = "cGcPlayerState *, int, std::vector<enum InventoryChoice,TkSTLAllocatorShim<enum InventoryChoice,4,-1> > *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.GetInventoriesFor.overloads):
            cls._overload = overload_args
            return cls
    class GetStatBonusText(HookFactory):
        _name = "cGcPlayerState::GetStatBonusText"
    class GetBaseStatAmount(HookFactory):
        _name = "cGcPlayerState::GetBaseStatAmount"
    class IsTechCoreShipWeapon(HookFactory):
        _name = "cGcPlayerState::IsTechCoreShipWeapon"
    class GetNumIntactCoreShipWeapons(HookFactory):
        _name = "cGcPlayerState::GetNumIntactCoreShipWeapons"
    class CanDestroyPlayerTechItem(HookFactory):
        _name = "cGcPlayerState::CanDestroyPlayerTechItem"
    class CanPackagePlayerTechItem(HookFactory):
        _name = "cGcPlayerState::CanPackagePlayerTechItem"
    class PlayerJumpedToNextGalaxy(HookFactory):
        _name = "cGcPlayerState::PlayerJumpedToNextGalaxy"
    class HasUAAtlasStation(HookFactory):
        _name = "cGcPlayerState::HasUAAtlasStation"
    class IsUsingThirdPersonCharacterCamera(HookFactory):
        _name = "cGcPlayerState::IsUsingThirdPersonCharacterCamera"
    class UseEntitlement(HookFactory):
        _name = "cGcPlayerState::UseEntitlement"
    class CanStartSpaceBattle(HookFactory):
        _name = "cGcPlayerState::CanStartSpaceBattle"
    class StartSpaceBattle(HookFactory):
        _name = "cGcPlayerState::StartSpaceBattle"
    class SetCustomWeaponName(HookFactory):
        _name = "cGcPlayerState::SetCustomWeaponName"
    class SetCustomShipName(HookFactory):
        _name = "cGcPlayerState::SetCustomShipName"
    class SetCustomVehicleName(HookFactory):
        _name = "cGcPlayerState::SetCustomVehicleName"
    class GetCurrentWeaponClass(HookFactory):
        _name = "cGcPlayerState::GetCurrentWeaponClass"
    class GetCurrentShipClass(HookFactory):
        _name = "cGcPlayerState::GetCurrentShipClass"
    class ChargeAllowed(HookFactory):
        _name = "cGcPlayerState::ChargeAllowed"
        _overload: overloads.cGcPlayerState.ChargeAllowed.overloads = "cGcPlayerState *, const cGcTechnology *, const cGcRealitySubstanceData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.ChargeAllowed.overloads):
            cls._overload = overload_args
            return cls
    class CanChargeTechWithItem(HookFactory):
        _name = "cGcPlayerState::CanChargeTechWithItem"
    class RemoveUnits(HookFactory):
        _name = "cGcPlayerState::RemoveUnits"
    class RemoveNanites(HookFactory):
        _name = "cGcPlayerState::RemoveNanites"
    class AwardUnits(HookFactory):
        _name = "cGcPlayerState::AwardUnits"
    class AwardNanites(HookFactory):
        _name = "cGcPlayerState::AwardNanites"
    class ApplyInitialKnownThingsPreset(HookFactory):
        _name = "cGcPlayerState::ApplyInitialKnownThingsPreset"
    class GetAdjacencyBonus(HookFactory):
        _name = "cGcPlayerState::GetAdjacencyBonus"
    class GetElementAdjacencyBonusAmount(HookFactory):
        _name = "cGcPlayerState::GetElementAdjacencyBonusAmount"
        _overload: overloads.cGcPlayerState.GetElementAdjacencyBonusAmount.overloads = "cGcPlayerState *, const cGcInventoryStore *, const cGcInventoryElement *, AdjacencyBonus"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.GetElementAdjacencyBonusAmount.overloads):
            cls._overload = overload_args
            return cls
    class IsElementStatChildOf(HookFactory):
        _name = "cGcPlayerState::IsElementStatChildOf"
    class GetTechColourFromInventory(HookFactory):
        _name = "cGcPlayerState::GetTechColourFromInventory"
    class GetElementLinkColour(HookFactory):
        _name = "cGcPlayerState::GetElementLinkColour"
    class GetStatValue(HookFactory):
        _name = "cGcPlayerState::GetStatValue"
    class GetPrimaryItemIndexForStat(HookFactory):
        _name = "cGcPlayerState::GetPrimaryItemIndexForStat"
    class GetPrimaryItemForStatFromInventorySelection_Internal(HookFactory):
        _name = "cGcPlayerState::GetPrimaryItemForStatFromInventorySelection_Internal"
    class GetPrimaryItemForStat(HookFactory):
        _name = "cGcPlayerState::GetPrimaryItemForStat"
        _overload: overloads.cGcPlayerState.GetPrimaryItemForStat.overloads = "cGcPlayerState *, eStatsType, InventoryChoice, ItemLookupType, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.GetPrimaryItemForStat.overloads):
            cls._overload = overload_args
            return cls
    class AwardTechnology(HookFactory):
        _name = "cGcPlayerState::AwardTechnology"
        _overload: overloads.cGcPlayerState.AwardTechnology.overloads = "cGcPlayerState *, const cGcTechnology *, bool, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.AwardTechnology.overloads):
            cls._overload = overload_args
            return cls
    class AwardInventorySlot(HookFactory):
        _name = "cGcPlayerState::AwardInventorySlot"
    class AwardSuitSlot(HookFactory):
        _name = "cGcPlayerState::AwardSuitSlot"
    class AwardShipSlot(HookFactory):
        _name = "cGcPlayerState::AwardShipSlot"
    class AwardWeaponSlot(HookFactory):
        _name = "cGcPlayerState::AwardWeaponSlot"
    class AwardFreighterSlot(HookFactory):
        _name = "cGcPlayerState::AwardFreighterSlot"
    class IsWordKnown(HookFactory):
        _name = "cGcPlayerState::IsWordKnown"
    class CanConverseWith(HookFactory):
        _name = "cGcPlayerState::CanConverseWith"
    class SeeBaseBuildingObject(HookFactory):
        _name = "cGcPlayerState::SeeBaseBuildingObject"
    class LearnProductRecipe(HookFactory):
        _name = "cGcPlayerState::LearnProductRecipe"
    class UpdateRedeemedSpecialsAndRewards(HookFactory):
        _name = "cGcPlayerState::UpdateRedeemedSpecialsAndRewards"
    class RedeemSpecial(HookFactory):
        _name = "cGcPlayerState::RedeemSpecial"
    class RedeemTwitchReward(HookFactory):
        _name = "cGcPlayerState::RedeemTwitchReward"
    class RedeemPlatformReward(HookFactory):
        _name = "cGcPlayerState::RedeemPlatformReward"
    class PromoteProductToFrontOfList(HookFactory):
        _name = "cGcPlayerState::PromoteProductToFrontOfList"
    class SpawnPlayerGrave(HookFactory):
        _name = "cGcPlayerState::SpawnPlayerGrave"
    class LearnWordGroup(HookFactory):
        _name = "cGcPlayerState::LearnWordGroup"
    class RecordRaceWordStat(HookFactory):
        _name = "cGcPlayerState::RecordRaceWordStat"
    class ChangeFactionStanding(HookFactory):
        _name = "cGcPlayerState::ChangeFactionStanding"
    class GetRaceRankInt(HookFactory):
        _name = "cGcPlayerState::GetRaceRankInt"
    class GetFactionRankInt(HookFactory):
        _name = "cGcPlayerState::GetFactionRankInt"
    class GetFactionStanding(HookFactory):
        _name = "cGcPlayerState::GetFactionStanding"
    class GetPlayerRaceRankString(HookFactory):
        _name = "cGcPlayerState::GetPlayerRaceRankString"
    class GetRaceRankString(HookFactory):
        _name = "cGcPlayerState::GetRaceRankString"
    class GetFactionRankString(HookFactory):
        _name = "cGcPlayerState::GetFactionRankString"
    class GetFactionMissionStat(HookFactory):
        _name = "cGcPlayerState::GetFactionMissionStat"
    class IncrementInteractionIndex(HookFactory):
        _name = "cGcPlayerState::IncrementInteractionIndex"
    class GetInventoryStoreFromChoice(HookFactory):
        _name = "cGcPlayerState::GetInventoryStoreFromChoice"
    class GetInventoryStoreFromChoiceWriteable(HookFactory):
        _name = "cGcPlayerState::GetInventoryStoreFromChoiceWriteable"
    class GetTechElement(HookFactory):
        _name = "cGcPlayerState::GetTechElement"
    class GetFreeShipIndex(HookFactory):
        _name = "cGcPlayerState::GetFreeShipIndex"
    class UpdateVehicleLocations(HookFactory):
        _name = "cGcPlayerState::UpdateVehicleLocations"
    class UpdateFinalisePurchaseState(HookFactory):
        _name = "cGcPlayerState::UpdateFinalisePurchaseState"
    class GetInventoryStoresFromBase(HookFactory):
        _name = "cGcPlayerState::GetInventoryStoresFromBase"
    class GetCookingIngredientStoresFromBase(HookFactory):
        _name = "cGcPlayerState::GetCookingIngredientStoresFromBase"
    class UsesThirdPersonShipCam(HookFactory):
        _name = "cGcPlayerState::UsesThirdPersonShipCam"
    class NumRequiredForRepairOrInstall(HookFactory):
        _name = "cGcPlayerState::NumRequiredForRepairOrInstall"
    class CalculateInventoryChoiceFromStore(HookFactory):
        _name = "cGcPlayerState::CalculateInventoryChoiceFromStore"
    class GetCurrentInventorySubIndexForChoice(HookFactory):
        _name = "cGcPlayerState::GetCurrentInventorySubIndexForChoice"
    class HasInteractionDialog(HookFactory):
        _name = "cGcPlayerState::HasInteractionDialog"
    class ReleaseInteractionDialog(HookFactory):
        _name = "cGcPlayerState::ReleaseInteractionDialog"
    class UpdateInteractionDialog(HookFactory):
        _name = "cGcPlayerState::UpdateInteractionDialog"
    class StoreCurrentSystemSpaceStationEndpoint(HookFactory):
        _name = "cGcPlayerState::StoreCurrentSystemSpaceStationEndpoint"
    class StoreTeleportEndpoint(HookFactory):
        _name = "cGcPlayerState::StoreTeleportEndpoint"
    class RemoveTeleportEndpoint(HookFactory):
        _name = "cGcPlayerState::RemoveTeleportEndpoint"
    class GetTeleportEndpoint(HookFactory):
        _name = "cGcPlayerState::GetTeleportEndpoint"
    class GetTeleportEndpointsVector(HookFactory):
        _name = "cGcPlayerState::GetTeleportEndpointsVector"
        _overload: overloads.cGcPlayerState.GetTeleportEndpointsVector.overloads = "cGcPlayerState *, eTeleporterType, const cGcTeleportEndpoint *, std::vector<cGcTeleportEndpoint,TkSTLAllocatorShim<cGcTeleportEndpoint,16,-1> > *, float, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerState.GetTeleportEndpointsVector.overloads):
            cls._overload = overload_args
            return cls
    class GetNumTeleportEndpoints(HookFactory):
        _name = "cGcPlayerState::GetNumTeleportEndpoints"
    class HasEndpointForEvent(HookFactory):
        _name = "cGcPlayerState::HasEndpointForEvent"
    class CanTeleportToExternalBases(HookFactory):
        _name = "cGcPlayerState::CanTeleportToExternalBases"
    class DoesTeleporterEndpointMatch(HookFactory):
        _name = "cGcPlayerState::DoesTeleporterEndpointMatch"
    class ValidateSavedInventoryItem(HookFactory):
        _name = "cGcPlayerState::ValidateSavedInventoryItem"
    class ValidateSavedTechItem(HookFactory):
        _name = "cGcPlayerState::ValidateSavedTechItem"
    class ShelveInventories(HookFactory):
        _name = "cGcPlayerState::ShelveInventories"
    class RestoreShelvedInventories(HookFactory):
        _name = "cGcPlayerState::RestoreShelvedInventories"
    class ClearIsOnOtherSideOfPortal(HookFactory):
        _name = "cGcPlayerState::ClearIsOnOtherSideOfPortal"
    class IsOnOtherSideOfStoryPortal(HookFactory):
        _name = "cGcPlayerState::IsOnOtherSideOfStoryPortal"
    class IsOnOtherSideOfCommunityPortal(HookFactory):
        _name = "cGcPlayerState::IsOnOtherSideOfCommunityPortal"
    class HasHyperdriveAccess(HookFactory):
        _name = "cGcPlayerState::HasHyperdriveAccess"
    class FindIllegalProductInInventory(HookFactory):
        _name = "cGcPlayerState::FindIllegalProductInInventory"
    class FindCookingProductInInventory(HookFactory):
        _name = "cGcPlayerState::FindCookingProductInInventory"
    class FindProcProductInInventory(HookFactory):
        _name = "cGcPlayerState::FindProcProductInInventory"
    class IsRewardRedeemedOrSpecialKnown(HookFactory):
        _name = "cGcPlayerState::IsRewardRedeemedOrSpecialKnown"
    class GetPendingRewardId(HookFactory):
        _name = "cGcPlayerState::GetPendingRewardId"
    class CompleteClaimPendingReward(HookFactory):
        _name = "cGcPlayerState::CompleteClaimPendingReward"
    class IsBlockedFromShipPurchase(HookFactory):
        _name = "cGcPlayerState::IsBlockedFromShipPurchase"
    class SetStoryPageSeenIndex(HookFactory):
        _name = "cGcPlayerState::SetStoryPageSeenIndex"
    class IsWordGroupKnown(HookFactory):
        _name = "cGcPlayerState::IsWordGroupKnown"
    class GetVehicleTypeFromInventory(HookFactory):
        _name = "cGcPlayerState::GetVehicleTypeFromInventory"
    class IsProductRecipeKnown(HookFactory):
        _name = "cGcPlayerState::IsProductRecipeKnown"
    class SetStatusRestores(HookFactory):
        _name = "cGcPlayerState::SetStatusRestores"
    class SetPrimaryShip(HookFactory):
        _name = "cGcPlayerState::SetPrimaryShip"
    class QueryProductAmountInAllInventories(HookFactory):
        _name = "cGcPlayerState::QueryProductAmountInAllInventories"
    class QueryTechAmountInAllInventories(HookFactory):
        _name = "cGcPlayerState::QueryTechAmountInAllInventories"
    class QuerySubstanceAmountInAllInventories(HookFactory):
        _name = "cGcPlayerState::QuerySubstanceAmountInAllInventories"
    class GetNumAtlasStationsVisited(HookFactory):
        _name = "cGcPlayerState::GetNumAtlasStationsVisited"
    class ResetShipTerrainPositioning(HookFactory):
        _name = "cGcPlayerState::ResetShipTerrainPositioning"
    class ClearShipSlot(HookFactory):
        _name = "cGcPlayerState::ClearShipSlot"

class cGcResourceCustomisation:
    class cGcResourceCustomisation(HookFactory):
        _name = "cGcResourceCustomisation::cGcResourceCustomisation"
        _overload: overloads.cGcResourceCustomisation.cGcResourceCustomisation.overloads = "cGcResourceCustomisation *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcResourceCustomisation.cGcResourceCustomisation.overloads):
            cls._overload = overload_args
            return cls
    class SetBaseColours(HookFactory):
        _name = "cGcResourceCustomisation::SetBaseColours"
    class Load(HookFactory):
        _name = "cGcResourceCustomisation::Load"
    class Save(HookFactory):
        _name = "cGcResourceCustomisation::Save"
    class LoadFromSaveData(HookFactory):
        _name = "cGcResourceCustomisation::LoadFromSaveData"
    class SaveToSaveData(HookFactory):
        _name = "cGcResourceCustomisation::SaveToSaveData"
    class Clear(HookFactory):
        _name = "cGcResourceCustomisation::Clear"
    class SwapDescriptor(HookFactory):
        _name = "cGcResourceCustomisation::SwapDescriptor"
    class RemoveDescriptorGroupPrefix(HookFactory):
        _name = "cGcResourceCustomisation::RemoveDescriptorGroupPrefix"
    class UsingDescriptorGroup(HookFactory):
        _name = "cGcResourceCustomisation::UsingDescriptorGroup"
    class SetTextureOption(HookFactory):
        _name = "cGcResourceCustomisation::SetTextureOption"
    class SetTextureOptions(HookFactory):
        _name = "cGcResourceCustomisation::SetTextureOptions"
    class SetBoneScalePosition(HookFactory):
        _name = "cGcResourceCustomisation::SetBoneScalePosition"
    class RebuildDescriptorsFromGroups(HookFactory):
        _name = "cGcResourceCustomisation::RebuildDescriptorsFromGroups"
    class RebuildTextureOptionsFromChoices(HookFactory):
        _name = "cGcResourceCustomisation::RebuildTextureOptionsFromChoices"
    class CreateGenerationTask(HookFactory):
        _name = "cGcResourceCustomisation::CreateGenerationTask"
    class GenerateReplicationData(HookFactory):
        _name = "cGcResourceCustomisation::GenerateReplicationData"
    class SetFromReplicationData(HookFactory):
        _name = "cGcResourceCustomisation::SetFromReplicationData"
    class ApplyMeshModifications(HookFactory):
        _name = "cGcResourceCustomisation::ApplyMeshModifications"
    class SetFromPreset(HookFactory):
        _name = "cGcResourceCustomisation::SetFromPreset"

class cGcPlayerVehicleOwnership:
    class cGcPlayerVehicleOwnership(HookFactory):
        _name = "cGcPlayerVehicleOwnership::cGcPlayerVehicleOwnership"
    class Prepare(HookFactory):
        _name = "cGcPlayerVehicleOwnership::Prepare"
    class Update(HookFactory):
        _name = "cGcPlayerVehicleOwnership::Update"
    class ClearPreviewNode(HookFactory):
        _name = "cGcPlayerVehicleOwnership::ClearPreviewNode"
    class Release(HookFactory):
        _name = "cGcPlayerVehicleOwnership::Release"
    class GetSpawnPostion(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetSpawnPostion"
    class SpawnNewVehicle(HookFactory):
        _name = "cGcPlayerVehicleOwnership::SpawnNewVehicle"
    class DestroyVehicle(HookFactory):
        _name = "cGcPlayerVehicleOwnership::DestroyVehicle"
    class IsSummonedAnywhere(HookFactory):
        _name = "cGcPlayerVehicleOwnership::IsSummonedAnywhere"
    class GetCurrentVehicleStatusText(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetCurrentVehicleStatusText"
    class CanConsiderSummoning(HookFactory):
        _name = "cGcPlayerVehicleOwnership::CanConsiderSummoning"
    class CanSummon(HookFactory):
        _name = "cGcPlayerVehicleOwnership::CanSummon"
    class GetPlayerVehicleName(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetPlayerVehicleName"
        _overload: overloads.cGcPlayerVehicleOwnership.GetPlayerVehicleName.overloads = "cGcPlayerVehicleOwnership *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerVehicleOwnership.GetPlayerVehicleName.overloads):
            cls._overload = overload_args
            return cls
    class GetPlayerVehicleDefaultName(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetPlayerVehicleDefaultName"
    class GetPrimary(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetPrimary"
    class CreatePlayerVehicleGenerationTask(HookFactory):
        _name = "cGcPlayerVehicleOwnership::CreatePlayerVehicleGenerationTask"
    class UpdateMeshRefresh(HookFactory):
        _name = "cGcPlayerVehicleOwnership::UpdateMeshRefresh"
    class IsInSummoningRange(HookFactory):
        _name = "cGcPlayerVehicleOwnership::IsInSummoningRange"
    class GetVehicleSpawnPosition(HookFactory):
        _name = "cGcPlayerVehicleOwnership::GetVehicleSpawnPosition"
    class DestroyAllVehicles(HookFactory):
        _name = "cGcPlayerVehicleOwnership::DestroyAllVehicles"
    class RequestVehicleSpawn(HookFactory):
        _name = "cGcPlayerVehicleOwnership::RequestVehicleSpawn"

class cGcSeasonalData:
    class cGcSeasonalData(HookFactory):
        _name = "cGcSeasonalData::cGcSeasonalData"
    class OnSeasonSettingsDownloaded(HookFactory):
        _name = "cGcSeasonalData::OnSeasonSettingsDownloaded"
    class RequestCurrentSeasonData(HookFactory):
        _name = "cGcSeasonalData::RequestCurrentSeasonData"
    class GenerateRewardDescriptions(HookFactory):
        _name = "cGcSeasonalData::GenerateRewardDescriptions"
    class RestoreServerSeasonalData(HookFactory):
        _name = "cGcSeasonalData::RestoreServerSeasonalData"
    class SetSeasonalGameModeData(HookFactory):
        _name = "cGcSeasonalData::SetSeasonalGameModeData"
    class IsCompatibleWithState(HookFactory):
        _name = "cGcSeasonalData::IsCompatibleWithState"
    class UpdateSaveForSeason(HookFactory):
        _name = "cGcSeasonalData::UpdateSaveForSeason"
    class GetResetSaveOnDeath(HookFactory):
        _name = "cGcSeasonalData::GetResetSaveOnDeath"
    class GetStatsToPersistOnReset(HookFactory):
        _name = "cGcSeasonalData::GetStatsToPersistOnReset"
    class ShouldForceTernaryStar(HookFactory):
        _name = "cGcSeasonalData::ShouldForceTernaryStar"
    class DoesSystemHaveOverridenSandworms(HookFactory):
        _name = "cGcSeasonalData::DoesSystemHaveOverridenSandworms"
    class ShouldSandwormSpawnGroundWorms(HookFactory):
        _name = "cGcSeasonalData::ShouldSandwormSpawnGroundWorms"
    class MustCraftInBases(HookFactory):
        _name = "cGcSeasonalData::MustCraftInBases"
    class GetTechCostMultiplier(HookFactory):
        _name = "cGcSeasonalData::GetTechCostMultiplier"
    class IsProductRemovedFromDefaultKnownProductsBySeason(HookFactory):
        _name = "cGcSeasonalData::IsProductRemovedFromDefaultKnownProductsBySeason"
    class IsSeasonActive(HookFactory):
        _name = "cGcSeasonalData::IsSeasonActive"
    class GetSecondsRemainingToStartNewGame(HookFactory):
        _name = "cGcSeasonalData::GetSecondsRemainingToStartNewGame"
    class HasUAOverride(HookFactory):
        _name = "cGcSeasonalData::HasUAOverride"
    class GetSeasonalMainIcon(HookFactory):
        _name = "cGcSeasonalData::GetSeasonalMainIcon"
    class GetMilestone(HookFactory):
        _name = "cGcSeasonalData::GetMilestone"
    class GetStageControlMilestoneIndex(HookFactory):
        _name = "cGcSeasonalData::GetStageControlMilestoneIndex"
    class GetMilestoneWithMission(HookFactory):
        _name = "cGcSeasonalData::GetMilestoneWithMission"
    class GetMilestoneWithRecipeReward(HookFactory):
        _name = "cGcSeasonalData::GetMilestoneWithRecipeReward"
    class GetMilestoneIndicesForMission(HookFactory):
        _name = "cGcSeasonalData::GetMilestoneIndicesForMission"
    class GenerateRewardDescription(HookFactory):
        _name = "cGcSeasonalData::GenerateRewardDescription"
    class GenerateSeasonStartSeed(HookFactory):
        _name = "cGcSeasonalData::GenerateSeasonStartSeed"
    class LoadServerSeasonalDataFromFile(HookFactory):
        _name = "cGcSeasonalData::LoadServerSeasonalDataFromFile"

class cGcSimulation:
    class cGcSimulation(HookFactory):
        _name = "cGcSimulation::cGcSimulation"
    class GetWarp(HookFactory):
        _name = "cGcSimulation::GetWarp"
    class GetUp(HookFactory):
        _name = "cGcSimulation::GetUp"
    class SetScene(HookFactory):
        _name = "cGcSimulation::SetScene"
    class Construct(HookFactory):
        _name = "cGcSimulation::Construct"
    class PollToPrepare(HookFactory):
        _name = "cGcSimulation::PollToPrepare"
    class Update(HookFactory):
        _name = "cGcSimulation::Update"
    class PollToRelease(HookFactory):
        _name = "cGcSimulation::PollToRelease"
    class Destruct(HookFactory):
        _name = "cGcSimulation::Destruct"
    class UpdateRender(HookFactory):
        _name = "cGcSimulation::UpdateRender"
    class StoreAndSetGroupNodeActivation(HookFactory):
        _name = "cGcSimulation::StoreAndSetGroupNodeActivation"
    class RestoreNodeActivation(HookFactory):
        _name = "cGcSimulation::RestoreNodeActivation"
    class OnViewRecentre(HookFactory):
        _name = "cGcSimulation::OnViewRecentre"
    class CanTransitionToGalacticMap(HookFactory):
        _name = "cGcSimulation::CanTransitionToGalacticMap"
    class WarpToSystem(HookFactory):
        _name = "cGcSimulation::WarpToSystem"
    class UpdateDestructionQueues(HookFactory):
        _name = "cGcSimulation::UpdateDestructionQueues"
    class GetUpParticles(HookFactory):
        _name = "cGcSimulation::GetUpParticles"

class cGcSceneManager:
    class cGcSceneManager(HookFactory):
        _name = "cGcSceneManager::cGcSceneManager"
    class AddSpotlightToNode(HookFactory):
        _name = "cGcSceneManager::AddSpotlightToNode"
    class Construct(HookFactory):
        _name = "cGcSceneManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcSceneManager::Prepare"
    class PrepareLighting(HookFactory):
        _name = "cGcSceneManager::PrepareLighting"
    class SetLightMatrix(HookFactory):
        _name = "cGcSceneManager::SetLightMatrix"
    class LoadScene(HookFactory):
        _name = "cGcSceneManager::LoadScene"
    class LoadPlanetScenes(HookFactory):
        _name = "cGcSceneManager::LoadPlanetScenes"
    class RenderSceneManagerNGuiCallback(HookFactory):
        _name = "cGcSceneManager::RenderSceneManagerNGuiCallback"

class cGcParticleManager:
    class cGcParticleManager(HookFactory):
        _name = "cGcParticleManager::cGcParticleManager"
    class AddPermanentEffect(HookFactory):
        _name = "cGcParticleManager::AddPermanentEffect"
        _overload: overloads.cGcParticleManager.AddPermanentEffect.overloads = "cGcParticleManager *, EffectInstance *, const TkID<128> *, const cTkMatrix34 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcParticleManager.AddPermanentEffect.overloads):
            cls._overload = overload_args
            return cls
    class AddManagedEffect(HookFactory):
        _name = "cGcParticleManager::AddManagedEffect"
        _overload: overloads.cGcParticleManager.AddManagedEffect.overloads = "cGcParticleManager *, EffectInstance *, const TkID<128> *, const cTkMatrix34 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcParticleManager.AddManagedEffect.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cGcParticleManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcParticleManager::Prepare"
    class LoadData(HookFactory):
        _name = "cGcParticleManager::LoadData"
    class BeginUpdate(HookFactory):
        _name = "cGcParticleManager::BeginUpdate"
    class EndUpdate(HookFactory):
        _name = "cGcParticleManager::EndUpdate"
    class Sync(HookFactory):
        _name = "cGcParticleManager::Sync"
    class Release(HookFactory):
        _name = "cGcParticleManager::Release"
    class SetHeavyAir(HookFactory):
        _name = "cGcParticleManager::SetHeavyAir"
    class SetHeavyAirProperties(HookFactory):
        _name = "cGcParticleManager::SetHeavyAirProperties"
    class AddEffect_Internal(HookFactory):
        _name = "cGcParticleManager::AddEffect_Internal"
    class GetExplosionData(HookFactory):
        _name = "cGcParticleManager::GetExplosionData"
    class Save(HookFactory):
        _name = "cGcParticleManager::Save"
    class RenderImGui(HookFactory):
        _name = "cGcParticleManager::RenderImGui"
    class CanSpawnEffect(HookFactory):
        _name = "cGcParticleManager::CanSpawnEffect"
    class IsActive(HookFactory):
        _name = "cGcParticleManager::IsActive"
    class RetireEffect(HookFactory):
        _name = "cGcParticleManager::RetireEffect"
    class RetireEffectsAndDestroyNodeOnCompletion(HookFactory):
        _name = "cGcParticleManager::RetireEffectsAndDestroyNodeOnCompletion"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcParticleManager::RenderImGuiCallback"

class cGcEnvironment:
    class cGcEnvironment(HookFactory):
        _name = "cGcEnvironment::cGcEnvironment"
    class GetSky(HookFactory):
        _name = "cGcEnvironment::GetSky"
    class Construct(HookFactory):
        _name = "cGcEnvironment::Construct"
    class Prepare(HookFactory):
        _name = "cGcEnvironment::Prepare"
    class Render2D(HookFactory):
        _name = "cGcEnvironment::Render2D"
    class ActivateInstance_Internal(HookFactory):
        _name = "cGcEnvironment::ActivateInstance_Internal"
    class ActivateInstanceCallback(HookFactory):
        _name = "cGcEnvironment::ActivateInstanceCallback"
    class UpdateShadowingState(HookFactory):
        _name = "cGcEnvironment::UpdateShadowingState"
    class UpdatePlayerEnvironmentState(HookFactory):
        _name = "cGcEnvironment::UpdatePlayerEnvironmentState"
    class CalculateHazardFactor(HookFactory):
        _name = "cGcEnvironment::CalculateHazardFactor"
    class NormaliseHazardFactor(HookFactory):
        _name = "cGcEnvironment::NormaliseHazardFactor"
    class CalcTemperature(HookFactory):
        _name = "cGcEnvironment::CalcTemperature"
    class CalcRadiation(HookFactory):
        _name = "cGcEnvironment::CalcRadiation"
    class CalcToxicity(HookFactory):
        _name = "cGcEnvironment::CalcToxicity"
    class CalcLifeDrain(HookFactory):
        _name = "cGcEnvironment::CalcLifeDrain"
    class CalculatePlanetHazardValue(HookFactory):
        _name = "cGcEnvironment::CalculatePlanetHazardValue"
    class PollToConstructTextures(HookFactory):
        _name = "cGcEnvironment::PollToConstructTextures"
    class EnqueueRenderReflections(HookFactory):
        _name = "cGcEnvironment::EnqueueRenderReflections"
    class UpdateRender(HookFactory):
        _name = "cGcEnvironment::UpdateRender"
    class AssignShaders(HookFactory):
        _name = "cGcEnvironment::AssignShaders"
    class GetTerrainFadeTime(HookFactory):
        _name = "cGcEnvironment::GetTerrainFadeTime"
    class IsPointInsideFreighterInternals(HookFactory):
        _name = "cGcEnvironment::IsPointInsideFreighterInternals"
    class IsPointInsideSpaceBase(HookFactory):
        _name = "cGcEnvironment::IsPointInsideSpaceBase"
    class IsPointInsideAbandonedFreighter(HookFactory):
        _name = "cGcEnvironment::IsPointInsideAbandonedFreighter"
    class IsPlayerIndoorsOnAbandonedFreighter(HookFactory):
        _name = "cGcEnvironment::IsPlayerIndoorsOnAbandonedFreighter"
    class SetCloudsEnabled(HookFactory):
        _name = "cGcEnvironment::SetCloudsEnabled"

class cGcSky:
    class cGcSky(HookFactory):
        _name = "cGcSky::cGcSky"
    class GetTimeOfDay(HookFactory):
        _name = "cGcSky::GetTimeOfDay"
    class IsWeatherExtreme(HookFactory):
        _name = "cGcSky::IsWeatherExtreme"
    class PhotoModeChangeTimeOfDay(HookFactory):
        _name = "cGcSky::PhotoModeChangeTimeOfDay"
    class GetTimeOfDayAtPosition(HookFactory):
        _name = "cGcSky::GetTimeOfDayAtPosition"
    class GetNightFactor(HookFactory):
        _name = "cGcSky::GetNightFactor"
    class Construct(HookFactory):
        _name = "cGcSky::Construct"
    class Prepare(HookFactory):
        _name = "cGcSky::Prepare"
    class Update(HookFactory):
        _name = "cGcSky::Update"
    class UpdateSkyNodes(HookFactory):
        _name = "cGcSky::UpdateSkyNodes"
    class UpdateFlight(HookFactory):
        _name = "cGcSky::UpdateFlight"
    class SetStormState(HookFactory):
        _name = "cGcSky::SetStormState"
    class UpdateWind(HookFactory):
        _name = "cGcSky::UpdateWind"
    class UpdateLightDirection(HookFactory):
        _name = "cGcSky::UpdateLightDirection"
    class UpdateLightNode(HookFactory):
        _name = "cGcSky::UpdateLightNode"
    class UpdateScreenFilter(HookFactory):
        _name = "cGcSky::UpdateScreenFilter"
    class UpdateHeavyAir(HookFactory):
        _name = "cGcSky::UpdateHeavyAir"
    class UpdateSunPosition(HookFactory):
        _name = "cGcSky::UpdateSunPosition"
    class UpdateRainbow(HookFactory):
        _name = "cGcSky::UpdateRainbow"
    class CleanUpWeatherEffectsAndResources(HookFactory):
        _name = "cGcSky::CleanUpWeatherEffectsAndResources"
    class RefreshWeatherEffectRegionCache(HookFactory):
        _name = "cGcSky::RefreshWeatherEffectRegionCache"
    class CanSpawn(HookFactory):
        _name = "cGcSky::CanSpawn"
    class SpawnWeatherEffects(HookFactory):
        _name = "cGcSky::SpawnWeatherEffects"
    class SpawnWeatherHazards(HookFactory):
        _name = "cGcSky::SpawnWeatherHazards"
    class UpdateWeatherEffects(HookFactory):
        _name = "cGcSky::UpdateWeatherEffects"
    class GetWeatherBloomOverrides(HookFactory):
        _name = "cGcSky::GetWeatherBloomOverrides"
    class ImpulsetWeatherBloomInterpFactor(HookFactory):
        _name = "cGcSky::ImpulsetWeatherBloomInterpFactor"
    class GetStorms(HookFactory):
        _name = "cGcSky::GetStorms"
    class GetNumWeatherEffectsOfTypeActive(HookFactory):
        _name = "cGcSky::GetNumWeatherEffectsOfTypeActive"
    class GetWeatherSpawnChance(HookFactory):
        _name = "cGcSky::GetWeatherSpawnChance"
    class SetSunAngle(HookFactory):
        _name = "cGcSky::SetSunAngle"
    class SetTimeOfDay(HookFactory):
        _name = "cGcSky::SetTimeOfDay"
    class DisablePhotoMode(HookFactory):
        _name = "cGcSky::DisablePhotoMode"
    class CalculateColours(HookFactory):
        _name = "cGcSky::CalculateColours"
    class ModifyColours(HookFactory):
        _name = "cGcSky::ModifyColours"
    class BlendSkyColours(HookFactory):
        _name = "cGcSky::BlendSkyColours"
    class CalculateSkyProperties(HookFactory):
        _name = "cGcSky::CalculateSkyProperties"
    class CalculateFogProperties(HookFactory):
        _name = "cGcSky::CalculateFogProperties"
    class UpdateWetEffects(HookFactory):
        _name = "cGcSky::UpdateWetEffects"
    class BlendFogProperties(HookFactory):
        _name = "cGcSky::BlendFogProperties"
    class CalculateHeavyAirProperties(HookFactory):
        _name = "cGcSky::CalculateHeavyAirProperties"
    class CalculateLightShaftProperties(HookFactory):
        _name = "cGcSky::CalculateLightShaftProperties"
    class BlendHeavyAirColours(HookFactory):
        _name = "cGcSky::BlendHeavyAirColours"
    class SetCloudProperties(HookFactory):
        _name = "cGcSky::SetCloudProperties"
    class ChooseWeightedFilenameIndex(HookFactory):
        _name = "cGcSky::ChooseWeightedFilenameIndex"

class cGcProjectileManager:
    class cGcProjectileManager(HookFactory):
        _name = "cGcProjectileManager::cGcProjectileManager"
    class SpawnResourceBlobs(HookFactory):
        _name = "cGcProjectileManager::SpawnResourceBlobs"
        _overload: overloads.cGcProjectileManager.SpawnResourceBlobs.overloads = "cGcProjectileManager *, const cTkMatrix34 *, int, const TkID<128> *, eResourceBlobSpawnStyle, bool, cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProjectileManager.SpawnResourceBlobs.overloads):
            cls._overload = overload_args
            return cls
    class GetProjectileData(HookFactory):
        _name = "cGcProjectileManager::GetProjectileData"
    class GetLaserData(HookFactory):
        _name = "cGcProjectileManager::GetLaserData"
    class Construct(HookFactory):
        _name = "cGcProjectileManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcProjectileManager::Prepare"
    class Launch(HookFactory):
        _name = "cGcProjectileManager::Launch"
    class Update(HookFactory):
        _name = "cGcProjectileManager::Update"
    class Release(HookFactory):
        _name = "cGcProjectileManager::Release"
    class Impact(HookFactory):
        _name = "cGcProjectileManager::Impact"
    class OnResourceBlobSpawn(HookFactory):
        _name = "cGcProjectileManager::OnResourceBlobSpawn"
    class HitEditTerrain(HookFactory):
        _name = "cGcProjectileManager::HitEditTerrain"
    class SpawnResources(HookFactory):
        _name = "cGcProjectileManager::SpawnResources"
    class SpawnSpecialQuestResource(HookFactory):
        _name = "cGcProjectileManager::SpawnSpecialQuestResource"
    class GetImpactType(HookFactory):
        _name = "cGcProjectileManager::GetImpactType"
    class HandleImpactExplosion(HookFactory):
        _name = "cGcProjectileManager::HandleImpactExplosion"
    class AddImpactParticleEffect(HookFactory):
        _name = "cGcProjectileManager::AddImpactParticleEffect"

class cGcAISpaceshipManager:
    class cGcAISpaceshipManager(HookFactory):
        _name = "cGcAISpaceshipManager::cGcAISpaceshipManager"
    class CreateSquad(HookFactory):
        _name = "cGcAISpaceshipManager::CreateSquad"
    class LookupCombatDefinition(HookFactory):
        _name = "cGcAISpaceshipManager::LookupCombatDefinition"
    class GetSquad(HookFactory):
        _name = "cGcAISpaceshipManager::GetSquad"
    class Construct(HookFactory):
        _name = "cGcAISpaceshipManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcAISpaceshipManager::Prepare"
    class Update(HookFactory):
        _name = "cGcAISpaceshipManager::Update"
    class ProcessSpawnEvent(HookFactory):
        _name = "cGcAISpaceshipManager::ProcessSpawnEvent"
    class Release(HookFactory):
        _name = "cGcAISpaceshipManager::Release"
    class RemoveSquadShipNodes(HookFactory):
        _name = "cGcAISpaceshipManager::RemoveSquadShipNodes"
    class FindSquadByName(HookFactory):
        _name = "cGcAISpaceshipManager::FindSquadByName"
    class FindOrCreateSquad(HookFactory):
        _name = "cGcAISpaceshipManager::FindOrCreateSquad"
    class ReleaseSquad(HookFactory):
        _name = "cGcAISpaceshipManager::ReleaseSquad"
    class GetPerception(HookFactory):
        _name = "cGcAISpaceshipManager::GetPerception"
    class LookupAttackData(HookFactory):
        _name = "cGcAISpaceshipManager::LookupAttackData"
    class LookupAttackTravelData(HookFactory):
        _name = "cGcAISpaceshipManager::LookupAttackTravelData"
    class LookupShieldData(HookFactory):
        _name = "cGcAISpaceshipManager::LookupShieldData"
    class LookupAttackBehaviourData(HookFactory):
        _name = "cGcAISpaceshipManager::LookupAttackBehaviourData"
    class SpawnShips(HookFactory):
        _name = "cGcAISpaceshipManager::SpawnShips"
    class RemoveSpecificShipFromSquadManagement(HookFactory):
        _name = "cGcAISpaceshipManager::RemoveSpecificShipFromSquadManagement"
    class RenderNGui(HookFactory):
        _name = "cGcAISpaceshipManager::RenderNGui"
    class RemoveAllShipNodesFromAllSquads(HookFactory):
        _name = "cGcAISpaceshipManager::RemoveAllShipNodesFromAllSquads"
    class UpdateFreighterSpawns(HookFactory):
        _name = "cGcAISpaceshipManager::UpdateFreighterSpawns"
    class GetFrigateShipResource(HookFactory):
        _name = "cGcAISpaceshipManager::GetFrigateShipResource"
    class CheckPlayerBoost(HookFactory):
        _name = "cGcAISpaceshipManager::CheckPlayerBoost"
    class CacheHangar(HookFactory):
        _name = "cGcAISpaceshipManager::CacheHangar"
        _overload: overloads.cGcAISpaceshipManager.CacheHangar.overloads = "cGcAISpaceshipManager *, cTkModelResource *, const cGcPlanetColourData *, const cTkSeed *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAISpaceshipManager.CacheHangar.overloads):
            cls._overload = overload_args
            return cls
    class CacheShips(HookFactory):
        _name = "cGcAISpaceshipManager::CacheShips"
    class GetAppropriateSpaceshipModelData(HookFactory):
        _name = "cGcAISpaceshipManager::GetAppropriateSpaceshipModelData"
    class SpawnShip(HookFactory):
        _name = "cGcAISpaceshipManager::SpawnShip"
    class GetSpawnData(HookFactory):
        _name = "cGcAISpaceshipManager::GetSpawnData"
    class DropLoot(HookFactory):
        _name = "cGcAISpaceshipManager::DropLoot"
    class CacheShipForFrigate(HookFactory):
        _name = "cGcAISpaceshipManager::CacheShipForFrigate"
    class CreateSpaceshipComponentData(HookFactory):
        _name = "cGcAISpaceshipManager::CreateSpaceshipComponentData"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcAISpaceshipManager::RenderNGuiCallback"

class cGcPlayer:
    class cGcPlayer(HookFactory):
        _name = "cGcPlayer::cGcPlayer"
    class VirtualGetMatrix(HookFactory):
        _name = "cGcPlayer::VirtualGetMatrix"
    class GetNetworkIndex(HookFactory):
        _name = "cGcPlayer::GetNetworkIndex"
    class IsInSpaceship(HookFactory):
        _name = "cGcPlayer::IsInSpaceship"
    class GetVehicle(HookFactory):
        _name = "cGcPlayer::GetVehicle"
    class IsInLandVehicle(HookFactory):
        _name = "cGcPlayer::IsInLandVehicle"
    class GetPosition(HookFactory):
        _name = "cGcPlayer::GetPosition"
    class GetThirdPerson(HookFactory):
        _name = "cGcPlayer::GetThirdPerson"
    class GetPersonalTeleporter(HookFactory):
        _name = "cGcPlayer::GetPersonalTeleporter"
    class SetFacing(HookFactory):
        _name = "cGcPlayer::SetFacing"
    class RequestFallenCheck(HookFactory):
        _name = "cGcPlayer::RequestFallenCheck"
    class AdjustPositionForRespawn(HookFactory):
        _name = "cGcPlayer::AdjustPositionForRespawn"
        _overload: overloads.cGcPlayer.AdjustPositionForRespawn.overloads = "cGcPlayer *, cTkVector3 *, const cTkVector3 *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.AdjustPositionForRespawn.overloads):
            cls._overload = overload_args
            return cls
    class TakeDamage(HookFactory):
        _name = "cGcPlayer::TakeDamage"
        _overload: overloads.cGcPlayer.TakeDamage.overloads = "cGcPlayer *, const TkID<128> *, const TkID<128> *, const cTkVector3 *, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.TakeDamage.overloads):
            cls._overload = overload_args
            return cls
    class HasMoveForce(HookFactory):
        _name = "cGcPlayer::HasMoveForce"
    class IsClenchingFist(HookFactory):
        _name = "cGcPlayer::IsClenchingFist"
    class IsAttackingPredator(HookFactory):
        _name = "cGcPlayer::IsAttackingPredator"
    class HasWarpJumpTarget(HookFactory):
        _name = "cGcPlayer::HasWarpJumpTarget"
    class Construct(HookFactory):
        _name = "cGcPlayer::Construct"
    class Prepare(HookFactory):
        _name = "cGcPlayer::Prepare"
    class GetVehicleMatrix(HookFactory):
        _name = "cGcPlayer::GetVehicleMatrix"
    class Subscribe(HookFactory):
        _name = "cGcPlayer::Subscribe"
    class IsStealthActive(HookFactory):
        _name = "cGcPlayer::IsStealthActive"
    class GetJetpackAmount(HookFactory):
        _name = "cGcPlayer::GetJetpackAmount"
    class GetWaterDepth(HookFactory):
        _name = "cGcPlayer::GetWaterDepth"
    class GetWaterSurfaceFactor(HookFactory):
        _name = "cGcPlayer::GetWaterSurfaceFactor"
    class GetMiningBonus(HookFactory):
        _name = "cGcPlayer::GetMiningBonus"
    class GetJetpackTankSize(HookFactory):
        _name = "cGcPlayer::GetJetpackTankSize"
    class GetJetpackRefillBonus(HookFactory):
        _name = "cGcPlayer::GetJetpackRefillBonus"
    class CanJetpackRefillMidair(HookFactory):
        _name = "cGcPlayer::CanJetpackRefillMidair"
    class GetSprintRecoveryBonus(HookFactory):
        _name = "cGcPlayer::GetSprintRecoveryBonus"
    class UseLifeSupportForOxygenShield(HookFactory):
        _name = "cGcPlayer::UseLifeSupportForOxygenShield"
    class GetJetpackIgnitionTime(HookFactory):
        _name = "cGcPlayer::GetJetpackIgnitionTime"
    class GetHyperdriveFuelUse(HookFactory):
        _name = "cGcPlayer::GetHyperdriveFuelUse"
    class CanEmergencyWarp(HookFactory):
        _name = "cGcPlayer::CanEmergencyWarp"
    class HasCargoShieldAvailable(HookFactory):
        _name = "cGcPlayer::HasCargoShieldAvailable"
    class GetAutoTranslatorCapacity(HookFactory):
        _name = "cGcPlayer::GetAutoTranslatorCapacity"
    class CanDiscoverSecondary(HookFactory):
        _name = "cGcPlayer::CanDiscoverSecondary"
    class AddRecoil(HookFactory):
        _name = "cGcPlayer::AddRecoil"
    class Update(HookFactory):
        _name = "cGcPlayer::Update"
    class UpdateAutoSave(HookFactory):
        _name = "cGcPlayer::UpdateAutoSave"
    class UpdateBodyTurning(HookFactory):
        _name = "cGcPlayer::UpdateBodyTurning"
    class UpdateShieldsAndFuel(HookFactory):
        _name = "cGcPlayer::UpdateShieldsAndFuel"
    class UpdateJetpackBoosts(HookFactory):
        _name = "cGcPlayer::UpdateJetpackBoosts"
    class UpdateSprintBoosts(HookFactory):
        _name = "cGcPlayer::UpdateSprintBoosts"
    class DelayThirdPersonPostPhysUpdate(HookFactory):
        _name = "cGcPlayer::DelayThirdPersonPostPhysUpdate"
    class UpdatePointing(HookFactory):
        _name = "cGcPlayer::UpdatePointing"
    class GetPointingUnitWristMotion(HookFactory):
        _name = "cGcPlayer::GetPointingUnitWristMotion"
    class UpdateHandTracking(HookFactory):
        _name = "cGcPlayer::UpdateHandTracking"
    class UpdateHandTrackingPostPhysics(HookFactory):
        _name = "cGcPlayer::UpdateHandTrackingPostPhysics"
    class GetHandTrackingBodyMatrix(HookFactory):
        _name = "cGcPlayer::GetHandTrackingBodyMatrix"
    class UpdateRender(HookFactory):
        _name = "cGcPlayer::UpdateRender"
    class Release(HookFactory):
        _name = "cGcPlayer::Release"
    class IsFullSimLobbyHost(HookFactory):
        _name = "cGcPlayer::IsFullSimLobbyHost"
    class GetWristToSocketTransform(HookFactory):
        _name = "cGcPlayer::GetWristToSocketTransform"
    class GetWeaponAttachMatrix(HookFactory):
        _name = "cGcPlayer::GetWeaponAttachMatrix"
    class GetThirdPersonCharacterNode(HookFactory):
        _name = "cGcPlayer::GetThirdPersonCharacterNode"
    class UpdateVRCameraOffset(HookFactory):
        _name = "cGcPlayer::UpdateVRCameraOffset"
    class GetVRCameraOffset(HookFactory):
        _name = "cGcPlayer::GetVRCameraOffset"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcPlayer::GetPhysicsMatrix"
    class GetControllerMatrix(HookFactory):
        _name = "cGcPlayer::GetControllerMatrix"
    class GetRigidBody(HookFactory):
        _name = "cGcPlayer::GetRigidBody"
    class GetCustomPlayerControl(HookFactory):
        _name = "cGcPlayer::GetCustomPlayerControl"
    class GetEnvironmentLocation(HookFactory):
        _name = "cGcPlayer::GetEnvironmentLocation"
    class IsWaitingForRocketBootsActivation(HookFactory):
        _name = "cGcPlayer::IsWaitingForRocketBootsActivation"
    class IsStillJetpackIgniting(HookFactory):
        _name = "cGcPlayer::IsStillJetpackIgniting"
    class HasJetpackTankAtLeastMinimumFuelForRocketBoots(HookFactory):
        _name = "cGcPlayer::HasJetpackTankAtLeastMinimumFuelForRocketBoots"
    class IsUsingJetpack(HookFactory):
        _name = "cGcPlayer::IsUsingJetpack"
    class RenderNGui(HookFactory):
        _name = "cGcPlayer::RenderNGui"
    class RenderInventoryEditor(HookFactory):
        _name = "cGcPlayer::RenderInventoryEditor"
    class ChangingMode(HookFactory):
        _name = "cGcPlayer::ChangingMode"
    class CalculatePlayerForce(HookFactory):
        _name = "cGcPlayer::CalculatePlayerForce"
    class GetDesiredControllerDir(HookFactory):
        _name = "cGcPlayer::GetDesiredControllerDir"
    class CanUseWeapon(HookFactory):
        _name = "cGcPlayer::CanUseWeapon"
    class UpdateAction(HookFactory):
        _name = "cGcPlayer::UpdateAction"
    class UpdateWarpRequests(HookFactory):
        _name = "cGcPlayer::UpdateWarpRequests"
    class DisablePlayer(HookFactory):
        _name = "cGcPlayer::DisablePlayer"
    class EnablePlayer(HookFactory):
        _name = "cGcPlayer::EnablePlayer"
    class BreakTechFromDamageType(HookFactory):
        _name = "cGcPlayer::BreakTechFromDamageType"
    class SelectTechElementToDamage(HookFactory):
        _name = "cGcPlayer::SelectTechElementToDamage"
    class SetToPosition(HookFactory):
        _name = "cGcPlayer::SetToPosition"
        _overload: overloads.cGcPlayer.SetToPosition.overloads = "cGcPlayer *, const cTkVector3 *, const cTkVector3 *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.SetToPosition.overloads):
            cls._overload = overload_args
            return cls
    class PlayHeadAnimation(HookFactory):
        _name = "cGcPlayer::PlayHeadAnimation"
    class IsPlayingHeadAnim(HookFactory):
        _name = "cGcPlayer::IsPlayingHeadAnim"
    class UpdateScanning(HookFactory):
        _name = "cGcPlayer::UpdateScanning"
    class DoShipScan(HookFactory):
        _name = "cGcPlayer::DoShipScan"
    class DoToolScan(HookFactory):
        _name = "cGcPlayer::DoToolScan"
    class UpdateControl(HookFactory):
        _name = "cGcPlayer::UpdateControl"
    class CheckForLanding(HookFactory):
        _name = "cGcPlayer::CheckForLanding"
    class UpdateUnderwaterControl(HookFactory):
        _name = "cGcPlayer::UpdateUnderwaterControl"
    class UpdateSteepSlopePlayerMovement(HookFactory):
        _name = "cGcPlayer::UpdateSteepSlopePlayerMovement"
    class CanRun(HookFactory):
        _name = "cGcPlayer::CanRun"
    class CanRechargePersonalShield(HookFactory):
        _name = "cGcPlayer::CanRechargePersonalShield"
    class FinishRidingCreature(HookFactory):
        _name = "cGcPlayer::FinishRidingCreature"
    class CanThrowCreatureFood(HookFactory):
        _name = "cGcPlayer::CanThrowCreatureFood"
    class ThrowCreatureFood(HookFactory):
        _name = "cGcPlayer::ThrowCreatureFood"
        _overload: overloads.cGcPlayer.ThrowCreatureFood.overloads = "cGcPlayer *, TkID<128>, cGcCreatureComponent *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.ThrowCreatureFood.overloads):
            cls._overload = overload_args
            return cls
    class CanConsiderSummoningPet(HookFactory):
        _name = "cGcPlayer::CanConsiderSummoningPet"
    class GetSummonedPet(HookFactory):
        _name = "cGcPlayer::GetSummonedPet"
    class GetCurrentPetBehaviour(HookFactory):
        _name = "cGcPlayer::GetCurrentPetBehaviour"
    class GetPetBehaviourText(HookFactory):
        _name = "cGcPlayer::GetPetBehaviourText"
    class ClaimPet(HookFactory):
        _name = "cGcPlayer::ClaimPet"
    class DismissSummonedPet(HookFactory):
        _name = "cGcPlayer::DismissSummonedPet"
    class SummonPet(HookFactory):
        _name = "cGcPlayer::SummonPet"
        _overload: overloads.cGcPlayer.SummonPet.overloads = "cGcPlayer *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.SummonPet.overloads):
            cls._overload = overload_args
            return cls
    class OwnsFriendlyDrone(HookFactory):
        _name = "cGcPlayer::OwnsFriendlyDrone"
    class SummonFriendlyDrone(HookFactory):
        _name = "cGcPlayer::SummonFriendlyDrone"
    class ShouldDismissFriendlyDrone(HookFactory):
        _name = "cGcPlayer::ShouldDismissFriendlyDrone"
    class DismissFriendlyDrone(HookFactory):
        _name = "cGcPlayer::DismissFriendlyDrone"
    class GetSummonedFriendlyDrone(HookFactory):
        _name = "cGcPlayer::GetSummonedFriendlyDrone"
    class CanBeGrabbed(HookFactory):
        _name = "cGcPlayer::CanBeGrabbed"
    class SetGrabbedBy(HookFactory):
        _name = "cGcPlayer::SetGrabbedBy"
    class DoEmote(HookFactory):
        _name = "cGcPlayer::DoEmote"
    class ReleaseGrabbedBy(HookFactory):
        _name = "cGcPlayer::ReleaseGrabbedBy"
    class TrashShipInventory(HookFactory):
        _name = "cGcPlayer::TrashShipInventory"
    class UpdateLooking(HookFactory):
        _name = "cGcPlayer::UpdateLooking"
    class UpdateGraphics(HookFactory):
        _name = "cGcPlayer::UpdateGraphics"
    class IsInControlOfShip(HookFactory):
        _name = "cGcPlayer::IsInControlOfShip"
    class PostPhysicsUpdate(HookFactory):
        _name = "cGcPlayer::PostPhysicsUpdate"
    class PostEngineUpdate(HookFactory):
        _name = "cGcPlayer::PostEngineUpdate"
    class GetEyeLevelFromPos(HookFactory):
        _name = "cGcPlayer::GetEyeLevelFromPos"
    class Respawn(HookFactory):
        _name = "cGcPlayer::Respawn"
    class TogglePerspective(HookFactory):
        _name = "cGcPlayer::TogglePerspective"
    class IsOnSteepSlope(HookFactory):
        _name = "cGcPlayer::IsOnSteepSlope"
    class SetCurrentSlopeState(HookFactory):
        _name = "cGcPlayer::SetCurrentSlopeState"
    class GetActiveWeapon(HookFactory):
        _name = "cGcPlayer::GetActiveWeapon"
    class GetVelocity(HookFactory):
        _name = "cGcPlayer::GetVelocity"
    class IsTorchAllowed(HookFactory):
        _name = "cGcPlayer::IsTorchAllowed"
    class IsTorchLightNeeded(HookFactory):
        _name = "cGcPlayer::IsTorchLightNeeded"
    class UpdateTorch(HookFactory):
        _name = "cGcPlayer::UpdateTorch"
    class NotifyPredatorAttacking(HookFactory):
        _name = "cGcPlayer::NotifyPredatorAttacking"
    class SetExternalControl(HookFactory):
        _name = "cGcPlayer::SetExternalControl"
    class GetVehicleComponent(HookFactory):
        _name = "cGcPlayer::GetVehicleComponent"
    class OnEnteredCockpit(HookFactory):
        _name = "cGcPlayer::OnEnteredCockpit"
    class GetEnergyDischargeRate(HookFactory):
        _name = "cGcPlayer::GetEnergyDischargeRate"
    class GetSpaceship(HookFactory):
        _name = "cGcPlayer::GetSpaceship"
    class IsUnderwater(HookFactory):
        _name = "cGcPlayer::IsUnderwater"
    class IsInSpace(HookFactory):
        _name = "cGcPlayer::IsInSpace"
    class ShouldUseAbandonedFreighterWalk(HookFactory):
        _name = "cGcPlayer::ShouldUseAbandonedFreighterWalk"
    class IsHandTracking(HookFactory):
        _name = "cGcPlayer::IsHandTracking"
    class ShouldUseEnterVehicleEffect(HookFactory):
        _name = "cGcPlayer::ShouldUseEnterVehicleEffect"
    class IsRidingCreature(HookFactory):
        _name = "cGcPlayer::IsRidingCreature"
        _overload: overloads.cGcPlayer.IsRidingCreature.overloads = "cGcPlayer *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayer.IsRidingCreature.overloads):
            cls._overload = overload_args
            return cls
    class FootPos(HookFactory):
        _name = "cGcPlayer::FootPos"
    class PhysRelHeadPos(HookFactory):
        _name = "cGcPlayer::PhysRelHeadPos"
    class BodyPos(HookFactory):
        _name = "cGcPlayer::BodyPos"
    class HasRandomWarpTarget(HookFactory):
        _name = "cGcPlayer::HasRandomWarpTarget"
    class GetCurrentPerspectiveBehaviour(HookFactory):
        _name = "cGcPlayer::GetCurrentPerspectiveBehaviour"
    class IsCameraInCurrentPerspective(HookFactory):
        _name = "cGcPlayer::IsCameraInCurrentPerspective"
    class VirtualGetAttachment(HookFactory):
        _name = "cGcPlayer::VirtualGetAttachment"
    class CheckFallenThroughFloor(HookFactory):
        _name = "cGcPlayer::CheckFallenThroughFloor"
    class UpdatePlayerGravity(HookFactory):
        _name = "cGcPlayer::UpdatePlayerGravity"
    class WantToShowVirtualPad(HookFactory):
        _name = "cGcPlayer::WantToShowVirtualPad"
    class GetDominantHand(HookFactory):
        _name = "cGcPlayer::GetDominantHand"
    class GetHandMatrix(HookFactory):
        _name = "cGcPlayer::GetHandMatrix"
    class GetSmoothHandMatrix(HookFactory):
        _name = "cGcPlayer::GetSmoothHandMatrix"
    class GetFingerPointMatrix(HookFactory):
        _name = "cGcPlayer::GetFingerPointMatrix"
    class GetActualWristMatrix(HookFactory):
        _name = "cGcPlayer::GetActualWristMatrix"
    class IsHoldingGrabType(HookFactory):
        _name = "cGcPlayer::IsHoldingGrabType"
    class CheckGesture(HookFactory):
        _name = "cGcPlayer::CheckGesture"
    class CanUseActionButtonNow(HookFactory):
        _name = "cGcPlayer::CanUseActionButtonNow"
    class RenderSpaceshipNGuiCallback(HookFactory):
        _name = "cGcPlayer::RenderSpaceshipNGuiCallback"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcPlayer::RenderNGuiCallback"
    class OverrideCharacterMode(HookFactory):
        _name = "cGcPlayer::OverrideCharacterMode"

class cGcPlayerCommon:
    class cGcPlayerCommon(HookFactory):
        _name = "cGcPlayerCommon::cGcPlayerCommon"
    class GetNode(HookFactory):
        _name = "cGcPlayerCommon::GetNode"
    class NotifyBeingScanned(HookFactory):
        _name = "cGcPlayerCommon::NotifyBeingScanned"
    class IsBeingScanned(HookFactory):
        _name = "cGcPlayerCommon::IsBeingScanned"
    class RemoveEngagedPredator(HookFactory):
        _name = "cGcPlayerCommon::RemoveEngagedPredator"
    class RemoveActiveAttacker(HookFactory):
        _name = "cGcPlayerCommon::RemoveActiveAttacker"
    class AddActiveAttacker(HookFactory):
        _name = "cGcPlayerCommon::AddActiveAttacker"
    class IsActiveAttacker(HookFactory):
        _name = "cGcPlayerCommon::IsActiveAttacker"
    class UpdateBeingScanned(HookFactory):
        _name = "cGcPlayerCommon::UpdateBeingScanned"
    class GetPotentialCriminal(HookFactory):
        _name = "cGcPlayerCommon::GetPotentialCriminal"
    class AddEngagedPredator(HookFactory):
        _name = "cGcPlayerCommon::AddEngagedPredator"
    class CanBecomeActiveAttacker(HookFactory):
        _name = "cGcPlayerCommon::CanBecomeActiveAttacker"
    class CanEngage(HookFactory):
        _name = "cGcPlayerCommon::CanEngage"
    class TakeDamage(HookFactory):
        _name = "cGcPlayerCommon::TakeDamage"
    class IsValidCreatureAttackTarget(HookFactory):
        _name = "cGcPlayerCommon::IsValidCreatureAttackTarget"

class cGcPlayerWeapon:
    class cGcPlayerWeapon(HookFactory):
        _name = "cGcPlayerWeapon::cGcPlayerWeapon"
    class ShowingTerrainEditNotifies(HookFactory):
        _name = "cGcPlayerWeapon::ShowingTerrainEditNotifies"
    class UsingTerrainAdvancedMode(HookFactory):
        _name = "cGcPlayerWeapon::UsingTerrainAdvancedMode"
    class GetTerrainEditorBeam(HookFactory):
        _name = "cGcPlayerWeapon::GetTerrainEditorBeam"
    class GetTerrainEditMode(HookFactory):
        _name = "cGcPlayerWeapon::GetTerrainEditMode"
    class IsCharging(HookFactory):
        _name = "cGcPlayerWeapon::IsCharging"
    class CanCharge(HookFactory):
        _name = "cGcPlayerWeapon::CanCharge"
        _overload: overloads.cGcPlayerWeapon.CanCharge.overloads = "cGcPlayerWeapon *, eWeaponMode"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerWeapon.CanCharge.overloads):
            cls._overload = overload_args
            return cls
    class GetChargeFactor(HookFactory):
        _name = "cGcPlayerWeapon::GetChargeFactor"
    class GetListOfModesIfActiveOrNot(HookFactory):
        _name = "cGcPlayerWeapon::GetListOfModesIfActiveOrNot"
    class GetPrimaryStat(HookFactory):
        _name = "cGcPlayerWeapon::GetPrimaryStat"
    class GetLastModeChangeTime(HookFactory):
        _name = "cGcPlayerWeapon::GetLastModeChangeTime"
    class GetModeIndex(HookFactory):
        _name = "cGcPlayerWeapon::GetModeIndex"
    class GetAmmo(HookFactory):
        _name = "cGcPlayerWeapon::GetAmmo"
    class GetAmmoInClip(HookFactory):
        _name = "cGcPlayerWeapon::GetAmmoInClip"
    class GetCooldownProgress(HookFactory):
        _name = "cGcPlayerWeapon::GetCooldownProgress"
    class NeedsCooldownAfterFiring(HookFactory):
        _name = "cGcPlayerWeapon::NeedsCooldownAfterFiring"
    class IsOnCooldown(HookFactory):
        _name = "cGcPlayerWeapon::IsOnCooldown"
    class GetOverheatProgress(HookFactory):
        _name = "cGcPlayerWeapon::GetOverheatProgress"
    class CanOverheat(HookFactory):
        _name = "cGcPlayerWeapon::CanOverheat"
    class HasOverheated(HookFactory):
        _name = "cGcPlayerWeapon::HasOverheated"
    class GetLastFireTime(HookFactory):
        _name = "cGcPlayerWeapon::GetLastFireTime"
    class GetReloadProgress(HookFactory):
        _name = "cGcPlayerWeapon::GetReloadProgress"
    class IsReloading(HookFactory):
        _name = "cGcPlayerWeapon::IsReloading"
    class GetAvailableAmmo(HookFactory):
        _name = "cGcPlayerWeapon::GetAvailableAmmo"
        _overload: overloads.cGcPlayerWeapon.GetAvailableAmmo.overloads = "cGcPlayerWeapon *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerWeapon.GetAvailableAmmo.overloads):
            cls._overload = overload_args
            return cls
    class UsesInventoryAmmo(HookFactory):
        _name = "cGcPlayerWeapon::UsesInventoryAmmo"
        _overload: overloads.cGcPlayerWeapon.UsesInventoryAmmo.overloads = "cGcPlayerWeapon *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerWeapon.UsesInventoryAmmo.overloads):
            cls._overload = overload_args
            return cls
    class UsingAmmo(HookFactory):
        _name = "cGcPlayerWeapon::UsingAmmo"
    class SetAmmo(HookFactory):
        _name = "cGcPlayerWeapon::SetAmmo"
    class IsWeaponScopeActive(HookFactory):
        _name = "cGcPlayerWeapon::IsWeaponScopeActive"
    class GetShieldActiveFactor(HookFactory):
        _name = "cGcPlayerWeapon::GetShieldActiveFactor"
    class IsShieldActive(HookFactory):
        _name = "cGcPlayerWeapon::IsShieldActive"
    class IsAggressive(HookFactory):
        _name = "cGcPlayerWeapon::IsAggressive"
    class IsMeleeBoosted(HookFactory):
        _name = "cGcPlayerWeapon::IsMeleeBoosted"
    class IsHolstered(HookFactory):
        _name = "cGcPlayerWeapon::IsHolstered"
    class Reload(HookFactory):
        _name = "cGcPlayerWeapon::Reload"
        _overload: overloads.cGcPlayerWeapon.Reload.overloads = "cGcPlayerWeapon *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerWeapon.Reload.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cGcPlayerWeapon::Construct"
    class AsyncPrepare(HookFactory):
        _name = "cGcPlayerWeapon::AsyncPrepare"
    class GetOverHeatTime(HookFactory):
        _name = "cGcPlayerWeapon::GetOverHeatTime"
    class GetCooldownDuration(HookFactory):
        _name = "cGcPlayerWeapon::GetCooldownDuration"
    class GetHeatFactor(HookFactory):
        _name = "cGcPlayerWeapon::GetHeatFactor"
    class GetLaserAmmoUseTime(HookFactory):
        _name = "cGcPlayerWeapon::GetLaserAmmoUseTime"
    class FinishPrepare(HookFactory):
        _name = "cGcPlayerWeapon::FinishPrepare"
    class UpdateVisibility(HookFactory):
        _name = "cGcPlayerWeapon::UpdateVisibility"
    class Update(HookFactory):
        _name = "cGcPlayerWeapon::Update"
    class ForceRemoveShield(HookFactory):
        _name = "cGcPlayerWeapon::ForceRemoveShield"
    class CheckReloadOrHolster(HookFactory):
        _name = "cGcPlayerWeapon::CheckReloadOrHolster"
    class Holster(HookFactory):
        _name = "cGcPlayerWeapon::Holster"
    class InstantHolster(HookFactory):
        _name = "cGcPlayerWeapon::InstantHolster"
    class PostPhysicsUpdate(HookFactory):
        _name = "cGcPlayerWeapon::PostPhysicsUpdate"
    class RenderScreen(HookFactory):
        _name = "cGcPlayerWeapon::RenderScreen"
    class Release(HookFactory):
        _name = "cGcPlayerWeapon::Release"
    class SetModeIndex(HookFactory):
        _name = "cGcPlayerWeapon::SetModeIndex"
    class GetNumModes(HookFactory):
        _name = "cGcPlayerWeapon::GetNumModes"
    class GetNumSecondaryModes(HookFactory):
        _name = "cGcPlayerWeapon::GetNumSecondaryModes"
    class GetWeaponRange(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponRange"
    class GetWeaponSpeed(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponSpeed"
    class GetProjectileID(HookFactory):
        _name = "cGcPlayerWeapon::GetProjectileID"
    class GetInventoryItemWriteable(HookFactory):
        _name = "cGcPlayerWeapon::GetInventoryItemWriteable"
    class GetActiveInventoryItem(HookFactory):
        _name = "cGcPlayerWeapon::GetActiveInventoryItem"
    class GetActiveSecondaryInventoryItem(HookFactory):
        _name = "cGcPlayerWeapon::GetActiveSecondaryInventoryItem"
    class GetBarrelPos(HookFactory):
        _name = "cGcPlayerWeapon::GetBarrelPos"
    class GetBarrelMatrix(HookFactory):
        _name = "cGcPlayerWeapon::GetBarrelMatrix"
    class GetDominantHandOffset(HookFactory):
        _name = "cGcPlayerWeapon::GetDominantHandOffset"
    class GetNonDominantHandOffset(HookFactory):
        _name = "cGcPlayerWeapon::GetNonDominantHandOffset"
    class GetDominantHandAttachMatrix(HookFactory):
        _name = "cGcPlayerWeapon::GetDominantHandAttachMatrix"
    class GetNonDominantHandAttachMatrix(HookFactory):
        _name = "cGcPlayerWeapon::GetNonDominantHandAttachMatrix"
    class RenderWeaponImGui(HookFactory):
        _name = "cGcPlayerWeapon::RenderWeaponImGui"
    class GetClipSize(HookFactory):
        _name = "cGcPlayerWeapon::GetClipSize"
    class GetWeaponName(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponName"
    class CycleAlt(HookFactory):
        _name = "cGcPlayerWeapon::CycleAlt"
    class SetAlt(HookFactory):
        _name = "cGcPlayerWeapon::SetAlt"
    class ResetTerrainMode(HookFactory):
        _name = "cGcPlayerWeapon::ResetTerrainMode"
    class Cycle(HookFactory):
        _name = "cGcPlayerWeapon::Cycle"
    class GetClass(HookFactory):
        _name = "cGcPlayerWeapon::GetClass"
    class GetStatForWeaponMode(HookFactory):
        _name = "cGcPlayerWeapon::GetStatForWeaponMode"
    class GetModeFromStat(HookFactory):
        _name = "cGcPlayerWeapon::GetModeFromStat"
    class GetMaxDamagePerSecond(HookFactory):
        _name = "cGcPlayerWeapon::GetMaxDamagePerSecond"
    class CancelCharging(HookFactory):
        _name = "cGcPlayerWeapon::CancelCharging"
    class GetChargeTime(HookFactory):
        _name = "cGcPlayerWeapon::GetChargeTime"
    class Fire(HookFactory):
        _name = "cGcPlayerWeapon::Fire"
    class GetLaserColour(HookFactory):
        _name = "cGcPlayerWeapon::GetLaserColour"
    class GetHeatWarningFactor(HookFactory):
        _name = "cGcPlayerWeapon::GetHeatWarningFactor"
    class GetAlertPoint(HookFactory):
        _name = "cGcPlayerWeapon::GetAlertPoint"
    class GetCooldownFactor(HookFactory):
        _name = "cGcPlayerWeapon::GetCooldownFactor"
    class Melee(HookFactory):
        _name = "cGcPlayerWeapon::Melee"
    class IsActive(HookFactory):
        _name = "cGcPlayerWeapon::IsActive"
    class GetOffset(HookFactory):
        _name = "cGcPlayerWeapon::GetOffset"
    class FullyControlledByHands(HookFactory):
        _name = "cGcPlayerWeapon::FullyControlledByHands"
    class AimControlledByHands(HookFactory):
        _name = "cGcPlayerWeapon::AimControlledByHands"
    class UseThirdPersonAnimations(HookFactory):
        _name = "cGcPlayerWeapon::UseThirdPersonAnimations"
    class CalculateDamagePerHit(HookFactory):
        _name = "cGcPlayerWeapon::CalculateDamagePerHit"
    class CheckAmmoLevels(HookFactory):
        _name = "cGcPlayerWeapon::CheckAmmoLevels"
    class ReadyWeapon(HookFactory):
        _name = "cGcPlayerWeapon::ReadyWeapon"
    class FireProjectile(HookFactory):
        _name = "cGcPlayerWeapon::FireProjectile"
    class MeleeHit(HookFactory):
        _name = "cGcPlayerWeapon::MeleeHit"
    class GetHolsterPosition(HookFactory):
        _name = "cGcPlayerWeapon::GetHolsterPosition"
    class DoImpact(HookFactory):
        _name = "cGcPlayerWeapon::DoImpact"
    class PlayOneShot(HookFactory):
        _name = "cGcPlayerWeapon::PlayOneShot"
    class PlayAnimation(HookFactory):
        _name = "cGcPlayerWeapon::PlayAnimation"
    class StopAllAnimations(HookFactory):
        _name = "cGcPlayerWeapon::StopAllAnimations"
    class CalculateDPS(HookFactory):
        _name = "cGcPlayerWeapon::CalculateDPS"
    class UpdateMeshRefresh(HookFactory):
        _name = "cGcPlayerWeapon::UpdateMeshRefresh"
    class IsMeleeActive(HookFactory):
        _name = "cGcPlayerWeapon::IsMeleeActive"
    class GetWeaponFireAnimId(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponFireAnimId"
    class UpdateMuzzleNodesVisibility(HookFactory):
        _name = "cGcPlayerWeapon::UpdateMuzzleNodesVisibility"
    class GetWeaponCombatEffects(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponCombatEffects"
    class GetWeaponCombatEffectsDamageMultipliers(HookFactory):
        _name = "cGcPlayerWeapon::GetWeaponCombatEffectsDamageMultipliers"
    class UpdateLasersCombatEffects(HookFactory):
        _name = "cGcPlayerWeapon::UpdateLasersCombatEffects"
    class GetStealthChargeAmount(HookFactory):
        _name = "cGcPlayerWeapon::GetStealthChargeAmount"
    class UpdateStealthCharge(HookFactory):
        _name = "cGcPlayerWeapon::UpdateStealthCharge"
    class DisabledUpdate(HookFactory):
        _name = "cGcPlayerWeapon::DisabledUpdate"
    class RenderWeaponTableImGui(HookFactory):
        _name = "cGcPlayerWeapon::RenderWeaponTableImGui"
    class RenderWeaponProperties(HookFactory):
        _name = "cGcPlayerWeapon::RenderWeaponProperties"
    class IsStealthActive(HookFactory):
        _name = "cGcPlayerWeapon::IsStealthActive"
    class RenderWeaponTableNGuiCallback(HookFactory):
        _name = "cGcPlayerWeapon::RenderWeaponTableNGuiCallback"
    class RenderWeaponNGuiCallback(HookFactory):
        _name = "cGcPlayerWeapon::RenderWeaponNGuiCallback"
    class IsMeleeCompleted(HookFactory):
        _name = "cGcPlayerWeapon::IsMeleeCompleted"
    class GetTimeSinceMeleeInitiated(HookFactory):
        _name = "cGcPlayerWeapon::GetTimeSinceMeleeInitiated"

class cGcTerrainEditorBeam:
    class cGcTerrainEditorBeam(HookFactory):
        _name = "cGcTerrainEditorBeam::cGcTerrainEditorBeam"
    class Construct(HookFactory):
        _name = "cGcTerrainEditorBeam::Construct"
    class Prepare(HookFactory):
        _name = "cGcTerrainEditorBeam::Prepare"
    class Update(HookFactory):
        _name = "cGcTerrainEditorBeam::Update"
    class SetMode(HookFactory):
        _name = "cGcTerrainEditorBeam::SetMode"
    class Fire(HookFactory):
        _name = "cGcTerrainEditorBeam::Fire"
    class UpdateRender(HookFactory):
        _name = "cGcTerrainEditorBeam::UpdateRender"
    class Release(HookFactory):
        _name = "cGcTerrainEditorBeam::Release"
    class Deactivate(HookFactory):
        _name = "cGcTerrainEditorBeam::Deactivate"
    class IsResourcesLoaded(HookFactory):
        _name = "cGcTerrainEditorBeam::IsResourcesLoaded"
    class Deselected(HookFactory):
        _name = "cGcTerrainEditorBeam::Deselected"
    class GetEditRadius(HookFactory):
        _name = "cGcTerrainEditorBeam::GetEditRadius"
    class SetCurrentEditPlaneState(HookFactory):
        _name = "cGcTerrainEditorBeam::SetCurrentEditPlaneState"
    class StartEffect(HookFactory):
        _name = "cGcTerrainEditorBeam::StartEffect"
    class ApplyTerrainEditStroke(HookFactory):
        _name = "cGcTerrainEditorBeam::ApplyTerrainEditStroke"
    class ApplyTerrainEditFlatten(HookFactory):
        _name = "cGcTerrainEditorBeam::ApplyTerrainEditFlatten"
    class ApplyTerrainEditUndo(HookFactory):
        _name = "cGcTerrainEditorBeam::ApplyTerrainEditUndo"
    class GetEditData(HookFactory):
        _name = "cGcTerrainEditorBeam::GetEditData"
    class RotateEditPlane(HookFactory):
        _name = "cGcTerrainEditorBeam::RotateEditPlane"

class sGrabbedObjectInfo:
    class sGrabbedObjectInfo(HookFactory):
        _name = "sGrabbedObjectInfo::sGrabbedObjectInfo"

class cGcPlayerInteract:
    class cGcPlayerInteract(HookFactory):
        _name = "cGcPlayerInteract::cGcPlayerInteract"
    class IsInteracting(HookFactory):
        _name = "cGcPlayerInteract::IsInteracting"
    class Reset(HookFactory):
        _name = "cGcPlayerInteract::Reset"
    class HasInteracted(HookFactory):
        _name = "cGcPlayerInteract::HasInteracted"
    class Construct(HookFactory):
        _name = "cGcPlayerInteract::Construct"
    class Update(HookFactory):
        _name = "cGcPlayerInteract::Update"
    class DoCollectEffects(HookFactory):
        _name = "cGcPlayerInteract::DoCollectEffects"
    class HasCollectableHoldTarget(HookFactory):
        _name = "cGcPlayerInteract::HasCollectableHoldTarget"
    class HasWiringTarget(HookFactory):
        _name = "cGcPlayerInteract::HasWiringTarget"
    class HasCollectableOnlyHoldTarget(HookFactory):
        _name = "cGcPlayerInteract::HasCollectableOnlyHoldTarget"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerInteract::UpdateRender"
    class PassInteract(HookFactory):
        _name = "cGcPlayerInteract::PassInteract"
    class StealControls(HookFactory):
        _name = "cGcPlayerInteract::StealControls"
    class GetInteractionComponent(HookFactory):
        _name = "cGcPlayerInteract::GetInteractionComponent"
    class ReleaseInteractionNetworkLock(HookFactory):
        _name = "cGcPlayerInteract::ReleaseInteractionNetworkLock"
    class FixOnScreen(HookFactory):
        _name = "cGcPlayerInteract::FixOnScreen"
    class CanRender(HookFactory):
        _name = "cGcPlayerInteract::CanRender"
    class Render(HookFactory):
        _name = "cGcPlayerInteract::Render"
    class ResetActivationCost(HookFactory):
        _name = "cGcPlayerInteract::ResetActivationCost"
    class GetActivationCost(HookFactory):
        _name = "cGcPlayerInteract::GetActivationCost"
    class HasActivationCost(HookFactory):
        _name = "cGcPlayerInteract::HasActivationCost"
    class NextActivationCost(HookFactory):
        _name = "cGcPlayerInteract::NextActivationCost"
    class CostRemaining(HookFactory):
        _name = "cGcPlayerInteract::CostRemaining"
    class CanPayForElement(HookFactory):
        _name = "cGcPlayerInteract::CanPayForElement"
    class CanPayActivationCost(HookFactory):
        _name = "cGcPlayerInteract::CanPayActivationCost"
    class PayCostForElement(HookFactory):
        _name = "cGcPlayerInteract::PayCostForElement"
    class PayActivationCost(HookFactory):
        _name = "cGcPlayerInteract::PayActivationCost"
    class InteractError(HookFactory):
        _name = "cGcPlayerInteract::InteractError"
    class CanTrigger(HookFactory):
        _name = "cGcPlayerInteract::CanTrigger"
    class CanInteract(HookFactory):
        _name = "cGcPlayerInteract::CanInteract"
    class UpdateAllowedToInteractBasedOnVehicle(HookFactory):
        _name = "cGcPlayerInteract::UpdateAllowedToInteractBasedOnVehicle"
    class SaveEmptyInteraction(HookFactory):
        _name = "cGcPlayerInteract::SaveEmptyInteraction"
    class UpdateViewTarget(HookFactory):
        _name = "cGcPlayerInteract::UpdateViewTarget"
    class AcquireInteractionNetworkLock(HookFactory):
        _name = "cGcPlayerInteract::AcquireInteractionNetworkLock"
    class AbleToInteract(HookFactory):
        _name = "cGcPlayerInteract::AbleToInteract"

class cGcTargetHelper:
    class cGcTargetHelper(HookFactory):
        _name = "cGcTargetHelper::cGcTargetHelper"
    class Reset(HookFactory):
        _name = "cGcTargetHelper::Reset"
    class Construct(HookFactory):
        _name = "cGcTargetHelper::Construct"
    class Update(HookFactory):
        _name = "cGcTargetHelper::Update"
    class UpdateSync(HookFactory):
        _name = "cGcTargetHelper::UpdateSync"
    class GenerateTargetInfo(HookFactory):
        _name = "cGcTargetHelper::GenerateTargetInfo"
    class SetDestructableSubstanceSubtitles(HookFactory):
        _name = "cGcTargetHelper::SetDestructableSubstanceSubtitles"
    class GetInteractiveAttachment(HookFactory):
        _name = "cGcTargetHelper::GetInteractiveAttachment"
    class InteractLabelMarker:
        class GetLabelPos(HookFactory):
            _name = "cGcTargetHelper::InteractLabelMarker::GetLabelPos"
        class Reset(HookFactory):
            _name = "cGcTargetHelper::InteractLabelMarker::Reset"
    class ClearHighlight(HookFactory):
        _name = "cGcTargetHelper::ClearHighlight"
    class IsOnScreen(HookFactory):
        _name = "cGcTargetHelper::IsOnScreen"

class cGcPlayerHUD:
    class cGcPlayerHUD(HookFactory):
        _name = "cGcPlayerHUD::cGcPlayerHUD"
    class GetWantsTargetCrosshair(HookFactory):
        _name = "cGcPlayerHUD::GetWantsTargetCrosshair"
    class ClearHelmentLineVisibility(HookFactory):
        _name = "cGcPlayerHUD::ClearHelmentLineVisibility"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcPlayerHUD::RenderNGuiCallback"
    class LoadData(HookFactory):
        _name = "cGcPlayerHUD::LoadData"
    class IsAnyMarkerTagInteractionActive(HookFactory):
        _name = "cGcPlayerHUD::IsAnyMarkerTagInteractionActive"
    class Construct(HookFactory):
        _name = "cGcPlayerHUD::Construct"
    class Destruct(HookFactory):
        _name = "cGcPlayerHUD::Destruct"
    class Prepare(HookFactory):
        _name = "cGcPlayerHUD::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerHUD::Release"
    class Update(HookFactory):
        _name = "cGcPlayerHUD::Update"
    class GetBuildingEntryMessageText(HookFactory):
        _name = "cGcPlayerHUD::GetBuildingEntryMessageText"
    class UpdateTrackArrows(HookFactory):
        _name = "cGcPlayerHUD::UpdateTrackArrows"
    class UpdatePanelShow(HookFactory):
        _name = "cGcPlayerHUD::UpdatePanelShow"
    class SelectCrosshairStyle(HookFactory):
        _name = "cGcPlayerHUD::SelectCrosshairStyle"
    class ShouldShowDroneIcon(HookFactory):
        _name = "cGcPlayerHUD::ShouldShowDroneIcon"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerHUD::UpdateRender"
    class SetVRMovementVignetteValues(HookFactory):
        _name = "cGcPlayerHUD::SetVRMovementVignetteValues"
    class RenderOffscreen2D(HookFactory):
        _name = "cGcPlayerHUD::RenderOffscreen2D"
    class RenderDamageNumbers(HookFactory):
        _name = "cGcPlayerHUD::RenderDamageNumbers"
    class RenderHeadsUp(HookFactory):
        _name = "cGcPlayerHUD::RenderHeadsUp"
    class RenderTrackArrows(HookFactory):
        _name = "cGcPlayerHUD::RenderTrackArrows"
    class RenderCrosshair(HookFactory):
        _name = "cGcPlayerHUD::RenderCrosshair"
    class RenderShieldPanel(HookFactory):
        _name = "cGcPlayerHUD::RenderShieldPanel"
    class RenderIndicatorPanel(HookFactory):
        _name = "cGcPlayerHUD::RenderIndicatorPanel"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerHUD::RenderNGui"
    class RenderHazardBarArrow(HookFactory):
        _name = "cGcPlayerHUD::RenderHazardBarArrow"
    class RenderWeaponPanel(HookFactory):
        _name = "cGcPlayerHUD::RenderWeaponPanel"
    class RenderHazardPanel(HookFactory):
        _name = "cGcPlayerHUD::RenderHazardPanel"
    class RenderHazardBar(HookFactory):
        _name = "cGcPlayerHUD::RenderHazardBar"
    class RenderHUDBar(HookFactory):
        _name = "cGcPlayerHUD::RenderHUDBar"
    class CanRenderMarkers(HookFactory):
        _name = "cGcPlayerHUD::CanRenderMarkers"
    class RenderBaseGridObjectInfo(HookFactory):
        _name = "cGcPlayerHUD::RenderBaseGridObjectInfo"
    class RenderBaseBuildingObjectInfo(HookFactory):
        _name = "cGcPlayerHUD::RenderBaseBuildingObjectInfo"
    class RenderBuildInfo(HookFactory):
        _name = "cGcPlayerHUD::RenderBuildInfo"
    class RenderBasePower(HookFactory):
        _name = "cGcPlayerHUD::RenderBasePower"
    class RenderChatPanel(HookFactory):
        _name = "cGcPlayerHUD::RenderChatPanel"
    class Render2D(HookFactory):
        _name = "cGcPlayerHUD::Render2D"
    class SetHUDIcon(HookFactory):
        _name = "cGcPlayerHUD::SetHUDIcon"
    class SetHUDBar(HookFactory):
        _name = "cGcPlayerHUD::SetHUDBar"

class cGcHUD:
    class cGcHUD(HookFactory):
        _name = "cGcHUD::cGcHUD"
    class Prepare(HookFactory):
        _name = "cGcHUD::Prepare"

class cGcPlayerNotifications:
    class cGcPlayerNotifications(HookFactory):
        _name = "cGcPlayerNotifications::cGcPlayerNotifications"
    class RequestNotifyMessage(HookFactory):
        _name = "cGcPlayerNotifications::RequestNotifyMessage"
    class HasActiveCriticalMissionSequences(HookFactory):
        _name = "cGcPlayerNotifications::HasActiveCriticalMissionSequences"
    class GetNotificationSequencesWaiting(HookFactory):
        _name = "cGcPlayerNotifications::GetNotificationSequencesWaiting"
    class GetNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::GetNotificationSequence"
    class ClearTimedMessages(HookFactory):
        _name = "cGcPlayerNotifications::ClearTimedMessages"
    class HasNotificationSequenceInProgress(HookFactory):
        _name = "cGcPlayerNotifications::HasNotificationSequenceInProgress"
    class GetPreviousNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::GetPreviousNotificationSequence"
    class IsMissionCompleted(HookFactory):
        _name = "cGcPlayerNotifications::IsMissionCompleted"
    class SetCurrentNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::SetCurrentNotificationSequence"
    class HasBlockOnPinning(HookFactory):
        _name = "cGcPlayerNotifications::HasBlockOnPinning"
    class GetNotificationSequencesRenounceable(HookFactory):
        _name = "cGcPlayerNotifications::GetNotificationSequencesRenounceable"
    class HasMission(HookFactory):
        _name = "cGcPlayerNotifications::HasMission"
    class HasMissionActive(HookFactory):
        _name = "cGcPlayerNotifications::HasMissionActive"
    class HasAnyMissionActive(HookFactory):
        _name = "cGcPlayerNotifications::HasAnyMissionActive"
    class IsBasePartUnlockedBySilentMission(HookFactory):
        _name = "cGcPlayerNotifications::IsBasePartUnlockedBySilentMission"
    class DisableNotifyMessage(HookFactory):
        _name = "cGcPlayerNotifications::DisableNotifyMessage"
    class SetConstantMessage(HookFactory):
        _name = "cGcPlayerNotifications::SetConstantMessage"
        _overload: overloads.cGcPlayerNotifications.SetConstantMessage.overloads = "cGcPlayerNotifications *, int, bool, const cGcSlotIcon *, eFrontendPage, const TkID<256> *, const char *, const char *, unsigned int, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerNotifications.SetConstantMessage.overloads):
            cls._overload = overload_args
            return cls
    class ConstantMessage:
        class Construct(HookFactory):
            _name = "cGcPlayerNotifications::ConstantMessage::Construct"
        class UpdateTimeTracker(HookFactory):
            _name = "cGcPlayerNotifications::ConstantMessage::UpdateTimeTracker"
    class IsCurrentlyAppropriate(HookFactory):
        _name = "cGcPlayerNotifications::IsCurrentlyAppropriate"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcPlayerNotifications::RenderImGuiCallback"
    class Construct(HookFactory):
        _name = "cGcPlayerNotifications::Construct"
    class LoadData(HookFactory):
        _name = "cGcPlayerNotifications::LoadData"
    class Update(HookFactory):
        _name = "cGcPlayerNotifications::Update"
    class UpdateVehicle(HookFactory):
        _name = "cGcPlayerNotifications::UpdateVehicle"
    class UpdateMissionSequences(HookFactory):
        _name = "cGcPlayerNotifications::UpdateMissionSequences"
    class UpdateNotifyWeapons(HookFactory):
        _name = "cGcPlayerNotifications::UpdateNotifyWeapons"
    class UpdateNotifySpaceship(HookFactory):
        _name = "cGcPlayerNotifications::UpdateNotifySpaceship"
    class UpdateNotifyEnergy(HookFactory):
        _name = "cGcPlayerNotifications::UpdateNotifyEnergy"
    class UpdateNotifyHealthAndShield(HookFactory):
        _name = "cGcPlayerNotifications::UpdateNotifyHealthAndShield"
    class UpdateNotifyHazards(HookFactory):
        _name = "cGcPlayerNotifications::UpdateNotifyHazards"
    class UpdateRequests(HookFactory):
        _name = "cGcPlayerNotifications::UpdateRequests"
    class RestartMissionWithNewSeed(HookFactory):
        _name = "cGcPlayerNotifications::RestartMissionWithNewSeed"
    class RequestAddOrRestartMission(HookFactory):
        _name = "cGcPlayerNotifications::RequestAddOrRestartMission"
    class RenounceAllMilestoneMissions(HookFactory):
        _name = "cGcPlayerNotifications::RenounceAllMilestoneMissions"
    class RenounceAllSubstanceMissions(HookFactory):
        _name = "cGcPlayerNotifications::RenounceAllSubstanceMissions"
    class SendMissionMessage(HookFactory):
        _name = "cGcPlayerNotifications::SendMissionMessage"
        _overload: overloads.cGcPlayerNotifications.SendMissionMessage.overloads = "cGcPlayerNotifications *, const TkID<128> *, bool, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerNotifications.SendMissionMessage.overloads):
            cls._overload = overload_args
            return cls
    class RewardProduct(HookFactory):
        _name = "cGcPlayerNotifications::RewardProduct"
    class Render(HookFactory):
        _name = "cGcPlayerNotifications::Render"
    class ClearAllMessagesAndHide(HookFactory):
        _name = "cGcPlayerNotifications::ClearAllMessagesAndHide"
    class GetTargetMissionSurveyScanInfo(HookFactory):
        _name = "cGcPlayerNotifications::GetTargetMissionSurveyScanInfo"
    class GetInventoryHint(HookFactory):
        _name = "cGcPlayerNotifications::GetInventoryHint"
    class CanShowLowerMessages(HookFactory):
        _name = "cGcPlayerNotifications::CanShowLowerMessages"
    class ClearSequences(HookFactory):
        _name = "cGcPlayerNotifications::ClearSequences"
    class ReadMissions(HookFactory):
        _name = "cGcPlayerNotifications::ReadMissions"
    class RecordMissionStat(HookFactory):
        _name = "cGcPlayerNotifications::RecordMissionStat"
    class AddRecipeHint(HookFactory):
        _name = "cGcPlayerNotifications::AddRecipeHint"
    class RemovePinnedRecipe(HookFactory):
        _name = "cGcPlayerNotifications::RemovePinnedRecipe"
    class GetGenericMissionData(HookFactory):
        _name = "cGcPlayerNotifications::GetGenericMissionData"
    class GetDefaultSubstance(HookFactory):
        _name = "cGcPlayerNotifications::GetDefaultSubstance"
    class GetDefaultProduct(HookFactory):
        _name = "cGcPlayerNotifications::GetDefaultProduct"
    class AddTimedMessage(HookFactory):
        _name = "cGcPlayerNotifications::AddTimedMessage"
    class GetTechChargeString(HookFactory):
        _name = "cGcPlayerNotifications::GetTechChargeString"
    class GetTechChargeMessage(HookFactory):
        _name = "cGcPlayerNotifications::GetTechChargeMessage"
    class GetCurrentNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::GetCurrentNotificationSequence"
    class IsCurrentNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::IsCurrentNotificationSequence"
    class GetFirstNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::GetFirstNotificationSequence"
    class GetLastNotificationSequence(HookFactory):
        _name = "cGcPlayerNotifications::GetLastNotificationSequence"
    class GetNotificationSequenceAfter(HookFactory):
        _name = "cGcPlayerNotifications::GetNotificationSequenceAfter"
    class GetNotificationSequenceBefore(HookFactory):
        _name = "cGcPlayerNotifications::GetNotificationSequenceBefore"
    class RequestRenounceMission(HookFactory):
        _name = "cGcPlayerNotifications::RequestRenounceMission"
    class RenounceMission(HookFactory):
        _name = "cGcPlayerNotifications::RenounceMission"
    class RenderMissionNotificationPanel(HookFactory):
        _name = "cGcPlayerNotifications::RenderMissionNotificationPanel"
    class InDanger(HookFactory):
        _name = "cGcPlayerNotifications::InDanger"
    class RenderImGui(HookFactory):
        _name = "cGcPlayerNotifications::RenderImGui"
    class DisplayTimedMessage(HookFactory):
        _name = "cGcPlayerNotifications::DisplayTimedMessage"
    class RPCStartMission(HookFactory):
        _name = "cGcPlayerNotifications::RPCStartMission"
    class RPCBroadcastMissionMessage(HookFactory):
        _name = "cGcPlayerNotifications::RPCBroadcastMissionMessage"
    class RPCBroadcastMissionMessageSeeded(HookFactory):
        _name = "cGcPlayerNotifications::RPCBroadcastMissionMessageSeeded"
    class SimpleMessage:
        class SimpleMessage(HookFactory):
            _name = "cGcPlayerNotifications::SimpleMessage::SimpleMessage"
            _overload: overloads.cGcPlayerNotifications.SimpleMessage.SimpleMessage.overloads = "cGcPlayerNotifications::SimpleMessage *, const cGcPlayerNotifications::SimpleMessage *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcPlayerNotifications.SimpleMessage.SimpleMessage.overloads):
                cls._overload = overload_args
                return cls
    class IsMissionSelected(HookFactory):
        _name = "cGcPlayerNotifications::IsMissionSelected"
    class GetCurrentMissionScanEventTarget(HookFactory):
        _name = "cGcPlayerNotifications::GetCurrentMissionScanEventTarget"
    class HasBlockOnTimedScans(HookFactory):
        _name = "cGcPlayerNotifications::HasBlockOnTimedScans"

class cGcQuickMenu:
    class cGcQuickMenu(HookFactory):
        _name = "cGcQuickMenu::cGcQuickMenu"
    class GetMenuState(HookFactory):
        _name = "cGcQuickMenu::GetMenuState"
    class IsPointedAt(HookFactory):
        _name = "cGcQuickMenu::IsPointedAt"
    class GetActiveState(HookFactory):
        _name = "cGcQuickMenu::GetActiveState"
    class Open(HookFactory):
        _name = "cGcQuickMenu::Open"
    class IsQuickMenuOpen(HookFactory):
        _name = "cGcQuickMenu::IsQuickMenuOpen"
    class Construct(HookFactory):
        _name = "cGcQuickMenu::Construct"
    class Prepare(HookFactory):
        _name = "cGcQuickMenu::Prepare"
    class Release(HookFactory):
        _name = "cGcQuickMenu::Release"
    class CloseMenu(HookFactory):
        _name = "cGcQuickMenu::CloseMenu"
    class Update(HookFactory):
        _name = "cGcQuickMenu::Update"
    class Render(HookFactory):
        _name = "cGcQuickMenu::Render"
    class CanOpenBuildMenu(HookFactory):
        _name = "cGcQuickMenu::CanOpenBuildMenu"
    class OpenBuildMenu(HookFactory):
        _name = "cGcQuickMenu::OpenBuildMenu"
    class Close(HookFactory):
        _name = "cGcQuickMenu::Close"
    class DoNextActionItem(HookFactory):
        _name = "cGcQuickMenu::DoNextActionItem"
    class DoNextActions(HookFactory):
        _name = "cGcQuickMenu::DoNextActions"
    class GetActionItemName(HookFactory):
        _name = "cGcQuickMenu::GetActionItemName"
    class CanOpen(HookFactory):
        _name = "cGcQuickMenu::CanOpen"

class cGcQuickActionMenu:
    class cGcQuickActionMenu(HookFactory):
        _name = "cGcQuickActionMenu::cGcQuickActionMenu"
    class ActionTable:
        class Clear(HookFactory):
            _name = "cGcQuickActionMenu::ActionTable::Clear"
        class FixUpIndicies(HookFactory):
            _name = "cGcQuickActionMenu::ActionTable::FixUpIndicies"
        class AddAction(HookFactory):
            _name = "cGcQuickActionMenu::ActionTable::AddAction"
        class GetActionAtDepth(HookFactory):
            _name = "cGcQuickActionMenu::ActionTable::GetActionAtDepth"
        class SetActionIndex(HookFactory):
            _name = "cGcQuickActionMenu::ActionTable::SetActionIndex"
    class HotAction:
        class Clear(HookFactory):
            _name = "cGcQuickActionMenu::HotAction::Clear"
        class GetMenuDepth(HookFactory):
            _name = "cGcQuickActionMenu::HotAction::GetMenuDepth"
    class Prepare(HookFactory):
        _name = "cGcQuickActionMenu::Prepare"
    class Update(HookFactory):
        _name = "cGcQuickActionMenu::Update"
    class LoadHotActions(HookFactory):
        _name = "cGcQuickActionMenu::LoadHotActions"
    class IsSlotSelected(HookFactory):
        _name = "cGcQuickActionMenu::IsSlotSelected"
    class IsInWorldAction(HookFactory):
        _name = "cGcQuickActionMenu::IsInWorldAction"
    class CanEmote(HookFactory):
        _name = "cGcQuickActionMenu::CanEmote"
    class UpdateActions(HookFactory):
        _name = "cGcQuickActionMenu::UpdateActions"
    class UpdateActionString(HookFactory):
        _name = "cGcQuickActionMenu::UpdateActionString"
    class UpdateInWorldUISelection(HookFactory):
        _name = "cGcQuickActionMenu::UpdateInWorldUISelection"
    class Activate(HookFactory):
        _name = "cGcQuickActionMenu::Activate"
    class Close(HookFactory):
        _name = "cGcQuickActionMenu::Close"
    class AddActionsForInventories(HookFactory):
        _name = "cGcQuickActionMenu::AddActionsForInventories"
    class IsUpgradeAppropriateForEnvironment(HookFactory):
        _name = "cGcQuickActionMenu::IsUpgradeAppropriateForEnvironment"
    class IsPlayerEmoteAllowedAtLocation(HookFactory):
        _name = "cGcQuickActionMenu::IsPlayerEmoteAllowedAtLocation"
    class ShouldShowSwitchShipOption(HookFactory):
        _name = "cGcQuickActionMenu::ShouldShowSwitchShipOption"
    class TriggerCurrentAction(HookFactory):
        _name = "cGcQuickActionMenu::TriggerCurrentAction"
    class TriggerAction(HookFactory):
        _name = "cGcQuickActionMenu::TriggerAction"
    class TryOpenToHotAction(HookFactory):
        _name = "cGcQuickActionMenu::TryOpenToHotAction"
    class TryOpenToOverrideAction(HookFactory):
        _name = "cGcQuickActionMenu::TryOpenToOverrideAction"
    class StepIntoSubMenu(HookFactory):
        _name = "cGcQuickActionMenu::StepIntoSubMenu"
    class TriggerClose(HookFactory):
        _name = "cGcQuickActionMenu::TriggerClose"
    class UpdateControlsString(HookFactory):
        _name = "cGcQuickActionMenu::UpdateControlsString"
    class ShouldClose(HookFactory):
        _name = "cGcQuickActionMenu::ShouldClose"
    class ShouldTriggerAction(HookFactory):
        _name = "cGcQuickActionMenu::ShouldTriggerAction"
    class HasParentMenu(HookFactory):
        _name = "cGcQuickActionMenu::HasParentMenu"

class cGcTerrainEditMenu:
    class cGcTerrainEditMenu(HookFactory):
        _name = "cGcTerrainEditMenu::cGcTerrainEditMenu"
    class Construct(HookFactory):
        _name = "cGcTerrainEditMenu::Construct"
    class Prepare(HookFactory):
        _name = "cGcTerrainEditMenu::Prepare"
    class Update(HookFactory):
        _name = "cGcTerrainEditMenu::Update"
    class Activate(HookFactory):
        _name = "cGcTerrainEditMenu::Activate"
    class Close(HookFactory):
        _name = "cGcTerrainEditMenu::Close"
    class TriggerClose(HookFactory):
        _name = "cGcTerrainEditMenu::TriggerClose"
    class UpdateControlsString(HookFactory):
        _name = "cGcTerrainEditMenu::UpdateControlsString"

class cGcShipHUD:
    class cGcShipHUD(HookFactory):
        _name = "cGcShipHUD::cGcShipHUD"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcShipHUD::RenderNGuiCallback"
    class LoadData(HookFactory):
        _name = "cGcShipHUD::LoadData"
    class Construct(HookFactory):
        _name = "cGcShipHUD::Construct"
    class Update(HookFactory):
        _name = "cGcShipHUD::Update"
    class UpdateTrackArrows(HookFactory):
        _name = "cGcShipHUD::UpdateTrackArrows"
    class UpdateMarkerLockOn(HookFactory):
        _name = "cGcShipHUD::UpdateMarkerLockOn"
    class UpdateRender(HookFactory):
        _name = "cGcShipHUD::UpdateRender"
    class ReadPlanetStats(HookFactory):
        _name = "cGcShipHUD::ReadPlanetStats"
    class RenderOffscreen2D(HookFactory):
        _name = "cGcShipHUD::RenderOffscreen2D"
    class Render2D(HookFactory):
        _name = "cGcShipHUD::Render2D"
    class RenderHeadsUp(HookFactory):
        _name = "cGcShipHUD::RenderHeadsUp"

class cGcFrontendPage:
    class cGcFrontendPage(HookFactory):
        _name = "cGcFrontendPage::cGcFrontendPage"
    class DebounceHoverPopup(HookFactory):
        _name = "cGcFrontendPage::DebounceHoverPopup"
    class Delete(HookFactory):
        _name = "cGcFrontendPage::Delete"
    class GetPurchaseableItem(HookFactory):
        _name = "cGcFrontendPage::GetPurchaseableItem"
    class PickFinished(HookFactory):
        _name = "cGcFrontendPage::PickFinished"
    class GetPickedItem(HookFactory):
        _name = "cGcFrontendPage::GetPickedItem"
    class IsPicking(HookFactory):
        _name = "cGcFrontendPage::IsPicking"
    class SetSelectedWikiPageType(HookFactory):
        _name = "cGcFrontendPage::SetSelectedWikiPageType"
    class DiscoveryUpload(HookFactory):
        _name = "cGcFrontendPage::DiscoveryUpload"
    class SetSlotActionAutoScrollToBottomDone(HookFactory):
        _name = "cGcFrontendPage::SetSlotActionAutoScrollToBottomDone"
    class SetPurchasbaleItem(HookFactory):
        _name = "cGcFrontendPage::SetPurchasbaleItem"
    class GetTradeOptionsWritable(HookFactory):
        _name = "cGcFrontendPage::GetTradeOptionsWritable"
    class Count(HookFactory):
        _name = "cGcFrontendPage::Count"
    class GetSelectedWikiPageType(HookFactory):
        _name = "cGcFrontendPage::GetSelectedWikiPageType"
    class SetPage(HookFactory):
        _name = "cGcFrontendPage::SetPage"
    class Prepare(HookFactory):
        _name = "cGcFrontendPage::Prepare"
    class ActivateHover(HookFactory):
        _name = "cGcFrontendPage::ActivateHover"
    class ActivateAction(HookFactory):
        _name = "cGcFrontendPage::ActivateAction"
    class Update(HookFactory):
        _name = "cGcFrontendPage::Update"
    class CanChangeStackSize(HookFactory):
        _name = "cGcFrontendPage::CanChangeStackSize"
    class SetSelectedSubInventory(HookFactory):
        _name = "cGcFrontendPage::SetSelectedSubInventory"
    class SetSelectedInventoryItemIndex(HookFactory):
        _name = "cGcFrontendPage::SetSelectedInventoryItemIndex"
    class RefreshSaveSlots(HookFactory):
        _name = "cGcFrontendPage::RefreshSaveSlots"
    class GetPrimaryInventoryStore(HookFactory):
        _name = "cGcFrontendPage::GetPrimaryInventoryStore"
    class GetInventoryForPage(HookFactory):
        _name = "cGcFrontendPage::GetInventoryForPage"
    class CanCompletePicking(HookFactory):
        _name = "cGcFrontendPage::CanCompletePicking"
    class OnHover(HookFactory):
        _name = "cGcFrontendPage::OnHover"
    class DoPopups(HookFactory):
        _name = "cGcFrontendPage::DoPopups"
    class SetInteractionImmediate(HookFactory):
        _name = "cGcFrontendPage::SetInteractionImmediate"
    class GetInteraction(HookFactory):
        _name = "cGcFrontendPage::GetInteraction"
    class GetMostRecentInteraction(HookFactory):
        _name = "cGcFrontendPage::GetMostRecentInteraction"
    class SetMaintenanceImmediate(HookFactory):
        _name = "cGcFrontendPage::SetMaintenanceImmediate"
    class GetMaintenance(HookFactory):
        _name = "cGcFrontendPage::GetMaintenance"
    class GetMaintenanceIncludingPrevious(HookFactory):
        _name = "cGcFrontendPage::GetMaintenanceIncludingPrevious"
    class DeactivatePopups(HookFactory):
        _name = "cGcFrontendPage::DeactivatePopups"
    class ActivateInventorySlotAction(HookFactory):
        _name = "cGcFrontendPage::ActivateInventorySlotAction"
    class Confirm(HookFactory):
        _name = "cGcFrontendPage::Confirm"
    class ConfirmWithWarning(HookFactory):
        _name = "cGcFrontendPage::ConfirmWithWarning"
    class Transfer(HookFactory):
        _name = "cGcFrontendPage::Transfer"
    class Upload(HookFactory):
        _name = "cGcFrontendPage::Upload"
    class PickItem(HookFactory):
        _name = "cGcFrontendPage::PickItem"
        _overload: overloads.cGcFrontendPage.PickItem.overloads = "cGcFrontendPage *, const cGcInventoryIndex *, cGcInventoryStore *, ItemPicking::ActivationType"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPage.PickItem.overloads):
            cls._overload = overload_args
            return cls
    class UpdatePick(HookFactory):
        _name = "cGcFrontendPage::UpdatePick"
    class IsPickPackingTech(HookFactory):
        _name = "cGcFrontendPage::IsPickPackingTech"
    class IsPickDeploy(HookFactory):
        _name = "cGcFrontendPage::IsPickDeploy"
    class GetPrimaryTechInventory(HookFactory):
        _name = "cGcFrontendPage::GetPrimaryTechInventory"
    class GetPrimaryInventory(HookFactory):
        _name = "cGcFrontendPage::GetPrimaryInventory"
    class GetCachedFreighterInventories(HookFactory):
        _name = "cGcFrontendPage::GetCachedFreighterInventories"
    class IsPickMovingTech(HookFactory):
        _name = "cGcFrontendPage::IsPickMovingTech"
    class IsPickCharging(HookFactory):
        _name = "cGcFrontendPage::IsPickCharging"
    class AddNewItemPopup(HookFactory):
        _name = "cGcFrontendPage::AddNewItemPopup"

class cGcPurchaseableItem:
    class cGcPurchaseableItem(HookFactory):
        _name = "cGcPurchaseableItem::cGcPurchaseableItem"
    class GetNode(HookFactory):
        _name = "cGcPurchaseableItem::GetNode"
    class GetType(HookFactory):
        _name = "cGcPurchaseableItem::GetType"
    class GetItemCargoInventory(HookFactory):
        _name = "cGcPurchaseableItem::GetItemCargoInventory"
    class GetCostId(HookFactory):
        _name = "cGcPurchaseableItem::GetCostId"
    class GetTransferCargoInventory(HookFactory):
        _name = "cGcPurchaseableItem::GetTransferCargoInventory"
    class GetTransferPlayerInventory(HookFactory):
        _name = "cGcPurchaseableItem::GetTransferPlayerInventory"
    class GetItemTechInventory(HookFactory):
        _name = "cGcPurchaseableItem::GetItemTechInventory"
    class GetItemInventory(HookFactory):
        _name = "cGcPurchaseableItem::GetItemInventory"
    class SetupSpecific(HookFactory):
        _name = "cGcPurchaseableItem::SetupSpecific"
    class CalculateCost(HookFactory):
        _name = "cGcPurchaseableItem::CalculateCost"
    class FormatSuitSlotItemName(HookFactory):
        _name = "cGcPurchaseableItem::FormatSuitSlotItemName"
    class Setup(HookFactory):
        _name = "cGcPurchaseableItem::Setup"
    class SetupSquadronPilot(HookFactory):
        _name = "cGcPurchaseableItem::SetupSquadronPilot"
    class MakeInventoryDescription(HookFactory):
        _name = "cGcPurchaseableItem::MakeInventoryDescription"
    class CancelPurchase(HookFactory):
        _name = "cGcPurchaseableItem::CancelPurchase"
    class SetTransferInventoryToPlayerInventory(HookFactory):
        _name = "cGcPurchaseableItem::SetTransferInventoryToPlayerInventory"
    class SetTransferInventoryToCargoInventory(HookFactory):
        _name = "cGcPurchaseableItem::SetTransferInventoryToCargoInventory"
    class Update(HookFactory):
        _name = "cGcPurchaseableItem::Update"
    class Clear(HookFactory):
        _name = "cGcPurchaseableItem::Clear"
    class SetItemName(HookFactory):
        _name = "cGcPurchaseableItem::SetItemName"

class cGcFrontendModelRenderer:
    class cGcFrontendModelRenderer(HookFactory):
        _name = "cGcFrontendModelRenderer::cGcFrontendModelRenderer"
    class ShowScanEffect(HookFactory):
        _name = "cGcFrontendModelRenderer::ShowScanEffect"
    class SetPage(HookFactory):
        _name = "cGcFrontendModelRenderer::SetPage"
    class ClearActivePage(HookFactory):
        _name = "cGcFrontendModelRenderer::ClearActivePage"
    class SetFade(HookFactory):
        _name = "cGcFrontendModelRenderer::SetFade"
    class Construct(HookFactory):
        _name = "cGcFrontendModelRenderer::Construct"
    class PlayAnim(HookFactory):
        _name = "cGcFrontendModelRenderer::PlayAnim"
    class GetDiscoveryThumbnailNvgTextureIndex(HookFactory):
        _name = "cGcFrontendModelRenderer::GetDiscoveryThumbnailNvgTextureIndex"
    class GetMainRendererNvgTextureIndex(HookFactory):
        _name = "cGcFrontendModelRenderer::GetMainRendererNvgTextureIndex"
    class HasMainDiscoveryModelRendered(HookFactory):
        _name = "cGcFrontendModelRenderer::HasMainDiscoveryModelRendered"
    class IsDiscoveryThumbnailRendererRefreshed(HookFactory):
        _name = "cGcFrontendModelRenderer::IsDiscoveryThumbnailRendererRefreshed"
    class cDiscoveryLoadRequest:
        class Update(HookFactory):
            _name = "cGcFrontendModelRenderer::cDiscoveryLoadRequest::Update"
        class CreateDiscoveryLoadTask(HookFactory):
            _name = "cGcFrontendModelRenderer::cDiscoveryLoadRequest::CreateDiscoveryLoadTask"
    class Update(HookFactory):
        _name = "cGcFrontendModelRenderer::Update"
    class ClearDiscoveryRecords(HookFactory):
        _name = "cGcFrontendModelRenderer::ClearDiscoveryRecords"
    class HasDiscovery(HookFactory):
        _name = "cGcFrontendModelRenderer::HasDiscovery"
    class EnqueueRender(HookFactory):
        _name = "cGcFrontendModelRenderer::EnqueueRender"
    class SetRelativeToScreenCenterParallaxOffsets(HookFactory):
        _name = "cGcFrontendModelRenderer::SetRelativeToScreenCenterParallaxOffsets"
    class RequestRenderDiscoveryAs3dModel(HookFactory):
        _name = "cGcFrontendModelRenderer::RequestRenderDiscoveryAs3dModel"
    class UpdateVehicleNodeVisibility(HookFactory):
        _name = "cGcFrontendModelRenderer::UpdateVehicleNodeVisibility"
    class UpdateLogic(HookFactory):
        _name = "cGcFrontendModelRenderer::UpdateLogic"
    class HandleInput(HookFactory):
        _name = "cGcFrontendModelRenderer::HandleInput"

class cTkModelResourceRenderer:
    class cTkModelResourceRenderer(HookFactory):
        _name = "cTkModelResourceRenderer::cTkModelResourceRenderer"
        _overload: overloads.cTkModelResourceRenderer.cTkModelResourceRenderer.overloads = "cTkModelResourceRenderer *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkModelResourceRenderer.cTkModelResourceRenderer.overloads):
            cls._overload = overload_args
            return cls
    class SetFurAllowed(HookFactory):
        _name = "cTkModelResourceRenderer::SetFurAllowed"
    class SetData(HookFactory):
        _name = "cTkModelResourceRenderer::SetData"
    class SetModelNode(HookFactory):
        _name = "cTkModelResourceRenderer::SetModelNode"
    class CalcCameraMatrix(HookFactory):
        _name = "cTkModelResourceRenderer::CalcCameraMatrix"
    class CalcFocusPoint(HookFactory):
        _name = "cTkModelResourceRenderer::CalcFocusPoint"
        _overload: overloads.cTkModelResourceRenderer.CalcFocusPoint.overloads = "TkHandle, const char *, const cTkVector3 *, cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkModelResourceRenderer.CalcFocusPoint.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cTkModelResourceRenderer::Construct"
    class Destruct(HookFactory):
        _name = "cTkModelResourceRenderer::Destruct"
    class EnqueueRender(HookFactory):
        _name = "cTkModelResourceRenderer::EnqueueRender"
    class EnqueueSetClearMode(HookFactory):
        _name = "cTkModelResourceRenderer::EnqueueSetClearMode"
    class ResetModelMatrix(HookFactory):
        _name = "cTkModelResourceRenderer::ResetModelMatrix"
    class Update(HookFactory):
        _name = "cTkModelResourceRenderer::Update"
    class UpdateCamera(HookFactory):
        _name = "cTkModelResourceRenderer::UpdateCamera"

class cGcInWorldUIManager:
    class cGcInWorldUIManager(HookFactory):
        _name = "cGcInWorldUIManager::cGcInWorldUIManager"
    class SetScreenVisible(HookFactory):
        _name = "cGcInWorldUIManager::SetScreenVisible"
    class ApplyTransforms(HookFactory):
        _name = "cGcInWorldUIManager::ApplyTransforms"
        _overload: overloads.cGcInWorldUIManager.ApplyTransforms.overloads = "cTkPhysRelMat34 *, const cTkPhysRelMat34 *, const cGcInWorldUIScreenData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInWorldUIManager.ApplyTransforms.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cGcInWorldUIManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcInWorldUIManager::Prepare"
    class PrepareGameModeSelect(HookFactory):
        _name = "cGcInWorldUIManager::PrepareGameModeSelect"
    class ActivateScreenAndClear(HookFactory):
        _name = "cGcInWorldUIManager::ActivateScreenAndClear"
        _overload: overloads.cGcInWorldUIManager.ActivateScreenAndClear.overloads = "cGcInWorldUIManager *, eInWorldScreens"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInWorldUIManager.ActivateScreenAndClear.overloads):
            cls._overload = overload_args
            return cls
    class ActivateScreen(HookFactory):
        _name = "cGcInWorldUIManager::ActivateScreen"
    class SetScreenPixelSizeOverride(HookFactory):
        _name = "cGcInWorldUIManager::SetScreenPixelSizeOverride"
    class SetScreenPosition(HookFactory):
        _name = "cGcInWorldUIManager::SetScreenPosition"
    class SetScreenTransforms(HookFactory):
        _name = "cGcInWorldUIManager::SetScreenTransforms"
    class SetScreenAsObjectLabel(HookFactory):
        _name = "cGcInWorldUIManager::SetScreenAsObjectLabel"
    class ClampPointToOnScreen(HookFactory):
        _name = "cGcInWorldUIManager::ClampPointToOnScreen"
    class BeginGameGui(HookFactory):
        _name = "cGcInWorldUIManager::BeginGameGui"
    class DeactivateScreen(HookFactory):
        _name = "cGcInWorldUIManager::DeactivateScreen"
        _overload: overloads.cGcInWorldUIManager.DeactivateScreen.overloads = "cGcInWorldUIManager *, eInWorldScreens"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInWorldUIManager.DeactivateScreen.overloads):
            cls._overload = overload_args
            return cls
    class UpdateUIOffsetScale(HookFactory):
        _name = "cGcInWorldUIManager::UpdateUIOffsetScale"
    class UpdateHUDOffsetScale(HookFactory):
        _name = "cGcInWorldUIManager::UpdateHUDOffsetScale"
    class GetCompassValueFromWorld(HookFactory):
        _name = "cGcInWorldUIManager::GetCompassValueFromWorld"
    class GetRayUIQuadIntersectionPoint(HookFactory):
        _name = "cGcInWorldUIManager::GetRayUIQuadIntersectionPoint"
    class GetRayUIQuadIntersectionPointAsScreenPos(HookFactory):
        _name = "cGcInWorldUIManager::GetRayUIQuadIntersectionPointAsScreenPos"
        _overload: overloads.cGcInWorldUIManager.GetRayUIQuadIntersectionPointAsScreenPos.overloads = "cGcInWorldUIManager *, eInWorldScreens, const cTkPhysRelVec3 *, const cTkPhysRelVec3 *, const cTkVector2 *, cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInWorldUIManager.GetRayUIQuadIntersectionPointAsScreenPos.overloads):
            cls._overload = overload_args
            return cls
    class GetScreenMatrix(HookFactory):
        _name = "cGcInWorldUIManager::GetScreenMatrix"
        _overload: overloads.cGcInWorldUIManager.GetScreenMatrix.overloads = "cGcInWorldUIManager *, cTkPhysRelMat34 *, eInWorldScreens"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInWorldUIManager.GetScreenMatrix.overloads):
            cls._overload = overload_args
            return cls
    class Update(HookFactory):
        _name = "cGcInWorldUIManager::Update"
    class Render(HookFactory):
        _name = "cGcInWorldUIManager::Render"
    class UpdateFaceLockedVR(HookFactory):
        _name = "cGcInWorldUIManager::UpdateFaceLockedVR"
    class RenderWeaponMenu(HookFactory):
        _name = "cGcInWorldUIManager::RenderWeaponMenu"
    class RenderQuickMenuLauncher(HookFactory):
        _name = "cGcInWorldUIManager::RenderQuickMenuLauncher"
    class UpdateInWorldUISimulation(HookFactory):
        _name = "cGcInWorldUIManager::UpdateInWorldUISimulation"
    class UpdateQuickMenu(HookFactory):
        _name = "cGcInWorldUIManager::UpdateQuickMenu"
    class UpdateProjectorDrone(HookFactory):
        _name = "cGcInWorldUIManager::UpdateProjectorDrone"
    class UpdateHeadCoherentUI(HookFactory):
        _name = "cGcInWorldUIManager::UpdateHeadCoherentUI"
    class UpdateInWorldUILocalLoad(HookFactory):
        _name = "cGcInWorldUIManager::UpdateInWorldUILocalLoad"
    class UpdateInWorldUIGalaxyMap(HookFactory):
        _name = "cGcInWorldUIManager::UpdateInWorldUIGalaxyMap"
    class GetMenuTransform(HookFactory):
        _name = "cGcInWorldUIManager::GetMenuTransform"
    class CanShowScreen(HookFactory):
        _name = "cGcInWorldUIManager::CanShowScreen"
    class ApplyActiveProjectorTransforms(HookFactory):
        _name = "cGcInWorldUIManager::ApplyActiveProjectorTransforms"
    class UpdateCursorControl(HookFactory):
        _name = "cGcInWorldUIManager::UpdateCursorControl"
    class RenderNGui(HookFactory):
        _name = "cGcInWorldUIManager::RenderNGui"
    class IsRepositioningScreenWithHand(HookFactory):
        _name = "cGcInWorldUIManager::IsRepositioningScreenWithHand"
    class CanRepositionScreenWithHand(HookFactory):
        _name = "cGcInWorldUIManager::CanRepositionScreenWithHand"
    class UpdateScreenMatrix(HookFactory):
        _name = "cGcInWorldUIManager::UpdateScreenMatrix"
    class GetInputTransform(HookFactory):
        _name = "cGcInWorldUIManager::GetInputTransform"
    class CreateScreen(HookFactory):
        _name = "cGcInWorldUIManager::CreateScreen"
    class CacheScreenMats(HookFactory):
        _name = "cGcInWorldUIManager::CacheScreenMats"
    class HideScreen(HookFactory):
        _name = "cGcInWorldUIManager::HideScreen"
    class HideScreens(HookFactory):
        _name = "cGcInWorldUIManager::HideScreens"
    class NotifyLanguageChange(HookFactory):
        _name = "cGcInWorldUIManager::NotifyLanguageChange"
    class cGcScreenProjector:
        class Update(HookFactory):
            _name = "cGcInWorldUIManager::cGcScreenProjector::Update"
        class GetRepositionedScreenData(HookFactory):
            _name = "cGcInWorldUIManager::cGcScreenProjector::GetRepositionedScreenData"
        class UpdateModel(HookFactory):
            _name = "cGcInWorldUIManager::cGcScreenProjector::UpdateModel"
        class StartProjectorAudio(HookFactory):
            _name = "cGcInWorldUIManager::cGcScreenProjector::StartProjectorAudio"
    class ReleaseScreen(HookFactory):
        _name = "cGcInWorldUIManager::ReleaseScreen"

class cGcInWorldScreen:
    class cGcInWorldScreen(HookFactory):
        _name = "cGcInWorldScreen::cGcInWorldScreen"
    class SetVisible(HookFactory):
        _name = "cGcInWorldScreen::SetVisible"
    class Construct(HookFactory):
        _name = "cGcInWorldScreen::Construct"
    class Prepare(HookFactory):
        _name = "cGcInWorldScreen::Prepare"
    class Release(HookFactory):
        _name = "cGcInWorldScreen::Release"
    class SetSize(HookFactory):
        _name = "cGcInWorldScreen::SetSize"
    class SetOffsetAndScale(HookFactory):
        _name = "cGcInWorldScreen::SetOffsetAndScale"
    class GetMatrix(HookFactory):
        _name = "cGcInWorldScreen::GetMatrix"
    class GetCursorWorldTransform(HookFactory):
        _name = "cGcInWorldScreen::GetCursorWorldTransform"
    class Update(HookFactory):
        _name = "cGcInWorldScreen::Update"
    class Render(HookFactory):
        _name = "cGcInWorldScreen::Render"
    class GetScreenPixelSize(HookFactory):
        _name = "cGcInWorldScreen::GetScreenPixelSize"
    class GetScreenWorldSize(HookFactory):
        _name = "cGcInWorldScreen::GetScreenWorldSize"

class cGcCameraManager:
    class cGcCameraManager(HookFactory):
        _name = "cGcCameraManager::cGcCameraManager"
    class AssignBehaviours(HookFactory):
        _name = "cGcCameraManager::AssignBehaviours"
    class IsBehaviourActiveOrInterpolating(HookFactory):
        _name = "cGcCameraManager::IsBehaviourActiveOrInterpolating"
    class GetGalacticCamera(HookFactory):
        _name = "cGcCameraManager::GetGalacticCamera"
    class Construct(HookFactory):
        _name = "cGcCameraManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraManager::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraManager::Update"
    class RepositionPlayerFromCamera(HookFactory):
        _name = "cGcCameraManager::RepositionPlayerFromCamera"
    class ApplyCameraEvent(HookFactory):
        _name = "cGcCameraManager::ApplyCameraEvent"
    class Release(HookFactory):
        _name = "cGcCameraManager::Release"
    class Destruct(HookFactory):
        _name = "cGcCameraManager::Destruct"
    class SetDebugActive(HookFactory):
        _name = "cGcCameraManager::SetDebugActive"
    class GetActiveHeadMatrix(HookFactory):
        _name = "cGcCameraManager::GetActiveHeadMatrix"
    class GetActiveEyeMatrix(HookFactory):
        _name = "cGcCameraManager::GetActiveEyeMatrix"
    class GetEyeOffsetAngles(HookFactory):
        _name = "cGcCameraManager::GetEyeOffsetAngles"
    class GetPercievedAngleFromCamera(HookFactory):
        _name = "cGcCameraManager::GetPercievedAngleFromCamera"
    class BlendToBehaviour(HookFactory):
        _name = "cGcCameraManager::BlendToBehaviour"
    class GetNormalisedScreenPos(HookFactory):
        _name = "cGcCameraManager::GetNormalisedScreenPos"
    class GetScreenPos(HookFactory):
        _name = "cGcCameraManager::GetScreenPos"
        _overload: overloads.cGcCameraManager.GetScreenPos.overloads = "cGcCameraManager *, cTkVector3 *, const cTkVector3 *, const cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcCameraManager.GetScreenPos.overloads):
            cls._overload = overload_args
            return cls
    class GetScreenPosVec4(HookFactory):
        _name = "cGcCameraManager::GetScreenPosVec4"
    class IsPositionOnScreen(HookFactory):
        _name = "cGcCameraManager::IsPositionOnScreen"
    class ShakeFromPosition(HookFactory):
        _name = "cGcCameraManager::ShakeFromPosition"
    class Shake(HookFactory):
        _name = "cGcCameraManager::Shake"
    class IsControlStealingBehaviourActive(HookFactory):
        _name = "cGcCameraManager::IsControlStealingBehaviourActive"
    class CalculateModelRendererCameraMatrix(HookFactory):
        _name = "cGcCameraManager::CalculateModelRendererCameraMatrix"
    class GetCurrentDesiredFOV(HookFactory):
        _name = "cGcCameraManager::GetCurrentDesiredFOV"
    class IsInFreeCameraMode(HookFactory):
        _name = "cGcCameraManager::IsInFreeCameraMode"
    class IsBehaviourActiveOrInterpolatingTo(HookFactory):
        _name = "cGcCameraManager::IsBehaviourActiveOrInterpolatingTo"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcCameraManager::RenderNGuiCallback"
    class GetBehaviourActiveWeight(HookFactory):
        _name = "cGcCameraManager::GetBehaviourActiveWeight"
    class GetPickRay(HookFactory):
        _name = "cGcCameraManager::GetPickRay"
    class SetShakeStrength(HookFactory):
        _name = "cGcCameraManager::SetShakeStrength"
    class ShakeStop(HookFactory):
        _name = "cGcCameraManager::ShakeStop"
    class IsBehaviourDesiredCurrent(HookFactory):
        _name = "cGcCameraManager::IsBehaviourDesiredCurrent"

class cGcCameraBehaviourThirdPerson:
    class cGcCameraBehaviourThirdPerson(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::cGcCameraBehaviourThirdPerson"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::Update"
    class UpdateCreatureInteraction(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::UpdateCreatureInteraction"
    class UpdateLookSpring(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::UpdateLookSpring"
    class UpdateFollowCenterAndVelocity(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::UpdateFollowCenterAndVelocity"
    class CalculateBaseElevation(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::CalculateBaseElevation"
    class ApplyCollisions(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::ApplyCollisions"
    class StartCollisionJobs(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::StartCollisionJobs"
    class RenderNGui(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::RenderNGui"
    class Teleport(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::Teleport"
    class GetDesiredFollowSettingsData(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::GetDesiredFollowSettingsData"
    class UpdateCurrentFollowSettings(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::UpdateCurrentFollowSettings"
    class BuildFollowVector(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::BuildFollowVector"
    class GetFollowingOffsets(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::GetFollowingOffsets"
    class UpdateFOVSpring(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::UpdateFOVSpring"
    class AnticipateFollowVelocity(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::AnticipateFollowVelocity"
    class SplitRemap(HookFactory):
        _name = "cGcCameraBehaviourThirdPerson::SplitRemap"

class cGcAudioManager:
    class cGcAudioManager(HookFactory):
        _name = "cGcAudioManager::cGcAudioManager"
    class Construct(HookFactory):
        _name = "cGcAudioManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcAudioManager::Prepare"
    class BeginLoadingMusic(HookFactory):
        _name = "cGcAudioManager::BeginLoadingMusic"
    class StopLoadingMusic(HookFactory):
        _name = "cGcAudioManager::StopLoadingMusic"
    class Release(HookFactory):
        _name = "cGcAudioManager::Release"
    class Update(HookFactory):
        _name = "cGcAudioManager::Update"
    class OnSimulationStateEnter(HookFactory):
        _name = "cGcAudioManager::OnSimulationStateEnter"
    class NextPulseVariant(HookFactory):
        _name = "cGcAudioManager::NextPulseVariant"
    class ChangeUIState(HookFactory):
        _name = "cGcAudioManager::ChangeUIState"
    class UpdateAuxSendWithFalloffConcrete(HookFactory):
        _name = "cGcAudioManager::UpdateAuxSendWithFalloffConcrete"
    class UpdateAuxSendFull(HookFactory):
        _name = "cGcAudioManager::UpdateAuxSendFull"
    class RunDopplerRequests(HookFactory):
        _name = "cGcAudioManager::RunDopplerRequests"
    class SortAndCueFootsteps(HookFactory):
        _name = "cGcAudioManager::SortAndCueFootsteps"
    class RunObstructionQueries(HookFactory):
        _name = "cGcAudioManager::RunObstructionQueries"
    class UpdateAudioPulseState(HookFactory):
        _name = "cGcAudioManager::UpdateAudioPulseState"
    class UpdateAudioEnvironment(HookFactory):
        _name = "cGcAudioManager::UpdateAudioEnvironment"
    class UpdateAudioEnvironment_LocationAndInterest(HookFactory):
        _name = "cGcAudioManager::UpdateAudioEnvironment_LocationAndInterest"
    class UpdateAudioEnvironment_FreighterTriggers(HookFactory):
        _name = "cGcAudioManager::UpdateAudioEnvironment_FreighterTriggers"
    class UpdateAudioEnvironment_InteriorTriggers(HookFactory):
        _name = "cGcAudioManager::UpdateAudioEnvironment_InteriorTriggers"

class cGcNetworkManager:
    class cGcNetworkManager(HookFactory):
        _name = "cGcNetworkManager::cGcNetworkManager"
    class GetMatchmaking(HookFactory):
        _name = "cGcNetworkManager::GetMatchmaking"
    class Construct(HookFactory):
        _name = "cGcNetworkManager::Construct"
    class Update(HookFactory):
        _name = "cGcNetworkManager::Update"
    class GetLocalUserId(HookFactory):
        _name = "cGcNetworkManager::GetLocalUserId"

class cGcNetworkBandwidthMonitor:
    class sBandwidthData:
        class sBandwidthData(HookFactory):
            _name = "cGcNetworkBandwidthMonitor::sBandwidthData::sBandwidthData"

class cGcHUDMarker:
    class cGcHUDMarker(HookFactory):
        _name = "cGcHUDMarker::cGcHUDMarker"
    class Deactivate(HookFactory):
        _name = "cGcHUDMarker::Deactivate"
    class BumpToTagged(HookFactory):
        _name = "cGcHUDMarker::BumpToTagged"
    class CanEverBeTagged(HookFactory):
        _name = "cGcHUDMarker::CanEverBeTagged"
    class Construct(HookFactory):
        _name = "cGcHUDMarker::Construct"
    class LoadGuiFiles(HookFactory):
        _name = "cGcHUDMarker::LoadGuiFiles"
    class RenderNGuiElements(HookFactory):
        _name = "cGcHUDMarker::RenderNGuiElements"
    class CanDisplay(HookFactory):
        _name = "cGcHUDMarker::CanDisplay"
    class CanDisplayOnCompass(HookFactory):
        _name = "cGcHUDMarker::CanDisplayOnCompass"
    class ShowTagLockRing(HookFactory):
        _name = "cGcHUDMarker::ShowTagLockRing"
    class ClearLockedMarkerOnNode(HookFactory):
        _name = "cGcHUDMarker::ClearLockedMarkerOnNode"
    class Prepare(HookFactory):
        _name = "cGcHUDMarker::Prepare"
    class GenerateName(HookFactory):
        _name = "cGcHUDMarker::GenerateName"
    class Update(HookFactory):
        _name = "cGcHUDMarker::Update"
    class UpdateRender(HookFactory):
        _name = "cGcHUDMarker::UpdateRender"
    class UpdateRenderables(HookFactory):
        _name = "cGcHUDMarker::UpdateRenderables"
    class UpdateDescriptionText(HookFactory):
        _name = "cGcHUDMarker::UpdateDescriptionText"
    class UpdateDistanceText(HookFactory):
        _name = "cGcHUDMarker::UpdateDistanceText"
    class UpdateCompassIcons(HookFactory):
        _name = "cGcHUDMarker::UpdateCompassIcons"
    class UpdateIcons(HookFactory):
        _name = "cGcHUDMarker::UpdateIcons"
    class Animate(HookFactory):
        _name = "cGcHUDMarker::Animate"
    class CalculateHoverState(HookFactory):
        _name = "cGcHUDMarker::CalculateHoverState"
    class CalculateShowLargeState(HookFactory):
        _name = "cGcHUDMarker::CalculateShowLargeState"
    class CalculateFade(HookFactory):
        _name = "cGcHUDMarker::CalculateFade"
    class SetArrowType(HookFactory):
        _name = "cGcHUDMarker::SetArrowType"
    class HideNGuiTextWhileHUDDisabled(HookFactory):
        _name = "cGcHUDMarker::HideNGuiTextWhileHUDDisabled"
    class HasCompassDistanceText(HookFactory):
        _name = "cGcHUDMarker::HasCompassDistanceText"

class cGcHUDTrackArrow:
    class cGcHUDTrackArrow(HookFactory):
        _name = "cGcHUDTrackArrow::cGcHUDTrackArrow"
    class Construct(HookFactory):
        _name = "cGcHUDTrackArrow::Construct"
    class Update(HookFactory):
        _name = "cGcHUDTrackArrow::Update"
    class UpdateRender(HookFactory):
        _name = "cGcHUDTrackArrow::UpdateRender"
    class Render(HookFactory):
        _name = "cGcHUDTrackArrow::Render"
    class CalculateTargetSizeAndPos(HookFactory):
        _name = "cGcHUDTrackArrow::CalculateTargetSizeAndPos"
    class GetBorderPos(HookFactory):
        _name = "cGcHUDTrackArrow::GetBorderPos"

class cGcCreatureNode:
    class cGcCreatureNode(HookFactory):
        _name = "cGcCreatureNode::cGcCreatureNode"

class cGcGameConfigCache:
    class Prepare(HookFactory):
        _name = "cGcGameConfigCache::Prepare"

class cTkGraphicsAPI:
    class IsRunningVR(HookFactory):
        _name = "cTkGraphicsAPI::IsRunningVR"
    class SetTest(HookFactory):
        _name = "cTkGraphicsAPI::SetTest"
    class SetBlendMode(HookFactory):
        _name = "cTkGraphicsAPI::SetBlendMode"
    class Clear(HookFactory):
        _name = "cTkGraphicsAPI::Clear"
    class SetStencilMode(HookFactory):
        _name = "cTkGraphicsAPI::SetStencilMode"
    class SetCheckerboard(HookFactory):
        _name = "cTkGraphicsAPI::SetCheckerboard"
    class SetSamplingRate(HookFactory):
        _name = "cTkGraphicsAPI::SetSamplingRate"
    class SetCullMode(HookFactory):
        _name = "cTkGraphicsAPI::SetCullMode"
    class cUniformMemoryManager:
        class Allocate(HookFactory):
            _name = "cTkGraphicsAPI::cUniformMemoryManager::Allocate"
    class DisplayBuffer:
        class DisplayBuffer(HookFactory):
            _name = "cTkGraphicsAPI::DisplayBuffer::DisplayBuffer"
    class AllocBufferMemory(HookFactory):
        _name = "cTkGraphicsAPI::AllocBufferMemory"
    class AllocImageMemory(HookFactory):
        _name = "cTkGraphicsAPI::AllocImageMemory"
    class AllocateShaderResourceView(HookFactory):
        _name = "cTkGraphicsAPI::AllocateShaderResourceView"
    class AllocateUnorderedAccessView(HookFactory):
        _name = "cTkGraphicsAPI::AllocateUnorderedAccessView"
    class AllocateVulkanMemory(HookFactory):
        _name = "cTkGraphicsAPI::AllocateVulkanMemory"
    class ApplyDLSS(HookFactory):
        _name = "cTkGraphicsAPI::ApplyDLSS"
    class ApplyNeededSemaphores(HookFactory):
        _name = "cTkGraphicsAPI::ApplyNeededSemaphores"
    class FrameDescriptorAllocator:
        class BeginFrame(HookFactory):
            _name = "cTkGraphicsAPI::FrameDescriptorAllocator::BeginFrame"
        class Init(HookFactory):
            _name = "cTkGraphicsAPI::FrameDescriptorAllocator::Init"
    class BeginFrame(HookFactory):
        _name = "cTkGraphicsAPI::BeginFrame"
    class BindSeparateDepthBuffer(HookFactory):
        _name = "cTkGraphicsAPI::BindSeparateDepthBuffer"
    class BlitTexture(HookFactory):
        _name = "cTkGraphicsAPI::BlitTexture"
    class ClearNeededSemaphores(HookFactory):
        _name = "cTkGraphicsAPI::ClearNeededSemaphores"
    class ClearTexture(HookFactory):
        _name = "cTkGraphicsAPI::ClearTexture"
    class CreateIndexBuffer(HookFactory):
        _name = "cTkGraphicsAPI::CreateIndexBuffer"
    class CreateRenderPass(HookFactory):
        _name = "cTkGraphicsAPI::CreateRenderPass"
    class CreateRenderTarget(HookFactory):
        _name = "cTkGraphicsAPI::CreateRenderTarget"
    class CreateSampler(HookFactory):
        _name = "cTkGraphicsAPI::CreateSampler"
        _overload: overloads.cTkGraphicsAPI.CreateSampler.overloads = "VkSamplerCreateInfo *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkGraphicsAPI.CreateSampler.overloads):
            cls._overload = overload_args
            return cls
    class CreateStorageBuffer(HookFactory):
        _name = "cTkGraphicsAPI::CreateStorageBuffer"
    class CreateVertexBuffer(HookFactory):
        _name = "cTkGraphicsAPI::CreateVertexBuffer"
    class DLSS_QueryOptimalRenderSize(HookFactory):
        _name = "cTkGraphicsAPI::DLSS_QueryOptimalRenderSize"
    class DispatchWithState(HookFactory):
        _name = "cTkGraphicsAPI::DispatchWithState"
    class EndFrame(HookFactory):
        _name = "cTkGraphicsAPI::EndFrame"
    class FreeMemory(HookFactory):
        _name = "cTkGraphicsAPI::FreeMemory"
    class GetPostUpscaleHeight(HookFactory):
        _name = "cTkGraphicsAPI::GetPostUpscaleHeight"
    class GetPostUpscaleWidth(HookFactory):
        _name = "cTkGraphicsAPI::GetPostUpscaleWidth"
    class GetViewMatrix(HookFactory):
        _name = "cTkGraphicsAPI::GetViewMatrix"
    class Init(HookFactory):
        _name = "cTkGraphicsAPI::Init"
    class InitBackBuffer(HookFactory):
        _name = "cTkGraphicsAPI::InitBackBuffer"
    class InitVideoSubsystem(HookFactory):
        _name = "cTkGraphicsAPI::InitVideoSubsystem"
    class InitializeNGX(HookFactory):
        _name = "cTkGraphicsAPI::InitializeNGX"
    class PostInit(HookFactory):
        _name = "cTkGraphicsAPI::PostInit"
    class ReleaseDLSSFeatures(HookFactory):
        _name = "cTkGraphicsAPI::ReleaseDLSSFeatures"
    class ReleaseShaderResourceView(HookFactory):
        _name = "cTkGraphicsAPI::ReleaseShaderResourceView"
    class RenderToBufferScaleWidth(HookFactory):
        _name = "cTkGraphicsAPI::RenderToBufferScaleWidth"
    class ResetRenderer(HookFactory):
        _name = "cTkGraphicsAPI::ResetRenderer"
    class SetDLSSQuality(HookFactory):
        _name = "cTkGraphicsAPI::SetDLSSQuality"
    class SetFFXSRQuality(HookFactory):
        _name = "cTkGraphicsAPI::SetFFXSRQuality"
    class SetFrameFlipRate(HookFactory):
        _name = "cTkGraphicsAPI::SetFrameFlipRate"
    class SetProjectionMatrix(HookFactory):
        _name = "cTkGraphicsAPI::SetProjectionMatrix"
    class SetProjectionMatrixOrtho(HookFactory):
        _name = "cTkGraphicsAPI::SetProjectionMatrixOrtho"
    class SetShaderResourceView(HookFactory):
        _name = "cTkGraphicsAPI::SetShaderResourceView"
    class SetTextureAddressMode(HookFactory):
        _name = "cTkGraphicsAPI::SetTextureAddressMode"
    class SetViewMatrix(HookFactory):
        _name = "cTkGraphicsAPI::SetViewMatrix"
        _overload: overloads.cTkGraphicsAPI.SetViewMatrix.overloads = "const cTkMatrix44 *, __int64, __int64"
        @classmethod
        def overload(cls, overload_args: overloads.cTkGraphicsAPI.SetViewMatrix.overloads):
            cls._overload = overload_args
            return cls
    class ShutdownNGX(HookFactory):
        _name = "cTkGraphicsAPI::ShutdownNGX"
    class SwapBuffers(HookFactory):
        _name = "cTkGraphicsAPI::SwapBuffers"
    class UpdateDLSSConfig(HookFactory):
        _name = "cTkGraphicsAPI::UpdateDLSSConfig"

class cGcFirstBootContext:
    class Update(HookFactory):
        _name = "cGcFirstBootContext::Update"

class cGcOutpostComponent:
    class NetSerializeOnInit(HookFactory):
        _name = "cGcOutpostComponent::NetSerializeOnInit"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcOutpostComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcOutpostComponent::InitData"
    class cGcOutpostComponent(HookFactory):
        _name = "cGcOutpostComponent::cGcOutpostComponent"
    class FindEmptyDockPointLocation(HookFactory):
        _name = "cGcOutpostComponent::FindEmptyDockPointLocation"
    class GetTypedComponent(HookFactory):
        _name = "cGcOutpostComponent::GetTypedComponent"
        _overload: overloads.cGcOutpostComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcOutpostComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcOutpostComponent::FindFirstTypedComponent"
    class IsDockEmpty(HookFactory):
        _name = "cGcOutpostComponent::IsDockEmpty"
    class GetClosestDock(HookFactory):
        _name = "cGcOutpostComponent::GetClosestDock"
    class GetDockingShipData(HookFactory):
        _name = "cGcOutpostComponent::GetDockingShipData"
    class GetDockState(HookFactory):
        _name = "cGcOutpostComponent::GetDockState"
    class IsFrigate(HookFactory):
        _name = "cGcOutpostComponent::IsFrigate"
    class GetDockIndexAndShipDockingData(HookFactory):
        _name = "cGcOutpostComponent::GetDockIndexAndShipDockingData"
    class IsTemporary(HookFactory):
        _name = "cGcOutpostComponent::IsTemporary"
    class GetNumComponents(HookFactory):
        _name = "cGcOutpostComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcOutpostComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcOutpostComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcOutpostComponent::Update"
    class Release(HookFactory):
        _name = "cGcOutpostComponent::Release"
    class GetHoldingPos(HookFactory):
        _name = "cGcOutpostComponent::GetHoldingPos"
    class GetBestDockInfo(HookFactory):
        _name = "cGcOutpostComponent::GetBestDockInfo"
    class SetAllDockedShipsVisibility(HookFactory):
        _name = "cGcOutpostComponent::SetAllDockedShipsVisibility"
    class RequestLanding(HookFactory):
        _name = "cGcOutpostComponent::RequestLanding"
    class ForceJoinOutpost(HookFactory):
        _name = "cGcOutpostComponent::ForceJoinOutpost"
    class StartDocked(HookFactory):
        _name = "cGcOutpostComponent::StartDocked"
    class TransferDock(HookFactory):
        _name = "cGcOutpostComponent::TransferDock"
    class OutpostsNGuiCallback(HookFactory):
        _name = "cGcOutpostComponent::OutpostsNGuiCallback"
    class CanAIShipLandHere(HookFactory):
        _name = "cGcOutpostComponent::CanAIShipLandHere"
    class SummonShip(HookFactory):
        _name = "cGcOutpostComponent::SummonShip"
    class GetCurrentOrNextFreeDockShipData(HookFactory):
        _name = "cGcOutpostComponent::GetCurrentOrNextFreeDockShipData"
    class LaunchPolice(HookFactory):
        _name = "cGcOutpostComponent::LaunchPolice"
    class GetClosestEmptyDock(HookFactory):
        _name = "cGcOutpostComponent::GetClosestEmptyDock"
    class IsLandingAreaClear(HookFactory):
        _name = "cGcOutpostComponent::IsLandingAreaClear"
    class RequestTakeOffAI(HookFactory):
        _name = "cGcOutpostComponent::RequestTakeOffAI"
    class RequestTakeOffPlayer(HookFactory):
        _name = "cGcOutpostComponent::RequestTakeOffPlayer"
    class GenerateInteriorStep(HookFactory):
        _name = "cGcOutpostComponent::GenerateInteriorStep"
    class LoadInteriorStep(HookFactory):
        _name = "cGcOutpostComponent::LoadInteriorStep"
    class GetEntrancePoint(HookFactory):
        _name = "cGcOutpostComponent::GetEntrancePoint"
    class HasHigherRankingPlayer(HookFactory):
        _name = "cGcOutpostComponent::HasHigherRankingPlayer"
    class RenderNGui(HookFactory):
        _name = "cGcOutpostComponent::RenderNGui"
    class FindNearestEmptyDockPointLocation(HookFactory):
        _name = "cGcOutpostComponent::FindNearestEmptyDockPointLocation"
    class GetExitPoint(HookFactory):
        _name = "cGcOutpostComponent::GetExitPoint"
    class GetDockIndex(HookFactory):
        _name = "cGcOutpostComponent::GetDockIndex"
    class AbortLanding(HookFactory):
        _name = "cGcOutpostComponent::AbortLanding"
    class CalcDockingTarget(HookFactory):
        _name = "cGcOutpostComponent::CalcDockingTarget"

class ComponentInstancercGcOutpostComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcOutpostComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcOutpostComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcOutpostComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcOutpostComponent::DestructInstance"

class ComponentLoadInstancercGcOutpostComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcOutpostComponent::Register"

class cGcSolarSystemTour:
    class GetInstance(HookFactory):
        _name = "cGcSolarSystemTour::GetInstance"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcSolarSystemTour::RenderNGuiCallback"
    class Prepare(HookFactory):
        _name = "cGcSolarSystemTour::Prepare"
    class RenderNGui(HookFactory):
        _name = "cGcSolarSystemTour::RenderNGui"
    class RestoreCamera(HookFactory):
        _name = "cGcSolarSystemTour::RestoreCamera"
    class Update(HookFactory):
        _name = "cGcSolarSystemTour::Update"
    class ThreadedUpdate(HookFactory):
        _name = "cGcSolarSystemTour::ThreadedUpdate"
    class ThreadSyncPoint(HookFactory):
        _name = "cGcSolarSystemTour::ThreadSyncPoint"
    class SwitchToFirstPersonMode(HookFactory):
        _name = "cGcSolarSystemTour::SwitchToFirstPersonMode"
    class SwitchToPlanet(HookFactory):
        _name = "cGcSolarSystemTour::SwitchToPlanet"
    class SwitchToAnimatedCamera(HookFactory):
        _name = "cGcSolarSystemTour::SwitchToAnimatedCamera"
    class SelectValidBuildingAnimation(HookFactory):
        _name = "cGcSolarSystemTour::SelectValidBuildingAnimation"
    class SelectValidSpaceAnimation(HookFactory):
        _name = "cGcSolarSystemTour::SelectValidSpaceAnimation"
    class SelectValidSpecialAnimation(HookFactory):
        _name = "cGcSolarSystemTour::SelectValidSpecialAnimation"
    class WaitForCameraAnimation(HookFactory):
        _name = "cGcSolarSystemTour::WaitForCameraAnimation"
    class SwitchToCameraTourStage(HookFactory):
        _name = "cGcSolarSystemTour::SwitchToCameraTourStage"
    class SwitchToNextCameraTourStage(HookFactory):
        _name = "cGcSolarSystemTour::SwitchToNextCameraTourStage"

class cGcAmbientModeUI:
    class Update(HookFactory):
        _name = "cGcAmbientModeUI::Update"

class cGcApplicationAmbientGameState:
    class Construct(HookFactory):
        _name = "cGcApplicationAmbientGameState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationAmbientGameState::Prepare"
    class Release(HookFactory):
        _name = "cGcApplicationAmbientGameState::Release"
    class Update(HookFactory):
        _name = "cGcApplicationAmbientGameState::Update"
    class ThreadedUpdate(HookFactory):
        _name = "cGcApplicationAmbientGameState::ThreadedUpdate"
    class ThreadSyncPoint(HookFactory):
        _name = "cGcApplicationAmbientGameState::ThreadSyncPoint"
    class Event(HookFactory):
        _name = "cGcApplicationAmbientGameState::Event"

class cTkEntitlementManager:
    class cTkEntitlementManager(HookFactory):
        _name = "cTkEntitlementManager::cTkEntitlementManager"
    class GetEntitlementId(HookFactory):
        _name = "cTkEntitlementManager::GetEntitlementId"
    class GetEntitlementServiceId(HookFactory):
        _name = "cTkEntitlementManager::GetEntitlementServiceId"
    class HasEntitlement(HookFactory):
        _name = "cTkEntitlementManager::HasEntitlement"
    class Prepare(HookFactory):
        _name = "cTkEntitlementManager::Prepare"

class cGcApplicationBootState:
    class Construct(HookFactory):
        _name = "cGcApplicationBootState::Construct"
    class Update(HookFactory):
        _name = "cGcApplicationBootState::Update"
    class Render(HookFactory):
        _name = "cGcApplicationBootState::Render"

class cTkTrophyManager:
    class GetInstance(HookFactory):
        _name = "cTkTrophyManager::GetInstance"
    class Construct(HookFactory):
        _name = "cTkTrophyManager::Construct"
    class Release(HookFactory):
        _name = "cTkTrophyManager::Release"
    class IsTrophyUnlocked(HookFactory):
        _name = "cTkTrophyManager::IsTrophyUnlocked"
    class LookupTrophyId(HookFactory):
        _name = "cTkTrophyManager::LookupTrophyId"
    class Prepare(HookFactory):
        _name = "cTkTrophyManager::Prepare"
    class Update(HookFactory):
        _name = "cTkTrophyManager::Update"
    class UpdateTrophyUnlocksThread(HookFactory):
        _name = "cTkTrophyManager::UpdateTrophyUnlocksThread"

class cGcApplicationCoreServicesState:
    class Prepare(HookFactory):
        _name = "cGcApplicationCoreServicesState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationCoreServicesState::Update"
    class Release(HookFactory):
        _name = "cGcApplicationCoreServicesState::Release"
    class Destruct(HookFactory):
        _name = "cGcApplicationCoreServicesState::Destruct"

class cGcEncounterComponent:
    class GetNumComponents(HookFactory):
        _name = "cGcEncounterComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcEncounterComponent::GetTypedComponent"
        _overload: overloads.cGcEncounterComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcEncounterComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetTypeNameHash64(HookFactory):
        _name = "cGcEncounterComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcEncounterComponent::InitData"
    class cGcEncounterComponent(HookFactory):
        _name = "cGcEncounterComponent::cGcEncounterComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcEncounterComponent::FindFirstTypedComponent"
    class IsScriptedEncounter(HookFactory):
        _name = "cGcEncounterComponent::IsScriptedEncounter"
    class Prepare(HookFactory):
        _name = "cGcEncounterComponent::Prepare"
    class OnPartDestroyed(HookFactory):
        _name = "cGcEncounterComponent::OnPartDestroyed"
    class GetNearestEncounterOfType(HookFactory):
        _name = "cGcEncounterComponent::GetNearestEncounterOfType"
    class IsGroundWormEncounterActive(HookFactory):
        _name = "cGcEncounterComponent::IsGroundWormEncounterActive"
    class IsScriptedEncounterActive(HookFactory):
        _name = "cGcEncounterComponent::IsScriptedEncounterActive"
    class IsEncounterDefeated(HookFactory):
        _name = "cGcEncounterComponent::IsEncounterDefeated"
    class GetRemainingGuards(HookFactory):
        _name = "cGcEncounterComponent::GetRemainingGuards"
    class ApplyScriptedOverride(HookFactory):
        _name = "cGcEncounterComponent::ApplyScriptedOverride"
        _overload: overloads.cGcEncounterComponent.ApplyScriptedOverride.overloads = "cGcEncounterComponent *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcEncounterComponent.ApplyScriptedOverride.overloads):
            cls._overload = overload_args
            return cls
    class GetWave(HookFactory):
        _name = "cGcEncounterComponent::GetWave"
    class AddWaveToSpawn(HookFactory):
        _name = "cGcEncounterComponent::AddWaveToSpawn"
    class PickNextWaveFromSequence(HookFactory):
        _name = "cGcEncounterComponent::PickNextWaveFromSequence"
    class GenerateGuards(HookFactory):
        _name = "cGcEncounterComponent::GenerateGuards"
    class SpawnGuard(HookFactory):
        _name = "cGcEncounterComponent::SpawnGuard"
    class AddSpawnedSentinels(HookFactory):
        _name = "cGcEncounterComponent::AddSpawnedSentinels"
    class Update(HookFactory):
        _name = "cGcEncounterComponent::Update"
    class Release(HookFactory):
        _name = "cGcEncounterComponent::Release"
    class ClearGuards(HookFactory):
        _name = "cGcEncounterComponent::ClearGuards"
    class RenderNGui(HookFactory):
        _name = "cGcEncounterComponent::RenderNGui"
    class IsInRange(HookFactory):
        _name = "cGcEncounterComponent::IsInRange"
    class GetOrCreateStateComponent(HookFactory):
        _name = "cGcEncounterComponent::GetOrCreateStateComponent"

class ComponentInstancercGcEncounterComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcEncounterComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcEncounterComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcEncounterComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcEncounterComponent::DestructInstance"

class cGcLootComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcLootComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcLootComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcLootComponent::GetTypedComponent"
        _overload: overloads.cGcLootComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcLootComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetNumComponents(HookFactory):
        _name = "cGcLootComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcLootComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcLootComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcLootComponent::Update"
    class Collect(HookFactory):
        _name = "cGcLootComponent::Collect"
    class ActiveDeathPoint(HookFactory):
        _name = "cGcLootComponent::ActiveDeathPoint"
    class CanTakeLoot(HookFactory):
        _name = "cGcLootComponent::CanTakeLoot"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcLootComponent::FindFirstTypedComponent"

class ComponentInstancercGcLootComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcLootComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcLootComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcLootComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcLootComponent::DestructInstance"

class cGcSentinelMech:
    class GetOwnerConcept(HookFactory):
        _name = "cGcSentinelMech::GetOwnerConcept"
    class OnDeath(HookFactory):
        _name = "cGcSentinelMech::OnDeath"
    class GetWeapon(HookFactory):
        _name = "cGcSentinelMech::GetWeapon"
    class Prepare(HookFactory):
        _name = "cGcSentinelMech::Prepare"
    class Release(HookFactory):
        _name = "cGcSentinelMech::Release"
    class Update(HookFactory):
        _name = "cGcSentinelMech::Update"
    class BeginTitanFall(HookFactory):
        _name = "cGcSentinelMech::BeginTitanFall"
    class GetTree(HookFactory):
        _name = "cGcSentinelMech::GetTree"
    class FireWeapon(HookFactory):
        _name = "cGcSentinelMech::FireWeapon"
    class GetTargetPoint(HookFactory):
        _name = "cGcSentinelMech::GetTargetPoint"
    class GetForward(HookFactory):
        _name = "cGcSentinelMech::GetForward"
    class GetLabelPoint(HookFactory):
        _name = "cGcSentinelMech::GetLabelPoint"
    class GetTargetPointSize(HookFactory):
        _name = "cGcSentinelMech::GetTargetPointSize"
    class GetSightPoint(HookFactory):
        _name = "cGcSentinelMech::GetSightPoint"
    class GetObb(HookFactory):
        _name = "cGcSentinelMech::GetObb"
    class GetEffectAttachLocator(HookFactory):
        _name = "cGcSentinelMech::GetEffectAttachLocator"
    class IsAttacking(HookFactory):
        _name = "cGcSentinelMech::IsAttacking"
    class IsAlert(HookFactory):
        _name = "cGcSentinelMech::IsAlert"
    class GetAttackTarget(HookFactory):
        _name = "cGcSentinelMech::GetAttackTarget"
    class GetAlertRange(HookFactory):
        _name = "cGcSentinelMech::GetAlertRange"
    class GetSightRange(HookFactory):
        _name = "cGcSentinelMech::GetSightRange"
    class GetSightAngle(HookFactory):
        _name = "cGcSentinelMech::GetSightAngle"
    class NetSerialize(HookFactory):
        _name = "cGcSentinelMech::NetSerialize"
    class RenderNGui(HookFactory):
        _name = "cGcSentinelMech::RenderNGui"
    class UpdateVisibility(HookFactory):
        _name = "cGcSentinelMech::UpdateVisibility"
    class UpdateWeapons(HookFactory):
        _name = "cGcSentinelMech::UpdateWeapons"
    class UpdateAudio(HookFactory):
        _name = "cGcSentinelMech::UpdateAudio"
    class OnHit(HookFactory):
        _name = "cGcSentinelMech::OnHit"
    class OnArmourHit(HookFactory):
        _name = "cGcSentinelMech::OnArmourHit"

class cGcVehicleComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcVehicleComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcVehicleComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcVehicleComponent::InitData"
    class cGcVehicleComponent(HookFactory):
        _name = "cGcVehicleComponent::cGcVehicleComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcVehicleComponent::FindFirstTypedComponent"
    class GetVelocity(HookFactory):
        _name = "cGcVehicleComponent::GetVelocity"
    class GetInWorldLocator(HookFactory):
        _name = "cGcVehicleComponent::GetInWorldLocator"
    class RequestScan(HookFactory):
        _name = "cGcVehicleComponent::RequestScan"
    class GetWeapon(HookFactory):
        _name = "cGcVehicleComponent::GetWeapon"
    class GetNumComponents(HookFactory):
        _name = "cGcVehicleComponent::GetNumComponents"
    class SetCollisionUnpiloted(HookFactory):
        _name = "cGcVehicleComponent::SetCollisionUnpiloted"
    class OnAttached(HookFactory):
        _name = "cGcVehicleComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcVehicleComponent::Prepare"
    class NoFade(HookFactory):
        _name = "cGcVehicleComponent::NoFade"
    class UseThirdPersonCamera(HookFactory):
        _name = "cGcVehicleComponent::UseThirdPersonCamera"
    class GetCockpitPlayerLocatorMatrix(HookFactory):
        _name = "cGcVehicleComponent::GetCockpitPlayerLocatorMatrix"
    class GetCockpitCameraLocatorPos(HookFactory):
        _name = "cGcVehicleComponent::GetCockpitCameraLocatorPos"
    class Update(HookFactory):
        _name = "cGcVehicleComponent::Update"
    class UpdateAudio(HookFactory):
        _name = "cGcVehicleComponent::UpdateAudio"
    class UpdateWeapons(HookFactory):
        _name = "cGcVehicleComponent::UpdateWeapons"
    class CycleTerrainEditMode(HookFactory):
        _name = "cGcVehicleComponent::CycleTerrainEditMode"
    class UpdateSteeringWheel(HookFactory):
        _name = "cGcVehicleComponent::UpdateSteeringWheel"
    class ToggleCameraViewPoint(HookFactory):
        _name = "cGcVehicleComponent::ToggleCameraViewPoint"
    class UpdateCameraLook(HookFactory):
        _name = "cGcVehicleComponent::UpdateCameraLook"
    class GetBoosterColour(HookFactory):
        _name = "cGcVehicleComponent::GetBoosterColour"
    class UpdateControl(HookFactory):
        _name = "cGcVehicleComponent::UpdateControl"
    class UpdateJumping(HookFactory):
        _name = "cGcVehicleComponent::UpdateJumping"
    class UpdateBoost(HookFactory):
        _name = "cGcVehicleComponent::UpdateBoost"
    class UpdateMechControls(HookFactory):
        _name = "cGcVehicleComponent::UpdateMechControls"
    class UpdateUnderwaterControl(HookFactory):
        _name = "cGcVehicleComponent::UpdateUnderwaterControl"
    class UpdateHeadlights(HookFactory):
        _name = "cGcVehicleComponent::UpdateHeadlights"
    class UpdateCockpit(HookFactory):
        _name = "cGcVehicleComponent::UpdateCockpit"
    class ReportMalfunction(HookFactory):
        _name = "cGcVehicleComponent::ReportMalfunction"
    class UseFuel(HookFactory):
        _name = "cGcVehicleComponent::UseFuel"
    class CycleWeaponMode(HookFactory):
        _name = "cGcVehicleComponent::CycleWeaponMode"
    class GetUnderwaterDepth(HookFactory):
        _name = "cGcVehicleComponent::GetUnderwaterDepth"
    class GetSurfaceFactor(HookFactory):
        _name = "cGcVehicleComponent::GetSurfaceFactor"
    class ApplyBuoyancy(HookFactory):
        _name = "cGcVehicleComponent::ApplyBuoyancy"
    class UpdateScanning(HookFactory):
        _name = "cGcVehicleComponent::UpdateScanning"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcVehicleComponent::UpdatePostPhysics"
    class UpdateRender(HookFactory):
        _name = "cGcVehicleComponent::UpdateRender"
    class Release(HookFactory):
        _name = "cGcVehicleComponent::Release"
    class Enter(HookFactory):
        _name = "cGcVehicleComponent::Enter"
    class InstantExit(HookFactory):
        _name = "cGcVehicleComponent::InstantExit"
    class GetFuel(HookFactory):
        _name = "cGcVehicleComponent::GetFuel"
    class IsEngineActive(HookFactory):
        _name = "cGcVehicleComponent::IsEngineActive"
    class IsBoosting(HookFactory):
        _name = "cGcVehicleComponent::IsBoosting"
    class HasDriver(HookFactory):
        _name = "cGcVehicleComponent::HasDriver"
    class NetSerialize(HookFactory):
        _name = "cGcVehicleComponent::NetSerialize"
    class IsOnGround(HookFactory):
        _name = "cGcVehicleComponent::IsOnGround"
    class NotifyDeathOfDriver(HookFactory):
        _name = "cGcVehicleComponent::NotifyDeathOfDriver"
    class HasWorkingScanner(HookFactory):
        _name = "cGcVehicleComponent::HasWorkingScanner"
    class Reset(HookFactory):
        _name = "cGcVehicleComponent::Reset"
    class GetRigidBody(HookFactory):
        _name = "cGcVehicleComponent::GetRigidBody"
    class DisableEmitters(HookFactory):
        _name = "cGcVehicleComponent::DisableEmitters"
    class IsAIControlAvailable(HookFactory):
        _name = "cGcVehicleComponent::IsAIControlAvailable"
    class IsUnderAIControl(HookFactory):
        _name = "cGcVehicleComponent::IsUnderAIControl"
    class ProjectileHitCallback(HookFactory):
        _name = "cGcVehicleComponent::ProjectileHitCallback"
    class OnProjectileHit(HookFactory):
        _name = "cGcVehicleComponent::OnProjectileHit"
    class UpdateActiveMechMeshParts(HookFactory):
        _name = "cGcVehicleComponent::UpdateActiveMechMeshParts"
    class GetShootPoint(HookFactory):
        _name = "cGcVehicleComponent::GetShootPoint"
    class TriggerWeaponMuzzleEffects(HookFactory):
        _name = "cGcVehicleComponent::TriggerWeaponMuzzleEffects"
    class UpdateActiveMechWeaponLocations(HookFactory):
        _name = "cGcVehicleComponent::UpdateActiveMechWeaponLocations"
    class FireWeapon(HookFactory):
        _name = "cGcVehicleComponent::FireWeapon"
    class GetCombatEffectsForLaser(HookFactory):
        _name = "cGcVehicleComponent::GetCombatEffectsForLaser"
    class UpdateWeaponAim(HookFactory):
        _name = "cGcVehicleComponent::UpdateWeaponAim"

class ComponentInstancercGcVehicleComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcVehicleComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcVehicleComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleComponent::DestructInstance"

class ComponentLoadInstancercGcVehicleComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcVehicleComponent::Register"

class cGcApplicationDeathState:
    class Construct(HookFactory):
        _name = "cGcApplicationDeathState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationDeathState::Prepare"
    class Release(HookFactory):
        _name = "cGcApplicationDeathState::Release"
    class Update(HookFactory):
        _name = "cGcApplicationDeathState::Update"
    class Render(HookFactory):
        _name = "cGcApplicationDeathState::Render"
    class RestoreRenderPipeline(HookFactory):
        _name = "cGcApplicationDeathState::RestoreRenderPipeline"

class cGcApplicationGalacticMapState:
    class Construct(HookFactory):
        _name = "cGcApplicationGalacticMapState::Construct"
    class Destruct(HookFactory):
        _name = "cGcApplicationGalacticMapState::Destruct"
    class Prepare(HookFactory):
        _name = "cGcApplicationGalacticMapState::Prepare"
    class Release(HookFactory):
        _name = "cGcApplicationGalacticMapState::Release"
    class Update(HookFactory):
        _name = "cGcApplicationGalacticMapState::Update"
    class Event(HookFactory):
        _name = "cGcApplicationGalacticMapState::Event"
    class Render(HookFactory):
        _name = "cGcApplicationGalacticMapState::Render"

class cGcFrontendPageFunctions:
    class AcceptButtonPressed(HookFactory):
        _name = "cGcFrontendPageFunctions::AcceptButtonPressed"
    class BackButtonPressed(HookFactory):
        _name = "cGcFrontendPageFunctions::BackButtonPressed"
    class IsTechOnlySubInventory(HookFactory):
        _name = "cGcFrontendPageFunctions::IsTechOnlySubInventory"
    class Option2ButtonPressed(HookFactory):
        _name = "cGcFrontendPageFunctions::Option2ButtonPressed"
    class SetImage(HookFactory):
        _name = "cGcFrontendPageFunctions::SetImage"
    class SelectLayer(HookFactory):
        _name = "cGcFrontendPageFunctions::SelectLayer"
    class SetActiveSlotType(HookFactory):
        _name = "cGcFrontendPageFunctions::SetActiveSlotType"
    class SetInventoryIcon(HookFactory):
        _name = "cGcFrontendPageFunctions::SetInventoryIcon"
    class SetIconImage(HookFactory):
        _name = "cGcFrontendPageFunctions::SetIconImage"
        _overload: overloads.cGcFrontendPageFunctions.SetIconImage.overloads = "cGcNGuiLayer *, const cTkTextureResource *, const cTkColour *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageFunctions.SetIconImage.overloads):
            cls._overload = overload_args
            return cls
    class SetPopupChemical(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPopupChemical"
    class TouchscreenPressButtonPressed(HookFactory):
        _name = "cGcFrontendPageFunctions::TouchscreenPressButtonPressed"
    class SetColour(HookFactory):
        _name = "cGcFrontendPageFunctions::SetColour"
        _overload: overloads.cGcFrontendPageFunctions.SetColour.overloads = "cTkNGuiGraphicStyle *, const cTkColour *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageFunctions.SetColour.overloads):
            cls._overload = overload_args
            return cls
    class SetPageTitle(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPageTitle"
    class SetColourNoAlpha(HookFactory):
        _name = "cGcFrontendPageFunctions::SetColourNoAlpha"
    class AnyButtonPressed(HookFactory):
        _name = "cGcFrontendPageFunctions::AnyButtonPressed"
    class SetSlotOutline(HookFactory):
        _name = "cGcFrontendPageFunctions::SetSlotOutline"
    class CheckMoveAndTransfer(HookFactory):
        _name = "cGcFrontendPageFunctions::CheckMoveAndTransfer"
    class SetInventorySlot(HookFactory):
        _name = "cGcFrontendPageFunctions::SetInventorySlot"
    class SetItemSlot(HookFactory):
        _name = "cGcFrontendPageFunctions::SetItemSlot"
    class SetItemSlotBorder(HookFactory):
        _name = "cGcFrontendPageFunctions::SetItemSlotBorder"
    class SetItemSlotBorderRarity(HookFactory):
        _name = "cGcFrontendPageFunctions::SetItemSlotBorderRarity"
    class SetPopupBasics(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPopupBasics"
    class SetPopupDiscoveryTitleBar(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPopupDiscoveryTitleBar"
    class GetTradeCategoryString(HookFactory):
        _name = "cGcFrontendPageFunctions::GetTradeCategoryString"
    class SetPopupIcon(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPopupIcon"
    class SetPopupTransfer(HookFactory):
        _name = "cGcFrontendPageFunctions::SetPopupTransfer"
    class SetQuantityBar(HookFactory):
        _name = "cGcFrontendPageFunctions::SetQuantityBar"
        _overload: overloads.cGcFrontendPageFunctions.SetQuantityBar.overloads = "cGcNGuiLayer *, const cGcInventoryElement *, eQuantityBarType, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageFunctions.SetQuantityBar.overloads):
            cls._overload = overload_args
            return cls
    class SetRequirements(HookFactory):
        _name = "cGcFrontendPageFunctions::SetRequirements"
    class DoSlot(HookFactory):
        _name = "cGcFrontendPageFunctions::DoSlot"
    class DoChemicalSlot(HookFactory):
        _name = "cGcFrontendPageFunctions::DoChemicalSlot"
    class GetFreighterStorageInventories(HookFactory):
        _name = "cGcFrontendPageFunctions::GetFreighterStorageInventories"
    class DoProductSlot(HookFactory):
        _name = "cGcFrontendPageFunctions::DoProductSlot"
    class DoTechnologySlot(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTechnologySlot"
    class AllowedToMoveTech(HookFactory):
        _name = "cGcFrontendPageFunctions::AllowedToMoveTech"
    class CanTechEvolve(HookFactory):
        _name = "cGcFrontendPageFunctions::CanTechEvolve"
    class GetEvolveQuality(HookFactory):
        _name = "cGcFrontendPageFunctions::GetEvolveQuality"
    class DoTechStatSection(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTechStatSection"
    class HideUsedItemPopupElementsForWiki(HookFactory):
        _name = "cGcFrontendPageFunctions::HideUsedItemPopupElementsForWiki"
    class DoItemPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoItemPopup"
    class IsItemProcUpgradeProduct(HookFactory):
        _name = "cGcFrontendPageFunctions::IsItemProcUpgradeProduct"
    class LayerOverlapsPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::LayerOverlapsPopup"
    class DoBaseStatsWindow(HookFactory):
        _name = "cGcFrontendPageFunctions::DoBaseStatsWindow"
    class DoLiveStats(HookFactory):
        _name = "cGcFrontendPageFunctions::DoLiveStats"
    class CalculateShipStatWeapons(HookFactory):
        _name = "cGcFrontendPageFunctions::CalculateShipStatWeapons"
    class CalculateShipStatShield(HookFactory):
        _name = "cGcFrontendPageFunctions::CalculateShipStatShield"
    class CalculateShipStatWarp(HookFactory):
        _name = "cGcFrontendPageFunctions::CalculateShipStatWarp"
    class CalculateShipStatEngines(HookFactory):
        _name = "cGcFrontendPageFunctions::CalculateShipStatEngines"
    class CalculateStatFleetBoosts(HookFactory):
        _name = "cGcFrontendPageFunctions::CalculateStatFleetBoosts"
    class DoClassBox(HookFactory):
        _name = "cGcFrontendPageFunctions::DoClassBox"
    class DoIterateLayers(HookFactory):
        _name = "cGcFrontendPageFunctions::DoIterateLayers"
    class DoIterateAndScaleLayers(HookFactory):
        _name = "cGcFrontendPageFunctions::DoIterateAndScaleLayers"
    class CanExitViaBackButton(HookFactory):
        _name = "cGcFrontendPageFunctions::CanExitViaBackButton"
    class SetStyleAlpha(HookFactory):
        _name = "cGcFrontendPageFunctions::SetStyleAlpha"
    class PopulateInventoryPageInventory(HookFactory):
        _name = "cGcFrontendPageFunctions::PopulateInventoryPageInventory"
    class DoInventoryExpandButton(HookFactory):
        _name = "cGcFrontendPageFunctions::DoInventoryExpandButton"
    class DoScrollingInventory(HookFactory):
        _name = "cGcFrontendPageFunctions::DoScrollingInventory"
    class DoInventoryPageTabs(HookFactory):
        _name = "cGcFrontendPageFunctions::DoInventoryPageTabs"
    class PopulateDynamicInventorySlots(HookFactory):
        _name = "cGcFrontendPageFunctions::PopulateDynamicInventorySlots"
    class CanPickInteract(HookFactory):
        _name = "cGcFrontendPageFunctions::CanPickInteract"
    class DoCrossplayPlatform(HookFactory):
        _name = "cGcFrontendPageFunctions::DoCrossplayPlatform"
        _overload: overloads.cGcFrontendPageFunctions.DoCrossplayPlatform.overloads = "cGcNGuiLayer *, const cTkFixedString<64,char> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageFunctions.DoCrossplayPlatform.overloads):
            cls._overload = overload_args
            return cls
    class DoCrossplayDifficulty(HookFactory):
        _name = "cGcFrontendPageFunctions::DoCrossplayDifficulty"
    class CanInstallTech(HookFactory):
        _name = "cGcFrontendPageFunctions::CanInstallTech"
    class DoInventorySlots(HookFactory):
        _name = "cGcFrontendPageFunctions::DoInventorySlots"
    class DoSingleInventorySlot(HookFactory):
        _name = "cGcFrontendPageFunctions::DoSingleInventorySlot"
        _overload: overloads.cGcFrontendPageFunctions.DoSingleInventorySlot.overloads = "cGcFrontendPage *, cGcNGuiLayer *, cGcInventoryStore *, const cGcInventoryIndex *, int, std::vector<enum ePopupAction,TkSTLAllocatorShim<enum ePopupAction,4,-1> > *, bool, bool, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageFunctions.DoSingleInventorySlot.overloads):
            cls._overload = overload_args
            return cls
    class DoTechSlotPopupButtons(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTechSlotPopupButtons"
    class DoTransferPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTransferPopup"
    class DoPopupCategories(HookFactory):
        _name = "cGcFrontendPageFunctions::DoPopupCategories"
    class ShowInventoryOutOfRangeMessage(HookFactory):
        _name = "cGcFrontendPageFunctions::ShowInventoryOutOfRangeMessage"
    class DoTransferSendPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTransferSendPopup"
    class TransferItem(HookFactory):
        _name = "cGcFrontendPageFunctions::TransferItem"
    class DoSlotToInventoryTransfer(HookFactory):
        _name = "cGcFrontendPageFunctions::DoSlotToInventoryTransfer"
    class GetHotSpotTypeForPage(HookFactory):
        _name = "cGcFrontendPageFunctions::GetHotSpotTypeForPage"
    class DoTechChargePopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoTechChargePopup"
    class DoToolbar(HookFactory):
        _name = "cGcFrontendPageFunctions::DoToolbar"
    class PopulateCatagorisedItemInventory(HookFactory):
        _name = "cGcFrontendPageFunctions::PopulateCatagorisedItemInventory"
    class CheckSlotHighlight(HookFactory):
        _name = "cGcFrontendPageFunctions::CheckSlotHighlight"
    class SetEmptySlotBackground(HookFactory):
        _name = "cGcFrontendPageFunctions::SetEmptySlotBackground"
    class DoEmptySlotPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoEmptySlotPopup"
    class DoRepairSlotPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoRepairSlotPopup"
    class DoBuildPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoBuildPopup"
    class DoScrollDots(HookFactory):
        _name = "cGcFrontendPageFunctions::DoScrollDots"
    class DoScrolling_NoPage(HookFactory):
        _name = "cGcFrontendPageFunctions::DoScrolling_NoPage"
    class BuildSelectedItem(HookFactory):
        _name = "cGcFrontendPageFunctions::BuildSelectedItem"
    class DoBuildInfoPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoBuildInfoPopup"
    class DoInventoryTitle(HookFactory):
        _name = "cGcFrontendPageFunctions::DoInventoryTitle"
    class DoModelLocators(HookFactory):
        _name = "cGcFrontendPageFunctions::DoModelLocators"
    class RenderLocatorArms(HookFactory):
        _name = "cGcFrontendPageFunctions::RenderLocatorArms"
    class DoPlayerBanner(HookFactory):
        _name = "cGcFrontendPageFunctions::DoPlayerBanner"
    class DoBanner(HookFactory):
        _name = "cGcFrontendPageFunctions::DoBanner"
    class IsCookingIngredient(HookFactory):
        _name = "cGcFrontendPageFunctions::IsCookingIngredient"
    class GetCreatureEggIndexFromProduct(HookFactory):
        _name = "cGcFrontendPageFunctions::GetCreatureEggIndexFromProduct"
    class DoCreatureEggPopup(HookFactory):
        _name = "cGcFrontendPageFunctions::DoCreatureEggPopup"
    class GenerateCreatureEggText(HookFactory):
        _name = "cGcFrontendPageFunctions::GenerateCreatureEggText"
    class GetExtraEggDescriptions(HookFactory):
        _name = "cGcFrontendPageFunctions::GetExtraEggDescriptions"
    class HandleEggHatchingSuccess(HookFactory):
        _name = "cGcFrontendPageFunctions::HandleEggHatchingSuccess"
    class HandleEggHatchingFailure(HookFactory):
        _name = "cGcFrontendPageFunctions::HandleEggHatchingFailure"
    class DoOnlineStatusBar(HookFactory):
        _name = "cGcFrontendPageFunctions::DoOnlineStatusBar"
    class DoManualTextScrollbox(HookFactory):
        _name = "cGcFrontendPageFunctions::DoManualTextScrollbox"

class cGcCommandLine:
    class GetInstance(HookFactory):
        _name = "cGcCommandLine::GetInstance"
    class ParseArguments(HookFactory):
        _name = "cGcCommandLine::ParseArguments"
    class CreateRegistryKeys(HookFactory):
        _name = "cGcCommandLine::CreateRegistryKeys"

class cGcUniqueIdComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcUniqueIdComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcUniqueIdComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcUniqueIdComponent::DefaultRenderNGui"

class ComponentInstancercGcUniqueIdComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcUniqueIdComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcUniqueIdComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcUniqueIdComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcUniqueIdComponent::DestructInstance"

class cGcFrontendPageOptions:
    class RequestOptionsPage(HookFactory):
        _name = "cGcFrontendPageOptions::RequestOptionsPage"
    class OnSwitchToRemapControls(HookFactory):
        _name = "cGcFrontendPageOptions::OnSwitchToRemapControls"
    class IsUsingMode1Sensitivity(HookFactory):
        _name = "cGcFrontendPageOptions::IsUsingMode1Sensitivity"
    class IsUsingMode2Sensitivity(HookFactory):
        _name = "cGcFrontendPageOptions::IsUsingMode2Sensitivity"
    class ShowPopup(HookFactory):
        _name = "cGcFrontendPageOptions::ShowPopup"
    class HidePopup(HookFactory):
        _name = "cGcFrontendPageOptions::HidePopup"
    class UpdateSensitivityMode(HookFactory):
        _name = "cGcFrontendPageOptions::UpdateSensitivityMode"
    class DoGeneralOptions(HookFactory):
        _name = "cGcFrontendPageOptions::DoGeneralOptions"
    class OnSwitchToOptions(HookFactory):
        _name = "cGcFrontendPageOptions::OnSwitchToOptions"
    class DoSwitcher(HookFactory):
        _name = "cGcFrontendPageOptions::DoSwitcher"
    class PrepareGeneralOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareGeneralOptions"
    class PrepareAccessibilityOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareAccessibilityOptions"
    class PrepareControlsOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareControlsOptions"
    class PrepareCameraOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareCameraOptions"
    class PrepareVideoOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareVideoOptions"
    class PrepareGyroOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareGyroOptions"
    class PrepareSwitcherMenu(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareSwitcherMenu"
    class PrepareBootScreenNetworkOptions(HookFactory):
        _name = "cGcFrontendPageOptions::PrepareBootScreenNetworkOptions"
    class Apply(HookFactory):
        _name = "cGcFrontendPageOptions::Apply"
    class Exit(HookFactory):
        _name = "cGcFrontendPageOptions::Exit"
    class DoCredits(HookFactory):
        _name = "cGcFrontendPageOptions::DoCredits"
    class DoCreditsLine(HookFactory):
        _name = "cGcFrontendPageOptions::DoCreditsLine"
    class DoRedeem(HookFactory):
        _name = "cGcFrontendPageOptions::DoRedeem"
    class DoControlsPC(HookFactory):
        _name = "cGcFrontendPageOptions::DoControlsPC"
    class ShowCredits(HookFactory):
        _name = "cGcFrontendPageOptions::ShowCredits"
    class UnstuckOnFreighter(HookFactory):
        _name = "cGcFrontendPageOptions::UnstuckOnFreighter"
    class ShowControlsPage(HookFactory):
        _name = "cGcFrontendPageOptions::ShowControlsPage"
    class ShowGyroOptions(HookFactory):
        _name = "cGcFrontendPageOptions::ShowGyroOptions"
    class UpdateAvailableResolutions(HookFactory):
        _name = "cGcFrontendPageOptions::UpdateAvailableResolutions"
    class ApplyPreset(HookFactory):
        _name = "cGcFrontendPageOptions::ApplyPreset"
    class UpdateAntialiasingOptions(HookFactory):
        _name = "cGcFrontendPageOptions::UpdateAntialiasingOptions"
    class UpdateAntialiasingSubOptions(HookFactory):
        _name = "cGcFrontendPageOptions::UpdateAntialiasingSubOptions"
    class UpdateDLSSSubOptions(HookFactory):
        _name = "cGcFrontendPageOptions::UpdateDLSSSubOptions"
    class HasEnabledAdvancedGyroOptions(HookFactory):
        _name = "cGcFrontendPageOptions::HasEnabledAdvancedGyroOptions"
    class GyroIsNotAttachedToScreen(HookFactory):
        _name = "cGcFrontendPageOptions::GyroIsNotAttachedToScreen"
    class HasEnabledGyroGameplayOptions(HookFactory):
        _name = "cGcFrontendPageOptions::HasEnabledGyroGameplayOptions"
    class HasEnabledGyroCursorOptions(HookFactory):
        _name = "cGcFrontendPageOptions::HasEnabledGyroCursorOptions"
    class ApplyPreviewAudioVolume(HookFactory):
        _name = "cGcFrontendPageOptions::ApplyPreviewAudioVolume"

class cGcApplicationGameModeSelectorState:
    class SystemCleanUp_PreparePhase(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SystemCleanUp_PreparePhase"
    class Construct(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Prepare"
    class SlotComponents:
        class Resolve(HookFactory):
            _name = "cGcApplicationGameModeSelectorState::SlotComponents::Resolve"
    class WarningDlgComponents:
        class Resolve(HookFactory):
            _name = "cGcApplicationGameModeSelectorState::WarningDlgComponents::Resolve"
    class Release(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Release"
    class LoadAndSetupUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::LoadAndSetupUI"
    class SetupSlotUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupSlotUI"
    class RefreshSlotUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::RefreshSlotUI"
    class SetupModeUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupModeUI"
    class FormatSeasonTimeString(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::FormatSeasonTimeString"
    class ShouldDisplaySeasonHint(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::ShouldDisplaySeasonHint"
    class UpdateSeasonalGameModeUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateSeasonalGameModeUI"
    class SetupMultiplayerUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupMultiplayerUI"
    class SetupCloudSavesUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupCloudSavesUI"
    class SetupStartUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupStartUI"
    class SetupCustomDifficultyUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupCustomDifficultyUI"
    class SetupOptionsUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupOptionsUI"
    class SetupCreditsUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupCreditsUI"
    class SetupRemapControlsUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SetupRemapControlsUI"
    class UnloadAndDiscardUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UnloadAndDiscardUI"
    class FetchSaveDataState(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::FetchSaveDataState"
    class RenderCursor(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::RenderCursor"
    class UpdateMultiplayerFriendsUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateMultiplayerFriendsUI"
    class UpdateManageCloudSavesUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateManageCloudSavesUI"
    class DownloadCloudData(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::DownloadCloudData"
    class DoPatchNotes(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::DoPatchNotes"
    class DoOKCancelDialog(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::DoOKCancelDialog"
    class OnSeasonWarningClosed(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::OnSeasonWarningClosed"
    class UpdateStartUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateStartUI"
    class UpdateCustomDifficultyUI(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateCustomDifficultyUI"
    class SwitchToInLobbyState(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SwitchToInLobbyState"
    class LeaveMultiplayerState(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::LeaveMultiplayerState"
    class CustomIconFX(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::CustomIconFX"
    class Render(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Render"
    class DoUpdateLogicDuringRender(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::DoUpdateLogicDuringRender"
    class UpdateLogicSlotSelect(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateLogicSlotSelect"
    class UpdateSeasonalSlotHover(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateSeasonalSlotHover"
    class RestoreRenderPipeline(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::RestoreRenderPipeline"
    class UpdateLogicModeSelect(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateLogicModeSelect"
    class OnSeasonalDataBecameAvailable(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::OnSeasonalDataBecameAvailable"
    class SwitchToOptions(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::SwitchToOptions"
    class LeaveOptionsScreen(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::LeaveOptionsScreen"
    class UpdateDeletionWarningDlg(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::UpdateDeletionWarningDlg"
    class Update(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Update"
    class RenderWarningMessages(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::RenderWarningMessages"
    class RenderWarning(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::RenderWarning"
    class HasPressedBackOrQuit(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::HasPressedBackOrQuit"
    class Event(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::Event"
    class cGcApplicationGameModeSelectorState(HookFactory):
        _name = "cGcApplicationGameModeSelectorState::cGcApplicationGameModeSelectorState"

class GetLOCGameModeTitle(HookFactory):
    _name = "GetLOCGameModeTitle"

class cGcDifficultySettingsConfirmHandlerBootMenu:
    class DoConfirm(HookFactory):
        _name = "cGcDifficultySettingsConfirmHandlerBootMenu::DoConfirm"

class TkID:
    class SetFromFormat(HookFactory):
        _templates = ("T0", )
        _name = "TkID<{T0}>::SetFromFormat"

class cGcExplosion:
    class cGcDebris:
        class cGcDebris(HookFactory):
            _name = "cGcExplosion::cGcDebris::cGcDebris"
    class SetMatrix(HookFactory):
        _name = "cGcExplosion::SetMatrix"
    class CalculateDistanceScaling(HookFactory):
        _name = "cGcExplosion::CalculateDistanceScaling"
    class Prepare(HookFactory):
        _name = "cGcExplosion::Prepare"
    class DoAreaDamage(HookFactory):
        _name = "cGcExplosion::DoAreaDamage"
    class Update(HookFactory):
        _name = "cGcExplosion::Update"
    class Release(HookFactory):
        _name = "cGcExplosion::Release"
    class IsAlive(HookFactory):
        _name = "cGcExplosion::IsAlive"

class cTkDebugHandler:
    class OutputStyled(HookFactory):
        _templates = ("T0", )
        _name = "cTkDebugHandler::OutputStyled<{T0}>"
    class CloseLogFile(HookFactory):
        _name = "cTkDebugHandler::CloseLogFile"
    class Construct(HookFactory):
        _name = "cTkDebugHandler::Construct"
    class IsDebuggerAttached(HookFactory):
        _name = "cTkDebugHandler::IsDebuggerAttached"
    class OutputString(HookFactory):
        _name = "cTkDebugHandler::OutputString"
    class SetLogFile(HookFactory):
        _name = "cTkDebugHandler::SetLogFile"

class cTkMetaData:
    class ReadFromFile(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaData::ReadFromFile<{T0}>"
    class Async:
        class StartReadFromFileAsync(HookFactory):
            _name = "cTkMetaData::Async::StartReadFromFileAsync"
    class ReadGlobalFromFile(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaData::ReadGlobalFromFile<{T0}>"
    class GetLookup(HookFactory):
        _name = "cTkMetaData::GetLookup"
    class Register(HookFactory):
        _name = "cTkMetaData::Register"
    class RenderClassPointer(HookFactory):
        _name = "cTkMetaData::RenderClassPointer"

class OSDMessage:
    class OSDMessage(HookFactory):
        _name = "OSDMessage::OSDMessage"
        _overload: overloads.OSDMessage.OSDMessage.overloads = "OSDMessage *, const OSDMessage *"
        @classmethod
        def overload(cls, overload_args: overloads.OSDMessage.OSDMessage.overloads):
            cls._overload = overload_args
            return cls

class sPlayerTitleStatWatcher:
    class StatChanged(HookFactory):
        _name = "sPlayerTitleStatWatcher::StatChanged"
        _overload: overloads.sPlayerTitleStatWatcher.StatChanged.overloads = "sPlayerTitleStatWatcher *, const TkID<128> *, __int64"
        @classmethod
        def overload(cls, overload_args: overloads.sPlayerTitleStatWatcher.StatChanged.overloads):
            cls._overload = overload_args
            return cls
    class Prepare(HookFactory):
        _name = "sPlayerTitleStatWatcher::Prepare"

class cGcFiendManagerStandard:
    class CanVirtualise(HookFactory):
        _name = "cGcFiendManagerStandard::CanVirtualise"
    class Construct(HookFactory):
        _name = "cGcFiendManagerStandard::Construct"
    class RenderNGui(HookFactory):
        _name = "cGcFiendManagerStandard::RenderNGui"
    class ActiveFiendCombat(HookFactory):
        _name = "cGcFiendManagerStandard::ActiveFiendCombat"
    class OnTakeControlOfFiend(HookFactory):
        _name = "cGcFiendManagerStandard::OnTakeControlOfFiend"
    class Release(HookFactory):
        _name = "cGcFiendManagerStandard::Release"
    class HandleSpawnEvent(HookFactory):
        _name = "cGcFiendManagerStandard::HandleSpawnEvent"
    class ReportCrime(HookFactory):
        _name = "cGcFiendManagerStandard::ReportCrime"
    class Update(HookFactory):
        _name = "cGcFiendManagerStandard::Update"

class cGcCameraBehaviourInteraction:
    class GetDof(HookFactory):
        _name = "cGcCameraBehaviourInteraction::GetDof"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourInteraction::Prepare"
    class GetInteraction(HookFactory):
        _name = "cGcCameraBehaviourInteraction::GetInteraction"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourInteraction::Update"
    class ReadDofParameters(HookFactory):
        _name = "cGcCameraBehaviourInteraction::ReadDofParameters"
    class UsesFocus(HookFactory):
        _name = "cGcCameraBehaviourInteraction::UsesFocus"
    class CalculateModelRendererCameraMatrix(HookFactory):
        _name = "cGcCameraBehaviourInteraction::CalculateModelRendererCameraMatrix"

class cGcCameraBehaviourFly:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourFly::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourFly::Prepare"
    class ResetStartMatrix(HookFactory):
        _name = "cGcCameraBehaviourFly::ResetStartMatrix"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourFly::Update"
    class Transform(HookFactory):
        _name = "cGcCameraBehaviourFly::Transform"

class cTkCameraManagerTemplate:
    class GetBehaviourIndex(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::GetBehaviourIndex"
    class GetBehaviour(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::GetBehaviour"
    class StartBehaviourUpdate(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::StartBehaviourUpdate"
    class StopBehaviourUpdate(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::StopBehaviourUpdate"
    class SetActiveBehaviour(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::SetActiveBehaviour"
    class DeactivateBehaviour(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::DeactivateBehaviour"
    class ActivateBehaviour(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::ActivateBehaviour"
    class CopyDebugToGame(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::CopyDebugToGame"
    class IsDebugActive(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::IsDebugActive"
    class SetDebugActive(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::SetDebugActive"
    class IsBehaviourActive(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::IsBehaviourActive"
    class GetActiveCamera(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::GetActiveCamera"
    class GetCameraMatrix(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::GetCameraMatrix"
    class Prepare(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::Prepare"
    class GetActiveCameraMatrix(HookFactory):
        _templates = ("T0", )
        _name = "cTkCameraManagerTemplate<{T0}>::GetActiveCameraMatrix"

class cGcFleetExpedition:
    class GetUA(HookFactory):
        _name = "cGcFleetExpedition::GetUA"
    class cGcFleetExpedition(HookFactory):
        _name = "cGcFleetExpedition::cGcFleetExpedition"
        _overload: overloads.cGcFleetExpedition.cGcFleetExpedition.overloads = "cGcFleetExpedition *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFleetExpedition.cGcFleetExpedition.overloads):
            cls._overload = overload_args
            return cls
    class GetOwnerId(HookFactory):
        _name = "cGcFleetExpedition::GetOwnerId"
    class GetPlayerFleetManager(HookFactory):
        _name = "cGcFleetExpedition::GetPlayerFleetManager"
    class Construct(HookFactory):
        _name = "cGcFleetExpedition::Construct"
    class SetTerminalPosition(HookFactory):
        _name = "cGcFleetExpedition::SetTerminalPosition"
    class Save(HookFactory):
        _name = "cGcFleetExpedition::Save"
    class Load(HookFactory):
        _name = "cGcFleetExpedition::Load"
        _overload: overloads.cGcFleetExpedition.Load.overloads = "cGcFleetExpedition *, cGcPlayerFleetManager *, const cGcFleetExpeditionSaveData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFleetExpedition.Load.overloads):
            cls._overload = overload_args
            return cls
    class Invalidate(HookFactory):
        _name = "cGcFleetExpedition::Invalidate"
    class GetPosition(HookFactory):
        _name = "cGcFleetExpedition::GetPosition"
    class AddFrigate(HookFactory):
        _name = "cGcFleetExpedition::AddFrigate"
    class RemoveFrigate(HookFactory):
        _name = "cGcFleetExpedition::RemoveFrigate"
    class IsFrigateDamaged(HookFactory):
        _name = "cGcFleetExpedition::IsFrigateDamaged"
    class OnFrigateDamaged(HookFactory):
        _name = "cGcFleetExpedition::OnFrigateDamaged"
    class SendDamagedFrigateHome(HookFactory):
        _name = "cGcFleetExpedition::SendDamagedFrigateHome"
    class SetPowerup(HookFactory):
        _name = "cGcFleetExpedition::SetPowerup"
    class GetName(HookFactory):
        _name = "cGcFleetExpedition::GetName"
    class SetUA(HookFactory):
        _name = "cGcFleetExpedition::SetUA"
    class GetTimeUntilUAChange(HookFactory):
        _name = "cGcFleetExpedition::GetTimeUntilUAChange"
    class CanAffordToStart(HookFactory):
        _name = "cGcFleetExpedition::CanAffordToStart"
    class GetAverageEventDifficulty(HookFactory):
        _name = "cGcFleetExpedition::GetAverageEventDifficulty"
    class GetStat(HookFactory):
        _name = "cGcFleetExpedition::GetStat"
    class GetExpeditionPredictedDistance(HookFactory):
        _name = "cGcFleetExpedition::GetExpeditionPredictedDistance"
    class ProcessNextEvent(HookFactory):
        _name = "cGcFleetExpedition::ProcessNextEvent"
    class StartExpedition(HookFactory):
        _name = "cGcFleetExpedition::StartExpedition"
    class GiveExpeditionUpgrades(HookFactory):
        _name = "cGcFleetExpedition::GiveExpeditionUpgrades"
    class EndExpedition(HookFactory):
        _name = "cGcFleetExpedition::EndExpedition"
    class HasExpeditionStarted(HookFactory):
        _name = "cGcFleetExpedition::HasExpeditionStarted"
    class IsExpeditionActive(HookFactory):
        _name = "cGcFleetExpedition::IsExpeditionActive"
    class GetTimeRemainingInSeconds(HookFactory):
        _name = "cGcFleetExpedition::GetTimeRemainingInSeconds"
    class GetTimeRemainingUntilNextExpeditionEventInSeconds(HookFactory):
        _name = "cGcFleetExpedition::GetTimeRemainingUntilNextExpeditionEventInSeconds"
    class GetTimeRemainingUntilExpeditionEventInSeconds(HookFactory):
        _name = "cGcFleetExpedition::GetTimeRemainingUntilExpeditionEventInSeconds"
    class GetNumberOfEventsNeedingProcessed(HookFactory):
        _name = "cGcFleetExpedition::GetNumberOfEventsNeedingProcessed"
    class IsWaitingForIntervention(HookFactory):
        _name = "cGcFleetExpedition::IsWaitingForIntervention"
    class GetInterventionEventSeed(HookFactory):
        _name = "cGcFleetExpedition::GetInterventionEventSeed"
    class IsInterventionEvent(HookFactory):
        _name = "cGcFleetExpedition::IsInterventionEvent"
    class GetEventDescription(HookFactory):
        _name = "cGcFleetExpedition::GetEventDescription"
    class GetEventIndex(HookFactory):
        _name = "cGcFleetExpedition::GetEventIndex"
    class GetExpeditionDurationInSeconds(HookFactory):
        _name = "cGcFleetExpedition::GetExpeditionDurationInSeconds"
    class GiveRewards(HookFactory):
        _name = "cGcFleetExpedition::GiveRewards"
    class SetExpeditionTimeRemaining(HookFactory):
        _name = "cGcFleetExpedition::SetExpeditionTimeRemaining"
    class StopWaitingForIntervention(HookFactory):
        _name = "cGcFleetExpedition::StopWaitingForIntervention"

class cTkGraphicsManager:
    class SetMotionBlur(HookFactory):
        _name = "cTkGraphicsManager::SetMotionBlur"
    class SetShadowCascadeMask(HookFactory):
        _name = "cTkGraphicsManager::SetShadowCascadeMask"
    class CalculateNewFov(HookFactory):
        _name = "cTkGraphicsManager::CalculateNewFov"
    class IsConstructed(HookFactory):
        _name = "cTkGraphicsManager::IsConstructed"
    class EnqueueRender(HookFactory):
        _name = "cTkGraphicsManager::EnqueueRender"
    class EnqueueRenderToTexture(HookFactory):
        _name = "cTkGraphicsManager::EnqueueRenderToTexture"
    class GetProjectionMatrix(HookFactory):
        _name = "cTkGraphicsManager::GetProjectionMatrix"
    class GetViewMatrix(HookFactory):
        _name = "cTkGraphicsManager::GetViewMatrix"
    class InFrustum(HookFactory):
        _name = "cTkGraphicsManager::InFrustum"
    class Prepare(HookFactory):
        _name = "cTkGraphicsManager::Prepare"
    class Release(HookFactory):
        _name = "cTkGraphicsManager::Release"
    class ResizeBuffers(HookFactory):
        _name = "cTkGraphicsManager::ResizeBuffers"
    class SetDimensions(HookFactory):
        _name = "cTkGraphicsManager::SetDimensions"
    class Update(HookFactory):
        _name = "cTkGraphicsManager::Update"

class cTk2dImageEx:
    class Destruct(HookFactory):
        _name = "cTk2dImageEx::Destruct"
    class Construct(HookFactory):
        _name = "cTk2dImageEx::Construct"
    class Render(HookFactory):
        _name = "cTk2dImageEx::Render"

class cTkCamera:
    class Transform(HookFactory):
        _name = "cTkCamera::Transform"
    class SetMatrix(HookFactory):
        _name = "cTkCamera::SetMatrix"
    class GetFovAdjustDistance(HookFactory):
        _name = "cTkCamera::GetFovAdjustDistance"
    class Construct(HookFactory):
        _name = "cTkCamera::Construct"
    class SetFOV(HookFactory):
        _name = "cTkCamera::SetFOV"
    class SetFOVFixedDist(HookFactory):
        _name = "cTkCamera::SetFOVFixedDist"

class cGcAIShipSpawn:
    class cGcAIShipSpawn(HookFactory):
        _name = "cGcAIShipSpawn::cGcAIShipSpawn"

class cTkFileSystem:
    class GetInstance(HookFactory):
        _name = "cTkFileSystem::GetInstance"
    class Data:
        class Data(HookFactory):
            _name = "cTkFileSystem::Data::Data"
        class EnumerateBanks(HookFactory):
            _name = "cTkFileSystem::Data::EnumerateBanks"
        class LoadBankInfo(HookFactory):
            _name = "cTkFileSystem::Data::LoadBankInfo"
    class AsyncCallback(HookFactory):
        _name = "cTkFileSystem::AsyncCallback"
    class Close(HookFactory):
        _name = "cTkFileSystem::Close"
    class Construct(HookFactory):
        _name = "cTkFileSystem::Construct"
    class CreatePath(HookFactory):
        _name = "cTkFileSystem::CreatePath"
    class DestroyFileCache(HookFactory):
        _name = "cTkFileSystem::DestroyFileCache"
    class DoesFileExist(HookFactory):
        _name = "cTkFileSystem::DoesFileExist"
    class EnumerateDirectory(HookFactory):
        _name = "cTkFileSystem::EnumerateDirectory"
    class FreeAsyncOp(HookFactory):
        _name = "cTkFileSystem::FreeAsyncOp"
    class GetFileSize(HookFactory):
        _name = "cTkFileSystem::GetFileSize"
        _overload: overloads.cTkFileSystem.GetFileSize.overloads = "cTkFileSystem *, FIOS2HANDLE *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkFileSystem.GetFileSize.overloads):
            cls._overload = overload_args
            return cls
    class IsModded(HookFactory):
        _name = "cTkFileSystem::IsModded"
    class IsTampered(HookFactory):
        _name = "cTkFileSystem::IsTampered"
    class NormalisePath(HookFactory):
        _name = "cTkFileSystem::NormalisePath"
    class Open(HookFactory):
        _name = "cTkFileSystem::Open"
    class Read(HookFactory):
        _name = "cTkFileSystem::Read"
    class ReadFromPath(HookFactory):
        _name = "cTkFileSystem::ReadFromPath"
    class ReadFromPathAsync(HookFactory):
        _name = "cTkFileSystem::ReadFromPathAsync"
    class RegisterAsyncOpCompletionCallback(HookFactory):
        _name = "cTkFileSystem::RegisterAsyncOpCompletionCallback"
    class Seek(HookFactory):
        _name = "cTkFileSystem::Seek"
    class SetFileCache(HookFactory):
        _name = "cTkFileSystem::SetFileCache"
    class Tell(HookFactory):
        _name = "cTkFileSystem::Tell"
    class Write(HookFactory):
        _name = "cTkFileSystem::Write"

class cTkTimeManager:
    class GetLocalTimeStep(HookFactory):
        _name = "cTkTimeManager::GetLocalTimeStep"
    class Update(HookFactory):
        _name = "cTkTimeManager::Update"
    class GetGlobalTimeStep(HookFactory):
        _name = "cTkTimeManager::GetGlobalTimeStep"
    class SetBaseUTCTimeMilliseconds(HookFactory):
        _name = "cTkTimeManager::SetBaseUTCTimeMilliseconds"
    class UpdateServerTime(HookFactory):
        _name = "cTkTimeManager::UpdateServerTime"
    class UpdateUTCTime(HookFactory):
        _name = "cTkTimeManager::UpdateUTCTime"

class cTkInputPort:
    class GetCurrentInputDeviceType(HookFactory):
        _name = "cTkInputPort::GetCurrentInputDeviceType"
    class cTkInputPort(HookFactory):
        _name = "cTkInputPort::cTkInputPort"
    class AddBindings(HookFactory):
        _name = "cTkInputPort::AddBindings"
        _overload: overloads.cTkInputPort.AddBindings.overloads = "cTkInputPort *, eInputButtonType, ePadType, ITkInputDevice *, int, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputPort.AddBindings.overloads):
            cls._overload = overload_args
            return cls
    class AddDevice(HookFactory):
        _name = "cTkInputPort::AddDevice"
    class AreActionsBoundToTheSameButton(HookFactory):
        _name = "cTkInputPort::AreActionsBoundToTheSameButton"
    class Clear(HookFactory):
        _name = "cTkInputPort::Clear"
    class EnableDevice(HookFactory):
        _name = "cTkInputPort::EnableDevice"
    class GetActiveActionSetName(HookFactory):
        _name = "cTkInputPort::GetActiveActionSetName"
    class GetAxis(HookFactory):
        _name = "cTkInputPort::GetAxis"
    class GetButton(HookFactory):
        _name = "cTkInputPort::GetButton"
    class GetIconFromButton(HookFactory):
        _name = "cTkInputPort::GetIconFromButton"
    class GetMousePosition(HookFactory):
        _name = "cTkInputPort::GetMousePosition"
    class InjectAnalogueAction(HookFactory):
        _name = "cTkInputPort::InjectAnalogueAction"
    class InjectDigitalAction(HookFactory):
        _name = "cTkInputPort::InjectDigitalAction"
    class MonitorAxes(HookFactory):
        _name = "cTkInputPort::MonitorAxes"
    class MonitorButtons(HookFactory):
        _name = "cTkInputPort::MonitorButtons"
    class RemoveDevice(HookFactory):
        _name = "cTkInputPort::RemoveDevice"
    class SetAxis(HookFactory):
        _name = "cTkInputPort::SetAxis"
    class SetButton(HookFactory):
        _name = "cTkInputPort::SetButton"
    class SetCustomisation(HookFactory):
        _name = "cTkInputPort::SetCustomisation"
    class SetDeviceTransform(HookFactory):
        _name = "cTkInputPort::SetDeviceTransform"
    class SetMotionData(HookFactory):
        _name = "cTkInputPort::SetMotionData"
    class SwitchActionSet(HookFactory):
        _name = "cTkInputPort::SwitchActionSet"
    class Update(HookFactory):
        _name = "cTkInputPort::Update"

class cGcMatchmaking:
    class Session:
        class IsOwner(HookFactory):
            _name = "cGcMatchmaking::Session::IsOwner"
        class GetPlayer(HookFactory):
            _name = "cGcMatchmaking::Session::GetPlayer"
        class Reset(HookFactory):
            _name = "cGcMatchmaking::Session::Reset"
        class GetPlayerUa(HookFactory):
            _name = "cGcMatchmaking::Session::GetPlayerUa"
        class GetMaxPlayerCount(HookFactory):
            _name = "cGcMatchmaking::Session::GetMaxPlayerCount"
        class LeaveSession(HookFactory):
            _name = "cGcMatchmaking::Session::LeaveSession"
        class Update(HookFactory):
            _name = "cGcMatchmaking::Session::Update"
        class RegisterOtherSession(HookFactory):
            _name = "cGcMatchmaking::Session::RegisterOtherSession"
        class Leave(HookFactory):
            _name = "cGcMatchmaking::Session::Leave"
        class SetOwner(HookFactory):
            _name = "cGcMatchmaking::Session::SetOwner"
    class cGcMatchmaking(HookFactory):
        _name = "cGcMatchmaking::cGcMatchmaking"
    class Construct(HookFactory):
        _name = "cGcMatchmaking::Construct"
    class Update(HookFactory):
        _name = "cGcMatchmaking::Update"
    class ProcessInvites(HookFactory):
        _name = "cGcMatchmaking::ProcessInvites"
    class GetNotificationMessage(HookFactory):
        _name = "cGcMatchmaking::GetNotificationMessage"
    class IsInGame(HookFactory):
        _name = "cGcMatchmaking::IsInGame"
    class OnInviteQuitDialog(HookFactory):
        _name = "cGcMatchmaking::OnInviteQuitDialog"
    class ResetAll(HookFactory):
        _name = "cGcMatchmaking::ResetAll"
    class Connect(HookFactory):
        _name = "cGcMatchmaking::Connect"
    class JoinInvite(HookFactory):
        _name = "cGcMatchmaking::JoinInvite"
    class GetFullSimLobbyIDHash(HookFactory):
        _name = "cGcMatchmaking::GetFullSimLobbyIDHash"
    class AllowGameplayLobby(HookFactory):
        _name = "cGcMatchmaking::AllowGameplayLobby"
    class IsReadyToLoad(HookFactory):
        _name = "cGcMatchmaking::IsReadyToLoad"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcMatchmaking::OnNetworkPlayerStateEvent"
    class OnRequestPermissionCreateLobby(HookFactory):
        _name = "cGcMatchmaking::OnRequestPermissionCreateLobby"
    class SendRequestPermissionCreateLobby(HookFactory):
        _name = "cGcMatchmaking::SendRequestPermissionCreateLobby"
    class JoinFireteam(HookFactory):
        _name = "cGcMatchmaking::JoinFireteam"
    class AddBadLobby(HookFactory):
        _name = "cGcMatchmaking::AddBadLobby"
    class OnRemoteKickRequest(HookFactory):
        _name = "cGcMatchmaking::OnRemoteKickRequest"
    class KickPlayer(HookFactory):
        _name = "cGcMatchmaking::KickPlayer"
    class OnRemoteInviteToFireteamRequest(HookFactory):
        _name = "cGcMatchmaking::OnRemoteInviteToFireteamRequest"
    class InviteToFireteam(HookFactory):
        _name = "cGcMatchmaking::InviteToFireteam"
    class OnRemoteRefuseInviteToFireteam(HookFactory):
        _name = "cGcMatchmaking::OnRemoteRefuseInviteToFireteam"
    class RefuseInviteToFireteam(HookFactory):
        _name = "cGcMatchmaking::RefuseInviteToFireteam"
    class OnRemoteRequestAddFriend(HookFactory):
        _name = "cGcMatchmaking::OnRemoteRequestAddFriend"
    class ReplyToRequestAddFriend(HookFactory):
        _name = "cGcMatchmaking::ReplyToRequestAddFriend"
    class OnRemoteReplyToRequestAddFriend(HookFactory):
        _name = "cGcMatchmaking::OnRemoteReplyToRequestAddFriend"
    class UpdateFullSimPrivileges(HookFactory):
        _name = "cGcMatchmaking::UpdateFullSimPrivileges"
    class IsInFullSimLobby(HookFactory):
        _name = "cGcMatchmaking::IsInFullSimLobby"
    class GetExtraFriendsString(HookFactory):
        _name = "cGcMatchmaking::GetExtraFriendsString"
    class Release(HookFactory):
        _name = "cGcMatchmaking::Release"
    class Prepare(HookFactory):
        _name = "cGcMatchmaking::Prepare"

class cGcNGuiLayer:
    class FindTextSpecialRecursive(HookFactory):
        _name = "cGcNGuiLayer::FindTextSpecialRecursive"
    class FindGraphicRecursive(HookFactory):
        _name = "cGcNGuiLayer::FindGraphicRecursive"
    class AddElementAt(HookFactory):
        _name = "cGcNGuiLayer::AddElementAt"
    class FindTextRecursive(HookFactory):
        _name = "cGcNGuiLayer::FindTextRecursive"
    class GetGraphic(HookFactory):
        _name = "cGcNGuiLayer::GetGraphic"
    class FindElementRecursive(HookFactory):
        _name = "cGcNGuiLayer::FindElementRecursive"
    class GetLayer(HookFactory):
        _name = "cGcNGuiLayer::GetLayer"
    class GetText(HookFactory):
        _name = "cGcNGuiLayer::GetText"
    class GetTextSpecial(HookFactory):
        _name = "cGcNGuiLayer::GetTextSpecial"
    class cGcNGuiLayer(HookFactory):
        _name = "cGcNGuiLayer::cGcNGuiLayer"
    class SelectableInEditor(HookFactory):
        _name = "cGcNGuiLayer::SelectableInEditor"
    class Deselect(HookFactory):
        _name = "cGcNGuiLayer::Deselect"
    class Resized(HookFactory):
        _name = "cGcNGuiLayer::Resized"
    class AttachMetadata(HookFactory):
        _name = "cGcNGuiLayer::AttachMetadata"
    class DeallocateLayerChildrenRecursive(HookFactory):
        _name = "cGcNGuiLayer::DeallocateLayerChildrenRecursive"
    class DetachMetadata(HookFactory):
        _name = "cGcNGuiLayer::DetachMetadata"
    class GetSceneTreeIcon(HookFactory):
        _name = "cGcNGuiLayer::GetSceneTreeIcon"
    class GetSelected(HookFactory):
        _name = "cGcNGuiLayer::GetSelected"
    class RemoveAllElements(HookFactory):
        _name = "cGcNGuiLayer::RemoveAllElements"
    class AddElement(HookFactory):
        _name = "cGcNGuiLayer::AddElement"
    class GetSceneTreeText(HookFactory):
        _name = "cGcNGuiLayer::GetSceneTreeText"
    class RenderAdditionalOverlayIcons(HookFactory):
        _name = "cGcNGuiLayer::RenderAdditionalOverlayIcons"
    class SetNeedsUpdate(HookFactory):
        _name = "cGcNGuiLayer::SetNeedsUpdate"
    class Render(HookFactory):
        _name = "cGcNGuiLayer::Render"
    class EditElement(HookFactory):
        _name = "cGcNGuiLayer::EditElement"
    class TogglePinChildren(HookFactory):
        _name = "cGcNGuiLayer::TogglePinChildren"
    class LoadFromMetadata(HookFactory):
        _name = "cGcNGuiLayer::LoadFromMetadata"
    class MoveElementUndoable(HookFactory):
        _name = "cGcNGuiLayer::MoveElementUndoable"
    class SetData(HookFactory):
        _name = "cGcNGuiLayer::SetData"
    class ConvertText(HookFactory):
        _name = "cGcNGuiLayer::ConvertText"
        _overload: overloads.cGcNGuiLayer.ConvertText.overloads = "cGcNGuiLayer *, cGcNGuiText *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNGuiLayer.ConvertText.overloads):
            cls._overload = overload_args
            return cls
    class AddAfterElement(HookFactory):
        _name = "cGcNGuiLayer::AddAfterElement"
    class GatherExternals(HookFactory):
        _name = "cGcNGuiLayer::GatherExternals"

class ModeSelectorPhase:
    class GetNext(HookFactory):
        _name = "ModeSelectorPhase::GetNext"

class cGcNetworkConstants:
    class GetOnlinePlatformIconName(HookFactory):
        _name = "cGcNetworkConstants::GetOnlinePlatformIconName"
    class GetOnlinePlatformName(HookFactory):
        _name = "cGcNetworkConstants::GetOnlinePlatformName"
    class GetOnlinePlatform(HookFactory):
        _name = "cGcNetworkConstants::GetOnlinePlatform"

class cTk2dRectangle:
    class Render(HookFactory):
        _name = "cTk2dRectangle::Render"
    class Construct(HookFactory):
        _name = "cTk2dRectangle::Construct"

class cTkTrig:
    class Sin(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Sin"
    class Cos(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Cos"
    class Log2(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Log2"
    class Log(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Log"
    class Exp2(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Exp2"
    class Exp(HookFactory):
        _templates = ("T0", )
        _name = "cTkTrig<{T0}>::Exp"

class cGcNGuiManager:
    class ScopedScaleChange:
        class ScopedScaleChange(HookFactory):
            _name = "cGcNGuiManager::ScopedScaleChange::ScopedScaleChange"
            _overload: overloads.cGcNGuiManager.ScopedScaleChange.ScopedScaleChange.overloads = "cGcNGuiManager::ScopedScaleChange *, float, __int64"
            @classmethod
            def overload(cls, overload_args: overloads.cGcNGuiManager.ScopedScaleChange.ScopedScaleChange.overloads):
                cls._overload = overload_args
                return cls
    class Update(HookFactory):
        _name = "cGcNGuiManager::Update"
    class Render2D(HookFactory):
        _name = "cGcNGuiManager::Render2D"
    class BeginFrame(HookFactory):
        _name = "cGcNGuiManager::BeginFrame"
        _overload: overloads.cGcNGuiManager.BeginFrame.overloads = "cGcNGuiManager *, cTkNGuiInput *, bool, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNGuiManager.BeginFrame.overloads):
            cls._overload = overload_args
            return cls
    class EndFrame(HookFactory):
        _name = "cGcNGuiManager::EndFrame"
    class CentreCursor(HookFactory):
        _name = "cGcNGuiManager::CentreCursor"
    class DoColourUtils(HookFactory):
        _name = "cGcNGuiManager::DoColourUtils"
    class BeginInput(HookFactory):
        _name = "cGcNGuiManager::BeginInput"
    class EndInput(HookFactory):
        _name = "cGcNGuiManager::EndInput"

class cTkFontFile:
    class Size(HookFactory):
        _name = "cTkFontFile::Size"
    class Close(HookFactory):
        _name = "cTkFontFile::Close"
    class Construct(HookFactory):
        _name = "cTkFontFile::Construct"
    class IsBinary(HookFactory):
        _name = "cTkFontFile::IsBinary"
    class ReachedEndOfFile(HookFactory):
        _name = "cTkFontFile::ReachedEndOfFile"
    class Read(HookFactory):
        _name = "cTkFontFile::Read"

class cGcTerrainRegionMap:
    class AreUpgradeListsEmpty(HookFactory):
        _name = "cGcTerrainRegionMap::AreUpgradeListsEmpty"
    class IsRegionPointerTemporary(HookFactory):
        _name = "cGcTerrainRegionMap::IsRegionPointerTemporary"
    class cGcTerrainRegionMap(HookFactory):
        _name = "cGcTerrainRegionMap::cGcTerrainRegionMap"
    class Construct(HookFactory):
        _name = "cGcTerrainRegionMap::Construct"
    class GetHeightAtPosition(HookFactory):
        _name = "cGcTerrainRegionMap::GetHeightAtPosition"
    class HasLodReachedState(HookFactory):
        _name = "cGcTerrainRegionMap::HasLodReachedState"
    class IsLodFinishedHiding(HookFactory):
        _name = "cGcTerrainRegionMap::IsLodFinishedHiding"
    class RefreshRegions(HookFactory):
        _name = "cGcTerrainRegionMap::RefreshRegions"
    class SearchOctreeForRegions(HookFactory):
        _name = "cGcTerrainRegionMap::SearchOctreeForRegions"
    class SearchOctree(HookFactory):
        _name = "cGcTerrainRegionMap::SearchOctree"
    class AreAnyRegionsProcesing(HookFactory):
        _name = "cGcTerrainRegionMap::AreAnyRegionsProcesing"
    class ClearAll(HookFactory):
        _name = "cGcTerrainRegionMap::ClearAll"
    class SetActiveLods(HookFactory):
        _name = "cGcTerrainRegionMap::SetActiveLods"
    class PollToClearRegionsForLOD(HookFactory):
        _name = "cGcTerrainRegionMap::PollToClearRegionsForLOD"
    class CalculateRegionNormal(HookFactory):
        _name = "cGcTerrainRegionMap::CalculateRegionNormal"
    class SubdivideNode(HookFactory):
        _name = "cGcTerrainRegionMap::SubdivideNode"
    class ClearOctree(HookFactory):
        _name = "cGcTerrainRegionMap::ClearOctree"
    class BuildOctree(HookFactory):
        _name = "cGcTerrainRegionMap::BuildOctree"
    class FindPersistingRegionsOnThread(HookFactory):
        _name = "cGcTerrainRegionMap::FindPersistingRegionsOnThread"
    class FindPersistingRegionsJobFunc(HookFactory):
        _name = "cGcTerrainRegionMap::FindPersistingRegionsJobFunc"
    class AssignNewRegions(HookFactory):
        _name = "cGcTerrainRegionMap::AssignNewRegions"
    class UpdateOctreeFromStubs(HookFactory):
        _name = "cGcTerrainRegionMap::UpdateOctreeFromStubs"
    class CopyRegionStubs(HookFactory):
        _name = "cGcTerrainRegionMap::CopyRegionStubs"
    class CalculateRegionDistances(HookFactory):
        _name = "cGcTerrainRegionMap::CalculateRegionDistances"
    class CreateRegionList(HookFactory):
        _name = "cGcTerrainRegionMap::CreateRegionList"
    class GetCentre(HookFactory):
        _name = "cGcTerrainRegionMap::GetCentre"
    class cTkRegionStub:
        class cTkRegionStub(HookFactory):
            _name = "cGcTerrainRegionMap::cTkRegionStub::cTkRegionStub"
    class UpdateGenerator(HookFactory):
        _name = "cGcTerrainRegionMap::UpdateGenerator"
    class PauseGeneration(HookFactory):
        _name = "cGcTerrainRegionMap::PauseGeneration"
    class CalculateRegionHeights(HookFactory):
        _name = "cGcTerrainRegionMap::CalculateRegionHeights"
    class GenerateRegionStateMachine(HookFactory):
        _name = "cGcTerrainRegionMap::GenerateRegionStateMachine"
    class KickUpdateJobs(HookFactory):
        _name = "cGcTerrainRegionMap::KickUpdateJobs"
    class Update(HookFactory):
        _name = "cGcTerrainRegionMap::Update"
    class AreChildrenRenderable(HookFactory):
        _name = "cGcTerrainRegionMap::AreChildrenRenderable"
    class AreSiblingsRenderable(HookFactory):
        _name = "cGcTerrainRegionMap::AreSiblingsRenderable"
    class AreChildrenRenderableJobFunc(HookFactory):
        _name = "cGcTerrainRegionMap::AreChildrenRenderableJobFunc"
    class AreSiblingsRenderableJobFunc(HookFactory):
        _name = "cGcTerrainRegionMap::AreSiblingsRenderableJobFunc"
    class TransferArray(HookFactory):
        _templates = ("T0", )
        _name = "cGcTerrainRegionMap::TransferArray<{T0}>"
    class AllocateArray(HookFactory):
        _templates = ("T0", )
        _name = "cGcTerrainRegionMap::AllocateArray<{T0}>"
    class DeallocateArray(HookFactory):
        _templates = ("T0", )
        _name = "cGcTerrainRegionMap::DeallocateArray<{T0}>"

class cTkLockFreeQueue:
    class IsEmpty(HookFactory):
        _templates = ("T0", )
        _name = "cTkLockFreeQueue<{T0}>::IsEmpty"
    class Pop(HookFactory):
        _templates = ("T0", )
        _name = "cTkLockFreeQueue<{T0}>::Pop"
    class Push(HookFactory):
        _templates = ("T0", )
        _name = "cTkLockFreeQueue<{T0}>::Push"

class cTkDependencyCounter:
    class Increment(HookFactory):
        _name = "cTkDependencyCounter::Increment"
    class Decrement(HookFactory):
        _name = "cTkDependencyCounter::Decrement"

class cTkJobManager:
    class RunAllJobsInQueue(HookFactory):
        _name = "cTkJobManager::RunAllJobsInQueue"
    class WakeAllThreadsInGroup(HookFactory):
        _name = "cTkJobManager::WakeAllThreadsInGroup"
    class WakeAllThreadsForQueue(HookFactory):
        _name = "cTkJobManager::WakeAllThreadsForQueue"
    class CreateFence(HookFactory):
        _name = "cTkJobManager::CreateFence"
    class CreateJob(HookFactory):
        _name = "cTkJobManager::CreateJob"
    class CreateSuspendableJob(HookFactory):
        _name = "cTkJobManager::CreateSuspendableJob"
    class DefaultJobSuspendedFunction(HookFactory):
        _name = "cTkJobManager::DefaultJobSuspendedFunction"
    class ExecuteJob(HookFactory):
        _name = "cTkJobManager::ExecuteJob"
    class GetJob(HookFactory):
        _name = "cTkJobManager::GetJob"
    class HasJobCompleted(HookFactory):
        _name = "cTkJobManager::HasJobCompleted"
    class Init(HookFactory):
        _name = "cTkJobManager::Init"
    class ReAddSuspendedJob(HookFactory):
        _name = "cTkJobManager::ReAddSuspendedJob"
    class RunOnEveryThread(HookFactory):
        _name = "cTkJobManager::RunOnEveryThread"
    class RunOneJobFromGroup(HookFactory):
        _name = "cTkJobManager::RunOneJobFromGroup"
    class Shutdown(HookFactory):
        _name = "cTkJobManager::Shutdown"
    class ShutdownHavokAllocators(HookFactory):
        _name = "cTkJobManager::ShutdownHavokAllocators"
    class SuspendJob(HookFactory):
        _name = "cTkJobManager::SuspendJob"
        _overload: overloads.cTkJobManager.SuspendJob.overloads = "__int64 *, void *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkJobManager.SuspendJob.overloads):
            cls._overload = overload_args
            return cls
    class SwitchToQueue(HookFactory):
        _name = "cTkJobManager::SwitchToQueue"
    class ThreadWorker(HookFactory):
        _name = "cTkJobManager::ThreadWorker"
    class WaitForQueue(HookFactory):
        _name = "cTkJobManager::WaitForQueue"

class cGcScanEventManager:
    class GetFullEventStack(HookFactory):
        _name = "cGcScanEventManager::GetFullEventStack"
    class GetActiveEvent(HookFactory):
        _name = "cGcScanEventManager::GetActiveEvent"
        _overload: overloads.cGcScanEventManager.GetActiveEvent.overloads = "cGcScanEventManager *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcScanEventManager.GetActiveEvent.overloads):
            cls._overload = overload_args
            return cls
    class GetEventData(HookFactory):
        _name = "cGcScanEventManager::GetEventData"
        _overload: overloads.cGcScanEventManager.GetEventData.overloads = "cGcScanEventManager *, const TkID<256> *, eScanTable"
        @classmethod
        def overload(cls, overload_args: overloads.cGcScanEventManager.GetEventData.overloads):
            cls._overload = overload_args
            return cls
    class GetEventUA(HookFactory):
        _name = "cGcScanEventManager::GetEventUA"
    class CollectInterstellarEvents(HookFactory):
        _name = "cGcScanEventManager::CollectInterstellarEvents"
    class HasEvent(HookFactory):
        _name = "cGcScanEventManager::HasEvent"
    class ClearMissionEvents(HookFactory):
        _name = "cGcScanEventManager::ClearMissionEvents"
        _overload: overloads.cGcScanEventManager.ClearMissionEvents.overloads = "cGcScanEventManager *, const std::vector<std::pair<TkID<128>,cTkSeed>,TkSTLAllocatorShim<std::pair<TkID<128>,cTkSeed>,8,-1> > *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcScanEventManager.ClearMissionEvents.overloads):
            cls._overload = overload_args
            return cls
    class GetEventUAFromMission(HookFactory):
        _name = "cGcScanEventManager::GetEventUAFromMission"
    class AddEvent(HookFactory):
        _name = "cGcScanEventManager::AddEvent"
        _overload: overloads.cGcScanEventManager.AddEvent.overloads = "cGcScanEventManager *, cGcScanEventManager::AddEventResult *, eScanTable, const TkID<256> *, float, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcScanEventManager.AddEvent.overloads):
            cls._overload = overload_args
            return cls
    class LookupBuildingEvent(HookFactory):
        _name = "cGcScanEventManager::LookupBuildingEvent"
    class HasActiveMarkerType(HookFactory):
        _name = "cGcScanEventManager::HasActiveMarkerType"
    class Construct(HookFactory):
        _name = "cGcScanEventManager::Construct"
    class LoadMarkerIcons(HookFactory):
        _name = "cGcScanEventManager::LoadMarkerIcons"
    class Prepare(HookFactory):
        _name = "cGcScanEventManager::Prepare"
    class Update(HookFactory):
        _name = "cGcScanEventManager::Update"
    class CheckForBuildingEvent(HookFactory):
        _name = "cGcScanEventManager::CheckForBuildingEvent"
    class CheckForInteractionEvent(HookFactory):
        _name = "cGcScanEventManager::CheckForInteractionEvent"
    class CheckForTimedScanEvent(HookFactory):
        _name = "cGcScanEventManager::CheckForTimedScanEvent"
    class AddVehicleScanEvent(HookFactory):
        _name = "cGcScanEventManager::AddVehicleScanEvent"
    class GetVehicleScanTable(HookFactory):
        _name = "cGcScanEventManager::GetVehicleScanTable"
    class IsBuildingUsedInEvent(HookFactory):
        _name = "cGcScanEventManager::IsBuildingUsedInEvent"
    class FindInterstellarEvent(HookFactory):
        _name = "cGcScanEventManager::FindInterstellarEvent"
    class FindWeekendInterstellarEvent(HookFactory):
        _name = "cGcScanEventManager::FindWeekendInterstellarEvent"
    class FindInterstellarEventStepped(HookFactory):
        _name = "cGcScanEventManager::FindInterstellarEventStepped"
    class FindAndAddInterstellarEvent(HookFactory):
        _name = "cGcScanEventManager::FindAndAddInterstellarEvent"
    class FindAndAddInterstellarEventStepped(HookFactory):
        _name = "cGcScanEventManager::FindAndAddInterstellarEventStepped"
    class RestartEventsWithForcedInteraction(HookFactory):
        _name = "cGcScanEventManager::RestartEventsWithForcedInteraction"
    class RestartEventsWithBuildingType(HookFactory):
        _name = "cGcScanEventManager::RestartEventsWithBuildingType"
    class RestartFreighterEvents(HookFactory):
        _name = "cGcScanEventManager::RestartFreighterEvents"
    class AddInterstellarEvent(HookFactory):
        _name = "cGcScanEventManager::AddInterstellarEvent"
    class CheckInterstellarEvent(HookFactory):
        _name = "cGcScanEventManager::CheckInterstellarEvent"
    class GetBuilding(HookFactory):
        _name = "cGcScanEventManager::GetBuilding"
    class PassesPlanetChecks(HookFactory):
        _name = "cGcScanEventManager::PassesPlanetChecks"
    class PassesPlanetInfoChecks(HookFactory):
        _name = "cGcScanEventManager::PassesPlanetInfoChecks"
    class WriteMarkerStack(HookFactory):
        _name = "cGcScanEventManager::WriteMarkerStack"
    class WriteEventToSave(HookFactory):
        _name = "cGcScanEventManager::WriteEventToSave"
    class RemovingEvent(HookFactory):
        _name = "cGcScanEventManager::RemovingEvent"
    class RemovingFullStackEvent(HookFactory):
        _name = "cGcScanEventManager::RemovingFullStackEvent"
    class SyncEvents(HookFactory):
        _name = "cGcScanEventManager::SyncEvents"
    class AddScanEventBuilding(HookFactory):
        _name = "cGcScanEventManager::AddScanEventBuilding"
    class SendSyncScanEventRequest(HookFactory):
        _name = "cGcScanEventManager::SendSyncScanEventRequest"
    class IsPending(HookFactory):
        _name = "cGcScanEventManager::IsPending"
    class ReadMarkerStack(HookFactory):
        _name = "cGcScanEventManager::ReadMarkerStack"
    class RerollMarkerStack(HookFactory):
        _name = "cGcScanEventManager::RerollMarkerStack"
    class TryRewriteParticipant(HookFactory):
        _name = "cGcScanEventManager::TryRewriteParticipant"
    class AddRerolledEvent(HookFactory):
        _name = "cGcScanEventManager::AddRerolledEvent"
    class AddEventFromFullStack(HookFactory):
        _name = "cGcScanEventManager::AddEventFromFullStack"
    class GetDistanceFromEvent(HookFactory):
        _name = "cGcScanEventManager::GetDistanceFromEvent"
    class EndEvent(HookFactory):
        _name = "cGcScanEventManager::EndEvent"
    class CanStartTimeScanEvent(HookFactory):
        _name = "cGcScanEventManager::CanStartTimeScanEvent"
    class IsValidAbandonedSystemInteraction(HookFactory):
        _name = "cGcScanEventManager::IsValidAbandonedSystemInteraction"
    class SteppedInterstellarSearch:
        class Step(HookFactory):
            _name = "cGcScanEventManager::SteppedInterstellarSearch::Step"
    class MissionHasAnyActiveEvents(HookFactory):
        _name = "cGcScanEventManager::MissionHasAnyActiveEvents"
    class RemoveAllEventsByTable(HookFactory):
        _name = "cGcScanEventManager::RemoveAllEventsByTable"
    class CheckForNextEvent(HookFactory):
        _name = "cGcScanEventManager::CheckForNextEvent"

class cGcSolarSystem:
    class SetLoading(HookFactory):
        _name = "cGcSolarSystem::SetLoading"
    class InPlanetRange(HookFactory):
        _name = "cGcSolarSystem::InPlanetRange"
        _overload: overloads.cGcSolarSystem.InPlanetRange.overloads = "cGcSolarSystem *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcSolarSystem.InPlanetRange.overloads):
            cls._overload = overload_args
            return cls
    class GetNexusExterior(HookFactory):
        _name = "cGcSolarSystem::GetNexusExterior"
    class GetPlanetWritable(HookFactory):
        _name = "cGcSolarSystem::GetPlanetWritable"
    class GetNearestPlanetWritable(HookFactory):
        _name = "cGcSolarSystem::GetNearestPlanetWritable"
    class GetNearestPlanet(HookFactory):
        _name = "cGcSolarSystem::GetNearestPlanet"
    class GetPlanetGenerator(HookFactory):
        _name = "cGcSolarSystem::GetPlanetGenerator"
    class GetAnomalyType(HookFactory):
        _name = "cGcSolarSystem::GetAnomalyType"
    class GetSpaceStationSphere(HookFactory):
        _name = "cGcSolarSystem::GetSpaceStationSphere"
    class GetSystemGenerator(HookFactory):
        _name = "cGcSolarSystem::GetSystemGenerator"
    class GetSpaceStationEntranceTM(HookFactory):
        _name = "cGcSolarSystem::GetSpaceStationEntranceTM"
    class GetAnomaly(HookFactory):
        _name = "cGcSolarSystem::GetAnomaly"
    class GetNexusExteriorTeleportNode(HookFactory):
        _name = "cGcSolarSystem::GetNexusExteriorTeleportNode"
    class GetNexus(HookFactory):
        _name = "cGcSolarSystem::GetNexus"
    class GetNexusEntranceTM(HookFactory):
        _name = "cGcSolarSystem::GetNexusEntranceTM"
    class IsNexusLoaded(HookFactory):
        _name = "cGcSolarSystem::IsNexusLoaded"
    class cGcSolarSystem(HookFactory):
        _name = "cGcSolarSystem::cGcSolarSystem"
    class GetAnomalySphere(HookFactory):
        _name = "cGcSolarSystem::GetAnomalySphere"
    class Construct(HookFactory):
        _name = "cGcSolarSystem::Construct"
    class PollToPrepare(HookFactory):
        _name = "cGcSolarSystem::PollToPrepare"
    class PreloadCommonResources(HookFactory):
        _name = "cGcSolarSystem::PreloadCommonResources"
    class Update(HookFactory):
        _name = "cGcSolarSystem::Update"
    class UpdatePlanets(HookFactory):
        _name = "cGcSolarSystem::UpdatePlanets"
    class UpdateRender(HookFactory):
        _name = "cGcSolarSystem::UpdateRender"
    class CanRelease(HookFactory):
        _name = "cGcSolarSystem::CanRelease"
    class Release(HookFactory):
        _name = "cGcSolarSystem::Release"
    class Generate(HookFactory):
        _name = "cGcSolarSystem::Generate"
    class PollPostPlanetGeneration(HookFactory):
        _name = "cGcSolarSystem::PollPostPlanetGeneration"
    class DeferredCreateSpaceStation(HookFactory):
        _name = "cGcSolarSystem::DeferredCreateSpaceStation"
    class DeferredCreateNexusExterior(HookFactory):
        _name = "cGcSolarSystem::DeferredCreateNexusExterior"
    class DeferredCreateNexus(HookFactory):
        _name = "cGcSolarSystem::DeferredCreateNexus"
    class DeferredCreateBaseBuilding(HookFactory):
        _name = "cGcSolarSystem::DeferredCreateBaseBuilding"
    class ChangePrimaryPlanet(HookFactory):
        _name = "cGcSolarSystem::ChangePrimaryPlanet"
    class RequestPrimaryPlanetChange(HookFactory):
        _name = "cGcSolarSystem::RequestPrimaryPlanetChange"
    class LoadAnomaly(HookFactory):
        _name = "cGcSolarSystem::LoadAnomaly"
    class SpawnAnomaly(HookFactory):
        _name = "cGcSolarSystem::SpawnAnomaly"
    class SetNexusVisibility(HookFactory):
        _name = "cGcSolarSystem::SetNexusVisibility"
    class IsPointInsideSpaceStationInternals(HookFactory):
        _name = "cGcSolarSystem::IsPointInsideSpaceStationInternals"
    class IsPointInsideAnomalyInternals(HookFactory):
        _name = "cGcSolarSystem::IsPointInsideAnomalyInternals"
    class IsPointInsideNexusInternals(HookFactory):
        _name = "cGcSolarSystem::IsPointInsideNexusInternals"
    class IsPointInsideSpaceStationBoundingSphere(HookFactory):
        _name = "cGcSolarSystem::IsPointInsideSpaceStationBoundingSphere"
    class IsPointInsideNexusExteriorBoundingSphere(HookFactory):
        _name = "cGcSolarSystem::IsPointInsideNexusExteriorBoundingSphere"
    class GetName(HookFactory):
        _name = "cGcSolarSystem::GetName"
    class GetSpaceStationName(HookFactory):
        _name = "cGcSolarSystem::GetSpaceStationName"
    class OnEnterPlanetOrbit(HookFactory):
        _name = "cGcSolarSystem::OnEnterPlanetOrbit"
    class OnLeavePlanetOrbit(HookFactory):
        _name = "cGcSolarSystem::OnLeavePlanetOrbit"
    class DeactivateSpaceObjects(HookFactory):
        _name = "cGcSolarSystem::DeactivateSpaceObjects"
    class ActivateSpaceObjects(HookFactory):
        _name = "cGcSolarSystem::ActivateSpaceObjects"
    class SetHeavyAir(HookFactory):
        _name = "cGcSolarSystem::SetHeavyAir"
    class TryToLockPositionToNearestPlanet(HookFactory):
        _name = "cGcSolarSystem::TryToLockPositionToNearestPlanet"
    class QueryLocators(HookFactory):
        _name = "cGcSolarSystem::QueryLocators"
    class ResolveAsteroidAssignment(HookFactory):
        _name = "cGcSolarSystem::ResolveAsteroidAssignment"
    class GetPlanetWithVoxelData(HookFactory):
        _name = "cGcSolarSystem::GetPlanetWithVoxelData"
    class CheckPlanetForInitialSpawn(HookFactory):
        _name = "cGcSolarSystem::CheckPlanetForInitialSpawn"
    class GetNexusExteriorSphere(HookFactory):
        _name = "cGcSolarSystem::GetNexusExteriorSphere"
    class GetPlayerSolarSystemInstance(HookFactory):
        _name = "cGcSolarSystem::GetPlayerSolarSystemInstance"
    class GetUA(HookFactory):
        _name = "cGcSolarSystem::GetUA"
    class GetNexusSpawnMatrix(HookFactory):
        _name = "cGcSolarSystem::GetNexusSpawnMatrix"
    class UpdateSSRNodesForModel(HookFactory):
        _name = "cGcSolarSystem::UpdateSSRNodesForModel"
    class IsSphereClearOfSoloarSystemObjects(HookFactory):
        _name = "cGcSolarSystem::IsSphereClearOfSoloarSystemObjects"
    class ActivateStationAfterWarp(HookFactory):
        _name = "cGcSolarSystem::ActivateStationAfterWarp"
    class SummonNexusExteriorSafe(HookFactory):
        _name = "cGcSolarSystem::SummonNexusExteriorSafe"
    class CanConsiderSummoningNexus(HookFactory):
        _name = "cGcSolarSystem::CanConsiderSummoningNexus"
    class DoesBuildingDensityHaveBuildingClass(HookFactory):
        _name = "cGcSolarSystem::DoesBuildingDensityHaveBuildingClass"

class cGcStatsManager:
    class GetStatDefinition(HookFactory):
        _name = "cGcStatsManager::GetStatDefinition"
    class GetStatValue(HookFactory):
        _templates = ("T0", )
        _name = "cGcStatsManager::GetStatValue<{T0}>"
    class Construct(HookFactory):
        _name = "cGcStatsManager::Construct"
    class SetupFromData(HookFactory):
        _name = "cGcStatsManager::SetupFromData"
    class WriteToData(HookFactory):
        _name = "cGcStatsManager::WriteToData"
    class ActivateListener(HookFactory):
        _name = "cGcStatsManager::ActivateListener"
    class DeactivateListener(HookFactory):
        _name = "cGcStatsManager::DeactivateListener"
    class OnReceiveStatRecordInt(HookFactory):
        _name = "cGcStatsManager::OnReceiveStatRecordInt"
    class OnReceiveStatRecordFloat(HookFactory):
        _name = "cGcStatsManager::OnReceiveStatRecordFloat"
    class GetStatAsString(HookFactory):
        _name = "cGcStatsManager::GetStatAsString"
    class GetStatNextLevelAsString(HookFactory):
        _name = "cGcStatsManager::GetStatNextLevelAsString"
    class CreateListener(HookFactory):
        _name = "cGcStatsManager::CreateListener"
    class GlobalStatChanged(HookFactory):
        _name = "cGcStatsManager::GlobalStatChanged"
    class TriggerLevelChange(HookFactory):
        _name = "cGcStatsManager::TriggerLevelChange"
    class FormatSols(HookFactory):
        _name = "cGcStatsManager::FormatSols"
    class FormatDistance(HookFactory):
        _name = "cGcStatsManager::FormatDistance"
    class GetJourneyStatsTotal(HookFactory):
        _name = "cGcStatsManager::GetJourneyStatsTotal"
    class GetJourneyStatsValue(HookFactory):
        _name = "cGcStatsManager::GetJourneyStatsValue"
    class GetLeveledStatDataIfExists(HookFactory):
        _name = "cGcStatsManager::GetLeveledStatDataIfExists"
    class GetJourneyMilestoneName(HookFactory):
        _name = "cGcStatsManager::GetJourneyMilestoneName"
    class GetJourneyMilestoneRequirement(HookFactory):
        _name = "cGcStatsManager::GetJourneyMilestoneRequirement"
    class GetNextJourneyMilestoneLevel(HookFactory):
        _name = "cGcStatsManager::GetNextJourneyMilestoneLevel"
    class GetCurrentJourneyMilestoneRank(HookFactory):
        _name = "cGcStatsManager::GetCurrentJourneyMilestoneRank"
    class WatchGlobalStat(HookFactory):
        _name = "cGcStatsManager::WatchGlobalStat"
    class UnWatchGlobalStat(HookFactory):
        _name = "cGcStatsManager::UnWatchGlobalStat"
    class Record(HookFactory):
        _templates = ("T0", )
        _name = "cGcStatsManager::Record<{T0}>"
    class GetStatLevel(HookFactory):
        _name = "cGcStatsManager::GetStatLevel"

class sGcTelemetryStatVariant:
    class GetVariant(HookFactory):
        _name = "sGcTelemetryStatVariant::GetVariant"
    class sGcTelemetryStatVariant(HookFactory):
        _name = "sGcTelemetryStatVariant::sGcTelemetryStatVariant"

class cGcInteractionBuffer:
    class cGcInteractionBuffer(HookFactory):
        _name = "cGcInteractionBuffer::cGcInteractionBuffer"
    class DeallocateDynamic(HookFactory):
        _name = "cGcInteractionBuffer::DeallocateDynamic"
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionBuffer::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInteractionBuffer::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionBuffer::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInteractionBuffer::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionBuffer::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInteractionBuffer::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcInteractionBuffer::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionBuffer::WriteToXMLNode"

class cTkMetaDataManager:
    class GetInstance(HookFactory):
        _name = "cTkMetaDataManager::GetInstance"

class CoreSrvLoadPhase:
    class GetNext(HookFactory):
        _name = "CoreSrvLoadPhase::GetNext"

class cTkGnmxContext:
    class _GetCommandList(HookFactory):
        _name = "cTkGnmxContext::_GetCommandList"
    class EndRenderPass(HookFactory):
        _name = "cTkGnmxContext::EndRenderPass"
    class SetNextRenderPass(HookFactory):
        _name = "cTkGnmxContext::SetNextRenderPass"
    class GetCurrentRenderPass(HookFactory):
        _name = "cTkGnmxContext::GetCurrentRenderPass"
    class BeginRenderPass(HookFactory):
        _name = "cTkGnmxContext::BeginRenderPass"
    class Init(HookFactory):
        _name = "cTkGnmxContext::Init"
    class Reset(HookFactory):
        _name = "cTkGnmxContext::Reset"
    class Transition(HookFactory):
        _name = "cTkGnmxContext::Transition"

class cTkImmediateMode:
    class GetInstance(HookFactory):
        _name = "cTkImmediateMode::GetInstance"
    class Begin(HookFactory):
        _name = "cTkImmediateMode::Begin"
    class Construct(HookFactory):
        _name = "cTkImmediateMode::Construct"
    class End(HookFactory):
        _name = "cTkImmediateMode::End"
    class InitGeometry(HookFactory):
        _name = "cTkImmediateMode::InitGeometry"
    class RenderLines(HookFactory):
        _name = "cTkImmediateMode::RenderLines"
    class RenderQuads(HookFactory):
        _name = "cTkImmediateMode::RenderQuads"
    class RenderSingleScreenQuad(HookFactory):
        _name = "cTkImmediateMode::RenderSingleScreenQuad"
    class RenderTriangles(HookFactory):
        _name = "cTkImmediateMode::RenderTriangles"
    class SetColour(HookFactory):
        _name = "cTkImmediateMode::SetColour"
    class SetTexture(HookFactory):
        _name = "cTkImmediateMode::SetTexture"

class cTkDynamicGravityControl:
    class cTkDynamicGravityControl(HookFactory):
        _name = "cTkDynamicGravityControl::cTkDynamicGravityControl"
    class Construct(HookFactory):
        _name = "cTkDynamicGravityControl::Construct"
    class DebugRender(HookFactory):
        _name = "cTkDynamicGravityControl::DebugRender"
    class GetGravity(HookFactory):
        _name = "cTkDynamicGravityControl::GetGravity"
    class UpdateGravityPoint(HookFactory):
        _name = "cTkDynamicGravityControl::UpdateGravityPoint"

class cTkHashedNGuiElement:
    class cTkHashedNGuiElement(HookFactory):
        _name = "cTkHashedNGuiElement::cTkHashedNGuiElement"

class hknpShapeProperties:
    class Entry:
        class Entry(HookFactory):
            _name = "hknpShapeProperties::Entry::Entry"
            _overload: overloads.hknpShapeProperties.Entry.Entry.overloads = "cGcUniverseAddressLayout::Bitfield *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpShapeProperties.Entry.Entry.overloads):
                cls._overload = overload_args
                return cls
    class hknpShapeProperties(HookFactory):
        _name = "hknpShapeProperties::hknpShapeProperties"
        _overload: overloads.hknpShapeProperties.hknpShapeProperties.overloads = "std::initializer_list<char const *> *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpShapeProperties.hknpShapeProperties.overloads):
            cls._overload = overload_args
            return cls
    class addProperty(HookFactory):
        _name = "hknpShapeProperties::addProperty"
    class getMemoryFootprint(HookFactory):
        _name = "hknpShapeProperties::getMemoryFootprint"
    class getProperty(HookFactory):
        _name = "hknpShapeProperties::getProperty"

class cGcGalacticVoxelCoordinate:
    class cGcGalacticVoxelCoordinate(HookFactory):
        _name = "cGcGalacticVoxelCoordinate::cGcGalacticVoxelCoordinate"
        _overload: overloads.cGcGalacticVoxelCoordinate.cGcGalacticVoxelCoordinate.overloads = "cGcGalacticVoxelCoordinate *, const cGcGalacticAddressData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGalacticVoxelCoordinate.cGcGalacticVoxelCoordinate.overloads):
            cls._overload = overload_args
            return cls
    class ClampToLimits(HookFactory):
        _name = "cGcGalacticVoxelCoordinate::ClampToLimits"

class vr:
    class VROverlay(HookFactory):
        _name = "vr::VROverlay"
    class COpenVRContext:
        class CheckClear(HookFactory):
            _name = "vr::COpenVRContext::CheckClear"
    class VRSystem(HookFactory):
        _name = "vr::VRSystem"
    class custom_hidden_area_mesh:
        class GetHmdDeviceFromTrackedDevicePropertyString(HookFactory):
            _name = "vr::custom_hidden_area_mesh::GetHmdDeviceFromTrackedDevicePropertyString"
    class VRCompositor(HookFactory):
        _name = "vr::VRCompositor"

class cTkStopwatch:
    class GetDurationInSeconds(HookFactory):
        _name = "cTkStopwatch::GetDurationInSeconds"

class cTkMultiContextManager:
    class cTkMultiContextManager(HookFactory):
        _name = "cTkMultiContextManager::cTkMultiContextManager"
    class BeginFrame(HookFactory):
        _name = "cTkMultiContextManager::BeginFrame"
    class Construct(HookFactory):
        _name = "cTkMultiContextManager::Construct"
    class CreateContext(HookFactory):
        _name = "cTkMultiContextManager::CreateContext"
    class GetUnusedContext(HookFactory):
        _name = "cTkMultiContextManager::GetUnusedContext"
    class Submit(HookFactory):
        _name = "cTkMultiContextManager::Submit"
    class SubmitAllWeCan(HookFactory):
        _name = "cTkMultiContextManager::SubmitAllWeCan"

class cTkSystemBase:
    class cTkSystemBase(HookFactory):
        _name = "cTkSystemBase::cTkSystemBase"
    class GetSKUID(HookFactory):
        _name = "cTkSystemBase::GetSKUID"
    class SetSKUID(HookFactory):
        _name = "cTkSystemBase::SetSKUID"
    class DetectAvailableMonitors(HookFactory):
        _name = "cTkSystemBase::DetectAvailableMonitors"
    class IsRetailAppId(HookFactory):
        _name = "cTkSystemBase::IsRetailAppId"
    class BeginPollableTaskBatch(HookFactory):
        _name = "cTkSystemBase::BeginPollableTaskBatch"
    class EndPollableTaskBatch(HookFactory):
        _name = "cTkSystemBase::EndPollableTaskBatch"
    class HandleMoveToBackgroundExecution(HookFactory):
        _name = "cTkSystemBase::HandleMoveToBackgroundExecution"
    class HandleReturnFromBackgroundExecution(HookFactory):
        _name = "cTkSystemBase::HandleReturnFromBackgroundExecution"
    class HandleSystemShareMenuOpened(HookFactory):
        _name = "cTkSystemBase::HandleSystemShareMenuOpened"
    class HandleSystemUIOverlayActivate(HookFactory):
        _name = "cTkSystemBase::HandleSystemUIOverlayActivate"
    class HandleSystemUIOverlayDeactivate(HookFactory):
        _name = "cTkSystemBase::HandleSystemUIOverlayDeactivate"
    class InternalEndPollableTaskBatch(HookFactory):
        _name = "cTkSystemBase::InternalEndPollableTaskBatch"
    class RunPollableTaskQueue(HookFactory):
        _name = "cTkSystemBase::RunPollableTaskQueue"
        _overload: overloads.cTkSystemBase.RunPollableTaskQueue.overloads = "cTkSystemBase *, _BOOL8"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSystemBase.RunPollableTaskQueue.overloads):
            cls._overload = overload_args
            return cls
    class Update(HookFactory):
        _name = "cTkSystemBase::Update"

class cTkSystem:
    class GetWindowMode(HookFactory):
        _name = "cTkSystem::GetWindowMode"
    class GetInstance(HookFactory):
        _name = "cTkSystem::GetInstance"
    class AssertCallback(HookFactory):
        _name = "cTkSystem::AssertCallback"
    class CalculateWindowsVersion(HookFactory):
        _name = "cTkSystem::CalculateWindowsVersion"
    class ConstructHardware(HookFactory):
        _name = "cTkSystem::ConstructHardware"
    class ConstructVideo(HookFactory):
        _name = "cTkSystem::ConstructVideo"
    class CopyTextToClipboard(HookFactory):
        _name = "cTkSystem::CopyTextToClipboard"
    class DestructHardware(HookFactory):
        _name = "cTkSystem::DestructHardware"
    class DetectAvailableMonitors(HookFactory):
        _name = "cTkSystem::DetectAvailableMonitors"
    class DetectAvailableResolutions(HookFactory):
        _name = "cTkSystem::DetectAvailableResolutions"
    class GameHasFocus(HookFactory):
        _name = "cTkSystem::GameHasFocus"
    class GenerateSystemSeed(HookFactory):
        _name = "cTkSystem::GenerateSystemSeed"
    class GenerateUUIDString(HookFactory):
        _name = "cTkSystem::GenerateUUIDString"
    class GetAdapterFreeMemory(HookFactory):
        _name = "cTkSystem::GetAdapterFreeMemory"
    class GetScreenPosition(HookFactory):
        _name = "cTkSystem::GetScreenPosition"
    class GetScreenResolution(HookFactory):
        _name = "cTkSystem::GetScreenResolution"
    class GetTotalAdapterMemoryGiB(HookFactory):
        _name = "cTkSystem::GetTotalAdapterMemoryGiB"
    class GetWindowsErrorAsString(HookFactory):
        _name = "cTkSystem::GetWindowsErrorAsString"
    class IntegratedGPUActive(HookFactory):
        _name = "cTkSystem::IntegratedGPUActive"
    class PasteTextFromClipboard(HookFactory):
        _name = "cTkSystem::PasteTextFromClipboard"
    class PollEventLoop(HookFactory):
        _name = "cTkSystem::PollEventLoop"
    class ReadRegistryString(HookFactory):
        _name = "cTkSystem::ReadRegistryString"
    class SetGamma(HookFactory):
        _name = "cTkSystem::SetGamma"
    class SetScreenDimensions(HookFactory):
        _name = "cTkSystem::SetScreenDimensions"
    class SetWindowMode(HookFactory):
        _name = "cTkSystem::SetWindowMode"
    class SetWorkingDirectory(HookFactory):
        _name = "cTkSystem::SetWorkingDirectory"
    class SwapBuffers(HookFactory):
        _name = "cTkSystem::SwapBuffers"
    class SystemSetCursor(HookFactory):
        _name = "cTkSystem::SystemSetCursor"
    class Update(HookFactory):
        _name = "cTkSystem::Update"
    class WindowCloseCallback(HookFactory):
        _name = "cTkSystem::WindowCloseCallback"

class cGcCharacterInterface:
    class GetHitReactDir(HookFactory):
        _name = "cGcCharacterInterface::GetHitReactDir"
    class GetRidingAttachment(HookFactory):
        _name = "cGcCharacterInterface::GetRidingAttachment"
    class UpdateIdle(HookFactory):
        _name = "cGcCharacterInterface::UpdateIdle"

class CAkMatrixAwareCtx:
    class SeekPercent(HookFactory):
        _name = "CAkMatrixAwareCtx::SeekPercent"
    class CAkMatrixAwareCtx(HookFactory):
        _name = "CAkMatrixAwareCtx::CAkMatrixAwareCtx"
    class GetAbsoluteTimeOffset(HookFactory):
        _name = "CAkMatrixAwareCtx::GetAbsoluteTimeOffset"
    class GetFirstSegmentNode(HookFactory):
        _name = "CAkMatrixAwareCtx::GetFirstSegmentNode"
    class GetPlayingSegmentInfo(HookFactory):
        _name = "CAkMatrixAwareCtx::GetPlayingSegmentInfo"
    class GetSilentDuration(HookFactory):
        _name = "CAkMatrixAwareCtx::GetSilentDuration"
    class Init(HookFactory):
        _name = "CAkMatrixAwareCtx::Init"
    class OnStopped(HookFactory):
        _name = "CAkMatrixAwareCtx::OnStopped"
    class ProcessEpilogue(HookFactory):
        _name = "CAkMatrixAwareCtx::ProcessEpilogue"
    class SetRegisteredNotif(HookFactory):
        _name = "CAkMatrixAwareCtx::SetRegisteredNotif"
    class SetSequencer(HookFactory):
        _name = "CAkMatrixAwareCtx::SetSequencer"

class cTkEngineSettings:
    class GetInstance(HookFactory):
        _name = "cTkEngineSettings::GetInstance"
    class cTkEngineSettings(HookFactory):
        _name = "cTkEngineSettings::cTkEngineSettings"
    class ApplySettings(HookFactory):
        _name = "cTkEngineSettings::ApplySettings"
    class ChooseInitialGraphicsPreset(HookFactory):
        _name = "cTkEngineSettings::ChooseInitialGraphicsPreset"
    class ChooseInitialResolution(HookFactory):
        _name = "cTkEngineSettings::ChooseInitialResolution"
    class ChooseInitialThreadCounts(HookFactory):
        _name = "cTkEngineSettings::ChooseInitialThreadCounts"
    class GetDefaultGraphicsSettingsForThisDevice(HookFactory):
        _name = "cTkEngineSettings::GetDefaultGraphicsSettingsForThisDevice"
    class GetDynamicResScalingSettings(HookFactory):
        _name = "cTkEngineSettings::GetDynamicResScalingSettings"
    class GetEngineSettingFromString(HookFactory):
        _name = "cTkEngineSettings::GetEngineSettingFromString"
    class GetScaleDetailFromEngineSetting(HookFactory):
        _name = "cTkEngineSettings::GetScaleDetailFromEngineSetting"
    class GetScaleDetailFromTargetEngineSetting(HookFactory):
        _name = "cTkEngineSettings::GetScaleDetailFromTargetEngineSetting"
    class GetSettingBool(HookFactory):
        _name = "cTkEngineSettings::GetSettingBool"
    class GetSettingFloat(HookFactory):
        _name = "cTkEngineSettings::GetSettingFloat"
    class GetSettingGraphicDetail(HookFactory):
        _name = "cTkEngineSettings::GetSettingGraphicDetail"
    class GetSettingInt(HookFactory):
        _name = "cTkEngineSettings::GetSettingInt"
    class GetSettingSupport(HookFactory):
        _name = "cTkEngineSettings::GetSettingSupport"
    class HasSettingFloat(HookFactory):
        _name = "cTkEngineSettings::HasSettingFloat"
    class OutOfMemoryDropTextureDetail(HookFactory):
        _name = "cTkEngineSettings::OutOfMemoryDropTextureDetail"
    class Read(HookFactory):
        _name = "cTkEngineSettings::Read"
    class UpdateGraphicsSettings(HookFactory):
        _name = "cTkEngineSettings::UpdateGraphicsSettings"
    class UpdateInitialThreadCounts(HookFactory):
        _name = "cTkEngineSettings::UpdateInitialThreadCounts"
    class Write(HookFactory):
        _name = "cTkEngineSettings::Write"

class cTkInputManager:
    class GetDeviceVRViewResetLayerName(HookFactory):
        _name = "cTkInputManager::GetDeviceVRViewResetLayerName"
    class GetActionButton(HookFactory):
        _name = "cTkInputManager::GetActionButton"
    class GetActionAxis(HookFactory):
        _name = "cTkInputManager::GetActionAxis"
    class GetMappedIcon(HookFactory):
        _name = "cTkInputManager::GetMappedIcon"
    class GetChordIcons(HookFactory):
        _name = "cTkInputManager::GetChordIcons"
    class cTkInputManager(HookFactory):
        _name = "cTkInputManager::cTkInputManager"
    class GetPrimaryPort(HookFactory):
        _name = "cTkInputManager::GetPrimaryPort"
    class IsKBMControlActive(HookFactory):
        _name = "cTkInputManager::IsKBMControlActive"
    class IsControllerPositionTracking(HookFactory):
        _name = "cTkInputManager::IsControllerPositionTracking"
    class IsHandControlActive(HookFactory):
        _name = "cTkInputManager::IsHandControlActive"
    class IsPadControlActive(HookFactory):
        _name = "cTkInputManager::IsPadControlActive"
    class GetActionSetLOC(HookFactory):
        _name = "cTkInputManager::GetActionSetLOC"
    class Destruct(HookFactory):
        _name = "cTkInputManager::Destruct"
    class AreActionsBoundToTheSameButton(HookFactory):
        _name = "cTkInputManager::AreActionsBoundToTheSameButton"
    class BeginActionSet(HookFactory):
        _name = "cTkInputManager::BeginActionSet"
    class BeginBindings(HookFactory):
        _name = "cTkInputManager::BeginBindings"
    class BeginBindingsActionSet(HookFactory):
        _name = "cTkInputManager::BeginBindingsActionSet"
    class Clear(HookFactory):
        _name = "cTkInputManager::Clear"
    class ClearCustomisation(HookFactory):
        _name = "cTkInputManager::ClearCustomisation"
    class Construct(HookFactory):
        _name = "cTkInputManager::Construct"
    class DestroyBindings(HookFactory):
        _name = "cTkInputManager::DestroyBindings"
    class EditBinding(HookFactory):
        _name = "cTkInputManager::EditBinding"
        _overload: overloads.cTkInputManager.EditBinding.overloads = "cTkInputManager *, int, int, int, eInputAxis"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputManager.EditBinding.overloads):
            cls._overload = overload_args
            return cls
    class EndActionSet(HookFactory):
        _name = "cTkInputManager::EndActionSet"
    class EndBindings(HookFactory):
        _name = "cTkInputManager::EndBindings"
    class EndBindingsActionSet(HookFactory):
        _name = "cTkInputManager::EndBindingsActionSet"
    class FindActionName(HookFactory):
        _name = "cTkInputManager::FindActionName"
    class FindActionSetName(HookFactory):
        _name = "cTkInputManager::FindActionSetName"
    class FindAxisName(HookFactory):
        _name = "cTkInputManager::FindAxisName"
    class FindButtonName(HookFactory):
        _name = "cTkInputManager::FindButtonName"
    class GetActionBasis(HookFactory):
        _name = "cTkInputManager::GetActionBasis"
    class GetActionOrientation(HookFactory):
        _name = "cTkInputManager::GetActionOrientation"
    class GetActiveActionSet(HookFactory):
        _name = "cTkInputManager::GetActiveActionSet"
    class GetAnalogInput(HookFactory):
        _name = "cTkInputManager::GetAnalogInput"
    class GetBindings(HookFactory):
        _name = "cTkInputManager::GetBindings"
        _overload: overloads.cTkInputManager.GetBindings.overloads = "cTkInputManager *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputManager.GetBindings.overloads):
            cls._overload = overload_args
            return cls
    class GetButtonInput(HookFactory):
        _name = "cTkInputManager::GetButtonInput"
    class GetChordTextTag(HookFactory):
        _name = "cTkInputManager::GetChordTextTag"
    class GetDeviceWorldTransform(HookFactory):
        _name = "cTkInputManager::GetDeviceWorldTransform"
    class GetLastButtonInputWasTouch(HookFactory):
        _name = "cTkInputManager::GetLastButtonInputWasTouch"
    class GetMousePosition(HookFactory):
        _name = "cTkInputManager::GetMousePosition"
    class HackBinding(HookFactory):
        _name = "cTkInputManager::HackBinding"
    class HasAnalogActionBound(HookFactory):
        _name = "cTkInputManager::HasAnalogActionBound"
        _overload: overloads.cTkInputManager.HasAnalogActionBound.overloads = "cTkInputManager *, int, eInputPort"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputManager.HasAnalogActionBound.overloads):
            cls._overload = overload_args
            return cls
    class HasDigitalActionBound(HookFactory):
        _name = "cTkInputManager::HasDigitalActionBound"
        _overload: overloads.cTkInputManager.HasDigitalActionBound.overloads = "cTkInputManager *, int, eInputPort"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputManager.HasDigitalActionBound.overloads):
            cls._overload = overload_args
            return cls
    class IsActiveActionSet(HookFactory):
        _name = "cTkInputManager::IsActiveActionSet"
    class MergeBindings(HookFactory):
        _name = "cTkInputManager::MergeBindings"
    class ParseActionName(HookFactory):
        _name = "cTkInputManager::ParseActionName"
    class ParseActionSetName(HookFactory):
        _name = "cTkInputManager::ParseActionSetName"
    class ParseAxisName(HookFactory):
        _name = "cTkInputManager::ParseAxisName"
    class ParseButtonName(HookFactory):
        _name = "cTkInputManager::ParseButtonName"
    class Prepare(HookFactory):
        _name = "cTkInputManager::Prepare"
    class RegisterAction(HookFactory):
        _name = "cTkInputManager::RegisterAction"
    class RegisterActionSetAction(HookFactory):
        _name = "cTkInputManager::RegisterActionSetAction"
    class RegisterBinding(HookFactory):
        _name = "cTkInputManager::RegisterBinding"
        _overload: overloads.cTkInputManager.RegisterBinding.overloads = "cTkInputManager *, int, eInputAxis, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputManager.RegisterBinding.overloads):
            cls._overload = overload_args
            return cls
    class Release(HookFactory):
        _name = "cTkInputManager::Release"
    class SetActiveActionSet(HookFactory):
        _name = "cTkInputManager::SetActiveActionSet"
    class SetCustomisation(HookFactory):
        _name = "cTkInputManager::SetCustomisation"
    class SetTouchInputWaitingForReset(HookFactory):
        _name = "cTkInputManager::SetTouchInputWaitingForReset"
    class Update(HookFactory):
        _name = "cTkInputManager::Update"
    class UpdateClickToPlay(HookFactory):
        _name = "cTkInputManager::UpdateClickToPlay"
    class GetActionSetName(HookFactory):
        _name = "cTkInputManager::GetActionSetName"

class cTkInputDeviceManager:
    class LockMouse(HookFactory):
        _name = "cTkInputDeviceManager::LockMouse"
    class UnlockMouse(HookFactory):
        _name = "cTkInputDeviceManager::UnlockMouse"
    class IsControllerPositionTracking(HookFactory):
        _name = "cTkInputDeviceManager::IsControllerPositionTracking"
    class cTkInputDeviceManager(HookFactory):
        _name = "cTkInputDeviceManager::cTkInputDeviceManager"
    class CharacterCallback(HookFactory):
        _name = "cTkInputDeviceManager::CharacterCallback"
    class Construct(HookFactory):
        _name = "cTkInputDeviceManager::Construct"
    class ControllerDetectionTaskImpl(HookFactory):
        _name = "cTkInputDeviceManager::ControllerDetectionTaskImpl"
    class DispatchDetectionTask(HookFactory):
        _name = "cTkInputDeviceManager::DispatchDetectionTask"
    class FindDevice(HookFactory):
        _name = "cTkInputDeviceManager::FindDevice"
    class GetDeviceSpecMetadataFile(HookFactory):
        _name = "cTkInputDeviceManager::GetDeviceSpecMetadataFile"
    class HideMouse(HookFactory):
        _name = "cTkInputDeviceManager::HideMouse"
    class IsMouseHidden(HookFactory):
        _name = "cTkInputDeviceManager::IsMouseHidden"
    class KeyCallback(HookFactory):
        _name = "cTkInputDeviceManager::KeyCallback"
    class LocaliseButton(HookFactory):
        _name = "cTkInputDeviceManager::LocaliseButton"
    class MouseScrollCallback(HookFactory):
        _name = "cTkInputDeviceManager::MouseScrollCallback"
    class Prepare(HookFactory):
        _name = "cTkInputDeviceManager::Prepare"
    class ProcessDS4(HookFactory):
        _name = "cTkInputDeviceManager::ProcessDS4"
    class ProcessKeyboard(HookFactory):
        _name = "cTkInputDeviceManager::ProcessKeyboard"
    class ProcessMouse(HookFactory):
        _name = "cTkInputDeviceManager::ProcessMouse"
    class ProcessXInputPad(HookFactory):
        _name = "cTkInputDeviceManager::ProcessXInputPad"
    class Release(HookFactory):
        _name = "cTkInputDeviceManager::Release"
    class SetMousePosition(HookFactory):
        _name = "cTkInputDeviceManager::SetMousePosition"
    class ShowMouse(HookFactory):
        _name = "cTkInputDeviceManager::ShowMouse"
    class Update(HookFactory):
        _name = "cTkInputDeviceManager::Update"

class cTkHmdOpenVR:
    class GetInstance(HookFactory):
        _name = "cTkHmdOpenVR::GetInstance"
    class cTkHmdOpenVR(HookFactory):
        _name = "cTkHmdOpenVR::cTkHmdOpenVR"
    class ApplyProjectionScale(HookFactory):
        _name = "cTkHmdOpenVR::ApplyProjectionScale"
    class BeginFrame(HookFactory):
        _name = "cTkHmdOpenVR::BeginFrame"
    class BlitWindowMirror(HookFactory):
        _name = "cTkHmdOpenVR::BlitWindowMirror"
    class Construct(HookFactory):
        _name = "cTkHmdOpenVR::Construct"
    class Destruct(HookFactory):
        _name = "cTkHmdOpenVR::Destruct"
    class EndFrame(HookFactory):
        _name = "cTkHmdOpenVR::EndFrame"
    class GetFramebuffer(HookFactory):
        _name = "cTkHmdOpenVR::GetFramebuffer"
    class GetFramebufferTexture(HookFactory):
        _name = "cTkHmdOpenVR::GetFramebufferTexture"
    class GetViewMatrix(HookFactory):
        _name = "cTkHmdOpenVR::GetViewMatrix"
    class GetVulkanDeviceExtensionsRequired(HookFactory):
        _name = "cTkHmdOpenVR::GetVulkanDeviceExtensionsRequired"
    class GetVulkanInstanceExtensionsRequired(HookFactory):
        _name = "cTkHmdOpenVR::GetVulkanInstanceExtensionsRequired"
    class HasInputFocus(HookFactory):
        _name = "cTkHmdOpenVR::HasInputFocus"
    class OnEndStartupSequence(HookFactory):
        _name = "cTkHmdOpenVR::OnEndStartupSequence"
    class OnShutdown(HookFactory):
        _name = "cTkHmdOpenVR::OnShutdown"
    class PostPresent(HookFactory):
        _name = "cTkHmdOpenVR::PostPresent"
    class PreSubmit(HookFactory):
        _name = "cTkHmdOpenVR::PreSubmit"
    class Prepare(HookFactory):
        _name = "cTkHmdOpenVR::Prepare"
    class PrepareAttach(HookFactory):
        _name = "cTkHmdOpenVR::PrepareAttach"
    class ProcessPoses(HookFactory):
        _name = "cTkHmdOpenVR::ProcessPoses"
    class RecenterPose(HookFactory):
        _name = "cTkHmdOpenVR::RecenterPose"
    class Release(HookFactory):
        _name = "cTkHmdOpenVR::Release"
    class RenderHiddenAreaMesh(HookFactory):
        _name = "cTkHmdOpenVR::RenderHiddenAreaMesh"
    class SetFramebuffer(HookFactory):
        _name = "cTkHmdOpenVR::SetFramebuffer"
    class SubmitTimingData(HookFactory):
        _name = "cTkHmdOpenVR::SubmitTimingData"
    class SubscribeToOpenVREvents(HookFactory):
        _name = "cTkHmdOpenVR::SubscribeToOpenVREvents"
    class UnsubscribeFromOpenVREvents(HookFactory):
        _name = "cTkHmdOpenVR::UnsubscribeFromOpenVREvents"
    class Update(HookFactory):
        _name = "cTkHmdOpenVR::Update"

class cTkInputDeviceManagerBase:
    class LockMouse(HookFactory):
        _name = "cTkInputDeviceManagerBase::LockMouse"
    class UnlockMouse(HookFactory):
        _name = "cTkInputDeviceManagerBase::UnlockMouse"
    class LocaliseButton(HookFactory):
        _name = "cTkInputDeviceManagerBase::LocaliseButton"
    class CheckSupport(HookFactory):
        _name = "cTkInputDeviceManagerBase::CheckSupport"
        _overload: overloads.cTkInputDeviceManagerBase.CheckSupport.overloads = "eInputButtonType, eInputAxis"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputDeviceManagerBase.CheckSupport.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cTkInputDeviceManagerBase::Construct"
    class FindIconMap(HookFactory):
        _name = "cTkInputDeviceManagerBase::FindIconMap"
        _overload: overloads.cTkInputDeviceManagerBase.FindIconMap.overloads = "cTkInputDeviceManagerBase *, const cTkControllerSpecification *, eInputButtonType, ePadType"
        @classmethod
        def overload(cls, overload_args: overloads.cTkInputDeviceManagerBase.FindIconMap.overloads):
            cls._overload = overload_args
            return cls
    class GetDeviceSpecMetadataFile(HookFactory):
        _name = "cTkInputDeviceManagerBase::GetDeviceSpecMetadataFile"
    class GetInputAxisDescription(HookFactory):
        _name = "cTkInputDeviceManagerBase::GetInputAxisDescription"
    class GetInputButtonDescription(HookFactory):
        _name = "cTkInputDeviceManagerBase::GetInputButtonDescription"
    class LoadDeviceIcons(HookFactory):
        _name = "cTkInputDeviceManagerBase::LoadDeviceIcons"
    class SetUseLeftHandForGyro(HookFactory):
        _name = "cTkInputDeviceManagerBase::SetUseLeftHandForGyro"
    class Update(HookFactory):
        _name = "cTkInputDeviceManagerBase::Update"

class cGcNetworkBufferSyncManager:
    class cGcNetworkBufferSyncManager(HookFactory):
        _name = "cGcNetworkBufferSyncManager::cGcNetworkBufferSyncManager"
    class GetPlayerIndex(HookFactory):
        _name = "cGcNetworkBufferSyncManager::GetPlayerIndex"
    class Initialise(HookFactory):
        _name = "cGcNetworkBufferSyncManager::Initialise"
    class Update(HookFactory):
        _name = "cGcNetworkBufferSyncManager::Update"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkBufferSyncManager::OnNetworkPlayerStateEvent"
    class UpdateSendHashMessages(HookFactory):
        _name = "cGcNetworkBufferSyncManager::UpdateSendHashMessages"

class cGcNetworkPlayerFullSim:
    class GetNetworkIndex(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetNetworkIndex"
    class IsVRPlayer(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsVRPlayer"
    class GetDominantHand(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetDominantHand"
    class IsActive(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsActive"
    class IsHandTracking(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsHandTracking"
    class Construct(HookFactory):
        _name = "cGcNetworkPlayerFullSim::Construct"
    class IsFullSimLobbyHost(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsFullSimLobbyHost"
    class OnConnected(HookFactory):
        _name = "cGcNetworkPlayerFullSim::OnConnected"
    class Release(HookFactory):
        _name = "cGcNetworkPlayerFullSim::Release"
    class HandleMessage(HookFactory):
        _name = "cGcNetworkPlayerFullSim::HandleMessage"
    class OnServerUpdate(HookFactory):
        _name = "cGcNetworkPlayerFullSim::OnServerUpdate"
    class GetPlayerNameWithTitle(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetPlayerNameWithTitle"
    class Update(HookFactory):
        _name = "cGcNetworkPlayerFullSim::Update"
    class UpdateHandTracking(HookFactory):
        _name = "cGcNetworkPlayerFullSim::UpdateHandTracking"
    class DisableHandTracking(HookFactory):
        _name = "cGcNetworkPlayerFullSim::DisableHandTracking"
    class GetTimeUntilNextExpectedHandsUpdate(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetTimeUntilNextExpectedHandsUpdate"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkPlayerFullSim::OnNetworkPlayerStateEvent"
    class GetVehicle(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetVehicle"
    class GetOccupiedVehicle(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetOccupiedVehicle"
    class SetPlayerState(HookFactory):
        _name = "cGcNetworkPlayerFullSim::SetPlayerState"
    class SendPlayerExperienceSpawn(HookFactory):
        _name = "cGcNetworkPlayerFullSim::SendPlayerExperienceSpawn"
    class GetNode(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetNode"
    class VirtualGetAttachment(HookFactory):
        _name = "cGcNetworkPlayerFullSim::VirtualGetAttachment"
    class GetPosition(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetPosition"
    class GetMapPosition(HookFactory):
        _name = "cGcNetworkPlayerFullSim::GetMapPosition"
    class VirtualGetMatrix(HookFactory):
        _name = "cGcNetworkPlayerFullSim::VirtualGetMatrix"
    class IsOnMyPlanet(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsOnMyPlanet"
    class IsInUnknownFireteam(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsInUnknownFireteam"
    class IsStealthActive(HookFactory):
        _name = "cGcNetworkPlayerFullSim::IsStealthActive"

class cTkReplicatedVariablePlayer:
    class IsLocalPlayerEntityOwner(HookFactory):
        _templates = ("T0", )
        _name = "cTkReplicatedVariablePlayer<{T0}>::IsLocalPlayerEntityOwner"

class cTkBaseMath:
    class Log2Floor(HookFactory):
        _templates = ("T0", )
        _name = "cTkBaseMath::Log2Floor<{T0}>"
    class USplitBits:
        class USplitBits(HookFactory):
            _name = "cTkBaseMath::USplitBits::USplitBits"
    class FloatToHalfI(HookFactory):
        _name = "cTkBaseMath::FloatToHalfI"
    class FloatToHalf(HookFactory):
        _name = "cTkBaseMath::FloatToHalf"

class cGcSettlementState:
    class cGcSettlementState(HookFactory):
        _name = "cGcSettlementState::cGcSettlementState"
        _overload: overloads.cGcSettlementState.cGcSettlementState.overloads = "cGcSettlementState *, const cGcSettlementState *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcSettlementState.cGcSettlementState.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementState::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSettlementState::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSettlementState::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementState::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSettlementState::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementState::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementState::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSettlementState::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementState::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementState::WriteToXMLNodeExplicit"

class cGcNetworkPlayerReplicatedState:
    class cGcNetworkPlayerReplicatedState(HookFactory):
        _name = "cGcNetworkPlayerReplicatedState::cGcNetworkPlayerReplicatedState"
    class Construct(HookFactory):
        _name = "cGcNetworkPlayerReplicatedState::Construct"
    class Update(HookFactory):
        _name = "cGcNetworkPlayerReplicatedState::Update"

class cGcNetworkPlayer:
    class IsInSpaceship(HookFactory):
        _name = "cGcNetworkPlayer::IsInSpaceship"
    class IsInLandVehicle(HookFactory):
        _name = "cGcNetworkPlayer::IsInLandVehicle"
    class GetEnvironmentLocation(HookFactory):
        _name = "cGcNetworkPlayer::GetEnvironmentLocation"
    class Construct(HookFactory):
        _name = "cGcNetworkPlayer::Construct"
    class IsActive(HookFactory):
        _name = "cGcNetworkPlayer::IsActive"
    class GetPlayerName(HookFactory):
        _name = "cGcNetworkPlayer::GetPlayerName"
    class GetMapPosition(HookFactory):
        _name = "cGcNetworkPlayer::GetMapPosition"
    class Release(HookFactory):
        _name = "cGcNetworkPlayer::Release"
    class HandleMessage(HookFactory):
        _name = "cGcNetworkPlayer::HandleMessage"
    class MatchesLocalPlayerLocation(HookFactory):
        _name = "cGcNetworkPlayer::MatchesLocalPlayerLocation"
    class Update(HookFactory):
        _name = "cGcNetworkPlayer::Update"
    class OnConnected(HookFactory):
        _name = "cGcNetworkPlayer::OnConnected"
    class SetPlayerName(HookFactory):
        _name = "cGcNetworkPlayer::SetPlayerName"
    class CheckPendingState(HookFactory):
        _name = "cGcNetworkPlayer::CheckPendingState"
    class VirtualGetMatrix(HookFactory):
        _name = "cGcNetworkPlayer::VirtualGetMatrix"
    class ReceiveData(HookFactory):
        _name = "cGcNetworkPlayer::ReceiveData"
    class ProcessMessage(HookFactory):
        _name = "cGcNetworkPlayer::ProcessMessage"
    class IsHost(HookFactory):
        _name = "cGcNetworkPlayer::IsHost"
    class GetPlatformType(HookFactory):
        _name = "cGcNetworkPlayer::GetPlatformType"
    class cGcNetworkPlayer(HookFactory):
        _name = "cGcNetworkPlayer::cGcNetworkPlayer"

class cEgResource:
    class GetBoundingBox(HookFactory):
        _name = "cEgResource::GetBoundingBox"
    class CloneInternal(HookFactory):
        _name = "cEgResource::CloneInternal"
    class Load(HookFactory):
        _name = "cEgResource::Load"
    class GetElementCount(HookFactory):
        _name = "cEgResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgResource::GetElementParamInt"
    class SetElementParamInt(HookFactory):
        _name = "cEgResource::SetElementParamInt"
    class GetElementParamFloat(HookFactory):
        _name = "cEgResource::GetElementParamFloat"
    class SetElementParamFloat(HookFactory):
        _name = "cEgResource::SetElementParamFloat"
    class GetElementParamStr(HookFactory):
        _name = "cEgResource::GetElementParamStr"
    class SetElementParamStr(HookFactory):
        _name = "cEgResource::SetElementParamStr"
    class MapResStream(HookFactory):
        _name = "cEgResource::MapResStream"
    class UnmapStream(HookFactory):
        _name = "cEgResource::UnmapStream"

class cTkGraphicsManagerBase:
    class Construct(HookFactory):
        _name = "cTkGraphicsManagerBase::Construct"
    class Prepare(HookFactory):
        _name = "cTkGraphicsManagerBase::Prepare"
    class NextViewMode(HookFactory):
        _name = "cTkGraphicsManagerBase::NextViewMode"
    class EnqueueRenderViewport(HookFactory):
        _name = "cTkGraphicsManagerBase::EnqueueRenderViewport"
    class GetViewMatrix(HookFactory):
        _name = "cTkGraphicsManagerBase::GetViewMatrix"
    class GetProjectionMatrix(HookFactory):
        _name = "cTkGraphicsManagerBase::GetProjectionMatrix"
        _overload: overloads.cTkGraphicsManagerBase.GetProjectionMatrix.overloads = "cTkGraphicsManagerBase *, cTkMatrix44 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkGraphicsManagerBase.GetProjectionMatrix.overloads):
            cls._overload = overload_args
            return cls
    class Release(HookFactory):
        _name = "cTkGraphicsManagerBase::Release"
    class CalculateNewFov(HookFactory):
        _name = "cTkGraphicsManagerBase::CalculateNewFov"
    class AutoSetScreenWidthAndHeight(HookFactory):
        _name = "cTkGraphicsManagerBase::AutoSetScreenWidthAndHeight"
    class ComputeScreenPosArrayImpl(HookFactory):
        _name = "cTkGraphicsManagerBase::ComputeScreenPosArrayImpl"
    class ComputeScreenPosArrayVRImpl(HookFactory):
        _name = "cTkGraphicsManagerBase::ComputeScreenPosArrayVRImpl"
    class GetPickRay(HookFactory):
        _name = "cTkGraphicsManagerBase::GetPickRay"
    class GetUIScreenDimensions(HookFactory):
        _name = "cTkGraphicsManagerBase::GetUIScreenDimensions"
    class IsPositionOnScreen(HookFactory):
        _name = "cTkGraphicsManagerBase::IsPositionOnScreen"

class cGcCountInteraction:
    class IsActive(HookFactory):
        _name = "cGcCountInteraction::IsActive"
    class EndInteraction(HookFactory):
        _name = "cGcCountInteraction::EndInteraction"
    class Count(HookFactory):
        _name = "cGcCountInteraction::Count"

class cGcHoldInteraction:
    class IsActive(HookFactory):
        _name = "cGcHoldInteraction::IsActive"
    class NeedsWarning(HookFactory):
        _name = "cGcHoldInteraction::NeedsWarning"
    class GetConfirmValue(HookFactory):
        _name = "cGcHoldInteraction::GetConfirmValue"
    class Update(HookFactory):
        _name = "cGcHoldInteraction::Update"
    class Confirm(HookFactory):
        _name = "cGcHoldInteraction::Confirm"
    class EndInteraction(HookFactory):
        _name = "cGcHoldInteraction::EndInteraction"

class cGcSpaceshipWarp:
    class cGcSpaceshipWarp(HookFactory):
        _name = "cGcSpaceshipWarp::cGcSpaceshipWarp"
    class IsUsingCommunityPortal(HookFactory):
        _name = "cGcSpaceshipWarp::IsUsingCommunityPortal"
    class GetTargetTeleportEndpoint(HookFactory):
        _name = "cGcSpaceshipWarp::GetTargetTeleportEndpoint"
    class RequestExitPulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::RequestExitPulseDrive"
    class Construct(HookFactory):
        _name = "cGcSpaceshipWarp::Construct"
    class Prepare(HookFactory):
        _name = "cGcSpaceshipWarp::Prepare"
    class Reset(HookFactory):
        _name = "cGcSpaceshipWarp::Reset"
    class WarpToNextGalaxy(HookFactory):
        _name = "cGcSpaceshipWarp::WarpToNextGalaxy"
    class WarpToFreighter(HookFactory):
        _name = "cGcSpaceshipWarp::WarpToFreighter"
    class WarpToDistantSystem(HookFactory):
        _name = "cGcSpaceshipWarp::WarpToDistantSystem"
    class WarpInFromDistantSystem(HookFactory):
        _name = "cGcSpaceshipWarp::WarpInFromDistantSystem"
    class WarpToNexus(HookFactory):
        _name = "cGcSpaceshipWarp::WarpToNexus"
    class InternalWarpOutSetup(HookFactory):
        _name = "cGcSpaceshipWarp::InternalWarpOutSetup"
    class InternalCommonWarpSetup(HookFactory):
        _name = "cGcSpaceshipWarp::InternalCommonWarpSetup"
    class RenderNGui(HookFactory):
        _name = "cGcSpaceshipWarp::RenderNGui"
    class CanPulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::CanPulseDrive"
    class Update(HookFactory):
        _name = "cGcSpaceshipWarp::Update"
    class SetMaterialsAlpha(HookFactory):
        _name = "cGcSpaceshipWarp::SetMaterialsAlpha"
    class ActivatePulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::ActivatePulseDrive"
    class GetPulseDriveSpeed(HookFactory):
        _name = "cGcSpaceshipWarp::GetPulseDriveSpeed"
    class GetPulseDriveCount(HookFactory):
        _name = "cGcSpaceshipWarp::GetPulseDriveCount"
    class GetPulseDriveFuelFactor(HookFactory):
        _name = "cGcSpaceshipWarp::GetPulseDriveFuelFactor"
    class GetPulseDriveFactor(HookFactory):
        _name = "cGcSpaceshipWarp::GetPulseDriveFactor"
    class CheckPulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::CheckPulseDrive"
    class GetFuelPulseDriveMessage(HookFactory):
        _name = "cGcSpaceshipWarp::GetFuelPulseDriveMessage"
    class UpdatePulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::UpdatePulseDrive"
    class ShowPulseDriveCollision(HookFactory):
        _name = "cGcSpaceshipWarp::ShowPulseDriveCollision"
    class CalcPulseDrive(HookFactory):
        _name = "cGcSpaceshipWarp::CalcPulseDrive"
    class HasPulseDriveCollision(HookFactory):
        _name = "cGcSpaceshipWarp::HasPulseDriveCollision"

class DiscoveryResolver:
    class NameAndOwnerResult:
        class NameAndOwnerResult(HookFactory):
            _name = "DiscoveryResolver::NameAndOwnerResult::NameAndOwnerResult"
        class GetLocalisedName(HookFactory):
            _name = "DiscoveryResolver::NameAndOwnerResult::GetLocalisedName"
        class GetOwnershipDescription(HookFactory):
            _name = "DiscoveryResolver::NameAndOwnerResult::GetOwnershipDescription"
    class DiscoveryInfo:
        class DiscoveryInfo(HookFactory):
            _name = "DiscoveryResolver::DiscoveryInfo::DiscoveryInfo"
        class DiscoveryInfoValue:
            class DiscoveryInfoValue(HookFactory):
                _name = "DiscoveryResolver::DiscoveryInfo::DiscoveryInfoValue::DiscoveryInfoValue"
    class ComputeDisplayNameAndOwnerForDiscovery(HookFactory):
        _name = "DiscoveryResolver::ComputeDisplayNameAndOwnerForDiscovery"

class cGcBinoculars:
    class cGcBinoculars(HookFactory):
        _name = "cGcBinoculars::cGcBinoculars"
        _overload: overloads.cGcBinoculars.cGcBinoculars.overloads = "cGcBinoculars *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBinoculars.cGcBinoculars.overloads):
            cls._overload = overload_args
            return cls
    class HasHighlightWithScanInfo(HookFactory):
        _name = "cGcBinoculars::HasHighlightWithScanInfo"
    class IsMissionSurveying(HookFactory):
        _name = "cGcBinoculars::IsMissionSurveying"
    class HasValidMissionSurveyTarget(HookFactory):
        _name = "cGcBinoculars::HasValidMissionSurveyTarget"
    class Construct(HookFactory):
        _name = "cGcBinoculars::Construct"
    class Prepare(HookFactory):
        _name = "cGcBinoculars::Prepare"
    class Update(HookFactory):
        _name = "cGcBinoculars::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBinoculars::UpdateRender"
    class UpdateDiscoveryUI(HookFactory):
        _name = "cGcBinoculars::UpdateDiscoveryUI"
    class UpdateScanUI(HookFactory):
        _name = "cGcBinoculars::UpdateScanUI"
    class UpdateModeUI(HookFactory):
        _name = "cGcBinoculars::UpdateModeUI"
    class UpdateMissionSurveyUI(HookFactory):
        _name = "cGcBinoculars::UpdateMissionSurveyUI"
    class IsScannableNode(HookFactory):
        _name = "cGcBinoculars::IsScannableNode"
    class GetScopeMatrix(HookFactory):
        _name = "cGcBinoculars::GetScopeMatrix"
    class UpdateTarget(HookFactory):
        _name = "cGcBinoculars::UpdateTarget"
    class UpdateRayCasts(HookFactory):
        _name = "cGcBinoculars::UpdateRayCasts"
    class UpdateTargetScanMode(HookFactory):
        _name = "cGcBinoculars::UpdateTargetScanMode"
    class IsMissionSurveyTargetDistant(HookFactory):
        _name = "cGcBinoculars::IsMissionSurveyTargetDistant"
    class IsCurrentClosestScannableOutsideNormalIconRange(HookFactory):
        _name = "cGcBinoculars::IsCurrentClosestScannableOutsideNormalIconRange"
    class StartZoom(HookFactory):
        _name = "cGcBinoculars::StartZoom"
    class UpdateScanBarProgress(HookFactory):
        _name = "cGcBinoculars::UpdateScanBarProgress"
    class UpdateTargetScanData(HookFactory):
        _name = "cGcBinoculars::UpdateTargetScanData"
    class UpdateDataView(HookFactory):
        _name = "cGcBinoculars::UpdateDataView"
    class SetSystemScanData(HookFactory):
        _name = "cGcBinoculars::SetSystemScanData"
    class SetPlanetScanData(HookFactory):
        _name = "cGcBinoculars::SetPlanetScanData"
    class SetStationScanData(HookFactory):
        _name = "cGcBinoculars::SetStationScanData"
    class SetNexusScanData(HookFactory):
        _name = "cGcBinoculars::SetNexusScanData"
    class SetAbandonedFreighterScanData(HookFactory):
        _name = "cGcBinoculars::SetAbandonedFreighterScanData"
    class PopulateDiscoveryInfo(HookFactory):
        _name = "cGcBinoculars::PopulateDiscoveryInfo"
    class LocIdVariation(HookFactory):
        _name = "cGcBinoculars::LocIdVariation"
    class LoadGui(HookFactory):
        _name = "cGcBinoculars::LoadGui"
    class SetMarker(HookFactory):
        _name = "cGcBinoculars::SetMarker"
    class Render(HookFactory):
        _name = "cGcBinoculars::Render"
    class GetMissionSurveyScannableIconType(HookFactory):
        _name = "cGcBinoculars::GetMissionSurveyScannableIconType"
    class GetRange(HookFactory):
        _name = "cGcBinoculars::GetRange"
    class UpdateHotspotsUI(HookFactory):
        _name = "cGcBinoculars::UpdateHotspotsUI"
    class GetNearestCivilianFreighterNode(HookFactory):
        _name = "cGcBinoculars::GetNearestCivilianFreighterNode"
    class IsModeAvailable(HookFactory):
        _name = "cGcBinoculars::IsModeAvailable"
    class sMissionSurvey:
        class GetMissionSurveyClosestEvent(HookFactory):
            _name = "cGcBinoculars::sMissionSurvey::GetMissionSurveyClosestEvent"
        class GetMissionSurveyClosestScannable(HookFactory):
            _name = "cGcBinoculars::sMissionSurvey::GetMissionSurveyClosestScannable"
        class Reset(HookFactory):
            _name = "cGcBinoculars::sMissionSurvey::Reset"
        class Update(HookFactory):
            _name = "cGcBinoculars::sMissionSurvey::Update"
    class ResetTarget(HookFactory):
        _name = "cGcBinoculars::ResetTarget"
    class GetLastUsedTime(HookFactory):
        _name = "cGcBinoculars::GetLastUsedTime"

class cGcPlayerEmoteProp:
    class cGcPlayerEmoteProp(HookFactory):
        _name = "cGcPlayerEmoteProp::cGcPlayerEmoteProp"
    class Construct(HookFactory):
        _name = "cGcPlayerEmoteProp::Construct"
    class Destruct(HookFactory):
        _name = "cGcPlayerEmoteProp::Destruct"
    class Update(HookFactory):
        _name = "cGcPlayerEmoteProp::Update"
    class CalcMatrix(HookFactory):
        _name = "cGcPlayerEmoteProp::CalcMatrix"

class cGcWarpJumpTarget:
    class cGcWarpJumpTarget(HookFactory):
        _name = "cGcWarpJumpTarget::cGcWarpJumpTarget"

class cGcMarkerRenderData:
    class cGcMarkerRenderData(HookFactory):
        _name = "cGcMarkerRenderData::cGcMarkerRenderData"
    class Render(HookFactory):
        _name = "cGcMarkerRenderData::Render"
        _overload: overloads.cGcMarkerRenderData.Render.overloads = "void *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMarkerRenderData.Render.overloads):
            cls._overload = overload_args
            return cls

class cTkPlane:
    class cTkPlane(HookFactory):
        _name = "cTkPlane::cTkPlane"

class cGcFadeNode:
    class SetNodeActivation(HookFactory):
        _name = "cGcFadeNode::SetNodeActivation"
    class SetNodeParamF(HookFactory):
        _name = "cGcFadeNode::SetNodeParamF"
    class Construct(HookFactory):
        _name = "cGcFadeNode::Construct"
    class OctahedralImpostersEnabled(HookFactory):
        _name = "cGcFadeNode::OctahedralImpostersEnabled"

class cGcHeavyAirSettingValues:
    class cGcHeavyAirSettingValues(HookFactory):
        _name = "cGcHeavyAirSettingValues::cGcHeavyAirSettingValues"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHeavyAirSettingValues::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHeavyAirSettingValues::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcHeavyAirSettingValues::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcHeavyAirSettingValues::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHeavyAirSettingValues::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHeavyAirSettingValues::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHeavyAirSettingValues::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHeavyAirSettingValues::WriteToXMLNodeExplicit"

class cGcPetData:
    class cGcPetData(HookFactory):
        _name = "cGcPetData::cGcPetData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPetData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPetData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPetData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPetData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPetData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPetData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetData::WriteToXMLNodeExplicit"

class cGcPlayerBanner:
    class cGcPlayerBanner(HookFactory):
        _name = "cGcPlayerBanner::cGcPlayerBanner"

class cGcSyncBufferSaveDataArray:
    class cGcSyncBufferSaveDataArray(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::cGcSyncBufferSaveDataArray"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSyncBufferSaveDataArray::WriteToXMLNode"

class cGcMaintenanceBuffer:
    class GenerateChangeHash(HookFactory):
        _name = "cGcMaintenanceBuffer::GenerateChangeHash"
    class GenerateHashValue(HookFactory):
        _name = "cGcMaintenanceBuffer::GenerateHashValue"
    class CleanUpValidSlotIndexes(HookFactory):
        _name = "cGcMaintenanceBuffer::CleanUpValidSlotIndexes"

class cGcNetworkInteractionBufferSyncMessage:
    class cGcNetworkInteractionBufferSyncMessage(HookFactory):
        _name = "cGcNetworkInteractionBufferSyncMessage::cGcNetworkInteractionBufferSyncMessage"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkInteractionBufferSyncMessage::SerializeOrDeserialize"

class cGcVariablePersistentInteractionBuffer:
    class GenerateSyncMessage(HookFactory):
        _templates = ("T0", )
        _name = "cGcVariablePersistentInteractionBuffer<{T0}>::GenerateSyncMessage"
    class ApplySyncMessage(HookFactory):
        _templates = ("T0", )
        _name = "cGcVariablePersistentInteractionBuffer<{T0}>::ApplySyncMessage"
    class PopulateVariableData(HookFactory):
        _templates = ("T0", )
        _name = "cGcVariablePersistentInteractionBuffer<{T0}>::PopulateVariableData"
    class InitializeFromVariableData(HookFactory):
        _templates = ("T0", )
        _name = "cGcVariablePersistentInteractionBuffer<{T0}>::InitializeFromVariableData"
    class DeleteVariableInteraction(HookFactory):
        _templates = ("T0", )
        _name = "cGcVariablePersistentInteractionBuffer<{T0}>::DeleteVariableInteraction"

class cGcNetworkVariableInteractionBufferSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _templates = ("T0", )
        _name = "cGcNetworkVariableInteractionBufferSyncMessage<{T0}>::SerializeOrDeserialize"

class cGcMaintenanceContainer:
    class cGcMaintenanceContainer(HookFactory):
        _name = "cGcMaintenanceContainer::cGcMaintenanceContainer"
        _overload: overloads.cGcMaintenanceContainer.cGcMaintenanceContainer.overloads = "cGcMaintenanceContainer *, cGcMaintenanceContainer *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMaintenanceContainer.cGcMaintenanceContainer.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceContainer::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceContainer::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcMaintenanceContainer::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcMaintenanceContainer::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMaintenanceContainer::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceContainer::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcMaintenanceContainer::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMaintenanceContainer::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMaintenanceContainer::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcMaintenanceContainer::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceContainer::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMaintenanceContainer::WriteToXMLNodeExplicit"

class cGcTerrainEditBlockBuffer:
    class GenerateHashValue(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::GenerateHashValue"
    class Construct(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::Construct"
    class CopyEditsToBuffer(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::CopyEditsToBuffer"
    class TryAddEdit(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::TryAddEdit"
    class TryRemoveEdits(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::TryRemoveEdits"
    class TryUndoEdit(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::TryUndoEdit"
    class TryUndoEdits(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::TryUndoEdits"
    class ClearBuffer(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::ClearBuffer"
    class ApplyEditsToRegion(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::ApplyEditsToRegion"
    class TestEditsAgainstPosition(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::TestEditsAgainstPosition"
    class GenerateHashMessage(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::GenerateHashMessage"
    class GenerateSyncMessage(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::GenerateSyncMessage"
    class ApplySyncMessage(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::ApplySyncMessage"
    class HasNetworkOwner(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::HasNetworkOwner"
    class AccomodateNewEdit(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::AccomodateNewEdit"
    class CleanupBuffer(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::CleanupBuffer"
    class ApplyBoundsSync(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::ApplyBoundsSync"
    class OnHashOffsetChanged(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::OnHashOffsetChanged"
    class CompressTerrainEditPosition(HookFactory):
        _name = "cGcTerrainEditBlockBuffer::CompressTerrainEditPosition"

class cTkVector3KD:
    class reserve(HookFactory):
        _templates = ("T0", )
        _name = "cTkVector3KD<{T0}>::reserve"

class nanoflann:
    class PooledAllocator:
        class free_all(HookFactory):
            _name = "nanoflann::PooledAllocator::free_all"
        class doAllocate(HookFactory):
            _name = "nanoflann::PooledAllocator::doAllocate"
    class SearchParams:
        class SearchParams(HookFactory):
            _name = "nanoflann::SearchParams::SearchParams"

class cGcPersistentInteractionBuffer:
    class cGcPersistentInteractionBuffer(HookFactory):
        _name = "cGcPersistentInteractionBuffer::cGcPersistentInteractionBuffer"
    class Update(HookFactory):
        _name = "cGcPersistentInteractionBuffer::Update"
    class InitializeFromData(HookFactory):
        _name = "cGcPersistentInteractionBuffer::InitializeFromData"
    class PopulateBufferData(HookFactory):
        _name = "cGcPersistentInteractionBuffer::PopulateBufferData"
    class SaveInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::SaveInteraction"
    class DeleteAllInteractions(HookFactory):
        _name = "cGcPersistentInteractionBuffer::DeleteAllInteractions"
    class StoreInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::StoreInteraction"
    class GetInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GetInteraction"
    class GetInteractionOnPlanet(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GetInteractionOnPlanet"
    class GetInteractionCheckingFurthest(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GetInteractionCheckingFurthest"
    class GetNearestInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GetNearestInteraction"
    class LoadGalacticAddressBuffers(HookFactory):
        _name = "cGcPersistentInteractionBuffer::LoadGalacticAddressBuffers"
    class RegionHasInteractionsPlanetPosition(HookFactory):
        _name = "cGcPersistentInteractionBuffer::RegionHasInteractionsPlanetPosition"
    class InternalDoTreeRebuildNoLock(HookFactory):
        _name = "cGcPersistentInteractionBuffer::InternalDoTreeRebuildNoLock"
    class GenerateHashMessage(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GenerateHashMessage"
    class GenerateSyncMessage(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GenerateSyncMessage"
    class ApplySyncMessage(HookFactory):
        _name = "cGcPersistentInteractionBuffer::ApplySyncMessage"
    class GenerateHashValue(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GenerateHashValue"
    class GetMatchingInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::GetMatchingInteraction"
    class ClearInteraction(HookFactory):
        _name = "cGcPersistentInteractionBuffer::ClearInteraction"
    class ShouldSyncWithPlayer(HookFactory):
        _name = "cGcPersistentInteractionBuffer::ShouldSyncWithPlayer"

class cGcNetworkBufferHash:
    class GetHashValue(HookFactory):
        _name = "cGcNetworkBufferHash::GetHashValue"
    class EnsureMinimumChunks(HookFactory):
        _name = "cGcNetworkBufferHash::EnsureMinimumChunks"
    class DebugValidateChunkHashValues(HookFactory):
        _name = "cGcNetworkBufferHash::DebugValidateChunkHashValues"
    class SyncHashOffsetValue(HookFactory):
        _name = "cGcNetworkBufferHash::SyncHashOffsetValue"
    class Initialise(HookFactory):
        _name = "cGcNetworkBufferHash::Initialise"
    class ClearHashes(HookFactory):
        _name = "cGcNetworkBufferHash::ClearHashes"
    class OnBufferRangeAdded(HookFactory):
        _name = "cGcNetworkBufferHash::OnBufferRangeAdded"
    class OnBufferRangeRemoved(HookFactory):
        _name = "cGcNetworkBufferHash::OnBufferRangeRemoved"
    class OnBufferRangeCleared(HookFactory):
        _name = "cGcNetworkBufferHash::OnBufferRangeCleared"
    class OnBufferRangeSet(HookFactory):
        _name = "cGcNetworkBufferHash::OnBufferRangeSet"

class cGcBaseBuildingPersistentBuffer:
    class BaseBuildingPersistentData:
        class IsValid(HookFactory):
            _name = "cGcBaseBuildingPersistentBuffer::BaseBuildingPersistentData::IsValid"
        class BaseBuildingPersistentData(HookFactory):
            _name = "cGcBaseBuildingPersistentBuffer::BaseBuildingPersistentData::BaseBuildingPersistentData"
    class GenerateHashValue(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::GenerateHashValue"
    class GenerateHashMessage(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::GenerateHashMessage"
    class GenerateSyncMessage(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::GenerateSyncMessage"
    class ApplySyncMessage(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::ApplySyncMessage"
    class InitializeFromData(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::InitializeFromData"
    class RefundBlacklistedBuildingObjects(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::RefundBlacklistedBuildingObjects"
    class StoreBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::StoreBaseBuildingObject"
    class UpdateBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::UpdateBaseBuildingObject"
    class GetObjectCountsById(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::GetObjectCountsById"
    class HasNetworkOwner(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::HasNetworkOwner"
    class RemoveDataFromRegion(HookFactory):
        _name = "cGcBaseBuildingPersistentBuffer::RemoveDataFromRegion"

class cGcBaseBuildingGlobalBuffer:
    class cGcBaseBuildingGlobalBuffer(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::cGcBaseBuildingGlobalBuffer"
    class PopulateBufferData(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::PopulateBufferData"
    class SetBufferOwnerId(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::SetBufferOwnerId"
    class FindBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::FindBaseBuildingObject"
    class UpdateBaseBuildingObjectTimestamp(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::UpdateBaseBuildingObjectTimestamp"
    class GetBaseBuildingObjectData(HookFactory):
        _name = "cGcBaseBuildingGlobalBuffer::GetBaseBuildingObjectData"

class cGcWonderRecordCustomData:
    class cGcWonderRecordCustomData(HookFactory):
        _name = "cGcWonderRecordCustomData::cGcWonderRecordCustomData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderRecordCustomData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWonderRecordCustomData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcWonderRecordCustomData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWonderRecordCustomData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWonderRecordCustomData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcWonderRecordCustomData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderRecordCustomData::WriteToXMLNode"

class cGcWonderData:
    class sDiscoveryData:
        class sDiscoveryData(HookFactory):
            _name = "cGcWonderData::sDiscoveryData::sDiscoveryData"
        class SetData(HookFactory):
            _name = "cGcWonderData::sDiscoveryData::SetData"
    class sPlanetData:
        class sPlanetData(HookFactory):
            _name = "cGcWonderData::sPlanetData::sPlanetData"
    class sModelResData:
        class sModelResData(HookFactory):
            _name = "cGcWonderData::sModelResData::sModelResData"
    class sCreatureData:
        class sCreatureData(HookFactory):
            _name = "cGcWonderData::sCreatureData::sCreatureData"
    class cGcWonderData(HookFactory):
        _name = "cGcWonderData::cGcWonderData"
    class SetRecord(HookFactory):
        _name = "cGcWonderData::SetRecord"
    class UpdateDiscoverySearch(HookFactory):
        _name = "cGcWonderData::UpdateDiscoverySearch"
    class UpdateGenerateResourceData(HookFactory):
        _name = "cGcWonderData::UpdateGenerateResourceData"
    class UpdateResourceLoad(HookFactory):
        _name = "cGcWonderData::UpdateResourceLoad"
    class CacheResourceRenderParams(HookFactory):
        _name = "cGcWonderData::CacheResourceRenderParams"
    class FillWikiItemData(HookFactory):
        _name = "cGcWonderData::FillWikiItemData"
    class GeneratePlanetDescriptionString(HookFactory):
        _name = "cGcWonderData::GeneratePlanetDescriptionString"
    class GenerateCreatureDescriptionString(HookFactory):
        _name = "cGcWonderData::GenerateCreatureDescriptionString"
    class GenerateFloraDescriptionString(HookFactory):
        _name = "cGcWonderData::GenerateFloraDescriptionString"
    class GenerateMineralDescriptionString(HookFactory):
        _name = "cGcWonderData::GenerateMineralDescriptionString"
    class GetCustomNameString(HookFactory):
        _name = "cGcWonderData::GetCustomNameString"

class cGcPlanetGenerationWonderQuery:
    class cGcPlanetGenerationWonderQuery(HookFactory):
        _name = "cGcPlanetGenerationWonderQuery::cGcPlanetGenerationWonderQuery"

class cGcApplicationBaseLoadingState:
    class cGcApplicationBaseLoadingState(HookFactory):
        _name = "cGcApplicationBaseLoadingState::cGcApplicationBaseLoadingState"
    class Prepare(HookFactory):
        _name = "cGcApplicationBaseLoadingState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationBaseLoadingState::Update"
    class Release(HookFactory):
        _name = "cGcApplicationBaseLoadingState::Release"
    class Render(HookFactory):
        _name = "cGcApplicationBaseLoadingState::Render"

class cTk2dText:
    class SetSize(HookFactory):
        _name = "cTk2dText::SetSize"
    class Construct(HookFactory):
        _name = "cTk2dText::Construct"
        _overload: overloads.cTk2dText.Construct.overloads = "cTk2dText *, const cTkVector2 *, const cTkVector2 *, const cTkVector2 *, const cTk2dTextPreset *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk2dText.Construct.overloads):
            cls._overload = overload_args
            return cls
    class Render(HookFactory):
        _name = "cTk2dText::Render"
    class SetTextHeight(HookFactory):
        _name = "cTk2dText::SetTextHeight"

class cGcApplicationSimulationState:
    class cGcApplicationSimulationState(HookFactory):
        _name = "cGcApplicationSimulationState::cGcApplicationSimulationState"
    class Construct(HookFactory):
        _name = "cGcApplicationSimulationState::Construct"
    class Destruct(HookFactory):
        _name = "cGcApplicationSimulationState::Destruct"
    class Prepare(HookFactory):
        _name = "cGcApplicationSimulationState::Prepare"
    class DoThreadedUpdate(HookFactory):
        _name = "cGcApplicationSimulationState::DoThreadedUpdate"
    class ThreadedUpdate(HookFactory):
        _name = "cGcApplicationSimulationState::ThreadedUpdate"
    class Release(HookFactory):
        _name = "cGcApplicationSimulationState::Release"
    class ThreadSyncPoint(HookFactory):
        _name = "cGcApplicationSimulationState::ThreadSyncPoint"
    class BuildRenderQueue(HookFactory):
        _name = "cGcApplicationSimulationState::BuildRenderQueue"
    class Render(HookFactory):
        _name = "cGcApplicationSimulationState::Render"

class cGcApplicationState:
    class cGcApplicationState(HookFactory):
        _name = "cGcApplicationState::cGcApplicationState"

class cGcApplicationUGCBaseViewerState:
    class cGcApplicationUGCBaseViewerState(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::cGcApplicationUGCBaseViewerState"
    class Construct(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::Prepare"
    class SlotComponents:
        class Clear(HookFactory):
            _name = "cGcApplicationUGCBaseViewerState::SlotComponents::Clear"
        class Resolve(HookFactory):
            _name = "cGcApplicationUGCBaseViewerState::SlotComponents::Resolve"
        class SetPreviewImage(HookFactory):
            _name = "cGcApplicationUGCBaseViewerState::SlotComponents::SetPreviewImage"
    class Release(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::Release"
    class LoadAndSetupUI(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::LoadAndSetupUI"
    class UnloadAndDiscardUI(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::UnloadAndDiscardUI"
    class RenderAnimatedBackground(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::RenderAnimatedBackground"
    class RenderCursor(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::RenderCursor"
    class DoPageDots(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::DoPageDots"
    class CustomIconFX(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::CustomIconFX"
    class Render(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::Render"
    class DoUpdateLogicDuringRender(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::DoUpdateLogicDuringRender"
    class UpdateUGCDetailsDownloading(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::UpdateUGCDetailsDownloading"
    class UpdateDeletionWarningDlg(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::UpdateDeletionWarningDlg"
    class Update(HookFactory):
        _name = "cGcApplicationUGCBaseViewerState::Update"

class cTkMetaDataEnumLookup:
    class Lookup(HookFactory):
        _name = "cTkMetaDataEnumLookup::Lookup"

class cGcNGuiElement:
    class Resized(HookFactory):
        _name = "cGcNGuiElement::Resized"
    class SetPosition(HookFactory):
        _name = "cGcNGuiElement::SetPosition"
        _overload: overloads.cGcNGuiElement.SetPosition.overloads = "cGcNGuiElement *, float, float, cGcNGuiElement::PositionType"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNGuiElement.SetPosition.overloads):
            cls._overload = overload_args
            return cls
    class GetAlignment(HookFactory):
        _name = "cGcNGuiElement::GetAlignment"
    class CommitIdToMap(HookFactory):
        _name = "cGcNGuiElement::CommitIdToMap"
    class CommonRenderPositioning(HookFactory):
        _name = "cGcNGuiElement::CommonRenderPositioning"
    class RenderTreeControls(HookFactory):
        _name = "cGcNGuiElement::RenderTreeControls"
    class IsParentHiddenRecursive(HookFactory):
        _name = "cGcNGuiElement::IsParentHiddenRecursive"
    class SelectInEditor(HookFactory):
        _name = "cGcNGuiElement::SelectInEditor"
    class Render(HookFactory):
        _name = "cGcNGuiElement::Render"
    class GetPosition(HookFactory):
        _name = "cGcNGuiElement::GetPosition"
    class ForceAspect(HookFactory):
        _name = "cGcNGuiElement::ForceAspect"
    class ApplyVROverrides_Layout_Position(HookFactory):
        _name = "cGcNGuiElement::ApplyVROverrides_Layout_Position"
    class ApplyAccessibleOverrides_Layout_Position(HookFactory):
        _name = "cGcNGuiElement::ApplyAccessibleOverrides_Layout_Position"
    class IsMouseInside(HookFactory):
        _name = "cGcNGuiElement::IsMouseInside"
    class EditLayout(HookFactory):
        _name = "cGcNGuiElement::EditLayout"
    class ElementScale(HookFactory):
        _name = "cGcNGuiElement::ElementScale"
    class EditElement(HookFactory):
        _name = "cGcNGuiElement::EditElement"
    class EditGraphicPreset(HookFactory):
        _name = "cGcNGuiElement::EditGraphicPreset"
    class EditPresets(HookFactory):
        _name = "cGcNGuiElement::EditPresets"
    class RenderUIEditorToolbar(HookFactory):
        _name = "cGcNGuiElement::RenderUIEditorToolbar"
    class SetImage(HookFactory):
        _name = "cGcNGuiElement::SetImage"
    class Copy(HookFactory):
        _name = "cGcNGuiElement::Copy"

class cTk3dLayer:
    class Prepare(HookFactory):
        _name = "cTk3dLayer::Prepare"
    class Update(HookFactory):
        _name = "cTk3dLayer::Update"
    class ConstructDynamicSize(HookFactory):
        _name = "cTk3dLayer::ConstructDynamicSize"
        _overload: overloads.cTk3dLayer.ConstructDynamicSize.overloads = "cTk3dLayer *, const cTkVector2 *, const cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk3dLayer.ConstructDynamicSize.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cTk3dLayer::Construct"
        _overload: overloads.cTk3dLayer.Construct.overloads = "cTk3dLayer *, const cTkVector2 *, const cTkVector2 *, const cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk3dLayer.Construct.overloads):
            cls._overload = overload_args
            return cls
    class SetPosition(HookFactory):
        _name = "cTk3dLayer::SetPosition"
        _overload: overloads.cTk3dLayer.SetPosition.overloads = "cTk3dLayer *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk3dLayer.SetPosition.overloads):
            cls._overload = overload_args
            return cls
    class Render(HookFactory):
        _name = "cTk3dLayer::Render"

class cTk2dLayer:
    class SetPosition(HookFactory):
        _name = "cTk2dLayer::SetPosition"
    class GetPosition(HookFactory):
        _name = "cTk2dLayer::GetPosition"
        _overload: overloads.cTk2dLayer.GetPosition.overloads = "cTk2dLayer *, cTkVector2 *, const cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk2dLayer.GetPosition.overloads):
            cls._overload = overload_args
            return cls
    class SetSize(HookFactory):
        _name = "cTk2dLayer::SetSize"
    class GetSize(HookFactory):
        _name = "cTk2dLayer::GetSize"
    class SetScale(HookFactory):
        _name = "cTk2dLayer::SetScale"
    class SetAngle(HookFactory):
        _name = "cTk2dLayer::SetAngle"
    class GetAngle(HookFactory):
        _name = "cTk2dLayer::GetAngle"
    class SetVisible(HookFactory):
        _name = "cTk2dLayer::SetVisible"
    class AddObject(HookFactory):
        _name = "cTk2dLayer::AddObject"
    class CalculateSize(HookFactory):
        _name = "cTk2dLayer::CalculateSize"
    class Construct(HookFactory):
        _name = "cTk2dLayer::Construct"
        _overload: overloads.cTk2dLayer.Construct.overloads = "cTk2dLayer *, const cTkVector2 *, const cTkVector2 *, const cTkVector2 *, const cTkColour *"
        @classmethod
        def overload(cls, overload_args: overloads.cTk2dLayer.Construct.overloads):
            cls._overload = overload_args
            return cls
    class ConstructDynamicSize(HookFactory):
        _name = "cTk2dLayer::ConstructDynamicSize"
    class Destruct(HookFactory):
        _name = "cTk2dLayer::Destruct"
    class Prepare(HookFactory):
        _name = "cTk2dLayer::Prepare"
    class Release(HookFactory):
        _name = "cTk2dLayer::Release"
    class RemoveAllObjects(HookFactory):
        _name = "cTk2dLayer::RemoveAllObjects"
    class Render(HookFactory):
        _name = "cTk2dLayer::Render"
    class Update(HookFactory):
        _name = "cTk2dLayer::Update"

class cGcNGui:
    class cGcNGui(HookFactory):
        _name = "cGcNGui::cGcNGui"
    class Render(HookFactory):
        _name = "cGcNGui::Render"
    class RenderWithHandControlCursor(HookFactory):
        _name = "cGcNGui::RenderWithHandControlCursor"
    class Render3d(HookFactory):
        _name = "cGcNGui::Render3d"

class abs(HookFactory):
    _name = "abs"

class cTk2dObject:
    class Construct(HookFactory):
        _name = "cTk2dObject::Construct"
    class GetWorldTopLeft(HookFactory):
        _name = "cTk2dObject::GetWorldTopLeft"
    class GetPosition(HookFactory):
        _name = "cTk2dObject::GetPosition"
    class SetPosition(HookFactory):
        _name = "cTk2dObject::SetPosition"
    class SetSize(HookFactory):
        _name = "cTk2dObject::SetSize"
    class GetSize(HookFactory):
        _name = "cTk2dObject::GetSize"
    class SetAlignment(HookFactory):
        _name = "cTk2dObject::SetAlignment"
    class GetAlignment(HookFactory):
        _name = "cTk2dObject::GetAlignment"
    class SetColour(HookFactory):
        _name = "cTk2dObject::SetColour"
    class GetColour(HookFactory):
        _name = "cTk2dObject::GetColour"

class cTkTimerTemplate:
    class IsFinished(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::IsFinished"
    class GetTime(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::GetTime"
    class GetDuration(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::GetDuration"
    class GetUnitTime(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::GetUnitTime"
    class IsActive(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::IsActive"
    class Start(HookFactory):
        _templates = ("T0", )
        _name = "cTkTimerTemplate<{T0}>::Start"

class cTkLanguageManager:
    class GetInstance(HookFactory):
        _name = "cTkLanguageManager::GetInstance"
    class FindRegionFromPlatform(HookFactory):
        _name = "cTkLanguageManager::FindRegionFromPlatform"

class cTkClock:
    class GetTime(HookFactory):
        _name = "cTkClock::GetTime"
    class Construct(HookFactory):
        _name = "cTkClock::Construct"
    class GetSystemFrequency(HookFactory):
        _name = "cTkClock::GetSystemFrequency"
    class GetSystemTime(HookFactory):
        _name = "cTkClock::GetSystemTime"
    class GetSystemTimeAsSeconds(HookFactory):
        _name = "cTkClock::GetSystemTimeAsSeconds"
    class GetSystemTimeSinceBootAsSeconds(HookFactory):
        _name = "cTkClock::GetSystemTimeSinceBootAsSeconds"
    class InitMinFrameTimeSyncPoint(HookFactory):
        _name = "cTkClock::InitMinFrameTimeSyncPoint"
    class MarkBootTime(HookFactory):
        _name = "cTkClock::MarkBootTime"
    class Prepare(HookFactory):
        _name = "cTkClock::Prepare"
    class Update(HookFactory):
        _name = "cTkClock::Update"
    class WaitForMinFrameTime(HookFactory):
        _name = "cTkClock::WaitForMinFrameTime"
    class ZeroTimeUpdate(HookFactory):
        _name = "cTkClock::ZeroTimeUpdate"

class cTkStringAPI:
    class Format(HookFactory):
        _name = "cTkStringAPI::Format"

class cTkBase2DRenderer:
    class cTkBase2DRenderer(HookFactory):
        _name = "cTkBase2DRenderer::cTkBase2DRenderer"
    class PushMatrix(HookFactory):
        _name = "cTkBase2DRenderer::PushMatrix"
    class AddRotate(HookFactory):
        _name = "cTkBase2DRenderer::AddRotate"
    class AddScale(HookFactory):
        _name = "cTkBase2DRenderer::AddScale"
    class AddTranslate(HookFactory):
        _name = "cTkBase2DRenderer::AddTranslate"
        _overload: overloads.cTkBase2DRenderer.AddTranslate.overloads = "cTkBase2DRenderer *, const cTkVector2 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkBase2DRenderer.AddTranslate.overloads):
            cls._overload = overload_args
            return cls
    class Begin(HookFactory):
        _name = "cTkBase2DRenderer::Begin"
    class ComputeVRQuadTransform(HookFactory):
        _name = "cTkBase2DRenderer::ComputeVRQuadTransform"
    class Disable3dMode(HookFactory):
        _name = "cTkBase2DRenderer::Disable3dMode"
    class Enable3dMode(HookFactory):
        _name = "cTkBase2DRenderer::Enable3dMode"
    class End(HookFactory):
        _name = "cTkBase2DRenderer::End"
    class GetWorldMatrix(HookFactory):
        _name = "cTkBase2DRenderer::GetWorldMatrix"
    class RenderScreenQuad(HookFactory):
        _name = "cTkBase2DRenderer::RenderScreenQuad"
    class SetShader(HookFactory):
        _name = "cTkBase2DRenderer::SetShader"
    class SetTexture(HookFactory):
        _name = "cTkBase2DRenderer::SetTexture"
    class SetZ(HookFactory):
        _name = "cTkBase2DRenderer::SetZ"

class cTk2dRenderer:
    class SetShader(HookFactory):
        _name = "cTk2dRenderer::SetShader"
    class cTk2dRenderer(HookFactory):
        _name = "cTk2dRenderer::cTk2dRenderer"
    class GetInstance(HookFactory):
        _name = "cTk2dRenderer::GetInstance"
    class Begin(HookFactory):
        _name = "cTk2dRenderer::Begin"
    class Construct(HookFactory):
        _name = "cTk2dRenderer::Construct"
    class RenderQuads(HookFactory):
        _name = "cTk2dRenderer::RenderQuads"
    class RenderTriangles(HookFactory):
        _name = "cTk2dRenderer::RenderTriangles"
    class SetTexture(HookFactory):
        _name = "cTk2dRenderer::SetTexture"
    class SetTextureSRT(HookFactory):
        _name = "cTk2dRenderer::SetTextureSRT"

class cTkShader:
    class cTkShader(HookFactory):
        _name = "cTkShader::cTkShader"
        _overload: overloads.cTkShader.cTkShader.overloads = "cTkShader *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkShader.cTkShader.overloads):
            cls._overload = overload_args
            return cls
    class AllocateUniformBuffers(HookFactory):
        _name = "cTkShader::AllocateUniformBuffers"
    class CleanUp(HookFactory):
        _name = "cTkShader::CleanUp"
    class Init(HookFactory):
        _name = "cTkShader::Init"
    class SetShader(HookFactory):
        _name = "cTkShader::SetShader"

class cTkAttachmentManager:
    class cTkAttachmentManager(HookFactory):
        _name = "cTkAttachmentManager::cTkAttachmentManager"
    class FindFirstAttachmentInScene(HookFactory):
        _name = "cTkAttachmentManager::FindFirstAttachmentInScene"
    class AddAttachment(HookFactory):
        _name = "cTkAttachmentManager::AddAttachment"
    class AddComponent(HookFactory):
        _name = "cTkAttachmentManager::AddComponent"
    class AddNodeLookup(HookFactory):
        _name = "cTkAttachmentManager::AddNodeLookup"
    class Construct(HookFactory):
        _name = "cTkAttachmentManager::Construct"
    class Free(HookFactory):
        _name = "cTkAttachmentManager::Free"
    class RemoveAttachment(HookFactory):
        _name = "cTkAttachmentManager::RemoveAttachment"
    class RemoveComponent(HookFactory):
        _name = "cTkAttachmentManager::RemoveComponent"
    class RemoveNodeLookup(HookFactory):
        _name = "cTkAttachmentManager::RemoveNodeLookup"
    class RenderNGui(HookFactory):
        _name = "cTkAttachmentManager::RenderNGui"

class cTkLSystemManager:
    class GetInstance(HookFactory):
        _name = "cTkLSystemManager::GetInstance"
    class CachedLSystem:
        class CachedLSystem(HookFactory):
            _name = "cTkLSystemManager::CachedLSystem::CachedLSystem"
    class LSystem:
        class LSystem(HookFactory):
            _name = "cTkLSystemManager::LSystem::LSystem"
            _overload: overloads.cTkLSystemManager.LSystem.LSystem.overloads = "cTkLSystemManager::LSystem *, cTkLSystemManager::LSystem *"
            @classmethod
            def overload(cls, overload_args: overloads.cTkLSystemManager.LSystem.LSystem.overloads):
                cls._overload = overload_args
                return cls
    class LSystemEntry:
        class LSystemEntry(HookFactory):
            _name = "cTkLSystemManager::LSystemEntry::LSystemEntry"
    class LSystemGlobalRestriction:
        class LSystemGlobalRestriction(HookFactory):
            _name = "cTkLSystemManager::LSystemGlobalRestriction::LSystemGlobalRestriction"
    class LSystemInnerRule:
        class LSystemInnerRule(HookFactory):
            _name = "cTkLSystemManager::LSystemInnerRule::LSystemInnerRule"
    class LSystemRule:
        class LSystemRule(HookFactory):
            _name = "cTkLSystemManager::LSystemRule::LSystemRule"
        class GetResHandle(HookFactory):
            _name = "cTkLSystemManager::LSystemRule::GetResHandle"
    class AddLSystem(HookFactory):
        _name = "cTkLSystemManager::AddLSystem"
    class AreResourcesAwaitingLoad(HookFactory):
        _name = "cTkLSystemManager::AreResourcesAwaitingLoad"
    class Construct(HookFactory):
        _name = "cTkLSystemManager::Construct"
    class CreateAtLeastRestrictionChain(HookFactory):
        _name = "cTkLSystemManager::CreateAtLeastRestrictionChain"
    class Generate(HookFactory):
        _name = "cTkLSystemManager::Generate"
    class GenerateLSystemSampleByID(HookFactory):
        _name = "cTkLSystemManager::GenerateLSystemSampleByID"
    class GenerateProceduralLSystem(HookFactory):
        _name = "cTkLSystemManager::GenerateProceduralLSystem"
        _overload: overloads.cTkLSystemManager.GenerateProceduralLSystem.overloads = "cTkLSystemManager *, TkHandle, int, const cTkSeed *, const cTkMatrix34 *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkLSystemManager.GenerateProceduralLSystem.overloads):
            cls._overload = overload_args
            return cls
    class GenerateStep(HookFactory):
        _name = "cTkLSystemManager::GenerateStep"
    class GenerateVariants(HookFactory):
        _name = "cTkLSystemManager::GenerateVariants"
    class GetLSystemSampleAABBByID(HookFactory):
        _name = "cTkLSystemManager::GetLSystemSampleAABBByID"
    class GetLSystemSampleSizeByID(HookFactory):
        _name = "cTkLSystemManager::GetLSystemSampleSizeByID"
    class GetLocatorNode(HookFactory):
        _name = "cTkLSystemManager::GetLocatorNode"
    class GetLocatorType(HookFactory):
        _name = "cTkLSystemManager::GetLocatorType"
    class GetVariantAmount(HookFactory):
        _name = "cTkLSystemManager::GetVariantAmount"
    class IncreaseNodeRuleCount(HookFactory):
        _name = "cTkLSystemManager::IncreaseNodeRuleCount"
    class LoadLSystemSamples(HookFactory):
        _name = "cTkLSystemManager::LoadLSystemSamples"
    class LoadRuleSystem(HookFactory):
        _name = "cTkLSystemManager::LoadRuleSystem"
    class MakeInnerRule(HookFactory):
        _name = "cTkLSystemManager::MakeInnerRule"
    class MakeLocatorEntry(HookFactory):
        _name = "cTkLSystemManager::MakeLocatorEntry"
    class MakeRule(HookFactory):
        _name = "cTkLSystemManager::MakeRule"
    class MergeRuleSystem(HookFactory):
        _name = "cTkLSystemManager::MergeRuleSystem"
    class PrepareGeneration(HookFactory):
        _name = "cTkLSystemManager::PrepareGeneration"
    class Release(HookFactory):
        _name = "cTkLSystemManager::Release"
    class RenderNGui(HookFactory):
        _name = "cTkLSystemManager::RenderNGui"
    class RenderNGuiCallback(HookFactory):
        _name = "cTkLSystemManager::RenderNGuiCallback"
    class SelectEntry(HookFactory):
        _name = "cTkLSystemManager::SelectEntry"
    class Update(HookFactory):
        _name = "cTkLSystemManager::Update"
    class UpdateRender(HookFactory):
        _name = "cTkLSystemManager::UpdateRender"

class cTkModelDressroom:
    class GetInstance(HookFactory):
        _name = "cTkModelDressroom::GetInstance"
    class DressMaterial(HookFactory):
        _name = "cTkModelDressroom::DressMaterial"
    class EnqueueSetDressedMaterialUniform(HookFactory):
        _name = "cTkModelDressroom::EnqueueSetDressedMaterialUniform"
    class GetIndexOfModel(HookFactory):
        _name = "cTkModelDressroom::GetIndexOfModel"
    class IsModelDressed(HookFactory):
        _name = "cTkModelDressroom::IsModelDressed"
    class DressedModel:
        class MaterialExtraction(HookFactory):
            _name = "cTkModelDressroom::DressedModel::MaterialExtraction"
        class RevertMaterial(HookFactory):
            _name = "cTkModelDressroom::DressedModel::RevertMaterial"
    class Prepare(HookFactory):
        _name = "cTkModelDressroom::Prepare"
    class RenderNGui(HookFactory):
        _name = "cTkModelDressroom::RenderNGui"
    class RenderNGuiCallback(HookFactory):
        _name = "cTkModelDressroom::RenderNGuiCallback"
    class Revert(HookFactory):
        _name = "cTkModelDressroom::Revert"
    class RevertAll(HookFactory):
        _name = "cTkModelDressroom::RevertAll"
    class RevertNoDelete(HookFactory):
        _name = "cTkModelDressroom::RevertNoDelete"
    class SetDressedMaterialUniform(HookFactory):
        _name = "cTkModelDressroom::SetDressedMaterialUniform"
    class SetDressedParamStr(HookFactory):
        _name = "cTkModelDressroom::SetDressedParamStr"

class cGcApplicationGlobalLoadState:
    class Prepare(HookFactory):
        _name = "cGcApplicationGlobalLoadState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationGlobalLoadState::Update"
    class Release(HookFactory):
        _name = "cGcApplicationGlobalLoadState::Release"

class cGcURIEncoder:
    class GetInstance(HookFactory):
        _name = "cGcURIEncoder::GetInstance"

class cTkTextStyle:
    class RenderBatchPlain(HookFactory):
        _name = "cTkTextStyle::RenderBatchPlain"
    class BuildPlainCharacter(HookFactory):
        _name = "cTkTextStyle::BuildPlainCharacter"
    class RenderPlain(HookFactory):
        _name = "cTkTextStyle::RenderPlain"
    class GetTextWidth(HookFactory):
        _name = "cTkTextStyle::GetTextWidth"
    class WriteParagraph(HookFactory):
        _name = "cTkTextStyle::WriteParagraph"
    class WriteSentence(HookFactory):
        _name = "cTkTextStyle::WriteSentence"
    class WriteText(HookFactory):
        _name = "cTkTextStyle::WriteText"

class cGcNPCPlacementComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNPCPlacementComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNPCPlacementComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcNPCPlacementComponent::DefaultRenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcNPCPlacementComponent::GetTypedComponent"
    class GetPlacements(HookFactory):
        _name = "cGcNPCPlacementComponent::GetPlacements"
    class OnAttached(HookFactory):
        _name = "cGcNPCPlacementComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcNPCPlacementComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcNPCPlacementComponent::Update"
    class OverrideAndRevertHireableNPCs(HookFactory):
        _name = "cGcNPCPlacementComponent::OverrideAndRevertHireableNPCs"
    class GenerateNPCID(HookFactory):
        _name = "cGcNPCPlacementComponent::GenerateNPCID"
    class GeneratePlacements(HookFactory):
        _name = "cGcNPCPlacementComponent::GeneratePlacements"
    class IsControlledByThisSpawner(HookFactory):
        _name = "cGcNPCPlacementComponent::IsControlledByThisSpawner"
    class AddNPC(HookFactory):
        _name = "cGcNPCPlacementComponent::AddNPC"
    class SpawnNPC(HookFactory):
        _name = "cGcNPCPlacementComponent::SpawnNPC"
    class SpawnShipNPC(HookFactory):
        _name = "cGcNPCPlacementComponent::SpawnShipNPC"
    class Release(HookFactory):
        _name = "cGcNPCPlacementComponent::Release"
    class RemovePlaced(HookFactory):
        _name = "cGcNPCPlacementComponent::RemovePlaced"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcNPCPlacementComponent::FindFirstTypedComponent"

class ComponentInstancercGcNPCPlacementComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcNPCPlacementComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNPCPlacementComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCPlacementComponent::ConstructInstance"

class ComponentInstancercGcPlayerControlComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerControlComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerControlComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerControlComponent::ConstructInstance"

class cGcApplicationLocalLoadState:
    class Construct(HookFactory):
        _name = "cGcApplicationLocalLoadState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationLocalLoadState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationLocalLoadState::Update"
    class GetRespawnReason(HookFactory):
        _name = "cGcApplicationLocalLoadState::GetRespawnReason"
    class Render(HookFactory):
        _name = "cGcApplicationLocalLoadState::Render"
    class Release(HookFactory):
        _name = "cGcApplicationLocalLoadState::Release"
    class Event(HookFactory):
        _name = "cGcApplicationLocalLoadState::Event"

class cGcPresetDualPMap:
    class cGcPresetDualPMap(HookFactory):
        _name = "cGcPresetDualPMap::cGcPresetDualPMap"
    class Apply(HookFactory):
        _name = "cGcPresetDualPMap::Apply"

class cGcPresetTerrainTexture:
    class Apply(HookFactory):
        _name = "cGcPresetTerrainTexture::Apply"

class cGcApplicationScratchpadState:
    class CustomData:
        class Update(HookFactory):
            _name = "cGcApplicationScratchpadState::CustomData::Update"
        class RenderNGui(HookFactory):
            _name = "cGcApplicationScratchpadState::CustomData::RenderNGui"
    class StateData:
        class StateData(HookFactory):
            _name = "cGcApplicationScratchpadState::StateData::StateData"
    class Prepare(HookFactory):
        _name = "cGcApplicationScratchpadState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationScratchpadState::Update"
    class RenderNGui(HookFactory):
        _name = "cGcApplicationScratchpadState::RenderNGui"
    class Render(HookFactory):
        _name = "cGcApplicationScratchpadState::Render"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcApplicationScratchpadState::RenderNGuiCallback"

class cGcApplicationShutdownState:
    class Prepare(HookFactory):
        _name = "cGcApplicationShutdownState::Prepare"
    class Update(HookFactory):
        _name = "cGcApplicationShutdownState::Update"

class cTkInteractivityManager:
    class GetInstance(HookFactory):
        _name = "cTkInteractivityManager::GetInstance"

class cTkTextStyleOutline:
    class Render(HookFactory):
        _name = "cTkTextStyleOutline::Render"

class cGcBaseMiniPortalComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcBaseMiniPortalComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcBaseMiniPortalComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcBaseMiniPortalComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcBaseMiniPortalComponent::FindFirstTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcBaseMiniPortalComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcBaseMiniPortalComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcBaseMiniPortalComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBaseMiniPortalComponent::UpdateRender"
    class Release(HookFactory):
        _name = "cGcBaseMiniPortalComponent::Release"
    class FindNextPortalDestination(HookFactory):
        _name = "cGcBaseMiniPortalComponent::FindNextPortalDestination"
    class TeleportToNextPortal(HookFactory):
        _name = "cGcBaseMiniPortalComponent::TeleportToNextPortal"
    class TeleportObject(HookFactory):
        _name = "cGcBaseMiniPortalComponent::TeleportObject"
    class CheckEnabled(HookFactory):
        _name = "cGcBaseMiniPortalComponent::CheckEnabled"
    class GetAbandonedFreighterComponent(HookFactory):
        _name = "cGcBaseMiniPortalComponent::GetAbandonedFreighterComponent"
    class TriggerTeleport(HookFactory):
        _name = "cGcBaseMiniPortalComponent::TriggerTeleport"

class ComponentInstancercGcBaseMiniPortalComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcBaseMiniPortalComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcBaseMiniPortalComponent::ConstructInstance"

class ComponentInstancercTkInstanceWindComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkInstanceWindComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercTkInstanceWindComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkInstanceWindComponent::ConstructInstance"

class ComponentInstancercGcLadderComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcLadderComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcLadderComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcLadderComponent::ConstructInstance"

class cTkScreenshot:
    class GetInstance(HookFactory):
        _name = "cTkScreenshot::GetInstance"
    class FormatAsTGA(HookFactory):
        _name = "cTkScreenshot::FormatAsTGA"
    class Render(HookFactory):
        _name = "cTkScreenshot::Render"
    class SavePendingScreenshots(HookFactory):
        _name = "cTkScreenshot::SavePendingScreenshots"

class cTkWindManager:
    class UpdateVector(HookFactory):
        _name = "cTkWindManager::UpdateVector"
    class Update(HookFactory):
        _name = "cTkWindManager::Update"
    class cTkWindManager(HookFactory):
        _name = "cTkWindManager::cTkWindManager"
    class WindInfo:
        class WindInfo(HookFactory):
            _name = "cTkWindManager::WindInfo::WindInfo"

class cGcApplicationSmokeTestState:
    class Update(HookFactory):
        _name = "cGcApplicationSmokeTestState::Update"
    class AssertCallback(HookFactory):
        _name = "cGcApplicationSmokeTestState::AssertCallback"
    class Construct(HookFactory):
        _name = "cGcApplicationSmokeTestState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationSmokeTestState::Prepare"
    class ThreadedUpdate(HookFactory):
        _name = "cGcApplicationSmokeTestState::ThreadedUpdate"
    class ThreadSyncPoint(HookFactory):
        _name = "cGcApplicationSmokeTestState::ThreadSyncPoint"
    class Render(HookFactory):
        _name = "cGcApplicationSmokeTestState::Render"

class EnqueueApplyShadowMask(HookFactory):
    _name = "EnqueueApplyShadowMask"

class SetGlobalJitterValues(HookFactory):
    _name = "SetGlobalJitterValues"

class EnableLightShafts(HookFactory):
    _name = "EnableLightShafts"

class EnqueueTerrainStageSettings(HookFactory):
    _name = "EnqueueTerrainStageSettings"

class RenderNGuiUI(HookFactory):
    _name = "RenderNGuiUI"

class GetCameraFovAdjust(HookFactory):
    _name = "GetCameraFovAdjust"

class cTkAttachment:
    class GetAttachment(HookFactory):
        _name = "cTkAttachment::GetAttachment"
    class PrepareComponents(HookFactory):
        _name = "cTkAttachment::PrepareComponents"
    class PrepareNode(HookFactory):
        _name = "cTkAttachment::PrepareNode"
    class FindAttachment(HookFactory):
        _name = "cTkAttachment::FindAttachment"
    class FindNumAttachments(HookFactory):
        _name = "cTkAttachment::FindNumAttachments"
    class FindFirstAttachmentWithComponent(HookFactory):
        _templates = ("T0", )
        _name = "cTkAttachment::FindFirstAttachmentWithComponent<{T0}>"
    class SaveData(HookFactory):
        _name = "cTkAttachment::SaveData"

class cTkMatrix44:
    class DeterminantPrecise(HookFactory):
        _name = "cTkMatrix44::DeterminantPrecise"
    class InvertedPrecise(HookFactory):
        _name = "cTkMatrix44::InvertedPrecise"
    class Determinant(HookFactory):
        _name = "cTkMatrix44::Determinant"
    class Inverted(HookFactory):
        _name = "cTkMatrix44::Inverted"
    class Decompose(HookFactory):
        _name = "cTkMatrix44::Decompose"
    class cTkMatrix44(HookFactory):
        _name = "cTkMatrix44::cTkMatrix44"

class cGcPlanet:
    class GetPosition(HookFactory):
        _name = "cGcPlanet::GetPosition"
    class IsPositionUnderwater(HookFactory):
        _name = "cGcPlanet::IsPositionUnderwater"
    class GetShipStartBuilding(HookFactory):
        _name = "cGcPlanet::GetShipStartBuilding"
    class cGcPlanet(HookFactory):
        _name = "cGcPlanet::cGcPlanet"
    class GetRegionRadiusForSize(HookFactory):
        _name = "cGcPlanet::GetRegionRadiusForSize"
    class Construct(HookFactory):
        _name = "cGcPlanet::Construct"
    class Prepare(HookFactory):
        _name = "cGcPlanet::Prepare"
    class PreloadCommonResources(HookFactory):
        _name = "cGcPlanet::PreloadCommonResources"
    class Generate(HookFactory):
        _name = "cGcPlanet::Generate"
    class UpdateTextures(HookFactory):
        _name = "cGcPlanet::UpdateTextures"
    class PostPrepareTasks(HookFactory):
        _name = "cGcPlanet::PostPrepareTasks"
    class UpdatePhase1(HookFactory):
        _name = "cGcPlanet::UpdatePhase1"
    class UpdatePhase2(HookFactory):
        _name = "cGcPlanet::UpdatePhase2"
    class UpdateClouds(HookFactory):
        _name = "cGcPlanet::UpdateClouds"
    class UpdateTargetGravityMultiplier(HookFactory):
        _name = "cGcPlanet::UpdateTargetGravityMultiplier"
    class UpdateGravity(HookFactory):
        _name = "cGcPlanet::UpdateGravity"
    class UpdateWeather(HookFactory):
        _name = "cGcPlanet::UpdateWeather"
    class UpdateRender(HookFactory):
        _name = "cGcPlanet::UpdateRender"
    class SetSentinelCrimeResponse(HookFactory):
        _name = "cGcPlanet::SetSentinelCrimeResponse"
    class FulfillResourceLoadingRequests(HookFactory):
        _name = "cGcPlanet::FulfillResourceLoadingRequests"
    class SetPlanetUniforms(HookFactory):
        _name = "cGcPlanet::SetPlanetUniforms"
    class SetUniform(HookFactory):
        _name = "cGcPlanet::SetUniform"
    class Release(HookFactory):
        _name = "cGcPlanet::Release"
    class ReleaseSpawnData(HookFactory):
        _name = "cGcPlanet::ReleaseSpawnData"
    class ReleaseCreaturesSpawnData(HookFactory):
        _name = "cGcPlanet::ReleaseCreaturesSpawnData"
    class RequestLoadSpawnData(HookFactory):
        _name = "cGcPlanet::RequestLoadSpawnData"
    class RequestLoadCreaturesSpawnData(HookFactory):
        _name = "cGcPlanet::RequestLoadCreaturesSpawnData"
    class GetStormProperties(HookFactory):
        _name = "cGcPlanet::GetStormProperties"
    class GenerateResourceString(HookFactory):
        _name = "cGcPlanet::GenerateResourceString"
    class AppendResourceHintList(HookFactory):
        _name = "cGcPlanet::AppendResourceHintList"
    class GetParent(HookFactory):
        _name = "cGcPlanet::GetParent"
    class GetVoxelColour(HookFactory):
        _name = "cGcPlanet::GetVoxelColour"
    class HasExtremeHazard(HookFactory):
        _name = "cGcPlanet::HasExtremeHazard"
    class CreateResources(HookFactory):
        _name = "cGcPlanet::CreateResources"
    class GetTimeOfDayAtPoint(HookFactory):
        _name = "cGcPlanet::GetTimeOfDayAtPoint"
    class GetLightShaftIntensityAtPoint(HookFactory):
        _name = "cGcPlanet::GetLightShaftIntensityAtPoint"
    class GetHeightResult(HookFactory):
        _name = "cGcPlanet::GetHeightResult"
    class RegionHeightAtPoint(HookFactory):
        _name = "cGcPlanet::RegionHeightAtPoint"
    class SetupRegionMap(HookFactory):
        _name = "cGcPlanet::SetupRegionMap"
    class SetupWaterPhysics(HookFactory):
        _name = "cGcPlanet::SetupWaterPhysics"
    class GetUA(HookFactory):
        _name = "cGcPlanet::GetUA"

class cTkMultipleReadersLockWriteJanitor:
    class cTkMultipleReadersLockWriteJanitor(HookFactory):
        _name = "cTkMultipleReadersLockWriteJanitor::cTkMultipleReadersLockWriteJanitor"

class cTkNGuiEditor:
    class DoCategoryEnd(HookFactory):
        _name = "cTkNGuiEditor::DoCategoryEnd"
    class DoCategoryBegin(HookFactory):
        _name = "cTkNGuiEditor::DoCategoryBegin"
    class DoIndentEnd(HookFactory):
        _name = "cTkNGuiEditor::DoIndentEnd"
    class DoIndentBegin(HookFactory):
        _name = "cTkNGuiEditor::DoIndentBegin"
    class DoText(HookFactory):
        _name = "cTkNGuiEditor::DoText"
        _overload: overloads.cTkNGuiEditor.DoText.overloads = "cTkNGuiEditor *, const char *, eNGuiSizeType, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoText.overloads):
            cls._overload = overload_args
            return cls
    class DoEditInt(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiEditor::DoEditInt<{T0}>"
    class DoComboBox(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiEditor::DoComboBox<{T0}>"
    class DoEditID(HookFactory):
        _name = "cTkNGuiEditor::DoEditID"
    class BeginUndo(HookFactory):
        _name = "cTkNGuiEditor::BeginUndo"
    class EndUndo(HookFactory):
        _name = "cTkNGuiEditor::EndUndo"
    class GetFontID(HookFactory):
        _name = "cTkNGuiEditor::GetFontID"
    class IsActive(HookFactory):
        _name = "cTkNGuiEditor::IsActive"
    class cTkNGuiEditor(HookFactory):
        _name = "cTkNGuiEditor::cTkNGuiEditor"
    class HasActivePopup(HookFactory):
        _name = "cTkNGuiEditor::HasActivePopup"
    class AutosaveLayout(HookFactory):
        _name = "cTkNGuiEditor::AutosaveLayout"
    class DoButton(HookFactory):
        _name = "cTkNGuiEditor::DoButton"
    class DoCheckbox(HookFactory):
        _name = "cTkNGuiEditor::DoCheckbox"
    class DoEditColour(HookFactory):
        _name = "cTkNGuiEditor::DoEditColour"
    class DoEditFile(HookFactory):
        _name = "cTkNGuiEditor::DoEditFile"
    class DoEditFloat(HookFactory):
        _name = "cTkNGuiEditor::DoEditFloat"
        _overload: overloads.cTkNGuiEditor.DoEditFloat.overloads = "cTkNGuiEditor *, float *, float, bool, float, int, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoEditFloat.overloads):
            cls._overload = overload_args
            return cls
    class DoEditHex(HookFactory):
        _name = "cTkNGuiEditor::DoEditHex"
    class DoEditHexU64(HookFactory):
        _name = "cTkNGuiEditor::DoEditHexU64"
    class DoEditText(HookFactory):
        _name = "cTkNGuiEditor::DoEditText"
        _overload: overloads.cTkNGuiEditor.DoEditText.overloads = "cTkNGuiEditor *, char *, int, int, eNGuiSizeType, float, float, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoEditText.overloads):
            cls._overload = overload_args
            return cls
    class DoEditVector(HookFactory):
        _name = "cTkNGuiEditor::DoEditVector"
        _overload: overloads.cTkNGuiEditor.DoEditVector.overloads = "cTkNGuiEditor *, const char *, cTkVector2 *, const FloatEditOptions *, const FloatLimits *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoEditVector.overloads):
            cls._overload = overload_args
            return cls
    class DoErrorInline(HookFactory):
        _name = "cTkNGuiEditor::DoErrorInline"
    class DoIconButton(HookFactory):
        _name = "cTkNGuiEditor::DoIconButton"
    class DoIconListItem(HookFactory):
        _name = "cTkNGuiEditor::DoIconListItem"
        _overload: overloads.cTkNGuiEditor.DoIconListItem.overloads = "cTkNGuiEditor *, unsigned int, const char *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoIconListItem.overloads):
            cls._overload = overload_args
            return cls
    class DoLeftPanelBegin(HookFactory):
        _name = "cTkNGuiEditor::DoLeftPanelBegin"
    class DoLeftPanelEndRightPanelBegin(HookFactory):
        _name = "cTkNGuiEditor::DoLeftPanelEndRightPanelBegin"
    class DoRectangle(HookFactory):
        _name = "cTkNGuiEditor::DoRectangle"
    class DoScrollBegin(HookFactory):
        _name = "cTkNGuiEditor::DoScrollBegin"
    class DoScrollEnd(HookFactory):
        _name = "cTkNGuiEditor::DoScrollEnd"
    class DoSeparator(HookFactory):
        _name = "cTkNGuiEditor::DoSeparator"
    class DoSliderFloat(HookFactory):
        _name = "cTkNGuiEditor::DoSliderFloat"
        _overload: overloads.cTkNGuiEditor.DoSliderFloat.overloads = "cTkNGuiEditor *, float *, float, float, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.DoSliderFloat.overloads):
            cls._overload = overload_args
            return cls
    class DoSpacing(HookFactory):
        _name = "cTkNGuiEditor::DoSpacing"
    class DoTextLabel(HookFactory):
        _name = "cTkNGuiEditor::DoTextLabel"
    class DoToggle(HookFactory):
        _name = "cTkNGuiEditor::DoToggle"
    class DoTreeNodeBegin(HookFactory):
        _name = "cTkNGuiEditor::DoTreeNodeBegin"
    class DoTreeNodeEnd(HookFactory):
        _name = "cTkNGuiEditor::DoTreeNodeEnd"
    class DoVerticalScrollBegin(HookFactory):
        _name = "cTkNGuiEditor::DoVerticalScrollBegin"
    class DoVerticalScrollEnd(HookFactory):
        _name = "cTkNGuiEditor::DoVerticalScrollEnd"
    class DoesParentTreePassFilter(HookFactory):
        _name = "cTkNGuiEditor::DoesParentTreePassFilter"
    class GetActiveGraphicStyle(HookFactory):
        _name = "cTkNGuiEditor::GetActiveGraphicStyle"
    class GetComponentSize(HookFactory):
        _name = "cTkNGuiEditor::GetComponentSize"
    class GetGraphicStyle(HookFactory):
        _name = "cTkNGuiEditor::GetGraphicStyle"
    class GetLabelWidth(HookFactory):
        _name = "cTkNGuiEditor::GetLabelWidth"
    class GetLabelWidthWriteable(HookFactory):
        _name = "cTkNGuiEditor::GetLabelWidthWriteable"
    class GetSearchFilter(HookFactory):
        _name = "cTkNGuiEditor::GetSearchFilter"
    class GetSnappingSetting(HookFactory):
        _name = "cTkNGuiEditor::GetSnappingSetting"
    class GetTextStyle(HookFactory):
        _name = "cTkNGuiEditor::GetTextStyle"
    class IsHighlightActive(HookFactory):
        _name = "cTkNGuiEditor::IsHighlightActive"
    class OpenFileBrowser(HookFactory):
        _name = "cTkNGuiEditor::OpenFileBrowser"
        _overload: overloads.cTkNGuiEditor.OpenFileBrowser.overloads = "char *, const char *, const char *, const char *, bool, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiEditor.OpenFileBrowser.overloads):
            cls._overload = overload_args
            return cls
    class PushGraphicStyle(HookFactory):
        _name = "cTkNGuiEditor::PushGraphicStyle"
    class PushTextStyle(HookFactory):
        _name = "cTkNGuiEditor::PushTextStyle"
    class RegisterWindow(HookFactory):
        _name = "cTkNGuiEditor::RegisterWindow"
    class TextEdit(HookFactory):
        _name = "cTkNGuiEditor::TextEdit"

class FloatLimits:
    class FloatLimits(HookFactory):
        _name = "FloatLimits::FloatLimits"

class FloatEditOptions:
    class FloatEditOptions(HookFactory):
        _name = "FloatEditOptions::FloatEditOptions"
        _overload: overloads.FloatEditOptions.FloatEditOptions.overloads = "FloatEditOptions *"
        @classmethod
        def overload(cls, overload_args: overloads.FloatEditOptions.FloatEditOptions.overloads):
            cls._overload = overload_args
            return cls

class TkCalcUniformNameHashNoInl(HookFactory):
    _name = "TkCalcUniformNameHashNoInl"

class cTkHmdBase:
    class GetProjectionMatrix(HookFactory):
        _name = "cTkHmdBase::GetProjectionMatrix"
    class GetGazeMatrix(HookFactory):
        _name = "cTkHmdBase::GetGazeMatrix"
    class GetProjectionRaw(HookFactory):
        _name = "cTkHmdBase::GetProjectionRaw"
    class GetProjectionRawUnscaled(HookFactory):
        _name = "cTkHmdBase::GetProjectionRawUnscaled"
    class cTkHmdBase(HookFactory):
        _name = "cTkHmdBase::cTkHmdBase"
    class BeginVRStartupSequence(HookFactory):
        _name = "cTkHmdBase::BeginVRStartupSequence"
    class Release(HookFactory):
        _name = "cTkHmdBase::Release"
    class EndVRStartupSequence(HookFactory):
        _name = "cTkHmdBase::EndVRStartupSequence"
    class GetFramebufferViewport(HookFactory):
        _name = "cTkHmdBase::GetFramebufferViewport"
    class ResetHeadPosition(HookFactory):
        _name = "cTkHmdBase::ResetHeadPosition"
    class SetHeadResetOrientation(HookFactory):
        _name = "cTkHmdBase::SetHeadResetOrientation"
    class UpdateHeadResetPosition(HookFactory):
        _name = "cTkHmdBase::UpdateHeadResetPosition"

class cGcUGCBasesManager:
    class GetInstance(HookFactory):
        _name = "cGcUGCBasesManager::GetInstance"

class LocalLoadPhase:
    class GetNext(HookFactory):
        _name = "LocalLoadPhase::GetNext"

class cGcNavMeshManager:
    class HasPendingOps(HookFactory):
        _name = "cGcNavMeshManager::HasPendingOps"
    class IsEdgeNavigable(HookFactory):
        _name = "cGcNavMeshManager::IsEdgeNavigable"
    class MeshesAreAdjacent(HookFactory):
        _name = "cGcNavMeshManager::MeshesAreAdjacent"
    class Release(HookFactory):
        _name = "cGcNavMeshManager::Release"
    class FreeNavMesh(HookFactory):
        _name = "cGcNavMeshManager::FreeNavMesh"
    class IsSquareAllPassable(HookFactory):
        _name = "cGcNavMeshManager::IsSquareAllPassable"
    class CanTraverse(HookFactory):
        _name = "cGcNavMeshManager::CanTraverse"
    class GetPolyNeighbors(HookFactory):
        _name = "cGcNavMeshManager::GetPolyNeighbors"
    class PlotPathInRoughDirection(HookFactory):
        _name = "cGcNavMeshManager::PlotPathInRoughDirection"
    class GetInstance(HookFactory):
        _name = "cGcNavMeshManager::GetInstance"
    class cGcNavMeshManager(HookFactory):
        _name = "cGcNavMeshManager::cGcNavMeshManager"
    class FindPolyForPoint(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMeshManager::FindPolyForPoint<{T0}>"

class ScopedTimingBlock:
    class ScopedTimingBlock(HookFactory):
        _name = "ScopedTimingBlock::ScopedTimingBlock"

class GlobalLoadPhase:
    class GetNext(HookFactory):
        _name = "GlobalLoadPhase::GetNext"

class cGcAsyncLoadOps:
    class Run(HookFactory):
        _name = "cGcAsyncLoadOps::Run"

class cGcApplicationTitleScreenState:
    class Construct(HookFactory):
        _name = "cGcApplicationTitleScreenState::Construct"
    class Prepare(HookFactory):
        _name = "cGcApplicationTitleScreenState::Prepare"
    class SetupRenderPipeline(HookFactory):
        _name = "cGcApplicationTitleScreenState::SetupRenderPipeline"
    class Release(HookFactory):
        _name = "cGcApplicationTitleScreenState::Release"
    class LoadAndSetupUI(HookFactory):
        _name = "cGcApplicationTitleScreenState::LoadAndSetupUI"
    class UpdateUserDetails(HookFactory):
        _name = "cGcApplicationTitleScreenState::UpdateUserDetails"
    class Render(HookFactory):
        _name = "cGcApplicationTitleScreenState::Render"
    class Update(HookFactory):
        _name = "cGcApplicationTitleScreenState::Update"
    class ServiceStateChanged(HookFactory):
        _name = "cGcApplicationTitleScreenState::ServiceStateChanged"

class cGcAtlasBroker:
    class Complete(HookFactory):
        _name = "cGcAtlasBroker::Complete"

class cGcAtlasBrokerAuth:
    class Construct(HookFactory):
        _name = "cGcAtlasBrokerAuth::Construct"
    class GenerateAuthServerName(HookFactory):
        _name = "cGcAtlasBrokerAuth::GenerateAuthServerName"
    class Update(HookFactory):
        _name = "cGcAtlasBrokerAuth::Update"
    class HttpHandleAuth(HookFactory):
        _name = "cGcAtlasBrokerAuth::HttpHandleAuth"
    class ProcessPendingNotifications(HookFactory):
        _name = "cGcAtlasBrokerAuth::ProcessPendingNotifications"
    class AuthenticationTokenArrived(HookFactory):
        _name = "cGcAtlasBrokerAuth::AuthenticationTokenArrived"
    class AuthenticationTokenFailed(HookFactory):
        _name = "cGcAtlasBrokerAuth::AuthenticationTokenFailed"
    class cGcAtlasBrokerAuth(HookFactory):
        _name = "cGcAtlasBrokerAuth::cGcAtlasBrokerAuth"

class cGcAtlasBrokerAzure:
    class GetReadyStateCounter(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetReadyStateCounter"
    class Construct(HookFactory):
        _name = "cGcAtlasBrokerAzure::Construct"
    class Destruct(HookFactory):
        _name = "cGcAtlasBrokerAzure::Destruct"
    class Update(HookFactory):
        _name = "cGcAtlasBrokerAzure::Update"
    class IsCallRateLimited(HookFactory):
        _name = "cGcAtlasBrokerAzure::IsCallRateLimited"
    class ConvertTaskDataForPOST(HookFactory):
        _name = "cGcAtlasBrokerAzure::ConvertTaskDataForPOST"
    class GetTaskBinaryData(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetTaskBinaryData"
    class Service(HookFactory):
        _name = "cGcAtlasBrokerAzure::Service"
    class Abandon(HookFactory):
        _name = "cGcAtlasBrokerAzure::Abandon"
    class DeleteTaskData(HookFactory):
        _name = "cGcAtlasBrokerAzure::DeleteTaskData"
    class HttpHandleService(HookFactory):
        _name = "cGcAtlasBrokerAzure::HttpHandleService"
    class DoCompletion(HookFactory):
        _name = "cGcAtlasBrokerAzure::DoCompletion"
        _overload: overloads.cGcAtlasBrokerAzure.DoCompletion.overloads = "cGcAtlasBrokerAzure *, cGcIBrokerData *, const cGcAtlasSendRequestDiscoveryExact *, cGcAtlasRecvDiscoveryExact *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAtlasBrokerAzure.DoCompletion.overloads):
            cls._overload = overload_args
            return cls
    class GetName(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetName"
    class Reset(HookFactory):
        _name = "cGcAtlasBrokerAzure::Reset"
    class GetMessagesEnabled(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetMessagesEnabled"
    class GetOpenIdToken(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetOpenIdToken"
    class GetAtlasCommunityData(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetAtlasCommunityData"
    class GetAtlasBaseImagesRoute(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetAtlasBaseImagesRoute"
    class GetAtlasFeaturedBaseImagesRoute(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetAtlasFeaturedBaseImagesRoute"
    class GetAtlasSeasonDataRoute(HookFactory):
        _name = "cGcAtlasBrokerAzure::GetAtlasSeasonDataRoute"

class ServerDataFormat:
    class WriteDiscoveryData(HookFactory):
        _name = "ServerDataFormat::WriteDiscoveryData"
    class ReadDiscoveryData(HookFactory):
        _name = "ServerDataFormat::ReadDiscoveryData"
    class WriteVector3(HookFactory):
        _name = "ServerDataFormat::WriteVector3"
    class ReadVector3(HookFactory):
        _name = "ServerDataFormat::ReadVector3"
    class WriteBaseRequestData(HookFactory):
        _name = "ServerDataFormat::WriteBaseRequestData"
    class ReadBaseObject(HookFactory):
        _name = "ServerDataFormat::ReadBaseObject"
    class ReadBaseDifficultyData(HookFactory):
        _name = "ServerDataFormat::ReadBaseDifficultyData"
    class ReadBaseData(HookFactory):
        _name = "ServerDataFormat::ReadBaseData"
    class WriteBaseData(HookFactory):
        _name = "ServerDataFormat::WriteBaseData"
    class WriteBaseQueriesArray(HookFactory):
        _name = "ServerDataFormat::WriteBaseQueriesArray"
    class ReadTerrainData(HookFactory):
        _name = "ServerDataFormat::ReadTerrainData"
    class WriteTerrainData(HookFactory):
        _name = "ServerDataFormat::WriteTerrainData"
    class ReadMessageData(HookFactory):
        _name = "ServerDataFormat::ReadMessageData"
    class ReadDiscovery(HookFactory):
        _name = "ServerDataFormat::ReadDiscovery"
    class ReadMonumentData(HookFactory):
        _name = "ServerDataFormat::ReadMonumentData"
    class ReadActiveFeaturedBaseHeaderData(HookFactory):
        _name = "ServerDataFormat::ReadActiveFeaturedBaseHeaderData"
    class WriteFeaturesBasesStateChangeArray(HookFactory):
        _name = "ServerDataFormat::WriteFeaturesBasesStateChangeArray"
    class ReadSettlementData(HookFactory):
        _name = "ServerDataFormat::ReadSettlementData"

class ITkDocumentReader:
    class ReadValue(HookFactory):
        _templates = ("T0", )
        _name = "ITkDocumentReader::ReadValue<{T0}>"
        _overload: overloads.ITkDocumentReader.ReadValue.overloads = "ITkDocumentReader *, unsigned __int8 *"
        @classmethod
        def overload(cls, overload_args: overloads.ITkDocumentReader.ReadValue.overloads):
            cls._overload = overload_args
            return cls

class cGcUniverseAddressCoderU64:
    class Decode(HookFactory):
        _name = "cGcUniverseAddressCoderU64::Decode"
    class InSameSystem(HookFactory):
        _name = "cGcUniverseAddressCoderU64::InSameSystem"

class cGcURL:
    class cGcURL(HookFactory):
        _name = "cGcURL::cGcURL"
        _overload: overloads.cGcURL.cGcURL.overloads = "cGcURL *, const cGcURL *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcURL.cGcURL.overloads):
            cls._overload = overload_args
            return cls
    class ParseFromString(HookFactory):
        _name = "cGcURL::ParseFromString"
    class ToString(HookFactory):
        _name = "cGcURL::ToString"

class Http:
    class Request:
        class POST(HookFactory):
            _name = "Http::Request::POST"
    class GetKnownHeaderAsText(HookFactory):
        _name = "Http::GetKnownHeaderAsText"
    class KnownHeader:
        class ToString(HookFactory):
            _name = "Http::KnownHeader::ToString"

class cTkUgcManager:
    class GetInstance(HookFactory):
        _name = "cTkUgcManager::GetInstance"

class TitleScreenPhase:
    class GetNext(HookFactory):
        _name = "TitleScreenPhase::GetNext"

class cTkUserService:
    class GetUserNameA(HookFactory):
        _name = "cTkUserService::GetUserNameA"
    class UserIdentity:
        class UserIdentity(HookFactory):
            _name = "cTkUserService::UserIdentity::UserIdentity"
    class AllowedMultiplayer(HookFactory):
        _name = "cTkUserService::AllowedMultiplayer"
    class RequestUserDisplayName(HookFactory):
        _name = "cTkUserService::RequestUserDisplayName"
    class cTkUserService(HookFactory):
        _name = "cTkUserService::cTkUserService"
    class CheckUserPresence(HookFactory):
        _name = "cTkUserService::CheckUserPresence"
    class GetBranchName(HookFactory):
        _name = "cTkUserService::GetBranchName"
    class RequestAuthenticationToken(HookFactory):
        _name = "cTkUserService::RequestAuthenticationToken"
    class TryGetUserIdentity(HookFactory):
        _name = "cTkUserService::TryGetUserIdentity"
    class Notify_AuthenticationTokenArrived(HookFactory):
        _name = "cTkUserService::Notify_AuthenticationTokenArrived"

class cTk2dImage:
    class Construct(HookFactory):
        _name = "cTk2dImage::Construct"
    class Render(HookFactory):
        _name = "cTk2dImage::Render"

class cGcAtlasTransportWinHttp:
    class GetName(HookFactory):
        _name = "cGcAtlasTransportWinHttp::GetName"
    class Data:
        class ConstructTask(HookFactory):
            _name = "cGcAtlasTransportWinHttp::Data::ConstructTask"
        class TickTask(HookFactory):
            _name = "cGcAtlasTransportWinHttp::Data::TickTask"
        class WinHttpAsyncCallback(HookFactory):
            _name = "cGcAtlasTransportWinHttp::Data::WinHttpAsyncCallback"
        class Construct(HookFactory):
            _name = "cGcAtlasTransportWinHttp::Data::Construct"
    class Construct(HookFactory):
        _name = "cGcAtlasTransportWinHttp::Construct"
    class Destruct(HookFactory):
        _name = "cGcAtlasTransportWinHttp::Destruct"
    class Update(HookFactory):
        _name = "cGcAtlasTransportWinHttp::Update"
    class GetNetworkState(HookFactory):
        _name = "cGcAtlasTransportWinHttp::GetNetworkState"
    class IsTrafficInFlight(HookFactory):
        _name = "cGcAtlasTransportWinHttp::IsTrafficInFlight"
    class RequestHttpAsync(HookFactory):
        _name = "cGcAtlasTransportWinHttp::RequestHttpAsync"

class cGcAtlasManager:
    class Data:
        class Data(HookFactory):
            _name = "cGcAtlasManager::Data::Data"
        class UpdateInternal(HookFactory):
            _name = "cGcAtlasManager::Data::UpdateInternal"
    class Construct(HookFactory):
        _name = "cGcAtlasManager::Construct"
    class Destruct(HookFactory):
        _name = "cGcAtlasManager::Destruct"
    class Update(HookFactory):
        _name = "cGcAtlasManager::Update"
    class RenderActivityIcon(HookFactory):
        _name = "cGcAtlasManager::RenderActivityIcon"
    class GetConnectionState(HookFactory):
        _name = "cGcAtlasManager::GetConnectionState"
    class GetDisplayConnectionState(HookFactory):
        _name = "cGcAtlasManager::GetDisplayConnectionState"
    class InternalEnqueueRequest(HookFactory):
        _name = "cGcAtlasManager::InternalEnqueueRequest"
    class CancelRequest(HookFactory):
        _name = "cGcAtlasManager::CancelRequest"
    class PollForRequestCompletion(HookFactory):
        _name = "cGcAtlasManager::PollForRequestCompletion"
    class FetchRequestResult(HookFactory):
        _name = "cGcAtlasManager::FetchRequestResult"
    class FreeRequestResult(HookFactory):
        _name = "cGcAtlasManager::FreeRequestResult"
    class GetAtlasCommunityData(HookFactory):
        _name = "cGcAtlasManager::GetAtlasCommunityData"
    class DoThreadedUpdate(HookFactory):
        _name = "cGcAtlasManager::DoThreadedUpdate"
    class IsConnectionDown(HookFactory):
        _name = "cGcAtlasManager::IsConnectionDown"
    class EnqueueRequest(HookFactory):
        _templates = ("T0", )
        _name = "cGcAtlasManager::EnqueueRequest<{T0}>"

class cGcAtlasSendSubmitBase:
    class cGcAtlasSendSubmitBase(HookFactory):
        _name = "cGcAtlasSendSubmitBase::cGcAtlasSendSubmitBase"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitBase::SetDefaults"

class cGcAtlasSendReport:
    class cGcAtlasSendReport(HookFactory):
        _name = "cGcAtlasSendReport::cGcAtlasSendReport"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendReport::SetDefaults"

class cGcAtlasCommunityData:
    class Update(HookFactory):
        _name = "cGcAtlasCommunityData::Update"

class WideStringFromUTF8(HookFactory):
    _name = "WideStringFromUTF8"

class cGcAudioEmitterDistanceSquish:
    class Update(HookFactory):
        _name = "cGcAudioEmitterDistanceSquish::Update"

class cGcVehicleCheckpointComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcVehicleCheckpointComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcVehicleCheckpointComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcVehicleCheckpointComponent::GetTypedComponent"
    class GetBeamPos(HookFactory):
        _name = "cGcVehicleCheckpointComponent::GetBeamPos"
    class OnAttached(HookFactory):
        _name = "cGcVehicleCheckpointComponent::OnAttached"
    class Release(HookFactory):
        _name = "cGcVehicleCheckpointComponent::Release"
    class Prepare(HookFactory):
        _name = "cGcVehicleCheckpointComponent::Prepare"
    class UpdateRace(HookFactory):
        _name = "cGcVehicleCheckpointComponent::UpdateRace"
    class SetRaceState(HookFactory):
        _name = "cGcVehicleCheckpointComponent::SetRaceState"

class ComponentInstancercGcVehicleCheckpointComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcVehicleCheckpointComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcVehicleCheckpointComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleCheckpointComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleCheckpointComponent::DestructInstance"

class ComponentLoadInstancercGcVehicleCheckpointComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcVehicleCheckpointComponent::Register"

class VmaBlockMetadata_Linear:
    class GetSumFreeSize(HookFactory):
        _name = "VmaBlockMetadata_Linear::GetSumFreeSize"
    class AddPoolStats(HookFactory):
        _name = "VmaBlockMetadata_Linear::AddPoolStats"
    class CalcAllocationStatInfo(HookFactory):
        _name = "VmaBlockMetadata_Linear::CalcAllocationStatInfo"
    class CleanupAfterFree(HookFactory):
        _name = "VmaBlockMetadata_Linear::CleanupAfterFree"
    class FreeAtOffset(HookFactory):
        _name = "VmaBlockMetadata_Linear::FreeAtOffset"
    class GetAllocationCount(HookFactory):
        _name = "VmaBlockMetadata_Linear::GetAllocationCount"
    class GetUnusedRangeSizeMax(HookFactory):
        _name = "VmaBlockMetadata_Linear::GetUnusedRangeSizeMax"
    class Init(HookFactory):
        _name = "VmaBlockMetadata_Linear::Init"
    class IsEmpty(HookFactory):
        _name = "VmaBlockMetadata_Linear::IsEmpty"
    class MakeAllocationsLost(HookFactory):
        _name = "VmaBlockMetadata_Linear::MakeAllocationsLost"
    class MakeRequestedAllocationsLost(HookFactory):
        _name = "VmaBlockMetadata_Linear::MakeRequestedAllocationsLost"
    class PrintDetailedMap(HookFactory):
        _name = "VmaBlockMetadata_Linear::PrintDetailedMap"
    class Validate(HookFactory):
        _name = "VmaBlockMetadata_Linear::Validate"

class cGcPlayerCharacterComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPlayerCharacterComponent::InitData"
    class cGcPlayerCharacterComponent(HookFactory):
        _name = "cGcPlayerCharacterComponent::cGcPlayerCharacterComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcPlayerCharacterComponent::FindFirstTypedComponent"
    class GetFullBodyCurrentAnimationName(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetFullBodyCurrentAnimationName"
    class IsMech(HookFactory):
        _name = "cGcPlayerCharacterComponent::IsMech"
    class OnHit(HookFactory):
        _name = "cGcPlayerCharacterComponent::OnHit"
    class OnAttached(HookFactory):
        _name = "cGcPlayerCharacterComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcPlayerCharacterComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerCharacterComponent::Release"
    class GetPrefixedAnimationName(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetPrefixedAnimationName"
    class GetAltWeaponAnim(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetAltWeaponAnim"
    class ShouldAllowWeaponAimAdjust(HookFactory):
        _name = "cGcPlayerCharacterComponent::ShouldAllowWeaponAimAdjust"
    class PlayMeleeAnimation(HookFactory):
        _name = "cGcPlayerCharacterComponent::PlayMeleeAnimation"
    class PlayAnimation(HookFactory):
        _name = "cGcPlayerCharacterComponent::PlayAnimation"
    class HandleLocomotionAnimationStates(HookFactory):
        _name = "cGcPlayerCharacterComponent::HandleLocomotionAnimationStates"
    class OnAnimationComplete(HookFactory):
        _name = "cGcPlayerCharacterComponent::OnAnimationComplete"
    class PerformDeathRagdoll(HookFactory):
        _name = "cGcPlayerCharacterComponent::PerformDeathRagdoll"
    class SetBackpackCamLookAt(HookFactory):
        _name = "cGcPlayerCharacterComponent::SetBackpackCamLookAt"
    class Update(HookFactory):
        _name = "cGcPlayerCharacterComponent::Update"
    class GetUpdatePeriod(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetUpdatePeriod"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateRender"
    class UpdateAirborne(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateAirborne"
    class UpdateSwimming(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateSwimming"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdatePostPhysics"
    class ApplyRootMotion(HookFactory):
        _name = "cGcPlayerCharacterComponent::ApplyRootMotion"
    class ApplyCharacterBanking(HookFactory):
        _name = "cGcPlayerCharacterComponent::ApplyCharacterBanking"
    class UpdateLookAt(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateLookAt"
    class UpdateBlink(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateBlink"
    class UpdateAirborneDetection(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateAirborneDetection"
    class UpdateSteepSlopeDetection(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateSteepSlopeDetection"
    class UpdateFootstepAudioExtertion(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateFootstepAudioExtertion"
    class UpdateJetpackEffects(HookFactory):
        _name = "cGcPlayerCharacterComponent::UpdateJetpackEffects"
    class SetDeathState(HookFactory):
        _name = "cGcPlayerCharacterComponent::SetDeathState"
    class SetCharacterState(HookFactory):
        _name = "cGcPlayerCharacterComponent::SetCharacterState"
    class MakeSplash(HookFactory):
        _name = "cGcPlayerCharacterComponent::MakeSplash"
    class DetermineCharacterState(HookFactory):
        _name = "cGcPlayerCharacterComponent::DetermineCharacterState"
    class ClearJetpackEffects(HookFactory):
        _name = "cGcPlayerCharacterComponent::ClearJetpackEffects"
    class RefreshJetpackEffect(HookFactory):
        _name = "cGcPlayerCharacterComponent::RefreshJetpackEffect"
    class GetCamoEffectStrength(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetCamoEffectStrength"
    class GetCamoDissolveTime(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetCamoDissolveTime"
    class NetSerialize(HookFactory):
        _name = "cGcPlayerCharacterComponent::NetSerialize"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerCharacterComponent::RenderNGui"
    class GetCustomPlayerControl(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetCustomPlayerControl"
    class SetCamo(HookFactory):
        _name = "cGcPlayerCharacterComponent::SetCamo"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetPhysicsMatrix"
    class GetFooting(HookFactory):
        _name = "cGcPlayerCharacterComponent::GetFooting"

class ComponentInstancercGcPlayerCharacterComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerCharacterComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcPlayerCharacterComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerCharacterComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerCharacterComponent::DestructInstance"

class cGcAnimationLayerQueue:
    class cGcAnimationLayerQueue(HookFactory):
        _name = "cGcAnimationLayerQueue::cGcAnimationLayerQueue"
    class GetCurrentAnimation(HookFactory):
        _name = "cGcAnimationLayerQueue::GetCurrentAnimation"
    class GetCurrentAnimationName(HookFactory):
        _name = "cGcAnimationLayerQueue::GetCurrentAnimationName"
    class SetCurrentAnimTime(HookFactory):
        _name = "cGcAnimationLayerQueue::SetCurrentAnimTime"
    class Play(HookFactory):
        _name = "cGcAnimationLayerQueue::Play"
    class StartAnimation(HookFactory):
        _name = "cGcAnimationLayerQueue::StartAnimation"
    class StopAllAnimations(HookFactory):
        _name = "cGcAnimationLayerQueue::StopAllAnimations"
    class Update(HookFactory):
        _name = "cGcAnimationLayerQueue::Update"
    class StopAnyCurrentTransitions(HookFactory):
        _name = "cGcAnimationLayerQueue::StopAnyCurrentTransitions"

class UpdateCommsChatterRTPCS(HookFactory):
    _name = "UpdateCommsChatterRTPCS"

class ShorelineAudio:
    class Update(HookFactory):
        _name = "ShorelineAudio::Update"

class PulseItemList:
    class Load(HookFactory):
        _templates = ("T0", )
        _name = "PulseItemList<{T0}>::Load"
    class Release(HookFactory):
        _templates = ("T0", )
        _name = "PulseItemList<{T0}>::Release"

class cGcAudioPulseMusic:
    class Construct(HookFactory):
        _name = "cGcAudioPulseMusic::Construct"
    class Prepare(HookFactory):
        _name = "cGcAudioPulseMusic::Prepare"
    class ReleaseProject(HookFactory):
        _name = "cGcAudioPulseMusic::ReleaseProject"
    class StopMusic(HookFactory):
        _name = "cGcAudioPulseMusic::StopMusic"
    class Release(HookFactory):
        _name = "cGcAudioPulseMusic::Release"
    class SetVariantIndex(HookFactory):
        _name = "cGcAudioPulseMusic::SetVariantIndex"
    class RefreshSoundScapeType(HookFactory):
        _name = "cGcAudioPulseMusic::RefreshSoundScapeType"
    class RenderNGui(HookFactory):
        _name = "cGcAudioPulseMusic::RenderNGui"
    class SoundScape:
        class Load(HookFactory):
            _name = "cGcAudioPulseMusic::SoundScape::Load"
            _overload: overloads.cGcAudioPulseMusic.SoundScape.Load.overloads = "cGcAudioPulseMusic::SoundScape *, const XMLNode *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcAudioPulseMusic.SoundScape.Load.overloads):
                cls._overload = overload_args
                return cls
        class SoundScapeIndex:
            class Update(HookFactory):
                _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::Update"
            class EventGenerator:
                class GenerateSubEvents(HookFactory):
                    _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::GenerateSubEvents"
                class Update(HookFactory):
                    _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::Update"
                class AudioEvent:
                    class Play(HookFactory):
                        _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::AudioEvent::Play"
                    class EndOfEventCallbackFunc(HookFactory):
                        _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::AudioEvent::EndOfEventCallbackFunc"
                class AudioEventCreate(HookFactory):
                    _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::AudioEventCreate"
                class AudioEventRelease(HookFactory):
                    _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::AudioEventRelease"
                class GetDistanceAttenuation(HookFactory):
                    _name = "cGcAudioPulseMusic::SoundScape::SoundScapeIndex::EventGenerator::GetDistanceAttenuation"
        class SoundScape(HookFactory):
            _name = "cGcAudioPulseMusic::SoundScape::SoundScape"
    class LoadProject(HookFactory):
        _name = "cGcAudioPulseMusic::LoadProject"
    class Instrument:
        class Load(HookFactory):
            _name = "cGcAudioPulseMusic::Instrument::Load"
            _overload: overloads.cGcAudioPulseMusic.Instrument.Load.overloads = "cGcAudioPulseMusic::Instrument *, const XMLNode *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcAudioPulseMusic.Instrument.Load.overloads):
                cls._overload = overload_args
                return cls
        class Instrument(HookFactory):
            _name = "cGcAudioPulseMusic::Instrument::Instrument"
    class GetRNDRange(HookFactory):
        _name = "cGcAudioPulseMusic::GetRNDRange"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcAudioPulseMusic::RenderNGuiCallback"

class cGcAudioObstructionRequest:
    class cGcAudioObstructionRequest(HookFactory):
        _name = "cGcAudioObstructionRequest::cGcAudioObstructionRequest"

class cGcAudioPulseXmlHelper:
    class Open(HookFactory):
        _name = "cGcAudioPulseXmlHelper::Open"

class getNodeData(HookFactory):
    _name = "getNodeData"

class getNodeData_0(HookFactory):
    _name = "getNodeData_0"

class getNodeData_1(HookFactory):
    _name = "getNodeData_1"

class cGcByteBeatTree:
    class Clear(HookFactory):
        _name = "cGcByteBeatTree::Clear"
    class Tokenize(HookFactory):
        _name = "cGcByteBeatTree::Tokenize"
    class Parse(HookFactory):
        _name = "cGcByteBeatTree::Parse"
    class Compute(HookFactory):
        _name = "cGcByteBeatTree::Compute"
    class SetMessage(HookFactory):
        _name = "cGcByteBeatTree::SetMessage"
    class Serialise(HookFactory):
        _name = "cGcByteBeatTree::Serialise"

class cGcByteBeatSequencer:
    class cGcByteBeatSequencer(HookFactory):
        _name = "cGcByteBeatSequencer::cGcByteBeatSequencer"
        _overload: overloads.cGcByteBeatSequencer.cGcByteBeatSequencer.overloads = "cGcByteBeatSequencer *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcByteBeatSequencer.cGcByteBeatSequencer.overloads):
            cls._overload = overload_args
            return cls
    class Reset(HookFactory):
        _name = "cGcByteBeatSequencer::Reset"
    class PostSerialise(HookFactory):
        _name = "cGcByteBeatSequencer::PostSerialise"
    class ScaleDegreeToNote(HookFactory):
        _name = "cGcByteBeatSequencer::ScaleDegreeToNote"
    class ScaleDegreeToOctaveOffset(HookFactory):
        _name = "cGcByteBeatSequencer::ScaleDegreeToOctaveOffset"
    class cGcByteBeatRhythmTrack:
        class cGcByteBeatRhythmTrack(HookFactory):
            _name = "cGcByteBeatSequencer::cGcByteBeatRhythmTrack::cGcByteBeatRhythmTrack"
    class InitStaticData(HookFactory):
        _name = "cGcByteBeatSequencer::InitStaticData"
    class SetDrumFromTemplate(HookFactory):
        _name = "cGcByteBeatSequencer::SetDrumFromTemplate"
    class GetRhythmEnvelope(HookFactory):
        _name = "cGcByteBeatSequencer::GetRhythmEnvelope"
    class AugmentRhythmFloatSample(HookFactory):
        _name = "cGcByteBeatSequencer::AugmentRhythmFloatSample"
    class ComputeArpeggioSteps(HookFactory):
        _name = "cGcByteBeatSequencer::ComputeArpeggioSteps"
    class Randomise(HookFactory):
        _name = "cGcByteBeatSequencer::Randomise"
    class GetByteBeatSwitchStatus(HookFactory):
        _name = "cGcByteBeatSequencer::GetByteBeatSwitchStatus"
    class Serialise(HookFactory):
        _name = "cGcByteBeatSequencer::Serialise"

class cGcByteBeatGroupData:
    class cGcByteBeatGroupData(HookFactory):
        _name = "cGcByteBeatGroupData::cGcByteBeatGroupData"

class cGcByteBeat:
    class GetCurrentSample(HookFactory):
        _name = "cGcByteBeat::GetCurrentSample"
    class GetSample(HookFactory):
        _name = "cGcByteBeat::GetSample"
    class DoesMessageHaveAudibleContent(HookFactory):
        _name = "cGcByteBeat::DoesMessageHaveAudibleContent"
    class SetScreenDynamic(HookFactory):
        _name = "cGcByteBeat::SetScreenDynamic"
    class Prepare(HookFactory):
        _name = "cGcByteBeat::Prepare"
    class Update(HookFactory):
        _name = "cGcByteBeat::Update"
    class SortForCulling(HookFactory):
        _name = "cGcByteBeat::SortForCulling"
    class UpdateRender(HookFactory):
        _name = "cGcByteBeat::UpdateRender"
    class RenderScreen(HookFactory):
        _name = "cGcByteBeat::RenderScreen"
    class SetPowered(HookFactory):
        _name = "cGcByteBeat::SetPowered"
    class GetConnectectSequencers(HookFactory):
        _name = "cGcByteBeat::GetConnectectSequencers"
    class GetAllSequencers(HookFactory):
        _name = "cGcByteBeat::GetAllSequencers"
    class SetConnectectPartSequence(HookFactory):
        _name = "cGcByteBeat::SetConnectectPartSequence"
    class SetConnectectMessage(HookFactory):
        _name = "cGcByteBeat::SetConnectectMessage"
    class WriteTreeAndSequenceToMessage(HookFactory):
        _name = "cGcByteBeat::WriteTreeAndSequenceToMessage"
    class ReadTreeAndSequenceFromMessage(HookFactory):
        _name = "cGcByteBeat::ReadTreeAndSequenceFromMessage"
    class LoadFromBaseBuildingData(HookFactory):
        _name = "cGcByteBeat::LoadFromBaseBuildingData"
    class SaveToBaseBuildingData(HookFactory):
        _name = "cGcByteBeat::SaveToBaseBuildingData"
    class GetAsString(HookFactory):
        _name = "cGcByteBeat::GetAsString"
    class SetFromString(HookFactory):
        _name = "cGcByteBeat::SetFromString"
    class GetByteBeatSwitchFlags(HookFactory):
        _name = "cGcByteBeat::GetByteBeatSwitchFlags"
    class GetAudioStreamFormat(HookFactory):
        _name = "cGcByteBeat::GetAudioStreamFormat"
    class GetAudioStreamData(HookFactory):
        _name = "cGcByteBeat::GetAudioStreamData"
    class RenderNGui(HookFactory):
        _name = "cGcByteBeat::RenderNGui"
    class SetSequence(HookFactory):
        _name = "cGcByteBeat::SetSequence"

class cGcTriggerActionComponent:
    class OnAttached(HookFactory):
        _name = "cGcTriggerActionComponent::OnAttached"
    class GetTypedComponent(HookFactory):
        _name = "cGcTriggerActionComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcTriggerActionComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcTriggerActionComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcTriggerActionComponent::InitData"
    class Broadcast(HookFactory):
        _name = "cGcTriggerActionComponent::Broadcast"
    class Prepare(HookFactory):
        _name = "cGcTriggerActionComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcTriggerActionComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cGcTriggerActionComponent::RenderNGui"
    class ChangeState(HookFactory):
        _name = "cGcTriggerActionComponent::ChangeState"
    class UpdateAnimFrameTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::UpdateAnimFrameTrigger"
    class UpdatePlayerNearbyTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::UpdatePlayerNearbyTrigger"
    class HandleTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleTrigger"
    class HandleAudioTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleAudioTrigger"
    class HandleParticleTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleParticleTrigger"
    class HandleChangeStateTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleChangeStateTrigger"
    class RequestChangeState(HookFactory):
        _name = "cGcTriggerActionComponent::RequestChangeState"
    class HandleFrigateInteractionTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleFrigateInteractionTrigger"
    class HandleDisplayTextTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleDisplayTextTrigger"
    class HandlePainTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandlePainTrigger"
    class HandleHazardTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleHazardTrigger"
    class HandleDestroyTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleDestroyTrigger"
    class HandleRewardTrigger(HookFactory):
        _name = "cGcTriggerActionComponent::HandleRewardTrigger"
    class Release(HookFactory):
        _name = "cGcTriggerActionComponent::Release"
    class GetGlobalAlert(HookFactory):
        _name = "cGcTriggerActionComponent::GetGlobalAlert"
    class CheckTrigger(HookFactory):
        _templates = ("T0", )
        _name = "cGcTriggerActionComponent::CheckTrigger<{T0}>"

class cTkAudioComponent:
    class OnAttached(HookFactory):
        _name = "cTkAudioComponent::OnAttached"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkAudioComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkAudioComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cTkAudioComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkAudioComponent::FindFirstTypedComponent"
    class Prepare(HookFactory):
        _name = "cTkAudioComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkAudioComponent::Release"
    class Update(HookFactory):
        _name = "cTkAudioComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cTkAudioComponent::RenderNGui"
    class Mute(HookFactory):
        _name = "cTkAudioComponent::Mute"
    class Shutdown(HookFactory):
        _name = "cTkAudioComponent::Shutdown"
    class Unmute(HookFactory):
        _name = "cTkAudioComponent::Unmute"
    class UpdateDistanceCulling(HookFactory):
        _name = "cTkAudioComponent::UpdateDistanceCulling"

class ComponentInstancercTkAudioComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkAudioComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkAudioComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkAudioComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkAudioComponent::DestructInstance"

class cGcNPCInteractiveObjectComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNPCInteractiveObjectComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNPCInteractiveObjectComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcNPCInteractiveObjectComponent::GetTypedComponent"

class cGcNPCNavigationAreaComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::FindFirstTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::Release"
    class Update(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::Update"
    class TerminateAllNavigation(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::TerminateAllNavigation"
    class OnExternalNavGraphConstructionComplete(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::OnExternalNavGraphConstructionComplete"
    class GatherNodes(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GatherNodes"
    class CalculateNodeFloorPositions(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::CalculateNodeFloorPositions"
    class HasLinkBeenChecked(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::HasLinkBeenChecked"
    class ValidateLinks(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::ValidateLinks"
    class SimplifyGraph(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::SimplifyGraph"
    class GenerateNode(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GenerateNode"
    class GetNode(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GetNode"
    class GeneratePath(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GeneratePath"
    class ReservePOI(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::ReservePOI"
    class VacatePOI(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::VacatePOI"
    class UpdateRecurrentPhysicsValidation(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::UpdateRecurrentPhysicsValidation"
    class GetChairComponentFromNavNode(HookFactory):
        _name = "cGcNPCNavigationAreaComponent::GetChairComponentFromNavNode"

class ComponentInstancercGcNPCNavigationAreaComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcNPCNavigationAreaComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNPCNavigationAreaComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCNavigationAreaComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCNavigationAreaComponent::DestructInstance"

class cGcNPCComponent:
    class IsRunning(HookFactory):
        _name = "cGcNPCComponent::IsRunning"
    class GetRace(HookFactory):
        _name = "cGcNPCComponent::GetRace"
    class IsMech(HookFactory):
        _name = "cGcNPCComponent::IsMech"
    class GetMatrix(HookFactory):
        _name = "cGcNPCComponent::GetMatrix"
    class GetCharacterSit(HookFactory):
        _name = "cGcNPCComponent::GetCharacterSit"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNPCComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNPCComponent::InitData"
    class cGcNPCComponent(HookFactory):
        _name = "cGcNPCComponent::cGcNPCComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcNPCComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcNPCComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcNPCComponent::FindFirstTypedComponent"
    class IsAllowedToMove(HookFactory):
        _name = "cGcNPCComponent::IsAllowedToMove"
    class IsSeated(HookFactory):
        _name = "cGcNPCComponent::IsSeated"
    class SetHoloEffect(HookFactory):
        _name = "cGcNPCComponent::SetHoloEffect"
    class OnAttached(HookFactory):
        _name = "cGcNPCComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcNPCComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcNPCComponent::Release"
    class UpdateRender(HookFactory):
        _name = "cGcNPCComponent::UpdateRender"
    class Update(HookFactory):
        _name = "cGcNPCComponent::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcNPCComponent::UpdatePostPhysics"
    class GetUpdatePeriod(HookFactory):
        _name = "cGcNPCComponent::GetUpdatePeriod"
    class SetIKBodyMass(HookFactory):
        _name = "cGcNPCComponent::SetIKBodyMass"
    class ReadyForPlayerInteraction(HookFactory):
        _name = "cGcNPCComponent::ReadyForPlayerInteraction"
    class OnOwnershipTransfer(HookFactory):
        _name = "cGcNPCComponent::OnOwnershipTransfer"
    class InitialiseNPCAfterTransfer(HookFactory):
        _name = "cGcNPCComponent::InitialiseNPCAfterTransfer"
    class Trigger(HookFactory):
        _name = "cGcNPCComponent::Trigger"
    class AllowMovement(HookFactory):
        _name = "cGcNPCComponent::AllowMovement"
    class SetState(HookFactory):
        _name = "cGcNPCComponent::SetState"
    class SetPropNode(HookFactory):
        _name = "cGcNPCComponent::SetPropNode"
    class SetActiveProp(HookFactory):
        _name = "cGcNPCComponent::SetActiveProp"
    class PlayAnimation(HookFactory):
        _name = "cGcNPCComponent::PlayAnimation"
    class SetAudioSwitchForRace(HookFactory):
        _name = "cGcNPCComponent::SetAudioSwitchForRace"
    class UpdateHologramEffect(HookFactory):
        _name = "cGcNPCComponent::UpdateHologramEffect"
    class UpdateMovement(HookFactory):
        _name = "cGcNPCComponent::UpdateMovement"
    class UpdateSteeringForces(HookFactory):
        _name = "cGcNPCComponent::UpdateSteeringForces"
    class GetNextAnimID(HookFactory):
        _name = "cGcNPCComponent::GetNextAnimID"
    class RenderNGui(HookFactory):
        _name = "cGcNPCComponent::RenderNGui"
    class UpdateGraphics(HookFactory):
        _name = "cGcNPCComponent::UpdateGraphics"
    class HasMoveForce(HookFactory):
        _name = "cGcNPCComponent::HasMoveForce"
    class GetRidingAttachment(HookFactory):
        _name = "cGcNPCComponent::GetRidingAttachment"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcNPCComponent::GetPhysicsMatrix"
    class GetVelocity(HookFactory):
        _name = "cGcNPCComponent::GetVelocity"
    class GetWorldUp(HookFactory):
        _name = "cGcNPCComponent::GetWorldUp"
    class GetHeight(HookFactory):
        _name = "cGcNPCComponent::GetHeight"
    class GetFacingDir(HookFactory):
        _name = "cGcNPCComponent::GetFacingDir"
    class SetToPosition(HookFactory):
        _name = "cGcNPCComponent::SetToPosition"
        _overload: overloads.cGcNPCComponent.SetToPosition.overloads = "cGcNPCComponent *, const cTkVector3 *, const cTkVector3 *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNPCComponent.SetToPosition.overloads):
            cls._overload = overload_args
            return cls
    class EnableCharacterGravity(HookFactory):
        _name = "cGcNPCComponent::EnableCharacterGravity"
    class DisableCharacterGravity(HookFactory):
        _name = "cGcNPCComponent::DisableCharacterGravity"
    class EnableCharacterPhysics(HookFactory):
        _name = "cGcNPCComponent::EnableCharacterPhysics"
    class EnableCharacterCollision(HookFactory):
        _name = "cGcNPCComponent::EnableCharacterCollision"
    class DisableCharacterCollision(HookFactory):
        _name = "cGcNPCComponent::DisableCharacterCollision"
    class GetCurrentMoveForce(HookFactory):
        _name = "cGcNPCComponent::GetCurrentMoveForce"
    class UpdateIdle(HookFactory):
        _name = "cGcNPCComponent::UpdateIdle"
    class AllowHeadMovement(HookFactory):
        _name = "cGcNPCComponent::AllowHeadMovement"
    class GetLookAtPoint(HookFactory):
        _name = "cGcNPCComponent::GetLookAtPoint"
    class GetMoveSpeed(HookFactory):
        _name = "cGcNPCComponent::GetMoveSpeed"
    class ZeroSteering(HookFactory):
        _name = "cGcNPCComponent::ZeroSteering"
    class UpdatePerception(HookFactory):
        _name = "cGcNPCComponent::UpdatePerception"
    class GetLookAtNodeForAttachment(HookFactory):
        _name = "cGcNPCComponent::GetLookAtNodeForAttachment"
    class GetConversationPartners(HookFactory):
        _name = "cGcNPCComponent::GetConversationPartners"
    class GetSomethingToLookAt(HookFactory):
        _name = "cGcNPCComponent::GetSomethingToLookAt"
    class NetSerialize(HookFactory):
        _name = "cGcNPCComponent::NetSerialize"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcNPCComponent::NetSerializeOnInit"
    class ShouldKeepAlive(HookFactory):
        _name = "cGcNPCComponent::ShouldKeepAlive"
    class SwitchToCharacterPhysics(HookFactory):
        _name = "cGcNPCComponent::SwitchToCharacterPhysics"
    class UpdateDissolveProgress(HookFactory):
        _name = "cGcNPCComponent::UpdateDissolveProgress"
    class GetSettlementState(HookFactory):
        _name = "cGcNPCComponent::GetSettlementState"
    class SetNavigationArea(HookFactory):
        _name = "cGcNPCComponent::SetNavigationArea"
    class GetNavigationArea(HookFactory):
        _name = "cGcNPCComponent::GetNavigationArea"
    class DeactivateHoloEffect(HookFactory):
        _name = "cGcNPCComponent::DeactivateHoloEffect"

class ComponentInstancercGcNPCComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcNPCComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNPCComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCComponent::DestructInstance"

class cGcInteractionComponent:
    class CanTransferOwnership(HookFactory):
        _name = "cGcInteractionComponent::CanTransferOwnership"
    class GetTypedComponent(HookFactory):
        _name = "cGcInteractionComponent::GetTypedComponent"
        _overload: overloads.cGcInteractionComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInteractionComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetTypeNameHash64(HookFactory):
        _name = "cGcInteractionComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcInteractionComponent::InitData"
    class cGcInteractionComponent(HookFactory):
        _name = "cGcInteractionComponent::cGcInteractionComponent"
    class GetMessageBeacon(HookFactory):
        _name = "cGcInteractionComponent::GetMessageBeacon"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcInteractionComponent::FindFirstTypedComponent"
    class GetSeed(HookFactory):
        _name = "cGcInteractionComponent::GetSeed"
    class SetDescription(HookFactory):
        _name = "cGcInteractionComponent::SetDescription"
    class GetNumComponents(HookFactory):
        _name = "cGcInteractionComponent::GetNumComponents"
    class AllowComponent(HookFactory):
        _name = "cGcInteractionComponent::AllowComponent"
    class IsCustomisationInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsCustomisationInteraction"
    class UsesExtraShopOffsetVR(HookFactory):
        _name = "cGcInteractionComponent::UsesExtraShopOffsetVR"
    class IsFreighterNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsFreighterNPCInteraction"
    class IsNormalNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsNormalNPCInteraction"
    class IsInteractionWithACreature(HookFactory):
        _name = "cGcInteractionComponent::IsInteractionWithACreature"
    class IsInteractionWithAnAlien(HookFactory):
        _name = "cGcInteractionComponent::IsInteractionWithAnAlien"
        _overload: overloads.cGcInteractionComponent.IsInteractionWithAnAlien.overloads = "cGcInteractionComponent *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInteractionComponent.IsInteractionWithAnAlien.overloads):
            cls._overload = overload_args
            return cls
    class IsNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsNPCInteraction"
        _overload: overloads.cGcInteractionComponent.IsNPCInteraction.overloads = "unsigned __int64"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInteractionComponent.IsNPCInteraction.overloads):
            cls._overload = overload_args
            return cls
    class IsInteractionWithFleetManagement(HookFactory):
        _name = "cGcInteractionComponent::IsInteractionWithFleetManagement"
    class GetModelRenderDataBlendAmount(HookFactory):
        _name = "cGcInteractionComponent::GetModelRenderDataBlendAmount"
    class GetInteractLocator(HookFactory):
        _name = "cGcInteractionComponent::GetInteractLocator"
    class HasComponent(HookFactory):
        _name = "cGcInteractionComponent::HasComponent"
    class AddInteractionEvent(HookFactory):
        _name = "cGcInteractionComponent::AddInteractionEvent"
    class GetCustomisationDataTypeForInteraction(HookFactory):
        _name = "cGcInteractionComponent::GetCustomisationDataTypeForInteraction"
    class UsesIntermediateInteraction(HookFactory):
        _name = "cGcInteractionComponent::UsesIntermediateInteraction"
    class ClearDialogueOverrides(HookFactory):
        _name = "cGcInteractionComponent::ClearDialogueOverrides"
    class GetMissionSeedOverride(HookFactory):
        _name = "cGcInteractionComponent::GetMissionSeedOverride"
    class GetPuzzle(HookFactory):
        _name = "cGcInteractionComponent::GetPuzzle"
    class GetCustomFreighterLogText(HookFactory):
        _name = "cGcInteractionComponent::GetCustomFreighterLogText"
    class GetRaceName(HookFactory):
        _name = "cGcInteractionComponent::GetRaceName"
    class SetReinteractionQueued(HookFactory):
        _name = "cGcInteractionComponent::SetReinteractionQueued"
    class IsBasicNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsBasicNPCInteraction"
    class IsShopInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsShopInteraction"
    class CanTrade(HookFactory):
        _name = "cGcInteractionComponent::CanTrade"
    class CanTradeWithShipInventory(HookFactory):
        _name = "cGcInteractionComponent::CanTradeWithShipInventory"
    class ShopNotifyBought(HookFactory):
        _name = "cGcInteractionComponent::ShopNotifyBought"
    class ShopAmountBought(HookFactory):
        _name = "cGcInteractionComponent::ShopAmountBought"
    class GetOverridePage(HookFactory):
        _name = "cGcInteractionComponent::GetOverridePage"
    class GetInteractInWorldLocator(HookFactory):
        _name = "cGcInteractionComponent::GetInteractInWorldLocator"
    class GetOverrideInWorldLocator(HookFactory):
        _name = "cGcInteractionComponent::GetOverrideInWorldLocator"
    class IsAbandonedFreighterInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsAbandonedFreighterInteraction"
    class SetName(HookFactory):
        _name = "cGcInteractionComponent::SetName"
    class IsFreighterCaptainNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsFreighterCaptainNPCInteraction"
    class IsFreighterStaffNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsFreighterStaffNPCInteraction"
    class CanRepeatInteraction(HookFactory):
        _name = "cGcInteractionComponent::CanRepeatInteraction"
    class IsSettlementNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::IsSettlementNPCInteraction"
    class ShouldHide3rdPersonPlayerDuringInteraction(HookFactory):
        _name = "cGcInteractionComponent::ShouldHide3rdPersonPlayerDuringInteraction"
    class ScansAsType(HookFactory):
        _name = "cGcInteractionComponent::ScansAsType"
        _overload: overloads.cGcInteractionComponent.ScansAsType.overloads = "cGcInteractionComponent *, eInteractionType"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInteractionComponent.ScansAsType.overloads):
            cls._overload = overload_args
            return cls
    class GetAudioObject(HookFactory):
        _name = "cGcInteractionComponent::GetAudioObject"
    class ClearAdditionalOptions(HookFactory):
        _name = "cGcInteractionComponent::ClearAdditionalOptions"
    class AddNPCTrigger(HookFactory):
        _name = "cGcInteractionComponent::AddNPCTrigger"
    class OnAttached(HookFactory):
        _name = "cGcInteractionComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcInteractionComponent::Prepare"
    class SetChainedInteractionAndClearIfNecessary(HookFactory):
        _name = "cGcInteractionComponent::SetChainedInteractionAndClearIfNecessary"
    class UpdatePuzzleOverridingControllingMission(HookFactory):
        _name = "cGcInteractionComponent::UpdatePuzzleOverridingControllingMission"
    class Release(HookFactory):
        _name = "cGcInteractionComponent::Release"
    class GetUpdatePeriod(HookFactory):
        _name = "cGcInteractionComponent::GetUpdatePeriod"
    class Update(HookFactory):
        _name = "cGcInteractionComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cGcInteractionComponent::UpdateRender"
    class GetInteractionDialogHash(HookFactory):
        _name = "cGcInteractionComponent::GetInteractionDialogHash"
    class GenerateNewRewardSeed(HookFactory):
        _name = "cGcInteractionComponent::GenerateNewRewardSeed"
    class UpdateRequests(HookFactory):
        _name = "cGcInteractionComponent::UpdateRequests"
    class GetModelRendererData(HookFactory):
        _name = "cGcInteractionComponent::GetModelRendererData"
    class GetInteractionIndexRace(HookFactory):
        _name = "cGcInteractionComponent::GetInteractionIndexRace"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcInteractionComponent::NetSerializeOnInit"
    class GetViewTargetNode(HookFactory):
        _name = "cGcInteractionComponent::GetViewTargetNode"
    class GetFocusJoint(HookFactory):
        _name = "cGcInteractionComponent::GetFocusJoint"
    class GetNextFocusJoint(HookFactory):
        _name = "cGcInteractionComponent::GetNextFocusJoint"
    class DoInteractionEvent(HookFactory):
        _name = "cGcInteractionComponent::DoInteractionEvent"
    class CouldGiveRecruit(HookFactory):
        _name = "cGcInteractionComponent::CouldGiveRecruit"
    class GiveReward(HookFactory):
        _name = "cGcInteractionComponent::GiveReward"
    class GetInWorldUIScale(HookFactory):
        _name = "cGcInteractionComponent::GetInWorldUIScale"
    class GetInWorldUIMinDistOverride(HookFactory):
        _name = "cGcInteractionComponent::GetInWorldUIMinDistOverride"
    class GetInWorldUIForcedOffset(HookFactory):
        _name = "cGcInteractionComponent::GetInWorldUIForcedOffset"
    class UseInWorldUICameraUp(HookFactory):
        _name = "cGcInteractionComponent::UseInWorldUICameraUp"
    class CanGiveTheseRewards(HookFactory):
        _name = "cGcInteractionComponent::CanGiveTheseRewards"
    class GetBaseBuildingType(HookFactory):
        _name = "cGcInteractionComponent::GetBaseBuildingType"
    class CanInteract(HookFactory):
        _name = "cGcInteractionComponent::CanInteract"
    class GetInteractDistSq(HookFactory):
        _name = "cGcInteractionComponent::GetInteractDistSq"
    class CanExit(HookFactory):
        _name = "cGcInteractionComponent::CanExit"
    class GetBackOutToLeaveOption(HookFactory):
        _name = "cGcInteractionComponent::GetBackOutToLeaveOption"
    class Attract(HookFactory):
        _name = "cGcInteractionComponent::Attract"
    class TriggerOnMaster(HookFactory):
        _name = "cGcInteractionComponent::TriggerOnMaster"
    class IsPersistentInteract(HookFactory):
        _name = "cGcInteractionComponent::IsPersistentInteract"
    class SaveInteraction(HookFactory):
        _name = "cGcInteractionComponent::SaveInteraction"
    class GetInteractionData(HookFactory):
        _name = "cGcInteractionComponent::GetInteractionData"
    class UpdateInteractionPosition(HookFactory):
        _name = "cGcInteractionComponent::UpdateInteractionPosition"
    class Interact(HookFactory):
        _name = "cGcInteractionComponent::Interact"
    class BeginHold(HookFactory):
        _name = "cGcInteractionComponent::BeginHold"
    class CancelHold(HookFactory):
        _name = "cGcInteractionComponent::CancelHold"
    class InteractStarted(HookFactory):
        _name = "cGcInteractionComponent::InteractStarted"
    class SetupCommandPostInteraction(HookFactory):
        _name = "cGcInteractionComponent::SetupCommandPostInteraction"
    class SetupFrigateCaptainInteraction(HookFactory):
        _name = "cGcInteractionComponent::SetupFrigateCaptainInteraction"
    class InteractComplete(HookFactory):
        _name = "cGcInteractionComponent::InteractComplete"
    class GetModelRes(HookFactory):
        _name = "cGcInteractionComponent::GetModelRes"
    class OverrideNPCInteraction(HookFactory):
        _name = "cGcInteractionComponent::OverrideNPCInteraction"
    class CalculateCurrentPuzzle(HookFactory):
        _name = "cGcInteractionComponent::CalculateCurrentPuzzle"
    class GetCurrentModelRendererData(HookFactory):
        _name = "cGcInteractionComponent::GetCurrentModelRendererData"
    class GetModelViewerRenderData(HookFactory):
        _name = "cGcInteractionComponent::GetModelViewerRenderData"
    class UsePlayerCam(HookFactory):
        _name = "cGcInteractionComponent::UsePlayerCam"
    class UseAlignToCamera(HookFactory):
        _name = "cGcInteractionComponent::UseAlignToCamera"
    class ChangeInteractionCamera(HookFactory):
        _name = "cGcInteractionComponent::ChangeInteractionCamera"
    class IsInteractionNetworkLocking(HookFactory):
        _name = "cGcInteractionComponent::IsInteractionNetworkLocking"
    class UsesProgressiveDialog(HookFactory):
        _name = "cGcInteractionComponent::UsesProgressiveDialog"
    class GetCameraTimeIn(HookFactory):
        _name = "cGcInteractionComponent::GetCameraTimeIn"
    class GivesWeapon(HookFactory):
        _name = "cGcInteractionComponent::GivesWeapon"
    class PickRandomAnim(HookFactory):
        _name = "cGcInteractionComponent::PickRandomAnim"
    class GenerateName(HookFactory):
        _name = "cGcInteractionComponent::GenerateName"
    class GenerateGridPartNameAndDesc(HookFactory):
        _name = "cGcInteractionComponent::GenerateGridPartNameAndDesc"
    class GeneratePlatformIcon(HookFactory):
        _name = "cGcInteractionComponent::GeneratePlatformIcon"
    class GetTitleOverrideNameInfo(HookFactory):
        _name = "cGcInteractionComponent::GetTitleOverrideNameInfo"
    class GetOverridenTitle(HookFactory):
        _name = "cGcInteractionComponent::GetOverridenTitle"
    class GenerateInteractionIcon(HookFactory):
        _name = "cGcInteractionComponent::GenerateInteractionIcon"
    class GenerateDescription(HookFactory):
        _name = "cGcInteractionComponent::GenerateDescription"
    class GetShipPilotName(HookFactory):
        _name = "cGcInteractionComponent::GetShipPilotName"
    class ClearCost(HookFactory):
        _name = "cGcInteractionComponent::ClearCost"
    class SwitchToSecondaryInteraction(HookFactory):
        _name = "cGcInteractionComponent::SwitchToSecondaryInteraction"
    class SwitchToPrimaryInteraction(HookFactory):
        _name = "cGcInteractionComponent::SwitchToPrimaryInteraction"
    class UpdateShipInteractionData(HookFactory):
        _name = "cGcInteractionComponent::UpdateShipInteractionData"
    class MarkInteractionComplete(HookFactory):
        _name = "cGcInteractionComponent::MarkInteractionComplete"
    class CreateSecondaryMesh(HookFactory):
        _name = "cGcInteractionComponent::CreateSecondaryMesh"
    class DestroySecondaryMesh(HookFactory):
        _name = "cGcInteractionComponent::DestroySecondaryMesh"
    class RenderNGui(HookFactory):
        _name = "cGcInteractionComponent::RenderNGui"
    class SetInteractionTypeOverride(HookFactory):
        _name = "cGcInteractionComponent::SetInteractionTypeOverride"
    class GetRace(HookFactory):
        _name = "cGcInteractionComponent::GetRace"
    class RefreshPersistency(HookFactory):
        _name = "cGcInteractionComponent::RefreshPersistency"
    class SwitchWeaponMaterials(HookFactory):
        _name = "cGcInteractionComponent::SwitchWeaponMaterials"
    class DoOption(HookFactory):
        _name = "cGcInteractionComponent::DoOption"
    class TriggerMoodResponse(HookFactory):
        _name = "cGcInteractionComponent::TriggerMoodResponse"
    class TriggerPropChange(HookFactory):
        _name = "cGcInteractionComponent::TriggerPropChange"
    class GetAdditionalOptions(HookFactory):
        _name = "cGcInteractionComponent::GetAdditionalOptions"
    class ShouldDoSeason2MysteryOptions(HookFactory):
        _name = "cGcInteractionComponent::ShouldDoSeason2MysteryOptions"
    class ShouldDoSeason4AtlasOption(HookFactory):
        _name = "cGcInteractionComponent::ShouldDoSeason4AtlasOption"
    class ShouldDoSeason4AFOption(HookFactory):
        _name = "cGcInteractionComponent::ShouldDoSeason4AFOption"
    class ShouldDoSeason7MemoryMilkOption(HookFactory):
        _name = "cGcInteractionComponent::ShouldDoSeason7MemoryMilkOption"
    class GetTechShopCategory(HookFactory):
        _name = "cGcInteractionComponent::GetTechShopCategory"
    class GetType(HookFactory):
        _name = "cGcInteractionComponent::GetType"
    class UpdateBaseBuildingMessage(HookFactory):
        _name = "cGcInteractionComponent::UpdateBaseBuildingMessage"
    class DisplayMessageModuleMesage(HookFactory):
        _name = "cGcInteractionComponent::DisplayMessageModuleMesage"
    class SetForcedInteraction(HookFactory):
        _name = "cGcInteractionComponent::SetForcedInteraction"
    class GetPuzzleTableOverride(HookFactory):
        _name = "cGcInteractionComponent::GetPuzzleTableOverride"
    class GetNewRewardSeed(HookFactory):
        _name = "cGcInteractionComponent::GetNewRewardSeed"
    class OnHover(HookFactory):
        _name = "cGcInteractionComponent::OnHover"
    class GetName(HookFactory):
        _name = "cGcInteractionComponent::GetName"
    class GetDescription(HookFactory):
        _name = "cGcInteractionComponent::GetDescription"
    class GetFoodProductResultText(HookFactory):
        _name = "cGcInteractionComponent::GetFoodProductResultText"
    class GetStorageContainerType(HookFactory):
        _name = "cGcInteractionComponent::GetStorageContainerType"
    class GenerateCustomFreighterLogText(HookFactory):
        _name = "cGcInteractionComponent::GenerateCustomFreighterLogText"
    class FreighterTerminalComplete(HookFactory):
        _name = "cGcInteractionComponent::FreighterTerminalComplete"
    class GetPersistentBuffer(HookFactory):
        _name = "cGcInteractionComponent::GetPersistentBuffer"
    class GetArticleLocIDForBuildingClass(HookFactory):
        _name = "cGcInteractionComponent::GetArticleLocIDForBuildingClass"
    class GetNPCDeliveryItemName(HookFactory):
        _name = "cGcInteractionComponent::GetNPCDeliveryItemName"
    class SetOverridePage(HookFactory):
        _name = "cGcInteractionComponent::SetOverridePage"
    class DisplayDescriptionOnInteractPrompt(HookFactory):
        _name = "cGcInteractionComponent::DisplayDescriptionOnInteractPrompt"

class ComponentInstancercGcInteractionComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcInteractionComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcInteractionComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcInteractionComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcInteractionComponent::DestructInstance"

class ComponentLoadInstancercGcInteractionComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcInteractionComponent::Register"

class cGcFrontendPageByteBeat:
    class PrepareToOpen(HookFactory):
        _name = "cGcFrontendPageByteBeat::PrepareToOpen"
    class LoadIcons(HookFactory):
        _name = "cGcFrontendPageByteBeat::LoadIcons"
    class DoByteBeat(HookFactory):
        _name = "cGcFrontendPageByteBeat::DoByteBeat"
    class RebuildGraphicalTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::RebuildGraphicalTree"
    class SetOptionLabel(HookFactory):
        _name = "cGcFrontendPageByteBeat::SetOptionLabel"
    class DoByteBeatTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::DoByteBeatTree"
    class DoByteBeatSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::DoByteBeatSequencer"
    class HandleInput(HookFactory):
        _name = "cGcFrontendPageByteBeat::HandleInput"
    class GenerateNonSilentRandomTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::GenerateNonSilentRandomTree"
    class GenerateRandomTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::GenerateRandomTree"
    class BuildInternalTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::BuildInternalTree"
    class BuildTokenList(HookFactory):
        _name = "cGcFrontendPageByteBeat::BuildTokenList"
    class BuildGraphicalTree(HookFactory):
        _name = "cGcFrontendPageByteBeat::BuildGraphicalTree"
    class SetNodeFromToken(HookFactory):
        _name = "cGcFrontendPageByteBeat::SetNodeFromToken"
    class UpdateTreeNode(HookFactory):
        _name = "cGcFrontendPageByteBeat::UpdateTreeNode"
    class DoTooltip(HookFactory):
        _name = "cGcFrontendPageByteBeat::DoTooltip"
    class ClearRecursive(HookFactory):
        _name = "cGcFrontendPageByteBeat::ClearRecursive"
    class DoHoverButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::DoHoverButton"
    class RenderEmbeddedVisualisation(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderEmbeddedVisualisation"
    class RenderMainVisualisation(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderMainVisualisation"
    class RenderVisualisation(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderVisualisation"
    class RenderTreeLines(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderTreeLines"
    class DrawLines(HookFactory):
        _name = "cGcFrontendPageByteBeat::DrawLines"
    class RenderSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderSequencer"
    class RenderHighlight(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderHighlight"
    class RenderSequencerStep(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderSequencerStep"
    class RenderSequencerArpStep(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderSequencerArpStep"
    class RenderThisPartSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderThisPartSequencer"
    class RenderConnectedPartSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderConnectedPartSequencer"
    class RenderPartSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderPartSequencer"
    class RenderPlayHead(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderPlayHead"
    class RenderRhythmSequencer(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRhythmSequencer"
    class RenderRhythmStep(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRhythmStep"
    class RenderArpeggio(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpeggio"
    class RenderDrumMixSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderDrumMixSlider"
    class RenderArpRangeSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpRangeSlider"
    class RenderArpStepSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpStepSlider"
    class RenderArpLengthSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpLengthSlider"
    class RenderArpTypeSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpTypeSlider"
    class RenderWaveTypeSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderWaveTypeSlider"
    class RenderEnvFadeIn(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderEnvFadeIn"
    class RenderEnvFadeOut(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderEnvFadeOut"
    class RenderEnvLength(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderEnvLength"
    class RenderNumStepsSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderNumStepsSlider"
    class RenderArpPowerButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderArpPowerButton"
    class RenderMelodyPowerButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderMelodyPowerButton"
    class RenderRhythmPowerButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRhythmPowerButton"
    class RenderNoteOnButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderNoteOnButton"
    class RenderCopyButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderCopyButton"
    class RenderPasteButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderPasteButton"
    class RenderClearSequenceButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderClearSequenceButton"
    class RenderClearRhythmButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderClearRhythmButton"
    class RenderRandomiseSequenceButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseSequenceButton"
    class RenderRandomiseRhythmButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseRhythmButton"
    class RenderRandomiseArpeggioButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseArpeggioButton"
    class RenderRandomiseEnvelopeButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseEnvelopeButton"
    class RenderRandomiseEverythingButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseEverythingButton"
    class RenderSoloButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderSoloButton"
    class RenderRandomiseKickButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseKickButton"
    class RenderRandomiseSnareButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseSnareButton"
    class RenderRandomiseHiHatButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderRandomiseHiHatButton"
    class RenderPlayButton(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderPlayButton"
    class RenderEnvelope(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderEnvelope"
    class RenderSlider(HookFactory):
        _name = "cGcFrontendPageByteBeat::RenderSlider"
    class GetRhythmTrackcolour(HookFactory):
        _name = "cGcFrontendPageByteBeat::GetRhythmTrackcolour"
    class GetMelodyTrackcolour(HookFactory):
        _name = "cGcFrontendPageByteBeat::GetMelodyTrackcolour"

class cGcByteBeatPlayerComponent:
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcByteBeatPlayerComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcByteBeatPlayerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcByteBeatPlayerComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcByteBeatPlayerComponent::DefaultRenderNGui"
    class Prepare(HookFactory):
        _name = "cGcByteBeatPlayerComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcByteBeatPlayerComponent::Update"
    class Release(HookFactory):
        _name = "cGcByteBeatPlayerComponent::Release"

class ComponentInstancercGcByteBeatPlayerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcByteBeatPlayerComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcByteBeatPlayerComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcByteBeatPlayerComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcByteBeatPlayerComponent::DestructInstance"

class cGcAsyncOpsTempBase:
    class ProfanityCheckBase(HookFactory):
        _name = "cGcAsyncOpsTempBase::ProfanityCheckBase"
    class RetrieveOwnerDisplayName(HookFactory):
        _name = "cGcAsyncOpsTempBase::RetrieveOwnerDisplayName"
    class SetBaseName(HookFactory):
        _name = "cGcAsyncOpsTempBase::SetBaseName"
    class GetOwnerData(HookFactory):
        _name = "cGcAsyncOpsTempBase::GetOwnerData"

class cGcBaseBuildingBaseLayout:
    class GenerateLayout(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::GenerateLayout"
        _overload: overloads.cGcBaseBuildingBaseLayout.GenerateLayout.overloads = "cGcBaseBuildingBaseLayout *, cGcPlayerBasePersistentBuffer *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBaseBuildingBaseLayout.GenerateLayout.overloads):
            cls._overload = overload_args
            return cls
    class AddObject(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::AddObject"
    class Update(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::Update"
    class ForceGenerateLayout(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::ForceGenerateLayout"
    class TestSphere(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::TestSphere"
    class TestBox(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::TestBox"
    class TestLayout(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::TestLayout"
    class cGcBaseBuildingBaseLayout(HookFactory):
        _name = "cGcBaseBuildingBaseLayout::cGcBaseBuildingBaseLayout"

class cGcBaseBuildingDownloadsManager:
    class Update(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::Update"
    class UpdateBaseExistsBatches(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::UpdateBaseExistsBatches"
    class DownloadBases(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::DownloadBases"
    class UploadDeleteBase(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::UploadDeleteBase"
    class BaseUploadingCooldown(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::BaseUploadingCooldown"
    class UploadReportBase(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::UploadReportBase"
    class BackgroundUploadBase(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::BackgroundUploadBase"
    class ValidateBaseForUpload(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ValidateBaseForUpload"
    class ValidateDownloadedBase(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ValidateDownloadedBase"
    class ProcessAtlasResponse(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ProcessAtlasResponse"
    class ProccessBaseQueryResponse(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ProccessBaseQueryResponse"
    class ProccessFeaturedBasesQueryResponse(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ProccessFeaturedBasesQueryResponse"
    class BaseData:
        class BaseData(HookFactory):
            _name = "cGcBaseBuildingDownloadsManager::BaseData::BaseData"
    class SendBaseExistsQuery(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::SendBaseExistsQuery"
    class GetBaseExistsQueryData(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::GetBaseExistsQueryData"
    class ResetDownloadBaseRequestData(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::ResetDownloadBaseRequestData"
    class GetFeaturedBasesData(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::GetFeaturedBasesData"
    class HasFeaturedBaseInUA(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::HasFeaturedBaseInUA"
    class IsFeaturedBase(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::IsFeaturedBase"
    class MarkBaseAsFeatured(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::MarkBaseAsFeatured"
    class BackgroundMarkFeaturedBaseWithScreenshot(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::BackgroundMarkFeaturedBaseWithScreenshot"
    class SendActiveFeaturedBasesQuery(HookFactory):
        _name = "cGcBaseBuildingDownloadsManager::SendActiveFeaturedBasesQuery"

class cGcBaseBuildingEffectsManager:
    class Update(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::UpdateRender"
    class AddScanEffectToNode(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::AddScanEffectToNode"
    class HideScanEffectOnChildren(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::HideScanEffectOnChildren"
    class RestoreScanEffectOnChildren(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::RestoreScanEffectOnChildren"
    class ChangeScanEffectOnNode(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::ChangeScanEffectOnNode"
    class ChangeScanEffectOnChildren(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::ChangeScanEffectOnChildren"
    class RemoveScanEffect(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::RemoveScanEffect"
    class PlayBuildEffectOnNode(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::PlayBuildEffectOnNode"
    class RemoveLightsTransparentDecalsAndShadowBoxNodes(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::RemoveLightsTransparentDecalsAndShadowBoxNodes"
    class DisableLODs(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::DisableLODs"
    class FinishBuildEffect(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::FinishBuildEffect"
    class CloneNode(HookFactory):
        _name = "cGcBaseBuildingEffectsManager::CloneNode"

class cGcBaseBuildingGenerator:
    class GenerateDungeon(HookFactory):
        _name = "cGcBaseBuildingGenerator::GenerateDungeon"
    class PollToLoadTemplatesTable(HookFactory):
        _name = "cGcBaseBuildingGenerator::PollToLoadTemplatesTable"
    class PrepareGrid(HookFactory):
        _name = "cGcBaseBuildingGenerator::PrepareGrid"
    class ShuffleRoomSequence(HookFactory):
        _name = "cGcBaseBuildingGenerator::ShuffleRoomSequence"
    class GenerateDungeonQuestItemPlacement(HookFactory):
        _name = "cGcBaseBuildingGenerator::GenerateDungeonQuestItemPlacement"
    class CheckDungeonQuestItemRules(HookFactory):
        _name = "cGcBaseBuildingGenerator::CheckDungeonQuestItemRules"
    class TryGenerateSnake(HookFactory):
        _name = "cGcBaseBuildingGenerator::TryGenerateSnake"
    class TryAddBranchesToSnake(HookFactory):
        _name = "cGcBaseBuildingGenerator::TryAddBranchesToSnake"
    class GenerateRoomSizes(HookFactory):
        _name = "cGcBaseBuildingGenerator::GenerateRoomSizes"
    class GenerateRoomLayouts(HookFactory):
        _name = "cGcBaseBuildingGenerator::GenerateRoomLayouts"
    class CheckRoomRules(HookFactory):
        _name = "cGcBaseBuildingGenerator::CheckRoomRules"
    class AddRoomsToSnake(HookFactory):
        _name = "cGcBaseBuildingGenerator::AddRoomsToSnake"
    class TryAddQuestItemSpawn(HookFactory):
        _name = "cGcBaseBuildingGenerator::TryAddQuestItemSpawn"
    class AddDecorationSpawns(HookFactory):
        _name = "cGcBaseBuildingGenerator::AddDecorationSpawns"
    class PatternMatch(HookFactory):
        _name = "cGcBaseBuildingGenerator::PatternMatch"
    class CacheRoomDecorations(HookFactory):
        _name = "cGcBaseBuildingGenerator::CacheRoomDecorations"
    class CacheTemplatesForId(HookFactory):
        _name = "cGcBaseBuildingGenerator::CacheTemplatesForId"
    class IncrementCoord(HookFactory):
        _name = "cGcBaseBuildingGenerator::IncrementCoord"
    class CheckNeighbouringCells(HookFactory):
        _name = "cGcBaseBuildingGenerator::CheckNeighbouringCells"
    class GetLocalMatrixForCoord(HookFactory):
        _name = "cGcBaseBuildingGenerator::GetLocalMatrixForCoord"
    class SpawnDecorations(HookFactory):
        _name = "cGcBaseBuildingGenerator::SpawnDecorations"
    class PruneDecorations(HookFactory):
        _name = "cGcBaseBuildingGenerator::PruneDecorations"
    class MarkDecorationSpawnOnGrid(HookFactory):
        _name = "cGcBaseBuildingGenerator::MarkDecorationSpawnOnGrid"

class cTkSpinMutex:
    class Acquire(HookFactory):
        _name = "cTkSpinMutex::Acquire"

class cTkLinearPoolJanitor:
    class cTkLinearPoolJanitor(HookFactory):
        _name = "cTkLinearPoolJanitor::cTkLinearPoolJanitor"

class cGcBuildingList:
    class FindNearest(HookFactory):
        _name = "cGcBuildingList::FindNearest"
        _overload: overloads.cGcBuildingList.FindNearest.overloads = "cGcBuildingList *, const cTkVector3 *, eBuildingClass, float *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBuildingList.FindNearest.overloads):
            cls._overload = overload_args
            return cls
    class FindBuilding(HookFactory):
        _name = "cGcBuildingList::FindBuilding"
    class GetNearestBuilding(HookFactory):
        _name = "cGcBuildingList::GetNearestBuilding"
    class AddBuilding(HookFactory):
        _name = "cGcBuildingList::AddBuilding"
    class SortByDistance(HookFactory):
        _name = "cGcBuildingList::SortByDistance"
    class RemoveBuilding(HookFactory):
        _name = "cGcBuildingList::RemoveBuilding"
    class CompareBuildingDistances(HookFactory):
        _name = "cGcBuildingList::CompareBuildingDistances"
    class CompareBuildingIDs(HookFactory):
        _name = "cGcBuildingList::CompareBuildingIDs"

class GcPersistencyHandle:
    class IsValid(HookFactory):
        _name = "GcPersistencyHandle::IsValid"

class cGcBaseBuildingPlayerPlacement:
    class IsValid(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::IsValid"
    class GetCurrentID(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::GetCurrentID"
    class HasTwinPosition(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::HasTwinPosition"
    class cGcBaseBuildingPlayerPlacement(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::cGcBaseBuildingPlayerPlacement"
    class Construct(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::Construct"
    class Update(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::UpdateRender"
    class Destruct(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::Destruct"
    class GetInvalidPositionDescription(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::GetInvalidPositionDescription"
    class RotatePlaceholder(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::RotatePlaceholder"
    class UpdatePosition(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::UpdatePosition"
    class RestorePlaceholderSettings(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::RestorePlaceholderSettings"
    class IsSnapped(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::IsSnapped"
    class SetValidPosition(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetValidPosition"
    class SetSelectedNode(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetSelectedNode"
    class SetCurrentBaseIndex(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetCurrentBaseIndex"
    class SetColourIndex(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetColourIndex"
    class SetMaterialIndex(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetMaterialIndex"
    class DuplicateSelectedNode(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::DuplicateSelectedNode"
    class GetBaseIndexForCurrentPart(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::GetBaseIndexForCurrentPart"
    class SetPreviewMode(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetPreviewMode"
    class SetPlaceholderHeartSize(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetPlaceholderHeartSize"
    class SetGhostHeartSize(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetGhostHeartSize"
    class GetMinPlacementDistanceForCurrentObject(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::GetMinPlacementDistanceForCurrentObject"
    class DoesPartExistAsProductInInventories(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::DoesPartExistAsProductInInventories"
    class PreviewMatrix(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::PreviewMatrix"
    class UpdateLoadPlaceholder(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::UpdateLoadPlaceholder"
    class GetScanEffect(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::GetScanEffect"
    class SetNodeState(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::SetNodeState"
    class AddGhostHeartToObject(HookFactory):
        _name = "cGcBaseBuildingPlayerPlacement::AddGhostHeartToObject"

class cGcBaseBuildingManager:
    class cGcBaseBuildingManager(HookFactory):
        _name = "cGcBaseBuildingManager::cGcBaseBuildingManager"
    class SetNodeColour(HookFactory):
        _name = "cGcBaseBuildingManager::SetNodeColour"
        _overload: overloads.cGcBaseBuildingManager.SetNodeColour.overloads = "cGcBaseBuildingManager *, TkHandle, unsigned __int8"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBaseBuildingManager.SetNodeColour.overloads):
            cls._overload = overload_args
            return cls
    class IsBaseSpawned(HookFactory):
        _name = "cGcBaseBuildingManager::IsBaseSpawned"
    class Construct(HookFactory):
        _name = "cGcBaseBuildingManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcBaseBuildingManager::Prepare"
    class PollToPrepareTemplates(HookFactory):
        _name = "cGcBaseBuildingManager::PollToPrepareTemplates"
    class UpdatePreComponents(HookFactory):
        _name = "cGcBaseBuildingManager::UpdatePreComponents"
    class Update(HookFactory):
        _name = "cGcBaseBuildingManager::Update"
    class UpdateProtectedLocations(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateProtectedLocations"
    class UpdateBaseBuildingNodeOffset(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateBaseBuildingNodeOffset"
    class UpdateSelectionMode(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateSelectionMode"
    class UpdatePlacementMode(HookFactory):
        _name = "cGcBaseBuildingManager::UpdatePlacementMode"
    class GetCubeGroupFromPosition(HookFactory):
        _name = "cGcBaseBuildingManager::GetCubeGroupFromPosition"
    class GetSnappingOptionsForPlaceholder(HookFactory):
        _name = "cGcBaseBuildingManager::GetSnappingOptionsForPlaceholder"
    class CheckGhostOptionValidAndScore(HookFactory):
        _name = "cGcBaseBuildingManager::CheckGhostOptionValidAndScore"
    class AddUniqueGhostOption(HookFactory):
        _name = "cGcBaseBuildingManager::AddUniqueGhostOption"
    class GetDistanceToSnappingCone(HookFactory):
        _name = "cGcBaseBuildingManager::GetDistanceToSnappingCone"
    class GetTargetOrientation(HookFactory):
        _name = "cGcBaseBuildingManager::GetTargetOrientation"
    class GetPlacementContactForTemplate(HookFactory):
        _name = "cGcBaseBuildingManager::GetPlacementContactForTemplate"
    class SetSurfacePlacementForPlaceholder(HookFactory):
        _name = "cGcBaseBuildingManager::SetSurfacePlacementForPlaceholder"
    class CheckBaseObjectCollision(HookFactory):
        _name = "cGcBaseBuildingManager::CheckBaseObjectCollision"
    class SetBestSnappingOptionsOnPlaceholder(HookFactory):
        _name = "cGcBaseBuildingManager::SetBestSnappingOptionsOnPlaceholder"
    class CheckSnappingPlacementRules(HookFactory):
        _name = "cGcBaseBuildingManager::CheckSnappingPlacementRules"
    class CheckSurfacePlacementRules(HookFactory):
        _name = "cGcBaseBuildingManager::CheckSurfacePlacementRules"
    class CheckPlacementAllowed(HookFactory):
        _name = "cGcBaseBuildingManager::CheckPlacementAllowed"
    class BroadphaseProbeTemplateCollision(HookFactory):
        _name = "cGcBaseBuildingManager::BroadphaseProbeTemplateCollision"
    class UpdatePlaceholderParts(HookFactory):
        _name = "cGcBaseBuildingManager::UpdatePlaceholderParts"
    class CanBuild(HookFactory):
        _name = "cGcBaseBuildingManager::CanBuild"
    class CanGenerallyBuildObject(HookFactory):
        _name = "cGcBaseBuildingManager::CanGenerallyBuildObject"
    class UpdateModeChange(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateModeChange"
    class UpdateActions(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateActions"
    class UpdateAutoPower(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateAutoPower"
    class UpdateRender(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateRender"
    class BroadcastPlaceholder(HookFactory):
        _name = "cGcBaseBuildingManager::BroadcastPlaceholder"
    class UpdateNodeRemoval(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateNodeRemoval"
    class SetMagicModelsBudgets(HookFactory):
        _name = "cGcBaseBuildingManager::SetMagicModelsBudgets"
    class Destruct(HookFactory):
        _name = "cGcBaseBuildingManager::Destruct"
    class Release(HookFactory):
        _name = "cGcBaseBuildingManager::Release"
    class BuildObject(HookFactory):
        _name = "cGcBaseBuildingManager::BuildObject"
    class BuildRemoteObject(HookFactory):
        _name = "cGcBaseBuildingManager::BuildRemoteObject"
    class BuildWFCObject(HookFactory):
        _name = "cGcBaseBuildingManager::BuildWFCObject"
    class RemovePlaceholderNode(HookFactory):
        _name = "cGcBaseBuildingManager::RemovePlaceholderNode"
    class AddNodesFromRegion(HookFactory):
        _name = "cGcBaseBuildingManager::AddNodesFromRegion"
    class AddObjectMarker(HookFactory):
        _name = "cGcBaseBuildingManager::AddObjectMarker"
    class AddHUDMarker(HookFactory):
        _name = "cGcBaseBuildingManager::AddHUDMarker"
    class RemoveHUDMarker(HookFactory):
        _name = "cGcBaseBuildingManager::RemoveHUDMarker"
    class AddPlayerBaseNodes(HookFactory):
        _name = "cGcBaseBuildingManager::AddPlayerBaseNodes"
    class ForceAddPlayerBaseNode(HookFactory):
        _name = "cGcBaseBuildingManager::ForceAddPlayerBaseNode"
    class RefreshPersistentBufferObject(HookFactory):
        _name = "cGcBaseBuildingManager::RefreshPersistentBufferObject"
    class RemoveObjectsByPersistentIndex(HookFactory):
        _name = "cGcBaseBuildingManager::RemoveObjectsByPersistentIndex"
    class ClearPlayerBaseObjects(HookFactory):
        _name = "cGcBaseBuildingManager::ClearPlayerBaseObjects"
    class ClearBaseCubeNodes(HookFactory):
        _name = "cGcBaseBuildingManager::ClearBaseCubeNodes"
    class DeleteBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::DeleteBuildingObject"
    class RemoveNodesFromRegion(HookFactory):
        _name = "cGcBaseBuildingManager::RemoveNodesFromRegion"
    class DeleteBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::DeleteBaseBuildingObject"
    class RemoveInteriorDecoration(HookFactory):
        _name = "cGcBaseBuildingManager::RemoveInteriorDecoration"
    class CreateObjectTemplate(HookFactory):
        _name = "cGcBaseBuildingManager::CreateObjectTemplate"
    class CreateSnapPointTemplate(HookFactory):
        _name = "cGcBaseBuildingManager::CreateSnapPointTemplate"
    class EditTerrainAroundBuilding(HookFactory):
        _name = "cGcBaseBuildingManager::EditTerrainAroundBuilding"
    class LoadModel(HookFactory):
        _name = "cGcBaseBuildingManager::LoadModel"
    class LoadTexture(HookFactory):
        _name = "cGcBaseBuildingManager::LoadTexture"
    class GetNearestPlayersDistanceToObject(HookFactory):
        _name = "cGcBaseBuildingManager::GetNearestPlayersDistanceToObject"
    class IsShipInsideObject(HookFactory):
        _name = "cGcBaseBuildingManager::IsShipInsideObject"
    class CheckObjectIsIllegal(HookFactory):
        _name = "cGcBaseBuildingManager::CheckObjectIsIllegal"
    class CheckPositionIsProtected(HookFactory):
        _name = "cGcBaseBuildingManager::CheckPositionIsProtected"
    class CheckPriviledgeForObject(HookFactory):
        _name = "cGcBaseBuildingManager::CheckPriviledgeForObject"
    class CheckPriviledgeForBase(HookFactory):
        _name = "cGcBaseBuildingManager::CheckPriviledgeForBase"
    class GetBasePartAudioLocation(HookFactory):
        _name = "cGcBaseBuildingManager::GetBasePartAudioLocation"
    class ClaimBase(HookFactory):
        _name = "cGcBaseBuildingManager::ClaimBase"
    class GetBaseRootNode(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseRootNode"
    class ClearBaseRootNode(HookFactory):
        _name = "cGcBaseBuildingManager::ClearBaseRootNode"
    class MoveBaseMatrix(HookFactory):
        _name = "cGcBaseBuildingManager::MoveBaseMatrix"
    class AreResourcesAwaitingLoad(HookFactory):
        _name = "cGcBaseBuildingManager::AreResourcesAwaitingLoad"
    class DoPlace(HookFactory):
        _name = "cGcBaseBuildingManager::DoPlace"
    class DoReplace(HookFactory):
        _name = "cGcBaseBuildingManager::DoReplace"
    class DoDelete(HookFactory):
        _name = "cGcBaseBuildingManager::DoDelete"
    class CheckCanDeleteBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::CheckCanDeleteBuildingObject"
    class DeleteBuildingNode(HookFactory):
        _name = "cGcBaseBuildingManager::DeleteBuildingNode"
    class CanPickUp(HookFactory):
        _name = "cGcBaseBuildingManager::CanPickUp"
    class PlayBuiltEffect(HookFactory):
        _name = "cGcBaseBuildingManager::PlayBuiltEffect"
    class GetTerrainEditsForBuilding(HookFactory):
        _name = "cGcBaseBuildingManager::GetTerrainEditsForBuilding"
    class DoSetColour(HookFactory):
        _name = "cGcBaseBuildingManager::DoSetColour"
    class DoSetMaterial(HookFactory):
        _name = "cGcBaseBuildingManager::DoSetMaterial"
    class DoRotateSnapping(HookFactory):
        _name = "cGcBaseBuildingManager::DoRotateSnapping"
    class DoDeleteBase(HookFactory):
        _name = "cGcBaseBuildingManager::DoDeleteBase"
    class GetBaseObjectLocalMatrix(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseObjectLocalMatrix"
    class GetWorldMatrixFromBufferData(HookFactory):
        _name = "cGcBaseBuildingManager::GetWorldMatrixFromBufferData"
    class GetBaseBuildingRootMatrix(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseBuildingRootMatrix"
    class AddPersistentObject(HookFactory):
        _name = "cGcBaseBuildingManager::AddPersistentObject"
    class DeletePersistentObject(HookFactory):
        _name = "cGcBaseBuildingManager::DeletePersistentObject"
    class GetMatrixScale(HookFactory):
        _name = "cGcBaseBuildingManager::GetMatrixScale"
    class AddBaseTeleporterLocation(HookFactory):
        _name = "cGcBaseBuildingManager::AddBaseTeleporterLocation"
    class FindBaseTeleporterLocator(HookFactory):
        _name = "cGcBaseBuildingManager::FindBaseTeleporterLocator"
    class IsPartCore(HookFactory):
        _name = "cGcBaseBuildingManager::IsPartCore"
    class GetDefaultPaletteIndexForPart(HookFactory):
        _name = "cGcBaseBuildingManager::GetDefaultPaletteIndexForPart"
    class GetDefaultMaterialIndexForPart(HookFactory):
        _name = "cGcBaseBuildingManager::GetDefaultMaterialIndexForPart"
    class SetNodeMaterial(HookFactory):
        _name = "cGcBaseBuildingManager::SetNodeMaterial"
    class GetMaxAllowableParts(HookFactory):
        _name = "cGcBaseBuildingManager::GetMaxAllowableParts"
    class FindEntryByID(HookFactory):
        _name = "cGcBaseBuildingManager::FindEntryByID"
    class FindTemplateByID(HookFactory):
        _name = "cGcBaseBuildingManager::FindTemplateByID"
    class UpdateFreighterBoundingBox(HookFactory):
        _name = "cGcBaseBuildingManager::UpdateFreighterBoundingBox"
    class IsPlayerOverlappingPlayerOwnedBase(HookFactory):
        _name = "cGcBaseBuildingManager::IsPlayerOverlappingPlayerOwnedBase"
    class GetBaseTypeFromIndex(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseTypeFromIndex"
    class FindRegionId(HookFactory):
        _name = "cGcBaseBuildingManager::FindRegionId"
    class GetRegionIDForObject(HookFactory):
        _name = "cGcBaseBuildingManager::GetRegionIDForObject"
    class PrepareBasePart(HookFactory):
        _name = "cGcBaseBuildingManager::PrepareBasePart"
    class ColourBasePart(HookFactory):
        _name = "cGcBaseBuildingManager::ColourBasePart"
    class FindBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::FindBaseBuildingObject"
        _overload: overloads.cGcBaseBuildingManager.FindBaseBuildingObject.overloads = "cGcBaseBuildingManager *, TkHandle"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBaseBuildingManager.FindBaseBuildingObject.overloads):
            cls._overload = overload_args
            return cls
    class AddBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::AddBaseBuildingObject"
    class AddTemporaryBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::AddTemporaryBaseBuildingObject"
    class AddGhostObject(HookFactory):
        _name = "cGcBaseBuildingManager::AddGhostObject"
    class GeneratePartData(HookFactory):
        _name = "cGcBaseBuildingManager::GeneratePartData"
    class RequestDeferredRemovalOfPlayerBaseObjects(HookFactory):
        _name = "cGcBaseBuildingManager::RequestDeferredRemovalOfPlayerBaseObjects"
    class IsPositionOverlappingBase(HookFactory):
        _name = "cGcBaseBuildingManager::IsPositionOverlappingBase"
    class GetBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseBuildingObject"
    class GetBaseBuildingTable(HookFactory):
        _name = "cGcBaseBuildingManager::GetBaseBuildingTable"
    class RequestAction(HookFactory):
        _name = "cGcBaseBuildingManager::RequestAction"
    class GetPlayerPlacement(HookFactory):
        _name = "cGcBaseBuildingManager::GetPlayerPlacement"
    class IsInsideSealedBuildingNode(HookFactory):
        _name = "cGcBaseBuildingManager::IsInsideSealedBuildingNode"
    class SetBasePlanetPositions(HookFactory):
        _name = "cGcBaseBuildingManager::SetBasePlanetPositions"

class cGcExpeditionHologramComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcExpeditionHologramComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcExpeditionHologramComponent::InitData"
    class GetNumComponents(HookFactory):
        _name = "cGcExpeditionHologramComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcExpeditionHologramComponent::GetTypedComponent"
        _overload: overloads.cGcExpeditionHologramComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcExpeditionHologramComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class OnAttached(HookFactory):
        _name = "cGcExpeditionHologramComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcExpeditionHologramComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcExpeditionHologramComponent::Release"
    class Update(HookFactory):
        _name = "cGcExpeditionHologramComponent::Update"
    class GetBaseBuildingData(HookFactory):
        _name = "cGcExpeditionHologramComponent::GetBaseBuildingData"
    class SetExpedition(HookFactory):
        _name = "cGcExpeditionHologramComponent::SetExpedition"
    class TryToAssignExpedition(HookFactory):
        _name = "cGcExpeditionHologramComponent::TryToAssignExpedition"
    class UpdateCaptainHologram(HookFactory):
        _name = "cGcExpeditionHologramComponent::UpdateCaptainHologram"
    class UpdateFrigateHologramsInternal(HookFactory):
        _name = "cGcExpeditionHologramComponent::UpdateFrigateHologramsInternal"
    class UpdateFrigateHologramRotation(HookFactory):
        _name = "cGcExpeditionHologramComponent::UpdateFrigateHologramRotation"
    class UpdateFrigateHologramColours(HookFactory):
        _name = "cGcExpeditionHologramComponent::UpdateFrigateHologramColours"
    class SetFrigateNodeUserData(HookFactory):
        _name = "cGcExpeditionHologramComponent::SetFrigateNodeUserData"

class ComponentInstancercGcExpeditionHologramComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcExpeditionHologramComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcExpeditionHologramComponent::ConstructInstance"

class ComponentLoadInstancercGcExpeditionHologramComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcExpeditionHologramComponent::Register"

class cGcSimpleInteractionComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSimpleInteractionComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcSimpleInteractionComponent::FindFirstTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcSimpleInteractionComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSimpleInteractionComponent::Prepare"
    class PreparePersistency(HookFactory):
        _name = "cGcSimpleInteractionComponent::PreparePersistency"
    class ActivateOnPrepare(HookFactory):
        _name = "cGcSimpleInteractionComponent::ActivateOnPrepare"
    class PrepareRewards(HookFactory):
        _name = "cGcSimpleInteractionComponent::PrepareRewards"
    class PrepareName(HookFactory):
        _name = "cGcSimpleInteractionComponent::PrepareName"
    class PrepareCost(HookFactory):
        _name = "cGcSimpleInteractionComponent::PrepareCost"
    class BaseBuildingChangeState(HookFactory):
        _name = "cGcSimpleInteractionComponent::BaseBuildingChangeState"
    class GiveResourceHarvesterReward(HookFactory):
        _name = "cGcSimpleInteractionComponent::GiveResourceHarvesterReward"
    class GiveBiomeHarvesterReward(HookFactory):
        _name = "cGcSimpleInteractionComponent::GiveBiomeHarvesterReward"
    class Update(HookFactory):
        _name = "cGcSimpleInteractionComponent::Update"
    class Release(HookFactory):
        _name = "cGcSimpleInteractionComponent::Release"
    class CanInteract(HookFactory):
        _name = "cGcSimpleInteractionComponent::CanInteract"
    class CanReward(HookFactory):
        _name = "cGcSimpleInteractionComponent::CanReward"
    class Interact(HookFactory):
        _name = "cGcSimpleInteractionComponent::Interact"
    class BeginHold(HookFactory):
        _name = "cGcSimpleInteractionComponent::BeginHold"
    class DoAction(HookFactory):
        _name = "cGcSimpleInteractionComponent::DoAction"
    class GetRewardIDWithOverride(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetRewardIDWithOverride"
    class SaveEmptyInteraction(HookFactory):
        _name = "cGcSimpleInteractionComponent::SaveEmptyInteraction"
    class GetName(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetName"
    class GetInteractionCategoryData(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetInteractionCategoryData"
    class GetPersistentInteractionPosition(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetPersistentInteractionPosition"
    class GetPersistentBuffer(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetPersistentBuffer"
    class GetBuildingProgress(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetBuildingProgress"
    class UpdateBuildingTimestamp(HookFactory):
        _name = "cGcSimpleInteractionComponent::UpdateBuildingTimestamp"
    class GetInteractDistance(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetInteractDistance"
    class CreateAndResetCosts(HookFactory):
        _name = "cGcSimpleInteractionComponent::CreateAndResetCosts"
    class TimeToFinalBaseBuildingStage(HookFactory):
        _name = "cGcSimpleInteractionComponent::TimeToFinalBaseBuildingStage"
    class GetVRInteractSubtitle(HookFactory):
        _name = "cGcSimpleInteractionComponent::GetVRInteractSubtitle"
    class IsFeedingInteraction(HookFactory):
        _name = "cGcSimpleInteractionComponent::IsFeedingInteraction"

class ComponentInstancercGcSimpleInteractionComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcSimpleInteractionComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSimpleInteractionComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSimpleInteractionComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcSimpleInteractionComponent::DestructInstance"

class cGcRefinerUnitComponent:
    class OnAttached(HookFactory):
        _name = "cGcRefinerUnitComponent::OnAttached"
    class RefreshPersistency(HookFactory):
        _name = "cGcRefinerUnitComponent::RefreshPersistency"
    class ItemAmountAccumulatorActive(HookFactory):
        _name = "cGcRefinerUnitComponent::ItemAmountAccumulatorActive"
    class IsCooker(HookFactory):
        _name = "cGcRefinerUnitComponent::IsCooker"
    class GetTypedComponent(HookFactory):
        _name = "cGcRefinerUnitComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcRefinerUnitComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcRefinerUnitComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcRefinerUnitComponent::DefaultRenderNGui"
    class IsPersonalRefiner(HookFactory):
        _name = "cGcRefinerUnitComponent::IsPersonalRefiner"
    class GetCurrentOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::GetCurrentOutput"
    class GetCurrentMaxOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::GetCurrentMaxOutput"
    class TimeToComplete(HookFactory):
        _name = "cGcRefinerUnitComponent::TimeToComplete"
    class GetRequestedOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::GetRequestedOutput"
    class SetRequestedOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::SetRequestedOutput"
    class StoreInitialProgress(HookFactory):
        _name = "cGcRefinerUnitComponent::StoreInitialProgress"
    class GetOutputSlotIndex(HookFactory):
        _name = "cGcRefinerUnitComponent::GetOutputSlotIndex"
    class GetFuelSlotIndex(HookFactory):
        _name = "cGcRefinerUnitComponent::GetFuelSlotIndex"
    class GetOutputId(HookFactory):
        _name = "cGcRefinerUnitComponent::GetOutputId"
    class Prepare(HookFactory):
        _name = "cGcRefinerUnitComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcRefinerUnitComponent::Release"
    class Update(HookFactory):
        _name = "cGcRefinerUnitComponent::Update"
    class Setup(HookFactory):
        _name = "cGcRefinerUnitComponent::Setup"
    class UpdatePlayerInventory(HookFactory):
        _name = "cGcRefinerUnitComponent::UpdatePlayerInventory"
    class CustomSlotUpdate(HookFactory):
        _name = "cGcRefinerUnitComponent::CustomSlotUpdate"
    class CustomSlotRequirementsMet(HookFactory):
        _name = "cGcRefinerUnitComponent::CustomSlotRequirementsMet"
    class IsRefinerFueled(HookFactory):
        _name = "cGcRefinerUnitComponent::IsRefinerFueled"
    class GetFuelAmount(HookFactory):
        _name = "cGcRefinerUnitComponent::GetFuelAmount"
    class TimeToMakeOne(HookFactory):
        _name = "cGcRefinerUnitComponent::TimeToMakeOne"
    class HasAnythingInInputs(HookFactory):
        _name = "cGcRefinerUnitComponent::HasAnythingInInputs"
    class GetCurrentActiveRecipe(HookFactory):
        _name = "cGcRefinerUnitComponent::GetCurrentActiveRecipe"
    class GetBestPossibleRecipe(HookFactory):
        _name = "cGcRefinerUnitComponent::GetBestPossibleRecipe"
    class GetNumInputSlots(HookFactory):
        _name = "cGcRefinerUnitComponent::GetNumInputSlots"
    class GetItemInSlot(HookFactory):
        _name = "cGcRefinerUnitComponent::GetItemInSlot"
    class Start(HookFactory):
        _name = "cGcRefinerUnitComponent::Start"
    class Stop(HookFactory):
        _name = "cGcRefinerUnitComponent::Stop"
    class GetProgress(HookFactory):
        _name = "cGcRefinerUnitComponent::GetProgress"
    class StartPickup(HookFactory):
        _name = "cGcRefinerUnitComponent::StartPickup"
    class CompletePickup(HookFactory):
        _name = "cGcRefinerUnitComponent::CompletePickup"
    class GetDefaultOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::GetDefaultOutput"
    class CanMakeRecipe(HookFactory):
        _name = "cGcRefinerUnitComponent::CanMakeRecipe"
    class ValidateOutputAndInputSlots(HookFactory):
        _name = "cGcRefinerUnitComponent::ValidateOutputAndInputSlots"
    class IsInInventorySlot(HookFactory):
        _name = "cGcRefinerUnitComponent::IsInInventorySlot"
    class CalculateCurrentRecipeOutput(HookFactory):
        _name = "cGcRefinerUnitComponent::CalculateCurrentRecipeOutput"
    class FindRawElement(HookFactory):
        _name = "cGcRefinerUnitComponent::FindRawElement"
    class GetUsedInputs(HookFactory):
        _name = "cGcRefinerUnitComponent::GetUsedInputs"

class ComponentInstancercGcRefinerUnitComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcRefinerUnitComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcRefinerUnitComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcRefinerUnitComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcRefinerUnitComponent::DestructInstance"

class cGcObjectSpawnerComponent:
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcObjectSpawnerComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcObjectSpawnerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcObjectSpawnerComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcObjectSpawnerComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcObjectSpawnerComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcObjectSpawnerComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cGcObjectSpawnerComponent::UpdateRender"
    class Release(HookFactory):
        _name = "cGcObjectSpawnerComponent::Release"
    class SpawnObject(HookFactory):
        _name = "cGcObjectSpawnerComponent::SpawnObject"
    class FindSpawnedObject(HookFactory):
        _name = "cGcObjectSpawnerComponent::FindSpawnedObject"

class ComponentInstancercGcObjectSpawnerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcObjectSpawnerComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcObjectSpawnerComponent::ConstructInstance"

class ComponentInstancercGcSquadronHologramComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSquadronHologramComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcSquadronHologramComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSquadronHologramComponent::ConstructInstance"

class ComponentInstancercGcVehicleRaceInviteComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleRaceInviteComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcVehicleRaceInviteComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleRaceInviteComponent::ConstructInstance"

class cGcBaseDefenceComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcBaseDefenceComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcBaseDefenceComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcBaseDefenceComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcBaseDefenceComponent::Update"
    class Release(HookFactory):
        _name = "cGcBaseDefenceComponent::Release"
    class GetSearchingUnitTime(HookFactory):
        _name = "cGcBaseDefenceComponent::GetSearchingUnitTime"
    class UpdateBehaviours(HookFactory):
        _name = "cGcBaseDefenceComponent::UpdateBehaviours"
    class UpdateLasers(HookFactory):
        _name = "cGcBaseDefenceComponent::UpdateLasers"
    class UpdateTurretReset(HookFactory):
        _name = "cGcBaseDefenceComponent::UpdateTurretReset"

class ComponentInstancercGcBaseDefenceComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcBaseDefenceComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcBaseDefenceComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcBaseDefenceComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcBaseDefenceComponent::DestructInstance"

class cGcByteBeatSwitchComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcByteBeatSwitchComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcByteBeatSwitchComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcByteBeatSwitchComponent::GetTypedComponent"
    class Prepare(HookFactory):
        _name = "cGcByteBeatSwitchComponent::Prepare"
    class GatherConnectedByteBeats(HookFactory):
        _name = "cGcByteBeatSwitchComponent::GatherConnectedByteBeats"

class ComponentInstancercGcByteBeatSwitchComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcByteBeatSwitchComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcByteBeatSwitchComponent::ConstructInstance"

class ComponentInstancercGcNPCHabitationComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNPCHabitationComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcNPCHabitationComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNPCHabitationComponent::ConstructInstance"

class ComponentInstancercGcCustomiserCharacterComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCustomiserCharacterComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcCustomiserCharacterComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCustomiserCharacterComponent::ConstructInstance"

class cGcNPCHabitationComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcNPCHabitationComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNPCHabitationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNPCHabitationComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcNPCHabitationComponent::DefaultRenderNGui"
    class Prepare(HookFactory):
        _name = "cGcNPCHabitationComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcNPCHabitationComponent::Update"
    class TrySpawnWorker(HookFactory):
        _name = "cGcNPCHabitationComponent::TrySpawnWorker"
    class Release(HookFactory):
        _name = "cGcNPCHabitationComponent::Release"

class ComponentLoadInstancercGcNPCHabitationComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcNPCHabitationComponent::Register"

class cGcOutpostDockNode:
    class GetDockNode(HookFactory):
        _name = "cGcOutpostDockNode::GetDockNode"
    class ReleaseAll(HookFactory):
        _name = "cGcOutpostDockNode::ReleaseAll"
    class Construct(HookFactory):
        _name = "cGcOutpostDockNode::Construct"
    class Prepare(HookFactory):
        _name = "cGcOutpostDockNode::Prepare"
    class Release(HookFactory):
        _name = "cGcOutpostDockNode::Release"
    class GetDoorMat(HookFactory):
        _name = "cGcOutpostDockNode::GetDoorMat"
    class IsBuyLocked(HookFactory):
        _name = "cGcOutpostDockNode::IsBuyLocked"
    class DockingShipData:
        class Update(HookFactory):
            _name = "cGcOutpostDockNode::DockingShipData::Update"
        class TakeOff(HookFactory):
            _name = "cGcOutpostDockNode::DockingShipData::TakeOff"
        class PlayTakeoffEffects(HookFactory):
            _name = "cGcOutpostDockNode::DockingShipData::PlayTakeoffEffects"

class cGcQuickMenuState:
    class IsPointedAt(HookFactory):
        _name = "cGcQuickMenuState::IsPointedAt"
    class UpdateErrorLabel(HookFactory):
        _name = "cGcQuickMenuState::UpdateErrorLabel"
    class SetErrorMessage(HookFactory):
        _name = "cGcQuickMenuState::SetErrorMessage"
    class IsSlotHighlighted(HookFactory):
        _name = "cGcQuickMenuState::IsSlotHighlighted"
    class GetIconTextForActionPair(HookFactory):
        _name = "cGcQuickMenuState::GetIconTextForActionPair"
    class ConstructTipString(HookFactory):
        _name = "cGcQuickMenuState::ConstructTipString"

class cGcHologramComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcHologramComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcHologramComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcHologramComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcHologramComponent::DefaultRenderNGui"
    class OnAttached(HookFactory):
        _name = "cGcHologramComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcHologramComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcHologramComponent::Update"
    class TrySpawnHologram(HookFactory):
        _name = "cGcHologramComponent::TrySpawnHologram"
    class Release(HookFactory):
        _name = "cGcHologramComponent::Release"
    class DoRandomAnimation(HookFactory):
        _name = "cGcHologramComponent::DoRandomAnimation"
    class UpdateCreatureState(HookFactory):
        _name = "cGcHologramComponent::UpdateCreatureState"

class ComponentInstancercGcHologramComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcHologramComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcHologramComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcHologramComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcHologramComponent::DestructInstance"

class ComponentLoadInstancercGcHologramComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcHologramComponent::Register"

class cGcVehicleGarageComponent:
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcVehicleGarageComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcVehicleGarageComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcVehicleGarageComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcVehicleGarageComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcVehicleGarageComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcVehicleGarageComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cGcVehicleGarageComponent::UpdateRender"
    class SpawnVehicle(HookFactory):
        _name = "cGcVehicleGarageComponent::SpawnVehicle"

class ComponentInstancercGcVehicleGarageComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcVehicleGarageComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcVehicleGarageComponent::ConstructInstance"

class cGcFreighterBaseComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcFreighterBaseComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcFreighterBaseComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcFreighterBaseComponent::DefaultRenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcFreighterBaseComponent::GetTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcFreighterBaseComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcFreighterBaseComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcFreighterBaseComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcFreighterBaseComponent::Update"
    class Release(HookFactory):
        _name = "cGcFreighterBaseComponent::Release"
    class GenerateFreighterBase(HookFactory):
        _name = "cGcFreighterBaseComponent::GenerateFreighterBase"
    class ResetAndLoadFreighterBaseFromFile(HookFactory):
        _name = "cGcFreighterBaseComponent::ResetAndLoadFreighterBaseFromFile"
    class SpawnFreighterBaseNodes(HookFactory):
        _name = "cGcFreighterBaseComponent::SpawnFreighterBaseNodes"
    class DespawnFreighterBaseNodes(HookFactory):
        _name = "cGcFreighterBaseComponent::DespawnFreighterBaseNodes"
    class ClaimFreighterBase(HookFactory):
        _name = "cGcFreighterBaseComponent::ClaimFreighterBase"
    class IsInsideFreighterBaseBoundingBox(HookFactory):
        _name = "cGcFreighterBaseComponent::IsInsideFreighterBaseBoundingBox"
    class GenerateCivilianFreighterBase(HookFactory):
        _name = "cGcFreighterBaseComponent::GenerateCivilianFreighterBase"
    class PollToGenerateBase(HookFactory):
        _name = "cGcFreighterBaseComponent::PollToGenerateBase"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcFreighterBaseComponent::FindFirstTypedComponent"

class ComponentInstancercGcFreighterBaseComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcFreighterBaseComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcFreighterBaseComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcFreighterBaseComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcFreighterBaseComponent::DestructInstance"

class cGcAbandonedFreighterComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAbandonedFreighterComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcAbandonedFreighterComponent::DefaultRenderNGui"
    class IsRoomBranch(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsRoomBranch"
    class GetCurrentRoomIndex(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetCurrentRoomIndex"
    class IsAbandonedFreighterNearby(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsAbandonedFreighterNearby"
    class GetNumComponents(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetTypedComponent"
        _overload: overloads.cGcAbandonedFreighterComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAbandonedFreighterComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class Prepare(HookFactory):
        _name = "cGcAbandonedFreighterComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcAbandonedFreighterComponent::Update"
    class GetDungeonDoorVariable(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetDungeonDoorVariable"
    class Release(HookFactory):
        _name = "cGcAbandonedFreighterComponent::Release"
    class GenerateFreighterDungeonJob(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GenerateFreighterDungeonJob"
    class IsDungeonUnlocked(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsDungeonUnlocked"
    class SetDungeonUnlocked(HookFactory):
        _name = "cGcAbandonedFreighterComponent::SetDungeonUnlocked"
    class IsInsideFreighterAirLock(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsInsideFreighterAirLock"
    class IsInsideFreighterDungeonBoundingBox(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsInsideFreighterDungeonBoundingBox"
    class GetPlayerLocalAbandonedFreighter(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetPlayerLocalAbandonedFreighter"
    class GetNumberOfRoomsVisited(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetNumberOfRoomsVisited"
    class GetRoomIndexForPosition(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetRoomIndexForPosition"
    class GetRoomLocId(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GetRoomLocId"
    class IsWorldPositionInsideAnyAbandonedFreighter(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsWorldPositionInsideAnyAbandonedFreighter"
    class PickDungeon(HookFactory):
        _name = "cGcAbandonedFreighterComponent::PickDungeon"
    class IsWorldPositionInOBB(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsWorldPositionInOBB"
    class GenerateFreighterDungeon(HookFactory):
        _name = "cGcAbandonedFreighterComponent::GenerateFreighterDungeon"
    class IsQuestItemInCurrentRoom(HookFactory):
        _name = "cGcAbandonedFreighterComponent::IsQuestItemInCurrentRoom"

class ComponentInstancercGcAbandonedFreighterComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcAbandonedFreighterComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcAbandonedFreighterComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAbandonedFreighterComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcAbandonedFreighterComponent::DestructInstance"

class cGcColouriseComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcColouriseComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcColouriseComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcColouriseComponent::Prepare"
    class SetPackColourVecToUserData(HookFactory):
        _name = "cGcColouriseComponent::SetPackColourVecToUserData"
    class GammaCorrectRGBQuartet(HookFactory):
        _name = "cGcColouriseComponent::GammaCorrectRGBQuartet"
    class PackRGBQuartetToVec4(HookFactory):
        _name = "cGcColouriseComponent::PackRGBQuartetToVec4"

class ComponentInstancercGcColouriseComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcColouriseComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcColouriseComponent::ConstructInstance"

class cTkMetadataCache:
    class Load(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::Load"
    class GetInstance(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::GetInstance"
    class Release(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::Release"
    class FinishAsyncLoad(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::FinishAsyncLoad"
    class LoadAsync(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::LoadAsync"
    class DefaulOnReceiveMetadataCallback(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::DefaulOnReceiveMetadataCallback"
    class OnFinishLoadCallback(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::OnFinishLoadCallback"
    class GetFilename(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::GetFilename"
    class Save(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::Save"
    class RenderNGui(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetadataCache<{T0}>::RenderNGui"

class cGcProjectileData:
    class cGcProjectileData(HookFactory):
        _name = "cGcProjectileData::cGcProjectileData"
        _overload: overloads.cGcProjectileData.cGcProjectileData.overloads = "cGcProjectileData *, const cGcProjectileData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProjectileData.cGcProjectileData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectileData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProjectileData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcProjectileData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcProjectileData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProjectileData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProjectileData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProjectileData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectileData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProjectileData::WriteToXMLNodeExplicit"

class cTkProceduralTextureChosenOptionList:
    class cTkProceduralTextureChosenOptionList(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::cTkProceduralTextureChosenOptionList"
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::FixDown"
    class FixUp(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkProceduralTextureChosenOptionList::WriteToXMLNodeExplicit"

class cGcResourceElement:
    class cGcResourceElement(HookFactory):
        _name = "cGcResourceElement::cGcResourceElement"
        _overload: overloads.cGcResourceElement.cGcResourceElement.overloads = "cGcResourceElement *, const cGcResourceElement *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcResourceElement.cGcResourceElement.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcResourceElement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcResourceElement::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcResourceElement::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcResourceElement::FixDown"
    class FixUp(HookFactory):
        _name = "cGcResourceElement::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcResourceElement::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcResourceElement::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcResourceElement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcResourceElement::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcResourceElement::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcResourceElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcResourceElement::WriteToXMLNodeExplicit"

class cGcNetworkMessage:
    class cGcNetworkMessage(HookFactory):
        _name = "cGcNetworkMessage::cGcNetworkMessage"
    class Serialize(HookFactory):
        _name = "cGcNetworkMessage::Serialize"

class cTkSphere:
    class GetCubeUp(HookFactory):
        _name = "cTkSphere::GetCubeUp"
    class ProjectSphereToCube(HookFactory):
        _name = "cTkSphere::ProjectSphereToCube"
    class GetCubeMatrix(HookFactory):
        _name = "cTkSphere::GetCubeMatrix"
    class ProjectHemisphereToPlane(HookFactory):
        _name = "cTkSphere::ProjectHemisphereToPlane"
    class GetHorizonDisc(HookFactory):
        _name = "cTkSphere::GetHorizonDisc"

class cGcNetworkLockManager:
    class sKey:
        class sKey(HookFactory):
            _name = "cGcNetworkLockManager::sKey::sKey"
    class RequestLock(HookFactory):
        _name = "cGcNetworkLockManager::RequestLock"
    class CheckHaveLock(HookFactory):
        _name = "cGcNetworkLockManager::CheckHaveLock"
    class TryKeyAndGetOwner(HookFactory):
        _name = "cGcNetworkLockManager::TryKeyAndGetOwner"
    class FindNetworkLock(HookFactory):
        _name = "cGcNetworkLockManager::FindNetworkLock"
    class SendUnlockMessage(HookFactory):
        _name = "cGcNetworkLockManager::SendUnlockMessage"
    class CheckLockBlocks(HookFactory):
        _name = "cGcNetworkLockManager::CheckLockBlocks"

class cTkPhysicsComponent:
    class GetTypedComponent(HookFactory):
        _name = "cTkPhysicsComponent::GetTypedComponent"
    class GetNode(HookFactory):
        _name = "cTkPhysicsComponent::GetNode"
    class AllowComponent(HookFactory):
        _name = "cTkPhysicsComponent::AllowComponent"
    class GetWorldUp(HookFactory):
        _name = "cTkPhysicsComponent::GetWorldUp"
    class GetGraphicsMatrix(HookFactory):
        _name = "cTkPhysicsComponent::GetGraphicsMatrix"
    class GetRigidBody(HookFactory):
        _name = "cTkPhysicsComponent::GetRigidBody"
    class SetRelMatrix(HookFactory):
        _name = "cTkPhysicsComponent::SetRelMatrix"
    class SetMatrix(HookFactory):
        _name = "cTkPhysicsComponent::SetMatrix"
    class GetRelMatrix(HookFactory):
        _name = "cTkPhysicsComponent::GetRelMatrix"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkPhysicsComponent::FindFirstTypedComponent"
    class CalcRelMatFromChildNode(HookFactory):
        _name = "cTkPhysicsComponent::CalcRelMatFromChildNode"
    class GetVelocity(HookFactory):
        _name = "cTkPhysicsComponent::GetVelocity"
    class SetGraphicsToPhysics(HookFactory):
        _name = "cTkPhysicsComponent::SetGraphicsToPhysics"
    class FindModelOwner(HookFactory):
        _name = "cTkPhysicsComponent::FindModelOwner"
    class FindPhysRelMatrix(HookFactory):
        _name = "cTkPhysicsComponent::FindPhysRelMatrix"
    class HasRagdoll(HookFactory):
        _name = "cTkPhysicsComponent::HasRagdoll"
    class SetRagdollLinearDamping(HookFactory):
        _name = "cTkPhysicsComponent::SetRagdollLinearDamping"
    class SetRagdollGravityFactor(HookFactory):
        _name = "cTkPhysicsComponent::SetRagdollGravityFactor"
    class ApplyPositionKeyframe(HookFactory):
        _name = "cTkPhysicsComponent::ApplyPositionKeyframe"
    class EstimateNextPosition(HookFactory):
        _name = "cTkPhysicsComponent::EstimateNextPosition"
    class AddRagdollImpact(HookFactory):
        _name = "cTkPhysicsComponent::AddRagdollImpact"
    class GetSubBody(HookFactory):
        _name = "cTkPhysicsComponent::GetSubBody"
    class GetNumSubBodies(HookFactory):
        _name = "cTkPhysicsComponent::GetNumSubBodies"
    class ForceGraphicsToFollowPhysics(HookFactory):
        _name = "cTkPhysicsComponent::ForceGraphicsToFollowPhysics"
    class RemoveFromWorld(HookFactory):
        _name = "cTkPhysicsComponent::RemoveFromWorld"
    class AddJointIndexToUpdateTransformForInRagdoll(HookFactory):
        _name = "cTkPhysicsComponent::AddJointIndexToUpdateTransformForInRagdoll"
    class SetGraphicsOffsetMatrix(HookFactory):
        _name = "cTkPhysicsComponent::SetGraphicsOffsetMatrix"
    class InitCollisionAsBox(HookFactory):
        _name = "cTkPhysicsComponent::InitCollisionAsBox"
    class OnAttached(HookFactory):
        _name = "cTkPhysicsComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkPhysicsComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkPhysicsComponent::Release"
    class Update(HookFactory):
        _name = "cTkPhysicsComponent::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cTkPhysicsComponent::UpdatePostPhysics"
    class OnOwnershipTransfer(HookFactory):
        _name = "cTkPhysicsComponent::OnOwnershipTransfer"
    class RenderNGui(HookFactory):
        _name = "cTkPhysicsComponent::RenderNGui"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkPhysicsComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkPhysicsComponent::InitData"
    class AddConstraint(HookFactory):
        _name = "cTkPhysicsComponent::AddConstraint"
    class AddToWorld(HookFactory):
        _name = "cTkPhysicsComponent::AddToWorld"
    class ContinueBuildingComplexCollision(HookFactory):
        _name = "cTkPhysicsComponent::ContinueBuildingComplexCollision"
    class CreateCodeDrivenSubBodiesFromNodes(HookFactory):
        _name = "cTkPhysicsComponent::CreateCodeDrivenSubBodiesFromNodes"
    class CreateConstraintChain(HookFactory):
        _name = "cTkPhysicsComponent::CreateConstraintChain"
    class CreateRagdollBodies(HookFactory):
        _name = "cTkPhysicsComponent::CreateRagdollBodies"
    class CreateRagdollConstraints(HookFactory):
        _name = "cTkPhysicsComponent::CreateRagdollConstraints"
    class CreateSubBodyChain(HookFactory):
        _name = "cTkPhysicsComponent::CreateSubBodyChain"
    class DestroyRagdollBodies(HookFactory):
        _name = "cTkPhysicsComponent::DestroyRagdollBodies"
    class ExplodeCodeDrivenSubBodies(HookFactory):
        _name = "cTkPhysicsComponent::ExplodeCodeDrivenSubBodies"
    class FindRagdollJointParentsRecursive(HookFactory):
        _name = "cTkPhysicsComponent::FindRagdollJointParentsRecursive"
    class FindRagdollJointsRecursive(HookFactory):
        _name = "cTkPhysicsComponent::FindRagdollJointsRecursive"
    class GetAverageSubBodyPos(HookFactory):
        _name = "cTkPhysicsComponent::GetAverageSubBodyPos"
    class PrepareConstraints(HookFactory):
        _name = "cTkPhysicsComponent::PrepareConstraints"
    class Ragdoll(HookFactory):
        _name = "cTkPhysicsComponent::Ragdoll"
    class SetPhysicsToGraphics(HookFactory):
        _name = "cTkPhysicsComponent::SetPhysicsToGraphics"
    class SwitchToComplexCollision(HookFactory):
        _name = "cTkPhysicsComponent::SwitchToComplexCollision"

class cGcScanManager:
    class GetMarkerList(HookFactory):
        _name = "cGcScanManager::GetMarkerList"
    class IsMarkedPrimaryMarkerType(HookFactory):
        _name = "cGcScanManager::IsMarkedPrimaryMarkerType"
    class Destruct(HookFactory):
        _name = "cGcScanManager::Destruct"
    class CanDisplayCompass(HookFactory):
        _name = "cGcScanManager::CanDisplayCompass"
    class GetScanEventManager(HookFactory):
        _name = "cGcScanManager::GetScanEventManager"
    class ActivateAerialCam(HookFactory):
        _name = "cGcScanManager::ActivateAerialCam"
    class ActivateAerialCamStraight(HookFactory):
        _name = "cGcScanManager::ActivateAerialCamStraight"
    class UpdateConstantMarkers(HookFactory):
        _name = "cGcScanManager::UpdateConstantMarkers"
    class UpdateScannableMarkers(HookFactory):
        _name = "cGcScanManager::UpdateScannableMarkers"
    class SetNPCFreighterMarker(HookFactory):
        _name = "cGcScanManager::SetNPCFreighterMarker"
    class SetPlayerFreighterMarker(HookFactory):
        _name = "cGcScanManager::SetPlayerFreighterMarker"

class BuildingUserData:
    class GetColourIndex(HookFactory):
        _name = "BuildingUserData::GetColourIndex"
    class BuildingUserData(HookFactory):
        _name = "BuildingUserData::BuildingUserData"
    class GetObjectType(HookFactory):
        _name = "BuildingUserData::GetObjectType"

class sqrt(HookFactory):
    _name = "sqrt"

class cGcBaseBuildingObject:
    class GetNode(HookFactory):
        _name = "cGcBaseBuildingObject::GetNode"
    class GetID(HookFactory):
        _name = "cGcBaseBuildingObject::GetID"
    class sSnappingState:
        class IsSnappedToObject(HookFactory):
            _name = "cGcBaseBuildingObject::sSnappingState::IsSnappedToObject"
            _overload: overloads.cGcBaseBuildingObject.sSnappingState.IsSnappedToObject.overloads = "cGcBaseBuildingObject::sSnappingState *, const TkID<128> *, int"
            @classmethod
            def overload(cls, overload_args: overloads.cGcBaseBuildingObject.sSnappingState.IsSnappedToObject.overloads):
                cls._overload = overload_args
                return cls
    class cGcBaseBuildingObject(HookFactory):
        _name = "cGcBaseBuildingObject::cGcBaseBuildingObject"
    class SetMaterial(HookFactory):
        _name = "cGcBaseBuildingObject::SetMaterial"
    class IsSnapped(HookFactory):
        _name = "cGcBaseBuildingObject::IsSnapped"
    class ChangeObjectBufferHandle(HookFactory):
        _name = "cGcBaseBuildingObject::ChangeObjectBufferHandle"
    class SnapObjects(HookFactory):
        _name = "cGcBaseBuildingObject::SnapObjects"
    class UnSnapAll(HookFactory):
        _name = "cGcBaseBuildingObject::UnSnapAll"
    class GetNeighbours(HookFactory):
        _name = "cGcBaseBuildingObject::GetNeighbours"
    class UpdateParts(HookFactory):
        _name = "cGcBaseBuildingObject::UpdateParts"
    class GetSnappingPlacementMatrix(HookFactory):
        _name = "cGcBaseBuildingObject::GetSnappingPlacementMatrix"
    class GetAvailableSnappingOptions(HookFactory):
        _name = "cGcBaseBuildingObject::GetAvailableSnappingOptions"
    class IsSnapPointAvailable(HookFactory):
        _name = "cGcBaseBuildingObject::IsSnapPointAvailable"
    class TrySnapObjects(HookFactory):
        _name = "cGcBaseBuildingObject::TrySnapObjects"
    class UnSnapFromNode(HookFactory):
        _name = "cGcBaseBuildingObject::UnSnapFromNode"
    class UpdatePart(HookFactory):
        _name = "cGcBaseBuildingObject::UpdatePart"
    class CheckConditions(HookFactory):
        _name = "cGcBaseBuildingObject::CheckConditions"
    class CheckCondition(HookFactory):
        _name = "cGcBaseBuildingObject::CheckCondition"

class cTkContactPoint:
    class cTkContactPoint(HookFactory):
        _name = "cTkContactPoint::cTkContactPoint"

class cGcGenericSectionConditionSettlementsEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSettlementsEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSettlementsEnabled::GetDescription"

class BaseObjectLimits:
    class UpdateLimits(HookFactory):
        _name = "BaseObjectLimits::UpdateLimits"

class sComponentBaseObjectHandle:
    class Prepare(HookFactory):
        _name = "sComponentBaseObjectHandle::Prepare"

class sBaseObjectBufferData:
    class ReadBufferData(HookFactory):
        _name = "sBaseObjectBufferData::ReadBufferData"
    class EraseBufferData(HookFactory):
        _name = "sBaseObjectBufferData::EraseBufferData"

class ModelPlacementRule:
    class CacheConditionsData(HookFactory):
        _name = "ModelPlacementRule::CacheConditionsData"

class BaseBuildingObjectTemplate:
    class SetOBB(HookFactory):
        _name = "BaseBuildingObjectTemplate::SetOBB"

class cGcBaseBuildingNavigationManager:
    class Update(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::Update"
    class sObjectNavData:
        class sObjectNavData(HookFactory):
            _name = "cGcBaseBuildingNavigationManager::sObjectNavData::sObjectNavData"
            _overload: overloads.cGcBaseBuildingNavigationManager.sObjectNavData.sObjectNavData.overloads = "cGcBaseBuildingNavigationManager::sObjectNavData *, const cGcBaseBuildingNavigationManager::sObjectNavData *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcBaseBuildingNavigationManager.sObjectNavData.sObjectNavData.overloads):
                cls._overload = overload_args
                return cls
    class GetAllNavBaseObjects(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::GetAllNavBaseObjects"
    class GetRandomSubgraphNode(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::GetRandomSubgraphNode"
    class CreateNavArea(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::CreateNavArea"
    class AddObjectSubgraphs(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::AddObjectSubgraphs"
    class RemoveObjectSubgraphs(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::RemoveObjectSubgraphs"
    class DestroyNPCsOverlappingObject(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::DestroyNPCsOverlappingObject"
    class InstantiatePartNav(HookFactory):
        _name = "cGcBaseBuildingNavigationManager::InstantiatePartNav"
    class sPartNavData:
        class sPartNavData(HookFactory):
            _name = "cGcBaseBuildingNavigationManager::sPartNavData::sPartNavData"

class cTkStaticPhysicsComponent:
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkStaticPhysicsComponent::FindFirstTypedComponent"
    class Prepare(HookFactory):
        _name = "cTkStaticPhysicsComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkStaticPhysicsComponent::Release"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkStaticPhysicsComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkStaticPhysicsComponent::InitData"
    class AddToWorld(HookFactory):
        _name = "cTkStaticPhysicsComponent::AddToWorld"
    class CreateRigidBody(HookFactory):
        _name = "cTkStaticPhysicsComponent::CreateRigidBody"
    class UpdatePosition(HookFactory):
        _name = "cTkStaticPhysicsComponent::UpdatePosition"

class cGcBaseBuildingOffenseReporter:
    class RenderScreenshot(HookFactory):
        _name = "cGcBaseBuildingOffenseReporter::RenderScreenshot"
    class OnRenderScreenshotFinished(HookFactory):
        _name = "cGcBaseBuildingOffenseReporter::OnRenderScreenshotFinished"

class OnConfirmDialogClose(HookFactory):
    _name = "OnConfirmDialogClose"

class cGcProjectorEffect:
    class UpdateRender(HookFactory):
        _name = "cGcProjectorEffect::UpdateRender"

class cGcLinkGrid:
    class AddExistingObject(HookFactory):
        _name = "cGcLinkGrid::AddExistingObject"
    class AddObjectCopy(HookFactory):
        _name = "cGcLinkGrid::AddObjectCopy"
    class UpdateEstimates(HookFactory):
        _name = "cGcLinkGrid::UpdateEstimates"
    class Simulate(HookFactory):
        _name = "cGcLinkGrid::Simulate"
    class AddAmountToObject(HookFactory):
        _name = "cGcLinkGrid::AddAmountToObject"
    class DeleteObject(HookFactory):
        _name = "cGcLinkGrid::DeleteObject"
    class GetDayNightEvents(HookFactory):
        _name = "cGcLinkGrid::GetDayNightEvents"
    class GetStormEvents(HookFactory):
        _name = "cGcLinkGrid::GetStormEvents"
    class CopyOutRepeatingEvents(HookFactory):
        _name = "cGcLinkGrid::CopyOutRepeatingEvents"
    class AssignGroups(HookFactory):
        _name = "cGcLinkGrid::AssignGroups"
    class UpdateObjectState(HookFactory):
        _name = "cGcLinkGrid::UpdateObjectState"
    class GetNextDueGroupStateChangeTimestep(HookFactory):
        _name = "cGcLinkGrid::GetNextDueGroupStateChangeTimestep"
    class DistributeGroupAmountsAmongstObjects(HookFactory):
        _name = "cGcLinkGrid::DistributeGroupAmountsAmongstObjects"
    class SaveObjectsCurrentStateToBuffer(HookFactory):
        _name = "cGcLinkGrid::SaveObjectsCurrentStateToBuffer"

class cGcRegionHotspots:
    class sHotspot:
        class sHotspot(HookFactory):
            _name = "cGcRegionHotspots::sHotspot::sHotspot"
        class GetDistanceToPosition(HookFactory):
            _name = "cGcRegionHotspots::sHotspot::GetDistanceToPosition"
        class GetDistanceToRay(HookFactory):
            _name = "cGcRegionHotspots::sHotspot::GetDistanceToRay"
        class GetStrength(HookFactory):
            _name = "cGcRegionHotspots::sHotspot::GetStrength"
    class GetNearbyHotspots(HookFactory):
        _name = "cGcRegionHotspots::GetNearbyHotspots"
    class GetNearestHotspotToPosition(HookFactory):
        _name = "cGcRegionHotspots::GetNearestHotspotToPosition"
    class GetHotspotFromHandle(HookFactory):
        _name = "cGcRegionHotspots::GetHotspotFromHandle"
    class GetSubstanceData(HookFactory):
        _name = "cGcRegionHotspots::GetSubstanceData"
    class GetSubstanceYieldFromAmount(HookFactory):
        _name = "cGcRegionHotspots::GetSubstanceYieldFromAmount"
    class GetSubstanceProgressFromAmount(HookFactory):
        _name = "cGcRegionHotspots::GetSubstanceProgressFromAmount"
    class GetHotspotsTable(HookFactory):
        _name = "cGcRegionHotspots::GetHotspotsTable"
    class GetCategory(HookFactory):
        _name = "cGcRegionHotspots::GetCategory"
    class GetSphericalPolarCoord(HookFactory):
        _name = "cGcRegionHotspots::GetSphericalPolarCoord"
    class GetWorldOffsetPosition(HookFactory):
        _name = "cGcRegionHotspots::GetWorldOffsetPosition"
    class GetHotpotSubstanceID(HookFactory):
        _name = "cGcRegionHotspots::GetHotpotSubstanceID"
    class GetSubstanceRate(HookFactory):
        _name = "cGcRegionHotspots::GetSubstanceRate"
    class GenerateHotspotsForPole(HookFactory):
        _name = "cGcRegionHotspots::GenerateHotspotsForPole"
    class GenerateHotspot(HookFactory):
        _name = "cGcRegionHotspots::GenerateHotspot"

class cGcBaseLinks:
    class SetNodeVisualState(HookFactory):
        _name = "cGcBaseLinks::SetNodeVisualState"
    class IsPowerPreventingObjectInteraction(HookFactory):
        _name = "cGcBaseLinks::IsPowerPreventingObjectInteraction"

class sLinkObjectSnapshot:
    class sLinkObjectSnapshot(HookFactory):
        _name = "sLinkObjectSnapshot::sLinkObjectSnapshot"

class cGcBaseLinkMap:
    class Clear(HookFactory):
        _name = "cGcBaseLinkMap::Clear"
    class AddLinkObject(HookFactory):
        _name = "cGcBaseLinkMap::AddLinkObject"
    class RemoveLinkObject(HookFactory):
        _name = "cGcBaseLinkMap::RemoveLinkObject"
    class LinkSockets(HookFactory):
        _name = "cGcBaseLinkMap::LinkSockets"

class cTkNoiseUberLayerData:
    class cTkNoiseUberLayerData(HookFactory):
        _name = "cTkNoiseUberLayerData::cTkNoiseUberLayerData"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseUberLayerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNoiseUberLayerData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkNoiseUberLayerData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseUberLayerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseUberLayerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseUberLayerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseUberLayerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseUberLayerData::WriteToXMLNodeExplicit"

class cTkNoiseGridData:
    class cTkNoiseGridData(HookFactory):
        _name = "cTkNoiseGridData::cTkNoiseGridData"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseGridData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNoiseGridData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cTkNoiseGridData::DeallocateDynamic"
    class FixUp(HookFactory):
        _name = "cTkNoiseGridData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseGridData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseGridData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseGridData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseGridData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseGridData::WriteToXMLNodeExplicit"

class cTkNoiseFeatureData:
    class cTkNoiseFeatureData(HookFactory):
        _name = "cTkNoiseFeatureData::cTkNoiseFeatureData"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseFeatureData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNoiseFeatureData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cTkNoiseFeatureData::DeallocateDynamic"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseFeatureData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseFeatureData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseFeatureData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseFeatureData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseFeatureData::WriteToXMLNodeExplicit"

class cGcInventoryStore:
    class CreateProductElement(HookFactory):
        _name = "cGcInventoryStore::CreateProductElement"
    class CreateSubstanceElement(HookFactory):
        _name = "cGcInventoryStore::CreateSubstanceElement"
    class GetElement(HookFactory):
        _name = "cGcInventoryStore::GetElement"
    class cGcInventoryStore(HookFactory):
        _name = "cGcInventoryStore::cGcInventoryStore"
        _overload: overloads.cGcInventoryStore.cGcInventoryStore.overloads = "cGcInventoryStore *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInventoryStore.cGcInventoryStore.overloads):
            cls._overload = overload_args
            return cls
    class GenerateLayoutSimple(HookFactory):
        _name = "cGcInventoryStore::GenerateLayoutSimple"
    class GeneratePersonalLayout(HookFactory):
        _name = "cGcInventoryStore::GeneratePersonalLayout"
    class GenerateProceduralInventory(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralInventory"
        _overload: overloads.cGcInventoryStore.GenerateProceduralInventory.overloads = "cGcInventoryStore *, unsigned int, const cTkSeed *, int, eSizeType, eWeaponStatClass, LayoutGenerationMode, LayoutCompareGenerationType, eInventoryClass, std::vector<cGcInventoryTechProbability,TkSTLAllocatorShim<cGcInventoryTechProbability,8,-1> > *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInventoryStore.GenerateProceduralInventory.overloads):
            cls._overload = overload_args
            return cls
    class GenerateProceduralLayoutLegacyVersion0(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralLayoutLegacyVersion0"
    class GenerateProceduralLayout(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralLayout"
    class SetCapacityFromGenerationData(HookFactory):
        _name = "cGcInventoryStore::SetCapacityFromGenerationData"
    class SetDimensionsFromGenerationData(HookFactory):
        _name = "cGcInventoryStore::SetDimensionsFromGenerationData"
    class GenerateFreighterSubstances(HookFactory):
        _name = "cGcInventoryStore::GenerateFreighterSubstances"
    class GetBaseStatsData(HookFactory):
        _name = "cGcInventoryStore::GetBaseStatsData"
    class GenerateProceduralBaseStats(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralBaseStats"
    class CheckAndUpdateBaseStats(HookFactory):
        _name = "cGcInventoryStore::CheckAndUpdateBaseStats"
    class GenerateProceduralTechnology(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralTechnology"
    class GenerateProceduralClass(HookFactory):
        _name = "cGcInventoryStore::GenerateProceduralClass"
    class GenerateLayoutByInventoryType(HookFactory):
        _name = "cGcInventoryStore::GenerateLayoutByInventoryType"
    class Add(HookFactory):
        _name = "cGcInventoryStore::Add"
    class IsAtMaxCapacity(HookFactory):
        _name = "cGcInventoryStore::IsAtMaxCapacity"
    class GetMaxCapacity(HookFactory):
        _name = "cGcInventoryStore::GetMaxCapacity"
    class IncreaseDimsToSupportCapacity(HookFactory):
        _name = "cGcInventoryStore::IncreaseDimsToSupportCapacity"
    class IncreaseCapacity(HookFactory):
        _name = "cGcInventoryStore::IncreaseCapacity"
    class AddSlotsWithCapacity(HookFactory):
        _name = "cGcInventoryStore::AddSlotsWithCapacity"
    class GetTechGroupCount(HookFactory):
        _name = "cGcInventoryStore::GetTechGroupCount"
    class Remove(HookFactory):
        _name = "cGcInventoryStore::Remove"
    class CopyInventoryStore(HookFactory):
        _name = "cGcInventoryStore::CopyInventoryStore"
    class PopulateInventoryContainer(HookFactory):
        _name = "cGcInventoryStore::PopulateInventoryContainer"
    class LoadFromContainer(HookFactory):
        _name = "cGcInventoryStore::LoadFromContainer"
    class EnforceStackSizeLimitsOnAllItems(HookFactory):
        _name = "cGcInventoryStore::EnforceStackSizeLimitsOnAllItems"
    class CheckAndEnableTechBonusSlotsFromDefaultContainer(HookFactory):
        _name = "cGcInventoryStore::CheckAndEnableTechBonusSlotsFromDefaultContainer"
    class CheckAndEnableTechBonusSlots(HookFactory):
        _name = "cGcInventoryStore::CheckAndEnableTechBonusSlots"
    class PackageAllTech(HookFactory):
        _name = "cGcInventoryStore::PackageAllTech"
    class DamageRandomTech(HookFactory):
        _name = "cGcInventoryStore::DamageRandomTech"
    class BreakShipItems(HookFactory):
        _name = "cGcInventoryStore::BreakShipItems"
    class BreakCrashedShipSlots(HookFactory):
        _name = "cGcInventoryStore::BreakCrashedShipSlots"
    class BreakAndBlockSlotsWithTech(HookFactory):
        _name = "cGcInventoryStore::BreakAndBlockSlotsWithTech"
    class DoesSlotGiveTechBonus(HookFactory):
        _name = "cGcInventoryStore::DoesSlotGiveTechBonus"
    class RepairEntireInventory(HookFactory):
        _name = "cGcInventoryStore::RepairEntireInventory"
    class GetCost(HookFactory):
        _name = "cGcInventoryStore::GetCost"
    class GetCostRepairSlot(HookFactory):
        _name = "cGcInventoryStore::GetCostRepairSlot"
    class GetCostTradeIn(HookFactory):
        _name = "cGcInventoryStore::GetCostTradeIn"
    class ValidateBrokenSlots(HookFactory):
        _name = "cGcInventoryStore::ValidateBrokenSlots"
    class GetSubstanceSlotMaxStorage(HookFactory):
        _name = "cGcInventoryStore::GetSubstanceSlotMaxStorage"
    class GetProductSlotMaxStorage(HookFactory):
        _name = "cGcInventoryStore::GetProductSlotMaxStorage"
    class GetNodeSlotsAndTechs(HookFactory):
        _name = "cGcInventoryStore::GetNodeSlotsAndTechs"
    class CanInventoryStoreTechnology(HookFactory):
        _name = "cGcInventoryStore::CanInventoryStoreTechnology"
    class GetShipClassFromSizeType(HookFactory):
        _name = "cGcInventoryStore::GetShipClassFromSizeType"
    class GetStatModifierFromInventory(HookFactory):
        _name = "cGcInventoryStore::GetStatModifierFromInventory"
    class GetWeaponClassFromNode(HookFactory):
        _name = "cGcInventoryStore::GetWeaponClassFromNode"
    class CreateTechElement(HookFactory):
        _name = "cGcInventoryStore::CreateTechElement"
    class UpgradeInventoryChestContainerCapacity(HookFactory):
        _name = "cGcInventoryStore::UpgradeInventoryChestContainerCapacity"
    class RepairSlot(HookFactory):
        _name = "cGcInventoryStore::RepairSlot"
    class GetNumSpecialSlots(HookFactory):
        _name = "cGcInventoryStore::GetNumSpecialSlots"
    class IsSlotBlockedByBrokenTech(HookFactory):
        _name = "cGcInventoryStore::IsSlotBlockedByBrokenTech"
    class GetClass(HookFactory):
        _name = "cGcInventoryStore::GetClass"
    class IsSlotBroken(HookFactory):
        _name = "cGcInventoryStore::IsSlotBroken"
    class GetNumSlotsFree(HookFactory):
        _name = "cGcInventoryStore::GetNumSlotsFree"
    class ClearItems(HookFactory):
        _name = "cGcInventoryStore::ClearItems"
    class IsValidLayoutPos(HookFactory):
        _name = "cGcInventoryStore::IsValidLayoutPos"
    class GetNumSlots(HookFactory):
        _name = "cGcInventoryStore::GetNumSlots"
    class GetFirstFreeSlot(HookFactory):
        _name = "cGcInventoryStore::GetFirstFreeSlot"
    class GetMinMaxInventoryIndex(HookFactory):
        _name = "cGcInventoryStore::GetMinMaxInventoryIndex"
    class GetNextInvalidSlot(HookFactory):
        _name = "cGcInventoryStore::GetNextInvalidSlot"
    class CreateTechnologyElement(HookFactory):
        _name = "cGcInventoryStore::CreateTechnologyElement"
    class ClearEmptyItems(HookFactory):
        _name = "cGcInventoryStore::ClearEmptyItems"
    class GetElementForEditing(HookFactory):
        _name = "cGcInventoryStore::GetElementForEditing"

class SnapSocketsMask:
    class IsCompatible(HookFactory):
        _name = "SnapSocketsMask::IsCompatible"

class cGcBaseSearch:
    class FindFirstBase(HookFactory):
        _name = "cGcBaseSearch::FindFirstBase"
    class FindBases(HookFactory):
        _name = "cGcBaseSearch::FindBases"
    class FindBaseParts(HookFactory):
        _name = "cGcBaseSearch::FindBaseParts"
    class FindParts(HookFactory):
        _name = "cGcBaseSearch::FindParts"
    class FindNearestBaseInCurrentSystem(HookFactory):
        _name = "cGcBaseSearch::FindNearestBaseInCurrentSystem"
    class FindFreighterBase(HookFactory):
        _name = "cGcBaseSearch::FindFreighterBase"
    class Match(HookFactory):
        _name = "cGcBaseSearch::Match"
        _overload: overloads.cGcBaseSearch.Match.overloads = "const cGcBaseSearchFilter *, cGcPlayerBasePersistentBuffer *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcBaseSearch.Match.overloads):
            cls._overload = overload_args
            return cls
    class Score(HookFactory):
        _name = "cGcBaseSearch::Score"
    class GetInterstellarDistanceToBase(HookFactory):
        _name = "cGcBaseSearch::GetInterstellarDistanceToBase"

class cGcFreighterBaseNPCManager:
    class Release(HookFactory):
        _name = "cGcFreighterBaseNPCManager::Release"
    class Update(HookFactory):
        _name = "cGcFreighterBaseNPCManager::Update"
    class TryAddSquadronPilotNPC(HookFactory):
        _name = "cGcFreighterBaseNPCManager::TryAddSquadronPilotNPC"
    class TryAddFrigateCaptainNPC(HookFactory):
        _name = "cGcFreighterBaseNPCManager::TryAddFrigateCaptainNPC"
    class TryAddWorkerNPC(HookFactory):
        _name = "cGcFreighterBaseNPCManager::TryAddWorkerNPC"
    class GenerateSpawnMatrix(HookFactory):
        _name = "cGcFreighterBaseNPCManager::GenerateSpawnMatrix"

class cGcSettlementBuildingState:
    class Get(HookFactory):
        _name = "cGcSettlementBuildingState::Get"
    class StoreInPlayerState(HookFactory):
        _name = "cGcSettlementBuildingState::StoreInPlayerState"
    class GetNextAdvancement(HookFactory):
        _name = "cGcSettlementBuildingState::GetNextAdvancement"

class cGcSettlementStateManager:
    class Update(HookFactory):
        _name = "cGcSettlementStateManager::Update"
    class UpdateOwnedSettlementBuildingsClasses(HookFactory):
        _name = "cGcSettlementStateManager::UpdateOwnedSettlementBuildingsClasses"
    class UpdateOwnedSettlementBuildingsConstruction(HookFactory):
        _name = "cGcSettlementStateManager::UpdateOwnedSettlementBuildingsConstruction"
    class SetOwnedSettlementState(HookFactory):
        _name = "cGcSettlementStateManager::SetOwnedSettlementState"
    class TryStoreOwnedSettlementTeleportEndpoint(HookFactory):
        _name = "cGcSettlementStateManager::TryStoreOwnedSettlementTeleportEndpoint"
    class RefreshOwnedSettlementNextBuildingUpragde(HookFactory):
        _name = "cGcSettlementStateManager::RefreshOwnedSettlementNextBuildingUpragde"
    class ClearOwnedSettlement(HookFactory):
        _name = "cGcSettlementStateManager::ClearOwnedSettlement"
    class OwnsSettlement(HookFactory):
        _name = "cGcSettlementStateManager::OwnsSettlement"
    class GetOwnedSettlementState(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementState"
    class HasOwner(HookFactory):
        _name = "cGcSettlementStateManager::HasOwner"
    class IsOwnedByLocalUser(HookFactory):
        _name = "cGcSettlementStateManager::IsOwnedByLocalUser"
    class ClaimSettlement(HookFactory):
        _name = "cGcSettlementStateManager::ClaimSettlement"
    class ClearSettlementState(HookFactory):
        _name = "cGcSettlementStateManager::ClearSettlementState"
    class ResetOwnedSettlementProduction(HookFactory):
        _name = "cGcSettlementStateManager::ResetOwnedSettlementProduction"
    class UpdateOwnedSettlementProductionSlotProduct(HookFactory):
        _name = "cGcSettlementStateManager::UpdateOwnedSettlementProductionSlotProduct"
    class GetSettlementName(HookFactory):
        _name = "cGcSettlementStateManager::GetSettlementName"
    class GetOwnedSettlementHubBuilding(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementHubBuilding"
    class GetHubBuilding(HookFactory):
        _name = "cGcSettlementStateManager::GetHubBuilding"
    class OwnedSettlementHasAnyBuildingsInProgress(HookFactory):
        _name = "cGcSettlementStateManager::OwnedSettlementHasAnyBuildingsInProgress"
    class GetOwnedSettlementNumUnstartedBuildings(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementNumUnstartedBuildings"
    class AddPerkToOwnedSettlement(HookFactory):
        _name = "cGcSettlementStateManager::AddPerkToOwnedSettlement"
    class AddPerk(HookFactory):
        _name = "cGcSettlementStateManager::AddPerk"
    class GenerateProcPerkId(HookFactory):
        _name = "cGcSettlementStateManager::GenerateProcPerkId"
    class RemovePerkFromOwnedSettlement(HookFactory):
        _name = "cGcSettlementStateManager::RemovePerkFromOwnedSettlement"
    class ApplyStatChangeToOwnedSettlement(HookFactory):
        _name = "cGcSettlementStateManager::ApplyStatChangeToOwnedSettlement"
    class GetTotalStatValue(HookFactory):
        _name = "cGcSettlementStateManager::GetTotalStatValue"
    class GetNormalisedStatValue(HookFactory):
        _name = "cGcSettlementStateManager::GetNormalisedStatValue"
    class GetStatLevel(HookFactory):
        _name = "cGcSettlementStateManager::GetStatLevel"
    class GetOwnedSettlementNextJudgementTypeAndTime(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementNextJudgementTypeAndTime"
    class UpdateOwnedSettlementJudgementTrigger(HookFactory):
        _name = "cGcSettlementStateManager::UpdateOwnedSettlementJudgementTrigger"
    class GetOwnedSettlementCycleProductivityFactor(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementCycleProductivityFactor"
    class GetOwnedSettlementCycleItemProductionRate(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementCycleItemProductionRate"
    class GetOwnedSettlementDebtPaymentRatePerSecond(HookFactory):
        _name = "cGcSettlementStateManager::GetOwnedSettlementDebtPaymentRatePerSecond"
    class IsOwnedSettlementOfficeComplete(HookFactory):
        _name = "cGcSettlementStateManager::IsOwnedSettlementOfficeComplete"
    class ReportSettlement(HookFactory):
        _name = "cGcSettlementStateManager::ReportSettlement"
    class UploadSettlement(HookFactory):
        _name = "cGcSettlementStateManager::UploadSettlement"
    class SendReportSettlement(HookFactory):
        _name = "cGcSettlementStateManager::SendReportSettlement"
    class GetProcPerkSeed(HookFactory):
        _name = "cGcSettlementStateManager::GetProcPerkSeed"
    class AddNewStatsMessage(HookFactory):
        _name = "cGcSettlementStateManager::AddNewStatsMessage"
    class GetSettlementBuiltPercentage(HookFactory):
        _name = "cGcSettlementStateManager::GetSettlementBuiltPercentage"
    class UpdateMpSettlementState(HookFactory):
        _name = "cGcSettlementStateManager::UpdateMpSettlementState"

class cGcWFCBaseGenerator:
    class CheckWFCBaseClaimed(HookFactory):
        _name = "cGcWFCBaseGenerator::CheckWFCBaseClaimed"
    class CreateWFCBase(HookFactory):
        _name = "cGcWFCBaseGenerator::CreateWFCBase"
    class ConstructClusterNavigationGraph(HookFactory):
        _name = "cGcWFCBaseGenerator::ConstructClusterNavigationGraph"
    class ReconnectWFCBuildingToClusterGraph(HookFactory):
        _name = "cGcWFCBaseGenerator::ReconnectWFCBuildingToClusterGraph"
    class NavigationAreaResHandle(HookFactory):
        _name = "cGcWFCBaseGenerator::NavigationAreaResHandle"
    class ClusterNavGraphConstructionData:
        class Clear(HookFactory):
            _name = "cGcWFCBaseGenerator::ClusterNavGraphConstructionData::Clear"

class GetLineIntersectsBuilding2D(HookFactory):
    _name = "GetLineIntersectsBuilding2D"

class GetDistance(HookFactory):
    _name = "GetDistance"
    _overload: overloads.GetDistance.overloads = "const cTkAABB *, const cTkVector3 *"
    @classmethod
    def overload(cls, overload_args: overloads.GetDistance.overloads):
        cls._overload = overload_args
        return cls

class GetOffset(HookFactory):
    _name = "GetOffset"

class AddNodesOnALine(HookFactory):
    _name = "AddNodesOnALine"

class AddPerimeterNodes(HookFactory):
    _name = "AddPerimeterNodes"

class MergeNodes(HookFactory):
    _name = "MergeNodes"

class RemoveRedundantNodes(HookFactory):
    _name = "RemoveRedundantNodes"

class CreateShortcuts(HookFactory):
    _name = "CreateShortcuts"

class ConnectEntranceNodes(HookFactory):
    _name = "ConnectEntranceNodes"

class cGcWFCBuildingState:
    class OnBuildingUpgraded(HookFactory):
        _name = "cGcWFCBuildingState::OnBuildingUpgraded"
    class PopulateBase(HookFactory):
        _name = "cGcWFCBuildingState::PopulateBase"
    class UpdateNPCs(HookFactory):
        _name = "cGcWFCBuildingState::UpdateNPCs"
    class CreateNavigationGraphs(HookFactory):
        _name = "cGcWFCBuildingState::CreateNavigationGraphs"
    class GetClusterHubState(HookFactory):
        _name = "cGcWFCBuildingState::GetClusterHubState"
    class SetBuilding(HookFactory):
        _name = "cGcWFCBuildingState::SetBuilding"
    class NotifyElevationChange(HookFactory):
        _name = "cGcWFCBuildingState::NotifyElevationChange"
    class GetInstance(HookFactory):
        _name = "cGcWFCBuildingState::GetInstance"
    class OnStateChanged(HookFactory):
        _name = "cGcWFCBuildingState::OnStateChanged"
    class Update(HookFactory):
        _name = "cGcWFCBuildingState::Update"
    class StartBuildingConstruction(HookFactory):
        _name = "cGcWFCBuildingState::StartBuildingConstruction"
    class StartSpecificBuildingConstruction(HookFactory):
        _name = "cGcWFCBuildingState::StartSpecificBuildingConstruction"
    class AdvanceBuilding(HookFactory):
        _name = "cGcWFCBuildingState::AdvanceBuilding"
    class GetSecondsUntilConstructionEnds(HookFactory):
        _name = "cGcWFCBuildingState::GetSecondsUntilConstructionEnds"
        _overload: overloads.cGcWFCBuildingState.GetSecondsUntilConstructionEnds.overloads = "const cGcBuilding *, unsigned __int64 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcWFCBuildingState.GetSecondsUntilConstructionEnds.overloads):
            cls._overload = overload_args
            return cls
    class UpdateParts(HookFactory):
        _name = "cGcWFCBuildingState::UpdateParts"
    class DecideColourPalette(HookFactory):
        _name = "cGcWFCBuildingState::DecideColourPalette"
    class ClearFoliage(HookFactory):
        _name = "cGcWFCBuildingState::ClearFoliage"

class DecideColourPaletteFromArray(HookFactory):
    _name = "DecideColourPaletteFromArray"

class cGcNavGraphNode:
    class cGcNavGraphNode(HookFactory):
        _name = "cGcNavGraphNode::cGcNavGraphNode"
        _overload: overloads.cGcNavGraphNode.cGcNavGraphNode.overloads = "cGcNavGraphNode *, const cGcNavGraphNode *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNavGraphNode.cGcNavGraphNode.overloads):
            cls._overload = overload_args
            return cls
    class GetConnectedNavArea(HookFactory):
        _name = "cGcNavGraphNode::GetConnectedNavArea"
    class AddLink(HookFactory):
        _name = "cGcNavGraphNode::AddLink"
    class InvalidateLink(HookFactory):
        _name = "cGcNavGraphNode::InvalidateLink"

class cTkPhysRelVec3:
    class Averager:
        class Get(HookFactory):
            _name = "cTkPhysRelVec3::Averager::Get"
        class Add(HookFactory):
            _name = "cTkPhysRelVec3::Averager::Add"
        class Averager(HookFactory):
            _name = "cTkPhysRelVec3::Averager::Averager"

class cGcBuilding:
    class cGcBuilding(HookFactory):
        _name = "cGcBuilding::cGcBuilding"
    class Construct(HookFactory):
        _name = "cGcBuilding::Construct"
    class Setup(HookFactory):
        _name = "cGcBuilding::Setup"
    class GetPosition(HookFactory):
        _name = "cGcBuilding::GetPosition"
    class GetMatrix(HookFactory):
        _name = "cGcBuilding::GetMatrix"
    class WholeClusterAdded(HookFactory):
        _name = "cGcBuilding::WholeClusterAdded"
    class GetSurroundingBuilding(HookFactory):
        _name = "cGcBuilding::GetSurroundingBuilding"
    class DestroyIntersectingVolcanoes(HookFactory):
        _name = "cGcBuilding::DestroyIntersectingVolcanoes"
    class Scanned(HookFactory):
        _name = "cGcBuilding::Scanned"
    class Visited(HookFactory):
        _name = "cGcBuilding::Visited"
    class UpdateDistanceFrom(HookFactory):
        _name = "cGcBuilding::UpdateDistanceFrom"

class cGcBlockList:
    class Data:
        class IsOnBlockList(HookFactory):
            _name = "cGcBlockList::Data::IsOnBlockList"
        class IsMessageOnBlockList(HookFactory):
            _name = "cGcBlockList::Data::IsMessageOnBlockList"
    class AddMessageToBlockList(HookFactory):
        _name = "cGcBlockList::AddMessageToBlockList"

class TkJsonFileReadStreamBase:
    class Read(HookFactory):
        _name = "TkJsonFileReadStreamBase::Read"

class TkJsonTempFileReadStream:
    class ReadData(HookFactory):
        _name = "TkJsonTempFileReadStream::ReadData"

class cGcCloudSaveManager:
    class GetObjectFromJsonReadStream(HookFactory):
        _name = "cGcCloudSaveManager::GetObjectFromJsonReadStream"
    class ExportSaveToCloudThread(HookFactory):
        _name = "cGcCloudSaveManager::ExportSaveToCloudThread"
    class CombineSaveData(HookFactory):
        _name = "cGcCloudSaveManager::CombineSaveData"
    class CompressSaveData(HookFactory):
        _name = "cGcCloudSaveManager::CompressSaveData"
    class ImportSaveFromCloudThread(HookFactory):
        _name = "cGcCloudSaveManager::ImportSaveFromCloudThread"
    class DecompressSaveData(HookFactory):
        _name = "cGcCloudSaveManager::DecompressSaveData"
    class ExtractSaveData(HookFactory):
        _name = "cGcCloudSaveManager::ExtractSaveData"

class cGcDifficultySettings:
    class Save(HookFactory):
        _name = "cGcDifficultySettings::Save"
    class GetPresetForGameMode(HookFactory):
        _name = "cGcDifficultySettings::GetPresetForGameMode"
    class SetSettingsData(HookFactory):
        _name = "cGcDifficultySettings::SetSettingsData"
    class GetReplicatedState(HookFactory):
        _name = "cGcDifficultySettings::GetReplicatedState"
    class GetSettingOptionLocIDs(HookFactory):
        _name = "cGcDifficultySettings::GetSettingOptionLocIDs"
    class GetOptionListSettingAsIntWritable(HookFactory):
        _name = "cGcDifficultySettings::GetOptionListSettingAsIntWritable"
    class GetToggleSettingWritable(HookFactory):
        _name = "cGcDifficultySettings::GetToggleSettingWritable"
    class CompareSettingDifficulty(HookFactory):
        _name = "cGcDifficultySettings::CompareSettingDifficulty"
    class GetDifficultyIconStringInsert(HookFactory):
        _name = "cGcDifficultySettings::GetDifficultyIconStringInsert"
    class FillPersistentBaseDifficultyData(HookFactory):
        _name = "cGcDifficultySettings::FillPersistentBaseDifficultyData"
    class HasDifficultyAlwaysBeenAtPresetOrHarder(HookFactory):
        _name = "cGcDifficultySettings::HasDifficultyAlwaysBeenAtPresetOrHarder"
    class FindMatchingPreset(HookFactory):
        _name = "cGcDifficultySettings::FindMatchingPreset"
    class GetPresetSettingsClampedByEditability(HookFactory):
        _name = "cGcDifficultySettings::GetPresetSettingsClampedByEditability"
    class IsItemGraveSpawnedOnDeath(HookFactory):
        _name = "cGcDifficultySettings::IsItemGraveSpawnedOnDeath"
    class AreItemsDestroyedOnDeath(HookFactory):
        _name = "cGcDifficultySettings::AreItemsDestroyedOnDeath"
    class IsSaveDestroyedOnDeath(HookFactory):
        _name = "cGcDifficultySettings::IsSaveDestroyedOnDeath"
    class IsSprintingUnlimited(HookFactory):
        _name = "cGcDifficultySettings::IsSprintingUnlimited"
    class DoesSprintingDrainEnergy(HookFactory):
        _name = "cGcDifficultySettings::DoesSprintingDrainEnergy"
    class GetSprintingRateMultiplier(HookFactory):
        _name = "cGcDifficultySettings::GetSprintingRateMultiplier"
    class IsEnergyBarEnabled(HookFactory):
        _name = "cGcDifficultySettings::IsEnergyBarEnabled"
    class GetCurrencyCostMultiplier(HookFactory):
        _name = "cGcDifficultySettings::GetCurrencyCostMultiplier"
    class ScaleCurrencyCost(HookFactory):
        _name = "cGcDifficultySettings::ScaleCurrencyCost"
    class ArePurchasesWithCostTypeFree(HookFactory):
        _name = "cGcDifficultySettings::ArePurchasesWithCostTypeFree"
    class IsFuelFree(HookFactory):
        _name = "cGcDifficultySettings::IsFuelFree"
    class IsFuelCheap(HookFactory):
        _name = "cGcDifficultySettings::IsFuelCheap"
    class IsChargingFree(HookFactory):
        _name = "cGcDifficultySettings::IsChargingFree"

class TkInputDevicesGLFW:
    class cTkPadXInput:
        class IsAvailable(HookFactory):
            _name = "TkInputDevicesGLFW::cTkPadXInput::IsAvailable"
        class ActivityCheck(HookFactory):
            _name = "TkInputDevicesGLFW::cTkPadXInput::ActivityCheck"
        class PullInput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkPadXInput::PullInput"
        class PushOutput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkPadXInput::PushOutput"
    class cTkDS4Input:
        class ActivityCheck(HookFactory):
            _name = "TkInputDevicesGLFW::cTkDS4Input::ActivityCheck"
        class PullInput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkDS4Input::PullInput"
        class PushOutput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkDS4Input::PushOutput"
    class cTkKeyboard:
        class ActivityCheck(HookFactory):
            _name = "TkInputDevicesGLFW::cTkKeyboard::ActivityCheck"
        class PullInput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkKeyboard::PullInput"
    class cTkMouse:
        class ActivityCheck(HookFactory):
            _name = "TkInputDevicesGLFW::cTkMouse::ActivityCheck"
        class PullInput(HookFactory):
            _name = "TkInputDevicesGLFW::cTkMouse::PullInput"

class cGcEncyclopediaComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcEncyclopediaComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcEncyclopediaComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcEncyclopediaComponent::InitData"

class ComponentInstancercGcEncyclopediaComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcEncyclopediaComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcEncyclopediaComponent::ConstructInstance"

class cGcDroneComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcDroneComponent::GetTypedComponent"
        _overload: overloads.cGcDroneComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcDroneComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcDroneComponent::FindFirstTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcDroneComponent::GetNumComponents"
    class IsFriendly(HookFactory):
        _name = "cGcDroneComponent::IsFriendly"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcDroneComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcDroneComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcDroneComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcDroneComponent::Prepare"
    class GetUpdatePeriod(HookFactory):
        _name = "cGcDroneComponent::GetUpdatePeriod"
    class Update(HookFactory):
        _name = "cGcDroneComponent::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcDroneComponent::UpdatePostPhysics"
    class NetSerialize(HookFactory):
        _name = "cGcDroneComponent::NetSerialize"
    class Release(HookFactory):
        _name = "cGcDroneComponent::Release"
    class AmInterestedInOwnership(HookFactory):
        _name = "cGcDroneComponent::AmInterestedInOwnership"
    class OnOwnershipTransfer(HookFactory):
        _name = "cGcDroneComponent::OnOwnershipTransfer"
    class PrepareNavigation(HookFactory):
        _name = "cGcDroneComponent::PrepareNavigation"
    class UpdateNavigation(HookFactory):
        _name = "cGcDroneComponent::UpdateNavigation"
    class GetSentinelType(HookFactory):
        _name = "cGcDroneComponent::GetSentinelType"
    class PostChatMessage(HookFactory):
        _name = "cGcDroneComponent::PostChatMessage"

class cGcDiscoveryRecord:
    class SavePersistent(HookFactory):
        _name = "cGcDiscoveryRecord::SavePersistent"
    class LoadPersistent(HookFactory):
        _name = "cGcDiscoveryRecord::LoadPersistent"
    class StartAsyncChecks(HookFactory):
        _name = "cGcDiscoveryRecord::StartAsyncChecks"
    class cGcDiscoveryRecord(HookFactory):
        _name = "cGcDiscoveryRecord::cGcDiscoveryRecord"
        _overload: overloads.cGcDiscoveryRecord.cGcDiscoveryRecord.overloads = "cGcDiscoveryRecord *, const cGcDiscoveryData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcDiscoveryRecord.cGcDiscoveryRecord.overloads):
            cls._overload = overload_args
            return cls
    class CloneFrom(HookFactory):
        _name = "cGcDiscoveryRecord::CloneFrom"

class cGcDiscoveryMetadata:
    class LoadPersistent(HookFactory):
        _name = "cGcDiscoveryMetadata::LoadPersistent"
    class SetCustomName(HookFactory):
        _name = "cGcDiscoveryMetadata::SetCustomName"

class DiscoveryUtils:
    class PopulateDiscoveryDataFromNode(HookFactory):
        _name = "DiscoveryUtils::PopulateDiscoveryDataFromNode"
    class InitialiseResourceDescriptorFromDiscoveryData(HookFactory):
        _name = "DiscoveryUtils::InitialiseResourceDescriptorFromDiscoveryData"
    class DoesPlanetGeneratedCreatureMatchDiscoveryData(HookFactory):
        _name = "DiscoveryUtils::DoesPlanetGeneratedCreatureMatchDiscoveryData"
    class AssembleDiscoveryDataForSolarSystem(HookFactory):
        _name = "DiscoveryUtils::AssembleDiscoveryDataForSolarSystem"

class ConvertAtlasToInternalDiscoveryData(HookFactory):
    _name = "ConvertAtlasToInternalDiscoveryData"

class ConvertInternalToAtlasDiscoveryData(HookFactory):
    _name = "ConvertInternalToAtlasDiscoveryData"

class cGcManagedDiscovery:
    class LoadAndResolve(HookFactory):
        _name = "cGcManagedDiscovery::LoadAndResolve"

class Session:
    class SavePersistent(HookFactory):
        _name = "Session::SavePersistent"
    class LoadPersistent(HookFactory):
        _name = "Session::LoadPersistent"
    class RemoveRecord(HookFactory):
        _name = "Session::RemoveRecord"

class DiscoverySearchContext:
    class DiscoverySearchContext(HookFactory):
        _name = "DiscoverySearchContext::DiscoverySearchContext"

class cGcDiscoveryManager:
    class Data:
        class UpdateProcessRequestsInFlight(HookFactory):
            _name = "cGcDiscoveryManager::Data::UpdateProcessRequestsInFlight"
        class UpdateProcessRequestsAsyncOps(HookFactory):
            _name = "cGcDiscoveryManager::Data::UpdateProcessRequestsAsyncOps"
        class UpdateProcessSubmitted(HookFactory):
            _name = "cGcDiscoveryManager::Data::UpdateProcessSubmitted"
        class UpdateCheckSubmissionQueue(HookFactory):
            _name = "cGcDiscoveryManager::Data::UpdateCheckSubmissionQueue"
        class UpdateCheckReportQueue(HookFactory):
            _name = "cGcDiscoveryManager::Data::UpdateCheckReportQueue"
        class ProcessAtlasResponse(HookFactory):
            _name = "cGcDiscoveryManager::Data::ProcessAtlasResponse"
        class RetrieveOwnerDisplayName(HookFactory):
            _name = "cGcDiscoveryManager::Data::RetrieveOwnerDisplayName"
        class ConvertAndUpsertAtlasData(HookFactory):
            _name = "cGcDiscoveryManager::Data::ConvertAndUpsertAtlasData"
        class NotifyDiscoveryQueryCompleted(HookFactory):
            _name = "cGcDiscoveryManager::Data::NotifyDiscoveryQueryCompleted"
        class NotifyDiscovery(HookFactory):
            _name = "cGcDiscoveryManager::Data::NotifyDiscovery"
        class LoadPersistent(HookFactory):
            _name = "cGcDiscoveryManager::Data::LoadPersistent"
        class SubmitDiscoveryData(HookFactory):
            _name = "cGcDiscoveryManager::Data::SubmitDiscoveryData"
        class SubbitDiscoveryReport(HookFactory):
            _name = "cGcDiscoveryManager::Data::SubbitDiscoveryReport"
        class DeleteSearchInstance(HookFactory):
            _name = "cGcDiscoveryManager::Data::DeleteSearchInstance"
        class RunSearches(HookFactory):
            _name = "cGcDiscoveryManager::Data::RunSearches"
        class SynchronousTrimDb(HookFactory):
            _name = "cGcDiscoveryManager::Data::SynchronousTrimDb"
        class IsDiscoveryOwnedByPlayer(HookFactory):
            _name = "cGcDiscoveryManager::Data::IsDiscoveryOwnedByPlayer"
        class HideDiscoveryIfOwnerBlocked(HookFactory):
            _name = "cGcDiscoveryManager::Data::HideDiscoveryIfOwnerBlocked"
        class HideAllDiscoveriesByBlockedUsers(HookFactory):
            _name = "cGcDiscoveryManager::Data::HideAllDiscoveriesByBlockedUsers"
    class Construct(HookFactory):
        _name = "cGcDiscoveryManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcDiscoveryManager::Prepare"
    class Clear(HookFactory):
        _name = "cGcDiscoveryManager::Clear"
    class SubmitDiscoveryData(HookFactory):
        _name = "cGcDiscoveryManager::SubmitDiscoveryData"
    class LookupDiscoveryWithStatus(HookFactory):
        _name = "cGcDiscoveryManager::LookupDiscoveryWithStatus"
    class SubmitCustomNameForDiscovery(HookFactory):
        _name = "cGcDiscoveryManager::SubmitCustomNameForDiscovery"
    class GetDiscoveryRecord(HookFactory):
        _name = "cGcDiscoveryManager::GetDiscoveryRecord"
    class BeginRemoteQueryExact(HookFactory):
        _name = "cGcDiscoveryManager::BeginRemoteQueryExact"
    class BeginRemoteQueryCategory(HookFactory):
        _name = "cGcDiscoveryManager::BeginRemoteQueryCategory"
    class BeginRemoteQueryAllOnPlanet(HookFactory):
        _name = "cGcDiscoveryManager::BeginRemoteQueryAllOnPlanet"
    class CreateSearchInstance(HookFactory):
        _name = "cGcDiscoveryManager::CreateSearchInstance"
    class GenerateDiscoveryExport(HookFactory):
        _name = "cGcDiscoveryManager::GenerateDiscoveryExport"
    class UnRegisterForEvents(HookFactory):
        _name = "cGcDiscoveryManager::UnRegisterForEvents"

class DbTrimFromPlanet(HookFactory):
    _name = "DbTrimFromPlanet"

class SortImmutableRecordsNewestFirst_SS(HookFactory):
    _name = "SortImmutableRecordsNewestFirst_SS"

class SortImmutableRecordsNewestFirst(HookFactory):
    _name = "SortImmutableRecordsNewestFirst"

class SortImmutableRecordsOldestFirst_SS(HookFactory):
    _name = "SortImmutableRecordsOldestFirst_SS"

class SortImmutableRecordsOldestFirst(HookFactory):
    _name = "SortImmutableRecordsOldestFirst"

class cGcRewardManager:
    class cGcRewardManager(HookFactory):
        _name = "cGcRewardManager::cGcRewardManager"
    class GiveGenericReward(HookFactory):
        _name = "cGcRewardManager::GiveGenericReward"
        _overload: overloads.cGcRewardManager.GiveGenericReward.overloads = "cGcRewardManager *, const TkID<128> *, const TkID<128> *, const cTkSeed *, const bool, const bool, const bool, InventoryChoice, const bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRewardManager.GiveGenericReward.overloads):
            cls._overload = overload_args
            return cls
    class RenderNGui(HookFactory):
        _name = "cGcRewardManager::RenderNGui"
    class DoDeferredReward(HookFactory):
        _name = "cGcRewardManager::DoDeferredReward"
    class StripModelBasedOnRarityOfReward(HookFactory):
        _name = "cGcRewardManager::StripModelBasedOnRarityOfReward"
    class ChooseExpeditionRewards(HookFactory):
        _name = "cGcRewardManager::ChooseExpeditionRewards"
    class GiveExpeditionRewards(HookFactory):
        _name = "cGcRewardManager::GiveExpeditionRewards"
    class GetRewardDescription(HookFactory):
        _name = "cGcRewardManager::GetRewardDescription"
    class GiveSeasonReward(HookFactory):
        _name = "cGcRewardManager::GiveSeasonReward"
    class GiveEntitlementReward(HookFactory):
        _name = "cGcRewardManager::GiveEntitlementReward"
    class GiveReward(HookFactory):
        _name = "cGcRewardManager::GiveReward"
    class GiveCargoReward(HookFactory):
        _name = "cGcRewardManager::GiveCargoReward"
    class GiveFrigateDamageResponseReward(HookFactory):
        _name = "cGcRewardManager::GiveFrigateDamageResponseReward"
    class GetSubstanceFromReward(HookFactory):
        _name = "cGcRewardManager::GetSubstanceFromReward"
    class GetMultiRewardDescription(HookFactory):
        _name = "cGcRewardManager::GetMultiRewardDescription"
    class FormatProcProductRewardString(HookFactory):
        _name = "cGcRewardManager::FormatProcProductRewardString"
    class GetProductFromReward(HookFactory):
        _name = "cGcRewardManager::GetProductFromReward"
    class GetUnitsFromReward(HookFactory):
        _name = "cGcRewardManager::GetUnitsFromReward"
    class GetStandingFromReward(HookFactory):
        _name = "cGcRewardManager::GetStandingFromReward"
    class WouldNotifyPlayerOfShieldRecharge(HookFactory):
        _name = "cGcRewardManager::WouldNotifyPlayerOfShieldRecharge"
    class GetNumberFromReward(HookFactory):
        _name = "cGcRewardManager::GetNumberFromReward"
    class GetCurrencyInfoFromRewardItem(HookFactory):
        _name = "cGcRewardManager::GetCurrencyInfoFromRewardItem"
    class GiveRewardsFromList(HookFactory):
        _name = "cGcRewardManager::GiveRewardsFromList"
    class GiveRewardFromPointer(HookFactory):
        _name = "cGcRewardManager::GiveRewardFromPointer"
    class ChooseRewardSubstance(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSubstance"
    class GiveRewardSubstance(HookFactory):
        _name = "cGcRewardManager::GiveRewardSubstance"
    class ChooseRewardSpecificSubstance(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSpecificSubstance"
    class ChooseRewardSpecificSeasonalSubstance(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSpecificSeasonalSubstance"
    class ChooseRewardPlanetSubstance(HookFactory):
        _name = "cGcRewardManager::ChooseRewardPlanetSubstance"
    class GiveRewardSpecificSubstance(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificSubstance"
    class GiveRewardSpecificSeasonalSubstance(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificSeasonalSubstance"
    class GiveRewardPlanetSubstance(HookFactory):
        _name = "cGcRewardManager::GiveRewardPlanetSubstance"
    class GiveRewardSecondarySubstance(HookFactory):
        _name = "cGcRewardManager::GiveRewardSecondarySubstance"
    class ChooseRewardProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardProduct"
    class GiveRewardProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardProduct"
    class ChooseRewardSpecificProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSpecificProduct"
    class ChooseRewardSystemSpecificProductFromList(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSystemSpecificProductFromList"
    class ChooseRewardDisguisedProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardDisguisedProduct"
    class ChooseRewardExchangeProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardExchangeProduct"
    class GetCommunityTierProductFromList(HookFactory):
        _name = "cGcRewardManager::GetCommunityTierProductFromList"
    class ChooseRewardSpecificCommunityTierProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSpecificCommunityTierProduct"
    class ChooseRewardMultiItemsProcTechProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardMultiItemsProcTechProduct"
    class ChooseRewardProcTechProduct(HookFactory):
        _name = "cGcRewardManager::ChooseRewardProcTechProduct"
    class GiveRewardSpecificProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificProduct"
    class GiveRewardRequirementsForRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardRequirementsForRecipe"
    class GiveRewardSpecificCommunityTierProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificCommunityTierProduct"
    class GiveRewardSystemSpecificProductFromList(HookFactory):
        _name = "cGcRewardManager::GiveRewardSystemSpecificProductFromList"
    class GiveRewardExchangeProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardExchangeProduct"
    class GiveRewardDisguisedProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardDisguisedProduct"
    class GiveRewardProcTechProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardProcTechProduct"
    class GiveRewardProceduralProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardProceduralProduct"
    class SendProcProductMessage(HookFactory):
        _name = "cGcRewardManager::SendProcProductMessage"
    class GiveRewardProceduralTechnology(HookFactory):
        _name = "cGcRewardManager::GiveRewardProceduralTechnology"
    class GiveRewardMultiSpecificProducts(HookFactory):
        _name = "cGcRewardManager::GiveRewardMultiSpecificProducts"
    class GiveRewardMultiSpecificItems(HookFactory):
        _name = "cGcRewardManager::GiveRewardMultiSpecificItems"
    class GiveRewardStatDiff(HookFactory):
        _name = "cGcRewardManager::GiveRewardStatDiff"
    class GiveRewardWorker(HookFactory):
        _name = "cGcRewardManager::GiveRewardWorker"
    class GiveRewardCrashSiteFly(HookFactory):
        _name = "cGcRewardManager::GiveRewardCrashSiteFly"
    class GiveRewardCrashSiteRepair(HookFactory):
        _name = "cGcRewardManager::GiveRewardCrashSiteRepair"
    class GiveRewardShield(HookFactory):
        _name = "cGcRewardManager::GiveRewardShield"
    class GiveRewardSpecificShip(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificShip"
    class GiveRewardSpecificFrigate(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificFrigate"
    class GiveRewardAtlasPathProgress(HookFactory):
        _name = "cGcRewardManager::GiveRewardAtlasPathProgress"
    class GiveRewardModifyStat(HookFactory):
        _name = "cGcRewardManager::GiveRewardModifyStat"
    class GiveRewardIncrementStat(HookFactory):
        _name = "cGcRewardManager::GiveRewardIncrementStat"
    class GiveRewardStatCompareAndSet(HookFactory):
        _name = "cGcRewardManager::GiveRewardStatCompareAndSet"
    class GiveRewardInteractionSeenBitmask(HookFactory):
        _name = "cGcRewardManager::GiveRewardInteractionSeenBitmask"
    class GiveRewardShipAssistance(HookFactory):
        _name = "cGcRewardManager::GiveRewardShipAssistance"
    class GiveRewardTrigger(HookFactory):
        _name = "cGcRewardManager::GiveRewardTrigger"
    class GiveRewardSetCurrentMission(HookFactory):
        _name = "cGcRewardManager::GiveRewardSetCurrentMission"
    class GiveRewardMission(HookFactory):
        _name = "cGcRewardManager::GiveRewardMission"
    class GiveRewardCompleteMission(HookFactory):
        _name = "cGcRewardManager::GiveRewardCompleteMission"
    class GiveRewardCompleteMultiMission(HookFactory):
        _name = "cGcRewardManager::GiveRewardCompleteMultiMission"
    class GiveRewardMissionSeeded(HookFactory):
        _name = "cGcRewardManager::GiveRewardMissionSeeded"
    class GiveRewardMissionMessageSeeded(HookFactory):
        _name = "cGcRewardManager::GiveRewardMissionMessageSeeded"
    class GiveRewardSetAbandonedFreighterMissionState(HookFactory):
        _name = "cGcRewardManager::GiveRewardSetAbandonedFreighterMissionState"
    class GiveRewardHealth(HookFactory):
        _name = "cGcRewardManager::GiveRewardHealth"
    class GiveRewardEnergy(HookFactory):
        _name = "cGcRewardManager::GiveRewardEnergy"
    class GiveRewardFreeStamina(HookFactory):
        _name = "cGcRewardManager::GiveRewardFreeStamina"
    class GiveRewardMoney(HookFactory):
        _name = "cGcRewardManager::GiveRewardMoney"
    class GiveRewardAssessCookedProduct(HookFactory):
        _name = "cGcRewardManager::GiveRewardAssessCookedProduct"
    class GiveRewardHazard(HookFactory):
        _name = "cGcRewardManager::GiveRewardHazard"
    class GiveRewardDamage(HookFactory):
        _name = "cGcRewardManager::GiveRewardDamage"
    class GiveRewardDeath(HookFactory):
        _name = "cGcRewardManager::GiveRewardDeath"
    class GiveRewardWantedLevel(HookFactory):
        _name = "cGcRewardManager::GiveRewardWantedLevel"
    class GiveRewardDisableSentinels(HookFactory):
        _name = "cGcRewardManager::GiveRewardDisableSentinels"
    class GiveRewardEnableSentinels(HookFactory):
        _name = "cGcRewardManager::GiveRewardEnableSentinels"
    class GiveRewardFrigateFlyby(HookFactory):
        _name = "cGcRewardManager::GiveRewardFrigateFlyby"
    class GiveRewardCustomPlayerControl(HookFactory):
        _name = "cGcRewardManager::GiveRewardCustomPlayerControl"
    class GiveRewardStanding(HookFactory):
        _name = "cGcRewardManager::GiveRewardStanding"
    class GiveRewardFactionStanding(HookFactory):
        _name = "cGcRewardManager::GiveRewardFactionStanding"
    class GiveRewardSecondaryInteractionOptions(HookFactory):
        _name = "cGcRewardManager::GiveRewardSecondaryInteractionOptions"
    class GiveRewardScanEventNearestBuilding(HookFactory):
        _name = "cGcRewardManager::GiveRewardScanEventNearestBuilding"
    class GiveRewardWeapon(HookFactory):
        _name = "cGcRewardManager::GiveRewardWeapon"
    class GiveRewardSpecificWeapon(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificWeapon"
    class GiveRewardStartPurchase(HookFactory):
        _name = "cGcRewardManager::GiveRewardStartPurchase"
    class GiveRewardOpenPage(HookFactory):
        _name = "cGcRewardManager::GiveRewardOpenPage"
    class GiveRewardOpenFreeFreighter(HookFactory):
        _name = "cGcRewardManager::GiveRewardOpenFreeFreighter"
    class GiveRewardWikiTopic(HookFactory):
        _name = "cGcRewardManager::GiveRewardWikiTopic"
    class GiveRewardScan(HookFactory):
        _name = "cGcRewardManager::GiveRewardScan"
    class GiveRewardSignalScan(HookFactory):
        _name = "cGcRewardManager::GiveRewardSignalScan"
    class GiveRewardTeachWord(HookFactory):
        _name = "cGcRewardManager::GiveRewardTeachWord"
    class GiveRewardDisplayTechWindow(HookFactory):
        _name = "cGcRewardManager::GiveRewardDisplayTechWindow"
    class GiveRewardDamageTech(HookFactory):
        _name = "cGcRewardManager::GiveRewardDamageTech"
    class GiveRewardRepairTech(HookFactory):
        _name = "cGcRewardManager::GiveRewardRepairTech"
    class GiveRewardRechargeTech(HookFactory):
        _name = "cGcRewardManager::GiveRewardRechargeTech"
    class ChooseRewardProductRecipe(HookFactory):
        _name = "cGcRewardManager::ChooseRewardProductRecipe"
    class GiveRewardProductRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardProductRecipe"
    class GiveRewardSpecificProductRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificProductRecipe"
    class GiveRewardForgetSpecificProductRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardForgetSpecificProductRecipe"
    class GiveRewardForgetSpecificTechRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardForgetSpecificTechRecipe"
    class ChooseRewardProductRecipeFromList(HookFactory):
        _name = "cGcRewardManager::ChooseRewardProductRecipeFromList"
    class GiveRewardProductRecipeFromList(HookFactory):
        _name = "cGcRewardManager::GiveRewardProductRecipeFromList"
    class GiveRewardMultiSpecificProductRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardMultiSpecificProductRecipe"
    class GiveRewardMultiSpecificTechRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardMultiSpecificTechRecipe"
    class GiveRewardTechRecipe(HookFactory):
        _name = "cGcRewardManager::GiveRewardTechRecipe"
    class GiveRewardSpecificTech(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificTech"
    class GiveRewardInstallTech(HookFactory):
        _name = "cGcRewardManager::GiveRewardInstallTech"
    class ChooseRewardSpecificTechFromList(HookFactory):
        _name = "cGcRewardManager::ChooseRewardSpecificTechFromList"
    class GiveRewardSpecificTechFromList(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificTechFromList"
    class GiveRewardTimeWarp(HookFactory):
        _name = "cGcRewardManager::GiveRewardTimeWarp"
    class GiveRewardPortalState(HookFactory):
        _name = "cGcRewardManager::GiveRewardPortalState"
    class GiveRewardClosePortal(HookFactory):
        _name = "cGcRewardManager::GiveRewardClosePortal"
    class GiveRewardDiscoverRune(HookFactory):
        _name = "cGcRewardManager::GiveRewardDiscoverRune"
    class GiveRewardTeleport(HookFactory):
        _name = "cGcRewardManager::GiveRewardTeleport"
    class RPCGiveGenericRewardToNetPlayer(HookFactory):
        _name = "cGcRewardManager::RPCGiveGenericRewardToNetPlayer"
    class GiveRewardCommunityContribution(HookFactory):
        _name = "cGcRewardManager::GiveRewardCommunityContribution"
    class GiveRewardInterventionResponse(HookFactory):
        _name = "cGcRewardManager::GiveRewardInterventionResponse"
    class GiveRewardSpecificSpecial(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificSpecial"
    class GiveRewardCustomExpeditionLogEntry(HookFactory):
        _name = "cGcRewardManager::GiveRewardCustomExpeditionLogEntry"
    class GiveRewardShipMessage(HookFactory):
        _name = "cGcRewardManager::GiveRewardShipMessage"
    class GiveRewardSalvageShip(HookFactory):
        _name = "cGcRewardManager::GiveRewardSalvageShip"
    class GiveRewardJetpackBoost(HookFactory):
        _name = "cGcRewardManager::GiveRewardJetpackBoost"
    class GiveRewardRefreshHazProt(HookFactory):
        _name = "cGcRewardManager::GiveRewardRefreshHazProt"
    class GiveRewardUploadBase(HookFactory):
        _name = "cGcRewardManager::GiveRewardUploadBase"
    class GiveRewardSendChatMessage(HookFactory):
        _name = "cGcRewardManager::GiveRewardSendChatMessage"
    class GiveRewardShipSlot(HookFactory):
        _name = "cGcRewardManager::GiveRewardShipSlot"
    class GiveRewardWeaponSlot(HookFactory):
        _name = "cGcRewardManager::GiveRewardWeaponSlot"
    class GiveRewardFreighterSlot(HookFactory):
        _name = "cGcRewardManager::GiveRewardFreighterSlot"
    class GiveRewardEnableInteractionClass(HookFactory):
        _name = "cGcRewardManager::GiveRewardEnableInteractionClass"
    class GiveRewardUpgradeShipClass(HookFactory):
        _name = "cGcRewardManager::GiveRewardUpgradeShipClass"
    class GiveRewardUpgradeWeaponClass(HookFactory):
        _name = "cGcRewardManager::GiveRewardUpgradeWeaponClass"
    class GiveRewardActivateEncounterSentinels(HookFactory):
        _name = "cGcRewardManager::GiveRewardActivateEncounterSentinels"
    class GiveRewardSetNexusExitWarpTargetToFireteamMemberUA(HookFactory):
        _name = "cGcRewardManager::GiveRewardSetNexusExitWarpTargetToFireteamMemberUA"
    class GiveRewardAbortTakeoff(HookFactory):
        _name = "cGcRewardManager::GiveRewardAbortTakeoff"
    class GiveRewardPetAction(HookFactory):
        _name = "cGcRewardManager::GiveRewardPetAction"
    class GiveRewardPetEgg(HookFactory):
        _name = "cGcRewardManager::GiveRewardPetEgg"
    class GiveRewardPetEggHatch(HookFactory):
        _name = "cGcRewardManager::GiveRewardPetEggHatch"
    class GiveRewardBeginSettlementBuilding(HookFactory):
        _name = "cGcRewardManager::GiveRewardBeginSettlementBuilding"
    class GetAvailableSettlementBuildingForReward(HookFactory):
        _name = "cGcRewardManager::GetAvailableSettlementBuildingForReward"
    class GetBuildingFromReward(HookFactory):
        _name = "cGcRewardManager::GetBuildingFromReward"
    class GiveRewardSpecificPetEgg(HookFactory):
        _name = "cGcRewardManager::GiveRewardSpecificPetEgg"
    class GiveRewardOSDMessage(HookFactory):
        _name = "cGcRewardManager::GiveRewardOSDMessage"
    class GiveRewardRepairWholeInventory(HookFactory):
        _name = "cGcRewardManager::GiveRewardRepairWholeInventory"
    class GiveRewardUnlockSeasonReward(HookFactory):
        _name = "cGcRewardManager::GiveRewardUnlockSeasonReward"
    class GiveRewardSettlementProgress(HookFactory):
        _name = "cGcRewardManager::GiveRewardSettlementProgress"
    class GiveRewardSettlementJudgement(HookFactory):
        _name = "cGcRewardManager::GiveRewardSettlementJudgement"
    class GiveRewardSettlementCustomJudgement(HookFactory):
        _name = "cGcRewardManager::GiveRewardSettlementCustomJudgement"
    class DisplaySettlementJudgementAlert(HookFactory):
        _name = "cGcRewardManager::DisplaySettlementJudgementAlert"
    class GiveRewardTriggerSettlementJudgement(HookFactory):
        _name = "cGcRewardManager::GiveRewardTriggerSettlementJudgement"
    class GiveRewardStartSettlementExpedition(HookFactory):
        _name = "cGcRewardManager::GiveRewardStartSettlementExpedition"
    class GiveRewardEndSettlementExpedition(HookFactory):
        _name = "cGcRewardManager::GiveRewardEndSettlementExpedition"
    class GiveRewardSwapMultiTool(HookFactory):
        _name = "cGcRewardManager::GiveRewardSwapMultiTool"
    class GetTechList(HookFactory):
        _name = "cGcRewardManager::GetTechList"
    class GetProductRecipeList(HookFactory):
        _name = "cGcRewardManager::GetProductRecipeList"
    class CouldRewardGiveInventoryItem(HookFactory):
        _name = "cGcRewardManager::CouldRewardGiveInventoryItem"
    class DisplayStandingMessage(HookFactory):
        _name = "cGcRewardManager::DisplayStandingMessage"
    class GenerateProceduralProductCategoryFromBiome(HookFactory):
        _name = "cGcRewardManager::GenerateProceduralProductCategoryFromBiome"
    class RewardTriggersExchange(HookFactory):
        _name = "cGcRewardManager::RewardTriggersExchange"
        _overload: overloads.cGcRewardManager.RewardTriggersExchange.overloads = "cGcRewardManager *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRewardManager.RewardTriggersExchange.overloads):
            cls._overload = overload_args
            return cls
    class OnExchangeFinished(HookFactory):
        _name = "cGcRewardManager::OnExchangeFinished"
    class DoesRewardGiveProductRecipe(HookFactory):
        _name = "cGcRewardManager::DoesRewardGiveProductRecipe"
    class DoesRewardGiveTechRecipe(HookFactory):
        _name = "cGcRewardManager::DoesRewardGiveTechRecipe"
    class GiveGenericRewardFromPosition(HookFactory):
        _name = "cGcRewardManager::GiveGenericRewardFromPosition"

class cGcEntitlementManager:
    class HasEntitlementReward(HookFactory):
        _name = "cGcEntitlementManager::HasEntitlementReward"
    class HasUsedEntitlementReward(HookFactory):
        _name = "cGcEntitlementManager::HasUsedEntitlementReward"
    class MarkEntitlementUsed(HookFactory):
        _name = "cGcEntitlementManager::MarkEntitlementUsed"

class PersistentData:
    class Remove(HookFactory):
        _templates = ("T0", )
        _name = "PersistentData<{T0}>::Remove"

class cGcDiscoveryDataRing:
    class HashDiscovery(HookFactory):
        _templates = ("T0", )
        _name = "cGcDiscoveryDataRing<{T0}>::HashDiscovery"

class nms_rapidjson:
    class SkipWhitespace(HookFactory):
        _templates = ("T0", )
        _name = "nms_rapidjson::SkipWhitespace<{T0}>"
    class MemoryPoolAllocator:
        class Malloc(HookFactory):
            _templates = ("T0", )
            _name = "nms_rapidjson::MemoryPoolAllocator<{T0}>::Malloc"
    class internal:
        class StrtodNormalPrecision(HookFactory):
            _name = "nms_rapidjson::internal::StrtodNormalPrecision"
        class StrtodDiyFp(HookFactory):
            _name = "nms_rapidjson::internal::StrtodDiyFp"
        class BigInteger:
            class MultiplyPow5(HookFactory):
                _name = "nms_rapidjson::internal::BigInteger::MultiplyPow5"
        class CheckWithinHalfULP(HookFactory):
            _name = "nms_rapidjson::internal::CheckWithinHalfULP"
        class StrtodBigInteger(HookFactory):
            _name = "nms_rapidjson::internal::StrtodBigInteger"
        class Stack:
            class Resize(HookFactory):
                _templates = ("T0", )
                _name = "nms_rapidjson::internal::Stack<{T0}>::Resize"
        class u32toa(HookFactory):
            _name = "nms_rapidjson::internal::u32toa"
        class u64toa(HookFactory):
            _name = "nms_rapidjson::internal::u64toa"
        class DigitGen(HookFactory):
            _name = "nms_rapidjson::internal::DigitGen"
        class Grisu2(HookFactory):
            _name = "nms_rapidjson::internal::Grisu2"
        class WriteExponent(HookFactory):
            _name = "nms_rapidjson::internal::WriteExponent"
        class Prettify(HookFactory):
            _name = "nms_rapidjson::internal::Prettify"
    class CrtAllocator:
        class Malloc(HookFactory):
            _name = "nms_rapidjson::CrtAllocator::Malloc"

class cGcNetworkDelayedMessage:
    class IsReadyToProcess(HookFactory):
        _name = "cGcNetworkDelayedMessage::IsReadyToProcess"

class cGcMultitoolData:
    class cGcMultitoolData(HookFactory):
        _name = "cGcMultitoolData::cGcMultitoolData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMultitoolData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMultitoolData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMultitoolData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMultitoolData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMultitoolData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcMultitoolData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMultitoolData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMultitoolData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcMultitoolData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMultitoolData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMultitoolData::WriteToXMLNodeExplicit"

class cGcByteBeatSong:
    class cGcByteBeatSong(HookFactory):
        _name = "cGcByteBeatSong::cGcByteBeatSong"
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatSong::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatSong::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcByteBeatSong::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatSong::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcByteBeatSong::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcByteBeatSong::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatSong::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatSong::WriteToXMLNodeExplicit"

class cGcPetCustomisationData:
    class cGcPetCustomisationData(HookFactory):
        _name = "cGcPetCustomisationData::cGcPetCustomisationData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetCustomisationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetCustomisationData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPetCustomisationData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPetCustomisationData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPetCustomisationData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPetCustomisationData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetCustomisationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPetCustomisationData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPetCustomisationData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetCustomisationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetCustomisationData::WriteToXMLNodeExplicit"

class cGcSquadronPilotData:
    class cGcSquadronPilotData(HookFactory):
        _name = "cGcSquadronPilotData::cGcSquadronPilotData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSquadronPilotData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSquadronPilotData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSquadronPilotData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSquadronPilotData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSquadronPilotData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSquadronPilotData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSquadronPilotData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSquadronPilotData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSquadronPilotData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSquadronPilotData::WriteToXMLNode"

class cGcNPCWorkerData:
    class cGcNPCWorkerData(HookFactory):
        _name = "cGcNPCWorkerData::cGcNPCWorkerData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCWorkerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCWorkerData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcNPCWorkerData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcNPCWorkerData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCWorkerData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCWorkerData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcNPCWorkerData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCWorkerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCWorkerData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcNPCWorkerData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCWorkerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCWorkerData::WriteToXMLNodeExplicit"

class cGcPlayerOwnershipData:
    class cGcPlayerOwnershipData(HookFactory):
        _name = "cGcPlayerOwnershipData::cGcPlayerOwnershipData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerOwnershipData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerOwnershipData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlayerOwnershipData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPlayerOwnershipData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerOwnershipData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerOwnershipData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerOwnershipData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerOwnershipData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerOwnershipData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerOwnershipData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerOwnershipData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerOwnershipData::WriteToXMLNodeExplicit"

class cGcCharacterCustomisationSaveData:
    class cGcCharacterCustomisationSaveData(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::cGcCharacterCustomisationSaveData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterCustomisationSaveData::WriteToXMLNodeExplicit"

class cGcCharacterCustomisationData:
    class cGcCharacterCustomisationData(HookFactory):
        _name = "cGcCharacterCustomisationData::cGcCharacterCustomisationData"
        _overload: overloads.cGcCharacterCustomisationData.cGcCharacterCustomisationData.overloads = "cGcCharacterCustomisationData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcCharacterCustomisationData.cGcCharacterCustomisationData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterCustomisationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCharacterCustomisationData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCharacterCustomisationData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCharacterCustomisationData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterCustomisationData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCharacterCustomisationData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCharacterCustomisationData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcCharacterCustomisationData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterCustomisationData::WriteToXMLNodeExplicit"

class cGcHotActionsSaveData:
    class cGcHotActionsSaveData(HookFactory):
        _name = "cGcHotActionsSaveData::cGcHotActionsSaveData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHotActionsSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHotActionsSaveData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcHotActionsSaveData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcHotActionsSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcHotActionsSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHotActionsSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHotActionsSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcHotActionsSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHotActionsSaveData::WriteToXMLNode"

class cGcExpeditionEventResult:
    class Save(HookFactory):
        _name = "cGcExpeditionEventResult::Save"
    class Load(HookFactory):
        _name = "cGcExpeditionEventResult::Load"
    class OverrideReward(HookFactory):
        _name = "cGcExpeditionEventResult::OverrideReward"
    class GetDescription(HookFactory):
        _name = "cGcExpeditionEventResult::GetDescription"
    class GetEventDifficulty(HookFactory):
        _name = "cGcExpeditionEventResult::GetEventDifficulty"
    class GetRewardDescription(HookFactory):
        _name = "cGcExpeditionEventResult::GetRewardDescription"
    class GetInterventionDialog(HookFactory):
        _name = "cGcExpeditionEventResult::GetInterventionDialog"
    class OnInterventionDeclined(HookFactory):
        _name = "cGcExpeditionEventResult::OnInterventionDeclined"
    class OnInterventionSucceeded(HookFactory):
        _name = "cGcExpeditionEventResult::OnInterventionSucceeded"
    class OnInterventionFailed(HookFactory):
        _name = "cGcExpeditionEventResult::OnInterventionFailed"
    class AddAffectedFrigate(HookFactory):
        _name = "cGcExpeditionEventResult::AddAffectedFrigate"
    class GetChanceOfFrigateDamage(HookFactory):
        _name = "cGcExpeditionEventResult::GetChanceOfFrigateDamage"
    class AttemptToRepairFrigates(HookFactory):
        _name = "cGcExpeditionEventResult::AttemptToRepairFrigates"
    class DamageFrigates(HookFactory):
        _name = "cGcExpeditionEventResult::DamageFrigates"
    class CalculateNumberOfDamagedFrigates(HookFactory):
        _name = "cGcExpeditionEventResult::CalculateNumberOfDamagedFrigates"
    class ChooseDescription(HookFactory):
        _name = "cGcExpeditionEventResult::ChooseDescription"
    class ChooseRewards(HookFactory):
        _name = "cGcExpeditionEventResult::ChooseRewards"

class cTkLODComponent:
    class GetTypedComponent(HookFactory):
        _name = "cTkLODComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkLODComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkLODComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkLODComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cTkLODComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkLODComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkLODComponent::Release"
    class Update(HookFactory):
        _name = "cTkLODComponent::Update"
    class GetLODForDistance(HookFactory):
        _name = "cTkLODComponent::GetLODForDistance"
    class SwitchToLOD(HookFactory):
        _name = "cTkLODComponent::SwitchToLOD"

class cGcMarkerComponent:
    class DefaultRenderNGui(HookFactory):
        _name = "cGcMarkerComponent::DefaultRenderNGui"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcMarkerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcMarkerComponent::InitData"
    class Release(HookFactory):
        _name = "cGcMarkerComponent::Release"
    class Prepare(HookFactory):
        _name = "cGcMarkerComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcMarkerComponent::Update"

class ComponentInstancercTkLODComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkLODComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkLODComponent::ConstructInstance"

class ComponentLoadInstancercTkLODComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercTkLODComponent::Register"

class cGcFleetFrigate:
    class cGcFleetFrigate(HookFactory):
        _name = "cGcFleetFrigate::cGcFleetFrigate"
    class GetOwnerId(HookFactory):
        _name = "cGcFleetFrigate::GetOwnerId"
    class GetPlayerFleetManager(HookFactory):
        _name = "cGcFleetFrigate::GetPlayerFleetManager"
    class Save(HookFactory):
        _name = "cGcFleetFrigate::Save"
    class Load(HookFactory):
        _name = "cGcFleetFrigate::Load"
    class Invalidate(HookFactory):
        _name = "cGcFleetFrigate::Invalidate"
    class GetNameFromSeed(HookFactory):
        _name = "cGcFleetFrigate::GetNameFromSeed"
    class GetName(HookFactory):
        _name = "cGcFleetFrigate::GetName"
    class GetCustomName(HookFactory):
        _name = "cGcFleetFrigate::GetCustomName"
    class GetPrimaryTraitOverride(HookFactory):
        _name = "cGcFleetFrigate::GetPrimaryTraitOverride"
    class GetCaptainName(HookFactory):
        _name = "cGcFleetFrigate::GetCaptainName"
    class SetAIShipSpawn(HookFactory):
        _name = "cGcFleetFrigate::SetAIShipSpawn"
    class GetAIShipSpawn(HookFactory):
        _name = "cGcFleetFrigate::GetAIShipSpawn"
    class UpdateSpawnedShipDamagedMaintenanceComponents(HookFactory):
        _name = "cGcFleetFrigate::UpdateSpawnedShipDamagedMaintenanceComponents"
    class GetFrigateClassIconString(HookFactory):
        _name = "cGcFleetFrigate::GetFrigateClassIconString"
    class GetFrigateClass(HookFactory):
        _name = "cGcFleetFrigate::GetFrigateClass"
    class GetRace(HookFactory):
        _name = "cGcFleetFrigate::GetRace"
    class GetCost(HookFactory):
        _name = "cGcFleetFrigate::GetCost"
    class GetStat(HookFactory):
        _name = "cGcFleetFrigate::GetStat"
    class GetTrait(HookFactory):
        _name = "cGcFleetFrigate::GetTrait"
    class AddTrait(HookFactory):
        _name = "cGcFleetFrigate::AddTrait"
    class SetDamaged(HookFactory):
        _name = "cGcFleetFrigate::SetDamaged"
    class SetDamageTaken(HookFactory):
        _name = "cGcFleetFrigate::SetDamageTaken"
    class IsDamaged(HookFactory):
        _name = "cGcFleetFrigate::IsDamaged"
    class RepairDamagedBit(HookFactory):
        _name = "cGcFleetFrigate::RepairDamagedBit"
    class GetDamagedMaintenanceComponents(HookFactory):
        _name = "cGcFleetFrigate::GetDamagedMaintenanceComponents"
    class SetPirateDefencePlayer(HookFactory):
        _name = "cGcFleetFrigate::SetPirateDefencePlayer"
    class GetPirateDefencePlayer(HookFactory):
        _name = "cGcFleetFrigate::GetPirateDefencePlayer"
    class GetExpedition(HookFactory):
        _name = "cGcFleetFrigate::GetExpedition"
    class OnExpeditionComplete(HookFactory):
        _name = "cGcFleetFrigate::OnExpeditionComplete"
    class GetCanLevelUp(HookFactory):
        _name = "cGcFleetFrigate::GetCanLevelUp"
    class GetNumberOfExpeditionsCompleted(HookFactory):
        _name = "cGcFleetFrigate::GetNumberOfExpeditionsCompleted"
    class GetNumberOfTimesDamaged(HookFactory):
        _name = "cGcFleetFrigate::GetNumberOfTimesDamaged"
    class AwardLevelUpStats(HookFactory):
        _name = "cGcFleetFrigate::AwardLevelUpStats"
    class GetCargo(HookFactory):
        _name = "cGcFleetFrigate::GetCargo"
    class OnCargoCollected(HookFactory):
        _name = "cGcFleetFrigate::OnCargoCollected"

class cGcPlayerBasePersistentBuffer:
    class GetBasePosition(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBasePosition"
    class cGcPlayerBasePersistentBuffer(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::cGcPlayerBasePersistentBuffer"
        _overload: overloads.cGcPlayerBasePersistentBuffer.cGcPlayerBasePersistentBuffer.overloads = "cGcPlayerBasePersistentBuffer *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerBasePersistentBuffer.cGcPlayerBasePersistentBuffer.overloads):
            cls._overload = overload_args
            return cls
    class Update(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::Update"
    class PopulateBufferData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::PopulateBufferData"
    class GetBaseBuildingObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseBuildingObjects"
    class GetFirstBaseBuildingObjectWithID(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetFirstBaseBuildingObjectWithID"
    class GetBaseBuildingObjectsWithID(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseBuildingObjectsWithID"
    class GetBaseBuildingObjectsForRegion(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseBuildingObjectsForRegion"
    class InitializeFromData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::InitializeFromData"
    class AddBaseObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::AddBaseObjects"
    class RefundBlacklistedBuildingObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::RefundBlacklistedBuildingObjects"
    class GenerateLinkGridConnections(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GenerateLinkGridConnections"
    class GenerateBaseLayout(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GenerateBaseLayout"
    class ProcessObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ProcessObjects"
    class CheckDiscoveryOwnerData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::CheckDiscoveryOwnerData"
    class LoadGalacticAddress(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::LoadGalacticAddress"
    class StoreBaseBuildingObject(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::StoreBaseBuildingObject"
    class FindBaseBuildingObject(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::FindBaseBuildingObject"
    class UpdateBaseBuildingObject(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::UpdateBaseBuildingObject"
    class GetBaseBuildingObjectData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseBuildingObjectData"
    class GetLinkedMatchingHandle(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetLinkedMatchingHandle"
    class SetLinkObjectState(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::SetLinkObjectState"
    class AddAmountToGrid(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::AddAmountToGrid"
    class GetDecayFactor(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetDecayFactor"
    class GetLinkObjectSnapshot(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetLinkObjectSnapshot"
    class GetLinkObjectDependentSnapshot(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetLinkObjectDependentSnapshot"
    class AreObjectsOnSameGrid(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::AreObjectsOnSameGrid"
    class GetBaseBuildingObjectsOnSameGrid(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseBuildingObjectsOnSameGrid"
    class GetDependentBaseBuildingObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetDependentBaseBuildingObjects"
    class GetScreenshotMatrix(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetScreenshotMatrix"
    class ForceAddNodesAroundPlayer(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ForceAddNodesAroundPlayer"
    class ClearPlayerBase(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ClearPlayerBase"
    class ClearAndUnClaimBase(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ClearAndUnClaimBase"
    class GetBaseComputerPosition(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseComputerPosition"
    class GetLastEditedByUserName(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetLastEditedByUserName"
    class GetBaseStats(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetBaseStats"
    class IsPlayerBaseOnSystem(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::IsPlayerBaseOnSystem"
    class IsPlayerBaseOnCurrentPlanet(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::IsPlayerBaseOnCurrentPlanet"
    class CountObjectsById(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::CountObjectsById"
    class ValidateValues(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ValidateValues"
    class GetPersistentData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetPersistentData"
    class GetGridSnapshotData(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetGridSnapshotData"
    class HasNetworkOwner(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::HasNetworkOwner"
    class GenerateHashMessage(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GenerateHashMessage"
    class GenerateSyncMessage(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GenerateSyncMessage"
    class ApplySyncMessage(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ApplySyncMessage"
    class ApplySyncDataToObject(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ApplySyncDataToObject"
    class ApplySyncRemoveObject(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::ApplySyncRemoveObject"
    class StartAsyncChecks(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::StartAsyncChecks"
    class RefundObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::RefundObjects"
    class OnHashOffsetChanged(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::OnHashOffsetChanged"
    class GetNearestSqrDistanceForObjects(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetNearestSqrDistanceForObjects"
    class GetNearestSqrDistanceForConnections(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GetNearestSqrDistanceForConnections"
    class GatherDirectlyLinkedSockets(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GatherDirectlyLinkedSockets"
    class GatherDirectlyLinkedDependantSockets(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GatherDirectlyLinkedDependantSockets"
    class AreObjectsTransferLinked(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::AreObjectsTransferLinked"
    class OnLinkObjectAdded(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::OnLinkObjectAdded"
    class OnLinkObjectRemoved(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::OnLinkObjectRemoved"
    class RegenerateLinkGrids(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::RegenerateLinkGrids"
    class MergeLinkGrids(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::MergeLinkGrids"
    class CreateNewLinkGrid(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::CreateNewLinkGrid"
    class UpdateVisualStateOfGrid(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::UpdateVisualStateOfGrid"
    class PlayerBasePersistentData:
        class GetEntryData(HookFactory):
            _name = "cGcPlayerBasePersistentBuffer::PlayerBasePersistentData::GetEntryData"
        class PlayerBasePersistentData(HookFactory):
            _name = "cGcPlayerBasePersistentBuffer::PlayerBasePersistentData::PlayerBasePersistentData"
            _overload: overloads.cGcPlayerBasePersistentBuffer.PlayerBasePersistentData.PlayerBasePersistentData.overloads = "cGcPlayerBasePersistentBuffer::PlayerBasePersistentData *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcPlayerBasePersistentBuffer.PlayerBasePersistentData.PlayerBasePersistentData.overloads):
                cls._overload = overload_args
                return cls
        class ClearObject(HookFactory):
            _name = "cGcPlayerBasePersistentBuffer::PlayerBasePersistentData::ClearObject"
    class GenerateHashValue(HookFactory):
        _name = "cGcPlayerBasePersistentBuffer::GenerateHashValue"

class base64_encode(HookFactory):
    _name = "base64_encode"

class sha256_transf(HookFactory):
    _name = "sha256_transf"

class sha256_update(HookFactory):
    _name = "sha256_update"

class sha256_final(HookFactory):
    _name = "sha256_final"

class hmac_sha256_2(HookFactory):
    _name = "hmac_sha256_2"

class cTkCommandLine:
    class GetArgumentString(HookFactory):
        _name = "cTkCommandLine::GetArgumentString"
    class GetArgumentBool(HookFactory):
        _name = "cTkCommandLine::GetArgumentBool"

class cGcGameAnalytics:
    class Construct(HookFactory):
        _name = "cGcGameAnalytics::Construct"
    class StartSession(HookFactory):
        _name = "cGcGameAnalytics::StartSession"
    class EndSession(HookFactory):
        _name = "cGcGameAnalytics::EndSession"
    class Update(HookFactory):
        _name = "cGcGameAnalytics::Update"
    class AddRequiredKeyValues(HookFactory):
        _name = "cGcGameAnalytics::AddRequiredKeyValues"
    class HttpHandleInitRequestResult(HookFactory):
        _name = "cGcGameAnalytics::HttpHandleInitRequestResult"
    class HttpHandleSessionStartRequestResult(HookFactory):
        _name = "cGcGameAnalytics::HttpHandleSessionStartRequestResult"
    class StartEvents(HookFactory):
        _name = "cGcGameAnalytics::StartEvents"
    class AddCustomEvent(HookFactory):
        _name = "cGcGameAnalytics::AddCustomEvent"
    class AddProgressionEvent(HookFactory):
        _name = "cGcGameAnalytics::AddProgressionEvent"
    class UploadEventsJSON(HookFactory):
        _name = "cGcGameAnalytics::UploadEventsJSON"
    class CheckJsonBuffer(HookFactory):
        _name = "cGcGameAnalytics::CheckJsonBuffer"
    class BuildHeirachicalEventId(HookFactory):
        _name = "cGcGameAnalytics::BuildHeirachicalEventId"
    class OnMultiplayerSessionStarting(HookFactory):
        _name = "cGcGameAnalytics::OnMultiplayerSessionStarting"
    class OnMultiplayerSessionFinished(HookFactory):
        _name = "cGcGameAnalytics::OnMultiplayerSessionFinished"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcGameAnalytics::OnNetworkPlayerStateEvent"
    class UpdateFireteamSession(HookFactory):
        _name = "cGcGameAnalytics::UpdateFireteamSession"

class cGcGameKnowledge:
    class LoadPersistent(HookFactory):
        _name = "cGcGameKnowledge::LoadPersistent"
    class AddGalacticWaypoint(HookFactory):
        _name = "cGcGameKnowledge::AddGalacticWaypoint"
    class RemoveGalacticWaypoint(HookFactory):
        _name = "cGcGameKnowledge::RemoveGalacticWaypoint"
    class FindExactGalacticWaypoint(HookFactory):
        _name = "cGcGameKnowledge::FindExactGalacticWaypoint"
    class GetGalacticWaypointWithAddress(HookFactory):
        _name = "cGcGameKnowledge::GetGalacticWaypointWithAddress"
    class ClearAllWaypoints(HookFactory):
        _name = "cGcGameKnowledge::ClearAllWaypoints"
    class ClearAllSpecificWaypoints(HookFactory):
        _name = "cGcGameKnowledge::ClearAllSpecificWaypoints"

class cGcNetworkSynchronisedStateDataMessage:
    class CustomSerializeHeader(HookFactory):
        _name = "cGcNetworkSynchronisedStateDataMessage::CustomSerializeHeader"

class SynchronisedStateBufferTypes:
    class sBufferFormat:
        class ConstructBuffer(HookFactory):
            _templates = ("T0", )
            _name = "SynchronisedStateBufferTypes::sBufferFormat<{T0}>::ConstructBuffer"

class sGcTelemetryMultiplayerCountVariant:
    class GetVariant(HookFactory):
        _name = "sGcTelemetryMultiplayerCountVariant::GetVariant"

class DeleteAllSavesForPlayerSlot(HookFactory):
    _name = "DeleteAllSavesForPlayerSlot"

class DeleteManualSaveForPlayerSlot(HookFactory):
    _name = "DeleteManualSaveForPlayerSlot"

class sOwnedCreatureInfo:
    class sOwnedCreatureInfo(HookFactory):
        _name = "sOwnedCreatureInfo::sOwnedCreatureInfo"
        _overload: overloads.sOwnedCreatureInfo.sOwnedCreatureInfo.overloads = "sOwnedCreatureInfo *, const sOwnedCreatureInfo *"
        @classmethod
        def overload(cls, overload_args: overloads.sOwnedCreatureInfo.sOwnedCreatureInfo.overloads):
            cls._overload = overload_args
            return cls
    class GetGrowthProgress(HookFactory):
        _name = "sOwnedCreatureInfo::GetGrowthProgress"
    class GetSeed(HookFactory):
        _name = "sOwnedCreatureInfo::GetSeed"
    class Load(HookFactory):
        _name = "sOwnedCreatureInfo::Load"
    class Save(HookFactory):
        _name = "sOwnedCreatureInfo::Save"
    class UpdateResourceLoading(HookFactory):
        _name = "sOwnedCreatureInfo::UpdateResourceLoading"

class cGcInventoryContainer:
    class cGcInventoryContainer(HookFactory):
        _name = "cGcInventoryContainer::cGcInventoryContainer"
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryContainer::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryContainer::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcInventoryContainer::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcInventoryContainer::FixDown"
    class FixUp(HookFactory):
        _name = "cGcInventoryContainer::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryContainer::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryContainer::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryContainer::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryContainer::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryContainer::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryContainer::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryContainer::WriteToXMLNodeExplicit"

class TkCountUTF8(HookFactory):
    _templates = ("T0", )
    _name = "TkCountUTF8<{T0}>"

class cGcGalaxyVoxelData:
    class cGcGalaxyVoxelData(HookFactory):
        _name = "cGcGalaxyVoxelData::cGcGalaxyVoxelData"

class GcGameStatePersistence:
    class ExtractVersion(HookFactory):
        _name = "GcGameStatePersistence::ExtractVersion"
    class Restructuring:
        class ApplyGameMode(HookFactory):
            _name = "GcGameStatePersistence::Restructuring::ApplyGameMode"
        class IsRestructureRequired(HookFactory):
            _name = "GcGameStatePersistence::Restructuring::IsRestructureRequired"
        class RestructureSaveSlots(HookFactory):
            _name = "GcGameStatePersistence::Restructuring::RestructureSaveSlots"
    class MakeSaveVersion(HookFactory):
        _name = "GcGameStatePersistence::MakeSaveVersion"
    class GetAllPlayerSlotsInformation(HookFactory):
        _name = "GcGameStatePersistence::GetAllPlayerSlotsInformation"
    class GetSlotValidity(HookFactory):
        _name = "GcGameStatePersistence::GetSlotValidity"
    class GetStorageSlotInformation(HookFactory):
        _name = "GcGameStatePersistence::GetStorageSlotInformation"
    class HasSpecificSave(HookFactory):
        _name = "GcGameStatePersistence::HasSpecificSave"
    class IsAutosaveSlot(HookFactory):
        _name = "GcGameStatePersistence::IsAutosaveSlot"

class cGcMPMissionSelectionHelper:
    class Construct(HookFactory):
        _name = "cGcMPMissionSelectionHelper::Construct"
    class OnMissionStarted(HookFactory):
        _name = "cGcMPMissionSelectionHelper::OnMissionStarted"
    class OnMissionHandedIn(HookFactory):
        _name = "cGcMPMissionSelectionHelper::OnMissionHandedIn"
    class HasMissionStarted(HookFactory):
        _name = "cGcMPMissionSelectionHelper::HasMissionStarted"
        _overload: overloads.cGcMPMissionSelectionHelper.HasMissionStarted.overloads = "cGcMPMissionSelectionHelper *, const cTkUserIdBase<cTkFixedString<64,char> > *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMPMissionSelectionHelper.HasMissionStarted.overloads):
            cls._overload = overload_args
            return cls
    class HasMissionBeenHandedIn(HookFactory):
        _name = "cGcMPMissionSelectionHelper::HasMissionBeenHandedIn"
    class GetAllParticipcants(HookFactory):
        _name = "cGcMPMissionSelectionHelper::GetAllParticipcants"
    class GetMissionTargetUA(HookFactory):
        _name = "cGcMPMissionSelectionHelper::GetMissionTargetUA"
    class JoinMission(HookFactory):
        _name = "cGcMPMissionSelectionHelper::JoinMission"
    class Ready(HookFactory):
        _name = "cGcMPMissionSelectionHelper::Ready"
    class IsAvailableToCurrentPlayer(HookFactory):
        _name = "cGcMPMissionSelectionHelper::IsAvailableToCurrentPlayer"
    class StartMission(HookFactory):
        _name = "cGcMPMissionSelectionHelper::StartMission"
    class LeaveMission(HookFactory):
        _name = "cGcMPMissionSelectionHelper::LeaveMission"
    class HasMissionOffer(HookFactory):
        _name = "cGcMPMissionSelectionHelper::HasMissionOffer"
    class RemoveParticipant(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RemoveParticipant"
    class RPCOnMissionOffered(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RPCOnMissionOffered"
    class RPCOnMissionOfferRescinded(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RPCOnMissionOfferRescinded"
    class RPCOnRemotePlayerLeftMission(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RPCOnRemotePlayerLeftMission"
    class RPCOnParticipantReadyStatus(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RPCOnParticipantReadyStatus"
    class RPCOnMissionStartedProper(HookFactory):
        _name = "cGcMPMissionSelectionHelper::RPCOnMissionStartedProper"
    class sGcOfferedMPMission:
        class sGcOfferedMPMission(HookFactory):
            _name = "cGcMPMissionSelectionHelper::sGcOfferedMPMission::sGcOfferedMPMission"

class cGcMPMissionTracker:
    class cGcMPMissionTracker(HookFactory):
        _name = "cGcMPMissionTracker::cGcMPMissionTracker"
    class Construct(HookFactory):
        _name = "cGcMPMissionTracker::Construct"
    class Update(HookFactory):
        _name = "cGcMPMissionTracker::Update"
    class sGcSyncedMPMissionPlayerData:
        class sGcSyncedMPMissionPlayerData(HookFactory):
            _name = "cGcMPMissionTracker::sGcSyncedMPMissionPlayerData::sGcSyncedMPMissionPlayerData"
    class Destruct(HookFactory):
        _name = "cGcMPMissionTracker::Destruct"
    class OnMissionStarted(HookFactory):
        _name = "cGcMPMissionTracker::OnMissionStarted"
    class IsMissionActive(HookFactory):
        _name = "cGcMPMissionTracker::IsMissionActive"
    class IsActiveMission(HookFactory):
        _name = "cGcMPMissionTracker::IsActiveMission"
    class GetInvolvedNetworkPlayers(HookFactory):
        _name = "cGcMPMissionTracker::GetInvolvedNetworkPlayers"
    class GetInvolvedNetworkPlayerIds(HookFactory):
        _name = "cGcMPMissionTracker::GetInvolvedNetworkPlayerIds"
    class QueryAmountInRemoteInventories(HookFactory):
        _name = "cGcMPMissionTracker::QueryAmountInRemoteInventories"
    class QueryRemoteStat(HookFactory):
        _name = "cGcMPMissionTracker::QueryRemoteStat"
    class ClearMission(HookFactory):
        _name = "cGcMPMissionTracker::ClearMission"
    class OnPlayerLeftMission(HookFactory):
        _name = "cGcMPMissionTracker::OnPlayerLeftMission"
    class RemovePlayerFromMission(HookFactory):
        _name = "cGcMPMissionTracker::RemovePlayerFromMission"
    class QueryRemoteDiscoveredDiscoveries(HookFactory):
        _name = "cGcMPMissionTracker::QueryRemoteDiscoveredDiscoveries"
    class GetAccountIdWhoDiscovered(HookFactory):
        _name = "cGcMPMissionTracker::GetAccountIdWhoDiscovered"
    class DiscoveryDataSubmitted(HookFactory):
        _name = "cGcMPMissionTracker::DiscoveryDataSubmitted"
    class ReplicatePlayerStats(HookFactory):
        _name = "cGcMPMissionTracker::ReplicatePlayerStats"
    class ReplicateDiscoveries(HookFactory):
        _name = "cGcMPMissionTracker::ReplicateDiscoveries"
    class GetStatValue(HookFactory):
        _name = "cGcMPMissionTracker::GetStatValue"
    class RPCReceiveDiscoveries(HookFactory):
        _name = "cGcMPMissionTracker::RPCReceiveDiscoveries"
    class RPCReceiveExistingMissionOffer(HookFactory):
        _name = "cGcMPMissionTracker::RPCReceiveExistingMissionOffer"
    class RPCOnMissionStarted(HookFactory):
        _name = "cGcMPMissionTracker::RPCOnMissionStarted"
    class RPCPlayerLeftMission(HookFactory):
        _name = "cGcMPMissionTracker::RPCPlayerLeftMission"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcMPMissionTracker::OnNetworkPlayerStateEvent"
    class ClearPreMissionUA(HookFactory):
        _name = "cGcMPMissionTracker::ClearPreMissionUA"
    class GetPreMissionUA(HookFactory):
        _name = "cGcMPMissionTracker::GetPreMissionUA"

class cGcMsgBeacon:
    class RemoveMarker(HookFactory):
        _name = "cGcMsgBeacon::RemoveMarker"

class cGcMsgBeaconManager:
    class Data:
        class UploadBeacon(HookFactory):
            _name = "cGcMsgBeaconManager::Data::UploadBeacon"
        class Update(HookFactory):
            _name = "cGcMsgBeaconManager::Data::Update"
        class QueueBeaconForAsyncChecks(HookFactory):
            _name = "cGcMsgBeaconManager::Data::QueueBeaconForAsyncChecks"
        class SpawnBeacon(HookFactory):
            _name = "cGcMsgBeaconManager::Data::SpawnBeacon"
        class SubmitContentReport(HookFactory):
            _name = "cGcMsgBeaconManager::Data::SubmitContentReport"
        class FindBeaconsInRange(HookFactory):
            _name = "cGcMsgBeaconManager::Data::FindBeaconsInRange"

class cGcRepairTechComponent:
    class GetSavePosition(HookFactory):
        _name = "cGcRepairTechComponent::GetSavePosition"
    class OnAttached(HookFactory):
        _name = "cGcRepairTechComponent::OnAttached"
    class QueryHasRepaired(HookFactory):
        _name = "cGcRepairTechComponent::QueryHasRepaired"
    class GetTypedComponent(HookFactory):
        _name = "cGcRepairTechComponent::GetTypedComponent"
    class GetReturnPage(HookFactory):
        _name = "cGcRepairTechComponent::GetReturnPage"
    class ValidTech(HookFactory):
        _name = "cGcRepairTechComponent::ValidTech"
    class GenerateTechID(HookFactory):
        _name = "cGcRepairTechComponent::GenerateTechID"
    class Update(HookFactory):
        _name = "cGcRepairTechComponent::Update"
    class RepairItem(HookFactory):
        _name = "cGcRepairTechComponent::RepairItem"
    class ClearBlockedSlots(HookFactory):
        _name = "cGcRepairTechComponent::ClearBlockedSlots"
    class GetCurrentTech(HookFactory):
        _name = "cGcRepairTechComponent::GetCurrentTech"
    class IsInstallation(HookFactory):
        _name = "cGcRepairTechComponent::IsInstallation"
    class DeleteSavedState(HookFactory):
        _name = "cGcRepairTechComponent::DeleteSavedState"
    class ValidateRepairTechBuffer(HookFactory):
        _name = "cGcRepairTechComponent::ValidateRepairTechBuffer"
    class Save(HookFactory):
        _name = "cGcRepairTechComponent::Save"
    class GetPersistancyData(HookFactory):
        _name = "cGcRepairTechComponent::GetPersistancyData"
    class LaunchRepairInteraction(HookFactory):
        _name = "cGcRepairTechComponent::LaunchRepairInteraction"
    class GetModelViewerRenderData(HookFactory):
        _name = "cGcRepairTechComponent::GetModelViewerRenderData"

class ComponentInstancercGcRepairTechComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcRepairTechComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcRepairTechComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcRepairTechComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcRepairTechComponent::DestructInstance"

class cGcGeneratorUnitComponent:
    class Seed(HookFactory):
        _name = "cGcGeneratorUnitComponent::Seed"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcGeneratorUnitComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcGeneratorUnitComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcGeneratorUnitComponent::DefaultRenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcGeneratorUnitComponent::GetTypedComponent"
    class Prepare(HookFactory):
        _name = "cGcGeneratorUnitComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcGeneratorUnitComponent::Update"
    class OnAttached(HookFactory):
        _name = "cGcGeneratorUnitComponent::OnAttached"
    class LookupResourceId(HookFactory):
        _name = "cGcGeneratorUnitComponent::LookupResourceId"
    class GetSystemHooverActiveOutputSlotIndex(HookFactory):
        _name = "cGcGeneratorUnitComponent::GetSystemHooverActiveOutputSlotIndex"

class ComponentInstancercGcGeneratorUnitComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcGeneratorUnitComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcGeneratorUnitComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcGeneratorUnitComponent::DestructInstance"

class ComponentInstancercGcCreatureHarvesterComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureHarvesterComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureHarvesterComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureHarvesterComponent::ConstructInstance"

class HashStringForJSON(HookFactory):
    _templates = ("T0", )
    _name = "HashStringForJSON<{T0}>"

class RefreshComponentType(HookFactory):
    _templates = ("T0", )
    _name = "RefreshComponentType<{T0}>"

class cGcPlayerByteBeatLibrary:
    class AddToPlaylist(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::AddToPlaylist"
    class RemoveFromPlaylist(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::RemoveFromPlaylist"
        _overload: overloads.cGcPlayerByteBeatLibrary.RemoveFromPlaylist.overloads = "cGcPlayerByteBeatLibrary *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerByteBeatLibrary.RemoveFromPlaylist.overloads):
            cls._overload = overload_args
            return cls
    class MoveUpPlayList(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::MoveUpPlayList"
    class MoveDownPlayList(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::MoveDownPlayList"
    class GetPlaylistSize(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::GetPlaylistSize"
    class Update(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::Update"
    class GetSongFromId(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::GetSongFromId"
    class ActivateFrontEnd(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::ActivateFrontEnd"
    class IsSongValid(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::IsSongValid"
    class ClearSong(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::ClearSong"
    class RenderFrontEnd(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::RenderFrontEnd"
    class DoTransferPopup(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::DoTransferPopup"
    class Play(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::Play"
    class Stop(HookFactory):
        _name = "cGcPlayerByteBeatLibrary::Stop"

class cTkAnimPoseComponent:
    class GetTypedComponent(HookFactory):
        _name = "cTkAnimPoseComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkAnimPoseComponent::FindFirstTypedComponent"
    class OnAttached(HookFactory):
        _name = "cTkAnimPoseComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkAnimPoseComponent::Prepare"
    class Update(HookFactory):
        _name = "cTkAnimPoseComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cTkAnimPoseComponent::UpdateRender"
    class RenderNGui(HookFactory):
        _name = "cTkAnimPoseComponent::RenderNGui"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkAnimPoseComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkAnimPoseComponent::InitData"
    class Babify(HookFactory):
        _name = "cTkAnimPoseComponent::Babify"
    class ComputeCorrelationsFromExamples(HookFactory):
        _name = "cTkAnimPoseComponent::ComputeCorrelationsFromExamples"
    class CopyCorrelationsFromData(HookFactory):
        _name = "cTkAnimPoseComponent::CopyCorrelationsFromData"
    class CopyCorrelationsToData(HookFactory):
        _name = "cTkAnimPoseComponent::CopyCorrelationsToData"
    class GenGaussian(HookFactory):
        _name = "cTkAnimPoseComponent::GenGaussian"
    class GenerateExamples(HookFactory):
        _name = "cTkAnimPoseComponent::GenerateExamples"
    class GetNameOfStateVar(HookFactory):
        _name = "cTkAnimPoseComponent::GetNameOfStateVar"
    class LoadStateVectorFromExample(HookFactory):
        _name = "cTkAnimPoseComponent::LoadStateVectorFromExample"
    class Randomise(HookFactory):
        _name = "cTkAnimPoseComponent::Randomise"
    class RecomputeFromAnchors(HookFactory):
        _name = "cTkAnimPoseComponent::RecomputeFromAnchors"
    class SetAnimTime(HookFactory):
        _name = "cTkAnimPoseComponent::SetAnimTime"
    class ZeroCorrelations(HookFactory):
        _name = "cTkAnimPoseComponent::ZeroCorrelations"

class cGcCreatureEggComponent:
    class GetNumComponents(HookFactory):
        _name = "cGcCreatureEggComponent::GetNumComponents"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureEggComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureEggComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcCreatureEggComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcCreatureEggComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureEggComponent::Update"

class cGcPlayerCreatureOwnership:
    class Prepare(HookFactory):
        _name = "cGcPlayerCreatureOwnership::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerCreatureOwnership::Release"
    class GenerateTraits(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GenerateTraits"
    class GetNumberOfCreatures(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetNumberOfCreatures"
    class GetNumberOfUnlockedPetSlots(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetNumberOfUnlockedPetSlots"
    class AdoptCreature(HookFactory):
        _name = "cGcPlayerCreatureOwnership::AdoptCreature"
    class RemoveCreatureFromCollection(HookFactory):
        _name = "cGcPlayerCreatureOwnership::RemoveCreatureFromCollection"
    class CanConsiderSummoning(HookFactory):
        _name = "cGcPlayerCreatureOwnership::CanConsiderSummoning"
    class ShouldUseIndoorNavigation(HookFactory):
        _name = "cGcPlayerCreatureOwnership::ShouldUseIndoorNavigation"
    class GetNumCreaturesOwned(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetNumCreaturesOwned"
    class AreAnyEggsReadyToHatch(HookFactory):
        _name = "cGcPlayerCreatureOwnership::AreAnyEggsReadyToHatch"
    class CanSummon(HookFactory):
        _name = "cGcPlayerCreatureOwnership::CanSummon"
    class Update(HookFactory):
        _name = "cGcPlayerCreatureOwnership::Update"
    class GetEmoteArcTarget(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetEmoteArcTarget"
    class ShouldShowEmoteArc(HookFactory):
        _name = "cGcPlayerCreatureOwnership::ShouldShowEmoteArc"
    class GetPlacementOrigin(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetPlacementOrigin"
    class GetSpawnPostion(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetSpawnPostion"
    class GetModifiedBehaviourWeight(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetModifiedBehaviourWeight"
    class GetModifiedBehaviourCooldown(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetModifiedBehaviourCooldown"
    class UpdateMoodsOnActionComplete(HookFactory):
        _name = "cGcPlayerCreatureOwnership::UpdateMoodsOnActionComplete"
    class UpdateMoods(HookFactory):
        _name = "cGcPlayerCreatureOwnership::UpdateMoods"
    class GetPlayerCreatureName(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetPlayerCreatureName"
    class GetDominantMood(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetDominantMood"
    class GetPlayerCreatureMoodString(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetPlayerCreatureMoodString"
    class FormatTraitValueString(HookFactory):
        _name = "cGcPlayerCreatureOwnership::FormatTraitValueString"
    class GetPlayerCreatureTraitInfo(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetPlayerCreatureTraitInfo"
    class GetPlayerCreatureInfoBinocs(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetPlayerCreatureInfoBinocs"
    class SetCustomCreatureName(HookFactory):
        _name = "cGcPlayerCreatureOwnership::SetCustomCreatureName"
    class HatchPet(HookFactory):
        _name = "cGcPlayerCreatureOwnership::HatchPet"
    class AddEggToColection(HookFactory):
        _name = "cGcPlayerCreatureOwnership::AddEggToColection"
    class GetEggInfo(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetEggInfo"
    class IsPetInNativeBiome(HookFactory):
        _name = "cGcPlayerCreatureOwnership::IsPetInNativeBiome"
    class PassedEnoughTimeSinceLastEgg(HookFactory):
        _name = "cGcPlayerCreatureOwnership::PassedEnoughTimeSinceLastEgg"
    class GetTimeUntilNextEgg(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetTimeUntilNextEgg"
    class HasPendingEggInTheWorld(HookFactory):
        _name = "cGcPlayerCreatureOwnership::HasPendingEggInTheWorld"
    class GetStaminaModifiers(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetStaminaModifiers"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerCreatureOwnership::RenderNGui"
    class GetSpecialChatType(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetSpecialChatType"
    class GetCurrentCreatureStableTimeSeed(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetCurrentCreatureStableTimeSeed"
    class GetMoodValue(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetMoodValue"
        _overload: overloads.cGcPlayerCreatureOwnership.GetMoodValue.overloads = "cGcPlayerCreatureOwnership *, int, ePetMood, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerCreatureOwnership.GetMoodValue.overloads):
            cls._overload = overload_args
            return cls
    class GetSummonedIndex(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetSummonedIndex"
    class GetSummonedCreatureSpecialChatType(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetSummonedCreatureSpecialChatType"
    class GetCurrentMoodString(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetCurrentMoodString"
    class GetTraitValue(HookFactory):
        _name = "cGcPlayerCreatureOwnership::GetTraitValue"
    class ShowEmoteArc(HookFactory):
        _name = "cGcPlayerCreatureOwnership::ShowEmoteArc"

class cGcPlayerDiscoveryHelper:
    class TriggerEvent(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::TriggerEvent"
    class DiscoverPlanet(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::DiscoverPlanet"
    class RecordPlanetStats(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::RecordPlanetStats"
    class DiscoverSystem(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::DiscoverSystem"
    class DiscoveryUnitReward(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::DiscoveryUnitReward"
    class GetDiscoveryWorth(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::GetDiscoveryWorth"
    class GenerateCreatureMissions(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::GenerateCreatureMissions"
    class CheckEncyclopediaData(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::CheckEncyclopediaData"
    class CalculateCompletedDiscoveriesOnPlanet(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::CalculateCompletedDiscoveriesOnPlanet"
    class SubmitCurrentSolarSystemDiscoveryData(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::SubmitCurrentSolarSystemDiscoveryData"
    class ShowPlanetDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowPlanetDiscoveryMessage"
    class ShowPlanetInfoPanel(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowPlanetInfoPanel"
    class ShowSystemDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowSystemDiscoveryMessage"
    class ShowPlayerBaseDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowPlayerBaseDiscoveryMessage"
    class ShowBlackHoleDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowBlackHoleDiscoveryMessage"
    class ShowAtlasStationDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowAtlasStationDiscoveryMessage"
    class ShowPostBlackHoleWarpDiscoveryMessage(HookFactory):
        _name = "cGcPlayerDiscoveryHelper::ShowPostBlackHoleWarpDiscoveryMessage"

class cTkComboBoxPopup:
    class Init(HookFactory):
        _name = "cTkComboBoxPopup::Init"
    class Render(HookFactory):
        _name = "cTkComboBoxPopup::Render"

class GcDiscoverySearchConstraints:
    class FilterOnType:
        class Accept(HookFactory):
            _name = "GcDiscoverySearchConstraints::FilterOnType::Accept"
    class FilterPlanet:
        class Accept(HookFactory):
            _name = "GcDiscoverySearchConstraints::FilterPlanet::Accept"
    class FilterGroupOR:
        class Accept(HookFactory):
            _name = "GcDiscoverySearchConstraints::FilterGroupOR::Accept"
    class FilterSolarSystem:
        class Accept(HookFactory):
            _name = "GcDiscoverySearchConstraints::FilterSolarSystem::Accept"

class cGcEcosystem:
    class GetCreatureData(HookFactory):
        _name = "cGcEcosystem::GetCreatureData"
    class GetSpawnData(HookFactory):
        _name = "cGcEcosystem::GetSpawnData"
    class GetNumCreatures(HookFactory):
        _name = "cGcEcosystem::GetNumCreatures"
    class Construct(HookFactory):
        _name = "cGcEcosystem::Construct"
    class Release(HookFactory):
        _name = "cGcEcosystem::Release"
    class Update(HookFactory):
        _name = "cGcEcosystem::Update"
    class GetPlayerExperienceSwarmToJoin(HookFactory):
        _name = "cGcEcosystem::GetPlayerExperienceSwarmToJoin"
    class GetFreePetSwarm(HookFactory):
        _name = "cGcEcosystem::GetFreePetSwarm"
    class CanSpawnCreatures(HookFactory):
        _name = "cGcEcosystem::CanSpawnCreatures"
    class RegisterCreature(HookFactory):
        _name = "cGcEcosystem::RegisterCreature"
    class UnregisterCreature(HookFactory):
        _name = "cGcEcosystem::UnregisterCreature"
    class RenderNGui(HookFactory):
        _name = "cGcEcosystem::RenderNGui"
    class RenderCreatureInspectorNGui(HookFactory):
        _name = "cGcEcosystem::RenderCreatureInspectorNGui"
    class RemoveNode(HookFactory):
        _name = "cGcEcosystem::RemoveNode"
    class RemoveCreaturesInArea(HookFactory):
        _name = "cGcEcosystem::RemoveCreaturesInArea"
    class Remove(HookFactory):
        _name = "cGcEcosystem::Remove"
    class GetBehaviourTreeData(HookFactory):
        _name = "cGcEcosystem::GetBehaviourTreeData"
    class LoadAndGetCreatureData(HookFactory):
        _name = "cGcEcosystem::LoadAndGetCreatureData"
    class RenderCreatureInspectorNGuiCallback(HookFactory):
        _name = "cGcEcosystem::RenderCreatureInspectorNGuiCallback"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcEcosystem::RenderNGuiCallback"

class cGcNetworkFleetSyncRequestMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFleetSyncRequestMessage::SerializeOrDeserialize"

class cGcPurchasableFrigateTracker:
    class Update(HookFactory):
        _name = "cGcPurchasableFrigateTracker::Update"

class cGcFrigateOccupationTracker:
    class Update(HookFactory):
        _name = "cGcFrigateOccupationTracker::Update"

class cGcPlayerFleetManager:
    class SubstituteUADetailsInString(HookFactory):
        _name = "cGcPlayerFleetManager::SubstituteUADetailsInString"
    class GetClosestExpeditionDurationFromNumberOfEvents(HookFactory):
        _name = "cGcPlayerFleetManager::GetClosestExpeditionDurationFromNumberOfEvents"
    class cGcPlayerFleetManager(HookFactory):
        _name = "cGcPlayerFleetManager::cGcPlayerFleetManager"
    class OnLocalPlayerDied(HookFactory):
        _name = "cGcPlayerFleetManager::OnLocalPlayerDied"
    class IsRemotelyOwned(HookFactory):
        _name = "cGcPlayerFleetManager::IsRemotelyOwned"
    class GenerateFleetDebug(HookFactory):
        _name = "cGcPlayerFleetManager::GenerateFleetDebug"
    class SortFrigateList(HookFactory):
        _name = "cGcPlayerFleetManager::SortFrigateList"
    class Construct(HookFactory):
        _name = "cGcPlayerFleetManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcPlayerFleetManager::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerFleetManager::Release"
    class Destruct(HookFactory):
        _name = "cGcPlayerFleetManager::Destruct"
    class CacheShips(HookFactory):
        _name = "cGcPlayerFleetManager::CacheShips"
    class Save(HookFactory):
        _name = "cGcPlayerFleetManager::Save"
    class Load(HookFactory):
        _name = "cGcPlayerFleetManager::Load"
    class UpdateFrigateSpawnLocations(HookFactory):
        _name = "cGcPlayerFleetManager::UpdateFrigateSpawnLocations"
    class SetShouldAlertPlayerToPurchasableFrigates(HookFactory):
        _name = "cGcPlayerFleetManager::SetShouldAlertPlayerToPurchasableFrigates"
    class GetShouldAlertPlayerToPurchasableFrigates(HookFactory):
        _name = "cGcPlayerFleetManager::GetShouldAlertPlayerToPurchasableFrigates"
    class CanRecruitNewFrigates(HookFactory):
        _name = "cGcPlayerFleetManager::CanRecruitNewFrigates"
    class GetNumberOfFrigates(HookFactory):
        _name = "cGcPlayerFleetManager::GetNumberOfFrigates"
    class GetNumberOfFrigatesNotOnActiveExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::GetNumberOfFrigatesNotOnActiveExpedition"
    class AddNewFrigateToFleet(HookFactory):
        _name = "cGcPlayerFleetManager::AddNewFrigateToFleet"
    class AddPurchasedFrigateToFleet(HookFactory):
        _name = "cGcPlayerFleetManager::AddPurchasedFrigateToFleet"
    class RequestSetFrigateExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RequestSetFrigateExpedition"
    class RequestRemoveFrigateFromFleet(HookFactory):
        _name = "cGcPlayerFleetManager::RequestRemoveFrigateFromFleet"
    class GetFrigateIndex(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateIndex"
    class GetFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigate"
    class GetFrigateFromSeed(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateFromSeed"
    class GetFrigateOccupiedByLocalPlayer(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateOccupiedByLocalPlayer"
    class GetFrigateAssignedToPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateAssignedToPirateDefence"
    class IsPointInsideFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::IsPointInsideFrigate"
        _overload: overloads.cGcPlayerFleetManager.IsPointInsideFrigate.overloads = "cGcPlayerFleetManager *, const cTkVector3 *, const cGcFleetFrigate *, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerFleetManager.IsPointInsideFrigate.overloads):
            cls._overload = overload_args
            return cls
    class GetFrigateFromAIShipSpawn(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateFromAIShipSpawn"
    class GetFrigateFromNode(HookFactory):
        _name = "cGcPlayerFleetManager::GetFrigateFromNode"
    class GetAvailableFrigateWithHighestStat(HookFactory):
        _name = "cGcPlayerFleetManager::GetAvailableFrigateWithHighestStat"
    class RequestAssignFrigateToPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::RequestAssignFrigateToPirateDefence"
    class RequestCollectCargo(HookFactory):
        _name = "cGcPlayerFleetManager::RequestCollectCargo"
    class GetStoredIncome(HookFactory):
        _name = "cGcPlayerFleetManager::GetStoredIncome"
    class ClearStoredIncome(HookFactory):
        _name = "cGcPlayerFleetManager::ClearStoredIncome"
    class GetTrait(HookFactory):
        _name = "cGcPlayerFleetManager::GetTrait"
    class CreateExpeditionInternal(HookFactory):
        _name = "cGcPlayerFleetManager::CreateExpeditionInternal"
    class ChooseNewTraitForFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::ChooseNewTraitForFrigate"
    class RequestSelectExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RequestSelectExpedition"
    class RequestStartExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RequestStartExpedition"
    class RequestEndExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RequestEndExpedition"
    class GetNumberOfActiveExpeditions(HookFactory):
        _name = "cGcPlayerFleetManager::GetNumberOfActiveExpeditions"
    class GetActiveExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::GetActiveExpedition"
    class GetAvailableExpeditionTerminal(HookFactory):
        _name = "cGcPlayerFleetManager::GetAvailableExpeditionTerminal"
    class GetExpeditionTerminalFromPosition(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionTerminalFromPosition"
    class GetExpeditionFromTerminalPosition(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionFromTerminalPosition"
    class GetExpeditionFromSeed(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionFromSeed"
    class GetExpeditionInUA(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionInUA"
    class ChooseNewUAForExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::ChooseNewUAForExpedition"
    class RequestRemoveExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RequestRemoveExpedition"
    class RequestContinueWithDamagedFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::RequestContinueWithDamagedFrigate"
    class RequestSendDamagedFrigateHome(HookFactory):
        _name = "cGcPlayerFleetManager::RequestSendDamagedFrigateHome"
    class AlertPlayerToInterventionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::AlertPlayerToInterventionEvent"
    class OnPlayerDeclinedIntervention(HookFactory):
        _name = "cGcPlayerFleetManager::OnPlayerDeclinedIntervention"
    class OnPlayerAcceptedIntervention(HookFactory):
        _name = "cGcPlayerFleetManager::OnPlayerAcceptedIntervention"
    class GetExpeditionInterventionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionInterventionEvent"
    class GetExpeditionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionEvent"
    class ChooseExpeditionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::ChooseExpeditionEvent"
    class SpawnShipForFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::SpawnShipForFrigate"
    class DespawnShipForFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::DespawnShipForFrigate"
    class SpawnFleet(HookFactory):
        _name = "cGcPlayerFleetManager::SpawnFleet"
    class SpawnFleetImmediately(HookFactory):
        _name = "cGcPlayerFleetManager::SpawnFleetImmediately"
    class DespawnFleet(HookFactory):
        _name = "cGcPlayerFleetManager::DespawnFleet"
    class Update(HookFactory):
        _name = "cGcPlayerFleetManager::Update"
    class CanPurchaseFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::CanPurchaseFrigate"
    class IsPrimaryCategoryForExpeditionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::IsPrimaryCategoryForExpeditionEvent"
    class ApplyFleetFrigatesSyncMessage(HookFactory):
        _name = "cGcPlayerFleetManager::ApplyFleetFrigatesSyncMessage"
    class OnRemotePlayerRequestedFleetSync(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRequestedFleetSync"
    class AddFrigateToFleet(HookFactory):
        _name = "cGcPlayerFleetManager::AddFrigateToFleet"
    class ShuffleFrigateTraitsWithProduct(HookFactory):
        _name = "cGcPlayerFleetManager::ShuffleFrigateTraitsWithProduct"
    class CreateFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::CreateFrigate"
    class UpdateAvailableExpeditions(HookFactory):
        _name = "cGcPlayerFleetManager::UpdateAvailableExpeditions"
    class SpawnShipForFrigateImmediately(HookFactory):
        _name = "cGcPlayerFleetManager::SpawnShipForFrigateImmediately"
    class DespawnShipForFrigateImmediately(HookFactory):
        _name = "cGcPlayerFleetManager::DespawnShipForFrigateImmediately"
    class RemoveFrigateFromFleetImmediately(HookFactory):
        _name = "cGcPlayerFleetManager::RemoveFrigateFromFleetImmediately"
    class SpawnFrigateForPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::SpawnFrigateForPirateDefence"
    class SelectExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::SelectExpedition"
    class RemoveExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::RemoveExpedition"
    class GetSequentialExpeditionEvent(HookFactory):
        _name = "cGcPlayerFleetManager::GetSequentialExpeditionEvent"
    class GetExpeditionSpawnPosition(HookFactory):
        _name = "cGcPlayerFleetManager::GetExpeditionSpawnPosition"
    class UpdateActiveExpeditions(HookFactory):
        _name = "cGcPlayerFleetManager::UpdateActiveExpeditions"
    class SetupAsteroidInvalidArea(HookFactory):
        _name = "cGcPlayerFleetManager::SetupAsteroidInvalidArea"
    class UpdateForCurrentUAAndDay(HookFactory):
        _name = "cGcPlayerFleetManager::UpdateForCurrentUAAndDay"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcPlayerFleetManager::OnNetworkPlayerStateEvent"
    class OnRemotePlayerRepairedFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRepairedFrigate"
    class OnRemotePlayerRequestContinueWithDamagedFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRequestContinueWithDamagedFrigate"
    class OnRemotePlayerRequestSendDamagedFrigateHome(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRequestSendDamagedFrigateHome"
    class OnRemotePlayerCollectedCargo(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerCollectedCargo"
    class OnRemotePlayerStartExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerStartExpedition"
    class OnRemotePlayerEndExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerEndExpedition"
    class OnRemoteInterventionResponse(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemoteInterventionResponse"
    class OnRemotePlayerRemovedFrigate(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRemovedFrigate"
    class OnRemotePlayerSelectedExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerSelectedExpedition"
    class OnRemotePlayerRemovedExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerRemovedExpedition"
    class OnRemotePlayerSetFrigateExpedition(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerSetFrigateExpedition"
    class OnExpeditionChangedUA(HookFactory):
        _name = "cGcPlayerFleetManager::OnExpeditionChangedUA"
    class OnRemotePlayerAssignedFrigateToPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerAssignedFrigateToPirateDefence"
    class OnRemotePlayerSpawnedPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerSpawnedPirateDefence"
    class OnRemotePlayerUnassignedFrigateFromPirateDefence(HookFactory):
        _name = "cGcPlayerFleetManager::OnRemotePlayerUnassignedFrigateFromPirateDefence"
    class GetRandomEventLocID(HookFactory):
        _name = "cGcPlayerFleetManager::GetRandomEventLocID"

class cGcExperienceSpawn:
    class cGcExperienceSpawn(HookFactory):
        _name = "cGcExperienceSpawn::cGcExperienceSpawn"
        _overload: overloads.cGcExperienceSpawn.cGcExperienceSpawn.overloads = "cGcExperienceSpawn *, cGcExperienceSpawn *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcExperienceSpawn.cGcExperienceSpawn.overloads):
            cls._overload = overload_args
            return cls
    class IsActive(HookFactory):
        _name = "cGcExperienceSpawn::IsActive"
    class IsInteresting(HookFactory):
        _name = "cGcExperienceSpawn::IsInteresting"
    class UpdateInterestTime(HookFactory):
        _name = "cGcExperienceSpawn::UpdateInterestTime"
    class UpdateMarker(HookFactory):
        _name = "cGcExperienceSpawn::UpdateMarker"
    class UpdateShipMarker(HookFactory):
        _name = "cGcExperienceSpawn::UpdateShipMarker"
    class HasFinished(HookFactory):
        _name = "cGcExperienceSpawn::HasFinished"
    class GetPos(HookFactory):
        _name = "cGcExperienceSpawn::GetPos"
    class Release(HookFactory):
        _name = "cGcExperienceSpawn::Release"
    class CreateInvalidArea(HookFactory):
        _name = "cGcExperienceSpawn::CreateInvalidArea"

class CAkMidiDeviceCtx:
    class GetMidiMgr(HookFactory):
        _name = "CAkMidiDeviceCtx::GetMidiMgr"
    class CAkMidiDeviceCtx(HookFactory):
        _name = "CAkMidiDeviceCtx::CAkMidiDeviceCtx"
    class AddEvent(HookFactory):
        _name = "CAkMidiDeviceCtx::AddEvent"
    class HasMoreEvents(HookFactory):
        _name = "CAkMidiDeviceCtx::HasMoreEvents"
    class Init(HookFactory):
        _name = "CAkMidiDeviceCtx::Init"
    class IsCtxFinished(HookFactory):
        _name = "CAkMidiDeviceCtx::IsCtxFinished"
    class OnFrame(HookFactory):
        _name = "CAkMidiDeviceCtx::OnFrame"
    class Pause(HookFactory):
        _name = "CAkMidiDeviceCtx::Pause"
    class ResolveMidiTarget(HookFactory):
        _name = "CAkMidiDeviceCtx::ResolveMidiTarget"
    class Resume(HookFactory):
        _name = "CAkMidiDeviceCtx::Resume"
    class Term(HookFactory):
        _name = "CAkMidiDeviceCtx::Term"

class cGcAsteroidManager:
    class RemoveInvalidArea(HookFactory):
        _name = "cGcAsteroidManager::RemoveInvalidArea"
    class cGcAsteroidManager(HookFactory):
        _name = "cGcAsteroidManager::cGcAsteroidManager"
    class Construct(HookFactory):
        _name = "cGcAsteroidManager::Construct"
    class Prepare(HookFactory):
        _name = "cGcAsteroidManager::Prepare"
    class Release(HookFactory):
        _name = "cGcAsteroidManager::Release"
    class Generate(HookFactory):
        _name = "cGcAsteroidManager::Generate"
    class RenderImGui(HookFactory):
        _name = "cGcAsteroidManager::RenderImGui"
    class Update(HookFactory):
        _name = "cGcAsteroidManager::Update"
    class UpdateRender(HookFactory):
        _name = "cGcAsteroidManager::UpdateRender"
    class AddInvalidArea(HookFactory):
        _name = "cGcAsteroidManager::AddInvalidArea"
    class RefreshAsteroids(HookFactory):
        _name = "cGcAsteroidManager::RefreshAsteroids"
    class IsPointWithinAsteroidField(HookFactory):
        _name = "cGcAsteroidManager::IsPointWithinAsteroidField"
    class GetFuelAsteroidBodies(HookFactory):
        _name = "cGcAsteroidManager::GetFuelAsteroidBodies"
    class HitAsteroid(HookFactory):
        _name = "cGcAsteroidManager::HitAsteroid"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcAsteroidManager::RenderImGuiCallback"

class cTkFibonacciSphere:
    class Generate(HookFactory):
        _name = "cTkFibonacciSphere::Generate"
    class GenerateCylinder(HookFactory):
        _name = "cTkFibonacciSphere::GenerateCylinder"

class cGcPlayerCommunicator:
    class HasSignal(HookFactory):
        _name = "cGcPlayerCommunicator::HasSignal"
    class IsActive(HookFactory):
        _name = "cGcPlayerCommunicator::IsActive"
    class HasHUDMessage(HookFactory):
        _name = "cGcPlayerCommunicator::HasHUDMessage"
    class Open(HookFactory):
        _name = "cGcPlayerCommunicator::Open"
    class Update(HookFactory):
        _name = "cGcPlayerCommunicator::Update"
    class SetHologramVisible(HookFactory):
        _name = "cGcPlayerCommunicator::SetHologramVisible"
    class IsHologramVisible(HookFactory):
        _name = "cGcPlayerCommunicator::IsHologramVisible"
    class SetSignal(HookFactory):
        _name = "cGcPlayerCommunicator::SetSignal"
    class CanUseSignal(HookFactory):
        _name = "cGcPlayerCommunicator::CanUseSignal"
    class RemoveSignal(HookFactory):
        _name = "cGcPlayerCommunicator::RemoveSignal"
        _overload: overloads.cGcPlayerCommunicator.RemoveSignal.overloads = "cGcPlayerCommunicator *, const TkID<256>"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerCommunicator.RemoveSignal.overloads):
            cls._overload = overload_args
            return cls
    class GetResource(HookFactory):
        _name = "cGcPlayerCommunicator::GetResource"
    class CalcSpawnMatrix(HookFactory):
        _name = "cGcPlayerCommunicator::CalcSpawnMatrix"
    class HasSignalFromAttachment(HookFactory):
        _name = "cGcPlayerCommunicator::HasSignalFromAttachment"

class cGcPlayerLogBook:
    class Clear(HookFactory):
        _name = "cGcPlayerLogBook::Clear"

class cGcPlayerMultitoolOwnership:
    class Release(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::Release"
    class LoadMultitool(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::LoadMultitool"
    class SaveMultitool(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::SaveMultitool"
    class GetPrimaryMultitoolIndex(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::GetPrimaryMultitoolIndex"
    class GetNumberOfMultitools(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::GetNumberOfMultitools"
    class AddMultitoolToCollection(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::AddMultitoolToCollection"
    class UpdateInventory(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::UpdateInventory"
    class GetThumbnail(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::GetThumbnail"
    class GetName(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::GetName"
    class SetPrimaryMultitoolIndex(HookFactory):
        _name = "cGcPlayerMultitoolOwnership::SetPrimaryMultitoolIndex"
    class sMultitoolInfo:
        class sMultitoolInfo(HookFactory):
            _name = "cGcPlayerMultitoolOwnership::sMultitoolInfo::sMultitoolInfo"

class cGcPlayerNPCWorkers:
    class Update(HookFactory):
        _name = "cGcPlayerNPCWorkers::Update"
    class TrySetWokerBaseIndexFromSaveData(HookFactory):
        _name = "cGcPlayerNPCWorkers::TrySetWokerBaseIndexFromSaveData"
    class GetHabitationTypeFromInteractionType(HookFactory):
        _name = "cGcPlayerNPCWorkers::GetHabitationTypeFromInteractionType"
    class FindClosestBaseForWorker(HookFactory):
        _name = "cGcPlayerNPCWorkers::FindClosestBaseForWorker"
    class HasWorkerStation(HookFactory):
        _name = "cGcPlayerNPCWorkers::HasWorkerStation"
    class HireWorker(HookFactory):
        _name = "cGcPlayerNPCWorkers::HireWorker"
    class SetWorkerBaseIndex(HookFactory):
        _name = "cGcPlayerNPCWorkers::SetWorkerBaseIndex"
    class GetStationIDFromType(HookFactory):
        _name = "cGcPlayerNPCWorkers::GetStationIDFromType"

class cGcShipOwnershipComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcShipOwnershipComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcShipOwnershipComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcShipOwnershipComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcShipOwnershipComponent::InitData"
    class GetShipClass(HookFactory):
        _name = "cGcShipOwnershipComponent::GetShipClass"
    class OnAttached(HookFactory):
        _name = "cGcShipOwnershipComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcShipOwnershipComponent::Prepare"
    class CreateShipComponent(HookFactory):
        _name = "cGcShipOwnershipComponent::CreateShipComponent"
    class Update(HookFactory):
        _name = "cGcShipOwnershipComponent::Update"
    class UpdateRemoteLanding(HookFactory):
        _name = "cGcShipOwnershipComponent::UpdateRemoteLanding"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcShipOwnershipComponent::NetSerializeOnInit"
    class NetSerialize(HookFactory):
        _name = "cGcShipOwnershipComponent::NetSerialize"
    class Purchase(HookFactory):
        _name = "cGcShipOwnershipComponent::Purchase"
    class Abandon(HookFactory):
        _name = "cGcShipOwnershipComponent::Abandon"
    class GetActiveDockingOutpost(HookFactory):
        _name = "cGcShipOwnershipComponent::GetActiveDockingOutpost"

class ComponentLoadInstancercGcShipOwnershipComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcShipOwnershipComponent::Register"

class cGcShootableComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcShootableComponent::GetTypedComponent"
        _overload: overloads.cGcShootableComponent.GetTypedComponent.overloads = "cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcShootableComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetTypeNameHash64(HookFactory):
        _name = "cGcShootableComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcShootableComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcShootableComponent::DefaultRenderNGui"
    class GetHealth(HookFactory):
        _name = "cGcShootableComponent::GetHealth"
    class GetHealthPercent(HookFactory):
        _name = "cGcShootableComponent::GetHealthPercent"
    class TakesDefaultObjectDamage(HookFactory):
        _name = "cGcShootableComponent::TakesDefaultObjectDamage"
    class GetInterceptPoint(HookFactory):
        _name = "cGcShootableComponent::GetInterceptPoint"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcShootableComponent::GetPhysicsMatrix"
    class IsDead(HookFactory):
        _name = "cGcShootableComponent::IsDead"
    class GetNumComponents(HookFactory):
        _name = "cGcShootableComponent::GetNumComponents"
    class SetStartingHealth(HookFactory):
        _name = "cGcShootableComponent::SetStartingHealth"
    class GetDeathHit(HookFactory):
        _name = "cGcShootableComponent::GetDeathHit"
    class SetNumHits(HookFactory):
        _name = "cGcShootableComponent::SetNumHits"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcShootableComponent::FindFirstTypedComponent"
    class AllowComponent(HookFactory):
        _name = "cGcShootableComponent::AllowComponent"
    class OnAttached(HookFactory):
        _name = "cGcShootableComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcShootableComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcShootableComponent::Update"
    class Release(HookFactory):
        _name = "cGcShootableComponent::Release"
    class OnHit(HookFactory):
        _name = "cGcShootableComponent::OnHit"
    class AddHealth(HookFactory):
        _name = "cGcShootableComponent::AddHealth"
    class RegisterCallback(HookFactory):
        _name = "cGcShootableComponent::RegisterCallback"
    class IsAutoAimTarget(HookFactory):
        _name = "cGcShootableComponent::IsAutoAimTarget"
    class CalculateInterceptFraction(HookFactory):
        _name = "cGcShootableComponent::CalculateInterceptFraction"
    class GetCriticalHitInfo(HookFactory):
        _name = "cGcShootableComponent::GetCriticalHitInfo"
    class RenderNGui(HookFactory):
        _name = "cGcShootableComponent::RenderNGui"
    class CanBeDamaged(HookFactory):
        _name = "cGcShootableComponent::CanBeDamaged"
    class IsCriticalHit(HookFactory):
        _name = "cGcShootableComponent::IsCriticalHit"
    class ApplyDamageMultiplier(HookFactory):
        _name = "cGcShootableComponent::ApplyDamageMultiplier"
    class UpdateAttackerInfo(HookFactory):
        _name = "cGcShootableComponent::UpdateAttackerInfo"
    class HighlightArmour(HookFactory):
        _name = "cGcShootableComponent::HighlightArmour"
    class Receive(HookFactory):
        _name = "cGcShootableComponent::Receive"
    class CalculateInterceptPoint(HookFactory):
        _name = "cGcShootableComponent::CalculateInterceptPoint"
    class AdjustforGravity(HookFactory):
        _name = "cGcShootableComponent::AdjustforGravity"

class ComponentInstancercGcShootableComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcShootableComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcShootableComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcShootableComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcShootableComponent::DestructInstance"

class cGcNetworkComponent:
    class cGcNetworkComponent(HookFactory):
        _name = "cGcNetworkComponent::cGcNetworkComponent"
    class SendAll(HookFactory):
        _name = "cGcNetworkComponent::SendAll"
        _overload: overloads.cGcNetworkComponent.SendAll.overloads = "cGcNetworkComponent *, unsigned __int8 *, unsigned int, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNetworkComponent.SendAll.overloads):
            cls._overload = overload_args
            return cls
    class SurveyAll(HookFactory):
        _name = "cGcNetworkComponent::SurveyAll"
    class GetSurveyState(HookFactory):
        _name = "cGcNetworkComponent::GetSurveyState"
    class ProcessSurveyResponses(HookFactory):
        _name = "cGcNetworkComponent::ProcessSurveyResponses"
    class ClearSurvey(HookFactory):
        _name = "cGcNetworkComponent::ClearSurvey"
    class HandleComponentMessage(HookFactory):
        _name = "cGcNetworkComponent::HandleComponentMessage"
    class CreateMessage(HookFactory):
        _name = "cGcNetworkComponent::CreateMessage"
    class CreateSurvey(HookFactory):
        _name = "cGcNetworkComponent::CreateSurvey"

class cGcPlayerSquadronOwnership:
    class Prepare(HookFactory):
        _name = "cGcPlayerSquadronOwnership::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerSquadronOwnership::Release"
    class Update(HookFactory):
        _name = "cGcPlayerSquadronOwnership::Update"
    class IsSquadronAvailable(HookFactory):
        _name = "cGcPlayerSquadronOwnership::IsSquadronAvailable"
    class IsSquadronActive(HookFactory):
        _name = "cGcPlayerSquadronOwnership::IsSquadronActive"
    class TrySummonSquadron(HookFactory):
        _name = "cGcPlayerSquadronOwnership::TrySummonSquadron"
    class RequestDismissSquadron(HookFactory):
        _name = "cGcPlayerSquadronOwnership::RequestDismissSquadron"
    class SummonSquadron(HookFactory):
        _name = "cGcPlayerSquadronOwnership::SummonSquadron"
    class HasPilotInSlot(HookFactory):
        _name = "cGcPlayerSquadronOwnership::HasPilotInSlot"
    class SetPilotSlotUnlocked(HookFactory):
        _name = "cGcPlayerSquadronOwnership::SetPilotSlotUnlocked"
    class RecruitPilot(HookFactory):
        _name = "cGcPlayerSquadronOwnership::RecruitPilot"
    class RetirePilot(HookFactory):
        _name = "cGcPlayerSquadronOwnership::RetirePilot"
    class HasUnusedPilotSlot(HookFactory):
        _name = "cGcPlayerSquadronOwnership::HasUnusedPilotSlot"
    class IsPilotInSquad(HookFactory):
        _name = "cGcPlayerSquadronOwnership::IsPilotInSquad"
    class GetPilotRace(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetPilotRace"
    class GetSpaceshipName(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetSpaceshipName"
    class GetPilotName(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetPilotName"
    class GetPilotRank(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetPilotRank"
    class GeneratePilotRank(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GeneratePilotRank"
    class GetPilotTraitInfo(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetPilotTraitInfo"
    class GeneratePilotTraitInfo(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GeneratePilotTraitInfo"
    class GetSquadronSize(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetSquadronSize"
    class GetShipFollowOffset(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetShipFollowOffset"
    class GetShipFollowPos(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetShipFollowPos"
    class SpawnSquadronShip(HookFactory):
        _name = "cGcPlayerSquadronOwnership::SpawnSquadronShip"
    class GetSpawnMatrix(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetSpawnMatrix"
    class UpdateSquadronSummoning(HookFactory):
        _name = "cGcPlayerSquadronOwnership::UpdateSquadronSummoning"
    class UpdateSquadronShipSpawning(HookFactory):
        _name = "cGcPlayerSquadronOwnership::UpdateSquadronShipSpawning"
    class GetNumActiveShips(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GetNumActiveShips"
    class ReleaseSquadron(HookFactory):
        _name = "cGcPlayerSquadronOwnership::ReleaseSquadron"
    class GeneratePilotTraitGrade(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GeneratePilotTraitGrade"
    class GeneratePilotTraitsMasterSeed(HookFactory):
        _name = "cGcPlayerSquadronOwnership::GeneratePilotTraitsMasterSeed"

class cTkTextureResource:
    class cTkTextureResource(HookFactory):
        _name = "cTkTextureResource::cTkTextureResource"
    class ClassPointerCreate(HookFactory):
        _name = "cTkTextureResource::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkTextureResource::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkTextureResource::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkTextureResource::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkTextureResource::SetDefaults"

class cGcVehicleLocation:
    class GetSpawnTransform(HookFactory):
        _name = "cGcVehicleLocation::GetSpawnTransform"

class cGcSynchronisedStateManager:
    class LoadBuffer(HookFactory):
        _templates = ("T0", )
        _name = "cGcSynchronisedStateManager::LoadBuffer<{T0}>"
    class sBufferTypeSet:
        class sBufferTypeSet(HookFactory):
            _name = "cGcSynchronisedStateManager::sBufferTypeSet::sBufferTypeSet"
    class Clear(HookFactory):
        _name = "cGcSynchronisedStateManager::Clear"
    class HandleHashMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::HandleHashMessage"
    class HandleDataMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::HandleDataMessage"
    class HandleEditMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::HandleEditMessage"
    class SendHashMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::SendHashMessage"
    class SendChunkDataMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::SendChunkDataMessage"
    class SendDeleteBufferMessage(HookFactory):
        _name = "cGcSynchronisedStateManager::SendDeleteBufferMessage"
    class CreateBuffer(HookFactory):
        _name = "cGcSynchronisedStateManager::CreateBuffer"
    class DestroyBuffer(HookFactory):
        _name = "cGcSynchronisedStateManager::DestroyBuffer"
    class GetOrLoadAddress(HookFactory):
        _name = "cGcSynchronisedStateManager::GetOrLoadAddress"
    class LoadAddress(HookFactory):
        _name = "cGcSynchronisedStateManager::LoadAddress"
    class FindExternalBufferIndex(HookFactory):
        _name = "cGcSynchronisedStateManager::FindExternalBufferIndex"
    class GetAllPlayers(HookFactory):
        _name = "cGcSynchronisedStateManager::GetAllPlayers"
    class StoreData(HookFactory):
        _templates = ("T0", )
        _name = "cGcSynchronisedStateManager::StoreData<{T0}>"
    class ClearData(HookFactory):
        _templates = ("T0", )
        _name = "cGcSynchronisedStateManager::ClearData<{T0}>"
    class QueryData(HookFactory):
        _templates = ("T0", )
        _name = "cGcSynchronisedStateManager::QueryData<{T0}>"

class LogBookMessage:
    class LogBookMessage(HookFactory):
        _name = "LogBookMessage::LogBookMessage"

class cTkAnimLayerHandle:
    class IsValid(HookFactory):
        _name = "cTkAnimLayerHandle::IsValid"

class cGcSquadronPilotInfo:
    class RequestLoadResources(HookFactory):
        _name = "cGcSquadronPilotInfo::RequestLoadResources"
    class Load(HookFactory):
        _name = "cGcSquadronPilotInfo::Load"
    class Prepare(HookFactory):
        _name = "cGcSquadronPilotInfo::Prepare"
    class Release(HookFactory):
        _name = "cGcSquadronPilotInfo::Release"
    class UpdateResourceLoading(HookFactory):
        _name = "cGcSquadronPilotInfo::UpdateResourceLoading"

class cGcTechnologyAttachmentComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::Update"
    class IsActive(HookFactory):
        _name = "cGcTechnologyAttachmentComponent::IsActive"

class ComponentInstancercGcTechnologyAttachmentComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcTechnologyAttachmentComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcTechnologyAttachmentComponent::ConstructInstance"

class cGcRocketLockerComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcRocketLockerComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcRocketLockerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcRocketLockerComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcRocketLockerComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcRocketLockerComponent::Update"

class ComponentInstancercGcRocketLockerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcRocketLockerComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcRocketLockerComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcRocketLockerComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcRocketLockerComponent::DestructInstance"

class cGcCreatureBehaviourTree:
    class GetEatAnim(HookFactory):
        _name = "cGcCreatureBehaviourTree::GetEatAnim"
    class Construct(HookFactory):
        _name = "cGcCreatureBehaviourTree::Construct"
    class Prepare(HookFactory):
        _name = "cGcCreatureBehaviourTree::Prepare"
    class GetMoodAnim(HookFactory):
        _name = "cGcCreatureBehaviourTree::GetMoodAnim"
    class AddInteractionBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddInteractionBehaviour"
    class AddRidingBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddRidingBehaviour"
    class AddFollowPlayerBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddFollowPlayerBehaviour"
    class AddAttractedBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddAttractedBehaviour"
    class AddStandardFleeBehavior(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddStandardFleeBehavior"
    class AddDefendBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddDefendBehaviour"
    class AddAvoidPlayerBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddAvoidPlayerBehaviour"
    class AddNoticePlayerBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddNoticePlayerBehaviour"
    class AddFollowRoutineBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddFollowRoutineBehaviour"
    class AddPredatorBehaviour(HookFactory):
        _name = "cGcCreatureBehaviourTree::AddPredatorBehaviour"
    class Destruct(HookFactory):
        _name = "cGcCreatureBehaviourTree::Destruct"
    class cGcCreatureBehaviourTree(HookFactory):
        _name = "cGcCreatureBehaviourTree::cGcCreatureBehaviourTree"

class cGcSeasonState:
    class sSeasonalMilestoneProgress:
        class GetMilestone(HookFactory):
            _name = "cGcSeasonState::sSeasonalMilestoneProgress::GetMilestone"
    class OnSeasonCompletionAcknowledged(HookFactory):
        _name = "cGcSeasonState::OnSeasonCompletionAcknowledged"
    class GetPinnedMilestoneSeed(HookFactory):
        _name = "cGcSeasonState::GetPinnedMilestoneSeed"
    class GetMissionStageAndMilestoneFromSeed(HookFactory):
        _name = "cGcSeasonState::GetMissionStageAndMilestoneFromSeed"
    class Reset(HookFactory):
        _name = "cGcSeasonState::Reset"
    class Save(HookFactory):
        _name = "cGcSeasonState::Save"
    class Load(HookFactory):
        _name = "cGcSeasonState::Load"
    class OnMissionsLoaded(HookFactory):
        _name = "cGcSeasonState::OnMissionsLoaded"
    class Update(HookFactory):
        _name = "cGcSeasonState::Update"
    class WasSeasonEverActive(HookFactory):
        _name = "cGcSeasonState::WasSeasonEverActive"
    class ApplyTableModifications(HookFactory):
        _name = "cGcSeasonState::ApplyTableModifications"
    class RevertTableModifications(HookFactory):
        _name = "cGcSeasonState::RevertTableModifications"
    class GetSeasonProgress(HookFactory):
        _name = "cGcSeasonState::GetSeasonProgress"
    class GetNumberOfCompleteStages(HookFactory):
        _name = "cGcSeasonState::GetNumberOfCompleteStages"
    class GetMilestoneProgress(HookFactory):
        _name = "cGcSeasonState::GetMilestoneProgress"
    class StartStage(HookFactory):
        _name = "cGcSeasonState::StartStage"
    class RegisterRendezvousUA(HookFactory):
        _name = "cGcSeasonState::RegisterRendezvousUA"
    class GetPreviousRendezvousUA(HookFactory):
        _name = "cGcSeasonState::GetPreviousRendezvousUA"
    class GetFirstIncompleteRendezvousUA(HookFactory):
        _name = "cGcSeasonState::GetFirstIncompleteRendezvousUA"
    class GetFirstIncompleteRendezvousIndex(HookFactory):
        _name = "cGcSeasonState::GetFirstIncompleteRendezvousIndex"
    class CompleteMilestone(HookFactory):
        _name = "cGcSeasonState::CompleteMilestone"
    class OnMissionComplete(HookFactory):
        _name = "cGcSeasonState::OnMissionComplete"
    class GetPinnedMilestone(HookFactory):
        _name = "cGcSeasonState::GetPinnedMilestone"
    class GetPinnedMilestoneIndex(HookFactory):
        _name = "cGcSeasonState::GetPinnedMilestoneIndex"
    class SetPinnedMilestone(HookFactory):
        _name = "cGcSeasonState::SetPinnedMilestone"
    class ClearPinnedMilestone(HookFactory):
        _name = "cGcSeasonState::ClearPinnedMilestone"
    class GetStageWithUnclaimedReward(HookFactory):
        _name = "cGcSeasonState::GetStageWithUnclaimedReward"
    class GetFirstIncompleteMilestoneWithMission(HookFactory):
        _name = "cGcSeasonState::GetFirstIncompleteMilestoneWithMission"
    class HasReward(HookFactory):
        _name = "cGcSeasonState::HasReward"
    class HasCollectedReward(HookFactory):
        _name = "cGcSeasonState::HasCollectedReward"
    class CollectFinalReward(HookFactory):
        _name = "cGcSeasonState::CollectFinalReward"
    class CollectReward(HookFactory):
        _name = "cGcSeasonState::CollectReward"
    class IsPlayerInSeasonalUA(HookFactory):
        _name = "cGcSeasonState::IsPlayerInSeasonalUA"
    class IsUASeasonal(HookFactory):
        _name = "cGcSeasonState::IsUASeasonal"
    class IsMaskedUASeasonal(HookFactory):
        _name = "cGcSeasonState::IsMaskedUASeasonal"
    class RegisterBuildingPreventionArea(HookFactory):
        _name = "cGcSeasonState::RegisterBuildingPreventionArea"
    class UpdateStageCompletion(HookFactory):
        _name = "cGcSeasonState::UpdateStageCompletion"
    class OnMilestoneComplete(HookFactory):
        _name = "cGcSeasonState::OnMilestoneComplete"
    class OnStageComplete(HookFactory):
        _name = "cGcSeasonState::OnStageComplete"
    class AddRewardToUnlockedList(HookFactory):
        _name = "cGcSeasonState::AddRewardToUnlockedList"
    class HasPendingMilestoneReward(HookFactory):
        _name = "cGcSeasonState::HasPendingMilestoneReward"
    class OnUnlockedSeasonRewardsLoaded(HookFactory):
        _name = "cGcSeasonState::OnUnlockedSeasonRewardsLoaded"

class StatListener:
    class GetStatValue(HookFactory):
        _templates = ("T0", )
        _name = "StatListener::GetStatValue<{T0}>"

class cGcTelemetryManager:
    class SetupFromData(HookFactory):
        _name = "cGcTelemetryManager::SetupFromData"
    class WriteToData(HookFactory):
        _name = "cGcTelemetryManager::WriteToData"
    class Update(HookFactory):
        _name = "cGcTelemetryManager::Update"
    class VariantChanged(HookFactory):
        _name = "cGcTelemetryManager::VariantChanged"
    class NotifyBeginSession(HookFactory):
        _name = "cGcTelemetryManager::NotifyBeginSession"
    class OnPlayerCountChange(HookFactory):
        _name = "cGcTelemetryManager::OnPlayerCountChange"
    class OnGameLoaded(HookFactory):
        _name = "cGcTelemetryManager::OnGameLoaded"
    class BuildTelemetryUploadData(HookFactory):
        _name = "cGcTelemetryManager::BuildTelemetryUploadData"

class cGcRealitySubstanceData:
    class cGcRealitySubstanceData(HookFactory):
        _name = "cGcRealitySubstanceData::cGcRealitySubstanceData"
        _overload: overloads.cGcRealitySubstanceData.cGcRealitySubstanceData.overloads = "cGcRealitySubstanceData *, const cGcRealitySubstanceData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRealitySubstanceData.cGcRealitySubstanceData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealitySubstanceData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRealitySubstanceData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcRealitySubstanceData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcRealitySubstanceData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRealitySubstanceData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRealitySubstanceData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcRealitySubstanceData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealitySubstanceData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRealitySubstanceData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcRealitySubstanceData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealitySubstanceData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealitySubstanceData::WriteToXMLNodeExplicit"

class cGcProductData:
    class cGcProductData(HookFactory):
        _name = "cGcProductData::cGcProductData"
        _overload: overloads.cGcProductData.cGcProductData.overloads = "cGcProductData *, const cGcProductData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProductData.cGcProductData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcProductData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProductData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcProductData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcProductData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcProductData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProductData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcProductData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProductData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProductData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcProductData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProductData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProductData::WriteToXMLNodeExplicit"

class cGcTechnology:
    class cGcTechnology(HookFactory):
        _name = "cGcTechnology::cGcTechnology"
        _overload: overloads.cGcTechnology.cGcTechnology.overloads = "cGcTechnology *, const cGcTechnology *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcTechnology.cGcTechnology.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnology::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechnology::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcTechnology::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcTechnology::FixDown"
    class FixUp(HookFactory):
        _name = "cGcTechnology::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcTechnology::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTechnology::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTechnology::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTechnology::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTechnology::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnology::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechnology::WriteToXMLNodeExplicit"

class cTkModelResource:
    class cTkModelResource(HookFactory):
        _name = "cTkModelResource::cTkModelResource"
    class ClassPointerCreate(HookFactory):
        _name = "cTkModelResource::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkModelResource::GenerateHash"
    class WriteToDocument(HookFactory):
        _name = "cTkModelResource::WriteToDocument"

class cGcTerrainEditsPersistentBuffer:
    class Construct(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::Construct"
    class InitializeFromData(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::InitializeFromData"
    class PopulateBufferData(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::PopulateBufferData"
    class RemoveProtectedEditsAroundBase(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::RemoveProtectedEditsAroundBase"
    class GetOverlappingTerrainEditBlocksNoLock(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::GetOverlappingTerrainEditBlocksNoLock"
    class ApplyUndoneEdits(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::ApplyUndoneEdits"
    class ApplyEditsUndo(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::ApplyEditsUndo"
    class UndoTerrainEdits(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::UndoTerrainEdits"
    class GetNearestOverdueBlock(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::GetNearestOverdueBlock"
    class FindMatchingBlockBuffer(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::FindMatchingBlockBuffer"
    class DeleteBlockBuffer(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::DeleteBlockBuffer"
    class QueueEditJob(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::QueueEditJob"
    class KickBlockJob(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::KickBlockJob"
    class ApplyEditJob(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::ApplyEditJob"
    class ApplyBlockJob(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::ApplyBlockJob"
    class SaveEditInternal(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::SaveEditInternal"
    class UndoEditsInternal(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::UndoEditsInternal"
    class InternalUpdateYoungest(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::InternalUpdateYoungest"
    class InternalFreeBlock(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::InternalFreeBlock"
    class FindBlockIndex(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::FindBlockIndex"
    class GetProtectedBlocksForBaseLayoutNoLock(HookFactory):
        _name = "cGcTerrainEditsPersistentBuffer::GetProtectedBlocksForBaseLayoutNoLock"

class cGcTradingSupplyBuffer:
    class GetAverageSupplyInUA(HookFactory):
        _name = "cGcTradingSupplyBuffer::GetAverageSupplyInUA"

class cGcUserSeenItemsState:
    class Prepare(HookFactory):
        _name = "cGcUserSeenItemsState::Prepare"
    class IsProductSeen(HookFactory):
        _name = "cGcUserSeenItemsState::IsProductSeen"
    class IsSpecialUnlocked(HookFactory):
        _name = "cGcUserSeenItemsState::IsSpecialUnlocked"
    class GetUnlockedTwitchRewardsInLinkedGroup(HookFactory):
        _name = "cGcUserSeenItemsState::GetUnlockedTwitchRewardsInLinkedGroup"
    class SeeSubstance(HookFactory):
        _name = "cGcUserSeenItemsState::SeeSubstance"
    class SeeProduct(HookFactory):
        _name = "cGcUserSeenItemsState::SeeProduct"
    class SeeTechnology(HookFactory):
        _name = "cGcUserSeenItemsState::SeeTechnology"
    class SeeTopic(HookFactory):
        _name = "cGcUserSeenItemsState::SeeTopic"
    class UnlockTopic(HookFactory):
        _name = "cGcUserSeenItemsState::UnlockTopic"
    class UnlockTitle(HookFactory):
        _name = "cGcUserSeenItemsState::UnlockTitle"
    class AddUnlockedSpecial(HookFactory):
        _name = "cGcUserSeenItemsState::AddUnlockedSpecial"
    class SaveState(HookFactory):
        _name = "cGcUserSeenItemsState::SaveState"
    class LoadState(HookFactory):
        _name = "cGcUserSeenItemsState::LoadState"
    class UpdateWikiUnlocks(HookFactory):
        _name = "cGcUserSeenItemsState::UpdateWikiUnlocks"

class cGcUserSettingsData:
    class cGcUserSettingsData(HookFactory):
        _name = "cGcUserSettingsData::cGcUserSettingsData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcUserSettingsData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUserSettingsData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcUserSettingsData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcUserSettingsData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcUserSettingsData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUserSettingsData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcUserSettingsData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcUserSettingsData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUserSettingsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUserSettingsData::WriteToXMLNodeExplicit"

class cGcVisitedSystemsBuffer:
    class VisitNewGalacticAddress(HookFactory):
        _name = "cGcVisitedSystemsBuffer::VisitNewGalacticAddress"
    class GetVisitedSystemsAroundVoxel(HookFactory):
        _name = "cGcVisitedSystemsBuffer::GetVisitedSystemsAroundVoxel"
    class GetVisitedData(HookFactory):
        _name = "cGcVisitedSystemsBuffer::GetVisitedData"

class cGcWonderDiscoveryExport:
    class ContainsRecord(HookFactory):
        _name = "cGcWonderDiscoveryExport::ContainsRecord"

class cGcWonderUtils:
    class GetWikiTopicForWonderType(HookFactory):
        _name = "cGcWonderUtils::GetWikiTopicForWonderType"
    class GetWonderTypeForWikiGridTopic(HookFactory):
        _name = "cGcWonderUtils::GetWonderTypeForWikiGridTopic"
    class GenerateCreatureIntelligenceStat(HookFactory):
        _name = "cGcWonderUtils::GenerateCreatureIntelligenceStat"
    class GenerateCreatureViciousnessStat(HookFactory):
        _name = "cGcWonderUtils::GenerateCreatureViciousnessStat"
    class GenerateSystemDataFromDiscovery(HookFactory):
        _name = "cGcWonderUtils::GenerateSystemDataFromDiscovery"
    class GetAdjustedPlanetRadius(HookFactory):
        _name = "cGcWonderUtils::GetAdjustedPlanetRadius"
    class GenerateRandomGenericWonderStat(HookFactory):
        _name = "cGcWonderUtils::GenerateRandomGenericWonderStat"
    class GetCategoryConfig(HookFactory):
        _name = "cGcWonderUtils::GetCategoryConfig"

class cTkMetaDataXML:
    class ReadFromFile(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadFromFile<{T0}>"
    class WriteToXMLFile(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::WriteToXMLFile<{T0}>"
    class ReadArrayXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadArrayXML<{T0}>"
    class ReadClassArrayXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadClassArrayXML<{T0}>"
    class ReadClassXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadClassXML<{T0}>"
    class ReadXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadXML<{T0}>"
    class WriteArrayXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::WriteArrayXML<{T0}>"
    class WriteClassArrayXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::WriteClassArrayXML<{T0}>"
    class WriteClassXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::WriteClassXML<{T0}>"
    class ReadElementXML(HookFactory):
        _name = "cTkMetaDataXML::ReadElementXML"
        _overload: overloads.cTkMetaDataXML.ReadElementXML.overloads = "cTkFixedString<128,char> *, XMLNode *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkMetaDataXML.ReadElementXML.overloads):
            cls._overload = overload_args
            return cls
    class WriteXML(HookFactory):
        _name = "cTkMetaDataXML::WriteXML"
        _overload: overloads.cTkMetaDataXML.WriteXML.overloads = "const float *, XMLNode *, const char *, bool, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cTkMetaDataXML.WriteXML.overloads):
            cls._overload = overload_args
            return cls
    class ReadDynamicStringXML(HookFactory):
        _templates = ("T0", )
        _name = "cTkMetaDataXML::ReadDynamicStringXML<{T0}>"
    class IsDefault(HookFactory):
        _name = "cTkMetaDataXML::IsDefault"
        _overload: overloads.cTkMetaDataXML.IsDefault.overloads = "const float *, const float *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkMetaDataXML.IsDefault.overloads):
            cls._overload = overload_args
            return cls
    class GetLookup(HookFactory):
        _name = "cTkMetaDataXML::GetLookup"
    class ParseXML(HookFactory):
        _name = "cTkMetaDataXML::ParseXML"
    class ReadClassPointer(HookFactory):
        _name = "cTkMetaDataXML::ReadClassPointer"
    class ReadClassPointerArrayXML(HookFactory):
        _name = "cTkMetaDataXML::ReadClassPointerArrayXML"
    class Register(HookFactory):
        _name = "cTkMetaDataXML::Register"
    class WriteClassPointer(HookFactory):
        _name = "cTkMetaDataXML::WriteClassPointer"
    class WriteClassPointerArrayXML(HookFactory):
        _name = "cTkMetaDataXML::WriteClassPointerArrayXML"
    class WriteToXML(HookFactory):
        _name = "cTkMetaDataXML::WriteToXML"

class cGcSolarSystemAsteroidFields:
    class cGcSolarSystemAsteroidFields(HookFactory):
        _name = "cGcSolarSystemAsteroidFields::cGcSolarSystemAsteroidFields"

class cGcPlayerEnvironment:
    class IsOnPlanet(HookFactory):
        _name = "cGcPlayerEnvironment::IsOnPlanet"
    class IsOnboardOwnFreighter(HookFactory):
        _name = "cGcPlayerEnvironment::IsOnboardOwnFreighter"
    class IsOnboardFreighter(HookFactory):
        _name = "cGcPlayerEnvironment::IsOnboardFreighter"

class cGcGalaxyAttributesAtAddress:
    class cGcGalaxyAttributesAtAddress(HookFactory):
        _name = "cGcGalaxyAttributesAtAddress::cGcGalaxyAttributesAtAddress"
    class Classify(HookFactory):
        _name = "cGcGalaxyAttributesAtAddress::Classify"

class cGcWikiPageData:
    class GetPageLayout(HookFactory):
        _name = "cGcWikiPageData::GetPageLayout"
    class cGcWikiPageData(HookFactory):
        _name = "cGcWikiPageData::cGcWikiPageData"
    class Reset(HookFactory):
        _name = "cGcWikiPageData::Reset"

class sRegionEdit:
    class sRegionEdit(HookFactory):
        _name = "sRegionEdit::sRegionEdit"

class MinidumpTimeoutThread(HookFactory):
    _name = "MinidumpTimeoutThread"

class MiniDumpFunction(HookFactory):
    _name = "MiniDumpFunction"

class main(HookFactory):
    _name = "main"

class Main(HookFactory):
    _name = "Main"

class Construct(HookFactory):
    _name = "Construct"

class cGcColourPalette:
    class Construct(HookFactory):
        _name = "cGcColourPalette::Construct"
    class GeneratePalettes(HookFactory):
        _name = "cGcColourPalette::GeneratePalettes"
    class GetVariantOfColour(HookFactory):
        _name = "cGcColourPalette::GetVariantOfColour"
    class GenerateBaseColours(HookFactory):
        _name = "cGcColourPalette::GenerateBaseColours"
    class PickRandomColour(HookFactory):
        _name = "cGcColourPalette::PickRandomColour"
    class RenderNGui(HookFactory):
        _name = "cGcColourPalette::RenderNGui"
    class GetColourWriteable(HookFactory):
        _name = "cGcColourPalette::GetColourWriteable"
    class RenderPaletteCallback(HookFactory):
        _name = "cGcColourPalette::RenderPaletteCallback"

class cGcLegacyColourPalette:
    class GeneratePalettes(HookFactory):
        _name = "cGcLegacyColourPalette::GeneratePalettes"
    class GenerateBaseColours(HookFactory):
        _name = "cGcLegacyColourPalette::GenerateBaseColours"

class cGcProceduralTextureDescriptor:
    class IsReady(HookFactory):
        _name = "cGcProceduralTextureDescriptor::IsReady"
    class GenerateInstance(HookFactory):
        _name = "cGcProceduralTextureDescriptor::GenerateInstance"
    class ChooseTextureOptions(HookFactory):
        _name = "cGcProceduralTextureDescriptor::ChooseTextureOptions"
    class ChooseTextureOptionsGuided(HookFactory):
        _name = "cGcProceduralTextureDescriptor::ChooseTextureOptionsGuided"
    class GetAsID(HookFactory):
        _name = "cGcProceduralTextureDescriptor::GetAsID"

class ProcTexRegisterWithMetadataCache(HookFactory):
    _name = "ProcTexRegisterWithMetadataCache"

class cGcProceduralTextureManager:
    class Update(HookFactory):
        _name = "cGcProceduralTextureManager::Update"
    class CheckSourceTexturesResident(HookFactory):
        _name = "cGcProceduralTextureManager::CheckSourceTexturesResident"
    class ContextDeleteFunc(HookFactory):
        _name = "cGcProceduralTextureManager::ContextDeleteFunc"
    class AbortBakeFunc(HookFactory):
        _name = "cGcProceduralTextureManager::AbortBakeFunc"
    class BakeTexture(HookFactory):
        _name = "cGcProceduralTextureManager::BakeTexture"
    class StreamingBakeTexture(HookFactory):
        _name = "cGcProceduralTextureManager::StreamingBakeTexture"
    class ApplyTextureOptions(HookFactory):
        _name = "cGcProceduralTextureManager::ApplyTextureOptions"
    class GenerateAndLoadResource(HookFactory):
        _name = "cGcProceduralTextureManager::GenerateAndLoadResource"
    class LoadResourceUniqueColourSeed(HookFactory):
        _name = "cGcProceduralTextureManager::LoadResourceUniqueColourSeed"
    class CreateGenerationTask(HookFactory):
        _name = "cGcProceduralTextureManager::CreateGenerationTask"
    class DestroyTask(HookFactory):
        _name = "cGcProceduralTextureManager::DestroyTask"
    class AreTaskResourcesLoaded(HookFactory):
        _name = "cGcProceduralTextureManager::AreTaskResourcesLoaded"
    class PollForTaskCompletion(HookFactory):
        _name = "cGcProceduralTextureManager::PollForTaskCompletion"
    class DeferredAverageColourTask:
        class Execute(HookFactory):
            _name = "cGcProceduralTextureManager::DeferredAverageColourTask::Execute"
    class DeferredTextureSetupSampler:
        class DeferredTextureSetupSampler(HookFactory):
            _name = "cGcProceduralTextureManager::DeferredTextureSetupSampler::DeferredTextureSetupSampler"

class cGcRendertargetTextureCache:
    class GetTarget(HookFactory):
        _name = "cGcRendertargetTextureCache::GetTarget"

class cGcWFCScenes:
    class cGcWFCScenes(HookFactory):
        _name = "cGcWFCScenes::cGcWFCScenes"
    class PickGeometryIndex(HookFactory):
        _name = "cGcWFCScenes::PickGeometryIndex"

class cGcProceduralMaterialMapping:
    class cGcProceduralMaterialMapping(HookFactory):
        _name = "cGcProceduralMaterialMapping::cGcProceduralMaterialMapping"
        _overload: overloads.cGcProceduralMaterialMapping.cGcProceduralMaterialMapping.overloads = "cGcProceduralMaterialMapping *, const cGcProceduralMaterialMapping *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProceduralMaterialMapping.cGcProceduralMaterialMapping.overloads):
            cls._overload = overload_args
            return cls

class cGcPlanetGenerator:
    class ValidateSubBiome(HookFactory):
        _name = "cGcPlanetGenerator::ValidateSubBiome"
    class GetSeedForColourGeneration(HookFactory):
        _name = "cGcPlanetGenerator::GetSeedForColourGeneration"
    class GetBiomeData(HookFactory):
        _name = "cGcPlanetGenerator::GetBiomeData"
    class cGcPlanetGenerator(HookFactory):
        _name = "cGcPlanetGenerator::cGcPlanetGenerator"
    class GetWaterColours(HookFactory):
        _name = "cGcPlanetGenerator::GetWaterColours"
    class GetTileTypeSet(HookFactory):
        _name = "cGcPlanetGenerator::GetTileTypeSet"
    class GetOverlayTexture(HookFactory):
        _name = "cGcPlanetGenerator::GetOverlayTexture"
    class GetTerrainTexture(HookFactory):
        _name = "cGcPlanetGenerator::GetTerrainTexture"
    class Construct(HookFactory):
        _name = "cGcPlanetGenerator::Construct"
    class Prepare(HookFactory):
        _name = "cGcPlanetGenerator::Prepare"
    class GenerateQueryInfo(HookFactory):
        _name = "cGcPlanetGenerator::GenerateQueryInfo"
    class GenerateWonderQueryData(HookFactory):
        _name = "cGcPlanetGenerator::GenerateWonderQueryData"
    class GenerateWeatherInfo(HookFactory):
        _name = "cGcPlanetGenerator::GenerateWeatherInfo"
    class Generate(HookFactory):
        _name = "cGcPlanetGenerator::Generate"
    class ReseedTo(HookFactory):
        _name = "cGcPlanetGenerator::ReseedTo"
    class Destruct(HookFactory):
        _name = "cGcPlanetGenerator::Destruct"
    class GenerateInhabitants(HookFactory):
        _name = "cGcPlanetGenerator::GenerateInhabitants"
    class GenerateSkyColourPalettes(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSkyColourPalettes"
    class GenerateColourPalettes(HookFactory):
        _name = "cGcPlanetGenerator::GenerateColourPalettes"
    class GenerateSky(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSky"
    class GenerateScreenFilter(HookFactory):
        _name = "cGcPlanetGenerator::GenerateScreenFilter"
    class GenerateClouds(HookFactory):
        _name = "cGcPlanetGenerator::GenerateClouds"
    class GenerateHeavyAir(HookFactory):
        _name = "cGcPlanetGenerator::GenerateHeavyAir"
    class GetVoxelType(HookFactory):
        _name = "cGcPlanetGenerator::GetVoxelType"
    class RandomiseNoiseData(HookFactory):
        _name = "cGcPlanetGenerator::RandomiseNoiseData"
        _overload: overloads.cGcPlanetGenerator.RandomiseNoiseData.overloads = "cGcPlanetGenerator *, cTkNoiseUberLayerData *, cTkNoiseUberLayerData *, cTkNoiseUberLayerData *, cGcTerrainControls *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlanetGenerator.RandomiseNoiseData.overloads):
            cls._overload = overload_args
            return cls
    class GenerateTerrain(HookFactory):
        _name = "cGcPlanetGenerator::GenerateTerrain"
    class GenerateTerrainSetting(HookFactory):
        _name = "cGcPlanetGenerator::GenerateTerrainSetting"
    class RandomiseWaterHeight(HookFactory):
        _name = "cGcPlanetGenerator::RandomiseWaterHeight"
    class GenerateBasics(HookFactory):
        _name = "cGcPlanetGenerator::GenerateBasics"
    class GenerateHazards(HookFactory):
        _name = "cGcPlanetGenerator::GenerateHazards"
    class GenerateWeather(HookFactory):
        _name = "cGcPlanetGenerator::GenerateWeather"
    class GenerateSubstances(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSubstances"
    class GenerateExtraResourceHints(HookFactory):
        _name = "cGcPlanetGenerator::GenerateExtraResourceHints"
    class GetLocString(HookFactory):
        _name = "cGcPlanetGenerator::GetLocString"
    class GenerateInfo(HookFactory):
        _name = "cGcPlanetGenerator::GenerateInfo"
    class GenerateSentinels(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSentinels"
    class GenerateRings(HookFactory):
        _name = "cGcPlanetGenerator::GenerateRings"
    class GenerateCreatureInfo(HookFactory):
        _name = "cGcPlanetGenerator::GenerateCreatureInfo"
    class GenerateTerrainTileSet(HookFactory):
        _name = "cGcPlanetGenerator::GenerateTerrainTileSet"
    class GenerateTerrainColours(HookFactory):
        _name = "cGcPlanetGenerator::GenerateTerrainColours"
    class GenerateWater(HookFactory):
        _name = "cGcPlanetGenerator::GenerateWater"
    class GenerateExternalObjectLists(HookFactory):
        _name = "cGcPlanetGenerator::GenerateExternalObjectLists"
    class IsOptionalObjectListActive(HookFactory):
        _name = "cGcPlanetGenerator::IsOptionalObjectListActive"
    class ChooseExternalLists(HookFactory):
        _name = "cGcPlanetGenerator::ChooseExternalLists"
    class TakeAllValidExternalLists(HookFactory):
        _name = "cGcPlanetGenerator::TakeAllValidExternalLists"
    class IsObjectListDisabled(HookFactory):
        _name = "cGcPlanetGenerator::IsObjectListDisabled"
    class LoadQualityVariantForObjectList(HookFactory):
        _name = "cGcPlanetGenerator::LoadQualityVariantForObjectList"
    class LoadExternalObjectLists(HookFactory):
        _name = "cGcPlanetGenerator::LoadExternalObjectLists"
    class GenerateSpawnData(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSpawnData"
    class FillObjectArray(HookFactory):
        _name = "cGcPlanetGenerator::FillObjectArray"
    class GenerateSelectableObjectData(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSelectableObjectData"
    class LoadSpawnData(HookFactory):
        _name = "cGcPlanetGenerator::LoadSpawnData"
    class LoadObjectArray(HookFactory):
        _name = "cGcPlanetGenerator::LoadObjectArray"
    class GetCreatureResourceHint(HookFactory):
        _name = "cGcPlanetGenerator::GetCreatureResourceHint"
    class GetCreatureResourceFilter(HookFactory):
        _name = "cGcPlanetGenerator::GetCreatureResourceFilter"
    class LoadCreatureArray(HookFactory):
        _name = "cGcPlanetGenerator::LoadCreatureArray"
    class ShouldLoadFemaleCreature(HookFactory):
        _name = "cGcPlanetGenerator::ShouldLoadFemaleCreature"
    class LoadModel(HookFactory):
        _name = "cGcPlanetGenerator::LoadModel"
    class GenerateCreatureRoles(HookFactory):
        _name = "cGcPlanetGenerator::GenerateCreatureRoles"
    class GenerateCreatureSpawnData(HookFactory):
        _name = "cGcPlanetGenerator::GenerateCreatureSpawnData"
    class FillCreatureSpawnDataFromDescription(HookFactory):
        _name = "cGcPlanetGenerator::FillCreatureSpawnDataFromDescription"
    class UpdateProceduralTextureColours(HookFactory):
        _name = "cGcPlanetGenerator::UpdateProceduralTextureColours"
        _overload: overloads.cGcPlanetGenerator.UpdateProceduralTextureColours.overloads = "cGcPlanetGenerator *, std::vector<cGcPlanetObjectSpawnData,TkSTLAllocatorShim<cGcPlanetObjectSpawnData,8,-1> > *, cGcPlanetData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlanetGenerator.UpdateProceduralTextureColours.overloads):
            cls._overload = overload_args
            return cls
    class SetupCustomObjectColourPalettes(HookFactory):
        _name = "cGcPlanetGenerator::SetupCustomObjectColourPalettes"
    class GetSubBiomeForDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetSubBiomeForDiscoveryData"
    class GetSystemFlagsForDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetSystemFlagsForDiscoveryData"
    class GetPlanetInfoFromDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetPlanetInfoFromDiscoveryData"
    class GetCreatureResourceFilterFromDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetCreatureResourceFilterFromDiscoveryData"
    class GetCreatureInfoFromDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetCreatureInfoFromDiscoveryData"
    class GetCreatureInfoAndSpawnDataFromDiscoveryData(HookFactory):
        _name = "cGcPlanetGenerator::GetCreatureInfoAndSpawnDataFromDiscoveryData"
    class DoesCreatureStillExistOnPlanet(HookFactory):
        _name = "cGcPlanetGenerator::DoesCreatureStillExistOnPlanet"
    class GenerateCreatureRolesForPlanet(HookFactory):
        _name = "cGcPlanetGenerator::GenerateCreatureRolesForPlanet"
    class GenerateSubstancesForPlanet(HookFactory):
        _name = "cGcPlanetGenerator::GenerateSubstancesForPlanet"

class cTkRandom:
    class GetInstance(HookFactory):
        _name = "cTkRandom::GetInstance"

class cGcCameraBehaviourAerialView:
    class ActivateEffect(HookFactory):
        _name = "cGcCameraBehaviourAerialView::ActivateEffect"
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourAerialView::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourAerialView::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourAerialView::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourAerialView::Update"

class cGcCameraBehaviourAmbient:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourAmbient::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourAmbient::Prepare"
    class RenderNGui(HookFactory):
        _name = "cGcCameraBehaviourAmbient::RenderNGui"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourAmbient::Update"
    class Transform(HookFactory):
        _name = "cGcCameraBehaviourAmbient::Transform"
    class cGcStraightMovementLayer:
        class Prepare(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcStraightMovementLayer::Prepare"
        class Update(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcStraightMovementLayer::Update"
        class UpdateSamples(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcStraightMovementLayer::UpdateSamples"
        class RenderNGui(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcStraightMovementLayer::RenderNGui"
    class cGcLookAroundLayer:
        class Prepare(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcLookAroundLayer::Prepare"
        class Update(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcLookAroundLayer::Update"
        class RenderNGui(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcLookAroundLayer::RenderNGui"
    class cGcMoveAroundLayer:
        class Prepare(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcMoveAroundLayer::Prepare"
        class Update(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcMoveAroundLayer::Update"
        class RenderNGui(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcMoveAroundLayer::RenderNGui"
    class cGcAmbientCameraBehaviourManager:
        class Update(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcAmbientCameraBehaviourManager::Update"
    class cGcCurveMovementLayer:
        class Prepare(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcCurveMovementLayer::Prepare"
        class Update(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcCurveMovementLayer::Update"
        class RenderNGui(HookFactory):
            _name = "cGcCameraBehaviourAmbient::cGcCurveMovementLayer::RenderNGui"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcCameraBehaviourAmbient::RenderNGuiCallback"

class cGcCameraBehaviourAnimation:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourAnimation::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourAnimation::Prepare"
    class Setup(HookFactory):
        _name = "cGcCameraBehaviourAnimation::Setup"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourAnimation::Update"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourAnimation::Release"

class cGcCameraBehaviourFollowTarget:
    class Transform(HookFactory):
        _name = "cGcCameraBehaviourFollowTarget::Transform"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourFollowTarget::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourFollowTarget::Update"
    class MoveToTarget(HookFactory):
        _name = "cGcCameraBehaviourFollowTarget::MoveToTarget"

class cGcCameraBehaviourBuildingMode:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::Construct"
    class Destruct(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::Destruct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::Update"
    class UpdateLoadBoundaryResource(HookFactory):
        _name = "cGcCameraBehaviourBuildingMode::UpdateLoadBoundaryResource"

class cGcCameraBehaviourCharacter:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourCharacter::Construct"
    class Destruct(HookFactory):
        _name = "cGcCameraBehaviourCharacter::Destruct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourCharacter::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourCharacter::Update"
    class GetDeflectedVector(HookFactory):
        _name = "cGcCameraBehaviourCharacter::GetDeflectedVector"

class cTkHavokCharacterController:
    class cTkHavokCharacterController(HookFactory):
        _name = "cTkHavokCharacterController::cTkHavokCharacterController"
    class getBodies(HookFactory):
        _name = "cTkHavokCharacterController::getBodies"
    class SetVelocity(HookFactory):
        _name = "cTkHavokCharacterController::SetVelocity"
    class OnGround(HookFactory):
        _name = "cTkHavokCharacterController::OnGround"
    class SetClingToTerrain(HookFactory):
        _name = "cTkHavokCharacterController::SetClingToTerrain"
    class SetCollisionFilters(HookFactory):
        _name = "cTkHavokCharacterController::SetCollisionFilters"
    class Stepping(HookFactory):
        _name = "cTkHavokCharacterController::Stepping"
    class GetUp(HookFactory):
        _name = "cTkHavokCharacterController::GetUp"
    class ApplyForce(HookFactory):
        _name = "cTkHavokCharacterController::ApplyForce"
    class ApplyForceLimited(HookFactory):
        _name = "cTkHavokCharacterController::ApplyForceLimited"
    class ApplyImpulse(HookFactory):
        _name = "cTkHavokCharacterController::ApplyImpulse"
    class Construct(HookFactory):
        _name = "cTkHavokCharacterController::Construct"
    class Destruct(HookFactory):
        _name = "cTkHavokCharacterController::Destruct"
    class Enable(HookFactory):
        _name = "cTkHavokCharacterController::Enable"
    class GetPosition(HookFactory):
        _name = "cTkHavokCharacterController::GetPosition"
    class GetRigidBody(HookFactory):
        _name = "cTkHavokCharacterController::GetRigidBody"
    class GetVelocity(HookFactory):
        _name = "cTkHavokCharacterController::GetVelocity"
    class Prepare(HookFactory):
        _name = "cTkHavokCharacterController::Prepare"
    class Release(HookFactory):
        _name = "cTkHavokCharacterController::Release"
    class SetClimbableStickinessAngle(HookFactory):
        _name = "cTkHavokCharacterController::SetClimbableStickinessAngle"
    class SetMaxFallSpeed(HookFactory):
        _name = "cTkHavokCharacterController::SetMaxFallSpeed"
    class SetMaxSlopeAngle(HookFactory):
        _name = "cTkHavokCharacterController::SetMaxSlopeAngle"
    class SetMaxWalkableAngle(HookFactory):
        _name = "cTkHavokCharacterController::SetMaxWalkableAngle"
    class SetPosition(HookFactory):
        _name = "cTkHavokCharacterController::SetPosition"
    class SetRelMatrix(HookFactory):
        _name = "cTkHavokCharacterController::SetRelMatrix"
    class applyAction(HookFactory):
        _name = "cTkHavokCharacterController::applyAction"

class cGcCameraBehaviourFirstPerson:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourFirstPerson::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourFirstPerson::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourFirstPerson::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourFirstPerson::Update"
    class IsShipFreeLookActive(HookFactory):
        _name = "cGcCameraBehaviourFirstPerson::IsShipFreeLookActive"

class cGcCameraBehaviourFreighterWarp:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourFreighterWarp::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourFreighterWarp::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourFreighterWarp::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourFreighterWarp::Update"
    class ComputeWarpMatrix(HookFactory):
        _name = "cGcCameraBehaviourFreighterWarp::ComputeWarpMatrix"

class cGcCameraBehaviourGalacticLookAt:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourGalacticLookAt::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourGalacticLookAt::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourGalacticLookAt::Update"

class cGcCameraBehaviourGalacticNavigation:
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::Update"
    class UpdateInput(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::UpdateInput"
    class UpdateHandControl(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::UpdateHandControl"
    class DrawGizmo(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::DrawGizmo"
    class LockToOrbitPoint(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::LockToOrbitPoint"
    class TriggerFlyToPoint(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::TriggerFlyToPoint"
    class GetEye(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::GetEye"
    class GetTarget(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::GetTarget"
    class CalculateMatrix(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::CalculateMatrix"
    class RunSequenceZoomOut(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::RunSequenceZoomOut"
    class UsePadVRControls(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::UsePadVRControls"
    class SetTargetFacing(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::SetTargetFacing"
    class SetFacing(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::SetFacing"
    class GetFacing(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::GetFacing"
    class SetTargetPosition(HookFactory):
        _name = "cGcCameraBehaviourGalacticNavigation::SetTargetPosition"

class cGcCameraBehaviourGalacticTransition:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourGalacticTransition::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourGalacticTransition::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourGalacticTransition::Update"

class cGcPlayerFullBodyIKComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::InitData"
    class cGcPlayerFullBodyIKComponent(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::cGcPlayerFullBodyIKComponent"
    class OnAttached(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::OnAttached"
    class Release(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::Release"
    class Prepare(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::Prepare"
    class NetSerialize(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::NetSerialize"
    class Update(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::Update"
    class UpdateIKBasedOnCurrentCharacterState(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::UpdateIKBasedOnCurrentCharacterState"
    class UpdateCurrentSlopeAngle(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::UpdateCurrentSlopeAngle"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::UpdatePostPhysics"
    class SetDesiredWristMatrix(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::SetDesiredWristMatrix"
    class BlendToDesiredWristMatrix(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::BlendToDesiredWristMatrix"
    class BlendToDisableHandIk(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::BlendToDisableHandIk"
    class GetDesiredWristMatrix(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetDesiredWristMatrix"
    class GetActualWristMatrix(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetActualWristMatrix"
    class DisableHandIK(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::DisableHandIK"
    class LockBody(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::LockBody"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::RenderNGui"
    class GetGroundSlopeAngle(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetGroundSlopeAngle"
    class GetCurrentSlopeNormal(HookFactory):
        _name = "cGcPlayerFullBodyIKComponent::GetCurrentSlopeNormal"

class cGcCameraBehaviourLookAt:
    class Update(HookFactory):
        _name = "cGcCameraBehaviourLookAt::Update"

class cGcCameraBehaviourModelView:
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourModelView::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourModelView::Update"
    class ReadDofParameters(HookFactory):
        _name = "cGcCameraBehaviourModelView::ReadDofParameters"
    class GetBlendTime(HookFactory):
        _name = "cGcCameraBehaviourModelView::GetBlendTime"
    class GetBlendOffset(HookFactory):
        _name = "cGcCameraBehaviourModelView::GetBlendOffset"

class cGcCameraBehaviourOffset:
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourOffset::Prepare"
    class GetObjectMatrix(HookFactory):
        _name = "cGcCameraBehaviourOffset::GetObjectMatrix"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourOffset::Update"

class cGcCameraBehaviourPhotoMode:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::Construct"
    class Destruct(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::Destruct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::Update"
    class GetCameraMovement(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::GetCameraMovement"
    class GetCameraTurnVR(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::GetCameraTurnVR"
    class RepositionCamera(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::RepositionCamera"
    class UpdateLoadBoundaryResource(HookFactory):
        _name = "cGcCameraBehaviourPhotoMode::UpdateLoadBoundaryResource"

class cGcPlayerControlComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPlayerControlComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPlayerControlComponent::InitData"
    class GetCurrentState(HookFactory):
        _name = "cGcPlayerControlComponent::GetCurrentState"
    class Prepare(HookFactory):
        _name = "cGcPlayerControlComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcPlayerControlComponent::Release"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerControlComponent::RenderNGui"
    class BeginState(HookFactory):
        _name = "cGcPlayerControlComponent::BeginState"
    class Update(HookFactory):
        _name = "cGcPlayerControlComponent::Update"
    class ModifyCameraStick(HookFactory):
        _name = "cGcPlayerControlComponent::ModifyCameraStick"
    class UpdateControl(HookFactory):
        _name = "cGcPlayerControlComponent::UpdateControl"
        _overload: overloads.cGcPlayerControlComponent.UpdateControl.overloads = "cGcPlayerControlComponent *, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlayerControlComponent.UpdateControl.overloads):
            cls._overload = overload_args
            return cls
    class UpdateInput(HookFactory):
        _name = "cGcPlayerControlComponent::UpdateInput"
    class InterceptAnalogInput(HookFactory):
        _name = "cGcPlayerControlComponent::InterceptAnalogInput"
    class InterceptButtonInput(HookFactory):
        _name = "cGcPlayerControlComponent::InterceptButtonInput"
    class SetVariable(HookFactory):
        _name = "cGcPlayerControlComponent::SetVariable"
    class ControlsMovement(HookFactory):
        _name = "cGcPlayerControlComponent::ControlsMovement"

class ComponentInstancercGcSpringAttachmentComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSpringAttachmentComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcSpringAttachmentComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSpringAttachmentComponent::ConstructInstance"

class cTkBlackboard:
    class cTkBlackboard(HookFactory):
        _name = "cTkBlackboard::cTkBlackboard"
    class GetValue(HookFactory):
        _templates = ("T0", )
        _name = "cTkBlackboard::GetValue<{T0}>"
    class SetValue(HookFactory):
        _templates = ("T0", )
        _name = "cTkBlackboard::SetValue<{T0}>"
    class ClearValue(HookFactory):
        _name = "cTkBlackboard::ClearValue"
    class RenderNGui(HookFactory):
        _name = "cTkBlackboard::RenderNGui"

class cGcCameraBehaviourPlayerThirdPerson:
    class GetEnableAutoRotate(HookFactory):
        _name = "cGcCameraBehaviourPlayerThirdPerson::GetEnableAutoRotate"
    class ApplyCollisions(HookFactory):
        _name = "cGcCameraBehaviourPlayerThirdPerson::ApplyCollisions"
    class StartCollisionJobs(HookFactory):
        _name = "cGcCameraBehaviourPlayerThirdPerson::StartCollisionJobs"
    class GetDesiredFollowSettingsData(HookFactory):
        _name = "cGcCameraBehaviourPlayerThirdPerson::GetDesiredFollowSettingsData"
    class GetCloseFactor(HookFactory):
        _name = "cGcCameraBehaviourPlayerThirdPerson::GetCloseFactor"

class cGcCameraBehaviourScreenshot:
    class ActivateEffect(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::ActivateEffect"
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::Construct"
    class Setup(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::Setup"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::Update"
    class RenderScreenshot(HookFactory):
        _name = "cGcCameraBehaviourScreenshot::RenderScreenshot"

class cGcCameraBehaviourShipWarp:
    class Construct(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::Construct"
    class Prepare(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::Prepare"
    class Release(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::Release"
    class Update(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::Update"
    class UpdateSpin(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::UpdateSpin"
    class UpdateShipMatrix(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::UpdateShipMatrix"
    class ComputeWarpMatrix(HookFactory):
        _name = "cGcCameraBehaviourShipWarp::ComputeWarpMatrix"

class cGcCharacterSit:
    class IsSitting(HookFactory):
        _name = "cGcCharacterSit::IsSitting"
    class Sit(HookFactory):
        _name = "cGcCharacterSit::Sit"
    class TerminateSitting(HookFactory):
        _name = "cGcCharacterSit::TerminateSitting"
    class VacateChair(HookFactory):
        _name = "cGcCharacterSit::VacateChair"
    class UpdateSlideIntoPosition(HookFactory):
        _name = "cGcCharacterSit::UpdateSlideIntoPosition"
    class Update(HookFactory):
        _name = "cGcCharacterSit::Update"
    class ChangePosture(HookFactory):
        _name = "cGcCharacterSit::ChangePosture"
    class Stand(HookFactory):
        _name = "cGcCharacterSit::Stand"
    class GetSitConstraintStrength(HookFactory):
        _name = "cGcCharacterSit::GetSitConstraintStrength"

class GPN:
    class SearchContext:
        class GetGoalUA(HookFactory):
            _name = "GPN::SearchContext::GetGoalUA"
        class GetOrCreateGraphNode(HookFactory):
            _name = "GPN::SearchContext::GetOrCreateGraphNode"
        class GetGoalPosition(HookFactory):
            _name = "GPN::SearchContext::GetGoalPosition"
        class HasLevel1Upgrade(HookFactory):
            _name = "GPN::SearchContext::HasLevel1Upgrade"
        class HasLevel2Upgrade(HookFactory):
            _name = "GPN::SearchContext::HasLevel2Upgrade"
        class HasLevel3Upgrade(HookFactory):
            _name = "GPN::SearchContext::HasLevel3Upgrade"
        class GetMaximumJumpDistance(HookFactory):
            _name = "GPN::SearchContext::GetMaximumJumpDistance"
    class GraphNode:
        class GraphNode(HookFactory):
            _name = "GPN::GraphNode::GraphNode"

class cGcPlayerStick:
    class GetBaseStick(HookFactory):
        _name = "cGcPlayerStick::GetBaseStick"
    class Construct(HookFactory):
        _name = "cGcPlayerStick::Construct"
    class Reset(HookFactory):
        _name = "cGcPlayerStick::Reset"
    class GetSensitivityMultiplier(HookFactory):
        _name = "cGcPlayerStick::GetSensitivityMultiplier"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerStick::RenderNGui"

class cGcGameCamera:
    class UpdateAndApplyShake(HookFactory):
        _name = "cGcGameCamera::UpdateAndApplyShake"
    class DebugRenderShakes(HookFactory):
        _name = "cGcGameCamera::DebugRenderShakes"
    class Shake(HookFactory):
        _name = "cGcGameCamera::Shake"
    class SetShakeStrength(HookFactory):
        _name = "cGcGameCamera::SetShakeStrength"

class cTkAnimInstanceHandle:
    class IsValid(HookFactory):
        _name = "cTkAnimInstanceHandle::IsValid"

class cGcUpdateOptionalArguments:
    class cGcUpdateOptionalArguments(HookFactory):
        _name = "cGcUpdateOptionalArguments::cGcUpdateOptionalArguments"

class cGcCameraDepthOfField:
    class GetParams(HookFactory):
        _name = "cGcCameraDepthOfField::GetParams"
    class ReadParams(HookFactory):
        _name = "cGcCameraDepthOfField::ReadParams"

class cGcCameraShake:
    class FindData(HookFactory):
        _name = "cGcCameraShake::FindData"
    class GetStrength(HookFactory):
        _name = "cGcCameraShake::GetStrength"
    class RenderNGui(HookFactory):
        _name = "cGcCameraShake::RenderNGui"
    class Apply(HookFactory):
        _name = "cGcCameraShake::Apply"
    class GetMechanical(HookFactory):
        _name = "cGcCameraShake::GetMechanical"
    class SetDirection(HookFactory):
        _name = "cGcCameraShake::SetDirection"

class ConvertUtf16ToByteLimitedUtf8(HookFactory):
    _name = "ConvertUtf16ToByteLimitedUtf8"

class cGcFrontendTextInput:
    class Start(HookFactory):
        _name = "cGcFrontendTextInput::Start"
    class GetResult(HookFactory):
        _name = "cGcFrontendTextInput::GetResult"
    class Release(HookFactory):
        _name = "cGcFrontendTextInput::Release"
    class Update(HookFactory):
        _name = "cGcFrontendTextInput::Update"
    class GetInputString(HookFactory):
        _name = "cGcFrontendTextInput::GetInputString"

class cGcUIOptionListElement:
    class IsHovering(HookFactory):
        _name = "cGcUIOptionListElement::IsHovering"
    class SetEnabled(HookFactory):
        _name = "cGcUIOptionListElement::SetEnabled"

class cGcIntegerOption:
    class UpdateUI(HookFactory):
        _name = "cGcIntegerOption::UpdateUI"
    class GetTranslatedDefaultValue(HookFactory):
        _name = "cGcIntegerOption::GetTranslatedDefaultValue"

class cGcFloatOption:
    class CreateElement(HookFactory):
        _name = "cGcFloatOption::CreateElement"
    class UpdateUI(HookFactory):
        _name = "cGcFloatOption::UpdateUI"
    class GetTranslatedDefaultValue(HookFactory):
        _name = "cGcFloatOption::GetTranslatedDefaultValue"
    class FormatValue(HookFactory):
        _name = "cGcFloatOption::FormatValue"

class cGcBooleanOption:
    class UpdateUI(HookFactory):
        _name = "cGcBooleanOption::UpdateUI"
    class CreateElement(HookFactory):
        _name = "cGcBooleanOption::CreateElement"
    class GetTranslatedDefaultValue(HookFactory):
        _name = "cGcBooleanOption::GetTranslatedDefaultValue"

class cGcButtonOption:
    class UpdateUI(HookFactory):
        _name = "cGcButtonOption::UpdateUI"
    class Initialize(HookFactory):
        _name = "cGcButtonOption::Initialize"

class cGcQualityOption:
    class CreateElement(HookFactory):
        _name = "cGcQualityOption::CreateElement"
    class UpdateUI(HookFactory):
        _name = "cGcQualityOption::UpdateUI"

class cGcOptionListHeader:
    class Initialize(HookFactory):
        _name = "cGcOptionListHeader::Initialize"

class cGcOptionsInteractionContext:
    class Set(HookFactory):
        _name = "cGcOptionsInteractionContext::Set"
    class Confirm(HookFactory):
        _name = "cGcOptionsInteractionContext::Confirm"

class cGcCraftingTreePageData:
    class Reset(HookFactory):
        _name = "cGcCraftingTreePageData::Reset"

class cGcDiscoveryPageData:
    class DiscoveryPageInfoBase:
        class UpdateName(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPageInfoBase::UpdateName"
        class DiscoveryPageInfoBase(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPageInfoBase::DiscoveryPageInfoBase"
            _overload: overloads.cGcDiscoveryPageData.DiscoveryPageInfoBase.DiscoveryPageInfoBase.overloads = "cGcDiscoveryPageData::DiscoveryPageInfoBase *, const cGcDiscoveryPageData::DiscoveryPageInfoBase *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcDiscoveryPageData.DiscoveryPageInfoBase.DiscoveryPageInfoBase.overloads):
                cls._overload = overload_args
                return cls
    class DiscoveryPagePlanetInfo:
        class RefreshDiscoveryRenders(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::RefreshDiscoveryRenders"
        class InitPlanetDiscoveriesPreview(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::InitPlanetDiscoveriesPreview"
        class DiscoveryPagePlanetInfo(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::DiscoveryPagePlanetInfo"
        class SetDiscoveriesFilter(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::SetDiscoveriesFilter"
        class SetSelectedDiscovery(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::SetSelectedDiscovery"
        class JumpToDiscoveriesPageBy01Pct(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::JumpToDiscoveriesPageBy01Pct"
        class PreviousDiscoveriesPage(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::PreviousDiscoveriesPage"
        class NextDiscoveriesPage(HookFactory):
            _name = "cGcDiscoveryPageData::DiscoveryPagePlanetInfo::NextDiscoveriesPage"
    class cGcDiscoveryPageData(HookFactory):
        _name = "cGcDiscoveryPageData::cGcDiscoveryPageData"
    class StartFetch(HookFactory):
        _name = "cGcDiscoveryPageData::StartFetch"
    class CleanUp(HookFactory):
        _name = "cGcDiscoveryPageData::CleanUp"
    class UpdateRender(HookFactory):
        _name = "cGcDiscoveryPageData::UpdateRender"
    class FetchPlanetData(HookFactory):
        _name = "cGcDiscoveryPageData::FetchPlanetData"
    class RequestViewSpecificDiscoveryOnOpen(HookFactory):
        _name = "cGcDiscoveryPageData::RequestViewSpecificDiscoveryOnOpen"
    class ClearViewOnOpenRequest(HookFactory):
        _name = "cGcDiscoveryPageData::ClearViewOnOpenRequest"
    class PopulateFromDiscoveryExport(HookFactory):
        _name = "cGcDiscoveryPageData::PopulateFromDiscoveryExport"
    class GetNumItemsInSystemsList(HookFactory):
        _name = "cGcDiscoveryPageData::GetNumItemsInSystemsList"
    class SetSelectedSolarSystem(HookFactory):
        _name = "cGcDiscoveryPageData::SetSelectedSolarSystem"
    class NextSystemPage(HookFactory):
        _name = "cGcDiscoveryPageData::NextSystemPage"
    class PreviousSystemPage(HookFactory):
        _name = "cGcDiscoveryPageData::PreviousSystemPage"
    class UpdateRenameDiscovery(HookFactory):
        _name = "cGcDiscoveryPageData::UpdateRenameDiscovery"
    class UpdateWaypointStates(HookFactory):
        _name = "cGcDiscoveryPageData::UpdateWaypointStates"
    class GetAnimWaitTimer(HookFactory):
        _name = "cGcDiscoveryPageData::GetAnimWaitTimer"
    class RequestCreatureAnim(HookFactory):
        _name = "cGcDiscoveryPageData::RequestCreatureAnim"
    class PlayedFirstCreatureAnim(HookFactory):
        _name = "cGcDiscoveryPageData::PlayedFirstCreatureAnim"
    class HasPlayedFirstCreatureAnim(HookFactory):
        _name = "cGcDiscoveryPageData::HasPlayedFirstCreatureAnim"
    class HasDiscoveryNode(HookFactory):
        _name = "cGcDiscoveryPageData::HasDiscoveryNode"

class cGcDiscoveryPagePlanetTask:
    class Start(HookFactory):
        _name = "cGcDiscoveryPagePlanetTask::Start"
    class Update(HookFactory):
        _name = "cGcDiscoveryPagePlanetTask::Update"
    class Destroy(HookFactory):
        _name = "cGcDiscoveryPagePlanetTask::Destroy"

class cGcFleetPageData:
    class MoveToNextDebriefLogEntryStage(HookFactory):
        _name = "cGcFleetPageData::MoveToNextDebriefLogEntryStage"
    class Update(HookFactory):
        _name = "cGcFleetPageData::Update"
    class SetFocusNode(HookFactory):
        _name = "cGcFleetPageData::SetFocusNode"
    class SetupPurchasableFrigate(HookFactory):
        _name = "cGcFleetPageData::SetupPurchasableFrigate"
    class GetTraitLineDirection(HookFactory):
        _name = "cGcFleetPageData::GetTraitLineDirection"
    class StopDebriefAudio(HookFactory):
        _name = "cGcFleetPageData::StopDebriefAudio"

class cGcMissionPageData:
    class UpdateSelectedMission(HookFactory):
        _name = "cGcMissionPageData::UpdateSelectedMission"

class ScrollBarState:
    class ScrollBarRenderFunction(HookFactory):
        _name = "ScrollBarState::ScrollBarRenderFunction"

class TextScrollBarState:
    class TextScrollBarRenderFunction(HookFactory):
        _name = "TextScrollBarState::TextScrollBarRenderFunction"

class cGcSeasonPageData:
    class CacheStats(HookFactory):
        _name = "cGcSeasonPageData::CacheStats"
    class SetStageIndex(HookFactory):
        _name = "cGcSeasonPageData::SetStageIndex"
    class GetTransitionProgress(HookFactory):
        _name = "cGcSeasonPageData::GetTransitionProgress"
    class GetAlpha(HookFactory):
        _name = "cGcSeasonPageData::GetAlpha"
    class SetupInitialPositions(HookFactory):
        _name = "cGcSeasonPageData::SetupInitialPositions"

class cGcStoriesPageData:
    class Reset(HookFactory):
        _name = "cGcStoriesPageData::Reset"
    class SelectCategory(HookFactory):
        _name = "cGcStoriesPageData::SelectCategory"
    class UpdateCategory(HookFactory):
        _name = "cGcStoriesPageData::UpdateCategory"

class cGcCustomWonderTextEntryHandler:
    class EndTextEntry(HookFactory):
        _name = "cGcCustomWonderTextEntryHandler::EndTextEntry"
    class Update(HookFactory):
        _name = "cGcCustomWonderTextEntryHandler::Update"

class cGcListOption:
    class GetTranslatedDefaultValue(HookFactory):
        _templates = ("T0", )
        _name = "cGcListOption<{T0}>::GetTranslatedDefaultValue"
    class UpdateOption(HookFactory):
        _templates = ("T0", )
        _name = "cGcListOption<{T0}>::UpdateOption"
    class UpdateUI(HookFactory):
        _templates = ("T0", )
        _name = "cGcListOption<{T0}>::UpdateUI"
    class CreateElement(HookFactory):
        _templates = ("T0", )
        _name = "cGcListOption<{T0}>::CreateElement"

class cGcOption:
    class GetTranslatedDefaultValue(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::GetTranslatedDefaultValue"
    class TranslateDescription(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::TranslateDescription"
    class GetDescription(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::GetDescription"
    class GetName(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::GetName"
    class IsNonDefault(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::IsNonDefault"
    class HasChanges(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::HasChanges"
    class DiscardChanges(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::DiscardChanges"
    class ResetToDefault(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::ResetToDefault"
    class Apply(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::Apply"
    class Initialize(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::Initialize"
    class SetOptionsMenuValue(HookFactory):
        _templates = ("T0", )
        _name = "cGcOption<{T0}>::SetOptionsMenuValue"

class cGcSolarSystemQuery:
    class cGcSolarSystemQuery(HookFactory):
        _name = "cGcSolarSystemQuery::cGcSolarSystemQuery"
    class GetPlanetInfo(HookFactory):
        _name = "cGcSolarSystemQuery::GetPlanetInfo"
    class Run(HookFactory):
        _name = "cGcSolarSystemQuery::Run"

class cGcFEElementLayout:
    class cGcFEElementLayout(HookFactory):
        _name = "cGcFEElementLayout::cGcFEElementLayout"
    class GenerateEventsRecursive(HookFactory):
        _name = "cGcFEElementLayout::GenerateEventsRecursive"

class cGcFrontendPageBasePartPalette:
    class Activate(HookFactory):
        _name = "cGcFrontendPageBasePartPalette::Activate"
    class Render(HookFactory):
        _name = "cGcFrontendPageBasePartPalette::Render"
    class UpdateRender(HookFactory):
        _name = "cGcFrontendPageBasePartPalette::UpdateRender"

class Compute(HookFactory):
    _name = "Compute"

class GetMaxTemplateDepth(HookFactory):
    _name = "GetMaxTemplateDepth"

class CountTemplateBits(HookFactory):
    _name = "CountTemplateBits"

class cGcFrontendPageTree:
    class TreeBox:
        class TreeBox(HookFactory):
            _name = "cGcFrontendPageTree::TreeBox::TreeBox"
        class Clear(HookFactory):
            _name = "cGcFrontendPageTree::TreeBox::Clear"
        class Draw(HookFactory):
            _name = "cGcFrontendPageTree::TreeBox::Draw"
    class LinesRenderFunction(HookFactory):
        _name = "cGcFrontendPageTree::LinesRenderFunction"
    class DrawLines(HookFactory):
        _name = "cGcFrontendPageTree::DrawLines"
    class GetSubLayerPos(HookFactory):
        _name = "cGcFrontendPageTree::GetSubLayerPos"

class CalculateDepth(HookFactory):
    _name = "CalculateDepth"

class CountTreeBits(HookFactory):
    _name = "CountTreeBits"

class RenderPowerIcon(HookFactory):
    _name = "RenderPowerIcon"

class DrawRandomiseIcon(HookFactory):
    _name = "DrawRandomiseIcon"

class cGcFrontendPageClaimBase:
    class ShouldDoSeason9CustomPuzzle(HookFactory):
        _name = "cGcFrontendPageClaimBase::ShouldDoSeason9CustomPuzzle"
    class DoBaseClaimOptions(HookFactory):
        _name = "cGcFrontendPageClaimBase::DoBaseClaimOptions"
    class IsPositionOverlappingPlanetBase(HookFactory):
        _name = "cGcFrontendPageClaimBase::IsPositionOverlappingPlanetBase"

class cGcFrontendPageCraftingTree:
    class ShouldRequestCraftingTree(HookFactory):
        _name = "cGcFrontendPageCraftingTree::ShouldRequestCraftingTree"
    class DoCraftingTree(HookFactory):
        _name = "cGcFrontendPageCraftingTree::DoCraftingTree"
    class FindNodeToHighlight(HookFactory):
        _name = "cGcFrontendPageCraftingTree::FindNodeToHighlight"
    class BuildTreeItem(HookFactory):
        _name = "cGcFrontendPageCraftingTree::BuildTreeItem"
    class UpdateTreeNode(HookFactory):
        _name = "cGcFrontendPageCraftingTree::UpdateTreeNode"
    class DoPopUp(HookFactory):
        _name = "cGcFrontendPageCraftingTree::DoPopUp"

class cGcCreatureFeederComponent:
    class OnAttached(HookFactory):
        _name = "cGcCreatureFeederComponent::OnAttached"
    class GetTypedComponent(HookFactory):
        _name = "cGcCreatureFeederComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureFeederComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureFeederComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcCreatureFeederComponent::DefaultRenderNGui"
    class Prepare(HookFactory):
        _name = "cGcCreatureFeederComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureFeederComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureFeederComponent::RenderNGui"
    class UpdateAttractor(HookFactory):
        _name = "cGcCreatureFeederComponent::UpdateAttractor"
    class RemoveMeal(HookFactory):
        _name = "cGcCreatureFeederComponent::RemoveMeal"
    class DispenseBait(HookFactory):
        _name = "cGcCreatureFeederComponent::DispenseBait"

class ComponentInstancercGcCreatureFeederComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureFeederComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureFeederComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureFeederComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureFeederComponent::DestructInstance"

class cGcFrontendPageCreatureFood:
    class GetFeeder(HookFactory):
        _name = "cGcFrontendPageCreatureFood::GetFeeder"
    class Update(HookFactory):
        _name = "cGcFrontendPageCreatureFood::Update"
    class Render(HookFactory):
        _name = "cGcFrontendPageCreatureFood::Render"

class cGcCreatureHarvesterComponent:
    class OnAttached(HookFactory):
        _name = "cGcCreatureHarvesterComponent::OnAttached"
    class GetTypedComponent(HookFactory):
        _name = "cGcCreatureHarvesterComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureHarvesterComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureHarvesterComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcCreatureHarvesterComponent::DefaultRenderNGui"
    class Prepare(HookFactory):
        _name = "cGcCreatureHarvesterComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureHarvesterComponent::Update"
    class CanHarvest(HookFactory):
        _name = "cGcCreatureHarvesterComponent::CanHarvest"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureHarvesterComponent::RenderNGui"
    class PlayHarvestAnim(HookFactory):
        _name = "cGcCreatureHarvesterComponent::PlayHarvestAnim"
    class Harvest(HookFactory):
        _name = "cGcCreatureHarvesterComponent::Harvest"

class cGcFrontendPageCreatureHarvester:
    class Render(HookFactory):
        _name = "cGcFrontendPageCreatureHarvester::Render"

class cGcFrontendPageCreaturePet:
    class Render(HookFactory):
        _name = "cGcFrontendPageCreaturePet::Render"
    class SetNeedsModelRefresh(HookFactory):
        _name = "cGcFrontendPageCreaturePet::SetNeedsModelRefresh"

class cGcDifficultySettingsConfirmHandlerFrontend:
    class DoConfirm(HookFactory):
        _name = "cGcDifficultySettingsConfirmHandlerFrontend::DoConfirm"

class cGcFrontendPageDifficultySettings:
    class Render(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::Render"
    class DoDifficultySetting(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoDifficultySetting"
    class ValidateSubOption(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::ValidateSubOption"
    class DoPresets(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoPresets"
    class DoSettings(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoSettings"
    class DoSettingOptions(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoSettingOptions"
    class DoDifficultyDetailDescription(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoDifficultyDetailDescription"
    class DoApplySettingsWarningPopup(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::DoApplySettingsWarningPopup"
    class HasChangesThatWouldDisableAchievements(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::HasChangesThatWouldDisableAchievements"
    class GetApplySettingsWarnings(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::GetApplySettingsWarnings"
    class OnDifficultyConfirmClosed_Exit(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::OnDifficultyConfirmClosed_Exit"
    class OnDifficultyConfirmClosed_Apply(HookFactory):
        _name = "cGcFrontendPageDifficultySettings::OnDifficultyConfirmClosed_Apply"
    class cGcErrorMessageHandler:
        class Update(HookFactory):
            _name = "cGcFrontendPageDifficultySettings::cGcErrorMessageHandler::Update"

class hknpClosestHitCollector:
    class getHits(HookFactory):
        _name = "hknpClosestHitCollector::getHits"
    class reset(HookFactory):
        _name = "hknpClosestHitCollector::reset"
    class addHit(HookFactory):
        _name = "hknpClosestHitCollector::addHit"

class cTkBBox2d:
    class GetCenter(HookFactory):
        _name = "cTkBBox2d::GetCenter"

class cTkNGui:
    class IsMouseInside(HookFactory):
        _name = "cTkNGui::IsMouseInside"
    class cTkNGui(HookFactory):
        _name = "cTkNGui::cTkNGui"
    class AddElement(HookFactory):
        _name = "cTkNGui::AddElement"
    class AddElementToLayout(HookFactory):
        _name = "cTkNGui::AddElementToLayout"
    class CalculateElementSize(HookFactory):
        _name = "cTkNGui::CalculateElementSize"
    class ClipBegin(HookFactory):
        _name = "cTkNGui::ClipBegin"
    class DoBegin(HookFactory):
        _name = "cTkNGui::DoBegin"
    class DoElement(HookFactory):
        _name = "cTkNGui::DoElement"
    class DoElementGraphic(HookFactory):
        _name = "cTkNGui::DoElementGraphic"
    class DoElementText(HookFactory):
        _name = "cTkNGui::DoElementText"
    class DoEnd(HookFactory):
        _name = "cTkNGui::DoEnd"
    class DoLayerBegin(HookFactory):
        _name = "cTkNGui::DoLayerBegin"
    class DoLayerEnd(HookFactory):
        _name = "cTkNGui::DoLayerEnd"
    class GetForcedStyle(HookFactory):
        _name = "cTkNGui::GetForcedStyle"
    class GetInputState(HookFactory):
        _name = "cTkNGui::GetInputState"
    class LayerBegin(HookFactory):
        _name = "cTkNGui::LayerBegin"
    class LoadFontFile(HookFactory):
        _name = "cTkNGui::LoadFontFile"
    class LoadImageFile(HookFactory):
        _name = "cTkNGui::LoadImageFile"
    class PopForcedStyle(HookFactory):
        _name = "cTkNGui::PopForcedStyle"
    class PrefetchImageFile(HookFactory):
        _name = "cTkNGui::PrefetchImageFile"
    class PushForcedStyle(HookFactory):
        _name = "cTkNGui::PushForcedStyle"
    class SetWindowClipRegion(HookFactory):
        _name = "cTkNGui::SetWindowClipRegion"
    class TransformPointToFrameSpace(HookFactory):
        _name = "cTkNGui::TransformPointToFrameSpace"
    class TransformPointToLocalSpace(HookFactory):
        _name = "cTkNGui::TransformPointToLocalSpace"

class cGcNGuiText:
    class SetText(HookFactory):
        _name = "cGcNGuiText::SetText"
        _overload: overloads.cGcNGuiText.SetText.overloads = "cGcNGuiText *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNGuiText.SetText.overloads):
            cls._overload = overload_args
            return cls
    class Render(HookFactory):
        _name = "cGcNGuiText::Render"
    class ApplyVROverrides_Text(HookFactory):
        _name = "cGcNGuiText::ApplyVROverrides_Text"
    class ApplyAccessibleOverrides_Text(HookFactory):
        _name = "cGcNGuiText::ApplyAccessibleOverrides_Text"
    class Convert(HookFactory):
        _name = "cGcNGuiText::Convert"
    class GetSceneTreeText(HookFactory):
        _name = "cGcNGuiText::GetSceneTreeText"
    class EditElement(HookFactory):
        _name = "cGcNGuiText::EditElement"
    class SetData(HookFactory):
        _name = "cGcNGuiText::SetData"
    class SetFromPreset(HookFactory):
        _name = "cGcNGuiText::SetFromPreset"
    class AttachMetadata(HookFactory):
        _name = "cGcNGuiText::AttachMetadata"
    class GetSceneTreeIcon(HookFactory):
        _name = "cGcNGuiText::GetSceneTreeIcon"
    class cGcNGuiText(HookFactory):
        _name = "cGcNGuiText::cGcNGuiText"

class cTkCollisionFilter:
    class Construct(HookFactory):
        _name = "cTkCollisionFilter::Construct"
    class Destroy(HookFactory):
        _name = "cTkCollisionFilter::Destroy"
    class DisableCollisionsBetween(HookFactory):
        _name = "cTkCollisionFilter::DisableCollisionsBetween"
    class EnableCollisionsBetween(HookFactory):
        _name = "cTkCollisionFilter::EnableCollisionsBetween"
    class Prepare(HookFactory):
        _name = "cTkCollisionFilter::Prepare"
    class SetVehicleBroadphaseFunc(HookFactory):
        _name = "cTkCollisionFilter::SetVehicleBroadphaseFunc"

class cGcAlienPuzzleOption:
    class cGcAlienPuzzleOption(HookFactory):
        _name = "cGcAlienPuzzleOption::cGcAlienPuzzleOption"
        _overload: overloads.cGcAlienPuzzleOption.cGcAlienPuzzleOption.overloads = "cGcAlienPuzzleOption *, const cGcAlienPuzzleOption *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAlienPuzzleOption.cGcAlienPuzzleOption.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAlienPuzzleOption::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAlienPuzzleOption::FixDown"
    class FixUp(HookFactory):
        _name = "cGcAlienPuzzleOption::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAlienPuzzleOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPuzzleOption::WriteToXMLNodeExplicit"

class cGcFrontendPageDiscovery:
    class UpdateDiscoveries(HookFactory):
        _name = "cGcFrontendPageDiscovery::UpdateDiscoveries"
    class DoDiscoveries(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveries"
    class UpdateDisplayState(HookFactory):
        _name = "cGcFrontendPageDiscovery::UpdateDisplayState"
    class DoDiscoveryPopupTitle(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryPopupTitle"
    class SetAllPopupButtonsEmpty(HookFactory):
        _name = "cGcFrontendPageDiscovery::SetAllPopupButtonsEmpty"
    class DoUploadDiscoveryButtonAndInput(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoUploadDiscoveryButtonAndInput"
    class DoRenameDiscoveryButtonAndInput(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoRenameDiscoveryButtonAndInput"
    class DoReportDiscoveryButtonAndInput(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoReportDiscoveryButtonAndInput"
    class DoSectorPopup(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSectorPopup"
    class DoSystemPopup(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSystemPopup"
    class DoPlanetPopup(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetPopup"
    class DoPlanetDiscoveryPreviewPopup(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetDiscoveryPreviewPopup"
    class DoDiscoveryPopup(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryPopup"
    class DoDiscoveryPopupBaseInfo(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryPopupBaseInfo"
    class DoDiscoveryUploadNotify(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryUploadNotify"
    class DiscoveryProgressGauge(HookFactory):
        _name = "cGcFrontendPageDiscovery::DiscoveryProgressGauge"
    class DoSectorPanel(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSectorPanel"
    class UploadAndReward(HookFactory):
        _name = "cGcFrontendPageDiscovery::UploadAndReward"
    class UploadAndRewardAll(HookFactory):
        _name = "cGcFrontendPageDiscovery::UploadAndRewardAll"
    class CanRename(HookFactory):
        _name = "cGcFrontendPageDiscovery::CanRename"
    class GetDisplayStatus(HookFactory):
        _name = "cGcFrontendPageDiscovery::GetDisplayStatus"
    class SetDiscoveryDisplayStatus(HookFactory):
        _name = "cGcFrontendPageDiscovery::SetDiscoveryDisplayStatus"
    class DoSystemView(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSystemView"
    class DoSystemInfo(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSystemInfo"
    class DoSystemIcons(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoSystemIcons"
    class DoPlanetView(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetView"
    class DoPlanetInfo(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetInfo"
    class DoDiscoveryView(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryView"
    class GetDiscoveryHintString(HookFactory):
        _name = "cGcFrontendPageDiscovery::GetDiscoveryHintString"
    class DoDiscoveryInfo(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryInfo"
    class DoDiscoveryTitle(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoDiscoveryTitle"
    class DoPlanetsDisplay(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetsDisplay"
    class DoPlanetaryMappingView(HookFactory):
        _name = "cGcFrontendPageDiscovery::DoPlanetaryMappingView"

class cGcCreatureRoleData:
    class cGcCreatureRoleData(HookFactory):
        _name = "cGcCreatureRoleData::cGcCreatureRoleData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureRoleData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRoleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRoleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleData::WriteToXMLNodeExplicit"

class cGcFrontendPageEggMachine:
    class GetEggMachine(HookFactory):
        _name = "cGcFrontendPageEggMachine::GetEggMachine"
    class Render(HookFactory):
        _name = "cGcFrontendPageEggMachine::Render"
    class DoSubtitle(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoSubtitle"
    class GetInputSlotsLayers(HookFactory):
        _name = "cGcFrontendPageEggMachine::GetInputSlotsLayers"
    class DoSlot(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoSlot"
    class DoSlotDosage(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoSlotDosage"
    class DoButton(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoButton"
    class DoEggInfo(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoEggInfo"
    class DoModifyingInfoSlotAnim(HookFactory):
        _name = "cGcFrontendPageEggMachine::DoModifyingInfoSlotAnim"
    class GiveBackItemsOnClose(HookFactory):
        _name = "cGcFrontendPageEggMachine::GiveBackItemsOnClose"

class cGcFrontendPageInfoPortal:
    class Render(HookFactory):
        _name = "cGcFrontendPageInfoPortal::Render"
    class DoGuideContent(HookFactory):
        _name = "cGcFrontendPageInfoPortal::DoGuideContent"
    class DoMilestonesContent(HookFactory):
        _name = "cGcFrontendPageInfoPortal::DoMilestonesContent"
    class DoCataloguesContent(HookFactory):
        _name = "cGcFrontendPageInfoPortal::DoCataloguesContent"
    class LoadStoriesPageData(HookFactory):
        _name = "cGcFrontendPageInfoPortal::LoadStoriesPageData"
    class FindWikiHint(HookFactory):
        _name = "cGcFrontendPageInfoPortal::FindWikiHint"
    class GetRandomJourneyStatIndex(HookFactory):
        _name = "cGcFrontendPageInfoPortal::GetRandomJourneyStatIndex"
    class PrepareWikiItems(HookFactory):
        _name = "cGcFrontendPageInfoPortal::PrepareWikiItems"

class cGcFrontendPageInteractions:
    class CountListElements(HookFactory):
        _name = "cGcFrontendPageInteractions::CountListElements"
    class GetListElement(HookFactory):
        _name = "cGcFrontendPageInteractions::GetListElement"
    class ProcessDescription(HookFactory):
        _name = "cGcFrontendPageInteractions::ProcessDescription"
    class TeleporterNexusEndpoint:
        class TeleporterNexusEndpoint(HookFactory):
            _name = "cGcFrontendPageInteractions::TeleporterNexusEndpoint::TeleporterNexusEndpoint"
            _overload: overloads.cGcFrontendPageInteractions.TeleporterNexusEndpoint.TeleporterNexusEndpoint.overloads = "cGcFrontendPageInteractions::TeleporterNexusEndpoint *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcFrontendPageInteractions.TeleporterNexusEndpoint.TeleporterNexusEndpoint.overloads):
                cls._overload = overload_args
                return cls
    class CurrentLanguageRequiresFullWidthCharacterSupport(HookFactory):
        _name = "cGcFrontendPageInteractions::CurrentLanguageRequiresFullWidthCharacterSupport"
    class DoInteraction(HookFactory):
        _name = "cGcFrontendPageInteractions::DoInteraction"
    class UpdateIntermediateInteractionPage(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateIntermediateInteractionPage"
    class DoIntermediateInteractionPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoIntermediateInteractionPage"
    class GetPetRadialColour(HookFactory):
        _name = "cGcFrontendPageInteractions::GetPetRadialColour"
    class DoRadialInteractionPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoRadialInteractionPage"
    class RadialInteractionPageRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::RadialInteractionPageRenderFunction"
    class DoTitleBar(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTitleBar"
    class DoOption(HookFactory):
        _name = "cGcFrontendPageInteractions::DoOption"
    class DoRadialOption(HookFactory):
        _name = "cGcFrontendPageInteractions::DoRadialOption"
    class DoTeleporterOption(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleporterOption"
    class DoConsolePanel(HookFactory):
        _name = "cGcFrontendPageInteractions::DoConsolePanel"
    class SubstituteFleetDetailsIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteFleetDetailsIntoString"
    class SubstituteSpacePOIDetailsIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteSpacePOIDetailsIntoString"
    class SubtituteMissionTimeIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubtituteMissionTimeIntoString"
    class SubtituteFoodDetailsIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubtituteFoodDetailsIntoString"
    class SubstituteShipNameIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteShipNameIntoString"
    class SubstituteWeaponNameIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteWeaponNameIntoString"
    class SubstitutePlanetNameIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstitutePlanetNameIntoString"
    class SubstituteCrewNamesIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteCrewNamesIntoString"
    class SubtituteTechShopTypeIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubtituteTechShopTypeIntoString"
    class SubstituteMessageBeaconMessageIntoString(HookFactory):
        _name = "cGcFrontendPageInteractions::SubstituteMessageBeaconMessageIntoString"
    class DoTalkPanel(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTalkPanel"
    class DoDescriptionPanel(HookFactory):
        _name = "cGcFrontendPageInteractions::DoDescriptionPanel"
    class DoTextFrame(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTextFrame"
    class DoInteractionFromEntry(HookFactory):
        _name = "cGcFrontendPageInteractions::DoInteractionFromEntry"
    class DoOptionsFromEntry(HookFactory):
        _name = "cGcFrontendPageInteractions::DoOptionsFromEntry"
    class UpdateOptionHighlighting(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateOptionHighlighting"
    class AreAllOptionsBlocked(HookFactory):
        _name = "cGcFrontendPageInteractions::AreAllOptionsBlocked"
    class DoResponseTextPanel(HookFactory):
        _name = "cGcFrontendPageInteractions::DoResponseTextPanel"
    class DoAdvancedInteractionFlow(HookFactory):
        _name = "cGcFrontendPageInteractions::DoAdvancedInteractionFlow"
    class DoNewTech(HookFactory):
        _name = "cGcFrontendPageInteractions::DoNewTech"
    class DoNewProduct(HookFactory):
        _name = "cGcFrontendPageInteractions::DoNewProduct"
    class DoPatchNotes(HookFactory):
        _name = "cGcFrontendPageInteractions::DoPatchNotes"
    class TidyUpTextureOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::TidyUpTextureOptions"
    class DoCustomisationDescriptorGroupOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationDescriptorGroupOptions"
    class DoCustomisationTextureGroupOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationTextureGroupOptions"
    class DoCustomisationPresetsOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationPresetsOptions"
    class DoCustomisationBoneScaleOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationBoneScaleOptions"
    class DoCustomisationColourGroupOptions(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationColourGroupOptions"
    class DoCustomisationBannerGroup(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationBannerGroup"
    class DoCustomisationHoverTip(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationHoverTip"
    class DoCustomisationPlayerTitle(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationPlayerTitle"
    class DoCustomisationJetpack(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationJetpack"
    class DoCustomisationFreighterEngine(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCustomisationFreighterEngine"
    class RefreshCustomisationResource(HookFactory):
        _name = "cGcFrontendPageInteractions::RefreshCustomisationResource"
    class ChangeRaceDialog(HookFactory):
        _name = "cGcFrontendPageInteractions::ChangeRaceDialog"
    class ChangePresetDialog(HookFactory):
        _name = "cGcFrontendPageInteractions::ChangePresetDialog"
    class AcceptChangesDialog(HookFactory):
        _name = "cGcFrontendPageInteractions::AcceptChangesDialog"
    class ChangesOutfit(HookFactory):
        _name = "cGcFrontendPageInteractions::ChangesOutfit"
    class DoCharacterCustomisation(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCharacterCustomisation"
    class DoTeleporter(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleporter"
    class DoTeleporterNexus(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleporterNexus"
    class FormatGridStatValue(HookFactory):
        _name = "cGcFrontendPageInteractions::FormatGridStatValue"
    class DoBaseGridInputElement(HookFactory):
        _name = "cGcFrontendPageInteractions::DoBaseGridInputElement"
    class DoBaseGridPowerOutputElement(HookFactory):
        _name = "cGcFrontendPageInteractions::DoBaseGridPowerOutputElement"
    class DoHotspotInfoElement(HookFactory):
        _name = "cGcFrontendPageInteractions::DoHotspotInfoElement"
    class DoBaseGridInfoElement(HookFactory):
        _name = "cGcFrontendPageInteractions::DoBaseGridInfoElement"
    class DoBaseGridResourceOutputElement(HookFactory):
        _name = "cGcFrontendPageInteractions::DoBaseGridResourceOutputElement"
    class DoCapacityWheel(HookFactory):
        _name = "cGcFrontendPageInteractions::DoCapacityWheel"
    class DoAnimatedWheelRate(HookFactory):
        _name = "cGcFrontendPageInteractions::DoAnimatedWheelRate"
    class DoAnimateAndSetColour(HookFactory):
        _name = "cGcFrontendPageInteractions::DoAnimateAndSetColour"
    class DoAnimatedArrows(HookFactory):
        _name = "cGcFrontendPageInteractions::DoAnimatedArrows"
    class DoByteBeatSwitchPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoByteBeatSwitchPage"
    class ByteBeatSwitchBaseNoteRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::ByteBeatSwitchBaseNoteRenderFunction"
    class ByteBeatSwitchArpNoteRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::ByteBeatSwitchArpNoteRenderFunction"
    class ByteBeatSwitchRhythmRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::ByteBeatSwitchRhythmRenderFunction"
    class ByteBeatSwitchBeatRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::ByteBeatSwitchBeatRenderFunction"
    class ByteBeatSwitchPanelRenderFunction(HookFactory):
        _name = "cGcFrontendPageInteractions::ByteBeatSwitchPanelRenderFunction"
    class DoBaseGridPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoBaseGridPage"
    class DoGridInputOutputSlot(HookFactory):
        _name = "cGcFrontendPageInteractions::DoGridInputOutputSlot"
    class OnConfirmReportMessageBeaconClosed(HookFactory):
        _name = "cGcFrontendPageInteractions::OnConfirmReportMessageBeaconClosed"
    class DoMessageModule(HookFactory):
        _name = "cGcFrontendPageInteractions::DoMessageModule"
    class DoByteBeat(HookFactory):
        _name = "cGcFrontendPageInteractions::DoByteBeat"
    class DoScrollControls(HookFactory):
        _name = "cGcFrontendPageInteractions::DoScrollControls"
    class SetupOptionAndListForQuickPress(HookFactory):
        _name = "cGcFrontendPageInteractions::SetupOptionAndListForQuickPress"
    class SetupOptionsArray(HookFactory):
        _name = "cGcFrontendPageInteractions::SetupOptionsArray"
    class DoTeleperporterNexusThumbnailPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleperporterNexusThumbnailPage"
    class DoTeleperporterNexusDescriptionPage(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleperporterNexusDescriptionPage"
    class TeleportWhileOnMPMissionDialog(HookFactory):
        _name = "cGcFrontendPageInteractions::TeleportWhileOnMPMissionDialog"
    class UpdateTeleportNexusFilter(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleportNexusFilter"
    class UpdateTeleportesNexusEndpoints(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleportesNexusEndpoints"
    class GenerateBaseEndpoint(HookFactory):
        _name = "cGcFrontendPageInteractions::GenerateBaseEndpoint"
    class GenerateFreighterEndpoint(HookFactory):
        _name = "cGcFrontendPageInteractions::GenerateFreighterEndpoint"
    class ComposeBaseTeleporterEndpoint(HookFactory):
        _name = "cGcFrontendPageInteractions::ComposeBaseTeleporterEndpoint"
    class ComposeStationTeleporterEndpoints(HookFactory):
        _name = "cGcFrontendPageInteractions::ComposeStationTeleporterEndpoints"
    class UpdateFilterEntriesCount(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateFilterEntriesCount"
    class ComposeMostRecentTeleporterEndpoints(HookFactory):
        _name = "cGcFrontendPageInteractions::ComposeMostRecentTeleporterEndpoints"
    class ComposeFeaturedTeleporterEndpoints(HookFactory):
        _name = "cGcFrontendPageInteractions::ComposeFeaturedTeleporterEndpoints"
    class EnpointExistsInNexusEndpoints(HookFactory):
        _name = "cGcFrontendPageInteractions::EnpointExistsInNexusEndpoints"
    class UpdateTeleporterNexusElement(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusElement"
    class UpdateTeleporterNexusElementGraphics(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusElementGraphics"
    class UpdateTeleporterNexusElementIconsAndSubtitle(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusElementIconsAndSubtitle"
    class UpdateTeleporterNexusBaseDownloadStatus(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusBaseDownloadStatus"
    class UpdateSystemInfo(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateSystemInfo"
    class UpdateTeleporterNexusBaseInfo(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusBaseInfo"
    class UpdateTeleporterNexusTeleportButton(HookFactory):
        _name = "cGcFrontendPageInteractions::UpdateTeleporterNexusTeleportButton"
    class DetectButtonLayerConfirmation(HookFactory):
        _name = "cGcFrontendPageInteractions::DetectButtonLayerConfirmation"
    class DoTeleportAction(HookFactory):
        _name = "cGcFrontendPageInteractions::DoTeleportAction"
    class NetworkIconRenderFn(HookFactory):
        _name = "cGcFrontendPageInteractions::NetworkIconRenderFn"

class GetSelectedRadialElement(HookFactory):
    _name = "GetSelectedRadialElement"

class hknpWorld:
    class getNumBodies(HookFactory):
        _name = "hknpWorld::getNumBodies"
    class getBodyQualityLibrary(HookFactory):
        _name = "hknpWorld::getBodyQualityLibrary"
    class getCollisionFilter(HookFactory):
        _name = "hknpWorld::getCollisionFilter"
    class getMaterialLibrary(HookFactory):
        _name = "hknpWorld::getMaterialLibrary"
    class getShapeTagCodec(HookFactory):
        _name = "hknpWorld::getShapeTagCodec"
    class addCollisionCaches(HookFactory):
        _name = "hknpWorld::addCollisionCaches"
    class hknpWorld(HookFactory):
        _name = "hknpWorld::hknpWorld"
    class accessSolverData(HookFactory):
        _name = "hknpWorld::accessSolverData"
    class addBodies(HookFactory):
        _name = "hknpWorld::addBodies"
    class allocateConstraintGroup(HookFactory):
        _name = "hknpWorld::allocateConstraintGroup"
    class allocateMaterial(HookFactory):
        _name = "hknpWorld::allocateMaterial"
        _overload: overloads.hknpWorld.allocateMaterial.overloads = "hknpWorld *, hknpMaterialId *, const hknpMaterialDescriptor *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpWorld.allocateMaterial.overloads):
            cls._overload = overload_args
            return cls
    class allocateMotion(HookFactory):
        _name = "hknpWorld::allocateMotion"
    class allocateMotionProperties(HookFactory):
        _name = "hknpWorld::allocateMotionProperties"
    class allocateParticlesCollider(HookFactory):
        _name = "hknpWorld::allocateParticlesCollider"
    class destroyBodies(HookFactory):
        _name = "hknpWorld::destroyBodies"
    class destroyConstraints(HookFactory):
        _name = "hknpWorld::destroyConstraints"
    class destroyMaterials(HookFactory):
        _name = "hknpWorld::destroyMaterials"
    class destroyMotionProperties(HookFactory):
        _name = "hknpWorld::destroyMotionProperties"
    class destroyMotions(HookFactory):
        _name = "hknpWorld::destroyMotions"
    class detachBodies(HookFactory):
        _name = "hknpWorld::detachBodies"
    class executeUserCommandImpl(HookFactory):
        _name = "hknpWorld::executeUserCommandImpl"
    class generateCollideTasks(HookFactory):
        _name = "hknpWorld::generateCollideTasks"
    class getActionManager(HookFactory):
        _name = "hknpWorld::getActionManager"
    class getActiveBodies(HookFactory):
        _name = "hknpWorld::getActiveBodies"
    class getAirDensity(HookFactory):
        _name = "hknpWorld::getAirDensity"
    class getBodies(HookFactory):
        _name = "hknpWorld::getBodies"
    class getCharacterProxyManager(HookFactory):
        _name = "hknpWorld::getCharacterProxyManager"
    class getCollisionQueryDispatcher(HookFactory):
        _name = "hknpWorld::getCollisionQueryDispatcher"
    class getConstraintCapacity(HookFactory):
        _name = "hknpWorld::getConstraintCapacity"
    class getConstraintGroupCapacity(HookFactory):
        _name = "hknpWorld::getConstraintGroupCapacity"
    class getConstraintGroupIds(HookFactory):
        _name = "hknpWorld::getConstraintGroupIds"
    class getConstraints(HookFactory):
        _name = "hknpWorld::getConstraints"
    class getGravity(HookFactory):
        _name = "hknpWorld::getGravity"
    class getMotionPropertiesLibrary(HookFactory):
        _name = "hknpWorld::getMotionPropertiesLibrary"
    class getName(HookFactory):
        _name = "hknpWorld::getName"
    class getNumConstraintGroups(HookFactory):
        _name = "hknpWorld::getNumConstraintGroups"
    class getNumConstraints(HookFactory):
        _name = "hknpWorld::getNumConstraints"
    class getNumParticlesColliders(HookFactory):
        _name = "hknpWorld::getNumParticlesColliders"
    class getParticlesColliderCapacity(HookFactory):
        _name = "hknpWorld::getParticlesColliderCapacity"
    class getSolverInfoPtr(HookFactory):
        _name = "hknpWorld::getSolverInfoPtr"
    class removeBodies(HookFactory):
        _name = "hknpWorld::removeBodies"
    class setAirDensity(HookFactory):
        _name = "hknpWorld::setAirDensity"
    class setCollisionFilter(HookFactory):
        _name = "hknpWorld::setCollisionFilter"
    class setEventDispatcher(HookFactory):
        _name = "hknpWorld::setEventDispatcher"
    class setGravity(HookFactory):
        _name = "hknpWorld::setGravity"
    class setName(HookFactory):
        _name = "hknpWorld::setName"
    class setSafeRegionAabb(HookFactory):
        _name = "hknpWorld::setSafeRegionAabb"
    class shiftWorld(HookFactory):
        _name = "hknpWorld::shiftWorld"
    class stepCollide(HookFactory):
        _name = "hknpWorld::stepCollide"
    class stepSolve(HookFactory):
        _name = "hknpWorld::stepSolve"
    class updateBroadPhase(HookFactory):
        _name = "hknpWorld::updateBroadPhase"
    class castAabb(HookFactory):
        _name = "hknpWorld::castAabb"
        _overload: overloads.hknpWorld.castAabb.overloads = "hknpWorld *, const hknpAabbCastQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpWorld.castAabb.overloads):
            cls._overload = overload_args
            return cls
    class castRay(HookFactory):
        _name = "hknpWorld::castRay"
    class castShape(HookFactory):
        _name = "hknpWorld::castShape"
    class getClosestPoints(HookFactory):
        _name = "hknpWorld::getClosestPoints"
    class queryAabb(HookFactory):
        _name = "hknpWorld::queryAabb"
        _overload: overloads.hknpWorld.queryAabb.overloads = "hknpWorld *, const hknpAabbQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpWorld.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryAabbNmp(HookFactory):
        _name = "hknpWorld::queryAabbNmp"
        _overload: overloads.hknpWorld.queryAabbNmp.overloads = "hknpWorld *, const hknpAabbQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpWorld.queryAabbNmp.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpWorld::queryPoint"
    class setShapeTagCodec(HookFactory):
        _name = "hknpWorld::setShapeTagCodec"

class hknpConvexShapeFunctions:
    class getNumberOfFaces(HookFactory):
        _name = "hknpConvexShapeFunctions::getNumberOfFaces"
    class getLeafShapes(HookFactory):
        _name = "hknpConvexShapeFunctions::getLeafShapes"
    class getReflectType(HookFactory):
        _name = "hknpConvexShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpConvexShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpConvexShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpConvexShapeFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpConvexShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpConvexShapeFunctions::calcBoundingSphere"
    class calcInnerRadius(HookFactory):
        _name = "hknpConvexShapeFunctions::calcInnerRadius"
    class calcInnerSphere(HookFactory):
        _name = "hknpConvexShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpConvexShapeFunctions::calcMinAngleBetweenFaces"
    class castRay(HookFactory):
        _name = "hknpConvexShapeFunctions::castRay"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpConvexShapeFunctions::convertVertexIdsToVertices"
    class getConvexVertices(HookFactory):
        _name = "hknpConvexShapeFunctions::getConvexVertices"
    class getFaceInfo(HookFactory):
        _name = "hknpConvexShapeFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpConvexShapeFunctions::getFaceVertices"
    class getMemoryFootprint(HookFactory):
        _name = "hknpConvexShapeFunctions::getMemoryFootprint"
    class getMutationSignals(HookFactory):
        _name = "hknpConvexShapeFunctions::getMutationSignals"
    class getNumberOfSupportSpheres(HookFactory):
        _name = "hknpConvexShapeFunctions::getNumberOfSupportSpheres"
    class getSignedDistances(HookFactory):
        _name = "hknpConvexShapeFunctions::getSignedDistances"
    class getSupportSpheres(HookFactory):
        _name = "hknpConvexShapeFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpConvexShapeFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpConvexShapeFunctions::getSupportingVertex"
    class getTypeName(HookFactory):
        _name = "hknpConvexShapeFunctions::getTypeName"
    class queryAabb(HookFactory):
        _name = "hknpConvexShapeFunctions::queryAabb"
        _overload: overloads.hknpConvexShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpConvexShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpConvexShapeFunctions::queryPoint"

class cGcFrontendPageJourney:
    class DoJourney(HookFactory):
        _name = "cGcFrontendPageJourney::DoJourney"
    class DoPinnedOverallJourneyMedalBlock(HookFactory):
        _name = "cGcFrontendPageJourney::DoPinnedOverallJourneyMedalBlock"
    class DoPinnedMedalBlock(HookFactory):
        _name = "cGcFrontendPageJourney::DoPinnedMedalBlock"
    class DoFactionMedalsBlock(HookFactory):
        _name = "cGcFrontendPageJourney::DoFactionMedalsBlock"
    class DoOverallJourneyMedal(HookFactory):
        _name = "cGcFrontendPageJourney::DoOverallJourneyMedal"
    class DoMedalBox(HookFactory):
        _name = "cGcFrontendPageJourney::DoMedalBox"
    class GetMedalIcon(HookFactory):
        _name = "cGcFrontendPageJourney::GetMedalIcon"
    class GetProgressText(HookFactory):
        _name = "cGcFrontendPageJourney::GetProgressText"

class cGcWaypointComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcWaypointComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcWaypointComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcWaypointComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcWaypointComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcWaypointComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcWaypointComponent::Update"
    class Release(HookFactory):
        _name = "cGcWaypointComponent::Release"
    class ShowSectorMessage(HookFactory):
        _name = "cGcWaypointComponent::ShowSectorMessage"
    class ShowDiscoveryMessage(HookFactory):
        _name = "cGcWaypointComponent::ShowDiscoveryMessage"
    class Interact(HookFactory):
        _name = "cGcWaypointComponent::Interact"
    class UpdateDiscoveryData(HookFactory):
        _name = "cGcWaypointComponent::UpdateDiscoveryData"

class ComponentInstancercGcWaypointComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcWaypointComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcWaypointComponent::ConstructInstance"

class ComponentInstancercGcAtmosphereEntryComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcAtmosphereEntryComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcAtmosphereEntryComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAtmosphereEntryComponent::ConstructInstance"

class ComponentInstancercGcCreatureBaitComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureBaitComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureBaitComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureBaitComponent::ConstructInstance"

class ComponentLoadInstancercGcWaypointComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcWaypointComponent::Register"

class cGcFrontendPageMaintenance:
    class Update(HookFactory):
        _name = "cGcFrontendPageMaintenance::Update"
    class Render(HookFactory):
        _name = "cGcFrontendPageMaintenance::Render"
    class DoMaintenanceSlots(HookFactory):
        _name = "cGcFrontendPageMaintenance::DoMaintenanceSlots"

class cGcFrontendPageManageFleet:
    class GetTimeAsString(HookFactory):
        _name = "cGcFrontendPageManageFleet::GetTimeAsString"
    class OnFleetManagerDismissFrigateDialogClosed(HookFactory):
        _name = "cGcFrontendPageManageFleet::OnFleetManagerDismissFrigateDialogClosed"
    class OnFrigateDetailsDismissFrigateDialogClosed(HookFactory):
        _name = "cGcFrontendPageManageFleet::OnFrigateDetailsDismissFrigateDialogClosed"
    class DoManageFleet(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoManageFleet"
    class DoExpeditionDetails(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionDetails"
    class DoExpeditionSelection(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionSelection"
    class DoPowerupSelection(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoPowerupSelection"
    class DoExpeditionDebrief(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionDebrief"
    class DoFrigateDetails(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFrigateDetails"
    class DoFrigateCaptain(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFrigateCaptain"
    class DoFrigateTraitDots(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFrigateTraitDots"
    class DoFrigateTraits(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFrigateTraits"
    class GetFeedAnimationProgress(HookFactory):
        _name = "cGcFrontendPageManageFleet::GetFeedAnimationProgress"
    class DoExpeditionStatList(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionStatList"
    class GetFrigateClassName(HookFactory):
        _name = "cGcFrontendPageManageFleet::GetFrigateClassName"
    class DoStatList(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoStatList"
    class DoExpeditionFrigateCountBox(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionFrigateCountBox"
    class DoFleetListEntry(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFleetListEntry"
    class DoExpeditionListEntry(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionListEntry"
    class DoExpeditionStatus(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionStatus"
    class DoFrigateClassBox(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoFrigateClassBox"
    class DoGridFlicker(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoGridFlicker"
    class HideFleetNameAndLocation(HookFactory):
        _name = "cGcFrontendPageManageFleet::HideFleetNameAndLocation"
    class DoExpeditionTypeAndName(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionTypeAndName"
    class DoExpeditionTypeDetailsPage(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionTypeDetailsPage"
    class DoExpeditionDifficulty(HookFactory):
        _name = "cGcFrontendPageManageFleet::DoExpeditionDifficulty"
    class LeavePage(HookFactory):
        _name = "cGcFrontendPageManageFleet::LeavePage"
    class CountTextSpecialListElements(HookFactory):
        _name = "cGcFrontendPageManageFleet::CountTextSpecialListElements"
    class ResetFeedFrigateInventory(HookFactory):
        _name = "cGcFrontendPageManageFleet::ResetFeedFrigateInventory"

class cGcFrontendPageManageSettlement:
    class Construct(HookFactory):
        _name = "cGcFrontendPageManageSettlement::Construct"
    class Update(HookFactory):
        _name = "cGcFrontendPageManageSettlement::Update"
    class Render(HookFactory):
        _name = "cGcFrontendPageManageSettlement::Render"
    class Setup(HookFactory):
        _name = "cGcFrontendPageManageSettlement::Setup"
    class CleanUpAndClose(HookFactory):
        _name = "cGcFrontendPageManageSettlement::CleanUpAndClose"
    class RollInitialStatsAndPerks(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RollInitialStatsAndPerks"
    class SetupProductionInventory(HookFactory):
        _name = "cGcFrontendPageManageSettlement::SetupProductionInventory"
    class RenderHeader(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderHeader"
    class RenderStats(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderStats"
    class RenderPerks(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderPerks"
    class RenderProduction(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderProduction"
    class RenderProductionSlot(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderProductionSlot"
    class RenderDebt(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderDebt"
    class RenderUnowned(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderUnowned"
    class RenderReport(HookFactory):
        _name = "cGcFrontendPageManageSettlement::RenderReport"
    class OnConfirmAbandonSettlementClosed(HookFactory):
        _name = "cGcFrontendPageManageSettlement::OnConfirmAbandonSettlementClosed"
    class GetStatFillColour(HookFactory):
        _name = "cGcFrontendPageManageSettlement::GetStatFillColour"

class cGcFrontendPageMissionGiver:
    class UpdateMissionPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::UpdateMissionPage"
    class UpdateMissionDescriptionPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::UpdateMissionDescriptionPage"
    class UpdateMissionHandInPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::UpdateMissionHandInPage"
    class HasLocalMissionInProgress(HookFactory):
        _name = "cGcFrontendPageMissionGiver::HasLocalMissionInProgress"
    class HasHandInWaitingFromOtherBoard(HookFactory):
        _name = "cGcFrontendPageMissionGiver::HasHandInWaitingFromOtherBoard"
    class DoMissionPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionPage"
    class DoMissionListItem(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionListItem"
    class LayoutReward(HookFactory):
        _name = "cGcFrontendPageMissionGiver::LayoutReward"
    class DoMissionHandInPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionHandInPage"
    class DoMissionRenouncePage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionRenouncePage"
    class DoMissionDescriptionPage(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionDescriptionPage"
    class DoMissionItem(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoMissionItem"
    class DoScreenPanel(HookFactory):
        _name = "cGcFrontendPageMissionGiver::DoScreenPanel"
    class GenerateMissionRewardInfo(HookFactory):
        _name = "cGcFrontendPageMissionGiver::GenerateMissionRewardInfo"
    class GetRewardInfo(HookFactory):
        _name = "cGcFrontendPageMissionGiver::GetRewardInfo"
    class SelectMissionBoardMissionPrimaryRewardID(HookFactory):
        _name = "cGcFrontendPageMissionGiver::SelectMissionBoardMissionPrimaryRewardID"
    class FindRecursiveMissionStandingInfo(HookFactory):
        _name = "cGcFrontendPageMissionGiver::FindRecursiveMissionStandingInfo"
    class GetStandingInfo(HookFactory):
        _name = "cGcFrontendPageMissionGiver::GetStandingInfo"
    class GetAllowedMissionsListForStandardBoard(HookFactory):
        _name = "cGcFrontendPageMissionGiver::GetAllowedMissionsListForStandardBoard"
    class GetAllowedMissionsList(HookFactory):
        _name = "cGcFrontendPageMissionGiver::GetAllowedMissionsList"
    class CanUseMissionType(HookFactory):
        _name = "cGcFrontendPageMissionGiver::CanUseMissionType"
    class IsAllowed(HookFactory):
        _name = "cGcFrontendPageMissionGiver::IsAllowed"
    class HasUnusedGuildFaction(HookFactory):
        _name = "cGcFrontendPageMissionGiver::HasUnusedGuildFaction"

class cGcMissionItem:
    class cGcMissionItem(HookFactory):
        _name = "cGcMissionItem::cGcMissionItem"

class cTkNGuiStyles:
    class Blend(HookFactory):
        _name = "cTkNGuiStyles::Blend"
        _overload: overloads.cTkNGuiStyles.Blend.overloads = "cTkNGuiTextStyleData *, cTkNGuiTextStyleData *, cTkNGuiTextStyleData *, float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiStyles.Blend.overloads):
            cls._overload = overload_args
            return cls
    class RenderText(HookFactory):
        _name = "cTkNGuiStyles::RenderText"
        _overload: overloads.cTkNGuiStyles.RenderText.overloads = "cTkNGui *, void *, const char *, cTkBBox2d *, eNGuiInputType, cTkNGuiElementData *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiStyles.RenderText.overloads):
            cls._overload = overload_args
            return cls
    class GetGraphicMargins(HookFactory):
        _name = "cTkNGuiStyles::GetGraphicMargins"
    class CopyChanges(HookFactory):
        _name = "cTkNGuiStyles::CopyChanges"
        _overload: overloads.cTkNGuiStyles.CopyChanges.overloads = "cTkNGuiGraphicStyleData *, cTkNGuiGraphicStyleData *, cTkNGuiGraphicStyleData *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiStyles.CopyChanges.overloads):
            cls._overload = overload_args
            return cls
    class DrawScrollArrow(HookFactory):
        _name = "cTkNGuiStyles::DrawScrollArrow"
    class EditGraphicStyle(HookFactory):
        _name = "cTkNGuiStyles::EditGraphicStyle"
    class EditGraphicStyleData(HookFactory):
        _name = "cTkNGuiStyles::EditGraphicStyleData"
    class EditTextStyle(HookFactory):
        _name = "cTkNGuiStyles::EditTextStyle"
    class EditTextStyleData(HookFactory):
        _name = "cTkNGuiStyles::EditTextStyleData"
    class GetTextSize(HookFactory):
        _name = "cTkNGuiStyles::GetTextSize"
    class RenderGraphic(HookFactory):
        _name = "cTkNGuiStyles::RenderGraphic"
        _overload: overloads.cTkNGuiStyles.RenderGraphic.overloads = "cTkNGui *, cTkNGuiGraphicStyleData *, cTkBBox2d *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNGuiStyles.RenderGraphic.overloads):
            cls._overload = overload_args
            return cls
    class RenderShape(HookFactory):
        _name = "cTkNGuiStyles::RenderShape"

class cGcNGuiGame:
    class PushStyle(HookFactory):
        _name = "cGcNGuiGame::PushStyle"
        _overload: overloads.cGcNGuiGame.PushStyle.overloads = "cGcNGuiGame *, eNGuiGameTextType, cTkNGuiTextStyle *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNGuiGame.PushStyle.overloads):
            cls._overload = overload_args
            return cls
    class IsActive(HookFactory):
        _name = "cGcNGuiGame::IsActive"
    class GetFontSpacing(HookFactory):
        _name = "cGcNGuiGame::GetFontSpacing"
    class GetFontID(HookFactory):
        _name = "cGcNGuiGame::GetFontID"
    class DoPanelBegin(HookFactory):
        _name = "cGcNGuiGame::DoPanelBegin"
    class Initialise(HookFactory):
        _name = "cGcNGuiGame::Initialise"
    class LoadFonts(HookFactory):
        _name = "cGcNGuiGame::LoadFonts"
    class BuildSpecialImageMap(HookFactory):
        _name = "cGcNGuiGame::BuildSpecialImageMap"

class cGcNotifyGenericSection:
    class CheckConditions(HookFactory):
        _name = "cGcNotifyGenericSection::CheckConditions"
    class GetTargetMissionSurveyId(HookFactory):
        _name = "cGcNotifyGenericSection::GetTargetMissionSurveyId"
    class GetIcon(HookFactory):
        _name = "cGcNotifyGenericSection::GetIcon"
    class cGcNotifyGenericSection(HookFactory):
        _name = "cGcNotifyGenericSection::cGcNotifyGenericSection"

class cGcFrontendPageMissions:
    class DoMissionLog(HookFactory):
        _name = "cGcFrontendPageMissions::DoMissionLog"

class cGcFrontendPageMultiplayerMissionGiver:
    class DoMissionPage(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::DoMissionPage"
    class DoMultiplayerMissionItem(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::DoMultiplayerMissionItem"
    class DoMissionDescriptionPage(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::DoMissionDescriptionPage"
    class MakeParticipantsText(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::MakeParticipantsText"
    class LayoutReward(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::LayoutReward"
    class UpdateMissionDescription(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::UpdateMissionDescription"
    class HasSpecialMissionTypes(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::HasSpecialMissionTypes"
    class LeaveCurrentFireteamDialog(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::LeaveCurrentFireteamDialog"
    class StartMissionAloneDialog(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::StartMissionAloneDialog"
    class GetMultiplayerMissionsList(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::GetMultiplayerMissionsList"
    class GetMultiplayerWeekendMissionsList(HookFactory):
        _name = "cGcFrontendPageMultiplayerMissionGiver::GetMultiplayerWeekendMissionsList"

class cGcFrontendPageNetworkSettings:
    class LoadPage(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::LoadPage"
    class DoOptions(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoOptions"
    class DoPlayers(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoPlayers"
    class DoManageFriends(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoManageFriends"
    class DoFriendCodes(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoFriendCodes"
    class DoBlockedPlayers(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoBlockedPlayers"
    class DoPopupOption(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoPopupOption"
        _overload: overloads.cGcFrontendPageNetworkSettings.DoPopupOption.overloads = "cGcFrontendPage *, cGcNGuiLayer *, cGcNGuiLayer *, int, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageNetworkSettings.DoPopupOption.overloads):
            cls._overload = overload_args
            return cls
    class DoPlayerList(HookFactory):
        _name = "cGcFrontendPageNetworkSettings::DoPlayerList"

class AkMeterCtx:
    class GetTruePeak(HookFactory):
        _name = "AkMeterCtx::GetTruePeak"
    class ComputeKPower(HookFactory):
        _name = "AkMeterCtx::ComputeKPower"
    class GetKWeightedPower(HookFactory):
        _name = "AkMeterCtx::GetKWeightedPower"
    class Init(HookFactory):
        _name = "AkMeterCtx::Init"
    class MeterBufferPeakIndex(HookFactory):
        _name = "AkMeterCtx::MeterBufferPeakIndex"

class sTkInputDeviceIcon:
    class sTkInputDeviceIcon(HookFactory):
        _name = "sTkInputDeviceIcon::sTkInputDeviceIcon"

class cGcVideoOptionsInterface:
    class UpdatePresetOptions(HookFactory):
        _name = "cGcVideoOptionsInterface::UpdatePresetOptions"

class ShopItemData:
    class Set(HookFactory):
        _name = "ShopItemData::Set"
        _overload: overloads.ShopItemData.Set.overloads = "ShopItemData *, const cGcRealitySubstanceData *"
        @classmethod
        def overload(cls, overload_args: overloads.ShopItemData.Set.overloads):
            cls._overload = overload_args
            return cls
    class GeneratePrice(HookFactory):
        _name = "ShopItemData::GeneratePrice"
        _overload: overloads.ShopItemData.GeneratePrice.overloads = "ShopItemData *, const bool, const bool, const cTkSeed, const ShopItemData::eShopItemPriceType, const bool"
        @classmethod
        def overload(cls, overload_args: overloads.ShopItemData.GeneratePrice.overloads):
            cls._overload = overload_args
            return cls
    class ShopItemData(HookFactory):
        _name = "ShopItemData::ShopItemData"
    class GetGalacticAveragePrice(HookFactory):
        _name = "ShopItemData::GetGalacticAveragePrice"

class cGcFrontendInventorySearch:
    class cGcFrontendInventorySearch(HookFactory):
        _name = "cGcFrontendInventorySearch::cGcFrontendInventorySearch"

class TradeInventoryItem:
    class TradeInventoryItem(HookFactory):
        _name = "TradeInventoryItem::TradeInventoryItem"

class cGcFrontendPagePortal:
    class DoInteraction(HookFactory):
        _name = "cGcFrontendPagePortal::DoInteraction"

class cGcFrontendPagePortalDisplayUa:
    class DoInteraction(HookFactory):
        _name = "cGcFrontendPagePortalDisplayUa::DoInteraction"

class cGcFrontendPagePortalRunes:
    class DoInteraction(HookFactory):
        _name = "cGcFrontendPagePortalRunes::DoInteraction"
    class CheckUAIsValid(HookFactory):
        _name = "cGcFrontendPagePortalRunes::CheckUAIsValid"
    class TurnOffInventoryRunes(HookFactory):
        _name = "cGcFrontendPagePortalRunes::TurnOffInventoryRunes"
    class ConvertPortalCodeToUA(HookFactory):
        _name = "cGcFrontendPagePortalRunes::ConvertPortalCodeToUA"
    class ConvertUAToPortalCode(HookFactory):
        _name = "cGcFrontendPagePortalRunes::ConvertUAToPortalCode"
    class ConvertPortalCodeHexToUA(HookFactory):
        _name = "cGcFrontendPagePortalRunes::ConvertPortalCodeHexToUA"
    class ConvertUAToPortalCodeHex(HookFactory):
        _name = "cGcFrontendPagePortalRunes::ConvertUAToPortalCodeHex"

class cGcFrontendPageRefiner:
    class GetRefiner(HookFactory):
        _name = "cGcFrontendPageRefiner::GetRefiner"
    class Update(HookFactory):
        _name = "cGcFrontendPageRefiner::Update"
    class Render(HookFactory):
        _name = "cGcFrontendPageRefiner::Render"

class cGcFrontendPageSeason:
    class DoSeason(HookFactory):
        _name = "cGcFrontendPageSeason::DoSeason"
    class DoStagePanel(HookFactory):
        _name = "cGcFrontendPageSeason::DoStagePanel"
    class UpdateStageSelectStar(HookFactory):
        _name = "cGcFrontendPageSeason::UpdateStageSelectStar"
    class DoFinalStagePanel(HookFactory):
        _name = "cGcFrontendPageSeason::DoFinalStagePanel"
    class DoMilestonesPanel(HookFactory):
        _name = "cGcFrontendPageSeason::DoMilestonesPanel"
    class DoMilestonePatch(HookFactory):
        _name = "cGcFrontendPageSeason::DoMilestonePatch"
    class DoLargePinnedMilestonePatch(HookFactory):
        _name = "cGcFrontendPageSeason::DoLargePinnedMilestonePatch"
    class DoFinalMilestonePatch(HookFactory):
        _name = "cGcFrontendPageSeason::DoFinalMilestonePatch"
    class DoOptionalMilestonesReadout(HookFactory):
        _name = "cGcFrontendPageSeason::DoOptionalMilestonesReadout"
    class DoStatPanel(HookFactory):
        _name = "cGcFrontendPageSeason::DoStatPanel"
    class GetProgressText(HookFactory):
        _name = "cGcFrontendPageSeason::GetProgressText"
    class GetLongDescriptionText(HookFactory):
        _name = "cGcFrontendPageSeason::GetLongDescriptionText"
    class FormatFinalObjectives(HookFactory):
        _name = "cGcFrontendPageSeason::FormatFinalObjectives"

class cGcPlayerThirdPerson:
    class ForceHideMesh(HookFactory):
        _name = "cGcPlayerThirdPerson::ForceHideMesh"
    class GetCharacterNode(HookFactory):
        _name = "cGcPlayerThirdPerson::GetCharacterNode"
    class GetWristToHoldingPoint(HookFactory):
        _name = "cGcPlayerThirdPerson::GetWristToHoldingPoint"
    class GetFingerPointMatrix(HookFactory):
        _name = "cGcPlayerThirdPerson::GetFingerPointMatrix"
    class cGcPlayerThirdPerson(HookFactory):
        _name = "cGcPlayerThirdPerson::cGcPlayerThirdPerson"
    class SpawnThirdPersonModel(HookFactory):
        _name = "cGcPlayerThirdPerson::SpawnThirdPersonModel"
    class PostPhysicsUpdate(HookFactory):
        _name = "cGcPlayerThirdPerson::PostPhysicsUpdate"
    class DetermineCurrentVisibility(HookFactory):
        _name = "cGcPlayerThirdPerson::DetermineCurrentVisibility"
    class RefreshThirdPersonMeshVisibility(HookFactory):
        _name = "cGcPlayerThirdPerson::RefreshThirdPersonMeshVisibility"
    class BlockPlayerMovement(HookFactory):
        _name = "cGcPlayerThirdPerson::BlockPlayerMovement"
    class BlockPlayerWeapon(HookFactory):
        _name = "cGcPlayerThirdPerson::BlockPlayerWeapon"
    class UpdateMeshRefresh(HookFactory):
        _name = "cGcPlayerThirdPerson::UpdateMeshRefresh"
    class GenerateResource(HookFactory):
        _name = "cGcPlayerThirdPerson::GenerateResource"
    class UpdateLookAtPoint(HookFactory):
        _name = "cGcPlayerThirdPerson::UpdateLookAtPoint"
    class UpdateHandNodes(HookFactory):
        _name = "cGcPlayerThirdPerson::UpdateHandNodes"

class cGcFrontendPageSettlementJudgement:
    class Update(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::Update"
    class Render(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::Render"
    class DoRewardsText(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::DoRewardsText"
    class CleanUpAndClose(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::CleanUpAndClose"
    class DeterminePerksToAward(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::DeterminePerksToAward"
    class DeterminePerksToRemove(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::DeterminePerksToRemove"
    class GenerateRewardsText(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GenerateRewardsText"
    class GetStatString(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GetStatString"
    class ApplyDecisionEffects(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::ApplyDecisionEffects"
    class TriggerPendingJudgement(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::TriggerPendingJudgement"
    class TriggerJudgement(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::TriggerJudgement"
    class GeneratePolicyBanSubject(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GeneratePolicyBanSubject"
    class ProcessDilemmaText(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::ProcessDilemmaText"
    class GetJudgementNPCNames(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GetJudgementNPCNames"
    class GenerateGiftRewardDetails(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GenerateGiftRewardDetails"
    class GeneratePolicyPerkStats(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GeneratePolicyPerkStats"
    class GetPerkJobName(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GetPerkJobName"
    class GenerateJudgementNPCName(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::GenerateJudgementNPCName"
    class CreateNPCs(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::CreateNPCs"
    class CreateNPC(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::CreateNPC"
    class DestroyNPCs(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::DestroyNPCs"
    class DoNPCReactions(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::DoNPCReactions"
    class AddNewPerkMessage(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::AddNewPerkMessage"
    class AddFakePerkMessage(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::AddFakePerkMessage"
    class ExtractKeyPerkData(HookFactory):
        _name = "cGcFrontendPageSettlementJudgement::ExtractKeyPerkData"

class DoTradePageBottomBanner(HookFactory):
    _name = "DoTradePageBottomBanner"

class DoBottomBanner(HookFactory):
    _name = "DoBottomBanner"

class cGcFrontendPageShop:
    class DoTechTrade(HookFactory):
        _name = "cGcFrontendPageShop::DoTechTrade"
    class DoBuildingTrade(HookFactory):
        _name = "cGcFrontendPageShop::DoBuildingTrade"
    class DoSpecialsTrade(HookFactory):
        _name = "cGcFrontendPageShop::DoSpecialsTrade"
    class DoTrade(HookFactory):
        _name = "cGcFrontendPageShop::DoTrade"
    class PickBuyString(HookFactory):
        _name = "cGcFrontendPageShop::PickBuyString"
    class DoShopShowItem(HookFactory):
        _name = "cGcFrontendPageShop::DoShopShowItem"
    class DoShopCompareItem(HookFactory):
        _name = "cGcFrontendPageShop::DoShopCompareItem"
    class DoFreighterShipTransfer(HookFactory):
        _name = "cGcFrontendPageShop::DoFreighterShipTransfer"
    class DoSquadronRecruitment(HookFactory):
        _name = "cGcFrontendPageShop::DoSquadronRecruitment"
    class DoInventoryTransfer(HookFactory):
        _name = "cGcFrontendPageShop::DoInventoryTransfer"
    class DoAcceptButton(HookFactory):
        _name = "cGcFrontendPageShop::DoAcceptButton"
    class DoPurchaseButton(HookFactory):
        _name = "cGcFrontendPageShop::DoPurchaseButton"
    class DoDeclineButton(HookFactory):
        _name = "cGcFrontendPageShop::DoDeclineButton"
    class OnDeclineConfirmClosed(HookFactory):
        _name = "cGcFrontendPageShop::OnDeclineConfirmClosed"
    class DoAddNewItemButton(HookFactory):
        _name = "cGcFrontendPageShop::DoAddNewItemButton"
    class PopulateScrollableItemInventories(HookFactory):
        _name = "cGcFrontendPageShop::PopulateScrollableItemInventories"
    class DoRocketLockerTransfer(HookFactory):
        _name = "cGcFrontendPageShop::DoRocketLockerTransfer"
    class DoCompareScreenStatsWindow(HookFactory):
        _name = "cGcFrontendPageShop::DoCompareScreenStatsWindow"
    class DoFrigateStatsWindow(HookFactory):
        _name = "cGcFrontendPageShop::DoFrigateStatsWindow"
    class DoItemRender(HookFactory):
        _name = "cGcFrontendPageShop::DoItemRender"
    class ConvertToFullWidth(HookFactory):
        _name = "cGcFrontendPageShop::ConvertToFullWidth"
    class GeneratePlayerInventory(HookFactory):
        _name = "cGcFrontendPageShop::GeneratePlayerInventory"
    class GetTradeSettings(HookFactory):
        _name = "cGcFrontendPageShop::GetTradeSettings"
    class GenerateSellerInventory(HookFactory):
        _name = "cGcFrontendPageShop::GenerateSellerInventory"
    class GeneratePlanetTechShopInventory(HookFactory):
        _name = "cGcFrontendPageShop::GeneratePlanetTechShopInventory"
    class GenerateGeneralTechShopInventory(HookFactory):
        _name = "cGcFrontendPageShop::GenerateGeneralTechShopInventory"
    class GenerateSpecialsShopInventory(HookFactory):
        _name = "cGcFrontendPageShop::GenerateSpecialsShopInventory"
    class GenerateSeasonRewardsInventory(HookFactory):
        _name = "cGcFrontendPageShop::GenerateSeasonRewardsInventory"
    class GenerateTwitchRewardsInventory(HookFactory):
        _name = "cGcFrontendPageShop::GenerateTwitchRewardsInventory"
    class GeneratePlatformRewardsInventory(HookFactory):
        _name = "cGcFrontendPageShop::GeneratePlatformRewardsInventory"
    class GenerateShopElement(HookFactory):
        _name = "cGcFrontendPageShop::GenerateShopElement"
        _overload: overloads.cGcFrontendPageShop.GenerateShopElement.overloads = "cGcInventoryElement *, const TkID<128> *, const eInventoryType, const cGcTradeData *, cGcInteractionComponent *, const int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFrontendPageShop.GenerateShopElement.overloads):
            cls._overload = overload_args
            return cls
    class IsEverOfferedForSale(HookFactory):
        _name = "cGcFrontendPageShop::IsEverOfferedForSale"
    class DoShopItem(HookFactory):
        _name = "cGcFrontendPageShop::DoShopItem"
    class PopulateShopItems(HookFactory):
        _name = "cGcFrontendPageShop::PopulateShopItems"
    class DoShopScrollBar(HookFactory):
        _name = "cGcFrontendPageShop::DoShopScrollBar"
    class DoCommunityMissionProgress(HookFactory):
        _name = "cGcFrontendPageShop::DoCommunityMissionProgress"
    class DoBuy(HookFactory):
        _name = "cGcFrontendPageShop::DoBuy"
    class PurchaseCurrentPurchasableItem(HookFactory):
        _name = "cGcFrontendPageShop::PurchaseCurrentPurchasableItem"
    class CheckTransferItemsDialog(HookFactory):
        _name = "cGcFrontendPageShop::CheckTransferItemsDialog"
    class CheckTransferBaseDialog(HookFactory):
        _name = "cGcFrontendPageShop::CheckTransferBaseDialog"
    class DoStorageContainerNameChange(HookFactory):
        _name = "cGcFrontendPageShop::DoStorageContainerNameChange"
    class DoSwitchSpecialsShopFilter(HookFactory):
        _name = "cGcFrontendPageShop::DoSwitchSpecialsShopFilter"
    class SetPendingReward(HookFactory):
        _name = "cGcFrontendPageShop::SetPendingReward"

class SetupRankLayer(HookFactory):
    _name = "SetupRankLayer"

class DoDescriptionString(HookFactory):
    _name = "DoDescriptionString"

class DoPriceString(HookFactory):
    _name = "DoPriceString"

class DoPriceStringMaps(HookFactory):
    _name = "DoPriceStringMaps"

class DoPriceStringScrap(HookFactory):
    _name = "DoPriceStringScrap"

class cTkBehaviourTree:
    class Broadcast(HookFactory):
        _templates = ("T0", )
        _name = "cTkBehaviourTree::Broadcast<{T0}>"
    class AddNode(HookFactory):
        _name = "cTkBehaviourTree::AddNode"
    class AddBranchSelector(HookFactory):
        _name = "cTkBehaviourTree::AddBranchSelector"
    class AddAlwaysSucceedDecorator(HookFactory):
        _name = "cTkBehaviourTree::AddAlwaysSucceedDecorator"
    class AddConcurrentSelector(HookFactory):
        _name = "cTkBehaviourTree::AddConcurrentSelector"
    class AddInverseDecorator(HookFactory):
        _name = "cTkBehaviourTree::AddInverseDecorator"
    class AddNeverFailDecorator(HookFactory):
        _name = "cTkBehaviourTree::AddNeverFailDecorator"
    class AddPrioritySelector(HookFactory):
        _name = "cTkBehaviourTree::AddPrioritySelector"
    class AddSelectionDecorator(HookFactory):
        _name = "cTkBehaviourTree::AddSelectionDecorator"
    class AddSequentialSelector(HookFactory):
        _name = "cTkBehaviourTree::AddSequentialSelector"
    class AddSwitchDecorator(HookFactory):
        _name = "cTkBehaviourTree::AddSwitchDecorator"
    class Construct(HookFactory):
        _name = "cTkBehaviourTree::Construct"
        _overload: overloads.cTkBehaviourTree.Construct.overloads = "cTkBehaviourTree *, cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkBehaviourTree.Construct.overloads):
            cls._overload = overload_args
            return cls
    class Destruct(HookFactory):
        _name = "cTkBehaviourTree::Destruct"
    class Update(HookFactory):
        _name = "cTkBehaviourTree::Update"

class cGcRefinerRecipeElement:
    class cGcRefinerRecipeElement(HookFactory):
        _name = "cGcRefinerRecipeElement::cGcRefinerRecipeElement"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRefinerRecipeElement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRefinerRecipeElement::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRefinerRecipeElement::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRefinerRecipeElement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRefinerRecipeElement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRefinerRecipeElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRefinerRecipeElement::WriteToXMLNodeExplicit"

class cGcStoneRuneData:
    class cGcStoneRuneData(HookFactory):
        _name = "cGcStoneRuneData::cGcStoneRuneData"

class cGcFrontendPageSquadronPilotDetails:
    class Render(HookFactory):
        _name = "cGcFrontendPageSquadronPilotDetails::Render"

class cGcFrontendPageSquadronPilots:
    class Render(HookFactory):
        _name = "cGcFrontendPageSquadronPilots::Render"
    class SetNeedsModelRefresh(HookFactory):
        _name = "cGcFrontendPageSquadronPilots::SetNeedsModelRefresh"

class cGcFrontendPageSystemHoover:
    class Render(HookFactory):
        _name = "cGcFrontendPageSystemHoover::Render"
    class Update(HookFactory):
        _name = "cGcFrontendPageSystemHoover::Update"
    class GetSystemHoover(HookFactory):
        _name = "cGcFrontendPageSystemHoover::GetSystemHoover"

class cGcFrontendPageUnlockableTree:
    class UpdateTreeNode(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::UpdateTreeNode"
    class GetCantAffordString(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::GetCantAffordString"
    class DoUnlockableTree(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::DoUnlockableTree"
    class GenerateCurrencyDataFromCostID(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::GenerateCurrencyDataFromCostID"
    class DoPopUp(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::DoPopUp"
    class DoTopBar(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::DoTopBar"
    class GenerateCurrencyData(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::GenerateCurrencyData"
    class Buy(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::Buy"
    class Build(HookFactory):
        _name = "cGcFrontendPageUnlockableTree::Build"

class cGcVehicleRaceInviteComponent:
    class OnAttached(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::OnAttached"
    class GetNumComponents(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::GetNumComponents"
    class GetTypedComponent(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::GetTypedComponent"
        _overload: overloads.cGcVehicleRaceInviteComponent.GetTypedComponent.overloads = "int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcVehicleRaceInviteComponent.GetTypedComponent.overloads):
            cls._overload = overload_args
            return cls
    class GetTypeNameHash64(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::InitData"
    class GetFromLocation(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::GetFromLocation"
    class Prepare(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::Prepare"
    class RefreshRaceTrack(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::RefreshRaceTrack"
    class Update(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::Update"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::NetSerializeOnInit"
    class NetSerialize(HookFactory):
        _name = "cGcVehicleRaceInviteComponent::NetSerialize"

class cGcVehicleCheckpointManager:
    class RequestRaceStart(HookFactory):
        _name = "cGcVehicleCheckpointManager::RequestRaceStart"
    class HasValidRaceTrack(HookFactory):
        _name = "cGcVehicleCheckpointManager::HasValidRaceTrack"
    class GetActiveCheckpoint(HookFactory):
        _name = "cGcVehicleCheckpointManager::GetActiveCheckpoint"
    class Reset(HookFactory):
        _name = "cGcVehicleCheckpointManager::Reset"
    class GetRaceProgress(HookFactory):
        _name = "cGcVehicleCheckpointManager::GetRaceProgress"
    class GetCheckpointBuilding(HookFactory):
        _name = "cGcVehicleCheckpointManager::GetCheckpointBuilding"
    class Construct(HookFactory):
        _name = "cGcVehicleCheckpointManager::Construct"
    class SetupRaceCourse(HookFactory):
        _name = "cGcVehicleCheckpointManager::SetupRaceCourse"
    class GetStartInteraction(HookFactory):
        _name = "cGcVehicleCheckpointManager::GetStartInteraction"
    class MultiplayerRaceStart(HookFactory):
        _name = "cGcVehicleCheckpointManager::MultiplayerRaceStart"
    class LeaveRace(HookFactory):
        _name = "cGcVehicleCheckpointManager::LeaveRace"
    class IsPlayerLookingAtDeleteableCheckpoint(HookFactory):
        _name = "cGcVehicleCheckpointManager::IsPlayerLookingAtDeleteableCheckpoint"
    class SpawnPlayerAtStart(HookFactory):
        _name = "cGcVehicleCheckpointManager::SpawnPlayerAtStart"
    class RestartCancelledPlayer(HookFactory):
        _name = "cGcVehicleCheckpointManager::RestartCancelledPlayer"
    class WantsQuitRace(HookFactory):
        _name = "cGcVehicleCheckpointManager::WantsQuitRace"
    class GetStartCheckpointAtLocation(HookFactory):
        _name = "cGcVehicleCheckpointManager::GetStartCheckpointAtLocation"
    class Update(HookFactory):
        _name = "cGcVehicleCheckpointManager::Update"
    class PlaceCheckpoint(HookFactory):
        _name = "cGcVehicleCheckpointManager::PlaceCheckpoint"
    class UpdateRaceIndices(HookFactory):
        _name = "cGcVehicleCheckpointManager::UpdateRaceIndices"
    class CalculateStartMatrix(HookFactory):
        _name = "cGcVehicleCheckpointManager::CalculateStartMatrix"
    class SetStartCheckpoint(HookFactory):
        _name = "cGcVehicleCheckpointManager::SetStartCheckpoint"
    class OnVehicleRaceJoin(HookFactory):
        _name = "cGcVehicleCheckpointManager::OnVehicleRaceJoin"
    class OnVehicleRaceStart(HookFactory):
        _name = "cGcVehicleCheckpointManager::OnVehicleRaceStart"
    class OnVehicleHitCheckpoint(HookFactory):
        _name = "cGcVehicleCheckpointManager::OnVehicleHitCheckpoint"
    class FinishedRace(HookFactory):
        _name = "cGcVehicleCheckpointManager::FinishedRace"
    class UpdateRaceMessage(HookFactory):
        _name = "cGcVehicleCheckpointManager::UpdateRaceMessage"
    class ClearCheckpointsInternal(HookFactory):
        _name = "cGcVehicleCheckpointManager::ClearCheckpointsInternal"

class cGcFrontendPageVehicleRace:
    class Render(HookFactory):
        _name = "cGcFrontendPageVehicleRace::Render"
    class RenderResultsScreen(HookFactory):
        _name = "cGcFrontendPageVehicleRace::RenderResultsScreen"
    class RenderInviteScreen(HookFactory):
        _name = "cGcFrontendPageVehicleRace::RenderInviteScreen"
    class RenderMainScreen(HookFactory):
        _name = "cGcFrontendPageVehicleRace::RenderMainScreen"

class cGcFrontendPageWiki:
    class GetWiki(HookFactory):
        _name = "cGcFrontendPageWiki::GetWiki"
    class GetWikiWritable(HookFactory):
        _name = "cGcFrontendPageWiki::GetWikiWritable"
    class GetWikiPageData(HookFactory):
        _name = "cGcFrontendPageWiki::GetWikiPageData"
    class DoWiki(HookFactory):
        _name = "cGcFrontendPageWiki::DoWiki"
    class DoStoriesWiki(HookFactory):
        _name = "cGcFrontendPageWiki::DoStoriesWiki"
    class GetListPageItemsData(HookFactory):
        _name = "cGcFrontendPageWiki::GetListPageItemsData"
    class DoWikiListPage(HookFactory):
        _name = "cGcFrontendPageWiki::DoWikiListPage"
    class DoStoriesListPage(HookFactory):
        _name = "cGcFrontendPageWiki::DoStoriesListPage"
    class DoGridPageSwitch(HookFactory):
        _name = "cGcFrontendPageWiki::DoGridPageSwitch"
    class GetWikiGridItemsData(HookFactory):
        _name = "cGcFrontendPageWiki::GetWikiGridItemsData"
    class DoGridItem(HookFactory):
        _name = "cGcFrontendPageWiki::DoGridItem"
    class DoGridItemIcon(HookFactory):
        _name = "cGcFrontendPageWiki::DoGridItemIcon"
    class DoGridItemPlanet(HookFactory):
        _name = "cGcFrontendPageWiki::DoGridItemPlanet"
    class DoGuideContentPage(HookFactory):
        _name = "cGcFrontendPageWiki::DoGuideContentPage"
    class DoStoriesContentPage(HookFactory):
        _name = "cGcFrontendPageWiki::DoStoriesContentPage"
    class MarkItemAsSeen(HookFactory):
        _name = "cGcFrontendPageWiki::MarkItemAsSeen"
    class DoCustomWonderPopup(HookFactory):
        _name = "cGcFrontendPageWiki::DoCustomWonderPopup"
    class DoConfirmViewWonderInDiscoveries(HookFactory):
        _name = "cGcFrontendPageWiki::DoConfirmViewWonderInDiscoveries"
    class FetchRecipesForCatalogue(HookFactory):
        _name = "cGcFrontendPageWiki::FetchRecipesForCatalogue"
    class DoGridPage(HookFactory):
        _templates = ("T0", )
        _name = "cGcFrontendPageWiki::DoGridPage<{T0}>"

class QSortRecipes(HookFactory):
    _name = "QSortRecipes"

class cGcRecipeWikiData:
    class cGcRecipeWikiData(HookFactory):
        _name = "cGcRecipeWikiData::cGcRecipeWikiData"

class WikiItemData:
    class WikiItemData(HookFactory):
        _name = "WikiItemData::WikiItemData"
    class Set(HookFactory):
        _name = "WikiItemData::Set"
        _overload: overloads.WikiItemData.Set.overloads = "WikiItemData *, const cGcRealitySubstanceData *"
        @classmethod
        def overload(cls, overload_args: overloads.WikiItemData.Set.overloads):
            cls._overload = overload_args
            return cls

class cGcStoryEntry:
    class cGcStoryEntry(HookFactory):
        _name = "cGcStoryEntry::cGcStoryEntry"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoryEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcStoryEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStoryEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryEntry::WriteToXMLNodeExplicit"

class cGcInventorySlotAction:
    class Render(HookFactory):
        _name = "cGcInventorySlotAction::Render"

class ItemPicking:
    class GetSourceItem(HookFactory):
        _name = "ItemPicking::GetSourceItem"
    class Activate(HookFactory):
        _name = "ItemPicking::Activate"
    class GetSplitSize(HookFactory):
        _name = "ItemPicking::GetSplitSize"

class SendToInventoryOption:
    class GetDestinationSlots(HookFactory):
        _name = "SendToInventoryOption::GetDestinationSlots"
    class GetDestinationInventory(HookFactory):
        _name = "SendToInventoryOption::GetDestinationInventory"
    class DoSend(HookFactory):
        _name = "SendToInventoryOption::DoSend"

class AtlasIconRenderFn(HookFactory):
    _name = "AtlasIconRenderFn"

class cTkDynamicString:
    class AllocateFromString(HookFactory):
        _name = "cTkDynamicString::AllocateFromString"

class cGcFrontendPopup:
    class IsRightAligned(HookFactory):
        _name = "cGcFrontendPopup::IsRightAligned"
    class Activate(HookFactory):
        _name = "cGcFrontendPopup::Activate"
    class Render(HookFactory):
        _name = "cGcFrontendPopup::Render"
    class UpdateRender(HookFactory):
        _name = "cGcFrontendPopup::UpdateRender"

class cTkTextStylePlain:
    class Render(HookFactory):
        _name = "cTkTextStylePlain::Render"

class lookup_ACESmin(HookFactory):
    _name = "lookup_ACESmin"

class lookup_ACESmax(HookFactory):
    _name = "lookup_ACESmax"

class init_TsParams(HookFactory):
    _name = "init_TsParams"

class inv_ssts(HookFactory):
    _name = "inv_ssts"

class cGcFullscreenEffectManager:
    class Prepare(HookFactory):
        _name = "cGcFullscreenEffectManager::Prepare"
    class UpdateLightingParams(HookFactory):
        _name = "cGcFullscreenEffectManager::UpdateLightingParams"
    class UpdateDoF(HookFactory):
        _name = "cGcFullscreenEffectManager::UpdateDoF"
    class IsSSROn(HookFactory):
        _name = "cGcFullscreenEffectManager::IsSSROn"
    class UpdateHDR(HookFactory):
        _name = "cGcFullscreenEffectManager::UpdateHDR"
    class UpdateScreenFilter(HookFactory):
        _name = "cGcFullscreenEffectManager::UpdateScreenFilter"
    class SetScreenFilter(HookFactory):
        _name = "cGcFullscreenEffectManager::SetScreenFilter"

class SSRActive(HookFactory):
    _name = "SSRActive"

class GetLensDistortionVectors(HookFactory):
    _name = "GetLensDistortionVectors"

class cGcCharacterInterfaceComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCharacterInterfaceComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCharacterInterfaceComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcCharacterInterfaceComponent::GetTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcCharacterInterfaceComponent::GetNumComponents"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcCharacterInterfaceComponent::FindFirstTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcCharacterInterfaceComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcCharacterInterfaceComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcCharacterInterfaceComponent::Release"

class ComponentInstancercGcCharacterInterfaceComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCharacterInterfaceComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCharacterInterfaceComponent::ConstructInstance"

class cGcLogoSequence:
    class Unload(HookFactory):
        _name = "cGcLogoSequence::Unload"
    class Render(HookFactory):
        _name = "cGcLogoSequence::Render"

class cGcCreatureFullBodyIKComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::GetTypedComponent"
    class GetHeadJointNode(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::GetHeadJointNode"
    class cGcCreatureFullBodyIKComponent(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::cGcCreatureFullBodyIKComponent"
    class OnPostAnim(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::OnPostAnim"
    class OnAttached(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::Release"
    class Update(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::UpdatePostPhysics"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::RenderNGui"
    class GetHeadSize(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::GetHeadSize"
    class GetFrontFootPos(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::GetFrontFootPos"
    class SetNavTrail(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::SetNavTrail"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::InitData"
    class SetEnabled(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::SetEnabled"
    class TransferReset(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::TransferReset"
    class DoIkPush(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::DoIkPush"
    class SetNeckAngles(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::SetNeckAngles"
    class SetFootShake(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::SetFootShake"
    class SetFootStrength(HookFactory):
        _name = "cGcCreatureFullBodyIKComponent::SetFootStrength"

class cGcPhotoModeUI:
    class IsActive(HookFactory):
        _name = "cGcPhotoModeUI::IsActive"
    class Construct(HookFactory):
        _name = "cGcPhotoModeUI::Construct"
    class Prepare(HookFactory):
        _name = "cGcPhotoModeUI::Prepare"
    class Update(HookFactory):
        _name = "cGcPhotoModeUI::Update"
    class ForceHideUI(HookFactory):
        _name = "cGcPhotoModeUI::ForceHideUI"
    class SetPhotoMode(HookFactory):
        _name = "cGcPhotoModeUI::SetPhotoMode"
    class CanActivate(HookFactory):
        _name = "cGcPhotoModeUI::CanActivate"
    class Deactivate(HookFactory):
        _name = "cGcPhotoModeUI::Deactivate"
    class ResetPhotoModeState(HookFactory):
        _name = "cGcPhotoModeUI::ResetPhotoModeState"
    class SetGroup(HookFactory):
        _name = "cGcPhotoModeUI::SetGroup"
    class SetOption(HookFactory):
        _name = "cGcPhotoModeUI::SetOption"
    class RenderCamMode(HookFactory):
        _name = "cGcPhotoModeUI::RenderCamMode"
    class Render(HookFactory):
        _name = "cGcPhotoModeUI::Render"
    class EnterPhotoMode(HookFactory):
        _name = "cGcPhotoModeUI::EnterPhotoMode"
    class RenderScreenshot(HookFactory):
        _name = "cGcPhotoModeUI::RenderScreenshot"
    class OnRenderScreenshotFinished(HookFactory):
        _name = "cGcPhotoModeUI::OnRenderScreenshotFinished"
    class CallPhotoManager(HookFactory):
        _name = "cGcPhotoModeUI::CallPhotoManager"
    class SystemUIOverlayChange(HookFactory):
        _name = "cGcPhotoModeUI::SystemUIOverlayChange"
    class ShareMenuOpened(HookFactory):
        _name = "cGcPhotoModeUI::ShareMenuOpened"

class OSDMessageEffectReward:
    class RareReward(HookFactory):
        _name = "OSDMessageEffectReward::RareReward"

class cGcLayerInteractControl:
    class GetConfirmValue(HookFactory):
        _name = "cGcLayerInteractControl::GetConfirmValue"
    class Update(HookFactory):
        _name = "cGcLayerInteractControl::Update"
    class Confirm(HookFactory):
        _name = "cGcLayerInteractControl::Confirm"

class sUIScalingValues:
    class sUIScalingValues(HookFactory):
        _name = "sUIScalingValues::sUIScalingValues"

class cGcPersonalTeleporter:
    class IsActive(HookFactory):
        _name = "cGcPersonalTeleporter::IsActive"
    class CanUseTeleport(HookFactory):
        _name = "cGcPersonalTeleporter::CanUseTeleport"
    class Update(HookFactory):
        _name = "cGcPersonalTeleporter::Update"
    class IsManualMoveActive(HookFactory):
        _name = "cGcPersonalTeleporter::IsManualMoveActive"
    class IsUsedForMovement(HookFactory):
        _name = "cGcPersonalTeleporter::IsUsedForMovement"
    class GetTargetMatrix(HookFactory):
        _name = "cGcPersonalTeleporter::GetTargetMatrix"
    class UseStickForTeleport(HookFactory):
        _name = "cGcPersonalTeleporter::UseStickForTeleport"
    class GetStick(HookFactory):
        _name = "cGcPersonalTeleporter::GetStick"
    class GetDirection(HookFactory):
        _name = "cGcPersonalTeleporter::GetDirection"
    class UpdateCharging(HookFactory):
        _name = "cGcPersonalTeleporter::UpdateCharging"
    class UpdateRender(HookFactory):
        _name = "cGcPersonalTeleporter::UpdateRender"
    class InitiateTeleport(HookFactory):
        _name = "cGcPersonalTeleporter::InitiateTeleport"
    class DoTeleport(HookFactory):
        _name = "cGcPersonalTeleporter::DoTeleport"
    class GetChargeFactor(HookFactory):
        _name = "cGcPersonalTeleporter::GetChargeFactor"
    class GetTeleportMotionOffset(HookFactory):
        _name = "cGcPersonalTeleporter::GetTeleportMotionOffset"

class ComponentInstancercGcMarkerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcMarkerComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcMarkerComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcMarkerComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcMarkerComponent::DestructInstance"

class cTkSketchComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkSketchComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkSketchComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cTkSketchComponent::DefaultRenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cTkSketchComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cTkSketchComponent::FindFirstTypedComponent"
    class sNode:
        class sNode(HookFactory):
            _name = "cTkSketchComponent::sNode::sNode"
        class DoComponentRequiredFlag(HookFactory):
            _templates = ("T0", )
            _name = "cTkSketchComponent::sNode::DoComponentRequiredFlag<{T0}>"
        class DoEditEnum(HookFactory):
            _templates = ("T0", )
            _name = "cTkSketchComponent::sNode::DoEditEnum<{T0}>"
        class AnimateOutputLinks(HookFactory):
            _name = "cTkSketchComponent::sNode::AnimateOutputLinks"
        class DoEditBool(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditBool"
        class DoEditFloat32(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditFloat32"
        class DoEditInt32(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditInt32"
        class DoEditNodeName(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditNodeName"
        class DoEditSketchCurve(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditSketchCurve"
        class DoEditSketchValue(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditSketchValue"
        class DoEditString(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditString"
        class DoEditUInt32(HookFactory):
            _name = "cTkSketchComponent::sNode::DoEditUInt32"
        class DoErrorMessage(HookFactory):
            _name = "cTkSketchComponent::sNode::DoErrorMessage"
        class GetCurrentContext(HookFactory):
            _name = "cTkSketchComponent::sNode::GetCurrentContext"
        class LoadFromMetadata(HookFactory):
            _name = "cTkSketchComponent::sNode::LoadFromMetadata"
        class RenderNGuiVisualDebugInfo(HookFactory):
            _name = "cTkSketchComponent::sNode::RenderNGuiVisualDebugInfo"
        class RenderVisualDebugLastOutput(HookFactory):
            _name = "cTkSketchComponent::sNode::RenderVisualDebugLastOutput"
        class SaveToMetadata(HookFactory):
            _name = "cTkSketchComponent::sNode::SaveToMetadata"
        class SetVisualDebugProgress(HookFactory):
            _name = "cTkSketchComponent::sNode::SetVisualDebugProgress"
    class GetComponentForSketch(HookFactory):
        _templates = ("T0", )
        _name = "cTkSketchComponent::GetComponentForSketch<{T0}>"
    class OnAttached(HookFactory):
        _name = "cTkSketchComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkSketchComponent::Prepare"
    class Receive(HookFactory):
        _name = "cTkSketchComponent::Receive"
    class GetUpdatePeriod(HookFactory):
        _name = "cTkSketchComponent::GetUpdatePeriod"
    class Update(HookFactory):
        _name = "cTkSketchComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cTkSketchComponent::RenderNGui"
    class sBranch:
        class sBranch(HookFactory):
            _name = "cTkSketchComponent::sBranch::sBranch"
        class Update(HookFactory):
            _name = "cTkSketchComponent::sBranch::Update"
    class AddPendingBranches(HookFactory):
        _name = "cTkSketchComponent::AddPendingBranches"
    class BroadcastValue(HookFactory):
        _name = "cTkSketchComponent::BroadcastValue"
    class DestructNode(HookFactory):
        _name = "cTkSketchComponent::DestructNode"
    class sNodeType:
        class DoAddButton(HookFactory):
            _name = "cTkSketchComponent::sNodeType::DoAddButton"
    class DoGroupSeparator(HookFactory):
        _name = "cTkSketchComponent::DoGroupSeparator"
    class GetNextSketchVisibleNode(HookFactory):
        _name = "cTkSketchComponent::GetNextSketchVisibleNode"
    class GetVariableValue(HookFactory):
        _name = "cTkSketchComponent::GetVariableValue"
    class MatchNodeName(HookFactory):
        _name = "cTkSketchComponent::MatchNodeName"
    class OnVariableValueChanged(HookFactory):
        _name = "cTkSketchComponent::OnVariableValueChanged"
    class PollSurveyVariableValue(HookFactory):
        _name = "cTkSketchComponent::PollSurveyVariableValue"
    class Reload(HookFactory):
        _name = "cTkSketchComponent::Reload"
    class RenderNGuiAddNodes(HookFactory):
        _name = "cTkSketchComponent::RenderNGuiAddNodes"
    class RenderNGuiEditor(HookFactory):
        _name = "cTkSketchComponent::RenderNGuiEditor"
    class RenderNGuiVariables(HookFactory):
        _name = "cTkSketchComponent::RenderNGuiVariables"
    class Save(HookFactory):
        _name = "cTkSketchComponent::Save"
    class SetVariableValue(HookFactory):
        _name = "cTkSketchComponent::SetVariableValue"
    class SurveyVariableValue(HookFactory):
        _name = "cTkSketchComponent::SurveyVariableValue"

class ComponentInstancercTkSketchComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkSketchComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkSketchComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkSketchComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkSketchComponent::DestructInstance"

class RenderTag(HookFactory):
    _name = "RenderTag"

class cGcSentinelRobotComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcSentinelRobotComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSentinelRobotComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSentinelRobotComponent::InitData"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcSentinelRobotComponent::FindFirstTypedComponent"
    class Prepare(HookFactory):
        _name = "cGcSentinelRobotComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcSentinelRobotComponent::Release"
    class Update(HookFactory):
        _name = "cGcSentinelRobotComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cGcSentinelRobotComponent::RenderNGui"
    class OnAttached(HookFactory):
        _name = "cGcSentinelRobotComponent::OnAttached"
    class NetSerialize(HookFactory):
        _name = "cGcSentinelRobotComponent::NetSerialize"

class ComputeVRScreenPos(HookFactory):
    _name = "ComputeVRScreenPos"

class TrackArrowFadeVR(HookFactory):
    _name = "TrackArrowFadeVR"

class cGcBasePartsMenuUI:
    class Construct(HookFactory):
        _name = "cGcBasePartsMenuUI::Construct"
    class Update(HookFactory):
        _name = "cGcBasePartsMenuUI::Update"
    class UpdateRender(HookFactory):
        _name = "cGcBasePartsMenuUI::UpdateRender"
    class Render(HookFactory):
        _name = "cGcBasePartsMenuUI::Render"
    class UpdateAvailableParts(HookFactory):
        _name = "cGcBasePartsMenuUI::UpdateAvailableParts"
    class SetBreadcrumb(HookFactory):
        _name = "cGcBasePartsMenuUI::SetBreadcrumb"
    class SetCursorRestorationPartId(HookFactory):
        _name = "cGcBasePartsMenuUI::SetCursorRestorationPartId"
    class GetNextPartInSubgroup(HookFactory):
        _name = "cGcBasePartsMenuUI::GetNextPartInSubgroup"
    class RenderItemDetails(HookFactory):
        _name = "cGcBasePartsMenuUI::RenderItemDetails"
    class IsObjectAvailable(HookFactory):
        _name = "cGcBasePartsMenuUI::IsObjectAvailable"
    class IsObjectGreyedOut(HookFactory):
        _name = "cGcBasePartsMenuUI::IsObjectGreyedOut"
    class UpdateAvailablePartsBrowse(HookFactory):
        _name = "cGcBasePartsMenuUI::UpdateAvailablePartsBrowse"
    class UpdateAvailablePartsRelatives(HookFactory):
        _name = "cGcBasePartsMenuUI::UpdateAvailablePartsRelatives"

class GetScreenshotName(HookFactory):
    _name = "GetScreenshotName"

class cGcBaseUploadUI:
    class Update(HookFactory):
        _name = "cGcBaseUploadUI::Update"
    class Render(HookFactory):
        _name = "cGcBaseUploadUI::Render"
    class BeginBaseUploadUI(HookFactory):
        _name = "cGcBaseUploadUI::BeginBaseUploadUI"
    class HidePage(HookFactory):
        _name = "cGcBaseUploadUI::HidePage"
    class OnPhotoTakenCallback(HookFactory):
        _name = "cGcBaseUploadUI::OnPhotoTakenCallback"
    class OnSnapshotTakenCallback(HookFactory):
        _name = "cGcBaseUploadUI::OnSnapshotTakenCallback"
    class OnPhotoTakenCallbackInternal(HookFactory):
        _name = "cGcBaseUploadUI::OnPhotoTakenCallbackInternal"
    class OnSnapshotTakenCallbackInternal(HookFactory):
        _name = "cGcBaseUploadUI::OnSnapshotTakenCallbackInternal"
    class GetDefaultCameraMatrix(HookFactory):
        _name = "cGcBaseUploadUI::GetDefaultCameraMatrix"
    class HandleFeaturedBaseUI(HookFactory):
        _name = "cGcBaseUploadUI::HandleFeaturedBaseUI"
    class HideBaseComputerButtons(HookFactory):
        _name = "cGcBaseUploadUI::HideBaseComputerButtons"

class OnConfirmDeleteClose(HookFactory):
    _name = "OnConfirmDeleteClose"

class cGcHUDScreensPool:
    class GetScreen(HookFactory):
        _name = "cGcHUDScreensPool::GetScreen"
    class ResetPool(HookFactory):
        _name = "cGcHUDScreensPool::ResetPool"

class cGcPhotoBaseForUploadUI:
    class Update(HookFactory):
        _name = "cGcPhotoBaseForUploadUI::Update"
    class DisableFreeCameraCapture(HookFactory):
        _name = "cGcPhotoBaseForUploadUI::DisableFreeCameraCapture"
    class RenderScreenshot(HookFactory):
        _name = "cGcPhotoBaseForUploadUI::RenderScreenshot"
    class OnRenderScreenshotFinished(HookFactory):
        _name = "cGcPhotoBaseForUploadUI::OnRenderScreenshotFinished"

class cGcMissionPhotoListener:
    class NotifySuccess(HookFactory):
        _name = "cGcMissionPhotoListener::NotifySuccess"
    class Clone(HookFactory):
        _name = "cGcMissionPhotoListener::Clone"

class cGcPhotoManager:
    class AnalysePhotoScene(HookFactory):
        _name = "cGcPhotoManager::AnalysePhotoScene"
    class AcknowledgePhotoRequests(HookFactory):
        _name = "cGcPhotoManager::AcknowledgePhotoRequests"

class cGcPhoto:
    class GetPhotoBiomeName(HookFactory):
        _name = "cGcPhoto::GetPhotoBiomeName"

class ScanInfo:
    class IsValid(HookFactory):
        _name = "ScanInfo::IsValid"

class cGcScanEvent:
    class IsFromMission(HookFactory):
        _name = "cGcScanEvent::IsFromMission"
    class cGcScanEvent(HookFactory):
        _name = "cGcScanEvent::cGcScanEvent"
    class ShowArrow(HookFactory):
        _name = "cGcScanEvent::ShowArrow"
    class Construct(HookFactory):
        _name = "cGcScanEvent::Construct"
    class CalculateMarkerPosition(HookFactory):
        _name = "cGcScanEvent::CalculateMarkerPosition"
    class Update(HookFactory):
        _name = "cGcScanEvent::Update"
    class ShowMessage(HookFactory):
        _name = "cGcScanEvent::ShowMessage"
    class ShowIcons(HookFactory):
        _name = "cGcScanEvent::ShowIcons"
    class ShowTooltip(HookFactory):
        _name = "cGcScanEvent::ShowTooltip"
    class CheckForCompletion(HookFactory):
        _name = "cGcScanEvent::CheckForCompletion"
    class EndEventWithMessage(HookFactory):
        _name = "cGcScanEvent::EndEventWithMessage"
    class UpdateInteraction(HookFactory):
        _name = "cGcScanEvent::UpdateInteraction"
    class UpdateSpaceStationLocation(HookFactory):
        _name = "cGcScanEvent::UpdateSpaceStationLocation"
    class GetForcedInteraction(HookFactory):
        _name = "cGcScanEvent::GetForcedInteraction"
    class MarkCompleted(HookFactory):
        _name = "cGcScanEvent::MarkCompleted"
    class CollectAllInteractions(HookFactory):
        _name = "cGcScanEvent::CollectAllInteractions"
    class CollectAllDestructables(HookFactory):
        _name = "cGcScanEvent::CollectAllDestructables"
    class CheckForAllDestroyed(HookFactory):
        _name = "cGcScanEvent::CheckForAllDestroyed"
    class GetDestructableCount(HookFactory):
        _name = "cGcScanEvent::GetDestructableCount"
    class CollectAllMaintenanceComponents(HookFactory):
        _name = "cGcScanEvent::CollectAllMaintenanceComponents"

class cGcMarkerPoint:
    class SetUseInteractionPosition(HookFactory):
        _name = "cGcMarkerPoint::SetUseInteractionPosition"
    class GetUseInteractionPosition(HookFactory):
        _name = "cGcMarkerPoint::GetUseInteractionPosition"
    class cGcMarkerPoint(HookFactory):
        _name = "cGcMarkerPoint::cGcMarkerPoint"
        _overload: overloads.cGcMarkerPoint.cGcMarkerPoint.overloads = "cGcMarkerPoint *, cGcMarkerPoint *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMarkerPoint.cGcMarkerPoint.overloads):
            cls._overload = overload_args
            return cls
    class Reset(HookFactory):
        _name = "cGcMarkerPoint::Reset"
    class Update(HookFactory):
        _name = "cGcMarkerPoint::Update"
    class IsEqual(HookFactory):
        _name = "cGcMarkerPoint::IsEqual"
    class CanDisplay(HookFactory):
        _name = "cGcMarkerPoint::CanDisplay"
    class IsSpaceStationMarker(HookFactory):
        _name = "cGcMarkerPoint::IsSpaceStationMarker"
    class IsOtherPlayerStuffMarker(HookFactory):
        _name = "cGcMarkerPoint::IsOtherPlayerStuffMarker"
    class IsSpaceAtlasMarker(HookFactory):
        _name = "cGcMarkerPoint::IsSpaceAtlasMarker"
    class IsNexusMarker(HookFactory):
        _name = "cGcMarkerPoint::IsNexusMarker"
    class IsInteriorMarker(HookFactory):
        _name = "cGcMarkerPoint::IsInteriorMarker"
    class GetCurrentPosition(HookFactory):
        _name = "cGcMarkerPoint::GetCurrentPosition"
    class UpdateInteractPosition(HookFactory):
        _name = "cGcMarkerPoint::UpdateInteractPosition"
    class GetHorizonPosition(HookFactory):
        _name = "cGcMarkerPoint::GetHorizonPosition"
        _overload: overloads.cGcMarkerPoint.GetHorizonPosition.overloads = "cGcMarkerPoint *, cTkPhysRelVec3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMarkerPoint.GetHorizonPosition.overloads):
            cls._overload = overload_args
            return cls
    class GetBuildingIconType(HookFactory):
        _name = "cGcMarkerPoint::GetBuildingIconType"
    class GetScannerIcon(HookFactory):
        _name = "cGcMarkerPoint::GetScannerIcon"
    class GetIcon(HookFactory):
        _name = "cGcMarkerPoint::GetIcon"
    class RenderNGui(HookFactory):
        _name = "cGcMarkerPoint::RenderNGui"
    class GetIconTypeForBuildingClass(HookFactory):
        _name = "cGcMarkerPoint::GetIconTypeForBuildingClass"

class PhotoModeControl:
    class IsValid(HookFactory):
        _name = "PhotoModeControl::IsValid"

class PhotoModeControl_List:
    class Reset(HookFactory):
        _name = "PhotoModeControl_List::Reset"
    class PhotoModeControl_List(HookFactory):
        _name = "PhotoModeControl_List::PhotoModeControl_List"
    class GetValueAsString(HookFactory):
        _name = "PhotoModeControl_List::GetValueAsString"
    class Increase(HookFactory):
        _name = "PhotoModeControl_List::Increase"
    class Decrease(HookFactory):
        _name = "PhotoModeControl_List::Decrease"

class cGcDistanceScaleComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcDistanceScaleComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcDistanceScaleComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcDistanceScaleComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcDistanceScaleComponent::Prepare"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcDistanceScaleComponent::UpdatePostPhysics"
    class CalculateScale(HookFactory):
        _name = "cGcDistanceScaleComponent::CalculateScale"

class ComponentInstancercGcDistanceScaleComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcDistanceScaleComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcDistanceScaleComponent::ConstructInstance"

class cGcHUDPulseEffect:
    class Render(HookFactory):
        _name = "cGcHUDPulseEffect::Render"
    class RenderInstance(HookFactory):
        _name = "cGcHUDPulseEffect::RenderInstance"

class cGcHUDPulseManager:
    class Add(HookFactory):
        _name = "cGcHUDPulseManager::Add"

class PhotoModeControl_TimeOfDay:
    class GetValueAsString(HookFactory):
        _name = "PhotoModeControl_TimeOfDay::GetValueAsString"
    class Increase(HookFactory):
        _name = "PhotoModeControl_TimeOfDay::Increase"
    class Decrease(HookFactory):
        _name = "PhotoModeControl_TimeOfDay::Decrease"
    class IsValid(HookFactory):
        _name = "PhotoModeControl_TimeOfDay::IsValid"

class Rec2390Rolloff(HookFactory):
    _name = "Rec2390Rolloff"

class TonemapHdrToSdr(HookFactory):
    _name = "TonemapHdrToSdr"

class cGcCreatureSpawnComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureSpawnComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureSpawnComponent::InitData"

class ComponentInstancercGcCreatureSpawnComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureSpawnComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureSpawnComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureSpawnComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureSpawnComponent::DestructInstance"

class cGcSimpleScanEffect:
    class cGcSimpleScanEffect(HookFactory):
        _name = "cGcSimpleScanEffect::cGcSimpleScanEffect"
    class Update(HookFactory):
        _name = "cGcSimpleScanEffect::Update"
    class ScanNode(HookFactory):
        _name = "cGcSimpleScanEffect::ScanNode"
    class Release(HookFactory):
        _name = "cGcSimpleScanEffect::Release"

class GetImpactFactor(HookFactory):
    _name = "GetImpactFactor"

class cGcPositionMarker:
    class SetTarget(HookFactory):
        _name = "cGcPositionMarker::SetTarget"
    class Render(HookFactory):
        _name = "cGcPositionMarker::Render"

class PhotoModeControl_Value:
    class Reset(HookFactory):
        _templates = ("T0", )
        _name = "PhotoModeControl_Value<{T0}>::Reset"
    class GetValueAsString(HookFactory):
        _templates = ("T0", )
        _name = "PhotoModeControl_Value<{T0}>::GetValueAsString"
    class Increase(HookFactory):
        _templates = ("T0", )
        _name = "PhotoModeControl_Value<{T0}>::Increase"
    class Decrease(HookFactory):
        _templates = ("T0", )
        _name = "PhotoModeControl_Value<{T0}>::Decrease"
    class EnsureInBounds(HookFactory):
        _templates = ("T0", )
        _name = "PhotoModeControl_Value<{T0}>::EnsureInBounds"

class cGcPlayerHazard:
    class GetSecondaryHazard(HookFactory):
        _name = "cGcPlayerHazard::GetSecondaryHazard"
    class IsInHazard(HookFactory):
        _name = "cGcPlayerHazard::IsInHazard"
    class GetPrimaryHazard(HookFactory):
        _name = "cGcPlayerHazard::GetPrimaryHazard"
    class Prepare(HookFactory):
        _name = "cGcPlayerHazard::Prepare"
    class Update(HookFactory):
        _name = "cGcPlayerHazard::Update"
    class GetHazardLevel(HookFactory):
        _name = "cGcPlayerHazard::GetHazardLevel"
    class ModifyHazardValues(HookFactory):
        _name = "cGcPlayerHazard::ModifyHazardValues"
    class GetProtectionTime(HookFactory):
        _name = "cGcPlayerHazard::GetProtectionTime"
    class GetRechargeTime(HookFactory):
        _name = "cGcPlayerHazard::GetRechargeTime"
    class RenderNGui(HookFactory):
        _name = "cGcPlayerHazard::RenderNGui"
    class UpdateShielding(HookFactory):
        _name = "cGcPlayerHazard::UpdateShielding"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcPlayerHazard::RenderImGuiCallback"

class cGcPlayerImpact:
    class GetPos(HookFactory):
        _name = "cGcPlayerImpact::GetPos"
    class cGcPlayerImpact(HookFactory):
        _name = "cGcPlayerImpact::cGcPlayerImpact"

class cGcTargetScreen:
    class Construct(HookFactory):
        _name = "cGcTargetScreen::Construct"
    class Prepare(HookFactory):
        _name = "cGcTargetScreen::Prepare"
    class Update(HookFactory):
        _name = "cGcTargetScreen::Update"
    class EnqueueRender(HookFactory):
        _name = "cGcTargetScreen::EnqueueRender"
    class Release(HookFactory):
        _name = "cGcTargetScreen::Release"
    class CleanupResources(HookFactory):
        _name = "cGcTargetScreen::CleanupResources"
    class RenderNGui(HookFactory):
        _name = "cGcTargetScreen::RenderNGui"
    class HideOtherNodes(HookFactory):
        _name = "cGcTargetScreen::HideOtherNodes"
    class RestoreOtherNodes(HookFactory):
        _name = "cGcTargetScreen::RestoreOtherNodes"

class cGcRenderableScreen:
    class Prepare(HookFactory):
        _name = "cGcRenderableScreen::Prepare"
    class EnqueueRender(HookFactory):
        _name = "cGcRenderableScreen::EnqueueRender"
    class RenderNGui(HookFactory):
        _name = "cGcRenderableScreen::RenderNGui"
    class ShouldRenderLiveInShipScreen(HookFactory):
        _name = "cGcRenderableScreen::ShouldRenderLiveInShipScreen"

class cGcReportBaseUI:
    class EnterReportBaseMode(HookFactory):
        _name = "cGcReportBaseUI::EnterReportBaseMode"
    class ExitReportBaseMode(HookFactory):
        _name = "cGcReportBaseUI::ExitReportBaseMode"
    class OnDialogClose(HookFactory):
        _name = "cGcReportBaseUI::OnDialogClose"

class cGcTurretComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcTurretComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcTurretComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcTurretComponent::InitData"
    class SetTarget(HookFactory):
        _name = "cGcTurretComponent::SetTarget"
    class MoveToFaceTarget(HookFactory):
        _name = "cGcTurretComponent::MoveToFaceTarget"
        _overload: overloads.cGcTurretComponent.MoveToFaceTarget.overloads = "cGcTurretComponent *, cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcTurretComponent.MoveToFaceTarget.overloads):
            cls._overload = overload_args
            return cls
    class OnHit(HookFactory):
        _name = "cGcTurretComponent::OnHit"
    class GetOrigin(HookFactory):
        _name = "cGcTurretComponent::GetOrigin"
    class OnAttached(HookFactory):
        _name = "cGcTurretComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcTurretComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcTurretComponent::Update"
    class CanTarget(HookFactory):
        _name = "cGcTurretComponent::CanTarget"
    class FireProjectiles(HookFactory):
        _name = "cGcTurretComponent::FireProjectiles"
    class GetGunData(HookFactory):
        _name = "cGcTurretComponent::GetGunData"
    class Deactivate(HookFactory):
        _name = "cGcTurretComponent::Deactivate"
    class Release(HookFactory):
        _name = "cGcTurretComponent::Release"
    class GetTargetCentrePosition(HookFactory):
        _name = "cGcTurretComponent::GetTargetCentrePosition"

class ComponentInstancercGcTurretComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcTurretComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcTurretComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcTurretComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcTurretComponent::DestructInstance"

class cGcMissileComponent:
    class AttackingPlayer(HookFactory):
        _name = "cGcMissileComponent::AttackingPlayer"
    class GetTypedComponent(HookFactory):
        _name = "cGcMissileComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcMissileComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcMissileComponent::InitData"
    class GetNumComponents(HookFactory):
        _name = "cGcMissileComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcMissileComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcMissileComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcMissileComponent::Update"
    class Release(HookFactory):
        _name = "cGcMissileComponent::Release"
    class Launch(HookFactory):
        _name = "cGcMissileComponent::Launch"

class ComponentInstancercGcMissileComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcMissileComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcMissileComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcMissileComponent::ConstructInstance"

class ComponentInstancercGcPlayerWeaponComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerWeaponComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerWeaponComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerWeaponComponent::ConstructInstance"

class cGcSpaceshipShieldComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSpaceshipShieldComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSpaceshipShieldComponent::InitData"
    class GetTypedComponent(HookFactory):
        _name = "cGcSpaceshipShieldComponent::GetTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcSpaceshipShieldComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSpaceshipShieldComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcSpaceshipShieldComponent::Update"
    class OnShieldBeginCharge(HookFactory):
        _name = "cGcSpaceshipShieldComponent::OnShieldBeginCharge"
    class OnHit(HookFactory):
        _name = "cGcSpaceshipShieldComponent::OnHit"
    class UpdateSketchFadeOpacity(HookFactory):
        _name = "cGcSpaceshipShieldComponent::UpdateSketchFadeOpacity"

class ComponentInstancercGcSpaceshipShieldComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcSpaceshipShieldComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSpaceshipShieldComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSpaceshipShieldComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcSpaceshipShieldComponent::DestructInstance"

class cGcSpaceMap:
    class cGcSpaceMap(HookFactory):
        _name = "cGcSpaceMap::cGcSpaceMap"
    class Construct(HookFactory):
        _name = "cGcSpaceMap::Construct"
    class Prepare(HookFactory):
        _name = "cGcSpaceMap::Prepare"
    class Update(HookFactory):
        _name = "cGcSpaceMap::Update"
    class UpdateRender(HookFactory):
        _name = "cGcSpaceMap::UpdateRender"
    class CleanupResources(HookFactory):
        _name = "cGcSpaceMap::CleanupResources"
    class GetLogDistance(HookFactory):
        _name = "cGcSpaceMap::GetLogDistance"
    class RenderNGui(HookFactory):
        _name = "cGcSpaceMap::RenderNGui"

class cGcSpaceMapObjectUtils:
    class ColourMapObject(HookFactory):
        _name = "cGcSpaceMapObjectUtils::ColourMapObject"

class cGcSpaceMapLine:
    class Construct(HookFactory):
        _name = "cGcSpaceMapLine::Construct"
    class UpdatePlane(HookFactory):
        _name = "cGcSpaceMapLine::UpdatePlane"

class cTkRichPresence:
    class NotifyPlayerStat(HookFactory):
        _name = "cTkRichPresence::NotifyPlayerStat"
    class Configure(HookFactory):
        _name = "cTkRichPresence::Configure"
    class Construct(HookFactory):
        _name = "cTkRichPresence::Construct"
    class CreateInstance(HookFactory):
        _name = "cTkRichPresence::CreateInstance"
    class Destruct(HookFactory):
        _name = "cTkRichPresence::Destruct"
    class GetCurrentStateString(HookFactory):
        _name = "cTkRichPresence::GetCurrentStateString"
    class NotifyState(HookFactory):
        _name = "cTkRichPresence::NotifyState"
    class ResetTracking(HookFactory):
        _name = "cTkRichPresence::ResetTracking"
    class Update(HookFactory):
        _name = "cTkRichPresence::Update"

class cGcSpaceMapObject:
    class Update(HookFactory):
        _name = "cGcSpaceMapObject::Update"
    class ChangeResource(HookFactory):
        _name = "cGcSpaceMapObject::ChangeResource"
    class Destruct(HookFactory):
        _name = "cGcSpaceMapObject::Destruct"
    class UpdateRender(HookFactory):
        _name = "cGcSpaceMapObject::UpdateRender"
    class Show(HookFactory):
        _name = "cGcSpaceMapObject::Show"
    class Hide(HookFactory):
        _name = "cGcSpaceMapObject::Hide"

class cGcSpaceMapAveragedObject:
    class ShouldCoalesce(HookFactory):
        _name = "cGcSpaceMapAveragedObject::ShouldCoalesce"

class cGcGenericSectionCondition:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionCondition::GetDescription"
    class GetBuildMenuHint(HookFactory):
        _name = "cGcGenericSectionCondition::GetBuildMenuHint"
    class EqualityText(HookFactory):
        _name = "cGcGenericSectionCondition::EqualityText"
        _overload: overloads.cGcGenericSectionCondition.EqualityText.overloads = "cGcGenericSectionCondition *, eEqualityEnum, __int64, cTkFixedString<1024,char> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGenericSectionCondition.EqualityText.overloads):
            cls._overload = overload_args
            return cls
    class DebugText(HookFactory):
        _name = "cGcGenericSectionCondition::DebugText"
        _overload: overloads.cGcGenericSectionCondition.DebugText.overloads = "eConditionTest, std::vector<cGcGenericSectionCondition *,TkSTLAllocatorShim<cGcGenericSectionCondition *,8,-1> > *, eRepeatLogic, cTkFixedString<1024,char> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGenericSectionCondition.DebugText.overloads):
            cls._overload = overload_args
            return cls

class cGcGenericSectionConditionIsScanEventLocal:
    class cGcGenericSectionConditionIsScanEventLocal(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocal::cGcGenericSectionConditionIsScanEventLocal"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocal::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocal::GetDescription"

class cGcGenericSectionConditionWaitForTime:
    class ResetsUserDataOnActivation(HookFactory):
        _name = "cGcGenericSectionConditionWaitForTime::ResetsUserDataOnActivation"
    class cGcGenericSectionConditionWaitForTime(HookFactory):
        _name = "cGcGenericSectionConditionWaitForTime::cGcGenericSectionConditionWaitForTime"
    class ResetUserData(HookFactory):
        _name = "cGcGenericSectionConditionWaitForTime::ResetUserData"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWaitForTime::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWaitForTime::GetDescription"

class cGcGenericSectionConditionBaseClaimed:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBaseClaimed::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBaseClaimed::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBaseClaimed::GetDescription"

class cGcGenericSectionConditionBaseQuery:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBaseQuery::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBaseQuery::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBaseQuery::GetDescription"
    class cGcGenericSectionConditionBaseQuery(HookFactory):
        _name = "cGcGenericSectionConditionBaseQuery::cGcGenericSectionConditionBaseQuery"

class cGcGenericSectionConditionBasePartsQuery:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBasePartsQuery::IsConditionTrue"
    class cGcGenericSectionConditionBasePartsQuery(HookFactory):
        _name = "cGcGenericSectionConditionBasePartsQuery::cGcGenericSectionConditionBasePartsQuery"

class cGcGenericSectionConditionMessageBeaconsQuery:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionMessageBeaconsQuery::IsConditionTrue"

class cGcGenericSectionConditionCriticalMissionsDone:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCriticalMissionsDone::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCriticalMissionsDone::GetDescription"

class cGcGenericSectionConditionLocation:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionLocation::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionLocation::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionLocation::GetDescription"

class cGcGenericSectionConditionWarping:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWarping::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWarping::GetDescription"

class cGcGenericSectionConditionPlanetResourceHint:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPlanetResourceHint::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPlanetResourceHint::GetDescription"
    class cGcGenericSectionConditionPlanetResourceHint(HookFactory):
        _name = "cGcGenericSectionConditionPlanetResourceHint::cGcGenericSectionConditionPlanetResourceHint"

class cGcGenericSectionConditionPlanetCreatureRoles:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPlanetCreatureRoles::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPlanetCreatureRoles::GetDescription"
    class cGcGenericSectionConditionPlanetCreatureRoles(HookFactory):
        _name = "cGcGenericSectionConditionPlanetCreatureRoles::cGcGenericSectionConditionPlanetCreatureRoles"

class cGcGenericSectionConditionSquadronSlots:
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionSquadronSlots::FormatConditionText"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSquadronSlots::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSquadronSlots::GetDescription"
    class cGcGenericSectionConditionSquadronSlots(HookFactory):
        _name = "cGcGenericSectionConditionSquadronSlots::cGcGenericSectionConditionSquadronSlots"

class cGcGenericSectionConditionBasePartNear:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBasePartNear::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBasePartNear::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBasePartNear::FormatConditionText"

class cGcGenericSectionConditionBasePartBuilt:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBasePartBuilt::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBasePartBuilt::GetDescription"
    class GetCurrentCount(HookFactory):
        _name = "cGcGenericSectionConditionBasePartBuilt::GetCurrentCount"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBasePartBuilt::FormatConditionText"

class cGcGenericSectionConditionBaseRequiresPower:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBaseRequiresPower::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBaseRequiresPower::GetDescription"

class cGcGenericSectionConditionRefinerActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionRefinerActive::IsConditionTrue"
    class GetRefinerComponent(HookFactory):
        _name = "cGcGenericSectionConditionRefinerActive::GetRefinerComponent"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionRefinerActive::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionRefinerActive::GetDescription"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionRefinerActive::GetConditionInventoryHint"

class cGcGenericSectionConditionRefinerHasOutput:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionRefinerHasOutput::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionRefinerHasOutput::GetDescription"

class cGcGenericSectionConditionGameMode:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionGameMode::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionGameMode::GetDescription"

class cGcGenericSectionConditionMissionCompleted:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionMissionCompleted::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionMissionCompleted::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionMissionCompleted::FormatConditionText"

class cGcGenericSectionConditionBiomeType:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBiomeType::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBiomeType::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBiomeType::GetDescription"

class cGcGenericSectionConditionWaterPlanet:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWaterPlanet::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWaterPlanet::GetDescription"

class cGcGenericSectionConditionWaterInSystem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWaterInSystem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWaterInSystem::GetDescription"

class cGcGenericSectionConditionSentinelLevel:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSentinelLevel::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSentinelLevel::GetDescription"

class cGcGenericSectionConditionSentinelsDisabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSentinelsDisabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSentinelsDisabled::GetDescription"

class cGcGenericSectionConditionSpecialKnown:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSpecialKnown::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSpecialKnown::GetDescription"

class cGcGenericSectionConditionSeasonRewardUnlocked:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSeasonRewardUnlocked::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSeasonRewardUnlocked::GetDescription"

class cGcGenericSectionConditionProductKnown:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionProductKnown::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionProductKnown::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionProductKnown::GetDescription"

class cGcGenericSectionConditionTechnologyKnown:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionTechnologyKnown::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionTechnologyKnown::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionTechnologyKnown::FormatConditionText"

class cGcGenericSectionConditionNPCHabitationHasWorker:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNPCHabitationHasWorker::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNPCHabitationHasWorker::GetDescription"

class cGcGenericSectionConditionFactionRank:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionFactionRank::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionFactionRank::GetDescription"

class cGcGenericSectionConditionSystemRace:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSystemRace::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSystemRace::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionSystemRace::FormatConditionText"

class cGcGenericSectionConditionPirateSystem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPirateSystem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPirateSystem::GetDescription"

class cGcGenericSectionConditionHasIllegalGoods:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasIllegalGoods::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasIllegalGoods::GetDescription"

class cGcGenericSectionConditionHasIngredientsForItem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasIngredientsForItem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasIngredientsForItem::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasIngredientsForItem::FormatConditionText"
    class cGcGenericSectionConditionHasIngredientsForItem(HookFactory):
        _name = "cGcGenericSectionConditionHasIngredientsForItem::cGcGenericSectionConditionHasIngredientsForItem"

class cGcGenericSectionConditionForceHideMultiplayer:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionForceHideMultiplayer::GetDescription"

class cGcGenericSectionConditionPlanetAttackPiratesActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPlanetAttackPiratesActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPlanetAttackPiratesActive::GetDescription"

class cGcGenericSectionConditionSystemHasInfestedPlanet:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSystemHasInfestedPlanet::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSystemHasInfestedPlanet::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionSystemHasInfestedPlanet::FormatConditionText"

class cGcGenericSectionConditionSystemPlanetTest:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSystemPlanetTest::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSystemPlanetTest::GetDescription"

class cGcGenericSectionConditionSystemStarClass:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSystemStarClass::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSystemStarClass::GetDescription"

class cGcGenericSectionConditionHasSubstance:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSubstance::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasSubstance::FormatConditionText"

class cGcGenericSectionConditionHasProduct:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasProduct::GetDescription"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasProduct::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasProduct::FormatConditionText"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionHasProduct::GetConditionInventoryHint"

class cGcGenericSectionConditionHasProcProduct:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasProcProduct::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasProcProduct::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasProcProduct::GetDescription"

class cGcGenericSectionConditionHasMoney:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasMoney::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasMoney::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasMoney::FormatConditionText"
    class CalculateRequiredAmount(HookFactory):
        _name = "cGcGenericSectionConditionHasMoney::CalculateRequiredAmount"

class cGcGenericSectionConditionInMultiplayer:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInMultiplayer::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInMultiplayer::GetDescription"
    class cGcGenericSectionConditionInMultiplayer(HookFactory):
        _name = "cGcGenericSectionConditionInMultiplayer::cGcGenericSectionConditionInMultiplayer"

class cGcGenericSectionConditionHasLegacyBasePending:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasLegacyBasePending::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasLegacyBasePending::GetDescription"
    class cGcGenericSectionConditionHasLegacyBasePending(HookFactory):
        _name = "cGcGenericSectionConditionHasLegacyBasePending::cGcGenericSectionConditionHasLegacyBasePending"

class cGcGenericSectionConditionWeaponMode:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWeaponMode::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWeaponMode::GetDescription"

class cGcGenericSectionConditionHasTechnology:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasTechnology::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasTechnology::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasTechnology::GetDescription"
    class ShouldRefreshInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionHasTechnology::ShouldRefreshInventoryHint"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionHasTechnology::GetConditionInventoryHint"

class cGcGenericSectionConditionHasProcTechnology:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasProcTechnology::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasProcTechnology::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasProcTechnology::GetDescription"

class cGcGenericSectionConditionIsTechnologyRepaired:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsTechnologyRepaired::IsConditionTrue"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionIsTechnologyRepaired::GetConditionInventoryHint"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsTechnologyRepaired::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsTechnologyRepaired::FormatConditionText"

class cGcGenericSectionConditionHasFreighter:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasFreighter::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasFreighter::GetDescription"

class cGcGenericSectionConditionMultiplayerFreighterAvailable:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionMultiplayerFreighterAvailable::GetDescription"

class cGcGenericSectionConditionCanSummonExocraft:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCanSummonExocraft::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCanSummonExocraft::GetDescription"

class cGcGenericSectionConditionHasExocraft:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasExocraft::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasExocraft::GetDescription"

class cGcGenericSectionConditionPrimaryExocraft:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPrimaryExocraft::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPrimaryExocraft::GetDescription"

class cGcGenericSectionConditionBasePowerGenerated:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBasePowerGenerated::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBasePowerGenerated::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionBasePowerGenerated::FormatConditionText"
    class cGcGenericSectionConditionBasePowerGenerated(HookFactory):
        _name = "cGcGenericSectionConditionBasePowerGenerated::cGcGenericSectionConditionBasePowerGenerated"

class cGcGenericSectionConditionNexusEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNexusEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNexusEnabled::GetDescription"
    class cGcGenericSectionConditionNexusEnabled(HookFactory):
        _name = "cGcGenericSectionConditionNexusEnabled::cGcGenericSectionConditionNexusEnabled"

class cGcGenericSectionConditionInVR:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInVR::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInVR::GetDescription"
    class cGcGenericSectionConditionInVR(HookFactory):
        _name = "cGcGenericSectionConditionInVR::cGcGenericSectionConditionInVR"

class cGcGenericSectionConditionLocalScanActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionLocalScanActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionLocalScanActive::GetDescription"
    class cGcGenericSectionConditionLocalScanActive(HookFactory):
        _name = "cGcGenericSectionConditionLocalScanActive::cGcGenericSectionConditionLocalScanActive"

class cGcGenericSectionConditionWristMenuOpen:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWristMenuOpen::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWristMenuOpen::GetDescription"
    class cGcGenericSectionConditionWristMenuOpen(HookFactory):
        _name = "cGcGenericSectionConditionWristMenuOpen::cGcGenericSectionConditionWristMenuOpen"

class cGcGenericSectionConditionPadActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPadActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPadActive::GetDescription"
    class cGcGenericSectionConditionPadActive(HookFactory):
        _name = "cGcGenericSectionConditionPadActive::cGcGenericSectionConditionPadActive"

class cGcGenericSectionConditionOnPlanetWithSandwormsOverriden:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionOnPlanetWithSandwormsOverriden::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionOnPlanetWithSandwormsOverriden::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionOnPlanetWithSandwormsOverriden::FormatConditionText"
    class cGcGenericSectionConditionOnPlanetWithSandwormsOverriden(HookFactory):
        _name = "cGcGenericSectionConditionOnPlanetWithSandwormsOverriden::cGcGenericSectionConditionOnPlanetWithSandwormsOverriden"

class cGcGenericSectionConditionGunOut:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionGunOut::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionGunOut::GetDescription"
    class cGcGenericSectionConditionGunOut(HookFactory):
        _name = "cGcGenericSectionConditionGunOut::cGcGenericSectionConditionGunOut"

class cGcGenericSectionConditionIsGrabbed:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsGrabbed::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsGrabbed::GetDescription"
    class cGcGenericSectionConditionIsGrabbed(HookFactory):
        _name = "cGcGenericSectionConditionIsGrabbed::cGcGenericSectionConditionIsGrabbed"

class cGcGenericSectionConditionEggMachinePageOpen:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionEggMachinePageOpen::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionEggMachinePageOpen::GetDescription"
    class cGcGenericSectionConditionEggMachinePageOpen(HookFactory):
        _name = "cGcGenericSectionConditionEggMachinePageOpen::cGcGenericSectionConditionEggMachinePageOpen"

class cGcGenericSectionConditionHasCreatureEggItem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasCreatureEggItem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasCreatureEggItem::GetDescription"
    class cGcGenericSectionConditionHasCreatureEggItem(HookFactory):
        _name = "cGcGenericSectionConditionHasCreatureEggItem::cGcGenericSectionConditionHasCreatureEggItem"

class cGcGenericSectionConditionSeasonNumber:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSeasonNumber::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSeasonNumber::GetDescription"
    class cGcGenericSectionConditionSeasonNumber(HookFactory):
        _name = "cGcGenericSectionConditionSeasonNumber::cGcGenericSectionConditionSeasonNumber"

class cGcGenericSectionConditionInSeasonalUA:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInSeasonalUA::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionInSeasonalUA::FormatConditionText"
    class cGcGenericSectionConditionInSeasonalUA(HookFactory):
        _name = "cGcGenericSectionConditionInSeasonalUA::cGcGenericSectionConditionInSeasonalUA"

class cGcGenericSectionConditionIsPartyPlanetUnlocked:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsPartyPlanetUnlocked::GetDescription"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsPartyPlanetUnlocked::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsPartyPlanetUnlocked::FormatConditionText"
    class cGcGenericSectionConditionIsPartyPlanetUnlocked(HookFactory):
        _name = "cGcGenericSectionConditionIsPartyPlanetUnlocked::cGcGenericSectionConditionIsPartyPlanetUnlocked"

class cGcGenericSectionConditionTakingDamage:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionTakingDamage::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionTakingDamage::GetDescription"
    class cGcGenericSectionConditionTakingDamage(HookFactory):
        _name = "cGcGenericSectionConditionTakingDamage::cGcGenericSectionConditionTakingDamage"

class cGcGenericSectionConditionShieldDown:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionShieldDown::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionShieldDown::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionShieldDown::FormatConditionText"
    class cGcGenericSectionConditionShieldDown(HookFactory):
        _name = "cGcGenericSectionConditionShieldDown::cGcGenericSectionConditionShieldDown"

class cGcGenericSectionConditionConvertedFromSeason:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionConvertedFromSeason::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionConvertedFromSeason::GetDescription"
    class cGcGenericSectionConditionConvertedFromSeason(HookFactory):
        _name = "cGcGenericSectionConditionConvertedFromSeason::cGcGenericSectionConditionConvertedFromSeason"

class cGcGenericSectionConditionInteractionIndexChanged:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInteractionIndexChanged::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInteractionIndexChanged::GetDescription"
    class cGcGenericSectionConditionInteractionIndexChanged(HookFactory):
        _name = "cGcGenericSectionConditionInteractionIndexChanged::cGcGenericSectionConditionInteractionIndexChanged"

class cGcGenericSectionConditionAllMilestonesComplete:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAllMilestonesComplete::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAllMilestonesComplete::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionAllMilestonesComplete::FormatConditionText"
    class cGcGenericSectionConditionAllMilestonesComplete(HookFactory):
        _name = "cGcGenericSectionConditionAllMilestonesComplete::cGcGenericSectionConditionAllMilestonesComplete"

class cGcGenericSectionConditionInventoryOpen:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInventoryOpen::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInventoryOpen::GetDescription"
    class cGcGenericSectionConditionInventoryOpen(HookFactory):
        _name = "cGcGenericSectionConditionInventoryOpen::cGcGenericSectionConditionInventoryOpen"

class cGcGenericSectionConditionAbandonedOrEmptySystem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedOrEmptySystem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedOrEmptySystem::GetDescription"
    class cGcGenericSectionConditionAbandonedOrEmptySystem(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedOrEmptySystem::cGcGenericSectionConditionAbandonedOrEmptySystem"

class cGcGenericSectionConditionBuildMenuOpen:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionBuildMenuOpen::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionBuildMenuOpen::GetDescription"
    class cGcGenericSectionConditionBuildMenuOpen(HookFactory):
        _name = "cGcGenericSectionConditionBuildMenuOpen::cGcGenericSectionConditionBuildMenuOpen"

class cGcGenericSectionConditionHasActiveDetailMessage:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveDetailMessage::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveDetailMessage::GetDescription"
    class cGcGenericSectionConditionHasActiveDetailMessage(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveDetailMessage::cGcGenericSectionConditionHasActiveDetailMessage"

class cGcGenericSectionConditionHasCommunicatorSignal:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasCommunicatorSignal::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasCommunicatorSignal::GetDescription"
    class cGcGenericSectionConditionHasCommunicatorSignal(HookFactory):
        _name = "cGcGenericSectionConditionHasCommunicatorSignal::cGcGenericSectionConditionHasCommunicatorSignal"

class cGcGenericSectionConditionHasActiveStatsMessage:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveStatsMessage::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveStatsMessage::GetDescription"
    class cGcGenericSectionConditionHasActiveStatsMessage(HookFactory):
        _name = "cGcGenericSectionConditionHasActiveStatsMessage::cGcGenericSectionConditionHasActiveStatsMessage"

class cGcGenericSectionConditionHasSpareProcTech:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSpareProcTech::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSpareProcTech::GetDescription"
    class cGcGenericSectionConditionHasSpareProcTech(HookFactory):
        _name = "cGcGenericSectionConditionHasSpareProcTech::cGcGenericSectionConditionHasSpareProcTech"

class cGcGenericSectionConditionIsSurveying:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsSurveying::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsSurveying::GetDescription"
    class cGcGenericSectionConditionIsSurveying(HookFactory):
        _name = "cGcGenericSectionConditionIsSurveying::cGcGenericSectionConditionIsSurveying"

class cGcGenericSectionConditionOnMultiplayerMission:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionOnMultiplayerMission::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionOnMultiplayerMission::GetDescription"
    class cGcGenericSectionConditionOnMultiplayerMission(HookFactory):
        _name = "cGcGenericSectionConditionOnMultiplayerMission::cGcGenericSectionConditionOnMultiplayerMission"

class cGcGenericSectionConditionRidingCreature:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionRidingCreature::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionRidingCreature::GetDescription"
    class cGcGenericSectionConditionRidingCreature(HookFactory):
        _name = "cGcGenericSectionConditionRidingCreature::cGcGenericSectionConditionRidingCreature"

class cGcGenericSectionConditionFeedingCreatures:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionFeedingCreatures::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionFeedingCreatures::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionFeedingCreatures::FormatConditionText"
    class GetNumFollowing(HookFactory):
        _name = "cGcGenericSectionConditionFeedingCreatures::GetNumFollowing"
    class cGcGenericSectionConditionFeedingCreatures(HookFactory):
        _name = "cGcGenericSectionConditionFeedingCreatures::cGcGenericSectionConditionFeedingCreatures"

class cGcGenericSectionConditionHasGrabbableTarget:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasGrabbableTarget::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasGrabbableTarget::GetDescription"
    class cGcGenericSectionConditionHasGrabbableTarget(HookFactory):
        _name = "cGcGenericSectionConditionHasGrabbableTarget::cGcGenericSectionConditionHasGrabbableTarget"

class cGcGenericSectionConditionAimingTeleporter:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAimingTeleporter::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAimingTeleporter::GetDescription"
    class cGcGenericSectionConditionAimingTeleporter(HookFactory):
        _name = "cGcGenericSectionConditionAimingTeleporter::cGcGenericSectionConditionAimingTeleporter"

class cGcGenericSectionConditionIsFrigateFlybyActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsFrigateFlybyActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsFrigateFlybyActive::GetDescription"
    class cGcGenericSectionConditionIsFrigateFlybyActive(HookFactory):
        _name = "cGcGenericSectionConditionIsFrigateFlybyActive::cGcGenericSectionConditionIsFrigateFlybyActive"

class cGcGenericSectionConditionExocraftMoving:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionExocraftMoving::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExocraftMoving::GetDescription"
    class cGcGenericSectionConditionExocraftMoving(HookFactory):
        _name = "cGcGenericSectionConditionExocraftMoving::cGcGenericSectionConditionExocraftMoving"

class cGcGenericSectionConditionIsAbandFreighterDoorOpen:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsAbandFreighterDoorOpen::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsAbandFreighterDoorOpen::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsAbandFreighterDoorOpen::FormatConditionText"
    class cGcGenericSectionConditionIsAbandFreighterDoorOpen(HookFactory):
        _name = "cGcGenericSectionConditionIsAbandFreighterDoorOpen::cGcGenericSectionConditionIsAbandFreighterDoorOpen"

class cGcGenericSectionConditionShipEngineStatus:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionShipEngineStatus::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionShipEngineStatus::GetDescription"
    class cGcGenericSectionConditionShipEngineStatus(HookFactory):
        _name = "cGcGenericSectionConditionShipEngineStatus::cGcGenericSectionConditionShipEngineStatus"

class cGcGenericSectionConditionUsingThirdPersonCamera:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionUsingThirdPersonCamera::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionUsingThirdPersonCamera::GetDescription"
    class cGcGenericSectionConditionUsingThirdPersonCamera(HookFactory):
        _name = "cGcGenericSectionConditionUsingThirdPersonCamera::cGcGenericSectionConditionUsingThirdPersonCamera"

class cGcGenericSectionConditionCameraControlStealing:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCameraControlStealing::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCameraControlStealing::GetDescription"
    class cGcGenericSectionConditionCameraControlStealing(HookFactory):
        _name = "cGcGenericSectionConditionCameraControlStealing::cGcGenericSectionConditionCameraControlStealing"

class cGcGenericSectionConditionIsPlayerWeak:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWeak::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWeak::GetDescription"
    class cGcGenericSectionConditionIsPlayerWeak(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWeak::cGcGenericSectionConditionIsPlayerWeak"

class cGcGenericSectionConditionDefaultItem:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionDefaultItem::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionDefaultItem::GetDescription"
    class cGcGenericSectionConditionDefaultItem(HookFactory):
        _name = "cGcGenericSectionConditionDefaultItem::cGcGenericSectionConditionDefaultItem"

class cGcGenericSectionConditionMissionMessage:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionMissionMessage::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionMissionMessage::GetDescription"

class cGcGenericSectionConditionTotalWarpsNumber:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionTotalWarpsNumber::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionTotalWarpsNumber::GetDescription"

class cGcGenericSectionConditionIsPlayerWanted:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWanted::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWanted::FormatConditionText"
    class cGcGenericSectionConditionIsPlayerWanted(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWanted::cGcGenericSectionConditionIsPlayerWanted"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsPlayerWanted::GetDescription"

class cGcGenericSectionConditionHasFuel:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::IsConditionTrue"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::GetConditionInventoryHint"
    class GetItem(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::GetItem"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::FormatConditionText"
    class cGcGenericSectionConditionHasFuel(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::cGcGenericSectionConditionHasFuel"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasFuel::GetDescription"

class cGcGenericSectionConditionHasFuelForTakeoff:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasFuelForTakeoff::IsConditionTrue"
    class GetConditionInventoryHint(HookFactory):
        _name = "cGcGenericSectionConditionHasFuelForTakeoff::GetConditionInventoryHint"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasFuelForTakeoff::FormatConditionText"
    class cGcGenericSectionConditionHasFuelForTakeoff(HookFactory):
        _name = "cGcGenericSectionConditionHasFuelForTakeoff::cGcGenericSectionConditionHasFuelForTakeoff"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasFuelForTakeoff::GetDescription"

class cGcGenericSectionConditionInventorySlots:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInventorySlots::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInventorySlots::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionInventorySlots::FormatConditionText"
    class cGcGenericSectionConditionInventorySlots(HookFactory):
        _name = "cGcGenericSectionConditionInventorySlots::cGcGenericSectionConditionInventorySlots"

class cGcGenericSectionConditionFrigateCount:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionFrigateCount::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionFrigateCount::GetDescription"
    class cGcGenericSectionConditionFrigateCount(HookFactory):
        _name = "cGcGenericSectionConditionFrigateCount::cGcGenericSectionConditionFrigateCount"

class cGcGenericSectionConditionExpeditionCount:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionCount::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionCount::GetDescription"
    class cGcGenericSectionConditionExpeditionCount(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionCount::cGcGenericSectionConditionExpeditionCount"

class cGcGenericSectionConditionExpeditionContainsReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionContainsReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionContainsReward::GetDescription"
    class cGcGenericSectionConditionExpeditionContainsReward(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionContainsReward::cGcGenericSectionConditionExpeditionContainsReward"

class cGcGenericSectionConditionDamagedFrigateAtHome:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionDamagedFrigateAtHome::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionDamagedFrigateAtHome::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionDamagedFrigateAtHome::FormatConditionText"
    class cGcGenericSectionConditionDamagedFrigateAtHome(HookFactory):
        _name = "cGcGenericSectionConditionDamagedFrigateAtHome::cGcGenericSectionConditionDamagedFrigateAtHome"

class cGcGenericSectionConditionExpeditionProgress:
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionProgress::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionProgress::FormatConditionText"
    class cGcGenericSectionConditionExpeditionProgress(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionProgress::cGcGenericSectionConditionExpeditionProgress"

class cGcGenericSectionConditionPlanetStatLevel:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPlanetStatLevel::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionPlanetStatLevel::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPlanetStatLevel::GetDescription"
    class cGcGenericSectionConditionPlanetStatLevel(HookFactory):
        _name = "cGcGenericSectionConditionPlanetStatLevel::cGcGenericSectionConditionPlanetStatLevel"

class cGcGenericSectionConditionStatLevel:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionStatLevel::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionStatLevel::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionStatLevel::GetDescription"
    class cGcGenericSectionConditionStatLevel(HookFactory):
        _name = "cGcGenericSectionConditionStatLevel::cGcGenericSectionConditionStatLevel"

class cGcGenericSectionConditionStatDiff:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionStatDiff::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionStatDiff::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionStatDiff::GetDescription"
    class cGcGenericSectionConditionStatDiff(HookFactory):
        _name = "cGcGenericSectionConditionStatDiff::cGcGenericSectionConditionStatDiff"

class cGcGenericSectionConditionStatChange:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionStatChange::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionStatChange::GetDescription"
    class cGcGenericSectionConditionStatChange(HookFactory):
        _name = "cGcGenericSectionConditionStatChange::cGcGenericSectionConditionStatChange"

class cGcGenericSectionConditionIsAnomalyLoaded:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsAnomalyLoaded::IsConditionTrue"
    class cGcGenericSectionConditionIsAnomalyLoaded(HookFactory):
        _name = "cGcGenericSectionConditionIsAnomalyLoaded::cGcGenericSectionConditionIsAnomalyLoaded"

class cGcGenericSectionConditionIsLookingAtAnomalySpawn:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsLookingAtAnomalySpawn::IsConditionTrue"
    class cGcGenericSectionConditionIsLookingAtAnomalySpawn(HookFactory):
        _name = "cGcGenericSectionConditionIsLookingAtAnomalySpawn::cGcGenericSectionConditionIsLookingAtAnomalySpawn"

class cGcGenericSectionConditionIsCurrentMission:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsCurrentMission::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsCurrentMission::GetDescription"
    class cGcGenericSectionConditionIsCurrentMission(HookFactory):
        _name = "cGcGenericSectionConditionIsCurrentMission::cGcGenericSectionConditionIsCurrentMission"

class cGcGenericSectionConditionMissionSelected:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionMissionSelected::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionMissionSelected::GetDescription"
    class cGcGenericSectionConditionMissionSelected(HookFactory):
        _name = "cGcGenericSectionConditionMissionSelected::cGcGenericSectionConditionMissionSelected"

class cGcGenericSectionConditionHasGalacticFeature:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasGalacticFeature::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasGalacticFeature::GetDescription"
    class cGcGenericSectionConditionHasGalacticFeature(HookFactory):
        _name = "cGcGenericSectionConditionHasGalacticFeature::cGcGenericSectionConditionHasGalacticFeature"

class cGcGenericSectionConditionGlobalMission:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionGlobalMission::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionGlobalMission::GetDescription"
    class cGcGenericSectionConditionGlobalMission(HookFactory):
        _name = "cGcGenericSectionConditionGlobalMission::cGcGenericSectionConditionGlobalMission"

class cGcGenericSectionConditionFreighterBattle:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionFreighterBattle::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionFreighterBattle::GetDescription"
    class cGcGenericSectionConditionFreighterBattle(HookFactory):
        _name = "cGcGenericSectionConditionFreighterBattle::cGcGenericSectionConditionFreighterBattle"

class cGcGenericSectionConditionExtraSuitSlots:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionExtraSuitSlots::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExtraSuitSlots::GetDescription"
    class cGcGenericSectionConditionExtraSuitSlots(HookFactory):
        _name = "cGcGenericSectionConditionExtraSuitSlots::cGcGenericSectionConditionExtraSuitSlots"

class cGcGenericSectionConditionCanReceiveReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCanReceiveReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCanReceiveReward::GetDescription"
    class cGcGenericSectionConditionCanReceiveReward(HookFactory):
        _name = "cGcGenericSectionConditionCanReceiveReward::cGcGenericSectionConditionCanReceiveReward"

class cGcGenericSectionConditionPercentChance:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPercentChance::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPercentChance::GetDescription"
    class cGcGenericSectionConditionPercentChance(HookFactory):
        _name = "cGcGenericSectionConditionPercentChance::cGcGenericSectionConditionPercentChance"

class cGcGenericSectionConditionGroup:
    class cGcGenericSectionConditionGroup(HookFactory):
        _name = "cGcGenericSectionConditionGroup::cGcGenericSectionConditionGroup"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionGroup::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionGroup::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionGroup::FormatConditionText"

class cGcGenericSectionConditionAIShipCount:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAIShipCount::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAIShipCount::GetDescription"
    class cGcGenericSectionConditionAIShipCount(HookFactory):
        _name = "cGcGenericSectionConditionAIShipCount::cGcGenericSectionConditionAIShipCount"

class cGcGenericSectionConditionNumberOfShipsOwned:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNumberOfShipsOwned::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNumberOfShipsOwned::GetDescription"
    class cGcGenericSectionConditionNumberOfShipsOwned(HookFactory):
        _name = "cGcGenericSectionConditionNumberOfShipsOwned::cGcGenericSectionConditionNumberOfShipsOwned"

class cGcGenericSectionConditionNumAtlasStationsVisited:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNumAtlasStationsVisited::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNumAtlasStationsVisited::GetDescription"
    class cGcGenericSectionConditionNumAtlasStationsVisited(HookFactory):
        _name = "cGcGenericSectionConditionNumAtlasStationsVisited::cGcGenericSectionConditionNumAtlasStationsVisited"

class cGcGenericSectionConditionHasEndpointForEvent:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasEndpointForEvent::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasEndpointForEvent::GetDescription"
    class cGcGenericSectionConditionHasEndpointForEvent(HookFactory):
        _name = "cGcGenericSectionConditionHasEndpointForEvent::cGcGenericSectionConditionHasEndpointForEvent"

class cGcGenericSectionConditionInUA:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInUA::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInUA::GetDescription"
    class cGcGenericSectionConditionInUA(HookFactory):
        _name = "cGcGenericSectionConditionInUA::cGcGenericSectionConditionInUA"

class cGcGenericSectionConditionEventRequiresRGB:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionEventRequiresRGB::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionEventRequiresRGB::GetDescription"
    class cGcGenericSectionConditionEventRequiresRGB(HookFactory):
        _name = "cGcGenericSectionConditionEventRequiresRGB::cGcGenericSectionConditionEventRequiresRGB"

class cGcGenericSectionConditionPulseEncounterOverriden:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterOverriden::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterOverriden::GetDescription"
    class cGcGenericSectionConditionPulseEncounterOverriden(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterOverriden::cGcGenericSectionConditionPulseEncounterOverriden"

class cGcGenericSectionConditionPulseEncounterActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterActive::GetDescription"
    class cGcGenericSectionConditionPulseEncounterActive(HookFactory):
        _name = "cGcGenericSectionConditionPulseEncounterActive::cGcGenericSectionConditionPulseEncounterActive"

class cGcGenericSectionConditionAbandonedFreighterExplored:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedFreighterExplored::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedFreighterExplored::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedFreighterExplored::FormatConditionText"
    class cGcGenericSectionConditionAbandonedFreighterExplored(HookFactory):
        _name = "cGcGenericSectionConditionAbandonedFreighterExplored::cGcGenericSectionConditionAbandonedFreighterExplored"

class cGcGenericSectionConditionAlienPodAggroed:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAlienPodAggroed::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAlienPodAggroed::GetDescription"
    class cGcGenericSectionConditionAlienPodAggroed(HookFactory):
        _name = "cGcGenericSectionConditionAlienPodAggroed::cGcGenericSectionConditionAlienPodAggroed"

class cGcGenericSectionConditionHasEntitlement:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasEntitlement::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasEntitlement::GetDescription"
    class cGcGenericSectionConditionHasEntitlement(HookFactory):
        _name = "cGcGenericSectionConditionHasEntitlement::cGcGenericSectionConditionHasEntitlement"

class cGcGenericSectionConditionUnclaimedStageReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionUnclaimedStageReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionUnclaimedStageReward::GetDescription"
    class cGcGenericSectionConditionUnclaimedStageReward(HookFactory):
        _name = "cGcGenericSectionConditionUnclaimedStageReward::cGcGenericSectionConditionUnclaimedStageReward"

class cGcGenericSectionConditionExpeditionNearlyOver:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionNearlyOver::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionNearlyOver::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionNearlyOver::FormatConditionText"
    class cGcGenericSectionConditionExpeditionNearlyOver(HookFactory):
        _name = "cGcGenericSectionConditionExpeditionNearlyOver::cGcGenericSectionConditionExpeditionNearlyOver"

class cGcGenericSectionConditionHasSeasonalReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSeasonalReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSeasonalReward::GetDescription"
    class cGcGenericSectionConditionHasSeasonalReward(HookFactory):
        _name = "cGcGenericSectionConditionHasSeasonalReward::cGcGenericSectionConditionHasSeasonalReward"

class cGcGenericSectionConditionSeasonRewardsRecipe:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSeasonRewardsRecipe::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSeasonRewardsRecipe::GetDescription"
    class cGcGenericSectionConditionSeasonRewardsRecipe(HookFactory):
        _name = "cGcGenericSectionConditionSeasonRewardsRecipe::cGcGenericSectionConditionSeasonRewardsRecipe"

class cGcGenericSectionConditionHasTwitchReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasTwitchReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasTwitchReward::GetDescription"
    class cGcGenericSectionConditionHasTwitchReward(HookFactory):
        _name = "cGcGenericSectionConditionHasTwitchReward::cGcGenericSectionConditionHasTwitchReward"

class cGcGenericSectionConditionHasPlatformReward:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasPlatformReward::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasPlatformReward::GetDescription"
    class cGcGenericSectionConditionHasPlatformReward(HookFactory):
        _name = "cGcGenericSectionConditionHasPlatformReward::cGcGenericSectionConditionHasPlatformReward"

class cGcGenericSectionConditionHasMultiTool:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasMultiTool::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasMultiTool::GetDescription"
    class cGcGenericSectionConditionHasMultiTool(HookFactory):
        _name = "cGcGenericSectionConditionHasMultiTool::cGcGenericSectionConditionHasMultiTool"

class cGcGenericSectionConditionHasShip:
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasShip::FormatConditionText"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasShip::IsConditionTrue"
    class DoesShipMatch(HookFactory):
        _name = "cGcGenericSectionConditionHasShip::DoesShipMatch"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasShip::GetDescription"
    class cGcGenericSectionConditionHasShip(HookFactory):
        _name = "cGcGenericSectionConditionHasShip::cGcGenericSectionConditionHasShip"

class cGcGenericSectionConditionCreatureOwned:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureOwned::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureOwned::GetDescription"
    class cGcGenericSectionConditionCreatureOwned(HookFactory):
        _name = "cGcGenericSectionConditionCreatureOwned::cGcGenericSectionConditionCreatureOwned"

class cGcGenericSectionConditionCreatureSlots:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSlots::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSlots::GetDescription"
    class cGcGenericSectionConditionCreatureSlots(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSlots::cGcGenericSectionConditionCreatureSlots"

class cGcGenericSectionConditionCreatureTrust:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureTrust::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionCreatureTrust::FormatConditionText"
    class GetHighestTrust(HookFactory):
        _name = "cGcGenericSectionConditionCreatureTrust::GetHighestTrust"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureTrust::GetDescription"
    class cGcGenericSectionConditionCreatureTrust(HookFactory):
        _name = "cGcGenericSectionConditionCreatureTrust::cGcGenericSectionConditionCreatureTrust"

class cGcGenericSectionConditionCreatureSummoned:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSummoned::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSummoned::GetDescription"
    class cGcGenericSectionConditionCreatureSummoned(HookFactory):
        _name = "cGcGenericSectionConditionCreatureSummoned::cGcGenericSectionConditionCreatureSummoned"

class cGcGenericSectionConditionCreatureReadyToHatch:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToHatch::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToHatch::GetDescription"
    class cGcGenericSectionConditionCreatureReadyToHatch(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToHatch::cGcGenericSectionConditionCreatureReadyToHatch"

class cGcGenericSectionConditionCreatureReadyToLay:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToLay::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToLay::GetDescription"
    class cGcGenericSectionConditionCreatureReadyToLay(HookFactory):
        _name = "cGcGenericSectionConditionCreatureReadyToLay::cGcGenericSectionConditionCreatureReadyToLay"

class cGcGenericSectionConditionSquadronPilotsOwned:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSquadronPilotsOwned::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSquadronPilotsOwned::GetDescription"
    class cGcGenericSectionConditionSquadronPilotsOwned(HookFactory):
        _name = "cGcGenericSectionConditionSquadronPilotsOwned::cGcGenericSectionConditionSquadronPilotsOwned"

class cGcGenericSectionConditionCurrentSlope:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCurrentSlope::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCurrentSlope::GetDescription"
    class cGcGenericSectionConditionCurrentSlope(HookFactory):
        _name = "cGcGenericSectionConditionCurrentSlope::cGcGenericSectionConditionCurrentSlope"

class cGcGenericSectionConditionElevation:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionElevation::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionElevation::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionElevation::FormatConditionText"
    class cGcGenericSectionConditionElevation(HookFactory):
        _name = "cGcGenericSectionConditionElevation::cGcGenericSectionConditionElevation"

class cGcGenericSectionConditionUnderwaterDepth:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionUnderwaterDepth::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionUnderwaterDepth::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionUnderwaterDepth::FormatConditionText"
    class cGcGenericSectionConditionUnderwaterDepth(HookFactory):
        _name = "cGcGenericSectionConditionUnderwaterDepth::cGcGenericSectionConditionUnderwaterDepth"

class cGcGenericSectionConditionNearPole:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNearPole::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNearPole::GetDescription"
    class cGcGenericSectionConditionNearPole(HookFactory):
        _name = "cGcGenericSectionConditionNearPole::cGcGenericSectionConditionNearPole"

class cGcGenericSectionConditionIsDepotDestroyed:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsDepotDestroyed::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsDepotDestroyed::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsDepotDestroyed::FormatConditionText"
    class cGcGenericSectionConditionIsDepotDestroyed(HookFactory):
        _name = "cGcGenericSectionConditionIsDepotDestroyed::cGcGenericSectionConditionIsDepotDestroyed"

class cGcGenericSectionConditionAreDroneHivePartsDestroyed:
    class AllowMissionRestart(HookFactory):
        _name = "cGcGenericSectionConditionAreDroneHivePartsDestroyed::AllowMissionRestart"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAreDroneHivePartsDestroyed::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAreDroneHivePartsDestroyed::GetDescription"
    class cGcGenericSectionConditionAreDroneHivePartsDestroyed(HookFactory):
        _name = "cGcGenericSectionConditionAreDroneHivePartsDestroyed::cGcGenericSectionConditionAreDroneHivePartsDestroyed"

class cGcGenericSectionConditionIsScanEventOnCurrentPlanet:
    class AllowMissionRestart(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventOnCurrentPlanet::AllowMissionRestart"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventOnCurrentPlanet::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventOnCurrentPlanet::GetDescription"
    class cGcGenericSectionConditionIsScanEventOnCurrentPlanet(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventOnCurrentPlanet::cGcGenericSectionConditionIsScanEventOnCurrentPlanet"

class cGcGenericSectionConditionNearestBuilding:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNearestBuilding::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNearestBuilding::GetDescription"
    class cGcGenericSectionConditionNearestBuilding(HookFactory):
        _name = "cGcGenericSectionConditionNearestBuilding::cGcGenericSectionConditionNearestBuilding"

class cGcGenericSectionConditionIsScanEventRepaired:
    class cGcGenericSectionConditionIsScanEventRepaired(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventRepaired::cGcGenericSectionConditionIsScanEventRepaired"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventRepaired::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventRepaired::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventRepaired::GetDescription"

class cGcGenericSectionConditionIsScanEventActive:
    class cGcGenericSectionConditionIsScanEventActive(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventActive::cGcGenericSectionConditionIsScanEventActive"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventActive::GetDescription"

class cGcGenericSectionConditionIsMissionInProgress:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsMissionInProgress::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsMissionInProgress::GetDescription"
    class cGcGenericSectionConditionIsMissionInProgress(HookFactory):
        _name = "cGcGenericSectionConditionIsMissionInProgress::cGcGenericSectionConditionIsMissionInProgress"

class cGcGenericSectionConditionNearObject:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNearObject::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNearObject::GetDescription"
    class cGcGenericSectionConditionNearObject(HookFactory):
        _name = "cGcGenericSectionConditionNearObject::cGcGenericSectionConditionNearObject"

class cGcGenericSectionConditionNearScanEvent:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionNearScanEvent::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionNearScanEvent::GetDescription"
    class cGcGenericSectionConditionNearScanEvent(HookFactory):
        _name = "cGcGenericSectionConditionNearScanEvent::cGcGenericSectionConditionNearScanEvent"

class cGcGenericSectionConditionUsingPortal:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionUsingPortal::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionUsingPortal::GetDescription"
    class cGcGenericSectionConditionUsingPortal(HookFactory):
        _name = "cGcGenericSectionConditionUsingPortal::cGcGenericSectionConditionUsingPortal"

class cGcGenericSectionConditionHazard:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHazard::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHazard::GetDescription"
    class cGcGenericSectionConditionHazard(HookFactory):
        _name = "cGcGenericSectionConditionHazard::cGcGenericSectionConditionHazard"

class cGcGenericSectionConditionWeather:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWeather::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWeather::GetDescription"
    class cGcGenericSectionConditionWeather(HookFactory):
        _name = "cGcGenericSectionConditionWeather::cGcGenericSectionConditionWeather"

class cGcGenericSectionConditionRequestedPhoto:
    class cGcGenericSectionConditionRequestedPhoto(HookFactory):
        _name = "cGcGenericSectionConditionRequestedPhoto::cGcGenericSectionConditionRequestedPhoto"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionRequestedPhoto::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionRequestedPhoto::GetDescription"

class cGcGenericSectionConditionInCombat:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionInCombat::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionInCombat::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionInCombat::FormatConditionText"
    class EncouragesFightingSentinels(HookFactory):
        _name = "cGcGenericSectionConditionInCombat::EncouragesFightingSentinels"
    class cGcGenericSectionConditionInCombat(HookFactory):
        _name = "cGcGenericSectionConditionInCombat::cGcGenericSectionConditionInCombat"

class cGcGenericSectionConditionOnOtherSideOfPortal:
    class cGcGenericSectionConditionOnOtherSideOfPortal(HookFactory):
        _name = "cGcGenericSectionConditionOnOtherSideOfPortal::cGcGenericSectionConditionOnOtherSideOfPortal"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionOnOtherSideOfPortal::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionOnOtherSideOfPortal::GetDescription"

class cGcGenericSectionConditionIsScanEventLocalOrNear:
    class cGcGenericSectionConditionIsScanEventLocalOrNear(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocalOrNear::cGcGenericSectionConditionIsScanEventLocalOrNear"
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocalOrNear::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionIsScanEventLocalOrNear::GetDescription"

class cGcGenericSectionConditionWaitForPirates:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionWaitForPirates::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionWaitForPirates::GetDescription"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionWaitForPirates::FormatConditionText"
    class cGcGenericSectionConditionWaitForPirates(HookFactory):
        _name = "cGcGenericSectionConditionWaitForPirates::cGcGenericSectionConditionWaitForPirates"

class cGcGenericSectionConditionReadyToSpawnPirates:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionReadyToSpawnPirates::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionReadyToSpawnPirates::GetDescription"
    class cGcGenericSectionConditionReadyToSpawnPirates(HookFactory):
        _name = "cGcGenericSectionConditionReadyToSpawnPirates::cGcGenericSectionConditionReadyToSpawnPirates"

class cGcGenericSectionConditionHasSettlement:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlement::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlement::GetDescription"

class cGcGenericSectionConditionHasSettlementLocal:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementLocal::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementLocal::GetDescription"

class cGcGenericSectionConditionSettlementStatLevel:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSettlementStatLevel::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSettlementStatLevel::GetDescription"
    class cGcGenericSectionConditionSettlementStatLevel(HookFactory):
        _name = "cGcGenericSectionConditionSettlementStatLevel::cGcGenericSectionConditionSettlementStatLevel"

class cGcGenericSectionConditionHasSettlementBuilding:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementBuilding::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementBuilding::GetDescription"

class cGcGenericSectionConditionHasAnySettlementBuildingInProgress:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasAnySettlementBuildingInProgress::IsConditionTrue"
    class FormatConditionText(HookFactory):
        _name = "cGcGenericSectionConditionHasAnySettlementBuildingInProgress::FormatConditionText"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasAnySettlementBuildingInProgress::GetDescription"
    class cGcGenericSectionConditionHasAnySettlementBuildingInProgress(HookFactory):
        _name = "cGcGenericSectionConditionHasAnySettlementBuildingInProgress::cGcGenericSectionConditionHasAnySettlementBuildingInProgress"

class cGcGenericSectionConditionHasSettlementProductPending:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementProductPending::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementProductPending::GetDescription"
    class cGcGenericSectionConditionHasSettlementProductPending(HookFactory):
        _name = "cGcGenericSectionConditionHasSettlementProductPending::cGcGenericSectionConditionHasSettlementProductPending"

class cGcGenericSectionConditionSettlementBuildingsAllStarted:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSettlementBuildingsAllStarted::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSettlementBuildingsAllStarted::GetDescription"
    class cGcGenericSectionConditionSettlementBuildingsAllStarted(HookFactory):
        _name = "cGcGenericSectionConditionSettlementBuildingsAllStarted::cGcGenericSectionConditionSettlementBuildingsAllStarted"

class cGcGenericSectionConditionHasPendingSettlementJudgement:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasPendingSettlementJudgement::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasPendingSettlementJudgement::GetDescription"

class cGcGenericSectionConditionStartWithAllPartsKnown:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionStartWithAllPartsKnown::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionStartWithAllPartsKnown::GetDescription"
    class cGcGenericSectionConditionStartWithAllPartsKnown(HookFactory):
        _name = "cGcGenericSectionConditionStartWithAllPartsKnown::cGcGenericSectionConditionStartWithAllPartsKnown"

class cGcGenericSectionConditionItemCostsEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionItemCostsEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionItemCostsEnabled::GetDescription"
    class cGcGenericSectionConditionItemCostsEnabled(HookFactory):
        _name = "cGcGenericSectionConditionItemCostsEnabled::cGcGenericSectionConditionItemCostsEnabled"

class cGcGenericSectionConditionHazardsEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHazardsEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHazardsEnabled::GetDescription"
    class cGcGenericSectionConditionHazardsEnabled(HookFactory):
        _name = "cGcGenericSectionConditionHazardsEnabled::cGcGenericSectionConditionHazardsEnabled"

class cGcGenericSectionConditionLifeSupportEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionLifeSupportEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionLifeSupportEnabled::GetDescription"
    class cGcGenericSectionConditionLifeSupportEnabled(HookFactory):
        _name = "cGcGenericSectionConditionLifeSupportEnabled::cGcGenericSectionConditionLifeSupportEnabled"

class cGcGenericSectionConditionTutorialEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionTutorialEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionTutorialEnabled::GetDescription"
    class cGcGenericSectionConditionTutorialEnabled(HookFactory):
        _name = "cGcGenericSectionConditionTutorialEnabled::cGcGenericSectionConditionTutorialEnabled"

class cGcGenericSectionConditionOnFootCombatEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionOnFootCombatEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionOnFootCombatEnabled::GetDescription"
    class cGcGenericSectionConditionOnFootCombatEnabled(HookFactory):
        _name = "cGcGenericSectionConditionOnFootCombatEnabled::cGcGenericSectionConditionOnFootCombatEnabled"

class cGcGenericSectionConditionSpaceCombatEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionSpaceCombatEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionSpaceCombatEnabled::GetDescription"
    class cGcGenericSectionConditionSpaceCombatEnabled(HookFactory):
        _name = "cGcGenericSectionConditionSpaceCombatEnabled::cGcGenericSectionConditionSpaceCombatEnabled"

class cGcGenericSectionConditionAutoPowerEnabled:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionAutoPowerEnabled::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionAutoPowerEnabled::GetDescription"
    class cGcGenericSectionConditionAutoPowerEnabled(HookFactory):
        _name = "cGcGenericSectionConditionAutoPowerEnabled::cGcGenericSectionConditionAutoPowerEnabled"

class cGcGenericSectionConditionCommunityResearchTier:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionCommunityResearchTier::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionCommunityResearchTier::GetDescription"

class cGcGenericSectionConditionHasProcMissionForFaction:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionHasProcMissionForFaction::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionHasProcMissionForFaction::GetDescription"
    class cGcGenericSectionConditionHasProcMissionForFaction(HookFactory):
        _name = "cGcGenericSectionConditionHasProcMissionForFaction::cGcGenericSectionConditionHasProcMissionForFaction"

class cGcGenericSectionConditionVisorActive:
    class IsConditionTrue(HookFactory):
        _name = "cGcGenericSectionConditionVisorActive::IsConditionTrue"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConditionVisorActive::GetDescription"
    class cGcGenericSectionConditionVisorActive(HookFactory):
        _name = "cGcGenericSectionConditionVisorActive::cGcGenericSectionConditionVisorActive"

class cGcNotificationSequenceStage:
    class SetText(HookFactory):
        _name = "cGcNotificationSequenceStage::SetText"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceStage::GetText"
    class GetCurrentScanEventTarget(HookFactory):
        _name = "cGcNotificationSequenceStage::GetCurrentScanEventTarget"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceStage::Activate"

class OnNodeActivated:
    class GetSaveSizeBytes(HookFactory):
        _name = "OnNodeActivated::GetSaveSizeBytes"
    class RenderNGui(HookFactory):
        _name = "OnNodeActivated::RenderNGui"
    class CheckTrigger(HookFactory):
        _name = "OnNodeActivated::CheckTrigger"

class cGcNotificationSequenceWaitRealTime:
    class WaitedRealTime(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTime::WaitedRealTime"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTime::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTime::GetText"

class cGcNotificationSequenceWaitRealTimeCombat:
    class WaitedRealTime(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTimeCombat::WaitedRealTime"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTimeCombat::Activate"
    class OverrideWithDangerColour(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTimeCombat::OverrideWithDangerColour"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitRealTimeCombat::GetText"

class cGcNotificationSequenceMessage:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceMessage::Run"
    class DisableIcon(HookFactory):
        _name = "cGcNotificationSequenceMessage::DisableIcon"
    class DisableTitlePrefix(HookFactory):
        _name = "cGcNotificationSequenceMessage::DisableTitlePrefix"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceMessage::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceMessage::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceMessage::RunInternal"

class cGcNotificationSequenceGatherFor:
    class AllowAutoEndPinnedMission(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::AllowAutoEndPinnedMission"
    class GetTitleForCodeGroup(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::GetTitleForCodeGroup"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::Activate"
    class GetRequirements(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::GetRequirements"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::DefaultCallback"
    class GetRemaining(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::GetRemaining"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::GetText"
    class GetSurveyHint(HookFactory):
        _name = "cGcNotificationSequenceGatherFor::GetSurveyHint"

class cGcNotificationSequenceRepairFinal:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceRepairFinal::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceRepairFinal::DefaultCallback"
    class cGcNotificationSequenceRepairFinal(HookFactory):
        _name = "cGcNotificationSequenceRepairFinal::cGcNotificationSequenceRepairFinal"

class cGcNotificationSequenceGetToExpedition:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceGetToExpedition::Run"
    class cGcNotificationSequenceGetToExpedition(HookFactory):
        _name = "cGcNotificationSequenceGetToExpedition::cGcNotificationSequenceGetToExpedition"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceGetToExpedition::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceGetToExpedition::RunInternal"

class cGcNotificationSequenceCompleteMission:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceCompleteMission::Run"
    class cGcNotificationSequenceCompleteMission(HookFactory):
        _name = "cGcNotificationSequenceCompleteMission::cGcNotificationSequenceCompleteMission"

class cGcNotificationSequenceGroup:
    class GetTargetMissionSurveyDefinitelyExists(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetTargetMissionSurveyDefinitelyExists"
    class GetObjective(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetObjective"
    class GetObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetObjectiveTip"
    class GetFormattableObjective(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetFormattableObjective"
    class ObjectivesCanBeFormatted(HookFactory):
        _name = "cGcNotificationSequenceGroup::ObjectivesCanBeFormatted"
    class GetTargetMissionSurveyId(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetTargetMissionSurveyId"
    class GetPinnedMissionBuildTarget(HookFactory):
        _name = "cGcNotificationSequenceGroup::GetPinnedMissionBuildTarget"

class cGcNotificationSequenceEditor:
    class RenderImGuiCallback(HookFactory):
        _name = "cGcNotificationSequenceEditor::RenderImGuiCallback"
    class RenderConditions(HookFactory):
        _name = "cGcNotificationSequenceEditor::RenderConditions"
    class RenderSequences(HookFactory):
        _name = "cGcNotificationSequenceEditor::RenderSequences"

class cGcGenericSectionConsequenceRemoveScanEvent:
    class DoConsequence(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveScanEvent::DoConsequence"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveScanEvent::GetDescription"

class cGcGenericSectionConsequenceRemoveCommunicatorMessage:
    class DoConsequence(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveCommunicatorMessage::DoConsequence"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveCommunicatorMessage::GetDescription"

class cGcGenericSectionConsequenceRemoveCommunicatorTakeOffMessage:
    class DoConsequence(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveCommunicatorTakeOffMessage::DoConsequence"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConsequenceRemoveCommunicatorTakeOffMessage::GetDescription"

class cGcGenericSectionConsequenceResetPulseEncounterOverride:
    class DoConsequence(HookFactory):
        _name = "cGcGenericSectionConsequenceResetPulseEncounterOverride::DoConsequence"
    class GetDescription(HookFactory):
        _name = "cGcGenericSectionConsequenceResetPulseEncounterOverride::GetDescription"

class cGcNotificationScheduler:
    class Prepare(HookFactory):
        _name = "cGcNotificationScheduler::Prepare"
    class GetTimeToDeadline(HookFactory):
        _name = "cGcNotificationScheduler::GetTimeToDeadline"
    class GetDeadline(HookFactory):
        _name = "cGcNotificationScheduler::GetDeadline"
    class GetCurrentCommunityMissionID(HookFactory):
        _name = "cGcNotificationScheduler::GetCurrentCommunityMissionID"
    class UpdateCachedAtlasCommunityData(HookFactory):
        _name = "cGcNotificationScheduler::UpdateCachedAtlasCommunityData"
    class HandleCommunityMissions(HookFactory):
        _name = "cGcNotificationScheduler::HandleCommunityMissions"
    class HandleRecurringMissions(HookFactory):
        _name = "cGcNotificationScheduler::HandleRecurringMissions"

class CalculateUpcomingRecurrenceDeadline(HookFactory):
    _name = "CalculateUpcomingRecurrenceDeadline"

class GetServerTime(HookFactory):
    _name = "GetServerTime"

class IsRecurrenceExpired(HookFactory):
    _name = "IsRecurrenceExpired"

class IsLeapYear(HookFactory):
    _name = "IsLeapYear"

class cGcNotificationSequenceDataRenderer:
    class SetSelectedSequence(HookFactory):
        _name = "cGcNotificationSequenceDataRenderer::SetSelectedSequence"
    class RenderDataBrowser(HookFactory):
        _name = "cGcNotificationSequenceDataRenderer::RenderDataBrowser"
    class RenderSelectMissionFromData(HookFactory):
        _name = "cGcNotificationSequenceDataRenderer::RenderSelectMissionFromData"
    class RenderMissionSequence(HookFactory):
        _name = "cGcNotificationSequenceDataRenderer::RenderMissionSequence"

class cGcNotificationSequenceFactory:
    class Create(HookFactory):
        _name = "cGcNotificationSequenceFactory::Create"

class cGcNotificationSequenceGatherForCrafting:
    class GatherTargetAlreadyAcheived(HookFactory):
        _name = "cGcNotificationSequenceGatherForCrafting::GatherTargetAlreadyAcheived"
    class DoesTargetDamagedTechStillNeedReq(HookFactory):
        _name = "cGcNotificationSequenceGatherForCrafting::DoesTargetDamagedTechStillNeedReq"
    class cGcNotificationSequenceGatherForCrafting(HookFactory):
        _name = "cGcNotificationSequenceGatherForCrafting::cGcNotificationSequenceGatherForCrafting"

class cGcNotificationSequenceWaitForLearnedProduct:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedProduct::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedProduct::DefaultCallback"
    class cGcNotificationSequenceWaitForLearnedProduct(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedProduct::cGcNotificationSequenceWaitForLearnedProduct"
    class GetTitleForCodeGroup(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedProduct::GetTitleForCodeGroup"

class cGcNotificationSequenceWaitForLearnedTech:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedTech::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForLearnedTech::DefaultCallback"

class cGcNotificationSequenceProductAmountNeeded:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceProductAmountNeeded::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceProductAmountNeeded::DefaultCallback"
    class cGcNotificationSequenceProductAmountNeeded(HookFactory):
        _name = "cGcNotificationSequenceProductAmountNeeded::cGcNotificationSequenceProductAmountNeeded"

class cGcNotificationSequenceUnitsNeeded:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceUnitsNeeded::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceUnitsNeeded::DefaultCallback"
    class cGcNotificationSequenceUnitsNeeded(HookFactory):
        _name = "cGcNotificationSequenceUnitsNeeded::cGcNotificationSequenceUnitsNeeded"

class cGcNotificationSequenceGetUnits:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceGetUnits::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceGetUnits::DefaultCallback"
    class cGcNotificationSequenceGetUnits(HookFactory):
        _name = "cGcNotificationSequenceGetUnits::cGcNotificationSequenceGetUnits"

class cGcNotificationSequenceBuildFinal:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceBuildFinal::Activate"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceBuildFinal::DefaultCallback"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceBuildFinal::GetText"
    class cGcNotificationSequenceBuildFinal(HookFactory):
        _name = "cGcNotificationSequenceBuildFinal::cGcNotificationSequenceBuildFinal"

class cGcNotificationSequenceCraftFinal:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCraftFinal::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCraftFinal::DefaultCallback"
    class GetBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceCraftFinal::GetBuildMenuHint"

class cGcNotificationSequenceCleanUpPinnedRecipe:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCleanUpPinnedRecipe::DefaultCallback"
    class cGcNotificationSequenceCleanUpPinnedRecipe(HookFactory):
        _name = "cGcNotificationSequenceCleanUpPinnedRecipe::cGcNotificationSequenceCleanUpPinnedRecipe"

class cGcNotificationSequenceRefuelFinal:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceRefuelFinal::DefaultCallback"
    class cGcNotificationSequenceRefuelFinal(HookFactory):
        _name = "cGcNotificationSequenceRefuelFinal::cGcNotificationSequenceRefuelFinal"

class cGcNotificationSequenceStartEvent:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceStartEvent::DefaultCallback"
    class DeepInterstellarSearch(HookFactory):
        _name = "cGcNotificationSequenceStartEvent::DeepInterstellarSearch"
    class cGcNotificationSequenceStartEvent(HookFactory):
        _name = "cGcNotificationSequenceStartEvent::cGcNotificationSequenceStartEvent"

class cGcNotificationSequenceEndEvent:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceEndEvent::DefaultCallback"
    class cGcNotificationSequenceEndEvent(HookFactory):
        _name = "cGcNotificationSequenceEndEvent::cGcNotificationSequenceEndEvent"

class cGcNotificationSequenceScan:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceScan::DefaultCallback"
    class cGcNotificationSequenceScan(HookFactory):
        _name = "cGcNotificationSequenceScan::cGcNotificationSequenceScan"

class cGcNotificationSequenceVehicleScan:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceVehicleScan::DefaultCallback"
    class BlocksVehicleScans(HookFactory):
        _name = "cGcNotificationSequenceVehicleScan::BlocksVehicleScans"

class cGcNotificationSequenceGetToScanEvent:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::GetText"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::RunInternal"
    class TimeRemaining(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::TimeRemaining"
    class NeedsGPSHint(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::NeedsGPSHint"
    class OverridesMissionSurveyText(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::OverridesMissionSurveyText"
    class cGcNotificationSequenceGetToScanEvent(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::cGcNotificationSequenceGetToScanEvent"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceGetToScanEvent::DefaultCallback"

class cGcNotificationSequenceWaitForScanEvent:
    class AllowMissionRestart(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::AllowMissionRestart"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::GetText"
    class NeedsGPSHint(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::NeedsGPSHint"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::RunInternal"
    class TimeRemaining(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::TimeRemaining"
    class GetCurrentScanEventTarget(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::GetCurrentScanEventTarget"
    class cGcNotificationSequenceWaitForScanEvent(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::cGcNotificationSequenceWaitForScanEvent"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForScanEvent::DefaultCallback"

class cGcNotificationSequenceWaitForFriendlyDroneScanEvent:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForFriendlyDroneScanEvent::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForFriendlyDroneScanEvent::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForFriendlyDroneScanEvent::RunInternal"
    class cGcNotificationSequenceWaitForFriendlyDroneScanEvent(HookFactory):
        _name = "cGcNotificationSequenceWaitForFriendlyDroneScanEvent::cGcNotificationSequenceWaitForFriendlyDroneScanEvent"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForFriendlyDroneScanEvent::DefaultCallback"

class cGcNotificationSequenceGetInShip:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceGetInShip::DefaultCallback"
    class cGcNotificationSequenceGetInShip(HookFactory):
        _name = "cGcNotificationSequenceGetInShip::cGcNotificationSequenceGetInShip"

class cGcNotificationSequenceGatherForBuild:
    class GatherTargetAlreadyAcheived(HookFactory):
        _name = "cGcNotificationSequenceGatherForBuild::GatherTargetAlreadyAcheived"
    class cGcNotificationSequenceGatherForBuild(HookFactory):
        _name = "cGcNotificationSequenceGatherForBuild::cGcNotificationSequenceGatherForBuild"

class cGcNotificationSequenceGatherForRefuel:
    class GatherTargetAlreadyAcheived(HookFactory):
        _name = "cGcNotificationSequenceGatherForRefuel::GatherTargetAlreadyAcheived"
    class cGcNotificationSequenceGatherForRefuel(HookFactory):
        _name = "cGcNotificationSequenceGatherForRefuel::cGcNotificationSequenceGatherForRefuel"

class cGcNotificationSequenceGatherForRepair:
    class GatherTargetAlreadyAcheived(HookFactory):
        _name = "cGcNotificationSequenceGatherForRepair::GatherTargetAlreadyAcheived"
    class cGcNotificationSequenceGatherForRepair(HookFactory):
        _name = "cGcNotificationSequenceGatherForRepair::cGcNotificationSequenceGatherForRepair"

class cGcNotificationSequenceGoToGalacticPoint:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceGoToGalacticPoint::Activate"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceGoToGalacticPoint::DefaultCallback"
    class cGcNotificationSequenceGoToGalacticPoint(HookFactory):
        _name = "cGcNotificationSequenceGoToGalacticPoint::cGcNotificationSequenceGoToGalacticPoint"

class cGcNotificationSequenceSignalGalacticPoint:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceSignalGalacticPoint::GetText"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceSignalGalacticPoint::Activate"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceSignalGalacticPoint::DefaultCallback"
    class cGcNotificationSequenceSignalGalacticPoint(HookFactory):
        _name = "cGcNotificationSequenceSignalGalacticPoint::cGcNotificationSequenceSignalGalacticPoint"

class cGcNotificationSequenceBaseBuildingBuildPart:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::DefaultCallback"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::Activate"
    class GetCurrentCount(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::GetCurrentCount"
    class GetBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::GetBuildMenuHint"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceBaseBuildingBuildPart::GetFormattedObjectiveTip"

class cGcNotificationSequenceWaitForMessage:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForMessage::DefaultCallback"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForMessage::GetText"
    class cGcNotificationSequenceWaitForMessage(HookFactory):
        _name = "cGcNotificationSequenceWaitForMessage::cGcNotificationSequenceWaitForMessage"

class cGcNotificationSequenceWaitForCompletionMessage:
    class IsComplete(HookFactory):
        _name = "cGcNotificationSequenceWaitForCompletionMessage::IsComplete"
    class cGcNotificationSequenceWaitForCompletionMessage(HookFactory):
        _name = "cGcNotificationSequenceWaitForCompletionMessage::cGcNotificationSequenceWaitForCompletionMessage"

class cGcNotificationSequenceReward:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceReward::DefaultCallback"

class cGcNotificationSequenceBroadcastMessage:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceBroadcastMessage::DefaultCallback"

class cGcNotificationSequenceMissionUpdateMessage:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceMissionUpdateMessage::RunInternal"
    class cGcNotificationSequenceMissionUpdateMessage(HookFactory):
        _name = "cGcNotificationSequenceMissionUpdateMessage::cGcNotificationSequenceMissionUpdateMessage"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceMissionUpdateMessage::Run"

class cGcNotificationSequencePodMessage:
    class GetText(HookFactory):
        _name = "cGcNotificationSequencePodMessage::GetText"
    class Run(HookFactory):
        _name = "cGcNotificationSequencePodMessage::Run"

class cGcNotificationSequenceShowSeasonTimeWarning:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceShowSeasonTimeWarning::GetText"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceShowSeasonTimeWarning::Run"

class cGcNotificationSequenceDetailMessage:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceDetailMessage::RunInternal"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceDetailMessage::Activate"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceDetailMessage::Run"

class cGcNotificationSequenceSetCurrentMission:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceSetCurrentMission::DefaultCallback"
    class cGcNotificationSequenceSetCurrentMission(HookFactory):
        _name = "cGcNotificationSequenceSetCurrentMission::cGcNotificationSequenceSetCurrentMission"

class cGcNotificationSequenceStartMission:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceStartMission::DefaultCallback"

class cGcNotificationSequenceClearInventoryHistory:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceClearInventoryHistory::DefaultCallback"
    class cGcNotificationSequenceClearInventoryHistory(HookFactory):
        _name = "cGcNotificationSequenceClearInventoryHistory::cGcNotificationSequenceClearInventoryHistory"

class cGcNotificationSequenceCloseMenu:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCloseMenu::DefaultCallback"
    class cGcNotificationSequenceCloseMenu(HookFactory):
        _name = "cGcNotificationSequenceCloseMenu::cGcNotificationSequenceCloseMenu"

class cGcNotificationSequenceRepairTech:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceRepairTech::RunInternal"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceRepairTech::GetText"
    class cGcNotificationSequenceRepairTech(HookFactory):
        _name = "cGcNotificationSequenceRepairTech::cGcNotificationSequenceRepairTech"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceRepairTech::DefaultCallback"

class cGcNotificationSequenceCreateSpecificPulseEncounter:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceCreateSpecificPulseEncounter::RunInternal"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCreateSpecificPulseEncounter::GetText"
    class cGcNotificationSequenceCreateSpecificPulseEncounter(HookFactory):
        _name = "cGcNotificationSequenceCreateSpecificPulseEncounter::cGcNotificationSequenceCreateSpecificPulseEncounter"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCreateSpecificPulseEncounter::DefaultCallback"

class cGcNotificationSequenceWaitForAbandFreighterDoorOpen:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForAbandFreighterDoorOpen::RunInternal"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForAbandFreighterDoorOpen::GetText"
    class cGcNotificationSequenceWaitForAbandFreighterDoorOpen(HookFactory):
        _name = "cGcNotificationSequenceWaitForAbandFreighterDoorOpen::cGcNotificationSequenceWaitForAbandFreighterDoorOpen"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForAbandFreighterDoorOpen::DefaultCallback"

class cGcNotificationSequenceConstruct:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceConstruct::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceConstruct::RunInternal"
    class GetBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceConstruct::GetBuildMenuHint"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceConstruct::GetText"
    class GetStatusMessageMarkup(HookFactory):
        _name = "cGcNotificationSequenceConstruct::GetStatusMessageMarkup"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceConstruct::DefaultCallback"

class cGcNotificationSequenceLeaveNexusMP:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceLeaveNexusMP::RunInternal"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceLeaveNexusMP::GetText"
    class cGcNotificationSequenceLeaveNexusMP(HookFactory):
        _name = "cGcNotificationSequenceLeaveNexusMP::cGcNotificationSequenceLeaveNexusMP"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceLeaveNexusMP::DefaultCallback"

class cGcNotificationSequenceVisitPlanets:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::RunInternal"
    class GetPlanetStatFromBiome(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::GetPlanetStatFromBiome"
    class cGcNotificationSequenceVisitPlanets(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::cGcNotificationSequenceVisitPlanets"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::DefaultCallback"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceVisitPlanets::GetFormattedObjectiveTip"

class cGcNotificationSequenceWaitForPhoto:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::GetText"
    class cGcNotificationSequenceWaitForPhoto(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::cGcNotificationSequenceWaitForPhoto"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::GetFormattedObjectiveTip"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForPhoto::Run"

class cGcNotificationSequenceCollectMoney:
    class CalculateRequiredAmount(HookFactory):
        _name = "cGcNotificationSequenceCollectMoney::CalculateRequiredAmount"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceCollectMoney::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCollectMoney::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceCollectMoney::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceCollectMoney::GetFormattedObjectiveTip"

class cGcNotificationSequenceDisplaySeasonRewardReminder:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceDisplaySeasonRewardReminder::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceDisplaySeasonRewardReminder::DefaultCallback"

class cGcNotificationSequenceWaitForSuitUpgrade:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForSuitUpgrade::Run"
    class cGcNotificationSequenceWaitForSuitUpgrade(HookFactory):
        _name = "cGcNotificationSequenceWaitForSuitUpgrade::cGcNotificationSequenceWaitForSuitUpgrade"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForSuitUpgrade::Activate"

class cGcNotificationSequenceModifyStat:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceModifyStat::RunInternal"
    class cGcNotificationSequenceModifyStat(HookFactory):
        _name = "cGcNotificationSequenceModifyStat::cGcNotificationSequenceModifyStat"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceModifyStat::DefaultCallback"

class cGcNotificationSequenceCompleteSeasonalMilestone:
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCompleteSeasonalMilestone::DefaultCallback"
    class cGcNotificationSequenceCompleteSeasonalMilestone(HookFactory):
        _name = "cGcNotificationSequenceCompleteSeasonalMilestone::cGcNotificationSequenceCompleteSeasonalMilestone"

class cGcNotificationSequenceWaitForSettlementActivity:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForSettlementActivity::GetText"
    class cGcNotificationSequenceWaitForSettlementActivity(HookFactory):
        _name = "cGcNotificationSequenceWaitForSettlementActivity::cGcNotificationSequenceWaitForSettlementActivity"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceWaitForSettlementActivity::DefaultCallback"

class cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement::RunInternal"
    class cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement(HookFactory):
        _name = "cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement::cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceEnsureBarrelsAtPlayerSettlement::DefaultCallback"

class cGcNotificationSequenceConstructSettlementBuildingWithScanEvent:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::RunInternal"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::GetText"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::GetFormattedObjectiveTip"
    class cGcNotificationSequenceConstructSettlementBuildingWithScanEvent(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::cGcNotificationSequenceConstructSettlementBuildingWithScanEvent"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::DefaultCallback"
    class FormatsObjectiveText(HookFactory):
        _name = "cGcNotificationSequenceConstructSettlementBuildingWithScanEvent::FormatsObjectiveText"

class cGcNotificationSequenceCompleteSettlementJudgement:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCompleteSettlementJudgement::GetText"
    class cGcNotificationSequenceCompleteSettlementJudgement(HookFactory):
        _name = "cGcNotificationSequenceCompleteSettlementJudgement::cGcNotificationSequenceCompleteSettlementJudgement"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCompleteSettlementJudgement::DefaultCallback"

class cGcNotificationSequenceExploreAbandonedFreighter:
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::RunInternal"
    class GetTitle(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::GetTitle"
    class cGcNotificationSequenceExploreAbandonedFreighter(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::cGcNotificationSequenceExploreAbandonedFreighter"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::Run"
    class OverridesIcon(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::OverridesIcon"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::GetText"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceExploreAbandonedFreighter::GetFormattedObjectiveTip"

class cGcNotificationSequenceExplorationLogSpecial:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::RunInternal"
    class UpdateSystemConstants(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::UpdateSystemConstants"
    class UpdatePlanetConstants(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::UpdatePlanetConstants"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GetFormattedObjectiveTip"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GetText"
    class GetRatingFormat(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GetRatingFormat"
    class GenerateStarClassText(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GenerateStarClassText"
    class GeneratePlanetFact(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GeneratePlanetFact"
    class GeneratePlanetAtmosFact(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GeneratePlanetAtmosFact"
    class GeneratePlanetTerrainFact(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GeneratePlanetTerrainFact"
    class GeneratePlanetCoreFact(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GeneratePlanetCoreFact"
    class GetTitle(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GetTitle"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::GetFormattedObjective"
    class FormatTitleDetails(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::FormatTitleDetails"
    class DiscoveryDataSubmitted(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::DiscoveryDataSubmitted"
    class cGcNotificationSequenceExplorationLogSpecial(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::cGcNotificationSequenceExplorationLogSpecial"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceExplorationLogSpecial::Run"

class cGcNotificationSequenceKillEncounter:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceKillEncounter::GetText"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceKillEncounter::DefaultCallback"

class cGcNotificationTextHelper:
    class AmountMoreString(HookFactory):
        _name = "cGcNotificationTextHelper::AmountMoreString"
    class GetMarkedUpItemString(HookFactory):
        _name = "cGcNotificationTextHelper::GetMarkedUpItemString"
        _overload: overloads.cGcNotificationTextHelper.GetMarkedUpItemString.overloads = "const TkID<128> *, cTkFixedString<256,char> *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNotificationTextHelper.GetMarkedUpItemString.overloads):
            cls._overload = overload_args
            return cls
    class GetMarkedUpItemStringWithIcon(HookFactory):
        _name = "cGcNotificationTextHelper::GetMarkedUpItemStringWithIcon"
        _overload: overloads.cGcNotificationTextHelper.GetMarkedUpItemStringWithIcon.overloads = "const TkID<128> *, cTkFixedString<256,char> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNotificationTextHelper.GetMarkedUpItemStringWithIcon.overloads):
            cls._overload = overload_args
            return cls
    class GetRequirementsString(HookFactory):
        _name = "cGcNotificationTextHelper::GetRequirementsString"
    class GetGPSString(HookFactory):
        _name = "cGcNotificationTextHelper::GetGPSString"
    class GetSettlementConstructionLevelLocID(HookFactory):
        _name = "cGcNotificationTextHelper::GetSettlementConstructionLevelLocID"

class cGcNotificationHelper:
    class GetBuildingPartCountFromType(HookFactory):
        _name = "cGcNotificationHelper::GetBuildingPartCountFromType"

class cGcNotificationSequenceWait:
    class Waited(HookFactory):
        _name = "cGcNotificationSequenceWait::Waited"
    class SuppressMessages(HookFactory):
        _name = "cGcNotificationSequenceWait::SuppressMessages"

class cGcNotificationSequenceStop:
    class cGcNotificationSequenceStop(HookFactory):
        _name = "cGcNotificationSequenceStop::cGcNotificationSequenceStop"

class cGcBuildingPartSearchType:
    class cGcBuildingPartSearchType(HookFactory):
        _name = "cGcBuildingPartSearchType::cGcBuildingPartSearchType"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingPartSearchType::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingPartSearchType::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBuildingPartSearchType::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBuildingPartSearchType::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingPartSearchType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingPartSearchType::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingPartSearchType::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingPartSearchType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingPartSearchType::WriteToXMLNodeExplicit"

class cGcNotificationSequenceAudioEvent:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceAudioEvent::Run"

class cGcNotificationSequenceSetGlobalMission:
    class cGcNotificationSequenceSetGlobalMission(HookFactory):
        _name = "cGcNotificationSequenceSetGlobalMission::cGcNotificationSequenceSetGlobalMission"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceSetGlobalMission::Run"

class cGcNotificationSequenceSendChatMessage:
    class cGcNotificationSequenceSendChatMessage(HookFactory):
        _name = "cGcNotificationSequenceSendChatMessage::cGcNotificationSequenceSendChatMessage"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceSendChatMessage::DefaultCallback"
    class GetStatusMessageMarkup(HookFactory):
        _name = "cGcNotificationSequenceSendChatMessage::GetStatusMessageMarkup"

class cGcGenericSectionConditionMissionMessageWarp:
    class cGcGenericSectionConditionMissionMessageWarp(HookFactory):
        _name = "cGcGenericSectionConditionMissionMessageWarp::cGcGenericSectionConditionMissionMessageWarp"

class cGcGenericSectionConditionMissionMessagePortal:
    class cGcGenericSectionConditionMissionMessagePortal(HookFactory):
        _name = "cGcGenericSectionConditionMissionMessagePortal::cGcGenericSectionConditionMissionMessagePortal"

class cGcNotificationSequenceCommon:
    class GetGlobalMissionState(HookFactory):
        _name = "cGcNotificationSequenceCommon::GetGlobalMissionState"
    class SetGlobalMissionState(HookFactory):
        _name = "cGcNotificationSequenceCommon::SetGlobalMissionState"

class cGcNotificationSequenceGeneric:
    class GetParticipantTypeFromPointer(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetParticipantTypeFromPointer"
    class GetParticipantPointerFromType(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetParticipantPointerFromType"
    class GetNumberOfParticipants(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetNumberOfParticipants"
    class Restart(HookFactory):
        _name = "cGcNotificationSequenceGeneric::Restart"
    class DebugNguiMissionInfo(HookFactory):
        _name = "cGcNotificationSequenceGeneric::DebugNguiMissionInfo"
    class IsPrimary(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsPrimary"
    class GetClass(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetClass"
    class IsLegacy(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsLegacy"
    class IsCritical(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsCritical"
    class IsProcedural(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsProcedural"
    class DataAllowsRenounce(HookFactory):
        _name = "cGcNotificationSequenceGeneric::DataAllowsRenounce"
    class UseCommunityMissionForLog(HookFactory):
        _name = "cGcNotificationSequenceGeneric::UseCommunityMissionForLog"
    class HasBeenHandedIn(HookFactory):
        _name = "cGcNotificationSequenceGeneric::HasBeenHandedIn"
    class IsForcingPageHint(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsForcingPageHint"
    class IsForcingBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsForcingBuildMenuHint"
    class IsTelemetryUpload(HookFactory):
        _name = "cGcNotificationSequenceGeneric::IsTelemetryUpload"
    class GetCurrentCategory(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentCategory"
    class BlocksPinning(HookFactory):
        _name = "cGcNotificationSequenceGeneric::BlocksPinning"
    class CheckOptionCondition(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CheckOptionCondition"
    class GetMissionTitle(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionTitle"
    class GetMissionSubtitle(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionSubtitle"
    class GetMissionDescription(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionDescription"
    class RefreshLogInfo(HookFactory):
        _name = "cGcNotificationSequenceGeneric::RefreshLogInfo"
    class GetMissionObjective(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionObjective"
    class GetPirateMissionTarget(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetPirateMissionTarget"
    class HasEnoughFactionRank(HookFactory):
        _name = "cGcNotificationSequenceGeneric::HasEnoughFactionRank"
    class cGcNotificationSequenceGeneric(HookFactory):
        _name = "cGcNotificationSequenceGeneric::cGcNotificationSequenceGeneric"
    class CreateAndAddAutoStartMessage(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CreateAndAddAutoStartMessage"
    class Load(HookFactory):
        _name = "cGcNotificationSequenceGeneric::Load"
    class UpgradeProgress(HookFactory):
        _name = "cGcNotificationSequenceGeneric::UpgradeProgress"
    class Save(HookFactory):
        _name = "cGcNotificationSequenceGeneric::Save"
    class Update(HookFactory):
        _name = "cGcNotificationSequenceGeneric::Update"
    class CanBegin(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CanBegin"
    class GetTitle(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetTitle"
    class GetSubtitle(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetSubtitle"
    class GetDescription(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetDescription"
    class GetMissionIcon(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionIcon"
    class GetMissionIconSelected(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionIconSelected"
    class GetMissionIconNotSelected(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionIconNotSelected"
    class GetMissionDataTitle(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMissionDataTitle"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetText"
    class GetCurrentIcon(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentIcon"
    class GetCurrentColour(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentColour"
    class GetIconAtStage(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetIconAtStage"
    class GetCurrentFrontendPageHint(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentFrontendPageHint"
    class GetCurrentInventoryHint(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentInventoryHint"
    class GetCurrentFrontendPageLocID(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentFrontendPageLocID"
    class GetCurrentBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetCurrentBuildMenuHint"
    class Cancel(HookFactory):
        _name = "cGcNotificationSequenceGeneric::Cancel"
    class GetMultiplayerMissionType(HookFactory):
        _name = "cGcNotificationSequenceGeneric::GetMultiplayerMissionType"
    class CountTotalMissionSequences(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CountTotalMissionSequences"
    class CreateAndAddMissionSequences(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CreateAndAddMissionSequences"
    class CreateAndAddConditions(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CreateAndAddConditions"
    class WriteItemText(HookFactory):
        _name = "cGcNotificationSequenceGeneric::WriteItemText"
    class CreateAndAddConsequences(HookFactory):
        _name = "cGcNotificationSequenceGeneric::CreateAndAddConsequences"

class cGcNotificationSequenceCollectMultiProducts:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::GetFormattedObjectiveTip"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::DefaultCallback"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::RunInternal"
    class GetLocalAmount(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::GetLocalAmount"
    class GetCurrent(HookFactory):
        _name = "cGcNotificationSequenceCollectMultiProducts::GetCurrent"

class cGcNotificationSequenceBounty:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceBounty::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceBounty::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceBounty::RunInternal"

class cGcNotificationSequencePirates:
    class cGcNotificationSequencePirates(HookFactory):
        _name = "cGcNotificationSequencePirates::cGcNotificationSequencePirates"
    class Run(HookFactory):
        _name = "cGcNotificationSequencePirates::Run"

class cGcNotificationSequenceWaitForStat:
    class cGcNotificationSequenceWaitForStat(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::cGcNotificationSequenceWaitForStat"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::Activate"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetText"
    class GetStatusMessageMarkup(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetStatusMessageMarkup"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetFormattedObjectiveTip"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::RunInternal"
    class GetStatValue(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetStatValue"
    class GetOtherPlayersCounts(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::GetOtherPlayersCounts"
    class SetChangeValue(HookFactory):
        _name = "cGcNotificationSequenceWaitForStat::SetChangeValue"

class cGcNotificationSequenceWaitForStatSeasonal:
    class cGcNotificationSequenceWaitForStatSeasonal(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::cGcNotificationSequenceWaitForStatSeasonal"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::GetFormattedObjectiveTip"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatSeasonal::RunInternal"

class cGcNotificationSequenceWaitForStatMilestone:
    class cGcNotificationSequenceWaitForStatMilestone(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::cGcNotificationSequenceWaitForStatMilestone"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::GetFormattedObjectiveTip"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::RunInternal"
    class GetRequiredLevel(HookFactory):
        _name = "cGcNotificationSequenceWaitForStatMilestone::GetRequiredLevel"

class cGcNotificationSequenceWaitForWarps:
    class cGcNotificationSequenceWaitForWarps(HookFactory):
        _name = "cGcNotificationSequenceWaitForWarps::cGcNotificationSequenceWaitForWarps"

class cGcNotificationSequenceWaitForDepots:
    class cGcNotificationSequenceWaitForDepots(HookFactory):
        _name = "cGcNotificationSequenceWaitForDepots::cGcNotificationSequenceWaitForDepots"

class cGcNotificationSequenceDoMissionsForFaction:
    class cGcNotificationSequenceDoMissionsForFaction(HookFactory):
        _name = "cGcNotificationSequenceDoMissionsForFaction::cGcNotificationSequenceDoMissionsForFaction"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceDoMissionsForFaction::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceDoMissionsForFaction::GetText"

class cGcNotificationSequenceWaitForFactionStanding:
    class cGcNotificationSequenceWaitForFactionStanding(HookFactory):
        _name = "cGcNotificationSequenceWaitForFactionStanding::cGcNotificationSequenceWaitForFactionStanding"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForFactionStanding::Activate"

class cGcNotificationSequenceWaitForShips:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForShips::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForShips::GetText"
    class GetCount(HookFactory):
        _name = "cGcNotificationSequenceWaitForShips::GetCount"

class AkQueuedMsg:
    class Sizeof_AddOutputCaptureMarker(HookFactory):
        _name = "AkQueuedMsg::Sizeof_AddOutputCaptureMarker"
    class Sizeof_SetRandomSeed(HookFactory):
        _name = "AkQueuedMsg::Sizeof_SetRandomSeed"
    class Sizeof_OpenDynamicSequence(HookFactory):
        _name = "AkQueuedMsg::Sizeof_OpenDynamicSequence"
    class Sizeof_Switch(HookFactory):
        _name = "AkQueuedMsg::Sizeof_Switch"
    class Sizeof_PlaySourcePlugin(HookFactory):
        _name = "AkQueuedMsg::Sizeof_PlaySourcePlugin"
    class Sizeof_GameObjObstruction(HookFactory):
        _name = "AkQueuedMsg::Sizeof_GameObjObstruction"
    class Sizeof_Seek(HookFactory):
        _name = "AkQueuedMsg::Sizeof_Seek"

class cGcNotificationSequenceDiscoverOnPlanet:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceDiscoverOnPlanet::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceDiscoverOnPlanet::GetText"
    class DiscoveryDataSubmitted(HookFactory):
        _name = "cGcNotificationSequenceDiscoverOnPlanet::DiscoveryDataSubmitted"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceDiscoverOnPlanet::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceDiscoverOnPlanet::RunInternal"

class cGcNotificationSequenceLearnWords:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceLearnWords::Run"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceLearnWords::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceLearnWords::GetText"
    class GetGlobalAmount(HookFactory):
        _name = "cGcNotificationSequenceLearnWords::GetGlobalAmount"

class cGcNotificationSequenceWaitForPortalWarp:
    class cGcNotificationSequenceWaitForPortalWarp(HookFactory):
        _name = "cGcNotificationSequenceWaitForPortalWarp::cGcNotificationSequenceWaitForPortalWarp"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForPortalWarp::Run"

class cGcNotificationSequenceTeleport:
    class cGcNotificationSequenceTeleport(HookFactory):
        _name = "cGcNotificationSequenceTeleport::cGcNotificationSequenceTeleport"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceTeleport::Run"

class cGcNotificationSequenceFreighterEngage:
    class cGcNotificationSequenceFreighterEngage(HookFactory):
        _name = "cGcNotificationSequenceFreighterEngage::cGcNotificationSequenceFreighterEngage"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceFreighterEngage::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceFreighterEngage::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceFreighterEngage::RunInternal"

class cGcNotificationSequenceFreighterDefend:
    class cGcNotificationSequenceFreighterDefend(HookFactory):
        _name = "cGcNotificationSequenceFreighterDefend::cGcNotificationSequenceFreighterDefend"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceFreighterDefend::Run"

class cGcNotificationSequenceWaitForFreighterPods:
    class cGcNotificationSequenceWaitForFreighterPods(HookFactory):
        _name = "cGcNotificationSequenceWaitForFreighterPods::cGcNotificationSequenceWaitForFreighterPods"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForFreighterPods::Activate"

class cGcNotificationSequenceStartSummonAnomaly:
    class cGcNotificationSequenceStartSummonAnomaly(HookFactory):
        _name = "cGcNotificationSequenceStartSummonAnomaly::cGcNotificationSequenceStartSummonAnomaly"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceStartSummonAnomaly::DefaultCallback"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceStartSummonAnomaly::Activate"
    class GetValidSpawn(HookFactory):
        _name = "cGcNotificationSequenceStartSummonAnomaly::GetValidSpawn"

class cGcNotificationSequenceFinishSummonAnomaly:
    class cGcNotificationSequenceFinishSummonAnomaly(HookFactory):
        _name = "cGcNotificationSequenceFinishSummonAnomaly::cGcNotificationSequenceFinishSummonAnomaly"
    class DefaultCallback(HookFactory):
        _name = "cGcNotificationSequenceFinishSummonAnomaly::DefaultCallback"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceFinishSummonAnomaly::Activate"

class cGcNotificationSequeneSummonNexus:
    class cGcNotificationSequeneSummonNexus(HookFactory):
        _name = "cGcNotificationSequeneSummonNexus::cGcNotificationSequeneSummonNexus"
    class Run(HookFactory):
        _name = "cGcNotificationSequeneSummonNexus::Run"

class cGcNotificationSequenceSuppressMarkers:
    class cGcNotificationSequenceSuppressMarkers(HookFactory):
        _name = "cGcNotificationSequenceSuppressMarkers::cGcNotificationSequenceSuppressMarkers"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceSuppressMarkers::Run"

class cGcNotificationSequenceGroupCode:
    class cGcNotificationSequenceGroupCode(HookFactory):
        _name = "cGcNotificationSequenceGroupCode::cGcNotificationSequenceGroupCode"
        _overload: overloads.cGcNotificationSequenceGroupCode.cGcNotificationSequenceGroupCode.overloads = "cGcNotificationSequenceGroupCode *, const char *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNotificationSequenceGroupCode.cGcNotificationSequenceGroupCode.overloads):
            cls._overload = overload_args
            return cls
    class GetTargetMissionSurveyId(HookFactory):
        _name = "cGcNotificationSequenceGroupCode::GetTargetMissionSurveyId"
    class GetPinnedMissionBuildTarget(HookFactory):
        _name = "cGcNotificationSequenceGroupCode::GetPinnedMissionBuildTarget"
    class GetObjective(HookFactory):
        _name = "cGcNotificationSequenceGroupCode::GetObjective"
    class GetObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceGroupCode::GetObjectiveTip"

class cGcNotificationSequenceCode:
    class Update(HookFactory):
        _name = "cGcNotificationSequenceCode::Update"
    class GetMissionIconSelected(HookFactory):
        _name = "cGcNotificationSequenceCode::GetMissionIconSelected"
    class IsForcingBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceCode::IsForcingBuildMenuHint"
    class GetCurrentBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceCode::GetCurrentBuildMenuHint"
    class GenerateDetailMessage(HookFactory):
        _name = "cGcNotificationSequenceCode::GenerateDetailMessage"

class cGcNotificationSequenceUpgradeTech:
    class GetSubtitle(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::GetSubtitle"
    class IsAppropriate(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::IsAppropriate"
    class GetTitle(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::GetTitle"
    class GetMissionDataTitle(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::GetMissionDataTitle"
    class GetDescription(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::GetDescription"
    class GetMissionIcon(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::GetMissionIcon"
    class cGcNotificationSequenceUpgradeTech(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::cGcNotificationSequenceUpgradeTech"
    class Update(HookFactory):
        _name = "cGcNotificationSequenceUpgradeTech::Update"

class cGcNotificationSequenceCraftDevice:
    class GetMissionDataTitle(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::GetMissionDataTitle"
    class GetSubtitle(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::GetSubtitle"
    class GetTitle(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::GetTitle"
    class GetDescription(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::GetDescription"
    class GetMissionIcon(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::GetMissionIcon"
    class cGcNotificationSequenceCraftDevice(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::cGcNotificationSequenceCraftDevice"
    class Update(HookFactory):
        _name = "cGcNotificationSequenceCraftDevice::Update"

class cGcNotificationSequenceCollect:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceCollect::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCollect::GetText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceCollect::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceCollect::GetFormattedObjectiveTip"
    class cGcNotificationSequenceCollect(HookFactory):
        _name = "cGcNotificationSequenceCollect::cGcNotificationSequenceCollect"
        _overload: overloads.cGcNotificationSequenceCollect.cGcNotificationSequenceCollect.overloads = "cGcNotificationSequenceCollect *, cGcMissionSequenceCollectSubstance *, const TkID<128> *, const cTkSeed *, const int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNotificationSequenceCollect.cGcNotificationSequenceCollect.overloads):
            cls._overload = overload_args
            return cls
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceCollect::Activate"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceCollect::RunInternal"
    class GetLocalAmount(HookFactory):
        _name = "cGcNotificationSequenceCollect::GetLocalAmount"
    class GetCurrent(HookFactory):
        _name = "cGcNotificationSequenceCollect::GetCurrent"
    class CalculateDependantRequirements(HookFactory):
        _name = "cGcNotificationSequenceCollect::CalculateDependantRequirements"
    class OverridesMissionSurveyText(HookFactory):
        _name = "cGcNotificationSequenceCollect::OverridesMissionSurveyText"

class cGcNotificationSequenceCommunicator:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceCommunicator::Run"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceCommunicator::Activate"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceCommunicator::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceCommunicator::RunInternal"

class cGcNotificationSequenceCommunicatorOnTakeOff:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceCommunicatorOnTakeOff::Run"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceCommunicatorOnTakeOff::RunInternal"

class cGcNotificationSequenceWaitForConditions:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::Run"
    class FormatsObjectiveText(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::FormatsObjectiveText"
    class GetFormattedObjective(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::GetFormattedObjective"
    class GetFormattedObjectiveTip(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::GetFormattedObjectiveTip"
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::Activate"
    class AllowMissionRestart(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::AllowMissionRestart"
    class CheckConditions(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::CheckConditions"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::GetText"
    class BlockPirateMessage(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::BlockPirateMessage"
    class OverridesMissionSurveyText(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::OverridesMissionSurveyText"
    class GetBuildMenuHint(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::GetBuildMenuHint"
    class GetStatusMessageMarkup(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::GetStatusMessageMarkup"
    class EncouragesFightingSentinels(HookFactory):
        _name = "cGcNotificationSequenceWaitForConditions::EncouragesFightingSentinels"

class cGcNotificationSequenceConditionalReward:
    class Run(HookFactory):
        _name = "cGcNotificationSequenceConditionalReward::Run"
    class CheckConditions(HookFactory):
        _name = "cGcNotificationSequenceConditionalReward::CheckConditions"

class cGcNotificationSequenceDiscover:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceDiscover::GetText"
    class RunInternal(HookFactory):
        _name = "cGcNotificationSequenceDiscover::RunInternal"
    class GetStatValue(HookFactory):
        _name = "cGcNotificationSequenceDiscover::GetStatValue"
    class GetOtherPlayersCounts(HookFactory):
        _name = "cGcNotificationSequenceDiscover::GetOtherPlayersCounts"

class cGcNotificationSequenceFeed:
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceFeed::GetText"
    class GetStatValue(HookFactory):
        _name = "cGcNotificationSequenceFeed::GetStatValue"
    class GetOtherPlayersCounts(HookFactory):
        _name = "cGcNotificationSequenceFeed::GetOtherPlayersCounts"

class cGcNotificationSequenceKill:
    class GetStatusMessageMarkup(HookFactory):
        _name = "cGcNotificationSequenceKill::GetStatusMessageMarkup"
    class EncouragesFightingSentinels(HookFactory):
        _name = "cGcNotificationSequenceKill::EncouragesFightingSentinels"
    class GetStatValue(HookFactory):
        _name = "cGcNotificationSequenceKill::GetStatValue"
    class GetOtherPlayersCounts(HookFactory):
        _name = "cGcNotificationSequenceKill::GetOtherPlayersCounts"

class CAkMusicSwitchCntr:
    class NodeCategory(HookFactory):
        _name = "CAkMusicSwitchCntr::NodeCategory"
    class CanAddChild(HookFactory):
        _name = "CAkMusicSwitchCntr::CanAddChild"
    class Create(HookFactory):
        _name = "CAkMusicSwitchCntr::Create"
    class CreateContext(HookFactory):
        _name = "CAkMusicSwitchCntr::CreateContext"
    class ExecuteAction(HookFactory):
        _name = "CAkMusicSwitchCntr::ExecuteAction"
    class GatherSounds(HookFactory):
        _name = "CAkMusicSwitchCntr::GatherSounds"
    class ModifyActiveState(HookFactory):
        _name = "CAkMusicSwitchCntr::ModifyActiveState"
    class PlayInternal(HookFactory):
        _name = "CAkMusicSwitchCntr::PlayInternal"
    class PrepareData(HookFactory):
        _name = "CAkMusicSwitchCntr::PrepareData"
    class SetAkProp(HookFactory):
        _name = "CAkMusicSwitchCntr::SetAkProp"
        _overload: overloads.CAkMusicSwitchCntr.SetAkProp.overloads = "CAkMusicSwitchCntr *, AkPropID, int, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicSwitchCntr.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetInitialValues(HookFactory):
        _name = "CAkMusicSwitchCntr::SetInitialValues"
    class UnPrepareData(HookFactory):
        _name = "CAkMusicSwitchCntr::UnPrepareData"

class cGcNotificationSequenceMultiplayerMissionPlayerRoundUp:
    class Activate(HookFactory):
        _name = "cGcNotificationSequenceMultiplayerMissionPlayerRoundUp::Activate"
    class Run(HookFactory):
        _name = "cGcNotificationSequenceMultiplayerMissionPlayerRoundUp::Run"
    class GetText(HookFactory):
        _name = "cGcNotificationSequenceMultiplayerMissionPlayerRoundUp::GetText"

class cGcClothComponent:
    class RequestTeleport(HookFactory):
        _name = "cGcClothComponent::RequestTeleport"
    class GetTypedComponent(HookFactory):
        _name = "cGcClothComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcClothComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcClothComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcClothComponent::InitData"
    class cGcClothComponent(HookFactory):
        _name = "cGcClothComponent::cGcClothComponent"
    class Release(HookFactory):
        _name = "cGcClothComponent::Release"
    class UpdateRender(HookFactory):
        _name = "cGcClothComponent::UpdateRender"
    class Prepare(HookFactory):
        _name = "cGcClothComponent::Prepare"
    class DebugDrawPos(HookFactory):
        _name = "cGcClothComponent::DebugDrawPos"
    class ShiftWorld(HookFactory):
        _name = "cGcClothComponent::ShiftWorld"
    class HeavySimulate(HookFactory):
        _name = "cGcClothComponent::HeavySimulate"
    class KickHeavySimulate(HookFactory):
        _name = "cGcClothComponent::KickHeavySimulate"
    class OnPostAnim(HookFactory):
        _name = "cGcClothComponent::OnPostAnim"
    class Update(HookFactory):
        _name = "cGcClothComponent::Update"

class cGcSpringAttachmentComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcSpringAttachmentComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSpringAttachmentComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSpringAttachmentComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcSpringAttachmentComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcSpringAttachmentComponent::Release"
    class ShiftWorld(HookFactory):
        _name = "cGcSpringAttachmentComponent::ShiftWorld"
    class OnPostAnim(HookFactory):
        _name = "cGcSpringAttachmentComponent::OnPostAnim"
    class Update(HookFactory):
        _name = "cGcSpringAttachmentComponent::Update"

class cGcNotificationSequenceWaitForMissionSelected:
    class Wait(HookFactory):
        _name = "cGcNotificationSequenceWaitForMissionSelected::Wait"

class cGcInWorldButton:
    class Update(HookFactory):
        _name = "cGcInWorldButton::Update"
    class RenderCursor(HookFactory):
        _name = "cGcInWorldButton::RenderCursor"

class GcNGuiFx:
    class LoadingDistractionFullscreenNoPhase(HookFactory):
        _name = "GcNGuiFx::LoadingDistractionFullscreenNoPhase"

class cGcNGuiTextSpecial:
    class SetNeedsUpdate(HookFactory):
        _name = "cGcNGuiTextSpecial::SetNeedsUpdate"
    class SetText(HookFactory):
        _name = "cGcNGuiTextSpecial::SetText"
    class Convert(HookFactory):
        _name = "cGcNGuiTextSpecial::Convert"
    class EditElement(HookFactory):
        _name = "cGcNGuiTextSpecial::EditElement"
    class Render(HookFactory):
        _name = "cGcNGuiTextSpecial::Render"
    class GetSceneTreeIcon(HookFactory):
        _name = "cGcNGuiTextSpecial::GetSceneTreeIcon"
    class cGcNGuiTextSpecial(HookFactory):
        _name = "cGcNGuiTextSpecial::cGcNGuiTextSpecial"

class CommonFontHeightRescalingToFit(HookFactory):
    _name = "CommonFontHeightRescalingToFit"

class cGcNGuiGraphic:
    class Render(HookFactory):
        _name = "cGcNGuiGraphic::Render"
    class EditElement(HookFactory):
        _name = "cGcNGuiGraphic::EditElement"
    class GetSceneTreeText(HookFactory):
        _name = "cGcNGuiGraphic::GetSceneTreeText"
    class SetData(HookFactory):
        _name = "cGcNGuiGraphic::SetData"
    class SelectableInEditor(HookFactory):
        _name = "cGcNGuiGraphic::SelectableInEditor"
    class AttachMetadata(HookFactory):
        _name = "cGcNGuiGraphic::AttachMetadata"
    class GetSceneTreeIcon(HookFactory):
        _name = "cGcNGuiGraphic::GetSceneTreeIcon"
    class cGcNGuiGraphic(HookFactory):
        _name = "cGcNGuiGraphic::cGcNGuiGraphic"

class cGcNGuiSpacing:
    class GetSceneTreeText(HookFactory):
        _name = "cGcNGuiSpacing::GetSceneTreeText"
    class SetData(HookFactory):
        _name = "cGcNGuiSpacing::SetData"
    class Render(HookFactory):
        _name = "cGcNGuiSpacing::Render"
    class EditElement(HookFactory):
        _name = "cGcNGuiSpacing::EditElement"
    class AttachMetadata(HookFactory):
        _name = "cGcNGuiSpacing::AttachMetadata"
    class DetachMetadata(HookFactory):
        _name = "cGcNGuiSpacing::DetachMetadata"
    class GetSceneTreeIcon(HookFactory):
        _name = "cGcNGuiSpacing::GetSceneTreeIcon"
    class cGcNGuiSpacing(HookFactory):
        _name = "cGcNGuiSpacing::cGcNGuiSpacing"

class cGcUndoableNGuiElementOperation:
    class CreateDescription(HookFactory):
        _name = "cGcUndoableNGuiElementOperation::CreateDescription"
    class cGcUndoableNGuiElementOperation(HookFactory):
        _name = "cGcUndoableNGuiElementOperation::cGcUndoableNGuiElementOperation"
        _overload: overloads.cGcUndoableNGuiElementOperation.cGcUndoableNGuiElementOperation.overloads = "cGcUndoableNGuiElementOperation *, cGcNGuiLayer *, cGcNGuiElement *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcUndoableNGuiElementOperation.cGcUndoableNGuiElementOperation.overloads):
            cls._overload = overload_args
            return cls
    class Undo(HookFactory):
        _name = "cGcUndoableNGuiElementOperation::Undo"
    class Do(HookFactory):
        _name = "cGcUndoableNGuiElementOperation::Do"

class cTkNGuiTypeUndoable:
    class Do(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiTypeUndoable<{T0}>::Do"
    class Undo(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiTypeUndoable<{T0}>::Undo"
    class GetData(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiTypeUndoable<{T0}>::GetData"
    class Compare(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiTypeUndoable<{T0}>::Compare"
    class End(HookFactory):
        _templates = ("T0", )
        _name = "cTkNGuiTypeUndoable<{T0}>::End"

class cGcNGuiGraphicData:
    class cGcNGuiGraphicData(HookFactory):
        _name = "cGcNGuiGraphicData::cGcNGuiGraphicData"
    class Cast(HookFactory):
        _name = "cGcNGuiGraphicData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiGraphicData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiGraphicData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiGraphicData::SetDefaults"
    class WriteToClassPtr(HookFactory):
        _name = "cGcNGuiGraphicData::WriteToClassPtr"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiGraphicData::WriteToXMLNode"

class cGcNGuiTextData:
    class cGcNGuiTextData(HookFactory):
        _name = "cGcNGuiTextData::cGcNGuiTextData"
    class Cast(HookFactory):
        _name = "cGcNGuiTextData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiTextData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiTextData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiTextData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiTextData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiTextData::SetDefaults"
    class WriteToClassPtr(HookFactory):
        _name = "cGcNGuiTextData::WriteToClassPtr"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiTextData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiTextData::WriteToXMLNodeExplicit"

class cTkNGuiTextStyle:
    class cTkNGuiTextStyle(HookFactory):
        _name = "cTkNGuiTextStyle::cTkNGuiTextStyle"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiTextStyle::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiTextStyle::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiTextStyle::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiTextStyle::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiTextStyle::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiTextStyle::WriteToXMLNodeExplicit"

class cGcNGuiLayoutData:
    class cGcNGuiLayoutData(HookFactory):
        _name = "cGcNGuiLayoutData::cGcNGuiLayoutData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiLayoutData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiLayoutData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNGuiLayoutData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNGuiLayoutData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiLayoutData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiLayoutData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiLayoutData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiLayoutData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiLayoutData::WriteToXMLNodeExplicit"

class cTkNGuiGraphicStyle:
    class cTkNGuiGraphicStyle(HookFactory):
        _name = "cTkNGuiGraphicStyle::cTkNGuiGraphicStyle"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiGraphicStyle::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNGuiGraphicStyle::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkNGuiGraphicStyle::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiGraphicStyle::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiGraphicStyle::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiGraphicStyle::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiGraphicStyle::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiGraphicStyle::WriteToXMLNodeExplicit"

class cGcNGuiLayerData:
    class cGcNGuiLayerData(HookFactory):
        _name = "cGcNGuiLayerData::cGcNGuiLayerData"
    class Cast(HookFactory):
        _name = "cGcNGuiLayerData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiLayerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiLayerData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNGuiLayerData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiLayerData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiLayerData::SetDefaults"
    class WriteToClassPtr(HookFactory):
        _name = "cGcNGuiLayerData::WriteToClassPtr"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiLayerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiLayerData::WriteToXMLNodeExplicit"

class cGcGuiTypeUndoableLayerData:
    class Compare(HookFactory):
        _name = "cGcGuiTypeUndoableLayerData::Compare"

class cTkNGuiUndoable:
    class Icon(HookFactory):
        _name = "cTkNGuiUndoable::Icon"

class cEgModelNode:
    class GetLodMeshType(HookFactory):
        _name = "cEgModelNode::GetLodMeshType"
    class SetAnimJointsLOD(HookFactory):
        _name = "cEgModelNode::SetAnimJointsLOD"
    class AddSkinMatsToBuffer(HookFactory):
        _name = "cEgModelNode::AddSkinMatsToBuffer"
    class cEgModelNode(HookFactory):
        _name = "cEgModelNode::cEgModelNode"
    class ParsingFunc(HookFactory):
        _name = "cEgModelNode::ParsingFunc"
    class ParseRefAttrib(HookFactory):
        _name = "cEgModelNode::ParseRefAttrib"
    class FactoryFunc(HookFactory):
        _name = "cEgModelNode::FactoryFunc"
    class RecreateNodeListRec(HookFactory):
        _name = "cEgModelNode::RecreateNodeListRec"
    class CacheSkeleton(HookFactory):
        _name = "cEgModelNode::CacheSkeleton"
    class RecreateNodeList(HookFactory):
        _name = "cEgModelNode::RecreateNodeList"
    class GetLocatorForAnim(HookFactory):
        _name = "cEgModelNode::GetLocatorForAnim"
    class UpdateLocalMeshAABBs(HookFactory):
        _name = "cEgModelNode::UpdateLocalMeshAABBs"
    class RecalculateLocalMeshAABB(HookFactory):
        _name = "cEgModelNode::RecalculateLocalMeshAABB"
    class GetParameterInt(HookFactory):
        _name = "cEgModelNode::GetParameterInt"
    class SetParameterInt(HookFactory):
        _name = "cEgModelNode::SetParameterInt"
    class GetParameterFloat(HookFactory):
        _name = "cEgModelNode::GetParameterFloat"
    class SetParameterFloat(HookFactory):
        _name = "cEgModelNode::SetParameterFloat"
    class GetParameterVec3(HookFactory):
        _name = "cEgModelNode::GetParameterVec3"
    class GetSkinnedVert(HookFactory):
        _name = "cEgModelNode::GetSkinnedVert"
    class SwitchToEditedGeometry(HookFactory):
        _name = "cEgModelNode::SwitchToEditedGeometry"
    class UpdateGeometry(HookFactory):
        _name = "cEgModelNode::UpdateGeometry"
    class CalculateLodLevel(HookFactory):
        _name = "cEgModelNode::CalculateLodLevel"
    class PrepAnimate(HookFactory):
        _name = "cEgModelNode::PrepAnimate"
    class Animate(HookFactory):
        _name = "cEgModelNode::Animate"
    class BuildMatFromAnimData(HookFactory):
        _name = "cEgModelNode::BuildMatFromAnimData"
    class BuildSkinningMats(HookFactory):
        _name = "cEgModelNode::BuildSkinningMats"
    class FinishAnimate(HookFactory):
        _name = "cEgModelNode::FinishAnimate"
    class PreAsyncUpdate(HookFactory):
        _name = "cEgModelNode::PreAsyncUpdate"
    class UpdateLod_HasLods(HookFactory):
        _name = "cEgModelNode::UpdateLod_HasLods"
    class UpdateLod_HasLodsImmediate(HookFactory):
        _name = "cEgModelNode::UpdateLod_HasLodsImmediate"
    class UpdateLod(HookFactory):
        _name = "cEgModelNode::UpdateLod"
    class AsyncUpdate(HookFactory):
        _name = "cEgModelNode::AsyncUpdate"
    class PostAsyncUpdate(HookFactory):
        _name = "cEgModelNode::PostAsyncUpdate"
    class OnAttach(HookFactory):
        _name = "cEgModelNode::OnAttach"
    class OnSubNodeAttached(HookFactory):
        _name = "cEgModelNode::OnSubNodeAttached"

class cGcNGuiStyledString:
    class StyledStringLayout:
        class StyledStringLayout(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::StyledStringLayout"
        class DoText(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::DoText"
        class TryAndAddToLayout(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::TryAndAddToLayout"
        class DoImage(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::DoImage"
        class Duplicate(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::Duplicate"
        class SetStylePos(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::SetStylePos"
        class PushStyle(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::PushStyle"
        class AlignRow(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::AlignRow"
        class PushTextInstruction(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::PushTextInstruction"
        class MoveCursor(HookFactory):
            _name = "cGcNGuiStyledString::StyledStringLayout::MoveCursor"
    class GenerateLayout(HookFactory):
        _name = "cGcNGuiStyledString::GenerateLayout"
    class ApplyPreRenderAnims(HookFactory):
        _name = "cGcNGuiStyledString::ApplyPreRenderAnims"
    class RenderLayout(HookFactory):
        _name = "cGcNGuiStyledString::RenderLayout"
    class RenderLayout_Internal(HookFactory):
        _name = "cGcNGuiStyledString::RenderLayout_Internal"
    class BlendBetweenKeyframes(HookFactory):
        _name = "cGcNGuiStyledString::BlendBetweenKeyframes"
    class SpecialStyle:
        class SpecialStyle(HookFactory):
            _name = "cGcNGuiStyledString::SpecialStyle::SpecialStyle"

class NGuiRenderEmitterFloatProperty(HookFactory):
    _name = "NGuiRenderEmitterFloatProperty"

class NGuiRenderFloatRange(HookFactory):
    _name = "NGuiRenderFloatRange"

class GetUIPlatformForFile(HookFactory):
    _name = "GetUIPlatformForFile"

class cGcResourceManager:
    class SanitiseSceneFilename(HookFactory):
        _name = "cGcResourceManager::SanitiseSceneFilename"
    class AddResourceForceReload(HookFactory):
        _name = "cGcResourceManager::AddResourceForceReload"

class cGcNGuiEffectViewer:
    class LoadEffectFromTable(HookFactory):
        _name = "cGcNGuiEffectViewer::LoadEffectFromTable"
    class ClearEffect(HookFactory):
        _name = "cGcNGuiEffectViewer::ClearEffect"
    class LoadEmitter(HookFactory):
        _name = "cGcNGuiEffectViewer::LoadEmitter"
    class EmitterData:
        class EmitterData(HookFactory):
            _name = "cGcNGuiEffectViewer::EmitterData::EmitterData"
            _overload: overloads.cGcNGuiEffectViewer.EmitterData.EmitterData.overloads = "cGcNGuiEffectViewer::EmitterData *, const cGcNGuiEffectViewer::EmitterData *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcNGuiEffectViewer.EmitterData.EmitterData.overloads):
                cls._overload = overload_args
                return cls

class cTkInstanceWindComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkInstanceWindComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkInstanceWindComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cTkInstanceWindComponent::DefaultRenderNGui"
    class OnAttached(HookFactory):
        _name = "cTkInstanceWindComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkInstanceWindComponent::Prepare"
    class UpdateRender(HookFactory):
        _name = "cTkInstanceWindComponent::UpdateRender"
    class RenderNGui(HookFactory):
        _name = "cTkInstanceWindComponent::RenderNGui"
    class FindWindEigenvectors(HookFactory):
        _name = "cTkInstanceWindComponent::FindWindEigenvectors"
    class MatchInstance(HookFactory):
        _name = "cTkInstanceWindComponent::MatchInstance"

class cGcModelViewerCustomisationWindow:
    class CustomisationUIStatic:
        class CustomisationUIStatic(HookFactory):
            _name = "cGcModelViewerCustomisationWindow::CustomisationUIStatic::CustomisationUIStatic"

class SpecialTextImageData:
    class SpecialTextImageData(HookFactory):
        _name = "SpecialTextImageData::SpecialTextImageData"

class cTkUiDataMap:
    class Clean(HookFactory):
        _templates = ("T0", )
        _name = "cTkUiDataMap<{T0}>::Clean"
    class CompareIDs(HookFactory):
        _templates = ("T0", )
        _name = "cTkUiDataMap<{T0}>::CompareIDs"
    class CompareIDsBaseOnly(HookFactory):
        _templates = ("T0", )
        _name = "cTkUiDataMap<{T0}>::CompareIDsBaseOnly"
    class IterateElementsWithBase(HookFactory):
        _templates = ("T0", )
        _name = "cTkUiDataMap<{T0}>::IterateElementsWithBase"

class PCBoolParam:
    class Set(HookFactory):
        _name = "PCBoolParam::Set"
    class PCBoolParam(HookFactory):
        _name = "PCBoolParam::PCBoolParam"

class AK:
    class WriteBytesCount:
        class SetCount(HookFactory):
            _name = "AK::WriteBytesCount::SetCount"
        class WriteBytesCount(HookFactory):
            _name = "AK::WriteBytesCount::WriteBytesCount"
        class WriteBytes(HookFactory):
            _name = "AK::WriteBytesCount::WriteBytes"
    class AllocHook(HookFactory):
        _name = "AK::AllocHook"
    class FreeHook(HookFactory):
        _name = "AK::FreeHook"
    class GetMemorySize(HookFactory):
        _name = "AK::GetMemorySize"
    class GetTotalReservedMemorySize(HookFactory):
        _name = "AK::GetTotalReservedMemorySize"
    class MemAlignHook(HookFactory):
        _name = "AK::MemAlignHook"
    class ReallocAlignHook(HookFactory):
        _name = "AK::ReallocAlignHook"
    class ReallocHook(HookFactory):
        _name = "AK::ReallocHook"
    class VirtualAllocHook(HookFactory):
        _name = "AK::VirtualAllocHook"
    class VirtualFreeHook(HookFactory):
        _name = "AK::VirtualFreeHook"
    class DSP:
        class CAkDelayLineMemory:
            class Term(HookFactory):
                _templates = ("T0", )
                _name = "AK::DSP::CAkDelayLineMemory<{T0}>::Term"
            class Init(HookFactory):
                _templates = ("T0", )
                _name = "AK::DSP::CAkDelayLineMemory<{T0}>::Init"
        class AkDelayPitchShift:
            class Init(HookFactory):
                _name = "AK::DSP::AkDelayPitchShift::Init"
            class ProcessChannel(HookFactory):
                _name = "AK::DSP::AkDelayPitchShift::ProcessChannel"
            class Reset(HookFactory):
                _name = "AK::DSP::AkDelayPitchShift::Reset"
            class SetPitchFactor(HookFactory):
                _name = "AK::DSP::AkDelayPitchShift::SetPitchFactor"
            class Term(HookFactory):
                _name = "AK::DSP::AkDelayPitchShift::Term"
        class AkSineOsc:
            class Process(HookFactory):
                _name = "AK::DSP::AkSineOsc::Process"
        class CStereoDelayLine:
            class Init(HookFactory):
                _name = "AK::DSP::CStereoDelayLine::Init"
            class ProcessBuffer(HookFactory):
                _name = "AK::DSP::CStereoDelayLine::ProcessBuffer"
            class Reset(HookFactory):
                _name = "AK::DSP::CStereoDelayLine::Reset"
            class Term(HookFactory):
                _name = "AK::DSP::CStereoDelayLine::Term"
    class MemoryMgr:
        class GetDefaultSettings(HookFactory):
            _name = "AK::MemoryMgr::GetDefaultSettings"
        class Init(HookFactory):
            _name = "AK::MemoryMgr::Init"
        class InitForThread(HookFactory):
            _name = "AK::MemoryMgr::InitForThread"
        class Term(HookFactory):
            _name = "AK::MemoryMgr::Term"
        class TermForThread(HookFactory):
            _name = "AK::MemoryMgr::TermForThread"
        class Free(HookFactory):
            _name = "AK::MemoryMgr::Free"
        class InitBase(HookFactory):
            _name = "AK::MemoryMgr::InitBase"
        class IsInitialized(HookFactory):
            _name = "AK::MemoryMgr::IsInitialized"
        class Malign(HookFactory):
            _name = "AK::MemoryMgr::Malign"
        class Malloc(HookFactory):
            _name = "AK::MemoryMgr::Malloc"
        class Realloc(HookFactory):
            _name = "AK::MemoryMgr::Realloc"
        class ReallocAligned(HookFactory):
            _name = "AK::MemoryMgr::ReallocAligned"
        class TermBase(HookFactory):
            _name = "AK::MemoryMgr::TermBase"
    class MusicEngine:
        class GetPlayingSegmentInfo(HookFactory):
            _name = "AK::MusicEngine::GetPlayingSegmentInfo"
        class Init(HookFactory):
            _name = "AK::MusicEngine::Init"
        class Term(HookFactory):
            _name = "AK::MusicEngine::Term"
    class SoundEngine:
        class AddDefaultListener(HookFactory):
            _name = "AK::SoundEngine::AddDefaultListener"
        class AddExternalBankHandler(HookFactory):
            _name = "AK::SoundEngine::AddExternalBankHandler"
        class AddExternalStateHandler(HookFactory):
            _name = "AK::SoundEngine::AddExternalStateHandler"
        class AddExternalUnloadBankHandler(HookFactory):
            _name = "AK::SoundEngine::AddExternalUnloadBankHandler"
        class AddListener(HookFactory):
            _name = "AK::SoundEngine::AddListener"
        class AddOutput(HookFactory):
            _name = "AK::SoundEngine::AddOutput"
        class AddOutputCaptureMarker(HookFactory):
            _name = "AK::SoundEngine::AddOutputCaptureMarker"
        class AddRemoveOrSetDefaultListeners(HookFactory):
            _name = "AK::SoundEngine::AddRemoveOrSetDefaultListeners"
        class AddRemoveOrSetListeners(HookFactory):
            _name = "AK::SoundEngine::AddRemoveOrSetListeners"
        class DynamicSequence:
            class Break(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Break"
            class Close(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Close"
            class GetPauseTimes(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::GetPauseTimes"
            class GetPlayingItem(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::GetPlayingItem"
            class LockPlaylist(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::LockPlaylist"
            class Open(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Open"
            class Pause(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Pause"
            class Play(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Play"
            class Resume(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Resume"
            class Seek(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Seek"
                _overload: overloads.AK.SoundEngine.DynamicSequence.Seek.overloads = "unsigned int, int, bool"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.DynamicSequence.Seek.overloads):
                    cls._overload = overload_args
                    return cls
            class Stop(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::Stop"
            class UnlockPlaylist(HookFactory):
                _name = "AK::SoundEngine::DynamicSequence::UnlockPlaylist"
        class CancelBankCallbackCookie(HookFactory):
            _name = "AK::SoundEngine::CancelBankCallbackCookie"
        class CancelEventCallback(HookFactory):
            _name = "AK::SoundEngine::CancelEventCallback"
        class CancelEventCallbackCookie(HookFactory):
            _name = "AK::SoundEngine::CancelEventCallbackCookie"
        class CancelEventCallbackGameObject(HookFactory):
            _name = "AK::SoundEngine::CancelEventCallbackGameObject"
        class ClearBanks(HookFactory):
            _name = "AK::SoundEngine::ClearBanks"
        class ClearPreparedEvents(HookFactory):
            _name = "AK::SoundEngine::ClearPreparedEvents"
        class CAkGlobalPluginContext:
            class ComputeSphericalCoordinates(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::ComputeSphericalCoordinates"
            class GetAcousticTexture(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetAcousticTexture"
            class GetAllocator(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetAllocator"
            class GetAudioSettings(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetAudioSettings"
            class GetBufferTick(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetBufferTick"
            class GetIDFromString(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetIDFromString"
            class GetInitSettings(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetInitSettings"
            class GetNumOfSamplesPerFrame(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetNumOfSamplesPerFrame"
            class GetSampleRate(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetSampleRate"
            class GetPlatformContext(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetPlatformContext"
            class GetPlatformInitSettings(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetPlatformInitSettings"
            class GetPluginService(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetPluginService"
            class GetmsPerBufferTick(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::GetmsPerBufferTick"
            class IsRenderingOffline(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::IsRenderingOffline"
            class PassSampleData(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::PassSampleData"
            class PostEventSync(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::PostEventSync"
            class PostMIDIOnEventSync(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::PostMIDIOnEventSync"
            class Random(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::Random"
            class RegisterCodec(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::RegisterCodec"
            class RegisterGlobalCallback(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::RegisterGlobalCallback"
            class RegisterPlugin(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::RegisterPlugin"
            class SendPluginCustomGameData(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::SendPluginCustomGameData"
            class SetRTPCValue(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::SetRTPCValue"
            class SetRTPCValueSync(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::SetRTPCValueSync"
            class StopCapture(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::StopCapture"
            class StopMIDIOnEventSync(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::StopMIDIOnEventSync"
            class UnregisterGlobalCallback(HookFactory):
                _name = "AK::SoundEngine::CAkGlobalPluginContext::UnregisterGlobalCallback"
        class DecodeBank(HookFactory):
            _name = "AK::SoundEngine::DecodeBank"
        class DefaultBankCallbackFunc(HookFactory):
            _name = "AK::SoundEngine::DefaultBankCallbackFunc"
        class ExecuteActionOnEvent(HookFactory):
            _name = "AK::SoundEngine::ExecuteActionOnEvent"
            _overload: overloads.AK.SoundEngine.ExecuteActionOnEvent.overloads = "unsigned int, AK::SoundEngine::AkActionOnEventType, unsigned __int64, int, AkCurveInterpolation, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.ExecuteActionOnEvent.overloads):
                cls._overload = overload_args
                return cls
        class ExecuteActionOnPlayingID(HookFactory):
            _name = "AK::SoundEngine::ExecuteActionOnPlayingID"
        class GetAudioSettings(HookFactory):
            _name = "AK::SoundEngine::GetAudioSettings"
        class GetBackgroundMusicMute(HookFactory):
            _name = "AK::SoundEngine::GetBackgroundMusicMute"
        class GetBufferStatusForPinnedEvent(HookFactory):
            _name = "AK::SoundEngine::GetBufferStatusForPinnedEvent"
            _overload: overloads.AK.SoundEngine.GetBufferStatusForPinnedEvent.overloads = "unsigned int, float *, bool *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.GetBufferStatusForPinnedEvent.overloads):
                cls._overload = overload_args
                return cls
        class GetContainerHistory(HookFactory):
            _name = "AK::SoundEngine::GetContainerHistory"
        class GetDefaultInitSettings(HookFactory):
            _name = "AK::SoundEngine::GetDefaultInitSettings"
        class GetDefaultPlatformInitSettings(HookFactory):
            _name = "AK::SoundEngine::GetDefaultPlatformInitSettings"
        class GetDeviceList(HookFactory):
            _name = "AK::SoundEngine::GetDeviceList"
            _overload: overloads.AK.SoundEngine.GetDeviceList.overloads = "unsigned int, unsigned int *, AkDeviceDescription *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.GetDeviceList.overloads):
                cls._overload = overload_args
                return cls
        class DynamicDialogue:
            class GetDialogueEventCustomPropertyValue(HookFactory):
                _name = "AK::SoundEngine::DynamicDialogue::GetDialogueEventCustomPropertyValue"
                _overload: overloads.AK.SoundEngine.DynamicDialogue.GetDialogueEventCustomPropertyValue.overloads = "unsigned int, unsigned int, int *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.DynamicDialogue.GetDialogueEventCustomPropertyValue.overloads):
                    cls._overload = overload_args
                    return cls
            class ResolveDialogueEvent(HookFactory):
                _name = "AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent"
                _overload: overloads.AK.SoundEngine.DynamicDialogue.ResolveDialogueEvent.overloads = "unsigned int, unsigned int *, unsigned int, unsigned int, __int64 *, void *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.DynamicDialogue.ResolveDialogueEvent.overloads):
                    cls._overload = overload_args
                    return cls
        class GetGlobalPluginContext(HookFactory):
            _name = "AK::SoundEngine::GetGlobalPluginContext"
        class GetIDFromString(HookFactory):
            _name = "AK::SoundEngine::GetIDFromString"
            _overload: overloads.AK.SoundEngine.GetIDFromString.overloads = "const char *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.GetIDFromString.overloads):
                cls._overload = overload_args
                return cls
        class GetOutputDeviceConfiguration(HookFactory):
            _name = "AK::SoundEngine::GetOutputDeviceConfiguration"
        class GetOutputID(HookFactory):
            _name = "AK::SoundEngine::GetOutputID"
            _overload: overloads.AK.SoundEngine.GetOutputID.overloads = "unsigned int, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.GetOutputID.overloads):
                cls._overload = overload_args
                return cls
        class GetPanningRule(HookFactory):
            _name = "AK::SoundEngine::GetPanningRule"
        class GetSampleTick(HookFactory):
            _name = "AK::SoundEngine::GetSampleTick"
        class GetSourcePlayPosition(HookFactory):
            _name = "AK::SoundEngine::GetSourcePlayPosition"
        class GetSourcePlayPositions(HookFactory):
            _name = "AK::SoundEngine::GetSourcePlayPositions"
        class GetSourceStreamBuffering(HookFactory):
            _name = "AK::SoundEngine::GetSourceStreamBuffering"
        class GetSpeakerAngles(HookFactory):
            _name = "AK::SoundEngine::GetSpeakerAngles"
        class GetSpeakerConfiguration(HookFactory):
            _name = "AK::SoundEngine::GetSpeakerConfiguration"
        class Init(HookFactory):
            _name = "AK::SoundEngine::Init"
        class IsInitialized(HookFactory):
            _name = "AK::SoundEngine::IsInitialized"
        class LoadBank(HookFactory):
            _name = "AK::SoundEngine::LoadBank"
            _overload: overloads.AK.SoundEngine.LoadBank.overloads = "unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.LoadBank.overloads):
                cls._overload = overload_args
                return cls
        class LoadBankMemoryCopy(HookFactory):
            _name = "AK::SoundEngine::LoadBankMemoryCopy"
            _overload: overloads.AK.SoundEngine.LoadBankMemoryCopy.overloads = "const void *, unsigned int, unsigned int *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.LoadBankMemoryCopy.overloads):
                cls._overload = overload_args
                return cls
        class LoadBankMemoryView(HookFactory):
            _name = "AK::SoundEngine::LoadBankMemoryView"
            _overload: overloads.AK.SoundEngine.LoadBankMemoryView.overloads = "const void *, unsigned int, unsigned int *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.LoadBankMemoryView.overloads):
                cls._overload = overload_args
                return cls
        class MuteBackgroundMusic(HookFactory):
            _name = "AK::SoundEngine::MuteBackgroundMusic"
        class PinEventInStreamCache(HookFactory):
            _name = "AK::SoundEngine::PinEventInStreamCache"
            _overload: overloads.AK.SoundEngine.PinEventInStreamCache.overloads = "unsigned int, char, char"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PinEventInStreamCache.overloads):
                cls._overload = overload_args
                return cls
        class PlaySourcePlugin(HookFactory):
            _name = "AK::SoundEngine::PlaySourcePlugin"
        class PostEvent(HookFactory):
            _name = "AK::SoundEngine::PostEvent"
            _overload: overloads.AK.SoundEngine.PostEvent.overloads = "unsigned int, unsigned __int64, unsigned int, __int64 *, void *, unsigned int, AkExternalSourceInfo *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PostEvent.overloads):
                cls._overload = overload_args
                return cls
        class PostMIDIOnEvent(HookFactory):
            _name = "AK::SoundEngine::PostMIDIOnEvent"
        class PostTrigger(HookFactory):
            _name = "AK::SoundEngine::PostTrigger"
            _overload: overloads.AK.SoundEngine.PostTrigger.overloads = "StopParticles *, unsigned __int64"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PostTrigger.overloads):
                cls._overload = overload_args
                return cls
        class PrepareBank(HookFactory):
            _name = "AK::SoundEngine::PrepareBank"
            _overload: overloads.AK.SoundEngine.PrepareBank.overloads = "AK::SoundEngine::PreparationType, unsigned int, __int64 *, void *, AK::SoundEngine::AkBankContent"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PrepareBank.overloads):
                cls._overload = overload_args
                return cls
        class PrepareEvent(HookFactory):
            _name = "AK::SoundEngine::PrepareEvent"
            _overload: overloads.AK.SoundEngine.PrepareEvent.overloads = "AK::SoundEngine::PreparationType, unsigned int *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PrepareEvent.overloads):
                cls._overload = overload_args
                return cls
        class PrepareGameSyncs(HookFactory):
            _name = "AK::SoundEngine::PrepareGameSyncs"
            _overload: overloads.AK.SoundEngine.PrepareGameSyncs.overloads = "AK::SoundEngine::PreparationType, AkGroupType, unsigned int, unsigned int *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.PrepareGameSyncs.overloads):
                cls._overload = overload_args
                return cls
        class RegisterAudioDeviceStatusCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterAudioDeviceStatusCallback"
        class RegisterBusMeteringCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterBusMeteringCallback"
        class RegisterBusVolumeCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterBusVolumeCallback"
        class RegisterCaptureCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterCaptureCallback"
        class RegisterCodec(HookFactory):
            _name = "AK::SoundEngine::RegisterCodec"
        class RegisterGameObj(HookFactory):
            _name = "AK::SoundEngine::RegisterGameObj"
        class RegisterGlobalCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterGlobalCallback"
        class RegisterOutputDeviceMeteringCallback(HookFactory):
            _name = "AK::SoundEngine::RegisterOutputDeviceMeteringCallback"
        class RegisterPlugin(HookFactory):
            _name = "AK::SoundEngine::RegisterPlugin"
        class RemoveDefaultListener(HookFactory):
            _name = "AK::SoundEngine::RemoveDefaultListener"
        class RemoveListener(HookFactory):
            _name = "AK::SoundEngine::RemoveListener"
        class RemoveOutput(HookFactory):
            _name = "AK::SoundEngine::RemoveOutput"
        class RenderAudio(HookFactory):
            _name = "AK::SoundEngine::RenderAudio"
        class ReplaceOutput(HookFactory):
            _name = "AK::SoundEngine::ReplaceOutput"
        class ResetListenersToDefault(HookFactory):
            _name = "AK::SoundEngine::ResetListenersToDefault"
        class ResetRTPCValue(HookFactory):
            _name = "AK::SoundEngine::ResetRTPCValue"
            _overload: overloads.AK.SoundEngine.ResetRTPCValue.overloads = "SpawnParticles *, unsigned __int64, int, AkCurveInterpolation, bool"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.ResetRTPCValue.overloads):
                cls._overload = overload_args
                return cls
        class SeekOnEvent(HookFactory):
            _name = "AK::SoundEngine::SeekOnEvent"
            _overload: overloads.AK.SoundEngine.SeekOnEvent.overloads = "unsigned int, unsigned __int64, int, bool, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SeekOnEvent.overloads):
                cls._overload = overload_args
                return cls
        class SendPluginCustomGameData(HookFactory):
            _name = "AK::SoundEngine::SendPluginCustomGameData"
        class SetActorMixerEffect(HookFactory):
            _name = "AK::SoundEngine::SetActorMixerEffect"
        class SetBankLoadIOSettings(HookFactory):
            _name = "AK::SoundEngine::SetBankLoadIOSettings"
        class SetBusDevice(HookFactory):
            _name = "AK::SoundEngine::SetBusDevice"
            _overload: overloads.AK.SoundEngine.SetBusDevice.overloads = "unsigned int, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetBusDevice.overloads):
                cls._overload = overload_args
                return cls
        class SetBusEffect(HookFactory):
            _name = "AK::SoundEngine::SetBusEffect"
            _overload: overloads.AK.SoundEngine.SetBusEffect.overloads = "unsigned int, unsigned int, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetBusEffect.overloads):
                cls._overload = overload_args
                return cls
        class SetContainerHistory(HookFactory):
            _name = "AK::SoundEngine::SetContainerHistory"
        class SetCustomPlatformName(HookFactory):
            _name = "AK::SoundEngine::SetCustomPlatformName"
        class SetDefaultListeners(HookFactory):
            _name = "AK::SoundEngine::SetDefaultListeners"
        class SetGameObjectAuxSendValues(HookFactory):
            _name = "AK::SoundEngine::SetGameObjectAuxSendValues"
        class SetGameObjectOutputBusVolume(HookFactory):
            _name = "AK::SoundEngine::SetGameObjectOutputBusVolume"
        class SetListeners(HookFactory):
            _name = "AK::SoundEngine::SetListeners"
        class SetMaxNumDangerousVirtVoicesLimitInternal(HookFactory):
            _name = "AK::SoundEngine::SetMaxNumDangerousVirtVoicesLimitInternal"
        class SetMaxNumVoicesLimit(HookFactory):
            _name = "AK::SoundEngine::SetMaxNumVoicesLimit"
        class SetMaxNumVoicesLimitInternal(HookFactory):
            _name = "AK::SoundEngine::SetMaxNumVoicesLimitInternal"
        class SetMedia(HookFactory):
            _name = "AK::SoundEngine::SetMedia"
        class SetMixer(HookFactory):
            _name = "AK::SoundEngine::SetMixer"
            _overload: overloads.AK.SoundEngine.SetMixer.overloads = "unsigned int, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetMixer.overloads):
                cls._overload = overload_args
                return cls
        class SetMultipleObstructionAndOcclusion(HookFactory):
            _name = "AK::SoundEngine::SetMultipleObstructionAndOcclusion"
        class SetMultiplePositions(HookFactory):
            _name = "AK::SoundEngine::SetMultiplePositions"
            _overload: overloads.AK.SoundEngine.SetMultiplePositions.overloads = "unsigned __int64, const AkChannelEmitter *, unsigned __int16, AK::SoundEngine::MultiPositionType"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetMultiplePositions.overloads):
                cls._overload = overload_args
                return cls
        class SetObjectObstructionAndOcclusion(HookFactory):
            _name = "AK::SoundEngine::SetObjectObstructionAndOcclusion"
        class SetOfflineRendering(HookFactory):
            _name = "AK::SoundEngine::SetOfflineRendering"
        class SetOfflineRenderingFrameTime(HookFactory):
            _name = "AK::SoundEngine::SetOfflineRenderingFrameTime"
        class SetOutputDeviceEffect(HookFactory):
            _name = "AK::SoundEngine::SetOutputDeviceEffect"
        class SetOutputVolume(HookFactory):
            _name = "AK::SoundEngine::SetOutputVolume"
        class SetPanningRule(HookFactory):
            _name = "AK::SoundEngine::SetPanningRule"
        class SetPosition(HookFactory):
            _name = "AK::SoundEngine::SetPosition"
        class SetPositionInternal(HookFactory):
            _name = "AK::SoundEngine::SetPositionInternal"
        class SetRTPCValue(HookFactory):
            _name = "AK::SoundEngine::SetRTPCValue"
            _overload: overloads.AK.SoundEngine.SetRTPCValue.overloads = "SurveyVariableValue *, float, unsigned __int64, int, AkCurveInterpolation, bool"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetRTPCValue.overloads):
                cls._overload = overload_args
                return cls
        class SetRTPCValueByPlayingID(HookFactory):
            _name = "AK::SoundEngine::SetRTPCValueByPlayingID"
            _overload: overloads.AK.SoundEngine.SetRTPCValueByPlayingID.overloads = "unsigned int, float, unsigned int, int, AkCurveInterpolation, bool"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetRTPCValueByPlayingID.overloads):
                cls._overload = overload_args
                return cls
        class SetRandomSeed(HookFactory):
            _name = "AK::SoundEngine::SetRandomSeed"
        class SetScalingFactor(HookFactory):
            _name = "AK::SoundEngine::SetScalingFactor"
        class SetSpeakerAngles(HookFactory):
            _name = "AK::SoundEngine::SetSpeakerAngles"
        class SetState(HookFactory):
            _name = "AK::SoundEngine::SetState"
            _overload: overloads.AK.SoundEngine.SetState.overloads = "StopParticles *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetState.overloads):
                cls._overload = overload_args
                return cls
        class SetSwitch(HookFactory):
            _name = "AK::SoundEngine::SetSwitch"
            _overload: overloads.AK.SoundEngine.SetSwitch.overloads = "unsigned int, unsigned int, unsigned __int64"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.SetSwitch.overloads):
                cls._overload = overload_args
                return cls
        class SetVolumeThreshold(HookFactory):
            _name = "AK::SoundEngine::SetVolumeThreshold"
        class SetVolumeThresholdInternal(HookFactory):
            _name = "AK::SoundEngine::SetVolumeThresholdInternal"
        class StartOutputCapture(HookFactory):
            _name = "AK::SoundEngine::StartOutputCapture"
        class StopAll(HookFactory):
            _name = "AK::SoundEngine::StopAll"
        class StopMIDIOnEvent(HookFactory):
            _name = "AK::SoundEngine::StopMIDIOnEvent"
        class StopOutputCapture(HookFactory):
            _name = "AK::SoundEngine::StopOutputCapture"
        class StopPlayingID(HookFactory):
            _name = "AK::SoundEngine::StopPlayingID"
        class StopSourcePlugin(HookFactory):
            _name = "AK::SoundEngine::StopSourcePlugin"
        class Suspend(HookFactory):
            _name = "AK::SoundEngine::Suspend"
        class Term(HookFactory):
            _name = "AK::SoundEngine::Term"
        class TryUnsetMedia(HookFactory):
            _name = "AK::SoundEngine::TryUnsetMedia"
        class UnloadBank(HookFactory):
            _name = "AK::SoundEngine::UnloadBank"
            _overload: overloads.AK.SoundEngine.UnloadBank.overloads = "unsigned int, const void *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.UnloadBank.overloads):
                cls._overload = overload_args
                return cls
        class UnloadBankInternal(HookFactory):
            _name = "AK::SoundEngine::UnloadBankInternal"
        class UnpinEventInStreamCache(HookFactory):
            _name = "AK::SoundEngine::UnpinEventInStreamCache"
            _overload: overloads.AK.SoundEngine.UnpinEventInStreamCache.overloads = "unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.SoundEngine.UnpinEventInStreamCache.overloads):
                cls._overload = overload_args
                return cls
        class UnregisterAllGameObj(HookFactory):
            _name = "AK::SoundEngine::UnregisterAllGameObj"
        class UnregisterAudioDeviceStatusCallback(HookFactory):
            _name = "AK::SoundEngine::UnregisterAudioDeviceStatusCallback"
        class UnregisterCaptureCallback(HookFactory):
            _name = "AK::SoundEngine::UnregisterCaptureCallback"
        class UnregisterGameObj(HookFactory):
            _name = "AK::SoundEngine::UnregisterGameObj"
        class UnregisterGlobalCallback(HookFactory):
            _name = "AK::SoundEngine::UnregisterGlobalCallback"
        class UnsetMedia(HookFactory):
            _name = "AK::SoundEngine::UnsetMedia"
        class WaitSoundEngineInit(HookFactory):
            _name = "AK::SoundEngine::WaitSoundEngineInit"
        class WakeupFromSuspend(HookFactory):
            _name = "AK::SoundEngine::WakeupFromSuspend"
        class _SetRTPCValue(HookFactory):
            _name = "AK::SoundEngine::_SetRTPCValue"
        class Query:
            class GetActiveGameObjects(HookFactory):
                _name = "AK::SoundEngine::Query::GetActiveGameObjects"
            class GetCustomPropertyValue(HookFactory):
                _name = "AK::SoundEngine::Query::GetCustomPropertyValue"
            class GetEventIDFromPlayingID(HookFactory):
                _name = "AK::SoundEngine::Query::GetEventIDFromPlayingID"
            class GetGameObjectAuxSendValues(HookFactory):
                _name = "AK::SoundEngine::Query::GetGameObjectAuxSendValues"
            class GetGameObjectDryLevelValue(HookFactory):
                _name = "AK::SoundEngine::Query::GetGameObjectDryLevelValue"
            class GetGameObjectFromPlayingID(HookFactory):
                _name = "AK::SoundEngine::Query::GetGameObjectFromPlayingID"
            class GetIsGameObjectActive(HookFactory):
                _name = "AK::SoundEngine::Query::GetIsGameObjectActive"
            class GetListenerPosition(HookFactory):
                _name = "AK::SoundEngine::Query::GetListenerPosition"
            class GetListenerSpatialization(HookFactory):
                _name = "AK::SoundEngine::Query::GetListenerSpatialization"
            class GetListeners(HookFactory):
                _name = "AK::SoundEngine::Query::GetListeners"
            class GetMaxRadius(HookFactory):
                _name = "AK::SoundEngine::Query::GetMaxRadius"
                _overload: overloads.AK.SoundEngine.Query.GetMaxRadius.overloads = "AkArray<AK::SoundEngine::Query::GameObjDst,AK::SoundEngine::Query::GameObjDst const &,AkArrayAllocatorNoAlign<0>,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy<AK::SoundEngine::Query::GameObjDst> > *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.Query.GetMaxRadius.overloads):
                    cls._overload = overload_args
                    return cls
            class GetObjectObstructionAndOcclusion(HookFactory):
                _name = "AK::SoundEngine::Query::GetObjectObstructionAndOcclusion"
            class GetPlayingIDsFromGameObject(HookFactory):
                _name = "AK::SoundEngine::Query::GetPlayingIDsFromGameObject"
            class GetPosition(HookFactory):
                _name = "AK::SoundEngine::Query::GetPosition"
            class GetPositioningInfo(HookFactory):
                _name = "AK::SoundEngine::Query::GetPositioningInfo"
            class GetRTPCValue(HookFactory):
                _name = "AK::SoundEngine::Query::GetRTPCValue"
                _overload: overloads.AK.SoundEngine.Query.GetRTPCValue.overloads = "unsigned int, unsigned __int64, unsigned int, float *, AK::SoundEngine::Query::RTPCValue_type *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.Query.GetRTPCValue.overloads):
                    cls._overload = overload_args
                    return cls
            class GetState(HookFactory):
                _name = "AK::SoundEngine::Query::GetState"
                _overload: overloads.AK.SoundEngine.Query.GetState.overloads = "unsigned int, unsigned int *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.Query.GetState.overloads):
                    cls._overload = overload_args
                    return cls
            class GetSwitch(HookFactory):
                _name = "AK::SoundEngine::Query::GetSwitch"
                _overload: overloads.AK.SoundEngine.Query.GetSwitch.overloads = "unsigned int, unsigned __int64, unsigned int *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.Query.GetSwitch.overloads):
                    cls._overload = overload_args
                    return cls
            class QueryAudioObjectIDs(HookFactory):
                _name = "AK::SoundEngine::Query::QueryAudioObjectIDs"
                _overload: overloads.AK.SoundEngine.Query.QueryAudioObjectIDs.overloads = "unsigned int, unsigned int *, AkObjectInfo *"
                @classmethod
                def overload(cls, overload_args: overloads.AK.SoundEngine.Query.QueryAudioObjectIDs.overloads):
                    cls._overload = overload_args
                    return cls
        class GetDeviceSpatialAudioSupport(HookFactory):
            _name = "AK::SoundEngine::GetDeviceSpatialAudioSupport"
        class RegisterPluginDLL(HookFactory):
            _name = "AK::SoundEngine::RegisterPluginDLL"
    class ReadBytesMem:
        class ReadBytesMem(HookFactory):
            _name = "AK::ReadBytesMem::ReadBytesMem"
            _overload: overloads.AK.ReadBytesMem.ReadBytesMem.overloads = "AK::ReadBytesMem *, const void *, int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.ReadBytesMem.ReadBytesMem.overloads):
                cls._overload = overload_args
                return cls
        class Attach(HookFactory):
            _name = "AK::ReadBytesMem::Attach"
        class ReadBytes(HookFactory):
            _name = "AK::ReadBytesMem::ReadBytes"
    class WriteBytesBuffer:
        class WriteBytesBuffer(HookFactory):
            _name = "AK::WriteBytesBuffer::WriteBytesBuffer"
        class Clear(HookFactory):
            _name = "AK::WriteBytesBuffer::Clear"
        class SetBuffer(HookFactory):
            _name = "AK::WriteBytesBuffer::SetBuffer"
        class WriteBytes(HookFactory):
            _name = "AK::WriteBytesBuffer::WriteBytes"
    class WriteBytesMem:
        class WriteBytesMem(HookFactory):
            _name = "AK::WriteBytesMem::WriteBytesMem"
        class Clear(HookFactory):
            _name = "AK::WriteBytesMem::Clear"
        class Detach(HookFactory):
            _name = "AK::WriteBytesMem::Detach"
        class Reserve(HookFactory):
            _name = "AK::WriteBytesMem::Reserve"
        class SetCount(HookFactory):
            _name = "AK::WriteBytesMem::SetCount"
        class SetMemPool(HookFactory):
            _name = "AK::WriteBytesMem::SetMemPool"
        class WriteBytes(HookFactory):
            _name = "AK::WriteBytesMem::WriteBytes"
    class ReadBytesSkip:
        class ReadBytesSkip(HookFactory):
            _name = "AK::ReadBytesSkip::ReadBytesSkip"
            _overload: overloads.AK.ReadBytesSkip.ReadBytesSkip.overloads = "AK::ReadBytesSkip *, const void *, int"
            @classmethod
            def overload(cls, overload_args: overloads.AK.ReadBytesSkip.ReadBytesSkip.overloads):
                cls._overload = overload_args
                return cls
        class ReadBytes(HookFactory):
            _name = "AK::ReadBytesSkip::ReadBytes"
    class Win32:
        class DeviceEnumerator:
            class GetDefaultDevice(HookFactory):
                _name = "AK::Win32::DeviceEnumerator::GetDefaultDevice"
    class DeviceEnumeratorHelper(HookFactory):
        _name = "AK::DeviceEnumeratorHelper"
    class GetDeviceID(HookFactory):
        _name = "AK::GetDeviceID"
    class GetDeviceIDFromName(HookFactory):
        _name = "AK::GetDeviceIDFromName"
    class GetWindowsDevice(HookFactory):
        _name = "AK::GetWindowsDevice"
    class GetWindowsDeviceCount(HookFactory):
        _name = "AK::GetWindowsDeviceCount"
    class GetWindowsDeviceName(HookFactory):
        _name = "AK::GetWindowsDeviceName"
    class GetPluginServiceMixer(HookFactory):
        _name = "AK::GetPluginServiceMixer"
    class CAkPluginServiceMixer:
        class Mix1inNChannels(HookFactory):
            _name = "AK::CAkPluginServiceMixer::Mix1inNChannels"
        class MixChannel(HookFactory):
            _name = "AK::CAkPluginServiceMixer::MixChannel"
        class MixNinNChannels(HookFactory):
            _name = "AK::CAkPluginServiceMixer::MixNinNChannels"
    class CAkBusCtx:
        class CAkBusCtx(HookFactory):
            _name = "AK::CAkBusCtx::CAkBusCtx"
            _overload: overloads.AK.CAkBusCtx.CAkBusCtx.overloads = "AK::CAkBusCtx *, AK::CAkBusCtx *"
            @classmethod
            def overload(cls, overload_args: overloads.AK.CAkBusCtx.CAkBusCtx.overloads):
                cls._overload = overload_args
                return cls
        class FindParentCtx(HookFactory):
            _name = "AK::CAkBusCtx::FindParentCtx"
        class GameObjectID(HookFactory):
            _name = "AK::CAkBusCtx::GameObjectID"
        class GetChannelConfig(HookFactory):
            _name = "AK::CAkBusCtx::GetChannelConfig"
        class GetFX(HookFactory):
            _name = "AK::CAkBusCtx::GetFX"
        class GetFXDataID(HookFactory):
            _name = "AK::CAkBusCtx::GetFXDataID"
        class GetMixerPlugin(HookFactory):
            _name = "AK::CAkBusCtx::GetMixerPlugin"
        class GetMixerPluginDataID(HookFactory):
            _name = "AK::CAkBusCtx::GetMixerPluginDataID"
        class HasMixerPlugin(HookFactory):
            _name = "AK::CAkBusCtx::HasMixerPlugin"
        class ID(HookFactory):
            _name = "AK::CAkBusCtx::ID"
        class IsAuxBus(HookFactory):
            _name = "AK::CAkBusCtx::IsAuxBus"
        class LookupGameObjectAndCreateBusCtx(HookFactory):
            _name = "AK::CAkBusCtx::LookupGameObjectAndCreateBusCtx"
    class StreamMgr:
        class CAkAutoStmMemory:
            class GetHeuristics(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::GetHeuristics"
            class CAkAutoStmMemory(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::CAkAutoStmMemory"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::Destroy"
            class GetBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::GetBuffer"
            class GetInfo(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::GetInfo"
            class GetNominalBuffering(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::GetNominalBuffering"
            class QueryBufferingStatus(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::QueryBufferingStatus"
            class ReleaseBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::ReleaseBuffer"
            class Relocate(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::Relocate"
            class SetHeuristics(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::SetHeuristics"
            class SetMinimalBufferSize(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::SetMinimalBufferSize"
            class SetMinTargetBufferSize(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::SetMinTargetBufferSize"
            class SetPosition(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::SetPosition"
            class SetStreamName(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmMemory::SetStreamName"
        class AddLanguageChangeObserver(HookFactory):
            _name = "AK::StreamMgr::AddLanguageChangeObserver"
        class CAkStreamMgr:
            class CachedFileStreamData:
                class AddRef(HookFactory):
                    _name = "AK::StreamMgr::CAkStreamMgr::CachedFileStreamData::AddRef"
            class CreateAuto(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::CreateAuto"
                _overload: overloads.AK.StreamMgr.CAkStreamMgr.CreateAuto.overloads = "AK::StreamMgr::CAkStreamMgr *, unsigned int, AkFileSystemFlags *, const AkAutoStmHeuristics *, AkAutoStmBufSettings *, AK::IAkAutoStream **, bool"
                @classmethod
                def overload(cls, overload_args: overloads.AK.StreamMgr.CAkStreamMgr.CreateAuto.overloads):
                    cls._overload = overload_args
                    return cls
            class CreateCachingStream(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::CreateCachingStream"
            class CreateDevice(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::CreateDevice"
            class CreateStd(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::CreateStd"
                _overload: overloads.AK.StreamMgr.CAkStreamMgr.CreateStd.overloads = "AK::StreamMgr::CAkStreamMgr *, unsigned int, AkFileSystemFlags *, AkOpenMode, AK::IAkStdStream **, bool"
                @classmethod
                def overload(cls, overload_args: overloads.AK.StreamMgr.CAkStreamMgr.CreateStd.overloads):
                    cls._overload = overload_args
                    return cls
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::Destroy"
            class ForceCleanup(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::ForceCleanup"
            class GetBufferStatusForPinnedFile(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::GetBufferStatusForPinnedFile"
            class PinFileInCache(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::PinFileInCache"
            class RelocateMemoryStream(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::RelocateMemoryStream"
            class UnpinFileInCache(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::UnpinFileInCache"
            class UpdateCachingPriority(HookFactory):
                _name = "AK::StreamMgr::CAkStreamMgr::UpdateCachingPriority"
        class AkDeferredOpenData:
            class Create(HookFactory):
                _name = "AK::StreamMgr::AkDeferredOpenData::Create"
                _overload: overloads.AK.StreamMgr.AkDeferredOpenData.Create.overloads = "unsigned int, AkFileSystemFlags *, AkOpenMode"
                @classmethod
                def overload(cls, overload_args: overloads.AK.StreamMgr.AkDeferredOpenData.Create.overloads):
                    cls._overload = overload_args
                    return cls
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::AkDeferredOpenData::Destroy"
            class Execute(HookFactory):
                _name = "AK::StreamMgr::AkDeferredOpenData::Execute"
        class Create(HookFactory):
            _name = "AK::StreamMgr::Create"
        class CreateDevice(HookFactory):
            _name = "AK::StreamMgr::CreateDevice"
        class DestroyDevice(HookFactory):
            _name = "AK::StreamMgr::DestroyDevice"
        class FlushAllCaches(HookFactory):
            _name = "AK::StreamMgr::FlushAllCaches"
        class GetCurrentLanguage(HookFactory):
            _name = "AK::StreamMgr::GetCurrentLanguage"
        class GetDefaultDeviceSettings(HookFactory):
            _name = "AK::StreamMgr::GetDefaultDeviceSettings"
        class GetFileLocationResolver(HookFactory):
            _name = "AK::StreamMgr::GetFileLocationResolver"
        class RemoveLanguageChangeObserver(HookFactory):
            _name = "AK::StreamMgr::RemoveLanguageChangeObserver"
        class SetCurrentLanguage(HookFactory):
            _name = "AK::StreamMgr::SetCurrentLanguage"
        class SetFileLocationResolver(HookFactory):
            _name = "AK::StreamMgr::SetFileLocationResolver"
        class CAkAutoStmBase:
            class CAkAutoStmBase(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::CAkAutoStmBase"
            class AddMemView(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::AddMemView"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Destroy"
            class DestroyBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::DestroyBuffer"
            class EffectiveDeadline(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::EffectiveDeadline"
            class Flush(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Flush"
            class GetBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetBuffer"
            class GetFileDescriptor(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetFileDescriptor"
            class GetHeuristics(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetHeuristics"
            class GetNominalBuffering(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetNominalBuffering"
            class GetPosition(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetPosition"
            class GetReadBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetReadBuffer"
            class GetVirtualBufferingSize(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::GetVirtualBufferingSize"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Init"
            class Kill(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Kill"
            class OnFileDeferredOpen(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::OnFileDeferredOpen"
            class QueryBufferingStatus(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::QueryBufferingStatus"
            class ReleaseBuffer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::ReleaseBuffer"
            class ReleaseCachingBuffers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::ReleaseCachingBuffers"
            class SetBufferingSettings(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::SetBufferingSettings"
            class SetCachingBufferSize(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::SetCachingBufferSize"
            class SetHeuristics(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::SetHeuristics"
            class SetMinimalBufferSize(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::SetMinimalBufferSize"
            class SetPosition(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::SetPosition"
            class Start(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Start"
            class StartCaching(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::StartCaching"
            class Stop(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::Stop"
            class StopCaching(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::StopCaching"
            class UpdateSchedulingStatus(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::UpdateSchedulingStatus"
            class UpdateTaskStatus(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBase::UpdateTaskStatus"
        class CAkDeviceBase:
            class CAkDeviceBase(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::CAkDeviceBase"
            class ClearStreams(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ClearStreams"
            class ClearTaskList(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ClearTaskList"
            class CreateAuto(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::CreateAuto"
            class CreateCachingStream(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::CreateCachingStream"
            class CreateStd(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::CreateStd"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::Destroy"
            class ExecuteCachedTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ExecuteCachedTransfer"
            class FlushCache(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::FlushCache"
            class ForceCleanup(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ForceCleanup"
            class ForceTaskListCleanup(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ForceTaskListCleanup"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::Init"
            class OnThreadStart(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::OnThreadStart"
            class ScheduleStdStmOnly(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::ScheduleStdStmOnly"
            class SchedulerFindNextCachingTask(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::SchedulerFindNextCachingTask"
            class SchedulerFindNextTask(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::SchedulerFindNextTask"
            class UpdateCachingPriority(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::UpdateCachingPriority"
            class DestroyMemView(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBase::DestroyMemView"
        class CAkStdStmBase:
            class CAkStdStmBase(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::CAkStdStmBase"
            class AddMemView(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::AddMemView"
            class EffectiveDeadline(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::EffectiveDeadline"
            class ExecuteOp(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::ExecuteOp"
            class GetBlockSize(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::GetBlockSize"
            class GetData(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::GetData"
            class GetInfo(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::GetInfo"
            class GetPosition(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::GetPosition"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::Init"
            class Kill(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::Kill"
            class Read(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::Read"
            class SetPosition(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::SetPosition"
            class SetStatus(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::SetStatus"
            class SetStreamName(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::SetStreamName"
            class UpdateTaskStatus(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::UpdateTaskStatus"
            class WaitForPendingOperation(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::WaitForPendingOperation"
            class Write(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBase::Write"
        class CAkStmTask:
            class EnsureFileIsOpen(HookFactory):
                _name = "AK::StreamMgr::CAkStmTask::EnsureFileIsOpen"
            class OnFileDeferredOpen(HookFactory):
                _name = "AK::StreamMgr::CAkStmTask::OnFileDeferredOpen"
            class SetDeferredFileOpen(HookFactory):
                _name = "AK::StreamMgr::CAkStmTask::SetDeferredFileOpen"
                _overload: overloads.AK.StreamMgr.CAkStmTask.SetDeferredFileOpen.overloads = "AK::StreamMgr::CAkStmTask *, AkFileDesc *, unsigned int, AkFileSystemFlags *, AkOpenMode"
                @classmethod
                def overload(cls, overload_args: overloads.AK.StreamMgr.CAkStmTask.SetDeferredFileOpen.overloads):
                    cls._overload = overload_args
                    return cls
        class CAkDeviceBlocking:
            class CAkDeviceBlocking(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::CAkDeviceBlocking"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::Init"
            class MemViewFactory(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::MemViewFactory"
            class PerformIO(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::PerformIO"
            class _CreateAuto(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::_CreateAuto"
            class _CreateStd(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceBlocking::_CreateStd"
        class CAkAutoStmBlocking:
            class CanBeDestroyed(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::CanBeDestroyed"
            class CancelAllPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::CancelAllPendingTransfers"
            class CancelCurrentTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::CancelCurrentTransfer"
            class CancelInconsistentPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::CancelInconsistentPendingTransfers"
            class FlushSmallBuffersAndPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::FlushSmallBuffersAndPendingTransfers"
            class PrepareTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::PrepareTransfer"
            class ReleaseCachingBuffers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::ReleaseCachingBuffers"
            class SetLoopEnd(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::SetLoopEnd"
            class Update(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmBlocking::Update"
        class CAkStdStmBlocking:
            class CanBeDestroyed(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBlocking::CanBeDestroyed"
            class Cancel(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBlocking::Cancel"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBlocking::Destroy"
            class PrepareTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBlocking::PrepareTransfer"
            class Update(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmBlocking::Update"
        class CAkAutoStmDeferredLinedUp:
            class GetVirtualFilePosition(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::GetVirtualFilePosition"
            class CancelAllPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::CancelAllPendingTransfers"
            class CancelInconsistentPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::CancelInconsistentPendingTransfers"
            class FlushSmallBuffersAndPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::FlushSmallBuffersAndPendingTransfers"
            class PrepareTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::PrepareTransfer"
            class ReleaseCachingBuffers(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::ReleaseCachingBuffers"
            class SetLoopEnd(HookFactory):
                _name = "AK::StreamMgr::CAkAutoStmDeferredLinedUp::SetLoopEnd"
        class CAkDeviceDeferredLinedUp:
            class CAkDeviceDeferredLinedUp(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::CAkDeviceDeferredLinedUp"
            class CreateLowLevelTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::CreateLowLevelTransfer"
            class CreateMemViewAuto(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::CreateMemViewAuto"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::Destroy"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::Init"
            class MemViewFactory(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::MemViewFactory"
            class PerformIO(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::PerformIO"
            class _CreateAuto(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::_CreateAuto"
            class _CreateStd(HookFactory):
                _name = "AK::StreamMgr::CAkDeviceDeferredLinedUp::_CreateStd"
        class CAkStmDeferredLinedUpBase:
            class CanBeDestroyed(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::CanBeDestroyed"
            class CancelTransfers(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::CancelTransfers"
            class GetOldestCompletedTransfer(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::GetOldestCompletedTransfer"
            class PopTransferRequest(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::PopTransferRequest"
            class Update(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::Update"
            class UpdateCompletedTransfers(HookFactory):
                _templates = ("T0", )
                _name = "AK::StreamMgr::CAkStmDeferredLinedUpBase<{T0}>::UpdateCompletedTransfers"
        class CAkStdStmDeferredLinedUp:
            class Cancel(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmDeferredLinedUp::Cancel"
            class Destroy(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmDeferredLinedUp::Destroy"
            class GetStatus(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmDeferredLinedUp::GetStatus"
            class PrepareTransfer(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmDeferredLinedUp::PrepareTransfer"
            class _CancelAllPendingTransfers(HookFactory):
                _name = "AK::StreamMgr::CAkStdStmDeferredLinedUp::_CancelAllPendingTransfers"
        class CAkClientThreadAware:
            class CAkClientThreadAware(HookFactory):
                _name = "AK::StreamMgr::CAkClientThreadAware::CAkClientThreadAware"
            class SetBlockedStatus(HookFactory):
                _name = "AK::StreamMgr::CAkClientThreadAware::SetBlockedStatus"
        class CAkIOThread:
            class CAkIOThread(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::CAkIOThread"
            class AutoSemDecr(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::AutoSemDecr"
            class AutoSemIncr(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::AutoSemIncr"
            class DecrementIOCount(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::DecrementIOCount"
            class IOSchedThread(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::IOSchedThread"
            class IncrementIOCount(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::IncrementIOCount"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::Init"
            class NotifyMemChange(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::NotifyMemChange"
            class NotifyMemIdle(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::NotifyMemIdle"
            class SignalIOCompleted(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::SignalIOCompleted"
            class StdSemDecr(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::StdSemDecr"
            class StdSemIncr(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::StdSemIncr"
            class Term(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::Term"
            class WaitForIOCompletion(HookFactory):
                _name = "AK::StreamMgr::CAkIOThread::WaitForIOCompletion"
        class CAkIOMemMgr:
            class CAkIOMemMgr(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::CAkIOMemMgr"
            class CloneTempBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::CloneTempBlock"
            class DestroyTempBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::DestroyTempBlock"
            class FlushCache(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::FlushCache"
            class GetCachedBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::GetCachedBlock"
            class GetOldestFreeBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::GetOldestFreeBlock"
            class Init(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::Init"
            class ReleaseBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::ReleaseBlock"
            class TagBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::TagBlock"
            class Term(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::Term"
            class UntagBlock(HookFactory):
                _name = "AK::StreamMgr::CAkIOMemMgr::UntagBlock"
        class CAkStmMemViewDeferred:
            class Cancel(HookFactory):
                _name = "AK::StreamMgr::CAkStmMemViewDeferred::Cancel"
        class CAkLowLevelTransferDeferred:
            class LLBatchIOCallback(HookFactory):
                _name = "AK::StreamMgr::CAkLowLevelTransferDeferred::LLBatchIOCallback"
            class LLIOCallback(HookFactory):
                _name = "AK::StreamMgr::CAkLowLevelTransferDeferred::LLIOCallback"
    class AkRuntimeEnvironmentMgr:
        class AkRuntimeEnvironmentMgr(HookFactory):
            _name = "AK::AkRuntimeEnvironmentMgr::AkRuntimeEnvironmentMgr"
        class DisableSIMDSupport(HookFactory):
            _name = "AK::AkRuntimeEnvironmentMgr::DisableSIMDSupport"
        class GetSIMDSupport(HookFactory):
            _name = "AK::AkRuntimeEnvironmentMgr::GetSIMDSupport"
        class Initialize(HookFactory):
            _name = "AK::AkRuntimeEnvironmentMgr::Initialize"
        class Instance(HookFactory):
            _name = "AK::AkRuntimeEnvironmentMgr::Instance"
    class SrcMedia:
        class Stream:
            class CommitStreamBuffer(HookFactory):
                _name = "AK::SrcMedia::Stream::CommitStreamBuffer"
            class FetchStreamBuffer(HookFactory):
                _name = "AK::SrcMedia::Stream::FetchStreamBuffer"
            class Init(HookFactory):
                _name = "AK::SrcMedia::Stream::Init"
            class ReadStreamBuffer(HookFactory):
                _name = "AK::SrcMedia::Stream::ReadStreamBuffer"
            class RelocateMedia(HookFactory):
                _name = "AK::SrcMedia::Stream::RelocateMedia"
            class Seek(HookFactory):
                _name = "AK::SrcMedia::Stream::Seek"
            class SetStreamPosition(HookFactory):
                _name = "AK::SrcMedia::Stream::SetStreamPosition"
            class StopLooping(HookFactory):
                _name = "AK::SrcMedia::Stream::StopLooping"
            class Term(HookFactory):
                _name = "AK::SrcMedia::Stream::Term"
        class AbsoluteToRelativeSourceOffset(HookFactory):
            _name = "AK::SrcMedia::AbsoluteToRelativeSourceOffset"
        class VirtualVoice:
            class AdvanceTimeSkip(HookFactory):
                _name = "AK::SrcMedia::VirtualVoice::AdvanceTimeSkip"
            class StartTimeSkip(HookFactory):
                _name = "AK::SrcMedia::VirtualVoice::StartTimeSkip"
        class Position:
            class Duration(HookFactory):
                _name = "AK::SrcMedia::Position::Duration"
            class Forward(HookFactory):
                _name = "AK::SrcMedia::Position::Forward"
            class Init(HookFactory):
                _name = "AK::SrcMedia::Position::Init"
            class PositionInformation(HookFactory):
                _name = "AK::SrcMedia::Position::PositionInformation"
        class EnvelopeAnalyzer:
            class GetEnvelope(HookFactory):
                _name = "AK::SrcMedia::EnvelopeAnalyzer::GetEnvelope"

class cGcNGuiWindow:
    class SetActive(HookFactory):
        _name = "cGcNGuiWindow::SetActive"
    class DoNode(HookFactory):
        _name = "cGcNGuiWindow::DoNode"

class cGcNGuiNodeInfo:
    class Get(HookFactory):
        _name = "cGcNGuiNodeInfo::Get"

class cGcNetworkInterpolationComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNetworkInterpolationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNetworkInterpolationComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcNetworkInterpolationComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcNetworkInterpolationComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcNetworkInterpolationComponent::Release"
    class Update(HookFactory):
        _name = "cGcNetworkInterpolationComponent::Update"
    class SnapToNewPosition(HookFactory):
        _name = "cGcNetworkInterpolationComponent::SnapToNewPosition"
    class NetSerialize(HookFactory):
        _name = "cGcNetworkInterpolationComponent::NetSerialize"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcNetworkInterpolationComponent::NetSerializeOnInit"
    class GetTypedComponent(HookFactory):
        _name = "cGcNetworkInterpolationComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcNetworkInterpolationComponent::FindFirstTypedComponent"

class ComponentInstancercGcNetworkInterpolationComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcNetworkInterpolationComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNetworkInterpolationComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNetworkInterpolationComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcNetworkInterpolationComponent::DestructInstance"

class GeneratePhysLocationMatrix(HookFactory):
    _name = "GeneratePhysLocationMatrix"

class cGcNetworkPlayerMarkerComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcNetworkPlayerMarkerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcNetworkPlayerMarkerComponent::InitData"
    class Release(HookFactory):
        _name = "cGcNetworkPlayerMarkerComponent::Release"

class ComponentInstancercGcNetworkPlayerMarkerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcNetworkPlayerMarkerComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcNetworkPlayerMarkerComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcNetworkPlayerMarkerComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcNetworkPlayerMarkerComponent::DestructInstance"

class cGcMonumentManager:
    class SpawnMonument(HookFactory):
        _name = "cGcMonumentManager::SpawnMonument"
    class UpdateRequests(HookFactory):
        _name = "cGcMonumentManager::UpdateRequests"
    class DoInteraction(HookFactory):
        _name = "cGcMonumentManager::DoInteraction"

class cGcNetworkAbandonedFreightersManager:
    class Update(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::Update"
    class SpawnAbandonedFreighter(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::SpawnAbandonedFreighter"
    class GetAbandonedFreighter(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::GetAbandonedFreighter"
    class CleanAll(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::CleanAll"
    class FindSpawn(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::FindSpawn"
    class SpawnFreighter(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::SpawnFreighter"
    class DespawnFreighter(HookFactory):
        _name = "cGcNetworkAbandonedFreightersManager::DespawnFreighter"

class cGcNetworkBaseBuildingManager:
    class Update(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::Update"
    class SelectBufferToSynchronise(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::SelectBufferToSynchronise"
    class SelectBufferFromHashMessage(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::SelectBufferFromHashMessage"
    class SelectBufferFromSyncMessage(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::SelectBufferFromSyncMessage"
    class OnPlayerLoaded(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::OnPlayerLoaded"
    class OnPlayerLeft(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::OnPlayerLeft"
    class BroadcastBaseHeaderMessage(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastBaseHeaderMessage"
    class BroadcastBaseEdit(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastBaseEdit"
    class BroadcastBaseDataChange(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastBaseDataChange"
    class BroadcastPlaceholderUpdate(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastPlaceholderUpdate"
    class BroadcastGridAmountChange(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastGridAmountChange"
    class BroadcastDifficultyChange(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::BroadcastDifficultyChange"
    class UpdateSendBaseHeaderMessages(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::UpdateSendBaseHeaderMessages"
    class SelectOrRequestBuffer(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::SelectOrRequestBuffer"
    class GetBaseLocationForEditMessage(HookFactory):
        _name = "cGcNetworkBaseBuildingManager::GetBaseLocationForEditMessage"

class cGcNetworkBaseImageManager:
    class LoadPendingTextures(HookFactory):
        _name = "cGcNetworkBaseImageManager::LoadPendingTextures"
    class FetchBaseImageData(HookFactory):
        _name = "cGcNetworkBaseImageManager::FetchBaseImageData"
    class CheckAndRenewRequest(HookFactory):
        _name = "cGcNetworkBaseImageManager::CheckAndRenewRequest"
    class HttpSendRequest(HookFactory):
        _name = "cGcNetworkBaseImageManager::HttpSendRequest"
    class HttpHandleRequestResult(HookFactory):
        _name = "cGcNetworkBaseImageManager::HttpHandleRequestResult"
    class GetBaseImageTexture(HookFactory):
        _name = "cGcNetworkBaseImageManager::GetBaseImageTexture"
    class ResetNotFoundAndFailedStates(HookFactory):
        _name = "cGcNetworkBaseImageManager::ResetNotFoundAndFailedStates"
    class sSnapshotHandle:
        class WriteEncodedImageCallback(HookFactory):
            _name = "cGcNetworkBaseImageManager::sSnapshotHandle::WriteEncodedImageCallback"
    class RequestSaveTextureToSnapshot(HookFactory):
        _name = "cGcNetworkBaseImageManager::RequestSaveTextureToSnapshot"
    class ClearSnapshot(HookFactory):
        _name = "cGcNetworkBaseImageManager::ClearSnapshot"

class cTkRegion:
    class GetResource(HookFactory):
        _name = "cTkRegion::GetResource"
    class Invalidate(HookFactory):
        _name = "cTkRegion::Invalidate"
    class Destruct(HookFactory):
        _name = "cTkRegion::Destruct"
    class Construct(HookFactory):
        _name = "cTkRegion::Construct"
    class PollToUnmapStreams(HookFactory):
        _name = "cTkRegion::PollToUnmapStreams"
    class Assign(HookFactory):
        _name = "cTkRegion::Assign"
    class TryToClear(HookFactory):
        _name = "cTkRegion::TryToClear"
    class Clear(HookFactory):
        _name = "cTkRegion::Clear"
    class RefreshKnowledge(HookFactory):
        _name = "cTkRegion::RefreshKnowledge"
    class GetStatusColour(HookFactory):
        _name = "cTkRegion::GetStatusColour"
    class CalculateCubeMatrix(HookFactory):
        _name = "cTkRegion::CalculateCubeMatrix"
    class TryGenerateVoxels(HookFactory):
        _name = "cTkRegion::TryGenerateVoxels"
    class TryPolygonise(HookFactory):
        _name = "cTkRegion::TryPolygonise"

class cGcAsyncOpsTempMonument:
    class SetCocreatorName(HookFactory):
        _name = "cGcAsyncOpsTempMonument::SetCocreatorName"
    class SetCreatorName(HookFactory):
        _name = "cGcAsyncOpsTempMonument::SetCreatorName"

class cTkScopedCriticalSectionLock:
    class cTkScopedCriticalSectionLock(HookFactory):
        _name = "cTkScopedCriticalSectionLock::cTkScopedCriticalSectionLock"

class cTkAtomicLinearMemoryPool:
    class GetBaseAddress(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::GetBaseAddress"
    class GetSize(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::GetSize"
    class GetUsage(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::GetUsage"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::GetHighWaterUsage"
    class SetMutex(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::SetMutex"
    class Create(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::Create"
    class Malloc(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::Malloc"
        _overload: overloads.cTkAtomicLinearMemoryPool.Malloc.overloads = "cTkAtomicLinearMemoryPool *, int, int, int *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAtomicLinearMemoryPool.Malloc.overloads):
            cls._overload = overload_args
            return cls
    class Reset(HookFactory):
        _name = "cTkAtomicLinearMemoryPool::Reset"

class cGcNetworkCreatureManager:
    class Construct(HookFactory):
        _name = "cGcNetworkCreatureManager::Construct"
    class Update(HookFactory):
        _name = "cGcNetworkCreatureManager::Update"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkCreatureManager::OnNetworkPlayerStateEvent"

class cGcNetworkIdManager:
    class Construct(HookFactory):
        _name = "cGcNetworkIdManager::Construct"
    class GenerateId(HookFactory):
        _name = "cGcNetworkIdManager::GenerateId"
    class SetRemoteOwner(HookFactory):
        _name = "cGcNetworkIdManager::SetRemoteOwner"
    class OnRemoteEntitySpawned(HookFactory):
        _name = "cGcNetworkIdManager::OnRemoteEntitySpawned"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkIdManager::OnNetworkPlayerStateEvent"
    class UpdateMaxEntityUsed(HookFactory):
        _name = "cGcNetworkIdManager::UpdateMaxEntityUsed"
    class OnNewClient(HookFactory):
        _name = "cGcNetworkIdManager::OnNewClient"

class cGcNetworkInteractionBufferManager:
    class Update(HookFactory):
        _name = "cGcNetworkInteractionBufferManager::Update"
    class SelectBufferToSynchronise(HookFactory):
        _name = "cGcNetworkInteractionBufferManager::SelectBufferToSynchronise"
    class SelectBufferFromHashMessage(HookFactory):
        _name = "cGcNetworkInteractionBufferManager::SelectBufferFromHashMessage"
    class SelectBufferFromSyncMessage(HookFactory):
        _name = "cGcNetworkInteractionBufferManager::SelectBufferFromSyncMessage"

class cGcNetworkInteractionManager:
    class InviteToFireteam(HookFactory):
        _name = "cGcNetworkInteractionManager::InviteToFireteam"
    class CanInvite(HookFactory):
        _name = "cGcNetworkInteractionManager::CanInvite"
    class RequestAddFriend(HookFactory):
        _name = "cGcNetworkInteractionManager::RequestAddFriend"
    class OnHover(HookFactory):
        _name = "cGcNetworkInteractionManager::OnHover"
    class GenerateDescription(HookFactory):
        _name = "cGcNetworkInteractionManager::GenerateDescription"
    class CanInteract(HookFactory):
        _name = "cGcNetworkInteractionManager::CanInteract"
    class IsInteractionDisabled(HookFactory):
        _name = "cGcNetworkInteractionManager::IsInteractionDisabled"
    class GetInteractionDisabledReason(HookFactory):
        _name = "cGcNetworkInteractionManager::GetInteractionDisabledReason"

class cGcNetworkPlayerFireteam:
    class Construct(HookFactory):
        _name = "cGcNetworkPlayerFireteam::Construct"
    class Release(HookFactory):
        _name = "cGcNetworkPlayerFireteam::Release"
    class HandleMessage(HookFactory):
        _name = "cGcNetworkPlayerFireteam::HandleMessage"
    class Update(HookFactory):
        _name = "cGcNetworkPlayerFireteam::Update"
    class GetNetworkIndex(HookFactory):
        _name = "cGcNetworkPlayerFireteam::GetNetworkIndex"

class cGcNetworkPrivilegesManager:
    class GetRemotePrivilegeForLocalPlayer(HookFactory):
        _name = "cGcNetworkPrivilegesManager::GetRemotePrivilegeForLocalPlayer"
    class SaveLocalPrivilegesToUInt64(HookFactory):
        _name = "cGcNetworkPrivilegesManager::SaveLocalPrivilegesToUInt64"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkPrivilegesManager::OnNetworkPlayerStateEvent"
    class RPCPrivilegeUpdate(HookFactory):
        _name = "cGcNetworkPrivilegesManager::RPCPrivilegeUpdate"

class cGcPlayerComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcPlayerComponent::GetTypedComponent"
    class OnAttached(HookFactory):
        _name = "cGcPlayerComponent::OnAttached"

class ComponentInstancercGcPlayerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerComponent::ConstructInstance"

class cGcNetworkReplicatedEntityManager:
    class FindMasterEntityNode(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::FindMasterEntityNode"
    class Update(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::Update"
    class SerializeEntity(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::SerializeEntity"
    class CheckInterestRange(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::CheckInterestRange"
    class IsInValidRepicationRange(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::IsInValidRepicationRange"
    class HandleNetSerialize(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::HandleNetSerialize"
    class RemoveEntitiesFromPlayer(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::RemoveEntitiesFromPlayer"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::OnNetworkPlayerStateEvent"
    class RemoveEntity(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::RemoveEntity"
    class HandleRemoveEntity(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::HandleRemoveEntity"
    class ReplicateEntityAcrossNetwork(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::ReplicateEntityAcrossNetwork"
    class DestroyReplicatedEntity(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::DestroyReplicatedEntity"
    class SendReplicatedEntityToPlayer(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::SendReplicatedEntityToPlayer"
    class SendEntityListToPlayer(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::SendEntityListToPlayer"
    class ChangeOwnership(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::ChangeOwnership"
    class RemoveEntityFromReplication(HookFactory):
        _name = "cGcNetworkReplicatedEntityManager::RemoveEntityFromReplication"

class cGcNetworkWeapon:
    class cGcNetworkWeapon(HookFactory):
        _name = "cGcNetworkWeapon::cGcNetworkWeapon"
    class Prepare(HookFactory):
        _name = "cGcNetworkWeapon::Prepare"
    class Update(HookFactory):
        _name = "cGcNetworkWeapon::Update"
    class UpdateLaserSnapshots(HookFactory):
        _name = "cGcNetworkWeapon::UpdateLaserSnapshots"
    class GetProjectileOrEffectID(HookFactory):
        _name = "cGcNetworkWeapon::GetProjectileOrEffectID"
    class GetBarrelPos(HookFactory):
        _name = "cGcNetworkWeapon::GetBarrelPos"
    class RefreshShipBarrels(HookFactory):
        _name = "cGcNetworkWeapon::RefreshShipBarrels"
    class UpdateWeaponMuzzle(HookFactory):
        _name = "cGcNetworkWeapon::UpdateWeaponMuzzle"
    class OnHolsterStatusChange(HookFactory):
        _name = "cGcNetworkWeapon::OnHolsterStatusChange"
    class OnReload(HookFactory):
        _name = "cGcNetworkWeapon::OnReload"
    class FireRemote(HookFactory):
        _name = "cGcNetworkWeapon::FireRemote"
    class RPCHolsterStatusChange(HookFactory):
        _name = "cGcNetworkWeapon::RPCHolsterStatusChange"
    class RPCPlayerWeaponMelee(HookFactory):
        _name = "cGcNetworkWeapon::RPCPlayerWeaponMelee"
    class RPCPlayerWeaponReload(HookFactory):
        _name = "cGcNetworkWeapon::RPCPlayerWeaponReload"

class cGcNetworkMaintenanceBufferEditMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkMaintenanceBufferEditMessage::SerializeOrDeserialize"

class sGcNetworkReplicatedPetEntityData:
    class sGcNetworkReplicatedPetEntityData(HookFactory):
        _name = "sGcNetworkReplicatedPetEntityData::sGcNetworkReplicatedPetEntityData"

class cTkSpinMutexScoped:
    class cTkSpinMutexScoped(HookFactory):
        _name = "cTkSpinMutexScoped::cTkSpinMutexScoped"

class NetReplicatedCustomisationData:
    class NetReplicatedCustomisationData(HookFactory):
        _name = "NetReplicatedCustomisationData::NetReplicatedCustomisationData"

class sGcNetworkReplicatedEntitiesWelcomeMessage:
    class sGcNetworkReplicatedEntitiesWelcomeMessage(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesWelcomeMessage::sGcNetworkReplicatedEntitiesWelcomeMessage"
    class AddEntity(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesWelcomeMessage::AddEntity"
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesWelcomeMessage::SerializeOrDeserialize"
    class SerializeEntity(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesWelcomeMessage::SerializeEntity"

class cTkAudioManager:
    class GetInstance(HookFactory):
        _name = "cTkAudioManager::GetInstance"
    class AudioStreamExecuteCallback(HookFactory):
        _name = "cTkAudioManager::AudioStreamExecuteCallback"
    class AudioStreamFormatCallback(HookFactory):
        _name = "cTkAudioManager::AudioStreamFormatCallback"
    class CancelCallback(HookFactory):
        _name = "cTkAudioManager::CancelCallback"
    class Construct(HookFactory):
        _name = "cTkAudioManager::Construct"
    class Destruct(HookFactory):
        _name = "cTkAudioManager::Destruct"
    class FindAudioStream(HookFactory):
        _name = "cTkAudioManager::FindAudioStream"
    class GetLanguageFolder(HookFactory):
        _name = "cTkAudioManager::GetLanguageFolder"
    class LoadAudioBank(HookFactory):
        _name = "cTkAudioManager::LoadAudioBank"
    class Play(HookFactory):
        _name = "cTkAudioManager::Play"
    class PollToFinishLoadingAudioBanks(HookFactory):
        _name = "cTkAudioManager::PollToFinishLoadingAudioBanks"
    class PreDestruct(HookFactory):
        _name = "cTkAudioManager::PreDestruct"
    class RegisterNamedAudioObject(HookFactory):
        _name = "cTkAudioManager::RegisterNamedAudioObject"
    class ReleaseAsyncBankStreamingMemory(HookFactory):
        _name = "cTkAudioManager::ReleaseAsyncBankStreamingMemory"
    class SetAcitveListeners(HookFactory):
        _name = "cTkAudioManager::SetAcitveListeners"
    class SetAttenuationFactor(HookFactory):
        _name = "cTkAudioManager::SetAttenuationFactor"
    class SetDistanceRTPC(HookFactory):
        _name = "cTkAudioManager::SetDistanceRTPC"
    class SetLanguageFolder(HookFactory):
        _name = "cTkAudioManager::SetLanguageFolder"
    class SetMultiplePositions(HookFactory):
        _name = "cTkAudioManager::SetMultiplePositions"
    class SetObjectObstructionAndOcclusion(HookFactory):
        _name = "cTkAudioManager::SetObjectObstructionAndOcclusion"
    class SetPosition(HookFactory):
        _name = "cTkAudioManager::SetPosition"
    class Stop(HookFactory):
        _name = "cTkAudioManager::Stop"
        _overload: overloads.cTkAudioManager.Stop.overloads = "cTkAudioManager *, TkAudioObject"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAudioManager.Stop.overloads):
            cls._overload = overload_args
            return cls
    class TkAkBankLoadCallbackFunc(HookFactory):
        _name = "cTkAudioManager::TkAkBankLoadCallbackFunc"
    class UnloadAudioBank(HookFactory):
        _name = "cTkAudioManager::UnloadAudioBank"
    class UnregisterAudioObject(HookFactory):
        _name = "cTkAudioManager::UnregisterAudioObject"
    class Update(HookFactory):
        _name = "cTkAudioManager::Update"
    class UpdateAuxSendWithFalloff(HookFactory):
        _name = "cTkAudioManager::UpdateAuxSendWithFalloff"

class cGcNetworkRpcManager:
    class RegisterRpc(HookFactory):
        _name = "cGcNetworkRpcManager::RegisterRpc"
    class UnregisterRpc(HookFactory):
        _name = "cGcNetworkRpcManager::UnregisterRpc"

class cGcNetworkSynchronisedBuffer:
    class GetHashValue(HookFactory):
        _name = "cGcNetworkSynchronisedBuffer::GetHashValue"
    class GetHashTimestamp(HookFactory):
        _name = "cGcNetworkSynchronisedBuffer::GetHashTimestamp"
    class AddHashValues(HookFactory):
        _name = "cGcNetworkSynchronisedBuffer::AddHashValues"
    class AddSyncValues(HookFactory):
        _name = "cGcNetworkSynchronisedBuffer::AddSyncValues"
    class HasNetworkOwner(HookFactory):
        _name = "cGcNetworkSynchronisedBuffer::HasNetworkOwner"

class cGcNetworkSynchronizedClock:
    class Update(HookFactory):
        _name = "cGcNetworkSynchronizedClock::Update"
    class OnMultiplayerSessionStarting(HookFactory):
        _name = "cGcNetworkSynchronizedClock::OnMultiplayerSessionStarting"
    class HandleNetSerialize(HookFactory):
        _name = "cGcNetworkSynchronizedClock::HandleNetSerialize"
    class OnHandleFullRoundTimeUpdate(HookFactory):
        _name = "cGcNetworkSynchronizedClock::OnHandleFullRoundTimeUpdate"
    class RenderImGui(HookFactory):
        _name = "cGcNetworkSynchronizedClock::RenderImGui"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcNetworkSynchronizedClock::RenderImGuiCallback"

class cGcNetworkTerrainEditsManager:
    class Update(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::Update"
    class OnPlayerLeft(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::OnPlayerLeft"
    class BroadcastEdits(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::BroadcastEdits"
    class UpdateSendEditMessages(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::UpdateSendEditMessages"
    class UpdateSendNewBlockMessages(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::UpdateSendNewBlockMessages"
    class SelectBufferToSynchronise(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::SelectBufferToSynchronise"
    class SelectBufferFromHashMessage(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::SelectBufferFromHashMessage"
    class SelectBufferFromSyncMessage(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::SelectBufferFromSyncMessage"
    class OnHashMessageSent(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::OnHashMessageSent"
    class OnHashMessageReceived(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::OnHashMessageReceived"
    class OnSyncMessageReceived(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::OnSyncMessageReceived"
    class CheckPlayerCanReceiveEdits(HookFactory):
        _name = "cGcNetworkTerrainEditsManager::CheckPlayerCanReceiveEdits"

class cGcPlayerWeaponComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcPlayerWeaponComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcPlayerWeaponComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcPlayerWeaponComponent::Prepare"
    class FindAndSetOwningNetPlayerAttachment(HookFactory):
        _name = "cGcPlayerWeaponComponent::FindAndSetOwningNetPlayerAttachment"
    class GatherHoldingLocators(HookFactory):
        _name = "cGcPlayerWeaponComponent::GatherHoldingLocators"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcPlayerWeaponComponent::UpdatePostPhysics"

class cGcTextChatInput:
    class Construct(HookFactory):
        _name = "cGcTextChatInput::Construct"
    class Update(HookFactory):
        _name = "cGcTextChatInput::Update"
    class GetCommandFromName(HookFactory):
        _name = "cGcTextChatInput::GetCommandFromName"
    class AutoCompleteNextPlayer(HookFactory):
        _name = "cGcTextChatInput::AutoCompleteNextPlayer"
    class AutoComplete(HookFactory):
        _name = "cGcTextChatInput::AutoComplete"
    class TokeniseInput(HookFactory):
        _name = "cGcTextChatInput::TokeniseInput"
    class ParseTextForCommands(HookFactory):
        _name = "cGcTextChatInput::ParseTextForCommands"

class cGcTextChatManager:
    class Construct(HookFactory):
        _name = "cGcTextChatManager::Construct"
    class Say(HookFactory):
        _name = "cGcTextChatManager::Say"
        _overload: overloads.cGcTextChatManager.Say.overloads = "cGcTextChatManager *, const cTkFixedString<1023,char> *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cGcTextChatManager.Say.overloads):
            cls._overload = overload_args
            return cls
    class PostLocalMessage(HookFactory):
        _name = "cGcTextChatManager::PostLocalMessage"
    class AddPendingMessage(HookFactory):
        _name = "cGcTextChatManager::AddPendingMessage"
    class AddStatusMessageCustomText(HookFactory):
        _name = "cGcTextChatManager::AddStatusMessageCustomText"
    class GetRandomLocId(HookFactory):
        _name = "cGcTextChatManager::GetRandomLocId"
    class GeneratePetChatText(HookFactory):
        _name = "cGcTextChatManager::GeneratePetChatText"
    class GenerateFriendlyDroneChatText(HookFactory):
        _name = "cGcTextChatManager::GenerateFriendlyDroneChatText"
    class AddPetChat(HookFactory):
        _name = "cGcTextChatManager::AddPetChat"
    class RenderImGuiCallback(HookFactory):
        _name = "cGcTextChatManager::RenderImGuiCallback"

class cGcVoiceChat:
    class GetVoiceState(HookFactory):
        _name = "cGcVoiceChat::GetVoiceState"
    class MutePlayer(HookFactory):
        _name = "cGcVoiceChat::MutePlayer"
    class IsMuted(HookFactory):
        _name = "cGcVoiceChat::IsMuted"
    class CheckStartStop(HookFactory):
        _name = "cGcVoiceChat::CheckStartStop"
    class OnMultiplayerSessionStarting(HookFactory):
        _name = "cGcVoiceChat::OnMultiplayerSessionStarting"
    class OnMultiplayerSessionFinished(HookFactory):
        _name = "cGcVoiceChat::OnMultiplayerSessionFinished"
    class OnNetworkPlayerStateEvent(HookFactory):
        _name = "cGcVoiceChat::OnNetworkPlayerStateEvent"

class TextChatMessageBuffer:
    class AddMessage(HookFactory):
        _name = "TextChatMessageBuffer::AddMessage"

class cGcNetworkBaseEditMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkBaseEditMessage::SerializeOrDeserialize"

class cGcNetworkBaseHashMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkBaseHashMessage::SerializeOrDeserialize"

class cGcNetworkBaseHeaderMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkBaseHeaderMessage::SerializeOrDeserialize"

class cGcNetworkBaseSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkBaseSyncMessage::SerializeOrDeserialize"

class sGcNetworkClientTimeSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkClientTimeSyncMessage::SerializeOrDeserialize"

class cGcNetworkComponentMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkComponentMessage::SerializeOrDeserialize"

class cGcNetworkFleetExpeditionsSyncMessage:
    class GatherData(HookFactory):
        _name = "cGcNetworkFleetExpeditionsSyncMessage::GatherData"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFleetExpeditionsSyncMessage::SerializeOrDeserialize"
    class SerializeOrDeserializeExpedition(HookFactory):
        _name = "cGcNetworkFleetExpeditionsSyncMessage::SerializeOrDeserializeExpedition"

class cGcNetworkFleetFrigateNamesSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFleetFrigateNamesSyncMessage::SerializeOrDeserialize"

class cGcNetworkFleetFrigatesSyncMessage:
    class GatherData(HookFactory):
        _name = "cGcNetworkFleetFrigatesSyncMessage::GatherData"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFleetFrigatesSyncMessage::SerializeOrDeserialize"
    class SerializeOrDeserializeFrigate(HookFactory):
        _name = "cGcNetworkFleetFrigatesSyncMessage::SerializeOrDeserializeFrigate"

class cGcNetworkFreighterOwnershipSyncMessage:
    class cGcNetworkFreighterOwnershipSyncMessage(HookFactory):
        _name = "cGcNetworkFreighterOwnershipSyncMessage::cGcNetworkFreighterOwnershipSyncMessage"
    class GatherData(HookFactory):
        _name = "cGcNetworkFreighterOwnershipSyncMessage::GatherData"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFreighterOwnershipSyncMessage::SerializeOrDeserialize"

class cGcNetworkFullSimHandsUpdateMessage:
    class SetPlayerData(HookFactory):
        _name = "cGcNetworkFullSimHandsUpdateMessage::SetPlayerData"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFullSimHandsUpdateMessage::SerializeOrDeserialize"

class cGcNetworkFullSimUpdateMessage:
    class SetPlayerData(HookFactory):
        _name = "cGcNetworkFullSimUpdateMessage::SetPlayerData"
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkFullSimUpdateMessage::SerializeOrDeserialize"

class cGcNetworkInteractionBufferHashMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkInteractionBufferHashMessage::SerializeOrDeserialize"

class cGcNetworkInteractionBufferEditMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkInteractionBufferEditMessage::SerializeOrDeserialize"

class cGcNetworkLockMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkLockMessage::SerializeOrDeserialize"

class cGcNetworkMonumentSpawnedMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkMonumentSpawnedMessage::SerializeOrDeserialize"

class sGcNetworkOrbUpdateMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkOrbUpdateMessage::SerializeOrDeserialize"

class cGcNetworkPlayerExperienceSpawnMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkPlayerExperienceSpawnMessage::SerializeOrDeserialize"

class sGcNetworkPlayerReplicatedVariablesMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkPlayerReplicatedVariablesMessage::SerializeOrDeserialize"

class sGcNetworkPlayerStateMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkPlayerStateMessage::SerializeOrDeserialize"

class sGcNetworkReplicatedCustomisedEntitiesWelcomeMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedCustomisedEntitiesWelcomeMessage::SerializeOrDeserialize"
    class SerializeCustomisedEntity(HookFactory):
        _name = "sGcNetworkReplicatedCustomisedEntitiesWelcomeMessage::SerializeCustomisedEntity"

class sGcNetworkReplicatedEntitiesReplicatedVariablesMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesReplicatedVariablesMessage::SerializeOrDeserialize"

class sGcNetworkReplicatedEntitiesUpdateMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedEntitiesUpdateMessage::SerializeOrDeserialize"

class sGcNetworkReplicatedEntityDestroyedMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedEntityDestroyedMessage::SerializeOrDeserialize"

class sGcNetworkReplicatedPetEntitiesWelcomeMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkReplicatedPetEntitiesWelcomeMessage::SerializeOrDeserialize"

class cGcNetworkRpcMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkRpcMessage::SerializeOrDeserialize"

class cGcNetworkRpcResponseMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkRpcResponseMessage::SerializeOrDeserialize"

class sGcNetworkServerTimeSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "sGcNetworkServerTimeSyncMessage::SerializeOrDeserialize"

class cGcNetworkSynchronisedStateHashMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkSynchronisedStateHashMessage::SerializeOrDeserialize"

class cGcNetworkSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkSyncMessage::SerializeOrDeserialize"

class cGcNetworkHashMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkHashMessage::SerializeOrDeserialize"

class cGcNetworkTerrainEditMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkTerrainEditMessage::SerializeOrDeserialize"

class cGcNetworkTerrainHashMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkTerrainHashMessage::SerializeOrDeserialize"

class cGcNetworkTerrainSyncMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkTerrainSyncMessage::SerializeOrDeserialize"

class cGcNetworkVoiceUpdateMessage:
    class SerializeOrDeserialize(HookFactory):
        _name = "cGcNetworkVoiceUpdateMessage::SerializeOrDeserialize"

class cGcConnectionPlayfab:
    class SendMessageA(HookFactory):
        _name = "cGcConnectionPlayfab::SendMessageA"

class cGcLobbyId:
    class cGcLobbyId(HookFactory):
        _name = "cGcLobbyId::cGcLobbyId"

class PartyGetWindowsDllExports(HookFactory):
    _name = "PartyGetWindowsDllExports"

class Party:
    class PartyNetwork:
        class LeaveNetwork(HookFactory):
            _name = "Party::PartyNetwork::LeaveNetwork"
        class SetCustomContext(HookFactory):
            _name = "Party::PartyNetwork::SetCustomContext"
    class PartyLocalChatControl:
        class SetPermissions(HookFactory):
            _name = "Party::PartyLocalChatControl::SetPermissions"
        class SetAudioInputMuted(HookFactory):
            _name = "Party::PartyLocalChatControl::SetAudioInputMuted"
    class PartyManager:
        class GetSingleton(HookFactory):
            _name = "Party::PartyManager::GetSingleton"
        class Initialize(HookFactory):
            _name = "Party::PartyManager::Initialize"

class cGcVoiceChatPlayfab:
    class OnStartVoice(HookFactory):
        _name = "cGcVoiceChatPlayfab::OnStartVoice"
    class OnStopVoice(HookFactory):
        _name = "cGcVoiceChatPlayfab::OnStopVoice"
    class OnPlayerJoined(HookFactory):
        _name = "cGcVoiceChatPlayfab::OnPlayerJoined"
    class OnPlayerLeaving(HookFactory):
        _name = "cGcVoiceChatPlayfab::OnPlayerLeaving"
    class OnMute(HookFactory):
        _name = "cGcVoiceChatPlayfab::OnMute"
    class IsTalking(HookFactory):
        _name = "cGcVoiceChatPlayfab::IsTalking"
    class EnableVoicePermissions(HookFactory):
        _name = "cGcVoiceChatPlayfab::EnableVoicePermissions"

class cGcActivitiesTracker:
    class OnGameImported(HookFactory):
        _name = "cGcActivitiesTracker::OnGameImported"

class cGcRichPresence:
    class Prepare(HookFactory):
        _name = "cGcRichPresence::Prepare"
    class Release(HookFactory):
        _name = "cGcRichPresence::Release"
    class NotifyPlayerOutside(HookFactory):
        _name = "cGcRichPresence::NotifyPlayerOutside"
    class NotifyGameMode(HookFactory):
        _name = "cGcRichPresence::NotifyGameMode"
    class StatChanged(HookFactory):
        _name = "cGcRichPresence::StatChanged"
        _overload: overloads.cGcRichPresence.StatChanged.overloads = "cGcRichPresence *, const TkID<128> *, __int64"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRichPresence.StatChanged.overloads):
            cls._overload = overload_args
            return cls

class cGcCostManager:
    class CanAfford(HookFactory):
        _name = "cGcCostManager::CanAfford"
    class CostAsString(HookFactory):
        _name = "cGcCostManager::CostAsString"
    class DisplayCost(HookFactory):
        _name = "cGcCostManager::DisplayCost"
    class GetCostHiddenInfo(HookFactory):
        _name = "cGcCostManager::GetCostHiddenInfo"
    class ApplyCost(HookFactory):
        _name = "cGcCostManager::ApplyCost"
    class CalcCurrentPirateTribute(HookFactory):
        _name = "cGcCostManager::CalcCurrentPirateTribute"
    class GetMoneyListCost(HookFactory):
        _name = "cGcCostManager::GetMoneyListCost"
    class IsCostCurrency(HookFactory):
        _name = "cGcCostManager::IsCostCurrency"
    class IsCostProdOrSubstance(HookFactory):
        _name = "cGcCostManager::IsCostProdOrSubstance"
    class GetItemFromIndexedList(HookFactory):
        _name = "cGcCostManager::GetItemFromIndexedList"
    class GetProductFromCost(HookFactory):
        _name = "cGcCostManager::GetProductFromCost"
    class GetSettlementBuildingCostInfoAndStringForBuilding(HookFactory):
        _name = "cGcCostManager::GetSettlementBuildingCostInfoAndStringForBuilding"

class cGcIntroFeed:
    class Load(HookFactory):
        _name = "cGcIntroFeed::Load"
    class Update(HookFactory):
        _name = "cGcIntroFeed::Update"

class TrigramString:
    class TrigramString(HookFactory):
        _name = "TrigramString::TrigramString"

class cGcMarkovAssembler:
    class Assemble(HookFactory):
        _name = "cGcMarkovAssembler::Assemble"

class cGcPhonotactics:
    class CheckConsonantPacking(HookFactory):
        _name = "cGcPhonotactics::CheckConsonantPacking"
    class VulgaritySweep(HookFactory):
        _name = "cGcPhonotactics::VulgaritySweep"
    class MakePetNameCuter(HookFactory):
        _name = "cGcPhonotactics::MakePetNameCuter"

class ScanAndDiffuseVulgarityAt(HookFactory):
    _name = "ScanAndDiffuseVulgarityAt"

class cGcNameGenerator:
    class Construct(HookFactory):
        _name = "cGcNameGenerator::Construct"
    class InitWordData(HookFactory):
        _name = "cGcNameGenerator::InitWordData"
    class GenerateGalacticRegionName(HookFactory):
        _name = "cGcNameGenerator::GenerateGalacticRegionName"
    class GenerateSolarSystemName(HookFactory):
        _name = "cGcNameGenerator::GenerateSolarSystemName"
    class GenerateSpaceStationName(HookFactory):
        _name = "cGcNameGenerator::GenerateSpaceStationName"
    class GeneratePlanetName(HookFactory):
        _name = "cGcNameGenerator::GeneratePlanetName"
    class GenerateBeaconName(HookFactory):
        _name = "cGcNameGenerator::GenerateBeaconName"
    class GenerateAbandonedFreighterName(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterName"
    class GenerateStructureName(HookFactory):
        _name = "cGcNameGenerator::GenerateStructureName"
    class GenerateLibraryName(HookFactory):
        _name = "cGcNameGenerator::GenerateLibraryName"
    class GenerateNPCName(HookFactory):
        _name = "cGcNameGenerator::GenerateNPCName"
    class GenerateNPCNameWithTitle(HookFactory):
        _name = "cGcNameGenerator::GenerateNPCNameWithTitle"
    class GenerateSettlementNPCName(HookFactory):
        _name = "cGcNameGenerator::GenerateSettlementNPCName"
    class GenerateShipPilotName(HookFactory):
        _name = "cGcNameGenerator::GenerateShipPilotName"
    class GeneratePirateFaction(HookFactory):
        _name = "cGcNameGenerator::GeneratePirateFaction"
    class GeneratePirateName(HookFactory):
        _name = "cGcNameGenerator::GeneratePirateName"
        _overload: overloads.cGcNameGenerator.GeneratePirateName.overloads = "cGcNameGenerator *, const unsigned __int64, cTkFixedString<127,char> *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNameGenerator.GeneratePirateName.overloads):
            cls._overload = overload_args
            return cls
    class GeneratePetName(HookFactory):
        _name = "cGcNameGenerator::GeneratePetName"
    class AddPetNameSuffix(HookFactory):
        _name = "cGcNameGenerator::AddPetNameSuffix"
    class GenerateWeirdShipName(HookFactory):
        _name = "cGcNameGenerator::GenerateWeirdShipName"
    class GenerateShipName(HookFactory):
        _name = "cGcNameGenerator::GenerateShipName"
    class GenerateFreighterName(HookFactory):
        _name = "cGcNameGenerator::GenerateFreighterName"
    class GenerateFrigateName(HookFactory):
        _name = "cGcNameGenerator::GenerateFrigateName"
    class GenerateWeaponName(HookFactory):
        _name = "cGcNameGenerator::GenerateWeaponName"
    class GenerateAbandonedFreighterCaptainName(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCaptainName"
    class GenerateAbandonedFreighterOfficerName(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterOfficerName"
    class GetSeededPasswordOfficerIndex(HookFactory):
        _name = "cGcNameGenerator::GetSeededPasswordOfficerIndex"
    class GenerateAbandonedFreighterPassengerName(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterPassengerName"
    class GenerateArtifactName(HookFactory):
        _name = "cGcNameGenerator::GenerateArtifactName"
    class GenerateExpeditionName(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionName"
    class GenerateExpeditionNameGeneral(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionNameGeneral"
    class GenerateExpeditionNameCombat(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionNameCombat"
    class GenerateExpeditionNameExplore(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionNameExplore"
    class GenerateExpeditionNameMining(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionNameMining"
    class GenerateExpeditionNameTrade(HookFactory):
        _name = "cGcNameGenerator::GenerateExpeditionNameTrade"
    class GenerateCreatureName(HookFactory):
        _name = "cGcNameGenerator::GenerateCreatureName"
    class GenerateFloraName(HookFactory):
        _name = "cGcNameGenerator::GenerateFloraName"
    class GenerateMineralName(HookFactory):
        _name = "cGcNameGenerator::GenerateMineralName"
    class GenerateMissionName(HookFactory):
        _name = "cGcNameGenerator::GenerateMissionName"
    class GeneratePetProcNoise(HookFactory):
        _name = "cGcNameGenerator::GeneratePetProcNoise"
    class GeneratePetFiendProcSentence(HookFactory):
        _name = "cGcNameGenerator::GeneratePetFiendProcSentence"
    class GenerateFriendlyDroneBeep(HookFactory):
        _name = "cGcNameGenerator::GenerateFriendlyDroneBeep"
    class AppendAutoLocalisedAlphanumeric(HookFactory):
        _name = "cGcNameGenerator::AppendAutoLocalisedAlphanumeric"
    class GetAbandonedFreighterNameFromUA(HookFactory):
        _name = "cGcNameGenerator::GetAbandonedFreighterNameFromUA"
    class GenerateAbandonedFreighterLogSnippet(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterLogSnippet"
    class GenerateAbandonedFreighterDoorText(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterDoorText"
    class GenerateAbandonedFreighterCrewManifestIntro(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCrewManifestIntro"
    class GenerateAbandonedFreighterCrewManifestScan(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCrewManifestScan"
    class GenerateAbandonedFreighterCrewManifest(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCrewManifest"
    class GenerateAbandonedFreighterCargoList(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCargoList"
    class GenerateAbandonedFreighterLogFragment(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterLogFragment"
    class GenerateAbandonedFreighterCrewApprasial(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCrewApprasial"
    class GenerateAbandonedFreighterSecurityLog(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterSecurityLog"
    class GenerateAbandonedFreighterCaptainLogLogin(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCaptainLogLogin"
    class GenerateAbandonedFreighterCaptainLog(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCaptainLog"
    class GenerateAbandonedFreighterCaptainLogIndex(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterCaptainLogIndex"
    class GenerateAbandonedFreighterShipAIOutput(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterShipAIOutput"
    class GenerateAbandonedFreighterResearchNote(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterResearchNote"
    class GenerateAbandonedFreighterPersonalItemList(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterPersonalItemList"
    class GenerateAbandonedFreighterMedicalReport(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterMedicalReport"
    class GenerateAbandonedFreighterDisciplineRecord(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterDisciplineRecord"
    class GenerateAbandonedFreighterLocationReport(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterLocationReport"
    class GenerateAbandonedFreighterPersonalRecording(HookFactory):
        _name = "cGcNameGenerator::GenerateAbandonedFreighterPersonalRecording"
    class GenerateFreighterRoomName(HookFactory):
        _name = "cGcNameGenerator::GenerateFreighterRoomName"
    class GenerateSettlementName(HookFactory):
        _name = "cGcNameGenerator::GenerateSettlementName"
    class GenerateSettlementStructureArchetypeNameForBuildingClass(HookFactory):
        _name = "cGcNameGenerator::GenerateSettlementStructureArchetypeNameForBuildingClass"
    class GenerateSettlementStructureName(HookFactory):
        _name = "cGcNameGenerator::GenerateSettlementStructureName"
    class GenerateSettlementPerkName(HookFactory):
        _name = "cGcNameGenerator::GenerateSettlementPerkName"

class cTkStringAssembler:
    class Appendf(HookFactory):
        _name = "cTkStringAssembler::Appendf"
    class cTkStringAssembler(HookFactory):
        _name = "cTkStringAssembler::cTkStringAssembler"
        _overload: overloads.cTkStringAssembler.cTkStringAssembler.overloads = "cTkStringAssembler *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkStringAssembler.cTkStringAssembler.overloads):
            cls._overload = overload_args
            return cls
    class AppendCharBufJsonEncoded(HookFactory):
        _name = "cTkStringAssembler::AppendCharBufJsonEncoded"
    class EnsureExtraCapacity(HookFactory):
        _name = "cTkStringAssembler::EnsureExtraCapacity"

class cGcDebugTextLine:
    class Format(HookFactory):
        _name = "cGcDebugTextLine::Format"

class GcAppendConvertedToJapanese(HookFactory):
    _name = "GcAppendConvertedToJapanese"

class GcAppendConvertedToJapaneseAlphanumeric(HookFactory):
    _name = "GcAppendConvertedToJapaneseAlphanumeric"

class GcConvertFullWidthToHalfWidth(HookFactory):
    _name = "GcConvertFullWidthToHalfWidth"

class CopyToNameStringUtf8LengthLimited(HookFactory):
    _name = "CopyToNameStringUtf8LengthLimited"

class cGcProceduralTechnologyData:
    class cGcProceduralTechnologyData(HookFactory):
        _name = "cGcProceduralTechnologyData::cGcProceduralTechnologyData"
        _overload: overloads.cGcProceduralTechnologyData.cGcProceduralTechnologyData.overloads = "cGcProceduralTechnologyData *, cGcProceduralTechnologyData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcProceduralTechnologyData.cGcProceduralTechnologyData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralTechnologyData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralTechnologyData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcProceduralTechnologyData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcProceduralTechnologyData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralTechnologyData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProceduralTechnologyData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProceduralTechnologyData::WriteToXMLNodeExplicit"

class cpToUTF8(HookFactory):
    _name = "cpToUTF8"

class cGcProceduralProductData:
    class cGcProceduralProductData(HookFactory):
        _name = "cGcProceduralProductData::cGcProceduralProductData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralProductData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralProductData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcProceduralProductData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcProceduralProductData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralProductData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralProductData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProceduralProductData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralProductData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProceduralProductData::WriteToXMLNodeExplicit"

class cGcLocalPlayerCharacterInterface:
    class WeaponIsLarge(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::WeaponIsLarge"
    class IsHitReacting(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsHitReacting"
    class GetHitReactDir(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetHitReactDir"
    class IsOnGround(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsOnGround"
    class IsInSpace(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsInSpace"
    class ShouldUseAbandonedFreighterWalk(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::ShouldUseAbandonedFreighterWalk"
    class GetMatrix(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetMatrix"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetPhysicsMatrix"
    class GetFootPosition(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetFootPosition"
    class GetVelocity(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetVelocity"
    class GetAimPosition(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetAimPosition"
    class GetCurrentMoveForce(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetCurrentMoveForce"
    class GetFacingDir(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetFacingDir"
    class GetWorldUp(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetWorldUp"
    class GetHeight(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetHeight"
    class GetRace(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetRace"
    class IsDying(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsDying"
    class GetDeathReason(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetDeathReason"
    class GetEnergy(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetEnergy"
    class GetHazard(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetHazard"
    class IsJetpacking(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsJetpacking"
    class IsJetpackBoosted(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsJetpackBoosted"
    class IsSliding(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsSliding"
    class GetRidingAttachment(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetRidingAttachment"
    class GetHandPose(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetHandPose"
    class IsMeleeBoostActive(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsMeleeBoostActive"
    class GetDominantHand(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetDominantHand"
    class IsMeleeActive(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsMeleeActive"
    class IsPointing(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsPointing"
    class IsInteracting(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsInteracting"
    class IsRocketBootsActive(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsRocketBootsActive"
    class IsWaitingForRocketBootsActivation(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsWaitingForRocketBootsActivation"
    class GetTimeLastUsedJetpack(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetTimeLastUsedJetpack"
    class GetLocalTeleportDestination(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetLocalTeleportDestination"
    class IsRunning(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsRunning"
    class IsUnderwater(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsUnderwater"
    class HasMoveForce(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::HasMoveForce"
    class HasFired(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::HasFired"
    class IsPilotingShip(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsPilotingShip"
    class IsInVehicle(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsInVehicle"
    class GetSlopeState(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetSlopeState"
    class IsHandTracking(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::IsHandTracking"
    class SetToPosition(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::SetToPosition"
        _overload: overloads.cGcLocalPlayerCharacterInterface.SetToPosition.overloads = "cGcLocalPlayerCharacterInterface *, const cTkVector3 *, const cTkVector3 *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcLocalPlayerCharacterInterface.SetToPosition.overloads):
            cls._overload = overload_args
            return cls
    class EnableCharacterPhysics(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::EnableCharacterPhysics"
    class EnableCharacterCollision(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::EnableCharacterCollision"
    class DisableCharacterCollision(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::DisableCharacterCollision"
    class AttachControlMode(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::AttachControlMode"
    class EnableCharacterGravity(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::EnableCharacterGravity"
    class DisableCharacterGravity(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::DisableCharacterGravity"
    class GetRigidBody(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetRigidBody"
    class GetCharacterSit(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetCharacterSit"
    class TakeDamage(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::TakeDamage"
    class SetPitch(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::SetPitch"
    class SetRoll(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::SetRoll"
    class CanLookAt(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::CanLookAt"
    class AllowHeadMovement(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::AllowHeadMovement"
    class GetLookAtPoint(HookFactory):
        _name = "cGcLocalPlayerCharacterInterface::GetLookAtPoint"

class hknpDecoratorBroadPhase:
    class addBodies(HookFactory):
        _name = "hknpDecoratorBroadPhase::addBodies"
    class buildTaskGraph(HookFactory):
        _name = "hknpDecoratorBroadPhase::buildTaskGraph"
    class copyFrom(HookFactory):
        _name = "hknpDecoratorBroadPhase::copyFrom"
    class findAllPairs(HookFactory):
        _name = "hknpDecoratorBroadPhase::findAllPairs"
    class findNewPairs(HookFactory):
        _name = "hknpDecoratorBroadPhase::findNewPairs"
    class getConfig(HookFactory):
        _name = "hknpDecoratorBroadPhase::getConfig"
    class getExtents(HookFactory):
        _name = "hknpDecoratorBroadPhase::getExtents"
    class markBodiesDirty(HookFactory):
        _name = "hknpDecoratorBroadPhase::markBodiesDirty"
    class removeBodies(HookFactory):
        _name = "hknpDecoratorBroadPhase::removeBodies"
    class setBodyBuffer(HookFactory):
        _name = "hknpDecoratorBroadPhase::setBodyBuffer"
    class translate(HookFactory):
        _name = "hknpDecoratorBroadPhase::translate"
    class update(HookFactory):
        _name = "hknpDecoratorBroadPhase::update"
    class updateBodyAabbs(HookFactory):
        _name = "hknpDecoratorBroadPhase::updateBodyAabbs"

class cGcNetworkPlayerCharacterInterface:
    class GetEnergy(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetEnergy"
    class GetHazard(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetHazard"
    class IsJetpacking(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsJetpacking"
    class IsJetpackBoosted(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsJetpackBoosted"
    class IsSliding(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsSliding"
    class IsUnderwater(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsUnderwater"
    class IsHandTracking(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsHandTracking"
    class GetMatrix(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetMatrix"
    class GetPhysicsMatrix(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetPhysicsMatrix"
    class GetVelocity(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetVelocity"
    class GetFacingDir(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetFacingDir"
    class GetWorldUp(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetWorldUp"
    class GetRace(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetRace"
    class GetCurrentMoveForce(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetCurrentMoveForce"
    class GetDominantHand(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetDominantHand"
    class GetLookAtPoint(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::GetLookAtPoint"
    class IsReady(HookFactory):
        _name = "cGcNetworkPlayerCharacterInterface::IsReady"

class cGcNPCBehaviourFlyAway:
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourFlyAway::OnInit"
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourFlyAway::GetName"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourFlyAway::Cancel"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourFlyAway::Run"
    class Subscribe(HookFactory):
        _name = "cGcNPCBehaviourFlyAway::Subscribe"

class cGcNPCBehaviourIlde:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourIlde::GetName"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourIlde::Run"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourIlde::Cancel"

class cGcNPCBehaviourReturnToShip:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourReturnToShip::GetName"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourReturnToShip::Run"

class cGcNPCBehaviourChooseInteraction:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::GetName"
    class cGcUpdateQueue:
        class Update(HookFactory):
            _name = "cGcNPCBehaviourChooseInteraction::cGcUpdateQueue::Update"
        class GetQueueEntry(HookFactory):
            _name = "cGcNPCBehaviourChooseInteraction::cGcUpdateQueue::GetQueueEntry"
    class cGcNPCBehaviourChooseInteraction(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::cGcNPCBehaviourChooseInteraction"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::OnInit"
    class OnStop(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::OnStop"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::Run"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::Cancel"
    class GatherValidDestinations(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::GatherValidDestinations"
    class WeightDestinations(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::WeightDestinations"
    class SelectDestination(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::SelectDestination"
    class GeneratePath(HookFactory):
        _name = "cGcNPCBehaviourChooseInteraction::GeneratePath"

class cGcNPCBehaviourMoveToDestination:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourMoveToDestination::GetName"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourMoveToDestination::OnInit"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourMoveToDestination::Run"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourMoveToDestination::Cancel"

class cGcNPCBehaviourPerformInteraction:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::GetName"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::OnInit"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::Run"
    class ChooseNewState(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::ChooseNewState"
    class UpdateConversing(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::UpdateConversing"
    class PlayStateAnimation(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::PlayStateAnimation"
    class BeginAnimationState(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::BeginAnimationState"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::Cancel"
    class Subscribe(HookFactory):
        _name = "cGcNPCBehaviourPerformInteraction::Subscribe"

class cGcNPCBehaviourLookAtInteresting:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourLookAtInteresting::GetName"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourLookAtInteresting::OnInit"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourLookAtInteresting::Run"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourLookAtInteresting::Cancel"

class cGcNPCBehaviourReactToPlayer:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourReactToPlayer::GetName"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourReactToPlayer::Run"
    class Subscribe(HookFactory):
        _name = "cGcNPCBehaviourReactToPlayer::Subscribe"

class cGcNPCBehaviourReactToJudgement:
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourReactToJudgement::OnInit"
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourReactToJudgement::GetName"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourReactToJudgement::Run"
    class Subscribe(HookFactory):
        _name = "cGcNPCBehaviourReactToJudgement::Subscribe"

class cGcNPCBehaviourGreet:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourGreet::GetName"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourGreet::OnInit"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourGreet::Run"

class cGcNPCBehaviourInteraction:
    class GetName(HookFactory):
        _name = "cGcNPCBehaviourInteraction::GetName"
    class OnInit(HookFactory):
        _name = "cGcNPCBehaviourInteraction::OnInit"
    class Run(HookFactory):
        _name = "cGcNPCBehaviourInteraction::Run"
    class Subscribe(HookFactory):
        _name = "cGcNPCBehaviourInteraction::Subscribe"
    class Cancel(HookFactory):
        _name = "cGcNPCBehaviourInteraction::Cancel"

class cGcChairComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcChairComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcChairComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcChairComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcChairComponent::Prepare"
    class GetReservedLocation(HookFactory):
        _name = "cGcChairComponent::GetReservedLocation"
    class FindAvailableLocation(HookFactory):
        _name = "cGcChairComponent::FindAvailableLocation"
    class VacateLocation(HookFactory):
        _name = "cGcChairComponent::VacateLocation"
    class Sit(HookFactory):
        _name = "cGcChairComponent::Sit"
        _overload: overloads.cGcChairComponent.Sit.overloads = "cGcChairComponent *, cGcCharacterSit *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcChairComponent.Sit.overloads):
            cls._overload = overload_args
            return cls
    class GetTypedComponent(HookFactory):
        _name = "cGcChairComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcChairComponent::FindFirstTypedComponent"

class ComponentInstancercGcChairComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcChairComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcChairComponent::ConstructInstance"

class cGcNPCBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcNPCBehaviourTree::Construct"
    class Prepare(HookFactory):
        _name = "cGcNPCBehaviourTree::Prepare"
    class Update(HookFactory):
        _name = "cGcNPCBehaviourTree::Update"
    class CalcNavSubDestOffset(HookFactory):
        _name = "cGcNPCBehaviourTree::CalcNavSubDestOffset"
    class SetDestinationNode(HookFactory):
        _name = "cGcNPCBehaviourTree::SetDestinationNode"
    class GetNumOtherNPCsInNavArea(HookFactory):
        _name = "cGcNPCBehaviourTree::GetNumOtherNPCsInNavArea"
    class NavigateToNode(HookFactory):
        _name = "cGcNPCBehaviourTree::NavigateToNode"
    class TerminateNavigation(HookFactory):
        _name = "cGcNPCBehaviourTree::TerminateNavigation"
    class NavigationWantsStaticTurn(HookFactory):
        _name = "cGcNPCBehaviourTree::NavigationWantsStaticTurn"
    class BeginNavigating(HookFactory):
        _name = "cGcNPCBehaviourTree::BeginNavigating"
    class UpdateNavigation(HookFactory):
        _name = "cGcNPCBehaviourTree::UpdateNavigation"
    class IsSeated(HookFactory):
        _name = "cGcNPCBehaviourTree::IsSeated"
    class GetNPCSettlementBehaviourState(HookFactory):
        _name = "cGcNPCBehaviourTree::GetNPCSettlementBehaviourState"
    class DoesNavAreaSatisfySettlementBehaviourAreaProperty(HookFactory):
        _name = "cGcNPCBehaviourTree::DoesNavAreaSatisfySettlementBehaviourAreaProperty"
    class GetPOINodeSelectionWeight(HookFactory):
        _name = "cGcNPCBehaviourTree::GetPOINodeSelectionWeight"
    class GetPOITypeSelectionWeight(HookFactory):
        _name = "cGcNPCBehaviourTree::GetPOITypeSelectionWeight"
    class GetNavAreaTransferSelectionWeight(HookFactory):
        _name = "cGcNPCBehaviourTree::GetNavAreaTransferSelectionWeight"
    class GetRunProbability(HookFactory):
        _name = "cGcNPCBehaviourTree::GetRunProbability"
    class GetNavNode(HookFactory):
        _name = "cGcNPCBehaviourTree::GetNavNode"
    class cGcNPCBehaviourTree(HookFactory):
        _name = "cGcNPCBehaviourTree::cGcNPCBehaviourTree"

class GetBuildingClassWeightEntry(HookFactory):
    _name = "GetBuildingClassWeightEntry"

class cGcNPCBehaviour:
    class PlayAnimation(HookFactory):
        _name = "cGcNPCBehaviour::PlayAnimation"
    class StopAnimation(HookFactory):
        _name = "cGcNPCBehaviour::StopAnimation"
    class IsSeated(HookFactory):
        _name = "cGcNPCBehaviour::IsSeated"
    class SetPropA(HookFactory):
        _name = "cGcNPCBehaviour::SetPropA"
    class GetGenericAnimation(HookFactory):
        _name = "cGcNPCBehaviour::GetGenericAnimation"

class cGcNPCBehaviourWithTurning:
    class UpdateTurning(HookFactory):
        _name = "cGcNPCBehaviourWithTurning::UpdateTurning"

class cTkBehaviourTreeBehaviour:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeBehaviour::Update"
    class ToggleDebugBreak(HookFactory):
        _name = "cTkBehaviourTreeBehaviour::ToggleDebugBreak"
    class IsDebugBreakSet(HookFactory):
        _name = "cTkBehaviourTreeBehaviour::IsDebugBreakSet"

class cTkBehaviourTreeNode:
    class GetName(HookFactory):
        _name = "cTkBehaviourTreeNode::GetName"

class cGcAudioAreaTriggerComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::Update"
    class Release(HookFactory):
        _name = "cGcAudioAreaTriggerComponent::Release"

class cTkGravityComponent:
    class DefaultRenderNGui(HookFactory):
        _name = "cTkGravityComponent::DefaultRenderNGui"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkGravityComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkGravityComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cTkGravityComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkGravityComponent::Prepare"
    class Release(HookFactory):
        _name = "cTkGravityComponent::Release"
    class SetEnabled(HookFactory):
        _name = "cTkGravityComponent::SetEnabled"

class ComponentInstancercGcAudioAreaTriggerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcAudioAreaTriggerComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAudioAreaTriggerComponent::ConstructInstance"

class cGcByteBeatPlayerAudioStream:
    class GetAudioStreamData(HookFactory):
        _name = "cGcByteBeatPlayerAudioStream::GetAudioStreamData"

class sSketchValue:
    class sSketchValue(HookFactory):
        _name = "sSketchValue::sSketchValue"
    class GetAsBool(HookFactory):
        _name = "sSketchValue::GetAsBool"
    class GetAsFloat(HookFactory):
        _name = "sSketchValue::GetAsFloat"

class cGcSpawnedObjectComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSpawnedObjectComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSpawnedObjectComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcSpawnedObjectComponent::DefaultRenderNGui"
    class OnAttached(HookFactory):
        _name = "cGcSpawnedObjectComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSpawnedObjectComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcSpawnedObjectComponent::Update"
    class NetSerialize(HookFactory):
        _name = "cGcSpawnedObjectComponent::NetSerialize"
    class Release(HookFactory):
        _name = "cGcSpawnedObjectComponent::Release"

class ComponentInstancercGcSpawnedObjectComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcSpawnedObjectComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSpawnedObjectComponent::ConstructInstance"

class ComponentInstancercGcShipFlareComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcShipFlareComponent::AllocateInstances"
    class Register(HookFactory):
        _name = "ComponentInstancercGcShipFlareComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcShipFlareComponent::ConstructInstance"

class cGcDissolveEffectComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcDissolveEffectComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcDissolveEffectComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcDissolveEffectComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcDissolveEffectComponent::Update"
    class UpdateRender(HookFactory):
        _name = "cGcDissolveEffectComponent::UpdateRender"
    class RenderNGui(HookFactory):
        _name = "cGcDissolveEffectComponent::RenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcDissolveEffectComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcDissolveEffectComponent::FindFirstTypedComponent"

class ComponentInstancercGcDissolveEffectComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcDissolveEffectComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcDissolveEffectComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcDissolveEffectComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcDissolveEffectComponent::DestructInstance"

class cGcPlayerDissapearEffect:
    class Construct(HookFactory):
        _name = "cGcPlayerDissapearEffect::Construct"
    class Start(HookFactory):
        _name = "cGcPlayerDissapearEffect::Start"
    class Update(HookFactory):
        _name = "cGcPlayerDissapearEffect::Update"
    class End(HookFactory):
        _name = "cGcPlayerDissapearEffect::End"
    class Release(HookFactory):
        _name = "cGcPlayerDissapearEffect::Release"
    class FreezePlayerMovement(HookFactory):
        _name = "cGcPlayerDissapearEffect::FreezePlayerMovement"

class cGcAlienPodComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAlienPodComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAlienPodComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcAlienPodComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcAlienPodComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcAlienPodComponent::Update"

class ComponentInstancercGcAlienPodComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcAlienPodComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAlienPodComponent::ConstructInstance"

class ComponentInstancercTkCreatureTailComponent:
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkCreatureTailComponent::AllocateInstances"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkCreatureTailComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercTkCreatureTailComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkCreatureTailComponent::ConstructInstance"

class cGcAntagonistComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcAntagonistComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAntagonistComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAntagonistComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcAntagonistComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcAntagonistComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcAntagonistComponent::Release"
    class Update(HookFactory):
        _name = "cGcAntagonistComponent::Update"
    class SetPerceptionEnabled(HookFactory):
        _name = "cGcAntagonistComponent::SetPerceptionEnabled"
    class TryAddThreat(HookFactory):
        _name = "cGcAntagonistComponent::TryAddThreat"
    class GetBounds(HookFactory):
        _name = "cGcAntagonistComponent::GetBounds"
    class GetRigidBody(HookFactory):
        _name = "cGcAntagonistComponent::GetRigidBody"
    class CheckPerception(HookFactory):
        _name = "cGcAntagonistComponent::CheckPerception"
    class AddThreat(HookFactory):
        _name = "cGcAntagonistComponent::AddThreat"
    class CommunicateThreat(HookFactory):
        _name = "cGcAntagonistComponent::CommunicateThreat"
    class GetClampedRayForPerceptionFOV(HookFactory):
        _name = "cGcAntagonistComponent::GetClampedRayForPerceptionFOV"

class ComponentInstancercGcAntagonistComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcAntagonistComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcAntagonistComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcAntagonistComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcAntagonistComponent::DestructInstance"

class cGcAtmosphereEntryComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcAtmosphereEntryComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcAtmosphereEntryComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcAtmosphereEntryComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcAtmosphereEntryComponent::Update"
    class ActiveAtmosphereEntry(HookFactory):
        _name = "cGcAtmosphereEntryComponent::ActiveAtmosphereEntry"
    class GetTypedComponent(HookFactory):
        _name = "cGcAtmosphereEntryComponent::GetTypedComponent"

class cGcPortalMod:
    class PrepareJob(HookFactory):
        _name = "cGcPortalMod::PrepareJob"
    class Prepare(HookFactory):
        _name = "cGcPortalMod::Prepare"

class cGcBuildingComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcBuildingComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcBuildingComponent::FindFirstTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcBuildingComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcBuildingComponent::InitData"

class ComponentInstancercGcBuildingComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcBuildingComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcBuildingComponent::ConstructInstance"

class cGcCombatEffectsComponent:
    class RenderNGuiCallback(HookFactory):
        _name = "cGcCombatEffectsComponent::RenderNGuiCallback"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCombatEffectsComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCombatEffectsComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcCombatEffectsComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcCombatEffectsComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCombatEffectsComponent::Update"
    class RemoveExpiredEffects(HookFactory):
        _name = "cGcCombatEffectsComponent::RemoveExpiredEffects"
    class HandleCombatEffectsOnImpact(HookFactory):
        _name = "cGcCombatEffectsComponent::HandleCombatEffectsOnImpact"
    class RenderImGui(HookFactory):
        _name = "cGcCombatEffectsComponent::RenderImGui"
    class GetTypedComponent(HookFactory):
        _name = "cGcCombatEffectsComponent::GetTypedComponent"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcCombatEffectsComponent::FindFirstTypedComponent"

class ComponentInstancercGcCombatEffectsComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCombatEffectsComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCombatEffectsComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCombatEffectsComponent::ConstructInstance"

class ComponentInstancercGcScanEffectComponent:
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcScanEffectComponent::DestructInstance"
    class Register(HookFactory):
        _name = "ComponentInstancercGcScanEffectComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcScanEffectComponent::ConstructInstance"

class cGcCreatureAttractorComponent:
    class Prepare(HookFactory):
        _name = "cGcCreatureAttractorComponent::Prepare"
    class GetTypedComponent(HookFactory):
        _name = "cGcCreatureAttractorComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureAttractorComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureAttractorComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcCreatureAttractorComponent::OnAttached"
    class IsAttracted(HookFactory):
        _name = "cGcCreatureAttractorComponent::IsAttracted"
    class IsBasicBait(HookFactory):
        _name = "cGcCreatureAttractorComponent::IsBasicBait"
    class NetSerializeOnInit(HookFactory):
        _name = "cGcCreatureAttractorComponent::NetSerializeOnInit"

class cGcEncounterStateComponent:
    class IsAllowedToCreateNewGuards(HookFactory):
        _name = "cGcEncounterStateComponent::IsAllowedToCreateNewGuards"
    class GetTypedComponent(HookFactory):
        _name = "cGcEncounterStateComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcEncounterStateComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcEncounterStateComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcEncounterStateComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcEncounterStateComponent::Update"
    class NetSerialize(HookFactory):
        _name = "cGcEncounterStateComponent::NetSerialize"

class cGcGroundWormComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcGroundWormComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcGroundWormComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcGroundWormComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcGroundWormComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcGroundWormComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcGroundWormComponent::Release"
    class Update(HookFactory):
        _name = "cGcGroundWormComponent::Update"
    class UpdateState(HookFactory):
        _name = "cGcGroundWormComponent::UpdateState"
    class TriggerEmerge(HookFactory):
        _name = "cGcGroundWormComponent::TriggerEmerge"
    class RenderNGui(HookFactory):
        _name = "cGcGroundWormComponent::RenderNGui"

class ComponentInstancercGcGroundWormComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcGroundWormComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcGroundWormComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcGroundWormComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcGroundWormComponent::DestructInstance"

class ComponentInstancercGcEncounterStateComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcEncounterStateComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcEncounterStateComponent::ConstructInstance"

class sEncounterGuard:
    class FindNodeHandle(HookFactory):
        _name = "sEncounterGuard::FindNodeHandle"

class cGcFleetHologramComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcFleetHologramComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcFleetHologramComponent::InitData"

class ComponentLoadInstancercGcFleetHologramComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercGcFleetHologramComponent::Register"

class cGcGrabPlayerComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcGrabPlayerComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcGrabPlayerComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcGrabPlayerComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcGrabPlayerComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcGrabPlayerComponent::Release"
    class Update(HookFactory):
        _name = "cGcGrabPlayerComponent::Update"
    class ReleasePlayer(HookFactory):
        _name = "cGcGrabPlayerComponent::ReleasePlayer"
    class FindFirstTypedComponent(HookFactory):
        _name = "cGcGrabPlayerComponent::FindFirstTypedComponent"

class ComponentInstancercGcGrabPlayerComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcGrabPlayerComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcGrabPlayerComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcGrabPlayerComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcGrabPlayerComponent::DestructInstance"

class cGcBeamEffect:
    class cGcBeamEffect(HookFactory):
        _name = "cGcBeamEffect::cGcBeamEffect"
    class Construct(HookFactory):
        _name = "cGcBeamEffect::Construct"
    class Prepare(HookFactory):
        _name = "cGcBeamEffect::Prepare"
    class Update(HookFactory):
        _name = "cGcBeamEffect::Update"
    class Activate(HookFactory):
        _name = "cGcBeamEffect::Activate"
    class Deactivate(HookFactory):
        _name = "cGcBeamEffect::Deactivate"

class cTkOnPostAnimCallbackForwarder:
    class OnPostAnim(HookFactory):
        _templates = ("T0", )
        _name = "cTkOnPostAnimCallbackForwarder<{T0}>::OnPostAnim"

class cTkPreAdditiveCallbackForwarder:
    class PreAdditive(HookFactory):
        _templates = ("T0", )
        _name = "cTkPreAdditiveCallbackForwarder<{T0}>::PreAdditive"

class cTkIKFullBody:
    class DetachConstraint(HookFactory):
        _name = "cTkIKFullBody::DetachConstraint"
    class GetBoneIndexFromNode(HookFactory):
        _name = "cTkIKFullBody::GetBoneIndexFromNode"
    class cTkIKFullBody(HookFactory):
        _name = "cTkIKFullBody::cTkIKFullBody"
    class SetJointAxes(HookFactory):
        _name = "cTkIKFullBody::SetJointAxes"
    class AddBaseCostConstraint(HookFactory):
        _name = "cTkIKFullBody::AddBaseCostConstraint"
    class AddJoint(HookFactory):
        _name = "cTkIKFullBody::AddJoint"
    class AddJointAndParents(HookFactory):
        _name = "cTkIKFullBody::AddJointAndParents"
    class AssignStateVals(HookFactory):
        _name = "cTkIKFullBody::AssignStateVals"
    class CastRayVsJointAabbs(HookFactory):
        _name = "cTkIKFullBody::CastRayVsJointAabbs"
    class ComputeChildrenMasses(HookFactory):
        _name = "cTkIKFullBody::ComputeChildrenMasses"
    class ComputeEuler(HookFactory):
        _name = "cTkIKFullBody::ComputeEuler"
    class Construct(HookFactory):
        _name = "cTkIKFullBody::Construct"
    class GetEulerFromMat(HookFactory):
        _name = "cTkIKFullBody::GetEulerFromMat"
    class GetModelSpacePosAndRotJacobian(HookFactory):
        _name = "cTkIKFullBody::GetModelSpacePosAndRotJacobian"
    class GetModelSpacePosJacobian(HookFactory):
        _name = "cTkIKFullBody::GetModelSpacePosJacobian"
    class GetModelSpaceRotJacobian(HookFactory):
        _name = "cTkIKFullBody::GetModelSpaceRotJacobian"
    class MulAddModelSpacePosJacobian(HookFactory):
        _name = "cTkIKFullBody::MulAddModelSpacePosJacobian"
    class NormaliseInertia(HookFactory):
        _name = "cTkIKFullBody::NormaliseInertia"
    class OnPostAnim(HookFactory):
        _name = "cTkIKFullBody::OnPostAnim"
    class PreAdditive(HookFactory):
        _name = "cTkIKFullBody::PreAdditive"
    class Solve(HookFactory):
        _name = "cTkIKFullBody::Solve"

class cGcHeadConstraint:
    class OnAttach(HookFactory):
        _name = "cGcHeadConstraint::OnAttach"
    class OnDetach(HookFactory):
        _name = "cGcHeadConstraint::OnDetach"
    class PreAdditive(HookFactory):
        _name = "cGcHeadConstraint::PreAdditive"
    class PreSolve(HookFactory):
        _name = "cGcHeadConstraint::PreSolve"
    class GetNumRows(HookFactory):
        _name = "cGcHeadConstraint::GetNumRows"
    class BuildRows(HookFactory):
        _name = "cGcHeadConstraint::BuildRows"
    class PostSolve(HookFactory):
        _name = "cGcHeadConstraint::PostSolve"

class cGcHeightAdjustComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcHeightAdjustComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcHeightAdjustComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcHeightAdjustComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcHeightAdjustComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcHeightAdjustComponent::Update"

class ComponentInstancercGcHeightAdjustComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcHeightAdjustComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcHeightAdjustComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcHeightAdjustComponent::ConstructInstance"

class cGcInteraction:
    class Construct(HookFactory):
        _name = "cGcInteraction::Construct"

class CAkSpatialAudioVoice:
    class Term(HookFactory):
        _name = "CAkSpatialAudioVoice::Term"
    class GetVolumeRayCategories(HookFactory):
        _name = "CAkSpatialAudioVoice::GetVolumeRayCategories"
    class Init(HookFactory):
        _name = "CAkSpatialAudioVoice::Init"

class ActivationCost:
    class HasCost(HookFactory):
        _name = "ActivationCost::HasCost"
    class Clear(HookFactory):
        _name = "ActivationCost::Clear"
    class Set(HookFactory):
        _name = "ActivationCost::Set"
    class CostRemaining(HookFactory):
        _name = "ActivationCost::CostRemaining"

class cTkEulerVector:
    class cTkEulerVector(HookFactory):
        _name = "cTkEulerVector::cTkEulerVector"
        _overload: overloads.cTkEulerVector.cTkEulerVector.overloads = "cTkEulerVector *, const cTkQuaternion *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkEulerVector.cTkEulerVector.overloads):
            cls._overload = overload_args
            return cls

class cTkIKRotModifyConstraint:
    class OnAttach(HookFactory):
        _name = "cTkIKRotModifyConstraint::OnAttach"
    class OnDetach(HookFactory):
        _name = "cTkIKRotModifyConstraint::OnDetach"
    class PreSolve(HookFactory):
        _name = "cTkIKRotModifyConstraint::PreSolve"
    class GetNumRows(HookFactory):
        _name = "cTkIKRotModifyConstraint::GetNumRows"
    class BuildRows(HookFactory):
        _name = "cTkIKRotModifyConstraint::BuildRows"

class cGcLadderComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcLadderComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcLadderComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcLadderComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcLadderComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcLadderComponent::Update"
    class MountLadder(HookFactory):
        _name = "cGcLadderComponent::MountLadder"
    class GetTypedComponent(HookFactory):
        _name = "cGcLadderComponent::GetTypedComponent"

class cGcLandingHelperComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcLandingHelperComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcLandingHelperComponent::InitData"
    class Update(HookFactory):
        _name = "cGcLandingHelperComponent::Update"

class ComponentInstancercGcLandingHelperComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcLandingHelperComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcLandingHelperComponent::ConstructInstance"

class cTkReferenceComponent:
    class Update(HookFactory):
        _name = "cTkReferenceComponent::Update"
    class OnAttached(HookFactory):
        _name = "cTkReferenceComponent::OnAttached"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkReferenceComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkReferenceComponent::InitData"

class cGcLookAtComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcLookAtComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcLookAtComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcLookAtComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcLookAtComponent::Update"

class ComponentInstancercGcLookAtComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcLookAtComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcLookAtComponent::ConstructInstance"

class cGcObjectPlacementComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcObjectPlacementComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcObjectPlacementComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcObjectPlacementComponent::InitData"
    class DefaultRenderNGui(HookFactory):
        _name = "cGcObjectPlacementComponent::DefaultRenderNGui"
    class OnAttached(HookFactory):
        _name = "cGcObjectPlacementComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcObjectPlacementComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcObjectPlacementComponent::Update"
    class RepositionObjects(HookFactory):
        _name = "cGcObjectPlacementComponent::RepositionObjects"
    class PlaceObjects(HookFactory):
        _name = "cGcObjectPlacementComponent::PlaceObjects"
    class IsControlledByThisSpawner(HookFactory):
        _name = "cGcObjectPlacementComponent::IsControlledByThisSpawner"
    class PlaceObjectsInGroups(HookFactory):
        _name = "cGcObjectPlacementComponent::PlaceObjectsInGroups"
    class AddObject(HookFactory):
        _name = "cGcObjectPlacementComponent::AddObject"
    class Release(HookFactory):
        _name = "cGcObjectPlacementComponent::Release"

class ComponentInstancercGcObjectPlacementComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcObjectPlacementComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcObjectPlacementComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcObjectPlacementComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcObjectPlacementComponent::DestructInstance"

class cGcScanEffectComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcScanEffectComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcScanEffectComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcScanEffectComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcScanEffectComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcScanEffectComponent::Update"
    class GetTypedComponent(HookFactory):
        _name = "cGcScanEffectComponent::GetTypedComponent"

class GetOtherAlienRace(HookFactory):
    _name = "GetOtherAlienRace"

class cGcSentinelCoverComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSentinelCoverComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSentinelCoverComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcSentinelCoverComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcSentinelCoverComponent::Update"
    class ShouldDestroy(HookFactory):
        _name = "cGcSentinelCoverComponent::ShouldDestroy"
    class Destroy(HookFactory):
        _name = "cGcSentinelCoverComponent::Destroy"
    class OnHitCallback(HookFactory):
        _name = "cGcSentinelCoverComponent::OnHitCallback"
    class OnAttached(HookFactory):
        _name = "cGcSentinelCoverComponent::OnAttached"
    class GetTypedComponent(HookFactory):
        _name = "cGcSentinelCoverComponent::GetTypedComponent"
    class GetNumComponents(HookFactory):
        _name = "cGcSentinelCoverComponent::GetNumComponents"

class ComponentInstancercGcSentinelCoverComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcSentinelCoverComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcSentinelCoverComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcSentinelCoverComponent::ConstructInstance"

class cGcNPCPlacementInfo:
    class cGcNPCPlacementInfo(HookFactory):
        _name = "cGcNPCPlacementInfo::cGcNPCPlacementInfo"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCPlacementInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCPlacementInfo::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCPlacementInfo::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCPlacementInfo::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCPlacementInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCPlacementInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCPlacementInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCPlacementInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCPlacementInfo::WriteToXMLNodeExplicit"

class cGcCreatureSteering:
    class GetMaxForwardInverseDanger(HookFactory):
        _name = "cGcCreatureSteering::GetMaxForwardInverseDanger"
    class AddDanger(HookFactory):
        _name = "cGcCreatureSteering::AddDanger"
    class AddEvadeDanger(HookFactory):
        _name = "cGcCreatureSteering::AddEvadeDanger"
    class AddInterest(HookFactory):
        _name = "cGcCreatureSteering::AddInterest"
    class GetDirection(HookFactory):
        _name = "cGcCreatureSteering::GetDirection"
    class GetDirection_(HookFactory):
        _name = "cGcCreatureSteering::GetDirection_"
    class PickDirection_(HookFactory):
        _name = "cGcCreatureSteering::PickDirection_"
    class UpdateSpring(HookFactory):
        _name = "cGcCreatureSteering::UpdateSpring"
    class Zero(HookFactory):
        _name = "cGcCreatureSteering::Zero"
    class Construct(HookFactory):
        _name = "cGcCreatureSteering::Construct"
    class AddImpassable(HookFactory):
        _name = "cGcCreatureSteering::AddImpassable"
    class RenderDebug(HookFactory):
        _name = "cGcCreatureSteering::RenderDebug"

class HkVectorToTkVector(HookFactory):
    _name = "HkVectorToTkVector"

class cGcPlayerLadderClimb:
    class IsOnLadder(HookFactory):
        _name = "cGcPlayerLadderClimb::IsOnLadder"
    class StartLadderClimb(HookFactory):
        _name = "cGcPlayerLadderClimb::StartLadderClimb"
    class StopLadderClimb(HookFactory):
        _name = "cGcPlayerLadderClimb::StopLadderClimb"
    class Update(HookFactory):
        _name = "cGcPlayerLadderClimb::Update"
    class OnStateComplete(HookFactory):
        _name = "cGcPlayerLadderClimb::OnStateComplete"

class cGcSquadronHologramComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSquadronHologramComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSquadronHologramComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcSquadronHologramComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSquadronHologramComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcSquadronHologramComponent::Release"
    class Update(HookFactory):
        _name = "cGcSquadronHologramComponent::Update"
    class SpawnPilotHologram(HookFactory):
        _name = "cGcSquadronHologramComponent::SpawnPilotHologram"

class cGcThereminComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcThereminComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcThereminComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcThereminComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcThereminComponent::Release"
    class Update(HookFactory):
        _name = "cGcThereminComponent::Update"

class ComponentInstancercGcThereminComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcThereminComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcThereminComponent::ConstructInstance"

class cGcFreighterSyncComponent:
    class GetTypedComponent(HookFactory):
        _name = "cGcFreighterSyncComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcFreighterSyncComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcFreighterSyncComponent::InitData"
    class GetNumComponents(HookFactory):
        _name = "cGcFreighterSyncComponent::GetNumComponents"
    class OnAttached(HookFactory):
        _name = "cGcFreighterSyncComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcFreighterSyncComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcFreighterSyncComponent::Update"
    class NotifyNetworkOfAttack(HookFactory):
        _name = "cGcFreighterSyncComponent::NotifyNetworkOfAttack"
    class NetSerialize(HookFactory):
        _name = "cGcFreighterSyncComponent::NetSerialize"
    class IsAttacking(HookFactory):
        _name = "cGcFreighterSyncComponent::IsAttacking"

class ComponentInstancercGcFreighterSyncComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcFreighterSyncComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcFreighterSyncComponent::ConstructInstance"

class cGcWiringSocketComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcWiringSocketComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcWiringSocketComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcWiringSocketComponent::Prepare"
    class GetTypedComponent(HookFactory):
        _name = "cGcWiringSocketComponent::GetTypedComponent"

class cGcInteractionInterface:
    class InteractionSequence:
        class GotoNextStage(HookFactory):
            _name = "cGcInteractionInterface::InteractionSequence::GotoNextStage"
    class Prepare(HookFactory):
        _name = "cGcInteractionInterface::Prepare"
    class SetupSequences(HookFactory):
        _name = "cGcInteractionInterface::SetupSequences"
    class Update(HookFactory):
        _name = "cGcInteractionInterface::Update"
    class NumOptionsVisible(HookFactory):
        _name = "cGcInteractionInterface::NumOptionsVisible"
    class ApplyInteractionEvent(HookFactory):
        _name = "cGcInteractionInterface::ApplyInteractionEvent"
    class RefreshInteractionTitle(HookFactory):
        _name = "cGcInteractionInterface::RefreshInteractionTitle"
    class InteractStarted(HookFactory):
        _name = "cGcInteractionInterface::InteractStarted"
    class StopTextTyping(HookFactory):
        _name = "cGcInteractionInterface::StopTextTyping"
    class OptionSelected(HookFactory):
        _name = "cGcInteractionInterface::OptionSelected"
    class NextTextStage(HookFactory):
        _name = "cGcInteractionInterface::NextTextStage"

class cGcLoopingHelper:
    class Start(HookFactory):
        _name = "cGcLoopingHelper::Start"
    class Update(HookFactory):
        _name = "cGcLoopingHelper::Update"
    class Stop(HookFactory):
        _name = "cGcLoopingHelper::Stop"

class cGcCustomiserInteraction:
    class Construct(HookFactory):
        _name = "cGcCustomiserInteraction::Construct"
    class Interact(HookFactory):
        _name = "cGcCustomiserInteraction::Interact"
    class Update(HookFactory):
        _name = "cGcCustomiserInteraction::Update"
    class UpdateRender(HookFactory):
        _name = "cGcCustomiserInteraction::UpdateRender"
    class SendMessageA(HookFactory):
        _name = "cGcCustomiserInteraction::SendMessageA"
    class DoInteractionEvent(HookFactory):
        _name = "cGcCustomiserInteraction::DoInteractionEvent"
    class GetViewTargetNode(HookFactory):
        _name = "cGcCustomiserInteraction::GetViewTargetNode"

class cGcMPMissionGiverInteraction:
    class Prepare(HookFactory):
        _name = "cGcMPMissionGiverInteraction::Prepare"
    class Update(HookFactory):
        _name = "cGcMPMissionGiverInteraction::Update"
    class UpdateFlag(HookFactory):
        _name = "cGcMPMissionGiverInteraction::UpdateFlag"

class cGcShipSalvageInteraction:
    class Construct(HookFactory):
        _name = "cGcShipSalvageInteraction::Construct"
    class Release(HookFactory):
        _name = "cGcShipSalvageInteraction::Release"
    class Prepare(HookFactory):
        _name = "cGcShipSalvageInteraction::Prepare"
    class Explode(HookFactory):
        _name = "cGcShipSalvageInteraction::Explode"
    class ClearSalvageShipHologram(HookFactory):
        _name = "cGcShipSalvageInteraction::ClearSalvageShipHologram"
    class Update(HookFactory):
        _name = "cGcShipSalvageInteraction::Update"

class cGcSpecialsShopInteraction:
    class Construct(HookFactory):
        _name = "cGcSpecialsShopInteraction::Construct"
    class Release(HookFactory):
        _name = "cGcSpecialsShopInteraction::Release"
    class Prepare(HookFactory):
        _name = "cGcSpecialsShopInteraction::Prepare"
    class Update(HookFactory):
        _name = "cGcSpecialsShopInteraction::Update"
    class UpdateRender(HookFactory):
        _name = "cGcSpecialsShopInteraction::UpdateRender"
    class RenderOffscreen2D(HookFactory):
        _name = "cGcSpecialsShopInteraction::RenderOffscreen2D"

class cTrackedNode:
    class cTrackedNode(HookFactory):
        _name = "cTrackedNode::cTrackedNode"
        _overload: overloads.cTrackedNode.cTrackedNode.overloads = "cTrackedNode *, TkHandle, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTrackedNode.cTrackedNode.overloads):
            cls._overload = overload_args
            return cls

class FindSubNode(HookFactory):
    _name = "FindSubNode"

class TrackAnimatedNodeAndParents(HookFactory):
    _name = "TrackAnimatedNodeAndParents"

class cClothPiece:
    class SimP(HookFactory):
        _name = "cClothPiece::SimP"
    class RenderP(HookFactory):
        _name = "cClothPiece::RenderP"
    class DrawCamAlignedPoint(HookFactory):
        _name = "cClothPiece::DrawCamAlignedPoint"
    class DrawCamAlignedXCross(HookFactory):
        _name = "cClothPiece::DrawCamAlignedXCross"
    class Prepare(HookFactory):
        _name = "cClothPiece::Prepare"
    class cClothPiece(HookFactory):
        _name = "cClothPiece::cClothPiece"
        _overload: overloads.cClothPiece.cClothPiece.overloads = "cClothPiece *, cGcClothComponent *, cGcClothPiece *, TkVector_BoundChecked<cTkVector2> *, TkVector_BoundChecked<cTkVector3> *"
        @classmethod
        def overload(cls, overload_args: overloads.cClothPiece.cClothPiece.overloads):
            cls._overload = overload_args
            return cls
    class Release(HookFactory):
        _name = "cClothPiece::Release"
    class DebugDrawPos(HookFactory):
        _name = "cClothPiece::DebugDrawPos"
    class DebugDraw(HookFactory):
        _name = "cClothPiece::DebugDraw"
    class CollectTrackedNodes(HookFactory):
        _name = "cClothPiece::CollectTrackedNodes"
    class GetInitialPosition(HookFactory):
        _name = "cClothPiece::GetInitialPosition"
    class GetPointOfParameter(HookFactory):
        _name = "cClothPiece::GetPointOfParameter"
        _overload: overloads.cClothPiece.GetPointOfParameter.overloads = "cClothPiece *, cTkVector3 *, const cTrackedNodeWithData<cGcClothAttachmentCirlce> *, float, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cClothPiece.GetPointOfParameter.overloads):
            cls._overload = overload_args
            return cls
    class AddFixedPoint(HookFactory):
        _name = "cClothPiece::AddFixedPoint"
    class StoreFixedPointsAndAttractors(HookFactory):
        _name = "cClothPiece::StoreFixedPointsAndAttractors"
    class ApplyFixedPoints(HookFactory):
        _name = "cClothPiece::ApplyFixedPoints"
    class ApplyAttractors(HookFactory):
        _name = "cClothPiece::ApplyAttractors"
    class ApplyWindAndExplosions(HookFactory):
        _name = "cClothPiece::ApplyWindAndExplosions"
    class CreateSplines(HookFactory):
        _name = "cClothPiece::CreateSplines"
    class UpdateSplines(HookFactory):
        _name = "cClothPiece::UpdateSplines"
    class ApplyClothDeletionOnSimulation(HookFactory):
        _name = "cClothPiece::ApplyClothDeletionOnSimulation"
    class ApplyClothDeletionOnGraphics(HookFactory):
        _name = "cClothPiece::ApplyClothDeletionOnGraphics"
    class CheckForBetterRemappingPermutation(HookFactory):
        _name = "cClothPiece::CheckForBetterRemappingPermutation"
    class RecalculateMayaIndicesMapping(HookFactory):
        _name = "cClothPiece::RecalculateMayaIndicesMapping"
    class UpdateCollisionObjects(HookFactory):
        _name = "cClothPiece::UpdateCollisionObjects"
    class CalcClothMatrix(HookFactory):
        _name = "cClothPiece::CalcClothMatrix"
        _overload: overloads.cClothPiece.CalcClothMatrix.overloads = "cClothPiece *, cTkMatrix34 *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cClothPiece.CalcClothMatrix.overloads):
            cls._overload = overload_args
            return cls
    class SyncSimulationToRenderBuffer(HookFactory):
        _name = "cClothPiece::SyncSimulationToRenderBuffer"
    class SendRenderBufferToRender(HookFactory):
        _name = "cClothPiece::SendRenderBufferToRender"
    class CalculateOneFrameMovement(HookFactory):
        _name = "cClothPiece::CalculateOneFrameMovement"
    class HeavySimulate(HookFactory):
        _name = "cClothPiece::HeavySimulate"
    class NonSimUpdate(HookFactory):
        _name = "cClothPiece::NonSimUpdate"
    class UpdateRender(HookFactory):
        _name = "cClothPiece::UpdateRender"

class ComponentInstancercGcClothComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcClothComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcClothComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcClothComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcClothComponent::DestructInstance"

class GetAxis(HookFactory):
    _name = "GetAxis"

class RegisterClothComponentForNgui(HookFactory):
    _name = "RegisterClothComponentForNgui"

class HeavySimulateTask(HookFactory):
    _name = "HeavySimulateTask"

class cGcFootConstraint:
    class cGcFootConstraint(HookFactory):
        _name = "cGcFootConstraint::cGcFootConstraint"
        _overload: overloads.cGcFootConstraint.cGcFootConstraint.overloads = "cGcFootConstraint *, const cGcFootConstraint *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFootConstraint.cGcFootConstraint.overloads):
            cls._overload = overload_args
            return cls
    class UpdateFootHold(HookFactory):
        _name = "cGcFootConstraint::UpdateFootHold"
    class Construct(HookFactory):
        _name = "cGcFootConstraint::Construct"
    class PreAdditive(HookFactory):
        _name = "cGcFootConstraint::PreAdditive"
    class PreSolve(HookFactory):
        _name = "cGcFootConstraint::PreSolve"
    class PostSolve(HookFactory):
        _name = "cGcFootConstraint::PostSolve"

class cGcPlayerFullBodyIKComponentUpdater:
    class UpdateComponentsPostPhysics(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentUpdater::UpdateComponentsPostPhysics"

class ComponentInstancercGcPlayerFullBodyIKComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcPlayerFullBodyIKComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcPlayerFullBodyIKComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerFullBodyIKComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcPlayerFullBodyIKComponent::DestructInstance"

class cGcHandTrackingConstraint:
    class PreSolve(HookFactory):
        _name = "cGcHandTrackingConstraint::PreSolve"
    class PostSolve(HookFactory):
        _name = "cGcHandTrackingConstraint::PostSolve"
    class PostAnim(HookFactory):
        _name = "cGcHandTrackingConstraint::PostAnim"
    class PostAnimInternal(HookFactory):
        _name = "cGcHandTrackingConstraint::PostAnimInternal"
    class cGcHandTrackingConstraint(HookFactory):
        _name = "cGcHandTrackingConstraint::cGcHandTrackingConstraint"

class cSpringLink:
    class cSpringLink(HookFactory):
        _name = "cSpringLink::cSpringLink"
    class Prepare(HookFactory):
        _name = "cSpringLink::Prepare"
    class CollectTrackedNodes(HookFactory):
        _name = "cSpringLink::CollectTrackedNodes"
    class ApplyPositionalSpring(HookFactory):
        _name = "cSpringLink::ApplyPositionalSpring"
    class ApplyAngularSpring(HookFactory):
        _name = "cSpringLink::ApplyAngularSpring"

class DampedSpringGeneralSolution(HookFactory):
    _templates = ("T0", )
    _name = "DampedSpringGeneralSolution<{T0}>"

class ToAngularVelocity(HookFactory):
    _name = "ToAngularVelocity"

class cTkIKJointXZPushConstraint:
    class OnAttach(HookFactory):
        _name = "cTkIKJointXZPushConstraint::OnAttach"
    class OnDetach(HookFactory):
        _name = "cTkIKJointXZPushConstraint::OnDetach"
    class PreSolve(HookFactory):
        _name = "cTkIKJointXZPushConstraint::PreSolve"
    class BuildRows(HookFactory):
        _name = "cTkIKJointXZPushConstraint::BuildRows"

class cTkIKJointHeightConstraint:
    class GetNumRows(HookFactory):
        _name = "cTkIKJointHeightConstraint::GetNumRows"
    class OnAttach(HookFactory):
        _name = "cTkIKJointHeightConstraint::OnAttach"
    class PreSolve(HookFactory):
        _name = "cTkIKJointHeightConstraint::PreSolve"
    class BuildRows(HookFactory):
        _name = "cTkIKJointHeightConstraint::BuildRows"

class cTkIKCenterOfGravityConstraint:
    class BuildRows(HookFactory):
        _name = "cTkIKCenterOfGravityConstraint::BuildRows"

class Cross(HookFactory):
    _name = "Cross"

class Dot(HookFactory):
    _name = "Dot"

class LengthSquared(HookFactory):
    _name = "LengthSquared"

class Normalise(HookFactory):
    _name = "Normalise"

class cTkMultipleReadersLock:
    class UnlockForRead(HookFactory):
        _name = "cTkMultipleReadersLock::UnlockForRead"
    class LockForRead(HookFactory):
        _name = "cTkMultipleReadersLock::LockForRead"

class cTkMultipleReadersLockReadJanitor:
    class cTkMultipleReadersLockReadJanitor(HookFactory):
        _name = "cTkMultipleReadersLockReadJanitor::cTkMultipleReadersLockReadJanitor"

class cGcDungeonGenerationParams:
    class cGcDungeonGenerationParams(HookFactory):
        _name = "cGcDungeonGenerationParams::cGcDungeonGenerationParams"
        _overload: overloads.cGcDungeonGenerationParams.cGcDungeonGenerationParams.overloads = "cGcDungeonGenerationParams *, const cGcDungeonGenerationParams *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcDungeonGenerationParams.cGcDungeonGenerationParams.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcDungeonGenerationParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDungeonGenerationParams::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcDungeonGenerationParams::FixDown"
    class FixUp(HookFactory):
        _name = "cGcDungeonGenerationParams::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcDungeonGenerationParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDungeonGenerationParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDungeonGenerationParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDungeonGenerationParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDungeonGenerationParams::WriteToXMLNodeExplicit"

class cGcCameraShakeComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCameraShakeComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCameraShakeComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcCameraShakeComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCameraShakeComponent::Update"
    class Release(HookFactory):
        _name = "cGcCameraShakeComponent::Release"

class ComponentInstancercGcCameraShakeComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCameraShakeComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCameraShakeComponent::ConstructInstance"

class cGcDecorationComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcDecorationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcDecorationComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcDecorationComponent::Prepare"

class ComponentInstancercGcDecorationComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcDecorationComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcDecorationComponent::ConstructInstance"

class GetFreighterBaseData(HookFactory):
    _name = "GetFreighterBaseData"

class cGcPlayerBackpackBars:
    class SetThirdPersonNode(HookFactory):
        _name = "cGcPlayerBackpackBars::SetThirdPersonNode"
    class Update(HookFactory):
        _name = "cGcPlayerBackpackBars::Update"
    class UpdateRender(HookFactory):
        _name = "cGcPlayerBackpackBars::UpdateRender"
    class CalculateBackpackMaterialValue(HookFactory):
        _name = "cGcPlayerBackpackBars::CalculateBackpackMaterialValue"

class cGcSimpleIkRecoilComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::Prepare"
    class Release(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::Release"
    class Update(HookFactory):
        _name = "cGcSimpleIkRecoilComponent::Update"

class TryGetLocalUserOnlineId(HookFactory):
    _name = "TryGetLocalUserOnlineId"

class IsLocalUser(HookFactory):
    _name = "IsLocalUser"

class cGcCustomiserCharacterComponent:
    class OnAttached(HookFactory):
        _name = "cGcCustomiserCharacterComponent::OnAttached"
    class Release(HookFactory):
        _name = "cGcCustomiserCharacterComponent::Release"
    class Update(HookFactory):
        _name = "cGcCustomiserCharacterComponent::Update"
    class SpawnWeapon(HookFactory):
        _name = "cGcCustomiserCharacterComponent::SpawnWeapon"

class cGcCreatureNavigation:
    class RequestTurnInPlace(HookFactory):
        _name = "cGcCreatureNavigation::RequestTurnInPlace"
    class IsTurningInPlace(HookFactory):
        _name = "cGcCreatureNavigation::IsTurningInPlace"
    class ClearSteeringMovement(HookFactory):
        _name = "cGcCreatureNavigation::ClearSteeringMovement"
    class GetAxis(HookFactory):
        _name = "cGcCreatureNavigation::GetAxis"
    class GetSwarm(HookFactory):
        _name = "cGcCreatureNavigation::GetSwarm"
    class GetSwarmIndex(HookFactory):
        _name = "cGcCreatureNavigation::GetSwarmIndex"
    class Construct(HookFactory):
        _name = "cGcCreatureNavigation::Construct"
    class Destruct(HookFactory):
        _name = "cGcCreatureNavigation::Destruct"
    class SetMode(HookFactory):
        _name = "cGcCreatureNavigation::SetMode"
    class GetFrontNavMatrix(HookFactory):
        _name = "cGcCreatureNavigation::GetFrontNavMatrix"
    class GetTurnPivot(HookFactory):
        _name = "cGcCreatureNavigation::GetTurnPivot"
    class NavigateInRoughDirection(HookFactory):
        _name = "cGcCreatureNavigation::NavigateInRoughDirection"
    class NavigateToPoint(HookFactory):
        _name = "cGcCreatureNavigation::NavigateToPoint"
    class SetMoveType(HookFactory):
        _name = "cGcCreatureNavigation::SetMoveType"
    class RequestIdle(HookFactory):
        _name = "cGcCreatureNavigation::RequestIdle"
    class GetIdleLength(HookFactory):
        _name = "cGcCreatureNavigation::GetIdleLength"
    class GetMoveType(HookFactory):
        _name = "cGcCreatureNavigation::GetMoveType"
    class GetAttackAnimCandidates(HookFactory):
        _name = "cGcCreatureNavigation::GetAttackAnimCandidates"
    class GetDesiredRidingAnim(HookFactory):
        _name = "cGcCreatureNavigation::GetDesiredRidingAnim"
    class GetRidingLean(HookFactory):
        _name = "cGcCreatureNavigation::GetRidingLean"
    class GetBaseRegistrationLocator(HookFactory):
        _name = "cGcCreatureNavigation::GetBaseRegistrationLocator"
    class UpdateRegistrationLocators(HookFactory):
        _name = "cGcCreatureNavigation::UpdateRegistrationLocators"
    class Prepare(HookFactory):
        _name = "cGcCreatureNavigation::Prepare"
    class ZeroSteering(HookFactory):
        _name = "cGcCreatureNavigation::ZeroSteering"
    class AddAvoidCreatures(HookFactory):
        _name = "cGcCreatureNavigation::AddAvoidCreatures"
    class AddAvoidDanger(HookFactory):
        _name = "cGcCreatureNavigation::AddAvoidDanger"
    class AddSteerToFollow(HookFactory):
        _name = "cGcCreatureNavigation::AddSteerToFollow"
    class AddAvoidTerrainEditsAndBaseParts(HookFactory):
        _name = "cGcCreatureNavigation::AddAvoidTerrainEditsAndBaseParts"
    class IsAtTarget(HookFactory):
        _name = "cGcCreatureNavigation::IsAtTarget"
    class IsPointAccessible(HookFactory):
        _name = "cGcCreatureNavigation::IsPointAccessible"
    class UpdatePath(HookFactory):
        _name = "cGcCreatureNavigation::UpdatePath"
    class UpdateHeadPosition(HookFactory):
        _name = "cGcCreatureNavigation::UpdateHeadPosition"
    class UpdateHeadDamage(HookFactory):
        _name = "cGcCreatureNavigation::UpdateHeadDamage"
    class RenderNGuiControl(HookFactory):
        _name = "cGcCreatureNavigation::RenderNGuiControl"
    class DebugRender(HookFactory):
        _name = "cGcCreatureNavigation::DebugRender"
    class RenderNGuiVis(HookFactory):
        _name = "cGcCreatureNavigation::RenderNGuiVis"
    class GetHeadSize(HookFactory):
        _name = "cGcCreatureNavigation::GetHeadSize"
    class CanPounce(HookFactory):
        _name = "cGcCreatureNavigation::CanPounce"
    class StartPounce(HookFactory):
        _name = "cGcCreatureNavigation::StartPounce"
    class UpdatePounce(HookFactory):
        _name = "cGcCreatureNavigation::UpdatePounce"
    class StartLocomotionDamage(HookFactory):
        _name = "cGcCreatureNavigation::StartLocomotionDamage"
    class UpdateLocomotionDamage(HookFactory):
        _name = "cGcCreatureNavigation::UpdateLocomotionDamage"
    class DoLocomotionDamageAnim(HookFactory):
        _name = "cGcCreatureNavigation::DoLocomotionDamageAnim"
    class cGcCreatureNavigation(HookFactory):
        _name = "cGcCreatureNavigation::cGcCreatureNavigation"
    class Update(HookFactory):
        _name = "cGcCreatureNavigation::Update"

class cGcAdjustHeight:
    class OnInit(HookFactory):
        _name = "cGcAdjustHeight::OnInit"
    class Run(HookFactory):
        _name = "cGcAdjustHeight::Run"
    class GetName(HookFactory):
        _name = "cGcAdjustHeight::GetName"

class cGcAppear:
    class OnInit(HookFactory):
        _name = "cGcAppear::OnInit"
    class Run(HookFactory):
        _name = "cGcAppear::Run"
    class GetName(HookFactory):
        _name = "cGcAppear::GetName"
    class cGcAppear(HookFactory):
        _name = "cGcAppear::cGcAppear"

class cGcAttracted:
    class GetName(HookFactory):
        _name = "cGcAttracted::GetName"
    class OnInit(HookFactory):
        _name = "cGcAttracted::OnInit"
    class Cancel(HookFactory):
        _name = "cGcAttracted::Cancel"
    class Run(HookFactory):
        _name = "cGcAttracted::Run"
    class DoEat(HookFactory):
        _name = "cGcAttracted::DoEat"

class cGcCanFollowPlayer:
    class Run(HookFactory):
        _name = "cGcCanFollowPlayer::Run"
    class GetName(HookFactory):
        _name = "cGcCanFollowPlayer::GetName"

class cGcCanSeePlayer:
    class Run(HookFactory):
        _name = "cGcCanSeePlayer::Run"
    class GetName(HookFactory):
        _name = "cGcCanSeePlayer::GetName"
    class cGcCanSeePlayer(HookFactory):
        _name = "cGcCanSeePlayer::cGcCanSeePlayer"

class cGcCanSeePrey:
    class Run(HookFactory):
        _name = "cGcCanSeePrey::Run"
    class GetName(HookFactory):
        _name = "cGcCanSeePrey::GetName"

class cGcCanSenseAttraction:
    class Run(HookFactory):
        _name = "cGcCanSenseAttraction::Run"
    class GetName(HookFactory):
        _name = "cGcCanSenseAttraction::GetName"

class cGcCheckDeath:
    class GetName(HookFactory):
        _name = "cGcCheckDeath::GetName"
    class cGcCheckDeath(HookFactory):
        _name = "cGcCheckDeath::cGcCheckDeath"
    class Run(HookFactory):
        _name = "cGcCheckDeath::Run"
    class FinalDestruction(HookFactory):
        _name = "cGcCheckDeath::FinalDestruction"

class cGcCheckTimer:
    class OnInit(HookFactory):
        _name = "cGcCheckTimer::OnInit"
    class Run(HookFactory):
        _name = "cGcCheckTimer::Run"
    class GetName(HookFactory):
        _name = "cGcCheckTimer::GetName"

class cGcCreatureStunned:
    class OnInit(HookFactory):
        _name = "cGcCreatureStunned::OnInit"
    class Cancel(HookFactory):
        _name = "cGcCreatureStunned::Cancel"
    class Run(HookFactory):
        _name = "cGcCreatureStunned::Run"
    class EndStun(HookFactory):
        _name = "cGcCreatureStunned::EndStun"
    class GetName(HookFactory):
        _name = "cGcCreatureStunned::GetName"

class cGcDamageNearby:
    class Run(HookFactory):
        _name = "cGcDamageNearby::Run"
    class GetName(HookFactory):
        _name = "cGcDamageNearby::GetName"

class cGcMetadataBehaviourTree:
    class GetBlackboard(HookFactory):
        _name = "cGcMetadataBehaviourTree::GetBlackboard"
    class Prepare(HookFactory):
        _name = "cGcMetadataBehaviourTree::Prepare"
    class Construct(HookFactory):
        _name = "cGcMetadataBehaviourTree::Construct"
    class SetBlackboardValuesFromArchetype(HookFactory):
        _name = "cGcMetadataBehaviourTree::SetBlackboardValuesFromArchetype"
    class RenderNGui(HookFactory):
        _name = "cGcMetadataBehaviourTree::RenderNGui"
    class AddNodesFromClassPointers(HookFactory):
        _name = "cGcMetadataBehaviourTree::AddNodesFromClassPointers"
    class AddNodeFromClassPointer(HookFactory):
        _name = "cGcMetadataBehaviourTree::AddNodeFromClassPointer"
    class Update(HookFactory):
        _name = "cGcMetadataBehaviourTree::Update"
    class cGcMetadataBehaviourTree(HookFactory):
        _name = "cGcMetadataBehaviourTree::cGcMetadataBehaviourTree"
    class GetErrorString(HookFactory):
        _name = "cGcMetadataBehaviourTree::GetErrorString"

class cGcMetadataBehaviour:
    class GetBlackboard(HookFactory):
        _name = "cGcMetadataBehaviour::GetBlackboard"
    class GetBlackboardOrDefaultValue(HookFactory):
        _name = "cGcMetadataBehaviour::GetBlackboardOrDefaultValue"
        _overload: overloads.cGcMetadataBehaviour.GetBlackboardOrDefaultValue.overloads = "cGcMetadataBehaviour *, cTkBlackboardDefaultValueBool *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMetadataBehaviour.GetBlackboardOrDefaultValue.overloads):
            cls._overload = overload_args
            return cls
    class BehaviourError(HookFactory):
        _name = "cGcMetadataBehaviour::BehaviourError"
    class NGuiDrawProgressBar(HookFactory):
        _name = "cGcMetadataBehaviour::NGuiDrawProgressBar"

class cGcBehaviourDetailAnims:
    class GetName(HookFactory):
        _name = "cGcBehaviourDetailAnims::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourDetailAnims::NGuiRender"
    class Cancel(HookFactory):
        _name = "cGcBehaviourDetailAnims::Cancel"
    class Run(HookFactory):
        _name = "cGcBehaviourDetailAnims::Run"

class BehaviourAllocatorcGcBehaviourDetailAnims:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourDetailAnims::Allocate"

class cGcDetailAnimList:
    class GetRandomAnim(HookFactory):
        _name = "cGcDetailAnimList::GetRandomAnim"

class cGcDetailAnims:
    class Run(HookFactory):
        _name = "cGcDetailAnims::Run"
    class GetName(HookFactory):
        _name = "cGcDetailAnims::GetName"
    class cGcDetailAnims(HookFactory):
        _name = "cGcDetailAnims::cGcDetailAnims"
    class Cancel(HookFactory):
        _name = "cGcDetailAnims::Cancel"

class cGcFollowPlayer:
    class GetName(HookFactory):
        _name = "cGcFollowPlayer::GetName"
    class OnInit(HookFactory):
        _name = "cGcFollowPlayer::OnInit"
    class Cancel(HookFactory):
        _name = "cGcFollowPlayer::Cancel"
    class Run(HookFactory):
        _name = "cGcFollowPlayer::Run"
    class DoPoop(HookFactory):
        _name = "cGcFollowPlayer::DoPoop"
    class MoveToPlayer(HookFactory):
        _name = "cGcFollowPlayer::MoveToPlayer"

class GcFollowRoutineGround:
    class OnInit(HookFactory):
        _name = "GcFollowRoutineGround::OnInit"
    class StartStep(HookFactory):
        _name = "GcFollowRoutineGround::StartStep"
    class PickSpotToEat(HookFactory):
        _name = "GcFollowRoutineGround::PickSpotToEat"
    class IsFoodNearby(HookFactory):
        _name = "GcFollowRoutineGround::IsFoodNearby"
    class Run(HookFactory):
        _name = "GcFollowRoutineGround::Run"
    class GetName(HookFactory):
        _name = "GcFollowRoutineGround::GetName"
    class Cancel(HookFactory):
        _name = "GcFollowRoutineGround::Cancel"

class cGcGetNearestPlayer:
    class Run(HookFactory):
        _name = "cGcGetNearestPlayer::Run"
    class GetName(HookFactory):
        _name = "cGcGetNearestPlayer::GetName"

class GcGrazeFollowingRoutine:
    class OnInit(HookFactory):
        _name = "GcGrazeFollowingRoutine::OnInit"
    class PickSpotToEatAndTestValidity(HookFactory):
        _name = "GcGrazeFollowingRoutine::PickSpotToEatAndTestValidity"
    class MoveToNextRoutinePositionIfRequired(HookFactory):
        _name = "GcGrazeFollowingRoutine::MoveToNextRoutinePositionIfRequired"
    class StartStep(HookFactory):
        _name = "GcGrazeFollowingRoutine::StartStep"
    class DoEat(HookFactory):
        _name = "GcGrazeFollowingRoutine::DoEat"
    class DoLookAround(HookFactory):
        _name = "GcGrazeFollowingRoutine::DoLookAround"
    class DoIdle(HookFactory):
        _name = "GcGrazeFollowingRoutine::DoIdle"
    class Run(HookFactory):
        _name = "GcGrazeFollowingRoutine::Run"
    class GetName(HookFactory):
        _name = "GcGrazeFollowingRoutine::GetName"
    class Cancel(HookFactory):
        _name = "GcGrazeFollowingRoutine::Cancel"

class cGcBehaviourLook:
    class GetName(HookFactory):
        _name = "cGcBehaviourLook::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourLook::NGuiRender"
    class OnInit(HookFactory):
        _name = "cGcBehaviourLook::OnInit"
    class Run(HookFactory):
        _name = "cGcBehaviourLook::Run"

class BehaviourAllocatorcGcBehaviourLook:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourLook::Allocate"

class cGcLookAtStuff:
    class OnInit(HookFactory):
        _name = "cGcLookAtStuff::OnInit"
    class Run(HookFactory):
        _name = "cGcLookAtStuff::Run"
    class GetName(HookFactory):
        _name = "cGcLookAtStuff::GetName"
    class cGcLookAtStuff(HookFactory):
        _name = "cGcLookAtStuff::cGcLookAtStuff"

class cGcMoveToTarget:
    class OnInit(HookFactory):
        _name = "cGcMoveToTarget::OnInit"
    class Run(HookFactory):
        _name = "cGcMoveToTarget::Run"
    class Cancel(HookFactory):
        _name = "cGcMoveToTarget::Cancel"
    class GetName(HookFactory):
        _name = "cGcMoveToTarget::GetName"

class cGcRidden:
    class GetName(HookFactory):
        _name = "cGcRidden::GetName"
    class OnInit(HookFactory):
        _name = "cGcRidden::OnInit"
    class Cancel(HookFactory):
        _name = "cGcRidden::Cancel"
    class Run(HookFactory):
        _name = "cGcRidden::Run"

class cGcShouldAvoidPlayer:
    class Run(HookFactory):
        _name = "cGcShouldAvoidPlayer::Run"
    class GetName(HookFactory):
        _name = "cGcShouldAvoidPlayer::GetName"
    class cGcShouldAvoidPlayer(HookFactory):
        _name = "cGcShouldAvoidPlayer::cGcShouldAvoidPlayer"

class GcSimpleFollowRoutine:
    class OnInit(HookFactory):
        _name = "GcSimpleFollowRoutine::OnInit"
    class MoveToNextRoutinePositionIfRequired(HookFactory):
        _name = "GcSimpleFollowRoutine::MoveToNextRoutinePositionIfRequired"
    class StartStep(HookFactory):
        _name = "GcSimpleFollowRoutine::StartStep"
    class Run(HookFactory):
        _name = "GcSimpleFollowRoutine::Run"
    class GetName(HookFactory):
        _name = "GcSimpleFollowRoutine::GetName"
    class Cancel(HookFactory):
        _name = "GcSimpleFollowRoutine::Cancel"

class cGcCreaturePerception:
    class GetLeaderCommand(HookFactory):
        _name = "cGcCreaturePerception::GetLeaderCommand"
    class InitThingFromAttach(HookFactory):
        _name = "cGcCreaturePerception::InitThingFromAttach"
    class UpdatePlayerAvoidRadius(HookFactory):
        _name = "cGcCreaturePerception::UpdatePlayerAvoidRadius"
    class UpdateLeader(HookFactory):
        _name = "cGcCreaturePerception::UpdateLeader"
    class UpdateThing(HookFactory):
        _name = "cGcCreaturePerception::UpdateThing"
    class WantVisionCast(HookFactory):
        _name = "cGcCreaturePerception::WantVisionCast"
    class Update(HookFactory):
        _name = "cGcCreaturePerception::Update"
    class GetSomethingToLookAt(HookFactory):
        _name = "cGcCreaturePerception::GetSomethingToLookAt"
    class GetThingsToAvoid(HookFactory):
        _name = "cGcCreaturePerception::GetThingsToAvoid"
    class GetThingsOfType(HookFactory):
        _name = "cGcCreaturePerception::GetThingsOfType"
    class NotifyPreyOfPresence(HookFactory):
        _name = "cGcCreaturePerception::NotifyPreyOfPresence"
    class RenderNGui(HookFactory):
        _name = "cGcCreaturePerception::RenderNGui"

class cGcScaryThingsList:
    class GetClosestScaryThing(HookFactory):
        _name = "cGcScaryThingsList::GetClosestScaryThing"
    class AddThing(HookFactory):
        _name = "cGcScaryThingsList::AddThing"
    class GetAnyScaryThings(HookFactory):
        _name = "cGcScaryThingsList::GetAnyScaryThings"

class cGcCreatureBehaviour:
    class GetAxis(HookFactory):
        _name = "cGcCreatureBehaviour::GetAxis"
    class cGcCreatureBehaviour(HookFactory):
        _name = "cGcCreatureBehaviour::cGcCreatureBehaviour"
    class PlayAnimation(HookFactory):
        _name = "cGcCreatureBehaviour::PlayAnimation"
    class MoveToPos(HookFactory):
        _name = "cGcCreatureBehaviour::MoveToPos"
    class FacePos(HookFactory):
        _name = "cGcCreatureBehaviour::FacePos"

class cGcCreatureBaitComponent:
    class GetNumComponents(HookFactory):
        _name = "cGcCreatureBaitComponent::GetNumComponents"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureBaitComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureBaitComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcCreatureBaitComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureBaitComponent::Update"

class cGcIdleAnimList:
    class BuildIdleList(HookFactory):
        _name = "cGcIdleAnimList::BuildIdleList"
    class GetRandomIdle(HookFactory):
        _name = "cGcIdleAnimList::GetRandomIdle"
    class OkayToLook(HookFactory):
        _name = "cGcIdleAnimList::OkayToLook"

class cGcHerbivoreFeed:
    class OnInit(HookFactory):
        _name = "cGcHerbivoreFeed::OnInit"
    class Run(HookFactory):
        _name = "cGcHerbivoreFeed::Run"
    class Cancel(HookFactory):
        _name = "cGcHerbivoreFeed::Cancel"
    class GetName(HookFactory):
        _name = "cGcHerbivoreFeed::GetName"

class cGcHerbivoreFlee:
    class OnInit(HookFactory):
        _name = "cGcHerbivoreFlee::OnInit"
    class Run(HookFactory):
        _name = "cGcHerbivoreFlee::Run"
    class GetName(HookFactory):
        _name = "cGcHerbivoreFlee::GetName"

class cGcHerbivoreStop:
    class Run(HookFactory):
        _name = "cGcHerbivoreStop::Run"
    class GetName(HookFactory):
        _name = "cGcHerbivoreStop::GetName"

class cGcBehaviourGetTarget:
    class GetName(HookFactory):
        _name = "cGcBehaviourGetTarget::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourGetTarget::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourGetTarget::Run"

class BehaviourAllocatorcGcBehaviourGetTarget:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourGetTarget::Allocate"

class cGcBehaviourRegisterAttacker:
    class GetName(HookFactory):
        _name = "cGcBehaviourRegisterAttacker::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourRegisterAttacker::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourRegisterAttacker::Run"

class BehaviourAllocatorcGcBehaviourRegisterAttacker:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourRegisterAttacker::Allocate"

class cGcBehaviourMoveToTarget:
    class GetName(HookFactory):
        _name = "cGcBehaviourMoveToTarget::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourMoveToTarget::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourMoveToTarget::Run"

class BehaviourAllocatorcGcBehaviourMoveToTarget:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourMoveToTarget::Allocate"

class cGcBehaviourMaintainRangeFromTarget:
    class GetName(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTarget::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTarget::NGuiRender"
    class Cancel(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTarget::Cancel"
    class Run(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTarget::Run"

class BehaviourAllocatorcGcBehaviourMaintainRangeFromTarget:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourMaintainRangeFromTarget::Allocate"

class cGcBehaviourFaceTarget:
    class GetName(HookFactory):
        _name = "cGcBehaviourFaceTarget::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourFaceTarget::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourFaceTarget::Run"
    class Cancel(HookFactory):
        _name = "cGcBehaviourFaceTarget::Cancel"

class BehaviourAllocatorcGcBehaviourFaceTarget:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourFaceTarget::Allocate"

class cGcBehaviourPlayAnim:
    class GetName(HookFactory):
        _name = "cGcBehaviourPlayAnim::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourPlayAnim::NGuiRender"
    class OnInit(HookFactory):
        _name = "cGcBehaviourPlayAnim::OnInit"
    class Run(HookFactory):
        _name = "cGcBehaviourPlayAnim::Run"

class BehaviourAllocatorcGcBehaviourPlayAnim:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourPlayAnim::Allocate"

class cGcBehaviourApplyDamage:
    class GetName(HookFactory):
        _name = "cGcBehaviourApplyDamage::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourApplyDamage::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourApplyDamage::Run"

class BehaviourAllocatorcGcBehaviourApplyDamage:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourApplyDamage::Allocate"

class cGcBehaviourLaunchProjectile:
    class GetName(HookFactory):
        _name = "cGcBehaviourLaunchProjectile::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourLaunchProjectile::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourLaunchProjectile::Run"

class BehaviourAllocatorcGcBehaviourLaunchProjectile:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourLaunchProjectile::Allocate"

class cGcBehaviourWait:
    class GetName(HookFactory):
        _name = "cGcBehaviourWait::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourWait::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourWait::Run"
    class NGuiRenderImpl(HookFactory):
        _name = "cGcBehaviourWait::NGuiRenderImpl"

class BehaviourAllocatorcGcBehaviourWait:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourWait::Allocate"

class cGcBehaviourIdle:
    class GetName(HookFactory):
        _name = "cGcBehaviourIdle::GetName"
    class NGuiRender(HookFactory):
        _name = "cGcBehaviourIdle::NGuiRender"
    class Run(HookFactory):
        _name = "cGcBehaviourIdle::Run"

class BehaviourAllocatorcGcBehaviourIdle:
    class Allocate(HookFactory):
        _name = "BehaviourAllocatorcGcBehaviourIdle::Allocate"

class cGcCanFiendEngage:
    class Run(HookFactory):
        _name = "cGcCanFiendEngage::Run"
    class GetName(HookFactory):
        _name = "cGcCanFiendEngage::GetName"

class cGcFiendHunt:
    class OnInit(HookFactory):
        _name = "cGcFiendHunt::OnInit"
    class Run(HookFactory):
        _name = "cGcFiendHunt::Run"
    class ResignActiveAttacker(HookFactory):
        _name = "cGcFiendHunt::ResignActiveAttacker"
    class DoMoveToSurround(HookFactory):
        _name = "cGcFiendHunt::DoMoveToSurround"
    class PlayAnim(HookFactory):
        _name = "cGcFiendHunt::PlayAnim"
    class DoPounce(HookFactory):
        _name = "cGcFiendHunt::DoPounce"
    class Cancel(HookFactory):
        _name = "cGcFiendHunt::Cancel"
    class Subscribe(HookFactory):
        _name = "cGcFiendHunt::Subscribe"
    class GetName(HookFactory):
        _name = "cGcFiendHunt::GetName"

class cGcFiendPatrol:
    class OnInit(HookFactory):
        _name = "cGcFiendPatrol::OnInit"
    class Run(HookFactory):
        _name = "cGcFiendPatrol::Run"
    class DoPatrol(HookFactory):
        _name = "cGcFiendPatrol::DoPatrol"
    class DoBurrow(HookFactory):
        _name = "cGcFiendPatrol::DoBurrow"
    class GetName(HookFactory):
        _name = "cGcFiendPatrol::GetName"

class cGcFiendStunned:
    class OnInit(HookFactory):
        _name = "cGcFiendStunned::OnInit"
    class Run(HookFactory):
        _name = "cGcFiendStunned::Run"
    class GetName(HookFactory):
        _name = "cGcFiendStunned::GetName"

class cGcMiniDroneHunt:
    class OnInit(HookFactory):
        _name = "cGcMiniDroneHunt::OnInit"
    class Run(HookFactory):
        _name = "cGcMiniDroneHunt::Run"
    class Cancel(HookFactory):
        _name = "cGcMiniDroneHunt::Cancel"
    class GetName(HookFactory):
        _name = "cGcMiniDroneHunt::GetName"

class cGcPredatorHunt:
    class GenAttackWeights(HookFactory):
        _name = "cGcPredatorHunt::GenAttackWeights"
    class Run(HookFactory):
        _name = "cGcPredatorHunt::Run"
    class Cancel(HookFactory):
        _name = "cGcPredatorHunt::Cancel"
    class GetName(HookFactory):
        _name = "cGcPredatorHunt::GetName"
    class cGcPredatorHunt(HookFactory):
        _name = "cGcPredatorHunt::cGcPredatorHunt"
    class OnInit(HookFactory):
        _name = "cGcPredatorHunt::OnInit"

class cGcPetBehaviourTree:
    class SetWantsLaserOn(HookFactory):
        _name = "cGcPetBehaviourTree::SetWantsLaserOn"
    class SetWantsLaserAim(HookFactory):
        _name = "cGcPetBehaviourTree::SetWantsLaserAim"
    class SetLaserAim(HookFactory):
        _name = "cGcPetBehaviourTree::SetLaserAim"
    class SetHasBeenCustomised(HookFactory):
        _name = "cGcPetBehaviourTree::SetHasBeenCustomised"
    class GetHasBeenCustomised(HookFactory):
        _name = "cGcPetBehaviourTree::GetHasBeenCustomised"
    class Construct(HookFactory):
        _name = "cGcPetBehaviourTree::Construct"
    class Prepare(HookFactory):
        _name = "cGcPetBehaviourTree::Prepare"
    class Update(HookFactory):
        _name = "cGcPetBehaviourTree::Update"
    class GetAttackAnim(HookFactory):
        _name = "cGcPetBehaviourTree::GetAttackAnim"
    class RenderNGui(HookFactory):
        _name = "cGcPetBehaviourTree::RenderNGui"

class cGcScuttlerHunt:
    class OnInit(HookFactory):
        _name = "cGcScuttlerHunt::OnInit"
    class Run(HookFactory):
        _name = "cGcScuttlerHunt::Run"
    class Cancel(HookFactory):
        _name = "cGcScuttlerHunt::Cancel"
    class Subscribe(HookFactory):
        _name = "cGcScuttlerHunt::Subscribe"
    class GetName(HookFactory):
        _name = "cGcScuttlerHunt::GetName"
    class cGcScuttlerHunt(HookFactory):
        _name = "cGcScuttlerHunt::cGcScuttlerHunt"

class cGcSharkHunt:
    class OnInit(HookFactory):
        _name = "cGcSharkHunt::OnInit"
    class Run(HookFactory):
        _name = "cGcSharkHunt::Run"
    class UpdateDefault(HookFactory):
        _name = "cGcSharkHunt::UpdateDefault"
    class UpdateFishFiendBig(HookFactory):
        _name = "cGcSharkHunt::UpdateFishFiendBig"
    class UpdateJellyfish(HookFactory):
        _name = "cGcSharkHunt::UpdateJellyfish"
    class Cancel(HookFactory):
        _name = "cGcSharkHunt::Cancel"
    class GetName(HookFactory):
        _name = "cGcSharkHunt::GetName"
    class cGcSharkHunt(HookFactory):
        _name = "cGcSharkHunt::cGcSharkHunt"

class cGcLandDolphin:
    class GetName(HookFactory):
        _name = "cGcLandDolphin::GetName"
    class OnInit(HookFactory):
        _name = "cGcLandDolphin::OnInit"
    class Cancel(HookFactory):
        _name = "cGcLandDolphin::Cancel"
    class Run(HookFactory):
        _name = "cGcLandDolphin::Run"

class cTkCreatureTailComponent:
    class GetTypedComponent(HookFactory):
        _name = "cTkCreatureTailComponent::GetTypedComponent"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkCreatureTailComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkCreatureTailComponent::InitData"
    class UpdatePostPhysics(HookFactory):
        _name = "cTkCreatureTailComponent::UpdatePostPhysics"
    class OnAttached(HookFactory):
        _name = "cTkCreatureTailComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkCreatureTailComponent::Prepare"
    class RenderNGui(HookFactory):
        _name = "cTkCreatureTailComponent::RenderNGui"
    class BuildChains(HookFactory):
        _name = "cTkCreatureTailComponent::BuildChains"
    class cGcChain:
        class Update(HookFactory):
            _name = "cTkCreatureTailComponent::cGcChain::Update"

class cGcSnakePatrol:
    class OnInit(HookFactory):
        _name = "cGcSnakePatrol::OnInit"
    class Cancel(HookFactory):
        _name = "cGcSnakePatrol::Cancel"
    class Run(HookFactory):
        _name = "cGcSnakePatrol::Run"
    class UpdateEffects(HookFactory):
        _name = "cGcSnakePatrol::UpdateEffects"
    class SpawnGroundWorms(HookFactory):
        _name = "cGcSnakePatrol::SpawnGroundWorms"
    class GetName(HookFactory):
        _name = "cGcSnakePatrol::GetName"

class cGcCreatureSwarm:
    class AddAlign(HookFactory):
        _name = "cGcCreatureSwarm::AddAlign"
    class AddCohere(HookFactory):
        _name = "cGcCreatureSwarm::AddCohere"
    class AddSeparate(HookFactory):
        _name = "cGcCreatureSwarm::AddSeparate"
    class GetComponent(HookFactory):
        _name = "cGcCreatureSwarm::GetComponent"
    class GetRoutine(HookFactory):
        _name = "cGcCreatureSwarm::GetRoutine"
    class Update(HookFactory):
        _name = "cGcCreatureSwarm::Update"
    class Remove(HookFactory):
        _name = "cGcCreatureSwarm::Remove"
    class Release(HookFactory):
        _name = "cGcCreatureSwarm::Release"
    class GetFollowSwarmPos(HookFactory):
        _name = "cGcCreatureSwarm::GetFollowSwarmPos"
    class Add(HookFactory):
        _name = "cGcCreatureSwarm::Add"

class cGcSwarmFlee:
    class GetName(HookFactory):
        _name = "cGcSwarmFlee::GetName"
    class cGcSwarmFlee(HookFactory):
        _name = "cGcSwarmFlee::cGcSwarmFlee"
    class OnInit(HookFactory):
        _name = "cGcSwarmFlee::OnInit"
    class Run(HookFactory):
        _name = "cGcSwarmFlee::Run"
    class Cancel(HookFactory):
        _name = "cGcSwarmFlee::Cancel"

class cGcSwarmMotion:
    class GetName(HookFactory):
        _name = "cGcSwarmMotion::GetName"
    class Run(HookFactory):
        _name = "cGcSwarmMotion::Run"

class cGcSwarmLand:
    class GetName(HookFactory):
        _name = "cGcSwarmLand::GetName"
    class Cancel(HookFactory):
        _name = "cGcSwarmLand::Cancel"
    class Run(HookFactory):
        _name = "cGcSwarmLand::Run"

class cGcFiendBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcFiendBehaviourTree::Construct"
    class Prepare(HookFactory):
        _name = "cGcFiendBehaviourTree::Prepare"
    class Update(HookFactory):
        _name = "cGcFiendBehaviourTree::Update"
    class cGcFiendBehaviourTree(HookFactory):
        _name = "cGcFiendBehaviourTree::cGcFiendBehaviourTree"

class cGcFiendBlackboard:
    class RegisterThreat(HookFactory):
        _name = "cGcFiendBlackboard::RegisterThreat"
    class GetThreatLevel(HookFactory):
        _name = "cGcFiendBlackboard::GetThreatLevel"

class cGcRockCreatureBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcRockCreatureBehaviourTree::Construct"
    class Update(HookFactory):
        _name = "cGcRockCreatureBehaviourTree::Update"

class cGcBeetleBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcBeetleBehaviourTree::Construct"

class cGcSnakeBehaviourTree:
    class Update(HookFactory):
        _name = "cGcSnakeBehaviourTree::Update"
    class Construct(HookFactory):
        _name = "cGcSnakeBehaviourTree::Construct"
    class Destruct(HookFactory):
        _name = "cGcSnakeBehaviourTree::Destruct"

class cGcPetBehaviour:
    class GetRNG(HookFactory):
        _name = "cGcPetBehaviour::GetRNG"
    class FacePlayer(HookFactory):
        _name = "cGcPetBehaviour::FacePlayer"
    class FacePos(HookFactory):
        _name = "cGcPetBehaviour::FacePos"
    class MoveToPlayer(HookFactory):
        _name = "cGcPetBehaviour::MoveToPlayer"
    class MoveToPos(HookFactory):
        _name = "cGcPetBehaviour::MoveToPos"

class cGcPetInteraction:
    class GetName(HookFactory):
        _name = "cGcPetInteraction::GetName"
    class cGcPetInteraction(HookFactory):
        _name = "cGcPetInteraction::cGcPetInteraction"
    class OnInit(HookFactory):
        _name = "cGcPetInteraction::OnInit"
    class Run(HookFactory):
        _name = "cGcPetInteraction::Run"
    class MoveToInteractPos(HookFactory):
        _name = "cGcPetInteraction::MoveToInteractPos"
    class Subscribe(HookFactory):
        _name = "cGcPetInteraction::Subscribe"
    class EventCallback(HookFactory):
        _name = "cGcPetInteraction::EventCallback"
    class Cancel(HookFactory):
        _name = "cGcPetInteraction::Cancel"

class cGcPetRoam:
    class GetName(HookFactory):
        _name = "cGcPetRoam::GetName"
    class MoveToPlayer(HookFactory):
        _name = "cGcPetRoam::MoveToPlayer"
    class BeginBehaviourSubState(HookFactory):
        _name = "cGcPetRoam::BeginBehaviourSubState"
    class GetActiveBehaviour(HookFactory):
        _name = "cGcPetRoam::GetActiveBehaviour"
    class cGcPetRoam(HookFactory):
        _name = "cGcPetRoam::cGcPetRoam"
    class OnInit(HookFactory):
        _name = "cGcPetRoam::OnInit"
    class Subscribe(HookFactory):
        _name = "cGcPetRoam::Subscribe"
    class EventCallback(HookFactory):
        _name = "cGcPetRoam::EventCallback"
    class Cancel(HookFactory):
        _name = "cGcPetRoam::Cancel"
    class Run(HookFactory):
        _name = "cGcPetRoam::Run"
    class CanFinishCurrentBehaviour(HookFactory):
        _name = "cGcPetRoam::CanFinishCurrentBehaviour"
    class DecideWhatToDo(HookFactory):
        _name = "cGcPetRoam::DecideWhatToDo"
    class FindUsefulThings(HookFactory):
        _name = "cGcPetRoam::FindUsefulThings"
    class CalculateBehaviourValidity(HookFactory):
        _name = "cGcPetRoam::CalculateBehaviourValidity"
    class BeginBehaviour(HookFactory):
        _name = "cGcPetRoam::BeginBehaviour"
    class DoPoop(HookFactory):
        _name = "cGcPetRoam::DoPoop"
    class CanPostChatMessage(HookFactory):
        _name = "cGcPetRoam::CanPostChatMessage"

class cGcBirdBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcBirdBehaviourTree::Construct"
    class Update(HookFactory):
        _name = "cGcBirdBehaviourTree::Update"

class cGcFishBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcFishBehaviourTree::Construct"

class cGcJellyFishBehaviourTree:
    class Update(HookFactory):
        _name = "cGcJellyFishBehaviourTree::Update"
    class Construct(HookFactory):
        _name = "cGcJellyFishBehaviourTree::Construct"

class cGcBlackboardValueDecorator:
    class NGuiRender(HookFactory):
        _name = "cGcBlackboardValueDecorator::NGuiRender"
    class Update(HookFactory):
        _name = "cGcBlackboardValueDecorator::Update"

class cGcPetFollowTrail:
    class ShouldAddPoint(HookFactory):
        _name = "cGcPetFollowTrail::ShouldAddPoint"
    class AddPoint(HookFactory):
        _name = "cGcPetFollowTrail::AddPoint"

class cGcPetBlackboard:
    class RenderNGui(HookFactory):
        _name = "cGcPetBlackboard::RenderNGui"

class cGcUngulateBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcUngulateBehaviourTree::Construct"
    class Update(HookFactory):
        _name = "cGcUngulateBehaviourTree::Update"
    class cGcUngulateBehaviourTree(HookFactory):
        _name = "cGcUngulateBehaviourTree::cGcUngulateBehaviourTree"

class cTkBehaviourTreeAlwaysSucceedDecorator:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeAlwaysSucceedDecorator::Update"

class cTkBehaviourTreeDecorator:
    class Cancel(HookFactory):
        _name = "cTkBehaviourTreeDecorator::Cancel"
    class AddNode(HookFactory):
        _name = "cTkBehaviourTreeDecorator::AddNode"

class cGcCreatureNavTrail:
    class Reset(HookFactory):
        _name = "cGcCreatureNavTrail::Reset"
    class PushElt(HookFactory):
        _name = "cGcCreatureNavTrail::PushElt"
    class AdjustFootPos(HookFactory):
        _name = "cGcCreatureNavTrail::AdjustFootPos"
    class AdjustCoGPos(HookFactory):
        _name = "cGcCreatureNavTrail::AdjustCoGPos"
    class GetHipAngle(HookFactory):
        _name = "cGcCreatureNavTrail::GetHipAngle"
    class DebugDraw(HookFactory):
        _name = "cGcCreatureNavTrail::DebugDraw"

class cGcRegionKnowledgeChunkMask:
    class cGcRegionKnowledgeChunkMask(HookFactory):
        _name = "cGcRegionKnowledgeChunkMask::cGcRegionKnowledgeChunkMask"

class cGcPredatorBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcPredatorBehaviourTree::Construct"
    class Update(HookFactory):
        _name = "cGcPredatorBehaviourTree::Update"
    class cGcPredatorBehaviourTree(HookFactory):
        _name = "cGcPredatorBehaviourTree::cGcPredatorBehaviourTree"

class cGcCheckEnergy:
    class GetName(HookFactory):
        _name = "cGcCheckEnergy::GetName"
    class Run(HookFactory):
        _name = "cGcCheckEnergy::Run"

class cGcSharkBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSharkBehaviourTree::Construct"
    class cGcSharkBehaviourTree(HookFactory):
        _name = "cGcSharkBehaviourTree::cGcSharkBehaviourTree"

class cGcRobotCheckAlert:
    class GetName(HookFactory):
        _name = "cGcRobotCheckAlert::GetName"
    class Run(HookFactory):
        _name = "cGcRobotCheckAlert::Run"

class cGcRobotBehaviourTree:
    class SetAlertState(HookFactory):
        _name = "cGcRobotBehaviourTree::SetAlertState"
    class SetLightIntensity(HookFactory):
        _name = "cGcRobotBehaviourTree::SetLightIntensity"
    class SetLightEndPos(HookFactory):
        _name = "cGcRobotBehaviourTree::SetLightEndPos"
    class Construct(HookFactory):
        _name = "cGcRobotBehaviourTree::Construct"
    class Prepare(HookFactory):
        _name = "cGcRobotBehaviourTree::Prepare"
    class Update(HookFactory):
        _name = "cGcRobotBehaviourTree::Update"
    class Release(HookFactory):
        _name = "cGcRobotBehaviourTree::Release"
    class FireLasers(HookFactory):
        _name = "cGcRobotBehaviourTree::FireLasers"
    class FireGuns(HookFactory):
        _name = "cGcRobotBehaviourTree::FireGuns"
    class FireGrenade(HookFactory):
        _name = "cGcRobotBehaviourTree::FireGrenade"
    class FireGrenade2(HookFactory):
        _name = "cGcRobotBehaviourTree::FireGrenade2"
    class HasLostArmour(HookFactory):
        _name = "cGcRobotBehaviourTree::HasLostArmour"
    class NotifyNetworkOfAttack(HookFactory):
        _name = "cGcRobotBehaviourTree::NotifyNetworkOfAttack"
    class OnCriticalHit(HookFactory):
        _name = "cGcRobotBehaviourTree::OnCriticalHit"
    class OnArmourHit(HookFactory):
        _name = "cGcRobotBehaviourTree::OnArmourHit"
    class cGcRobotBehaviourTree(HookFactory):
        _name = "cGcRobotBehaviourTree::cGcRobotBehaviourTree"

class cGcQuadGuard:
    class GetName(HookFactory):
        _name = "cGcQuadGuard::GetName"
    class OnInit(HookFactory):
        _name = "cGcQuadGuard::OnInit"
    class Run(HookFactory):
        _name = "cGcQuadGuard::Run"

class cGcQuadCheckAlert:
    class GetName(HookFactory):
        _name = "cGcQuadCheckAlert::GetName"
    class Run(HookFactory):
        _name = "cGcQuadCheckAlert::Run"

class cGcQuadPounce:
    class GetName(HookFactory):
        _name = "cGcQuadPounce::GetName"
    class Run(HookFactory):
        _name = "cGcQuadPounce::Run"

class cGcQuadEvade:
    class GetName(HookFactory):
        _name = "cGcQuadEvade::GetName"
    class Run(HookFactory):
        _name = "cGcQuadEvade::Run"

class cGcQuadAttackMovement:
    class GetName(HookFactory):
        _name = "cGcQuadAttackMovement::GetName"
    class Run(HookFactory):
        _name = "cGcQuadAttackMovement::Run"
    class Cancel(HookFactory):
        _name = "cGcQuadAttackMovement::Cancel"
    class FaceTarget(HookFactory):
        _name = "cGcQuadAttackMovement::FaceTarget"

class cGcQuadAttack:
    class GetName(HookFactory):
        _name = "cGcQuadAttack::GetName"
    class Run(HookFactory):
        _name = "cGcQuadAttack::Run"
    class Cancel(HookFactory):
        _name = "cGcQuadAttack::Cancel"

class cGcQuadSearch:
    class GetName(HookFactory):
        _name = "cGcQuadSearch::GetName"
    class Run(HookFactory):
        _name = "cGcQuadSearch::Run"

class cGcQuadBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcQuadBehaviourTree::Construct"

class cGcWalkerLegArmourDestroyed:
    class GetName(HookFactory):
        _name = "cGcWalkerLegArmourDestroyed::GetName"
    class ReturnToIdle(HookFactory):
        _name = "cGcWalkerLegArmourDestroyed::ReturnToIdle"

class cGcWalkerTitanFall:
    class GetName(HookFactory):
        _name = "cGcWalkerTitanFall::GetName"
    class Subscribe(HookFactory):
        _name = "cGcWalkerTitanFall::Subscribe"
    class Run(HookFactory):
        _name = "cGcWalkerTitanFall::Run"

class cGcWalkerGuard:
    class GetName(HookFactory):
        _name = "cGcWalkerGuard::GetName"
    class Run(HookFactory):
        _name = "cGcWalkerGuard::Run"

class cGcWalkerAttack:
    class GetName(HookFactory):
        _name = "cGcWalkerAttack::GetName"
    class OnInit(HookFactory):
        _name = "cGcWalkerAttack::OnInit"
    class Run(HookFactory):
        _name = "cGcWalkerAttack::Run"
    class Cancel(HookFactory):
        _name = "cGcWalkerAttack::Cancel"

class cGcWalkerEnrage:
    class GetName(HookFactory):
        _name = "cGcWalkerEnrage::GetName"
    class Run(HookFactory):
        _name = "cGcWalkerEnrage::Run"

class cGcWalkerSearch:
    class GetName(HookFactory):
        _name = "cGcWalkerSearch::GetName"
    class Run(HookFactory):
        _name = "cGcWalkerSearch::Run"

class cGcWalkerBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcWalkerBehaviourTree::Construct"
    class SetLookAtPoint(HookFactory):
        _name = "cGcWalkerBehaviourTree::SetLookAtPoint"
    class UpdateLookingInternal(HookFactory):
        _name = "cGcWalkerBehaviourTree::UpdateLookingInternal"
    class Update(HookFactory):
        _name = "cGcWalkerBehaviourTree::Update"

class cGcWalkerBehaviour:
    class ForceSingleAnim(HookFactory):
        _name = "cGcWalkerBehaviour::ForceSingleAnim"

class cGcCreatureFullBodyIKComponentUpdater:
    class UpdateComponentsPostPhysics(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentUpdater::UpdateComponentsPostPhysics"

class ComponentInstancercGcCreatureFullBodyIKComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureFullBodyIKComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureFullBodyIKComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureFullBodyIKComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureFullBodyIKComponent::DestructInstance"

class RegisterCreatureIkComponentForNgui(HookFactory):
    _name = "RegisterCreatureIkComponentForNgui"

class cGcPistonConstraint:
    class PostSolve(HookFactory):
        _name = "cGcPistonConstraint::PostSolve"
    class OnAttach(HookFactory):
        _name = "cGcPistonConstraint::OnAttach"
    class GetNumRows(HookFactory):
        _name = "cGcPistonConstraint::GetNumRows"

class cGcCreatureCogConstraint:
    class PreSolve(HookFactory):
        _name = "cGcCreatureCogConstraint::PreSolve"

class cGcCreaturePelvisConstraint:
    class PreSolve(HookFactory):
        _name = "cGcCreaturePelvisConstraint::PreSolve"

class RefCountedJob:
    class ShouldAbort(HookFactory):
        _name = "RefCountedJob::ShouldAbort"
    class Increment(HookFactory):
        _name = "RefCountedJob::Increment"
    class Destroy(HookFactory):
        _name = "RefCountedJob::Destroy"

class cGcCreatureGroundNavigation:
    class Construct(HookFactory):
        _name = "cGcCreatureGroundNavigation::Construct"
    class Release(HookFactory):
        _name = "cGcCreatureGroundNavigation::Release"
    class Destruct(HookFactory):
        _name = "cGcCreatureGroundNavigation::Destruct"
    class SetMode(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetMode"
    class HasPath(HookFactory):
        _name = "cGcCreatureGroundNavigation::HasPath"
    class CopyPathFrom(HookFactory):
        _name = "cGcCreatureGroundNavigation::CopyPathFrom"
    class AddAvoidTurning(HookFactory):
        _name = "cGcCreatureGroundNavigation::AddAvoidTurning"
    class GetTurnPivot(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetTurnPivot"
    class GetBestMoveAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetBestMoveAnim"
    class ForceSingleAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::ForceSingleAnim"
    class GetForcedSingleAnimHandle(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetForcedSingleAnimHandle"
    class HasForcedSingleAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::HasForcedSingleAnim"
    class CancelForcedSingleAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::CancelForcedSingleAnim"
    class PlaySubAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::PlaySubAnim"
    class SetStealthy(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetStealthy"
    class ForceTurn(HookFactory):
        _name = "cGcCreatureGroundNavigation::ForceTurn"
    class GetMoveType(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetMoveType"
    class GetStealthy(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetStealthy"
    class GetRunAnimSpeed(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetRunAnimSpeed"
    class ShouldDespawn(HookFactory):
        _name = "cGcCreatureGroundNavigation::ShouldDespawn"
    class DebugRecreateNav(HookFactory):
        _name = "cGcCreatureGroundNavigation::DebugRecreateNav"
    class RequestRefreshNavMap(HookFactory):
        _name = "cGcCreatureGroundNavigation::RequestRefreshNavMap"
    class RenderNGuiVis(HookFactory):
        _name = "cGcCreatureGroundNavigation::RenderNGuiVis"
    class RenderNGuiControl(HookFactory):
        _name = "cGcCreatureGroundNavigation::RenderNGuiControl"
    class GetRight(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetRight"
    class RefreshMoveSpeeds(HookFactory):
        _name = "cGcCreatureGroundNavigation::RefreshMoveSpeeds"
    class SetMoveSpeeds(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetMoveSpeeds"
    class SetSpeedFactor(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetSpeedFactor"
    class GetDesiredRidingAnim(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetDesiredRidingAnim"
    class GetRidingLean(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetRidingLean"
    class IsBeingRidden(HookFactory):
        _name = "cGcCreatureGroundNavigation::IsBeingRidden"
    class SetMinObstacleAabbSize(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetMinObstacleAabbSize"
    class ZeroSteering(HookFactory):
        _name = "cGcCreatureGroundNavigation::ZeroSteering"
    class AddSteerToAvoidImpassable(HookFactory):
        _name = "cGcCreatureGroundNavigation::AddSteerToAvoidImpassable"
    class GetFrontNavMatrix(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetFrontNavMatrix"
    class Prepare(HookFactory):
        _name = "cGcCreatureGroundNavigation::Prepare"
    class GetIdleLength(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetIdleLength"
    class SetFakeAnimSpeed(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetFakeAnimSpeed"
    class GetRecipTurnRadiusForVector(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetRecipTurnRadiusForVector"
    class GetAdjustedSpeed(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetAdjustedSpeed"
    class Update(HookFactory):
        _name = "cGcCreatureGroundNavigation::Update"
    class DoRayCastJob(HookFactory):
        _name = "cGcCreatureGroundNavigation::DoRayCastJob"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureGroundNavigation::UpdatePostPhysics"
    class InitialAdjustToKnowledge(HookFactory):
        _name = "cGcCreatureGroundNavigation::InitialAdjustToKnowledge"
    class AdjustToKnowledge(HookFactory):
        _name = "cGcCreatureGroundNavigation::AdjustToKnowledge"
    class GetSteeringDirections(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetSteeringDirections"
    class RequestIdle(HookFactory):
        _name = "cGcCreatureGroundNavigation::RequestIdle"
    class SetMoveType(HookFactory):
        _name = "cGcCreatureGroundNavigation::SetMoveType"
    class StartPounce(HookFactory):
        _name = "cGcCreatureGroundNavigation::StartPounce"
    class GetAttackAnimCandidates(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetAttackAnimCandidates"
    class GetTurnRadius(HookFactory):
        _name = "cGcCreatureGroundNavigation::GetTurnRadius"
    class cGcCreatureGroundNavigation(HookFactory):
        _name = "cGcCreatureGroundNavigation::cGcCreatureGroundNavigation"

class cGcCreatureSwarmNavigation:
    class Construct(HookFactory):
        _name = "cGcCreatureSwarmNavigation::Construct"
    class Prepare(HookFactory):
        _name = "cGcCreatureSwarmNavigation::Prepare"
    class Destruct(HookFactory):
        _name = "cGcCreatureSwarmNavigation::Destruct"
    class NavigateToPoint(HookFactory):
        _name = "cGcCreatureSwarmNavigation::NavigateToPoint"
    class GetMoveType(HookFactory):
        _name = "cGcCreatureSwarmNavigation::GetMoveType"
    class SetSpeedFactor(HookFactory):
        _name = "cGcCreatureSwarmNavigation::SetSpeedFactor"
    class GetDesiredRidingAnim(HookFactory):
        _name = "cGcCreatureSwarmNavigation::GetDesiredRidingAnim"
    class GetLandingProgress(HookFactory):
        _name = "cGcCreatureSwarmNavigation::GetLandingProgress"
    class SetWantsToLand(HookFactory):
        _name = "cGcCreatureSwarmNavigation::SetWantsToLand"
    class NotifyOfPredator(HookFactory):
        _name = "cGcCreatureSwarmNavigation::NotifyOfPredator"
    class AddBoost(HookFactory):
        _name = "cGcCreatureSwarmNavigation::AddBoost"
    class IsBoosting(HookFactory):
        _name = "cGcCreatureSwarmNavigation::IsBoosting"
    class SetClampToGround(HookFactory):
        _name = "cGcCreatureSwarmNavigation::SetClampToGround"
    class GetSteeringDirections(HookFactory):
        _name = "cGcCreatureSwarmNavigation::GetSteeringDirections"
    class Update(HookFactory):
        _name = "cGcCreatureSwarmNavigation::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdatePostPhysics"
    class UpdateHoverRayJob(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdateHoverRayJob"
    class UpdateFloaterRayJob(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdateFloaterRayJob"
    class UpdateFishRayJob(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdateFishRayJob"
    class UpdateLandJellyfishRayJob(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdateLandJellyfishRayJob"
    class UpdateWallClimberRayJob(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdateWallClimberRayJob"
    class UpdatePounce(HookFactory):
        _name = "cGcCreatureSwarmNavigation::UpdatePounce"

class CreateCreatureGroundNavigation(HookFactory):
    _name = "CreateCreatureGroundNavigation"

class cGcRegionSegmentCache:
    class cGcRegionSegmentCache(HookFactory):
        _name = "cGcRegionSegmentCache::cGcRegionSegmentCache"

class CreateCreatureGroundIndoorNavigation(HookFactory):
    _name = "CreateCreatureGroundIndoorNavigation"

class CreateRobotGroundNavigation(HookFactory):
    _name = "CreateRobotGroundNavigation"

class CreateCreatureSwarmNavigation(HookFactory):
    _name = "CreateCreatureSwarmNavigation"

class cGcNavMap:
    class DebugRecreate(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::DebugRecreate"
    class Construct(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::Construct"
    class Prepare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::Prepare"
    class Release(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::Release"
    class UpdateOwnerPosition(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::UpdateOwnerPosition"
    class AddFlowSteering(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::AddFlowSteering"
    class PointIsInsideMapFast(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PointIsInsideMapFast"
    class CreateNewPoint(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::CreateNewPoint"
    class CreateNewSquare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::CreateNewSquare"
    class ShiftMap(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::ShiftMap"
    class RebuildMapPortion(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::RebuildMapPortion"
    class KickProbeTerrainJob(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::KickProbeTerrainJob"
    class PickupProbeTerrainJob(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PickupProbeTerrainJob"
    class PointIsInsideMapNoHeight(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PointIsInsideMapNoHeight"
    class PointIsReachable(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PointIsReachable"
    class GetSquaredDistanceBetweenSquares(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::GetSquaredDistanceBetweenSquares"
    class IsSquareInMapHalfCentre(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::IsSquareInMapHalfCentre"
    class InvalidatePoint(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::InvalidatePoint"
    class WorkOutNeighborReachability(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::WorkOutNeighborReachability"
    class PointIsInsideMap(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PointIsInsideMap"
    class PointIsBlocked(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMap<{T0}>::PointIsBlocked"

class cGcNavMapData:
    class CopyDistanceArray(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::CopyDistanceArray"
    class IsSquareNavigable(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::IsSquareNavigable"
    class IsSquareBlocked(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::IsSquareBlocked"
    class SetFourNeighborsReachable(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::SetFourNeighborsReachable"
    class CopyPoint(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::CopyPoint"
    class CopySquare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::CopySquare"
    class CopyProbeResults(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::CopyProbeResults"
    class ClearDynamicBlocked(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::ClearDynamicBlocked"
    class GetPointLocal(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapData<{T0}>::GetPointLocal"

class cGcNavMapPathfindJob:
    class CopyObstacleList(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::CopyObstacleList"
    class CopyAvoidBodyList(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::CopyAvoidBodyList"
    class FindClosestSquare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::FindClosestSquare"
    class FindClosestNavigableSquare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::FindClosestNavigableSquare"
    class FindClosestReachableNavigableSquare(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::FindClosestReachableNavigableSquare"
    class ExpandBlockedAreas(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::ExpandBlockedAreas"
    class FloodFillReachable(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::FloodFillReachable"
    class FloodFillDistances(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapPathfindJob<{T0}>::FloodFillDistances"

class PathJob(HookFactory):
    _templates = ("T0", )
    _name = "PathJob<{T0}>"

class ProbeAndPathJob(HookFactory):
    _templates = ("T0", )
    _name = "ProbeAndPathJob<{T0}>"

class cGcNavMapProbeJob:
    class ProbeSomeTerrain(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapProbeJob<{T0}>::ProbeSomeTerrain"
    class ProbePointHeight(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapProbeJob<{T0}>::ProbePointHeight"
    class ProbeTerrain(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMapProbeJob<{T0}>::ProbeTerrain"

class cTkIKRotYModifyConstraint:
    class OnAttach(HookFactory):
        _name = "cTkIKRotYModifyConstraint::OnAttach"
    class OnDetach(HookFactory):
        _name = "cTkIKRotYModifyConstraint::OnDetach"
    class GetNumRows(HookFactory):
        _name = "cTkIKRotYModifyConstraint::GetNumRows"
    class BuildRows(HookFactory):
        _name = "cTkIKRotYModifyConstraint::BuildRows"

class cGcPlayerWanted:
    class RegisterWitness(HookFactory):
        _name = "cGcPlayerWanted::RegisterWitness"
    class Construct(HookFactory):
        _name = "cGcPlayerWanted::Construct"
    class Update(HookFactory):
        _name = "cGcPlayerWanted::Update"
    class SetWantedLevel(HookFactory):
        _name = "cGcPlayerWanted::SetWantedLevel"
    class GetLastKnownPlayerPos(HookFactory):
        _name = "cGcPlayerWanted::GetLastKnownPlayerPos"
    class GetTimeoutTimer(HookFactory):
        _name = "cGcPlayerWanted::GetTimeoutTimer"
    class IsCombatStealthing(HookFactory):
        _name = "cGcPlayerWanted::IsCombatStealthing"
    class GetSentinelCrimeResponse(HookFactory):
        _name = "cGcPlayerWanted::GetSentinelCrimeResponse"

class cGcNavMeshTile:
    class Utils:
        class GetOffset(HookFactory):
            _name = "cGcNavMeshTile::Utils::GetOffset"
    class cGcNavMeshTile(HookFactory):
        _name = "cGcNavMeshTile::cGcNavMeshTile"
        _overload: overloads.cGcNavMeshTile.cGcNavMeshTile.overloads = "cGcNavMeshTile *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNavMeshTile.cGcNavMeshTile.overloads):
            cls._overload = overload_args
            return cls
    class CalcAabb(HookFactory):
        _name = "cGcNavMeshTile::CalcAabb"
    class Clear(HookFactory):
        _name = "cGcNavMeshTile::Clear"
    class AddPoly(HookFactory):
        _name = "cGcNavMeshTile::AddPoly"
    class RayIntersectsPoly(HookFactory):
        _name = "cGcNavMeshTile::RayIntersectsPoly"
    class GetIntersectingEdges(HookFactory):
        _name = "cGcNavMeshTile::GetIntersectingEdges"
    class GetPolyNeighbors(HookFactory):
        _name = "cGcNavMeshTile::GetPolyNeighbors"
    class BuildAabbs(HookFactory):
        _name = "cGcNavMeshTile::BuildAabbs"
    class LinkEdges(HookFactory):
        _name = "cGcNavMeshTile::LinkEdges"
    class LinkSelfEdges(HookFactory):
        _name = "cGcNavMeshTile::LinkSelfEdges"
    class DebugDraw(HookFactory):
        _name = "cGcNavMeshTile::DebugDraw"
    class FindPolyForPoint(HookFactory):
        _templates = ("T0", )
        _name = "cGcNavMeshTile::FindPolyForPoint<{T0}>"

class cGcNavPolyHandle:
    class cGcNavPolyHandle(HookFactory):
        _name = "cGcNavPolyHandle::cGcNavPolyHandle"

class PickHeight(HookFactory):
    _name = "PickHeight"

class cGcCreatureRoutine:
    class GenerateRoutine(HookFactory):
        _name = "cGcCreatureRoutine::GenerateRoutine"
    class BuildActualPaths(HookFactory):
        _name = "cGcCreatureRoutine::BuildActualPaths"
    class RemoveRedundantCells(HookFactory):
        _name = "cGcCreatureRoutine::RemoveRedundantCells"
    class PickSomeInterestingChunks(HookFactory):
        _name = "cGcCreatureRoutine::PickSomeInterestingChunks"
    class GetNeighboringArea(HookFactory):
        _name = "cGcCreatureRoutine::GetNeighboringArea"
    class GetRoutineStepForPosition(HookFactory):
        _name = "cGcCreatureRoutine::GetRoutineStepForPosition"
    class GetRoutineStepForTime(HookFactory):
        _name = "cGcCreatureRoutine::GetRoutineStepForTime"
    class GetStepDestination(HookFactory):
        _name = "cGcCreatureRoutine::GetStepDestination"
    class GetAdjustedStepDestination(HookFactory):
        _name = "cGcCreatureRoutine::GetAdjustedStepDestination"
    class GetCreatureMatrixForTime(HookFactory):
        _name = "cGcCreatureRoutine::GetCreatureMatrixForTime"
    class GetRoutineTime(HookFactory):
        _name = "cGcCreatureRoutine::GetRoutineTime"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcCreatureRoutine::RenderNGuiCallback"
    class SetCreatureHandle(HookFactory):
        _name = "cGcCreatureRoutine::SetCreatureHandle"
    class RepackCreature(HookFactory):
        _name = "cGcCreatureRoutine::RepackCreature"
    class Destroy(HookFactory):
        _name = "cGcCreatureRoutine::Destroy"
    class GetRoutineByUniqueId(HookFactory):
        _name = "cGcCreatureRoutine::GetRoutineByUniqueId"
    class PathCell:
        class SetPosition(HookFactory):
            _name = "cGcCreatureRoutine::PathCell::SetPosition"
    class GetPosFacingMatrix(HookFactory):
        _name = "cGcCreatureRoutine::GetPosFacingMatrix"
    class GetFacingForStep(HookFactory):
        _name = "cGcCreatureRoutine::GetFacingForStep"
    class ComputeTotalTime(HookFactory):
        _name = "cGcCreatureRoutine::ComputeTotalTime"
    class AssignAndDistributeExtraTime(HookFactory):
        _name = "cGcCreatureRoutine::AssignAndDistributeExtraTime"
    class ComputeTravelTimes(HookFactory):
        _name = "cGcCreatureRoutine::ComputeTravelTimes"

class ConvertCreatureIDToAudioClass(HookFactory):
    _name = "ConvertCreatureIDToAudioClass"

class cGcCreatureVocals:
    class Prepare(HookFactory):
        _name = "cGcCreatureVocals::Prepare"
    class ForcePlayCurrentVocal(HookFactory):
        _name = "cGcCreatureVocals::ForcePlayCurrentVocal"
    class Play(HookFactory):
        _name = "cGcCreatureVocals::Play"
    class PlaySnore(HookFactory):
        _name = "cGcCreatureVocals::PlaySnore"
    class Update(HookFactory):
        _name = "cGcCreatureVocals::Update"
    class SetVocalType(HookFactory):
        _name = "cGcCreatureVocals::SetVocalType"
    class PickCooldown(HookFactory):
        _name = "cGcCreatureVocals::PickCooldown"
    class RenderNGuiCallback(HookFactory):
        _name = "cGcCreatureVocals::RenderNGuiCallback"

class PlayCreatureVocal(HookFactory):
    _name = "PlayCreatureVocal"

class PlayCreatureSnore(HookFactory):
    _name = "PlayCreatureSnore"

class cGcRagdollLimiter:
    class GetRagdollForDespawn(HookFactory):
        _name = "cGcRagdollLimiter::GetRagdollForDespawn"
    class RegisterRagdoll(HookFactory):
        _name = "cGcRagdollLimiter::RegisterRagdoll"

class ComponentInstancercGcCreatureAttractorComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureAttractorComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureAttractorComponent::ConstructInstance"

class cGcShipAIHailData:
    class GetIdentifier(HookFactory):
        _name = "cGcShipAIHailData::GetIdentifier"
    class cGcShipAIHailData(HookFactory):
        _name = "cGcShipAIHailData::cGcShipAIHailData"

class cGcCreatureComponentUpdater:
    class UpdateComponents(HookFactory):
        _name = "cGcCreatureComponentUpdater::UpdateComponents"

class ComponentInstancercGcCreatureComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureComponent::DestructInstance"

class cGcCreatureMovementWeird:
    class cGcCreatureMovementWeird(HookFactory):
        _name = "cGcCreatureMovementWeird::cGcCreatureMovementWeird"
    class Prepare(HookFactory):
        _name = "cGcCreatureMovementWeird::Prepare"
    class Release(HookFactory):
        _name = "cGcCreatureMovementWeird::Release"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureMovementWeird::UpdatePostPhysics"

class cGcCreatureMovementFlock:
    class cGcCreatureMovementFlock(HookFactory):
        _name = "cGcCreatureMovementFlock::cGcCreatureMovementFlock"
    class Prepare(HookFactory):
        _name = "cGcCreatureMovementFlock::Prepare"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureMovementFlock::RenderNGui"
    class Release(HookFactory):
        _name = "cGcCreatureMovementFlock::Release"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureMovementFlock::UpdatePostPhysics"
    class NotifyOfPredator(HookFactory):
        _name = "cGcCreatureMovementFlock::NotifyOfPredator"
    class GetExtraPartNode(HookFactory):
        _name = "cGcCreatureMovementFlock::GetExtraPartNode"

class cGcCreatureMovementCrystal:
    class cGcCreatureMovementCrystal(HookFactory):
        _name = "cGcCreatureMovementCrystal::cGcCreatureMovementCrystal"
    class Prepare(HookFactory):
        _name = "cGcCreatureMovementCrystal::Prepare"
    class Release(HookFactory):
        _name = "cGcCreatureMovementCrystal::Release"
    class TriggerDeathAction(HookFactory):
        _name = "cGcCreatureMovementCrystal::TriggerDeathAction"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcCreatureMovementCrystal::UpdatePostPhysics"
    class SetSoundState(HookFactory):
        _name = "cGcCreatureMovementCrystal::SetSoundState"
    class cGcCrystalMovementElement:
        class SetState(HookFactory):
            _name = "cGcCreatureMovementCrystal::cGcCrystalMovementElement::SetState"
        class Update(HookFactory):
            _name = "cGcCreatureMovementCrystal::cGcCrystalMovementElement::Update"
        class cGcTentacleChain:
            class Prepare(HookFactory):
                _name = "cGcCreatureMovementCrystal::cGcCrystalMovementElement::cGcTentacleChain::Prepare"
            class Update(HookFactory):
                _name = "cGcCreatureMovementCrystal::cGcCrystalMovementElement::cGcTentacleChain::Update"
    class GetExtraPartNode(HookFactory):
        _name = "cGcCreatureMovementCrystal::GetExtraPartNode"

class cGcCreatureMovementBase:
    class Prepare(HookFactory):
        _name = "cGcCreatureMovementBase::Prepare"
    class SetSoundState(HookFactory):
        _name = "cGcCreatureMovementBase::SetSoundState"
    class TriggerDeathAction(HookFactory):
        _name = "cGcCreatureMovementBase::TriggerDeathAction"

class cGcRegionKnowledge:
    class IsValid(HookFactory):
        _name = "cGcRegionKnowledge::IsValid"
    class EstimateCellSize(HookFactory):
        _name = "cGcRegionKnowledge::EstimateCellSize"
    class ChunkIsAccessible(HookFactory):
        _name = "cGcRegionKnowledge::ChunkIsAccessible"
    class RoughHeightEstimate(HookFactory):
        _name = "cGcRegionKnowledge::RoughHeightEstimate"
        _overload: overloads.cGcRegionKnowledge.RoughHeightEstimate.overloads = "cGcRegionKnowledge *, const cTkVector3 *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRegionKnowledge.RoughHeightEstimate.overloads):
            cls._overload = overload_args
            return cls
    class GetFirstSurfaceBelow(HookFactory):
        _name = "cGcRegionKnowledge::GetFirstSurfaceBelow"
    class GetChunkForPosition(HookFactory):
        _name = "cGcRegionKnowledge::GetChunkForPosition"
    class BuildInterest(HookFactory):
        _name = "cGcRegionKnowledge::BuildInterest"
    class GetRandomSpawnPoint(HookFactory):
        _name = "cGcRegionKnowledge::GetRandomSpawnPoint"
    class GetWalkableArea(HookFactory):
        _name = "cGcRegionKnowledge::GetWalkableArea"
    class Construct(HookFactory):
        _name = "cGcRegionKnowledge::Construct"
    class PrepareAsync(HookFactory):
        _name = "cGcRegionKnowledge::PrepareAsync"
    class LocalPointToPlanet(HookFactory):
        _name = "cGcRegionKnowledge::LocalPointToPlanet"
    class PlanetPointToLocal(HookFactory):
        _name = "cGcRegionKnowledge::PlanetPointToLocal"
    class GetWorldUp(HookFactory):
        _name = "cGcRegionKnowledge::GetWorldUp"
    class BlockOutsideCells(HookFactory):
        _name = "cGcRegionKnowledge::BlockOutsideCells"
    class DecideInternalPassability(HookFactory):
        _name = "cGcRegionKnowledge::DecideInternalPassability"
    class BuildChunkInfo(HookFactory):
        _name = "cGcRegionKnowledge::BuildChunkInfo"
    class BuildChunkLinks(HookFactory):
        _name = "cGcRegionKnowledge::BuildChunkLinks"
    class FindChunkInterest(HookFactory):
        _name = "cGcRegionKnowledge::FindChunkInterest"
    class MarkBuildings(HookFactory):
        _name = "cGcRegionKnowledge::MarkBuildings"
    class Layer:
        class CanMergeRect(HookFactory):
            _name = "cGcRegionKnowledge::Layer::CanMergeRect"
        class TryMergeChunks(HookFactory):
            _name = "cGcRegionKnowledge::Layer::TryMergeChunks"
        class Chunkify(HookFactory):
            _name = "cGcRegionKnowledge::Layer::Chunkify"
        class Construct(HookFactory):
            _name = "cGcRegionKnowledge::Layer::Construct"
    class AddInstances(HookFactory):
        _name = "cGcRegionKnowledge::AddInstances"
    class LinkToNeighbors(HookFactory):
        _name = "cGcRegionKnowledge::LinkToNeighbors"
    class MatchNewLayerAcrossBoundary(HookFactory):
        _name = "cGcRegionKnowledge::MatchNewLayerAcrossBoundary"
    class Walk(HookFactory):
        _name = "cGcRegionKnowledge::Walk"
    class GetLoadedNeighboursWithinDistance(HookFactory):
        _name = "cGcRegionKnowledge::GetLoadedNeighboursWithinDistance"
    class GetConnectedChunks(HookFactory):
        _name = "cGcRegionKnowledge::GetConnectedChunks"
    class IsChunkPassageWideEnough(HookFactory):
        _name = "cGcRegionKnowledge::IsChunkPassageWideEnough"
    class GetChunkNeighbors(HookFactory):
        _name = "cGcRegionKnowledge::GetChunkNeighbors"
    class PlotPathToPoint(HookFactory):
        _name = "cGcRegionKnowledge::PlotPathToPoint"
    class CopyToNavMesh(HookFactory):
        _name = "cGcRegionKnowledge::CopyToNavMesh"
    class DebugRender(HookFactory):
        _name = "cGcRegionKnowledge::DebugRender"
    class RenderNGui(HookFactory):
        _name = "cGcRegionKnowledge::RenderNGui"
    class Remove(HookFactory):
        _name = "cGcRegionKnowledge::Remove"
    class GetClosestSurface(HookFactory):
        _name = "cGcRegionKnowledge::GetClosestSurface"
    class RecomputeInterestOnEdge(HookFactory):
        _name = "cGcRegionKnowledge::RecomputeInterestOnEdge"
    class GetLocalSurface(HookFactory):
        _name = "cGcRegionKnowledge::GetLocalSurface"
    class CheckCreateLayer(HookFactory):
        _name = "cGcRegionKnowledge::CheckCreateLayer"
    class GetLocalCenterFlat(HookFactory):
        _name = "cGcRegionKnowledge::GetLocalCenterFlat"
    class SetupPlaneNorms(HookFactory):
        _name = "cGcRegionKnowledge::SetupPlaneNorms"

class cGcRegionTerrainFar:
    class GetRegionKnowledge(HookFactory):
        _name = "cGcRegionTerrainFar::GetRegionKnowledge"
    class EmergencyUpgradeBuildings(HookFactory):
        _name = "cGcRegionTerrainFar::EmergencyUpgradeBuildings"
    class Construct(HookFactory):
        _name = "cGcRegionTerrainFar::Construct"
    class Polygonise(HookFactory):
        _name = "cGcRegionTerrainFar::Polygonise"
    class PostPolygonisePopulate(HookFactory):
        _name = "cGcRegionTerrainFar::PostPolygonisePopulate"
    class KnowledgeBuilt(HookFactory):
        _name = "cGcRegionTerrainFar::KnowledgeBuilt"
    class OnDistanceChanged(HookFactory):
        _name = "cGcRegionTerrainFar::OnDistanceChanged"
    class Invalidate(HookFactory):
        _name = "cGcRegionTerrainFar::Invalidate"
    class SetHidden(HookFactory):
        _name = "cGcRegionTerrainFar::SetHidden"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionTerrainFar::ThreadedPolygonise"
    class InvalidateKnowledge(HookFactory):
        _name = "cGcRegionTerrainFar::InvalidateKnowledge"
    class PreAsyncKnowledgeBuild(HookFactory):
        _name = "cGcRegionTerrainFar::PreAsyncKnowledgeBuild"
    class GetHeightmapBuffer(HookFactory):
        _name = "cGcRegionTerrainFar::GetHeightmapBuffer"
    class GetBuildings(HookFactory):
        _name = "cGcRegionTerrainFar::GetBuildings"
    class GetNodeName(HookFactory):
        _name = "cGcRegionTerrainFar::GetNodeName"
    class cGcRegionTerrainFar(HookFactory):
        _name = "cGcRegionTerrainFar::cGcRegionTerrainFar"

class cGcPathfindingObstacle:
    class cGcPathfindingObstacle(HookFactory):
        _name = "cGcPathfindingObstacle::cGcPathfindingObstacle"

class cGcCreatureEffectComponent:
    class OnAttached(HookFactory):
        _name = "cGcCreatureEffectComponent::OnAttached"
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureEffectComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureEffectComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcCreatureEffectComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureEffectComponent::Update"
    class RenderNGui(HookFactory):
        _name = "cGcCreatureEffectComponent::RenderNGui"

class ComponentInstancercGcCreatureEffectComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureEffectComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureEffectComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureEffectComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureEffectComponent::DestructInstance"

class ComponentInstancercGcCreatureEggComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureEggComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureEggComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureEggComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureEggComponent::DestructInstance"

class cGcCreatureLegIKComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcCreatureLegIKComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcCreatureLegIKComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcCreatureLegIKComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureLegIKComponent::Update"

class ComponentInstancercGcCreatureLegIKComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcCreatureLegIKComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcCreatureLegIKComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureLegIKComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcCreatureLegIKComponent::DestructInstance"

class cGcCreatureLegIK:
    class Prepare(HookFactory):
        _name = "cGcCreatureLegIK::Prepare"
    class Update(HookFactory):
        _name = "cGcCreatureLegIK::Update"

class GeomProbeTask:
    class GeomProbeTask(HookFactory):
        _name = "GeomProbeTask::GeomProbeTask"

class SetMotionBlurStartThresholdPixels(HookFactory):
    _name = "SetMotionBlurStartThresholdPixels"

class cTkPhysicsManager:
    class GetActiveTriggerList(HookFactory):
        _name = "cTkPhysicsManager::GetActiveTriggerList"
    class cTkPhysicsManager(HookFactory):
        _name = "cTkPhysicsManager::cTkPhysicsManager"
    class AddAction(HookFactory):
        _name = "cTkPhysicsManager::AddAction"
    class AddConstraint(HookFactory):
        _name = "cTkPhysicsManager::AddConstraint"
    class AddRigidBody(HookFactory):
        _name = "cTkPhysicsManager::AddRigidBody"
    class BroadphaseConvexShapeProbe(HookFactory):
        _name = "cTkPhysicsManager::BroadphaseConvexShapeProbe"
    class BroadphaseProbe(HookFactory):
        _name = "cTkPhysicsManager::BroadphaseProbe"
    class BroadphaseProbeRawIds(HookFactory):
        _name = "cTkPhysicsManager::BroadphaseProbeRawIds"
    class BroadphaseSphereProbe(HookFactory):
        _name = "cTkPhysicsManager::BroadphaseSphereProbe"
    class CastLocalRaySingle(HookFactory):
        _name = "cTkPhysicsManager::CastLocalRaySingle"
    class CastRay(HookFactory):
        _name = "cTkPhysicsManager::CastRay"
        _overload: overloads.cTkPhysicsManager.CastRay.overloads = "cTkPhysicsManager *, const cTkPhysRelVec3 *, const cTkPhysRelVec3 *, cTkContactPoint *, unsigned __int16, cTkRigidBody *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkPhysicsManager.CastRay.overloads):
            cls._overload = overload_args
            return cls
    class CastRaySingle(HookFactory):
        _name = "cTkPhysicsManager::CastRaySingle"
    class CastShape(HookFactory):
        _name = "cTkPhysicsManager::CastShape"
    class CastSphere(HookFactory):
        _name = "cTkPhysicsManager::CastSphere"
        _overload: overloads.cTkPhysicsManager.CastSphere.overloads = "cTkPhysicsManager *, float, const cTkVector3 *, const cTkVector3 *, cTkContactPoint *, int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkPhysicsManager.CastSphere.overloads):
            cls._overload = overload_args
            return cls
    class Construct(HookFactory):
        _name = "cTkPhysicsManager::Construct"
    class ConvexProbe(HookFactory):
        _name = "cTkPhysicsManager::ConvexProbe"
    class CreateSimpleConvexShape(HookFactory):
        _name = "cTkPhysicsManager::CreateSimpleConvexShape"
    class DebugRender(HookFactory):
        _name = "cTkPhysicsManager::DebugRender"
    class Destruct(HookFactory):
        _name = "cTkPhysicsManager::Destruct"
    class DisableCollisionsBetween(HookFactory):
        _name = "cTkPhysicsManager::DisableCollisionsBetween"
    class OnPostSolveSignal(HookFactory):
        _name = "cTkPhysicsManager::OnPostSolveSignal"
    class Prepare(HookFactory):
        _name = "cTkPhysicsManager::Prepare"
    class PrintObjectsList(HookFactory):
        _name = "cTkPhysicsManager::PrintObjectsList"
    class RemoveAction(HookFactory):
        _name = "cTkPhysicsManager::RemoveAction"
    class RemoveConstraint(HookFactory):
        _name = "cTkPhysicsManager::RemoveConstraint"
    class RemoveRigidBodies(HookFactory):
        _name = "cTkPhysicsManager::RemoveRigidBodies"
    class SetDebugRenderFlags(HookFactory):
        _name = "cTkPhysicsManager::SetDebugRenderFlags"
    class SetSpaceshipManiforldCallback(HookFactory):
        _name = "cTkPhysicsManager::SetSpaceshipManiforldCallback"
    class SetVehicleCreatureResponse(HookFactory):
        _name = "cTkPhysicsManager::SetVehicleCreatureResponse"
    class SetVehicleManifoldCallback(HookFactory):
        _name = "cTkPhysicsManager::SetVehicleManifoldCallback"
    class SetVehicleWheelGuard(HookFactory):
        _name = "cTkPhysicsManager::SetVehicleWheelGuard"
    class SpherePusher(HookFactory):
        _name = "cTkPhysicsManager::SpherePusher"
    class Update(HookFactory):
        _name = "cTkPhysicsManager::Update"
    class UpdateContactFlagsImmediately(HookFactory):
        _name = "cTkPhysicsManager::UpdateContactFlagsImmediately"

class cGcReflectionProbesManager:
    class Prepare(HookFactory):
        _name = "cGcReflectionProbesManager::Prepare"
    class EnqueueRender(HookFactory):
        _name = "cGcReflectionProbesManager::EnqueueRender"
    class ConstructTextures(HookFactory):
        _name = "cGcReflectionProbesManager::ConstructTextures"
    class ClosestProbeCheck(HookFactory):
        _name = "cGcReflectionProbesManager::ClosestProbeCheck"
    class SetupProbes(HookFactory):
        _name = "cGcReflectionProbesManager::SetupProbes"
    class EnqueueRenderTile(HookFactory):
        _name = "cGcReflectionProbesManager::EnqueueRenderTile"
    class ClearEnvironment(HookFactory):
        _name = "cGcReflectionProbesManager::ClearEnvironment"
    class SwitchEnvironment(HookFactory):
        _name = "cGcReflectionProbesManager::SwitchEnvironment"
    class ProbeReflectionsActive(HookFactory):
        _name = "cGcReflectionProbesManager::ProbeReflectionsActive"

class DistanceFromProbe(HookFactory):
    _name = "DistanceFromProbe"

class DisableDynamicNodes(HookFactory):
    _name = "DisableDynamicNodes"

class cGcRegionBase:
    class Construct(HookFactory):
        _name = "cGcRegionBase::Construct"
    class Destruct(HookFactory):
        _name = "cGcRegionBase::Destruct"
    class GenerateVoxels(HookFactory):
        _name = "cGcRegionBase::GenerateVoxels"
    class Polygonise(HookFactory):
        _name = "cGcRegionBase::Polygonise"
    class BuildKnowledge(HookFactory):
        _name = "cGcRegionBase::BuildKnowledge"
    class PostPolygonise(HookFactory):
        _name = "cGcRegionBase::PostPolygonise"
    class PostPolygonisePopulate(HookFactory):
        _name = "cGcRegionBase::PostPolygonisePopulate"
    class CancelPolygonise(HookFactory):
        _name = "cGcRegionBase::CancelPolygonise"
    class PolygoniserThread(HookFactory):
        _name = "cGcRegionBase::PolygoniserThread"
    class GeneratorThread(HookFactory):
        _name = "cGcRegionBase::GeneratorThread"
    class KnowledgeBuilderThread(HookFactory):
        _name = "cGcRegionBase::KnowledgeBuilderThread"
    class ThreadedGenerateVoxels(HookFactory):
        _name = "cGcRegionBase::ThreadedGenerateVoxels"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionBase::ThreadedPolygonise"
    class ThreadedKnowledgeBuild(HookFactory):
        _name = "cGcRegionBase::ThreadedKnowledgeBuild"
    class UnmapStream(HookFactory):
        _name = "cGcRegionBase::UnmapStream"
    class GetFacingTriangleStart(HookFactory):
        _name = "cGcRegionBase::GetFacingTriangleStart"
    class GetTileBlendTriangleStart(HookFactory):
        _name = "cGcRegionBase::GetTileBlendTriangleStart"
    class cGcRegionBase(HookFactory):
        _name = "cGcRegionBase::cGcRegionBase"

class cGcRegionAsteroid:
    class PostPolygonisePopulate(HookFactory):
        _name = "cGcRegionAsteroid::PostPolygonisePopulate"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionAsteroid::ThreadedPolygonise"
    class ThreadedGenerateVoxels(HookFactory):
        _name = "cGcRegionAsteroid::ThreadedGenerateVoxels"
    class CanPolygonise(HookFactory):
        _name = "cGcRegionAsteroid::CanPolygonise"
    class PostPolygoniseThread(HookFactory):
        _name = "cGcRegionAsteroid::PostPolygoniseThread"
    class Polygonise(HookFactory):
        _name = "cGcRegionAsteroid::Polygonise"
    class GetResource(HookFactory):
        _name = "cGcRegionAsteroid::GetResource"
    class Construct(HookFactory):
        _name = "cGcRegionAsteroid::Construct"
    class PostPolygonise(HookFactory):
        _name = "cGcRegionAsteroid::PostPolygonise"
    class PollToUnmapStreams(HookFactory):
        _name = "cGcRegionAsteroid::PollToUnmapStreams"
    class Invalidate(HookFactory):
        _name = "cGcRegionAsteroid::Invalidate"

class cGcBasicNoiseData2D:
    class GenerateNoise2D(HookFactory):
        _name = "cGcBasicNoiseData2D::GenerateNoise2D"
    class GenerateBasicHeightNoise(HookFactory):
        _name = "cGcBasicNoiseData2D::GenerateBasicHeightNoise"
    class LargeRegionNoise(HookFactory):
        _name = "cGcBasicNoiseData2D::LargeRegionNoise"
    class CalculateMaxGradientForBuilding(HookFactory):
        _name = "cGcBasicNoiseData2D::CalculateMaxGradientForBuilding"
    class GenerateElevation(HookFactory):
        _name = "cGcBasicNoiseData2D::GenerateElevation"
    class AllocFromTemp(HookFactory):
        _name = "cGcBasicNoiseData2D::AllocFromTemp"

class LargeRegionVoronoi(HookFactory):
    _name = "LargeRegionVoronoi"

class cGcGridNoise2DWrapper:
    class Generate2D(HookFactory):
        _name = "cGcGridNoise2DWrapper::Generate2D"

class cGcFeatureNoise2DWrapper:
    class Generate2D(HookFactory):
        _name = "cGcFeatureNoise2DWrapper::Generate2D"

class cGcRegionTerrain:
    class Construct(HookFactory):
        _name = "cGcRegionTerrain::Construct"
    class Destruct(HookFactory):
        _name = "cGcRegionTerrain::Destruct"
    class TryToClear(HookFactory):
        _name = "cGcRegionTerrain::TryToClear"
    class PolygoniseTerrain(HookFactory):
        _name = "cGcRegionTerrain::PolygoniseTerrain"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionTerrain::ThreadedPolygonise"
    class PostPolygoniseThread(HookFactory):
        _name = "cGcRegionTerrain::PostPolygoniseThread"
    class ThreadedGenerateVoxels(HookFactory):
        _name = "cGcRegionTerrain::ThreadedGenerateVoxels"
    class PollToMapStreams(HookFactory):
        _name = "cGcRegionTerrain::PollToMapStreams"
    class Polygonise(HookFactory):
        _name = "cGcRegionTerrain::Polygonise"
    class PostPolygonise(HookFactory):
        _name = "cGcRegionTerrain::PostPolygonise"
    class PartitionTrianglesByTile(HookFactory):
        _name = "cGcRegionTerrain::PartitionTrianglesByTile"
    class PartitionTriangles(HookFactory):
        _name = "cGcRegionTerrain::PartitionTriangles"
    class PollToUnmapStreams(HookFactory):
        _name = "cGcRegionTerrain::PollToUnmapStreams"
    class CancelPolygonise(HookFactory):
        _name = "cGcRegionTerrain::CancelPolygonise"
    class EditRegion(HookFactory):
        _name = "cGcRegionTerrain::EditRegion"
    class ApplyEdit(HookFactory):
        _name = "cGcRegionTerrain::ApplyEdit"
    class CleanUpLonersAfterEdit(HookFactory):
        _name = "cGcRegionTerrain::CleanUpLonersAfterEdit"
    class IsVoxelLoner(HookFactory):
        _name = "cGcRegionTerrain::IsVoxelLoner"
    class Invalidate(HookFactory):
        _name = "cGcRegionTerrain::Invalidate"
    class CalculateSurfaceDistanceFromWorldOffset(HookFactory):
        _name = "cGcRegionTerrain::CalculateSurfaceDistanceFromWorldOffset"
    class RegisterTerrainResourcePositions(HookFactory):
        _name = "cGcRegionTerrain::RegisterTerrainResourcePositions"
    class SpherifyVertices(HookFactory):
        _templates = ("T0", )
        _name = "cGcRegionTerrain::SpherifyVertices<{T0}>"
    class UpdateMatrix(HookFactory):
        _name = "cGcRegionTerrain::UpdateMatrix"
    class SetHidden(HookFactory):
        _name = "cGcRegionTerrain::SetHidden"
    class GetNodeName(HookFactory):
        _name = "cGcRegionTerrain::GetNodeName"
    class cGcRegionTerrain(HookFactory):
        _name = "cGcRegionTerrain::cGcRegionTerrain"
    class GetStatusColour(HookFactory):
        _name = "cGcRegionTerrain::GetStatusColour"
    class CanPolygonise(HookFactory):
        _name = "cGcRegionTerrain::CanPolygonise"
    class GetTileBlendTriangleStart(HookFactory):
        _name = "cGcRegionTerrain::GetTileBlendTriangleStart"

class cGcRegionTerrainVeryFar:
    class PostPolygonise(HookFactory):
        _name = "cGcRegionTerrainVeryFar::PostPolygonise"
    class Construct(HookFactory):
        _name = "cGcRegionTerrainVeryFar::Construct"
    class Polygonise(HookFactory):
        _name = "cGcRegionTerrainVeryFar::Polygonise"
    class OnDistanceChanged(HookFactory):
        _name = "cGcRegionTerrainVeryFar::OnDistanceChanged"
    class Invalidate(HookFactory):
        _name = "cGcRegionTerrainVeryFar::Invalidate"
    class SetHidden(HookFactory):
        _name = "cGcRegionTerrainVeryFar::SetHidden"
    class RemoveInstancesWithinArea(HookFactory):
        _name = "cGcRegionTerrainVeryFar::RemoveInstancesWithinArea"
    class SetInstanceActivating(HookFactory):
        _name = "cGcRegionTerrainVeryFar::SetInstanceActivating"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionTerrainVeryFar::ThreadedPolygonise"
    class GetNodeName(HookFactory):
        _name = "cGcRegionTerrainVeryFar::GetNodeName"
    class cGcRegionTerrainVeryFar(HookFactory):
        _name = "cGcRegionTerrainVeryFar::cGcRegionTerrainVeryFar"

class cGcRegionTerrainNear:
    class ThreadedKnowledgeBuild(HookFactory):
        _name = "cGcRegionTerrainNear::ThreadedKnowledgeBuild"
    class PostPolygonisePopulate(HookFactory):
        _name = "cGcRegionTerrainNear::PostPolygonisePopulate"
    class Construct(HookFactory):
        _name = "cGcRegionTerrainNear::Construct"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionTerrainNear::ThreadedPolygonise"
    class PollToMapStreams(HookFactory):
        _name = "cGcRegionTerrainNear::PollToMapStreams"
    class AreResourcesLoaded(HookFactory):
        _name = "cGcRegionTerrainNear::AreResourcesLoaded"
    class Polygonise(HookFactory):
        _name = "cGcRegionTerrainNear::Polygonise"
    class PostPolygonise(HookFactory):
        _name = "cGcRegionTerrainNear::PostPolygonise"
    class UpdateMatrix(HookFactory):
        _name = "cGcRegionTerrainNear::UpdateMatrix"
    class PollToUnmapStreams(HookFactory):
        _name = "cGcRegionTerrainNear::PollToUnmapStreams"
    class Invalidate(HookFactory):
        _name = "cGcRegionTerrainNear::Invalidate"
    class GetQuadResource(HookFactory):
        _name = "cGcRegionTerrainNear::GetQuadResource"
    class GetEditsLineResource(HookFactory):
        _name = "cGcRegionTerrainNear::GetEditsLineResource"
    class GetLineResource(HookFactory):
        _name = "cGcRegionTerrainNear::GetLineResource"
    class CancelPolygonise(HookFactory):
        _name = "cGcRegionTerrainNear::CancelPolygonise"
    class GetNodeName(HookFactory):
        _name = "cGcRegionTerrainNear::GetNodeName"
    class CanPolygonise(HookFactory):
        _name = "cGcRegionTerrainNear::CanPolygonise"
    class PostPolygoniseThread(HookFactory):
        _name = "cGcRegionTerrainNear::PostPolygoniseThread"

class cGcRegionTerrainMid:
    class Construct(HookFactory):
        _name = "cGcRegionTerrainMid::Construct"
    class CreatureUpdate(HookFactory):
        _name = "cGcRegionTerrainMid::CreatureUpdate"
    class Polygonise(HookFactory):
        _name = "cGcRegionTerrainMid::Polygonise"
    class PostPolygonise(HookFactory):
        _name = "cGcRegionTerrainMid::PostPolygonise"
    class KnowledgeBuilt(HookFactory):
        _name = "cGcRegionTerrainMid::KnowledgeBuilt"
    class SetHidden(HookFactory):
        _name = "cGcRegionTerrainMid::SetHidden"
    class Invalidate(HookFactory):
        _name = "cGcRegionTerrainMid::Invalidate"
    class AreResourcesLoaded(HookFactory):
        _name = "cGcRegionTerrainMid::AreResourcesLoaded"
    class ThreadedPolygonise(HookFactory):
        _name = "cGcRegionTerrainMid::ThreadedPolygonise"
    class PostPolygoniseThread(HookFactory):
        _name = "cGcRegionTerrainMid::PostPolygoniseThread"
    class ThreadedKnowledgeBuild(HookFactory):
        _name = "cGcRegionTerrainMid::ThreadedKnowledgeBuild"
    class ClearKnowledge(HookFactory):
        _name = "cGcRegionTerrainMid::ClearKnowledge"
    class InvalidateKnowledge(HookFactory):
        _name = "cGcRegionTerrainMid::InvalidateKnowledge"
    class PartitionTriangles(HookFactory):
        _name = "cGcRegionTerrainMid::PartitionTriangles"
    class cGcRegionTerrainMid(HookFactory):
        _name = "cGcRegionTerrainMid::cGcRegionTerrainMid"
    class GetNodeName(HookFactory):
        _name = "cGcRegionTerrainMid::GetNodeName"
    class GetCreatures(HookFactory):
        _name = "cGcRegionTerrainMid::GetCreatures"
    class GetGroundPhysics(HookFactory):
        _name = "cGcRegionTerrainMid::GetGroundPhysics"

class cGcTerrainTextureData:
    class cGcTerrainTextureData(HookFactory):
        _name = "cGcTerrainTextureData::cGcTerrainTextureData"
    class GetMinMip(HookFactory):
        _name = "cGcTerrainTextureData::GetMinMip"
    class MarkUsedPages(HookFactory):
        _name = "cGcTerrainTextureData::MarkUsedPages"
    class CreateTextures(HookFactory):
        _name = "cGcTerrainTextureData::CreateTextures"
    class TextureContextDeleteFunc(HookFactory):
        _name = "cGcTerrainTextureData::TextureContextDeleteFunc"
    class TextureAbortBakeFunc(HookFactory):
        _name = "cGcTerrainTextureData::TextureAbortBakeFunc"
    class TextureCompleteProbeFunc(HookFactory):
        _name = "cGcTerrainTextureData::TextureCompleteProbeFunc"
    class TextureEvictFunc(HookFactory):
        _name = "cGcTerrainTextureData::TextureEvictFunc"
    class GetSourceTextures(HookFactory):
        _name = "cGcTerrainTextureData::GetSourceTextures"
    class CheckSourceTexturesResident(HookFactory):
        _name = "cGcTerrainTextureData::CheckSourceTexturesResident"
    class DebugRenderTextures(HookFactory):
        _name = "cGcTerrainTextureData::DebugRenderTextures"

class CanApplyTerrainEdit(HookFactory):
    _name = "CanApplyTerrainEdit"

class EditTerrain(HookFactory):
    _name = "EditTerrain"

class cGcRegionDecoratorObjects:
    class FadeOut(HookFactory):
        _name = "cGcRegionDecoratorObjects::FadeOut"
    class Construct(HookFactory):
        _name = "cGcRegionDecoratorObjects::Construct"
    class UpdateDistance(HookFactory):
        _name = "cGcRegionDecoratorObjects::UpdateDistance"
    class DoUpgrading(HookFactory):
        _name = "cGcRegionDecoratorObjects::DoUpgrading"
    class FillSpawnParams(HookFactory):
        _name = "cGcRegionDecoratorObjects::FillSpawnParams"
    class GetObjectCount(HookFactory):
        _name = "cGcRegionDecoratorObjects::GetObjectCount"
    class Add(HookFactory):
        _name = "cGcRegionDecoratorObjects::Add"
    class SpawnObject(HookFactory):
        _name = "cGcRegionDecoratorObjects::SpawnObject"
    class AreFoliageResourcesLoaded(HookFactory):
        _name = "cGcRegionDecoratorObjects::AreFoliageResourcesLoaded"
    class Prepare(HookFactory):
        _name = "cGcRegionDecoratorObjects::Prepare"
    class Populate(HookFactory):
        _name = "cGcRegionDecoratorObjects::Populate"
    class PollToUpgradeFoliage(HookFactory):
        _name = "cGcRegionDecoratorObjects::PollToUpgradeFoliage"
    class Downgrade(HookFactory):
        _name = "cGcRegionDecoratorObjects::Downgrade"
    class SetUpgradeState(HookFactory):
        _name = "cGcRegionDecoratorObjects::SetUpgradeState"
    class Remove(HookFactory):
        _name = "cGcRegionDecoratorObjects::Remove"
    class CheckLargeObjectBounds(HookFactory):
        _name = "cGcRegionDecoratorObjects::CheckLargeObjectBounds"
    class GetObjectPosition(HookFactory):
        _name = "cGcRegionDecoratorObjects::GetObjectPosition"
    class GetObjectMatrix(HookFactory):
        _name = "cGcRegionDecoratorObjects::GetObjectMatrix"
    class AddInstanceNodes(HookFactory):
        _name = "cGcRegionDecoratorObjects::AddInstanceNodes"
    class CountObjsWithinArea(HookFactory):
        _name = "cGcRegionDecoratorObjects::CountObjsWithinArea"
    class PickNearbyEdibleInstance(HookFactory):
        _name = "cGcRegionDecoratorObjects::PickNearbyEdibleInstance"
    class RemoveInstancesWithinArea(HookFactory):
        _name = "cGcRegionDecoratorObjects::RemoveInstancesWithinArea"
    class AddNodes(HookFactory):
        _name = "cGcRegionDecoratorObjects::AddNodes"
    class GetInstanceCollisionNode(HookFactory):
        _name = "cGcRegionDecoratorObjects::GetInstanceCollisionNode"
    class AllocateObjectCollisionIndices(HookFactory):
        _name = "cGcRegionDecoratorObjects::AllocateObjectCollisionIndices"
    class AllocateInstanceCollision(HookFactory):
        _name = "cGcRegionDecoratorObjects::AllocateInstanceCollision"
    class FoliageRigidBody_SetRemoved(HookFactory):
        _name = "cGcRegionDecoratorObjects::FoliageRigidBody_SetRemoved"
    class FoliageRigidBody_CreatePhysicsBody(HookFactory):
        _name = "cGcRegionDecoratorObjects::FoliageRigidBody_CreatePhysicsBody"
    class ApplyPhysicsProperties(HookFactory):
        _name = "cGcRegionDecoratorObjects::ApplyPhysicsProperties"
    class FoliageRigidBody_StartRefreshingActiveBodies(HookFactory):
        _name = "cGcRegionDecoratorObjects::FoliageRigidBody_StartRefreshingActiveBodies"
    class FoliageRigidBody_RefreshActiveBodies(HookFactory):
        _name = "cGcRegionDecoratorObjects::FoliageRigidBody_RefreshActiveBodies"
    class CountPredicate_Objects(HookFactory):
        _name = "cGcRegionDecoratorObjects::CountPredicate_Objects"
    class CountPredicate_Physics(HookFactory):
        _name = "cGcRegionDecoratorObjects::CountPredicate_Physics"

class cTkVoxel:
    class GetTileBlend(HookFactory):
        _name = "cTkVoxel::GetTileBlend"
    class SetMaterial(HookFactory):
        _name = "cTkVoxel::SetMaterial"
    class SetSecondaryMaterial(HookFactory):
        _name = "cTkVoxel::SetSecondaryMaterial"
    class SetTexturePatch(HookFactory):
        _name = "cTkVoxel::SetTexturePatch"
    class ShortFromFloat(HookFactory):
        _name = "cTkVoxel::ShortFromFloat"
    class SetTileBlend(HookFactory):
        _name = "cTkVoxel::SetTileBlend"

class IsPlayerInFastMovingShip(HookFactory):
    _name = "IsPlayerInFastMovingShip"

class GetSmoothTransitionsForGeneration(HookFactory):
    _name = "GetSmoothTransitionsForGeneration"

class cGcTerrainRegionMapOcttree:
    class FindRootNodeIdx(HookFactory):
        _name = "cGcTerrainRegionMapOcttree::FindRootNodeIdx"
    class FindNodeIdx(HookFactory):
        _name = "cGcTerrainRegionMapOcttree::FindNodeIdx"
    class FindOverlappingNodeIndices(HookFactory):
        _name = "cGcTerrainRegionMapOcttree::FindOverlappingNodeIndices"
    class FindDeepestNodeIdx(HookFactory):
        _name = "cGcTerrainRegionMapOcttree::FindDeepestNodeIdx"
    class SubdivideNode(HookFactory):
        _name = "cGcTerrainRegionMapOcttree::SubdivideNode"

class cGcTextureBlockAllocator:
    class cGcTextureBlockAllocator(HookFactory):
        _name = "cGcTextureBlockAllocator::cGcTextureBlockAllocator"
    class CreateTexture(HookFactory):
        _name = "cGcTextureBlockAllocator::CreateTexture"
    class FlushBlockQueue(HookFactory):
        _name = "cGcTextureBlockAllocator::FlushBlockQueue"
    class FreeBlock(HookFactory):
        _name = "cGcTextureBlockAllocator::FreeBlock"

class ApplyFeedbackTex(HookFactory):
    _name = "ApplyFeedbackTex"

class ClearFeedbackTex(HookFactory):
    _name = "ClearFeedbackTex"

class ClearStatusTex(HookFactory):
    _name = "ClearStatusTex"

class UberPrimitiveFunction(HookFactory):
    _name = "UberPrimitiveFunction"

class SuperPrimitiveFunction(HookFactory):
    _name = "SuperPrimitiveFunction"

class BlendSuperPrimitiveData(HookFactory):
    _name = "BlendSuperPrimitiveData"

class GetSuperPrimitiveData(HookFactory):
    _name = "GetSuperPrimitiveData"

class BlendSuperFormulaData(HookFactory):
    _name = "BlendSuperFormulaData"

class GetSuperFormulaData(HookFactory):
    _name = "GetSuperFormulaData"

class SphereDensityFunction(HookFactory):
    _name = "SphereDensityFunction"

class SuperShape(HookFactory):
    _name = "SuperShape"

class SuperFunction3D(HookFactory):
    _name = "SuperFunction3D"

class Generate_InitPositions(HookFactory):
    _name = "Generate_InitPositions"

class Generate_NormalizePositions(HookFactory):
    _name = "Generate_NormalizePositions"

class Generate_BuildVoxelColumn_2D(HookFactory):
    _name = "Generate_BuildVoxelColumn_2D"

class Generate_BuildVoxelColumn_Grid(HookFactory):
    _name = "Generate_BuildVoxelColumn_Grid"

class Generate_BuildVoxelColumn_Buildings(HookFactory):
    _name = "Generate_BuildVoxelColumn_Buildings"

class Generate_BuildVoxelColumn_FillVoxels(HookFactory):
    _name = "Generate_BuildVoxelColumn_FillVoxels"

class Generate_BuildVoxels(HookFactory):
    _name = "Generate_BuildVoxels"

class Generate_MaxHeights(HookFactory):
    _name = "Generate_MaxHeights"

class Generate_Edits(HookFactory):
    _name = "Generate_Edits"

class cGcVoxelGeneratorTerrain:
    class Generate(HookFactory):
        _name = "cGcVoxelGeneratorTerrain::Generate"
    class GenerateApplyEdits(HookFactory):
        _name = "cGcVoxelGeneratorTerrain::GenerateApplyEdits"
    class GenerateBasic(HookFactory):
        _name = "cGcVoxelGeneratorTerrain::GenerateBasic"

class cTkTexture:
    class PropagateStateChange(HookFactory):
        _name = "cTkTexture::PropagateStateChange"
    class RefreshAniso(HookFactory):
        _name = "cTkTexture::RefreshAniso"
    class SaveFeedbackTracking(HookFactory):
        _name = "cTkTexture::SaveFeedbackTracking"
    class SetLodClamp(HookFactory):
        _name = "cTkTexture::SetLodClamp"
    class Clear(HookFactory):
        _name = "cTkTexture::Clear"
    class ClearMipStats(HookFactory):
        _name = "cTkTexture::ClearMipStats"
    class CommitMemoryDownToMip(HookFactory):
        _name = "cTkTexture::CommitMemoryDownToMip"
    class CompleteProbe(HookFactory):
        _name = "cTkTexture::CompleteProbe"
    class ComputeEvictablePages(HookFactory):
        _name = "cTkTexture::ComputeEvictablePages"
    class CopyBufferToPixelData(HookFactory):
        _name = "cTkTexture::CopyBufferToPixelData"
    class CopyPixelDataToBuffer(HookFactory):
        _name = "cTkTexture::CopyPixelDataToBuffer"
    class CouldCommitDownToMip(HookFactory):
        _name = "cTkTexture::CouldCommitDownToMip"
    class CreateEmptyTexture(HookFactory):
        _name = "cTkTexture::CreateEmptyTexture"
    class DecommitMemoryUpToMip(HookFactory):
        _name = "cTkTexture::DecommitMemoryUpToMip"
    class EndMipStats(HookFactory):
        _name = "cTkTexture::EndMipStats"
    class FrameEndMipStats(HookFactory):
        _name = "cTkTexture::FrameEndMipStats"
    class FrameStartMipStats(HookFactory):
        _name = "cTkTexture::FrameStartMipStats"
    class GetMipStats(HookFactory):
        _name = "cTkTexture::GetMipStats"
    class GetStoreFreeSpace(HookFactory):
        _name = "cTkTexture::GetStoreFreeSpace"
    class GetUav(HookFactory):
        _name = "cTkTexture::GetUav"
    class InitMipStats(HookFactory):
        _name = "cTkTexture::InitMipStats"
    class UpdateMipStats(HookFactory):
        _name = "cTkTexture::UpdateMipStats"
    class UpdateTextureAfterCommandsComplete(HookFactory):
        _name = "cTkTexture::UpdateTextureAfterCommandsComplete"

class cGcUberNoise2DWrapper:
    class Construct(HookFactory):
        _name = "cGcUberNoise2DWrapper::Construct"

class cGcBuildingPlacement:
    class GetBuildingMatrix(HookFactory):
        _name = "cGcBuildingPlacement::GetBuildingMatrix"
    class GetBuildingsAtPosition(HookFactory):
        _name = "cGcBuildingPlacement::GetBuildingsAtPosition"
    class GetTheorecticalBuildingPosition(HookFactory):
        _name = "cGcBuildingPlacement::GetTheorecticalBuildingPosition"
    class FindClusterBuildings(HookFactory):
        _name = "cGcBuildingPlacement::FindClusterBuildings"
    class CheckBuildingCanBePlaced(HookFactory):
        _name = "cGcBuildingPlacement::CheckBuildingCanBePlaced"

class cGcRegionDecoratorBuildings:
    class IsLocationPlayerInitialStart(HookFactory):
        _name = "cGcRegionDecoratorBuildings::IsLocationPlayerInitialStart"
    class GetBuildingClusterForPoint(HookFactory):
        _name = "cGcRegionDecoratorBuildings::GetBuildingClusterForPoint"
    class UpdateDistance(HookFactory):
        _name = "cGcRegionDecoratorBuildings::UpdateDistance"
    class TryToAddBuildingCluster(HookFactory):
        _name = "cGcRegionDecoratorBuildings::TryToAddBuildingCluster"
    class DecideInitialSettlementBuildingUnlocks(HookFactory):
        _name = "cGcRegionDecoratorBuildings::DecideInitialSettlementBuildingUnlocks"
    class CheckBuildingValid(HookFactory):
        _name = "cGcRegionDecoratorBuildings::CheckBuildingValid"
    class Prepare(HookFactory):
        _name = "cGcRegionDecoratorBuildings::Prepare"
    class SpawnBuildings(HookFactory):
        _name = "cGcRegionDecoratorBuildings::SpawnBuildings"
    class SetupBuildingComponents(HookFactory):
        _name = "cGcRegionDecoratorBuildings::SetupBuildingComponents"
    class SpawnWFCBaseParts(HookFactory):
        _name = "cGcRegionDecoratorBuildings::SpawnWFCBaseParts"
    class DespawnBuildings(HookFactory):
        _name = "cGcRegionDecoratorBuildings::DespawnBuildings"
    class PollToUpgradeLandmarks(HookFactory):
        _name = "cGcRegionDecoratorBuildings::PollToUpgradeLandmarks"
    class SpawnProceduralShipwreck(HookFactory):
        _name = "cGcRegionDecoratorBuildings::SpawnProceduralShipwreck"
    class GenerateWFCBuildings(HookFactory):
        _name = "cGcRegionDecoratorBuildings::GenerateWFCBuildings"
    class SetUpgradeState(HookFactory):
        _name = "cGcRegionDecoratorBuildings::SetUpgradeState"
    class Remove(HookFactory):
        _name = "cGcRegionDecoratorBuildings::Remove"
    class sAddBuildingParams:
        class sAddBuildingParams(HookFactory):
            _name = "cGcRegionDecoratorBuildings::sAddBuildingParams::sAddBuildingParams"
    class cGcUpgradeMarker:
        class cGcUpgradeMarker(HookFactory):
            _name = "cGcRegionDecoratorBuildings::cGcUpgradeMarker::cGcUpgradeMarker"

class cGcRegionDecoratorCreatures:
    class GenRoutinesUpdate(HookFactory):
        _name = "cGcRegionDecoratorCreatures::GenRoutinesUpdate"
    class Add(HookFactory):
        _name = "cGcRegionDecoratorCreatures::Add"
    class Prepare(HookFactory):
        _name = "cGcRegionDecoratorCreatures::Prepare"
    class Remove(HookFactory):
        _name = "cGcRegionDecoratorCreatures::Remove"
    class GetLocalTime(HookFactory):
        _name = "cGcRegionDecoratorCreatures::GetLocalTime"
    class GetRegionForCreature(HookFactory):
        _name = "cGcRegionDecoratorCreatures::GetRegionForCreature"
    class AddNodes(HookFactory):
        _name = "cGcRegionDecoratorCreatures::AddNodes"
    class CreateCreatureRoutines(HookFactory):
        _name = "cGcRegionDecoratorCreatures::CreateCreatureRoutines"
    class DestroyCreatureRoutines(HookFactory):
        _name = "cGcRegionDecoratorCreatures::DestroyCreatureRoutines"
    class CollectRoutinePositions(HookFactory):
        _name = "cGcRegionDecoratorCreatures::CollectRoutinePositions"
    class AddExistingCreature(HookFactory):
        _name = "cGcRegionDecoratorCreatures::AddExistingCreature"

class GetNumPositionsForTriangles(HookFactory):
    _name = "GetNumPositionsForTriangles"

class GetPositionsForTriangles(HookFactory):
    _name = "GetPositionsForTriangles"

class BuildObjectTypePerPositionList(HookFactory):
    _name = "BuildObjectTypePerPositionList"

class AddToGlobalCounterAndGetLimitedRegionCount(HookFactory):
    _name = "AddToGlobalCounterAndGetLimitedRegionCount"

class SubtractFromGlobalCounter(HookFactory):
    _name = "SubtractFromGlobalCounter"

class FindClosestRayContactPoint(HookFactory):
    _name = "FindClosestRayContactPoint"

class cGcFadeNodeInstance:
    class cGcFadeNodeInstance(HookFactory):
        _name = "cGcFadeNodeInstance::cGcFadeNodeInstance"
        _overload: overloads.cGcFadeNodeInstance.cGcFadeNodeInstance.overloads = "cGcFadeNodeInstance *, const cGcFadeNodeInstance *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcFadeNodeInstance.cGcFadeNodeInstance.overloads):
            cls._overload = overload_args
            return cls
    class SetNodeParamF(HookFactory):
        _name = "cGcFadeNodeInstance::SetNodeParamF"
    class SetNodeActivation(HookFactory):
        _name = "cGcFadeNodeInstance::SetNodeActivation"
    class AddNode(HookFactory):
        _name = "cGcFadeNodeInstance::AddNode"
    class Release(HookFactory):
        _name = "cGcFadeNodeInstance::Release"
    class ClearTestMaterialsRendered(HookFactory):
        _name = "cGcFadeNodeInstance::ClearTestMaterialsRendered"
    class ContextDeleteFunc(HookFactory):
        _name = "cGcFadeNodeInstance::ContextDeleteFunc"
    class RenderImposterToTexture(HookFactory):
        _name = "cGcFadeNodeInstance::RenderImposterToTexture"
    class Update(HookFactory):
        _name = "cGcFadeNodeInstance::Update"

class cGcRegionDecoratorPhysics:
    class Add(HookFactory):
        _name = "cGcRegionDecoratorPhysics::Add"
    class Generate(HookFactory):
        _name = "cGcRegionDecoratorPhysics::Generate"
    class Remove(HookFactory):
        _name = "cGcRegionDecoratorPhysics::Remove"
    class AllocCollision(HookFactory):
        _name = "cGcRegionDecoratorPhysics::AllocCollision"
    class ConstructCollision(HookFactory):
        _name = "cGcRegionDecoratorPhysics::ConstructCollision"
    class DestructCollision(HookFactory):
        _name = "cGcRegionDecoratorPhysics::DestructCollision"
    class AllocRigidBodies(HookFactory):
        _name = "cGcRegionDecoratorPhysics::AllocRigidBodies"
    class ConstructRigidBody(HookFactory):
        _name = "cGcRegionDecoratorPhysics::ConstructRigidBody"
    class DestructRigidBody(HookFactory):
        _name = "cGcRegionDecoratorPhysics::DestructRigidBody"
    class BatchDestructBodiesAndCollision(HookFactory):
        _name = "cGcRegionDecoratorPhysics::BatchDestructBodiesAndCollision"

class cGcMarkerList:
    class Update(HookFactory):
        _name = "cGcMarkerList::Update"
    class CheckTimers(HookFactory):
        _name = "cGcMarkerList::CheckTimers"
    class RemoveMarker(HookFactory):
        _name = "cGcMarkerList::RemoveMarker"
        _overload: overloads.cGcMarkerList.RemoveMarker.overloads = "cGcMarkerList *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMarkerList.RemoveMarker.overloads):
            cls._overload = overload_args
            return cls
    class RemoveMarkerWithNode(HookFactory):
        _name = "cGcMarkerList::RemoveMarkerWithNode"
    class RemoveMarkers(HookFactory):
        _name = "cGcMarkerList::RemoveMarkers"
    class TryAddMarker(HookFactory):
        _name = "cGcMarkerList::TryAddMarker"
        _overload: overloads.cGcMarkerList.TryAddMarker.overloads = "cGcMarkerList *, const cGcMarkerPoint *, bool, float, float, float, float, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMarkerList.TryAddMarker.overloads):
            cls._overload = overload_args
            return cls

class cGcInterstellarEvent:
    class IsInSeasonalTable(HookFactory):
        _name = "cGcInterstellarEvent::IsInSeasonalTable"

class cGcSimpleScanEffectPool:
    class Release(HookFactory):
        _templates = ("T0", )
        _name = "cGcSimpleScanEffectPool<{T0}>::Release"
    class ScanNode(HookFactory):
        _templates = ("T0", )
        _name = "cGcSimpleScanEffectPool<{T0}>::ScanNode"

class cGcScannedNodesList:
    class AddNode(HookFactory):
        _name = "cGcScannedNodesList::AddNode"
    class RemoveNode(HookFactory):
        _name = "cGcScannedNodesList::RemoveNode"
    class Update(HookFactory):
        _name = "cGcScannedNodesList::Update"
    class UpdateRender(HookFactory):
        _name = "cGcScannedNodesList::UpdateRender"
    class Clear(HookFactory):
        _name = "cGcScannedNodesList::Clear"

class sSolarDay:
    class GetSunDirection(HookFactory):
        _name = "sSolarDay::GetSunDirection"
    class GetSolarSunAngle(HookFactory):
        _name = "sSolarDay::GetSolarSunAngle"
    class GetRelativeSunAngle(HookFactory):
        _name = "sSolarDay::GetRelativeSunAngle"
        _overload: overloads.sSolarDay.GetRelativeSunAngle.overloads = "sSolarDay *, const cTkVector3 *, float"
        @classmethod
        def overload(cls, overload_args: overloads.sSolarDay.GetRelativeSunAngle.overloads):
            cls._overload = overload_args
            return cls
    class GetSolarSunAngles(HookFactory):
        _name = "sSolarDay::GetSolarSunAngles"
    class GetTimeOfDay(HookFactory):
        _name = "sSolarDay::GetTimeOfDay"

class cGcWeatherColourModifiers:
    class cGcWeatherColourModifiers(HookFactory):
        _name = "cGcWeatherColourModifiers::cGcWeatherColourModifiers"
        _overload: overloads.cGcWeatherColourModifiers.cGcWeatherColourModifiers.overloads = "cGcWeatherColourModifiers *, const cGcWeatherColourModifiers *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcWeatherColourModifiers.cGcWeatherColourModifiers.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherColourModifiers::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherColourModifiers::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWeatherColourModifiers::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherColourModifiers::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherColourModifiers::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherColourModifiers::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherColourModifiers::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherColourModifiers::WriteToXMLNodeExplicit"

class cGcWeatherEffectInstance:
    class AddAudioObject(HookFactory):
        _name = "cGcWeatherEffectInstance::AddAudioObject"
    class Update(HookFactory):
        _name = "cGcWeatherEffectInstance::Update"
    class UpdateAudioAndFade(HookFactory):
        _name = "cGcWeatherEffectInstance::UpdateAudioAndFade"
    class UpdateWander(HookFactory):
        _name = "cGcWeatherEffectInstance::UpdateWander"

class cGcWeatherEffectUpdate:
    class GenerateResourceAsync(HookFactory):
        _name = "cGcWeatherEffectUpdate::GenerateResourceAsync"
    class Init(HookFactory):
        _name = "cGcWeatherEffectUpdate::Init"
    class UpdateMeteorHazard(HookFactory):
        _name = "cGcWeatherEffectUpdate::UpdateMeteorHazard"
    class UpdateTornadoHazard(HookFactory):
        _name = "cGcWeatherEffectUpdate::UpdateTornadoHazard"
    class InitLightningHazard(HookFactory):
        _name = "cGcWeatherEffectUpdate::InitLightningHazard"
    class UpdateLightningHazard(HookFactory):
        _name = "cGcWeatherEffectUpdate::UpdateLightningHazard"
    class UpdateDynamicIndicator(HookFactory):
        _name = "cGcWeatherEffectUpdate::UpdateDynamicIndicator"
    class UpdateStaticIndicator(HookFactory):
        _name = "cGcWeatherEffectUpdate::UpdateStaticIndicator"
    class SpawnImpactGift(HookFactory):
        _name = "cGcWeatherEffectUpdate::SpawnImpactGift"
    class GetNearbyNetworkPlayerPositions(HookFactory):
        _name = "cGcWeatherEffectUpdate::GetNearbyNetworkPlayerPositions"

class cGcWeatherHazardGiftManager:
    class SpawnGift(HookFactory):
        _name = "cGcWeatherHazardGiftManager::SpawnGift"
    class Update(HookFactory):
        _name = "cGcWeatherHazardGiftManager::Update"
    class RemoveFurthestGift(HookFactory):
        _name = "cGcWeatherHazardGiftManager::RemoveFurthestGift"

class cGcGalaxyAttributeGenerator:
    class ClassifyVoxel(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::ClassifyVoxel"
    class ClassifyStarKeyAttributes(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::ClassifyStarKeyAttributes"
        _overload: overloads.cGcGalaxyAttributeGenerator.ClassifyStarKeyAttributes.overloads = "const unsigned __int64, cGcGalaxyAttributeGenerator::StarSystemKeyAttributes *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGalaxyAttributeGenerator.ClassifyStarKeyAttributes.overloads):
            cls._overload = overload_args
            return cls
    class ClassifyStarSystem(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::ClassifyStarSystem"
    class GetStarSystemSunRotationAxis(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::GetStarSystemSunRotationAxis"
    class GetPrimaryVoxelColour(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::GetPrimaryVoxelColour"
    class GetSecondaryVoxelColour(HookFactory):
        _name = "cGcGalaxyAttributeGenerator::GetSecondaryVoxelColour"

class LookupCLUT(HookFactory):
    _name = "LookupCLUT"

class cGcGalaxyMapUI:
    class SolarSelectionData:
        class SolarSelectionData(HookFactory):
            _name = "cGcGalaxyMapUI::SolarSelectionData::SolarSelectionData"
    class NavigationStateData:
        class NavigationStateData(HookFactory):
            _name = "cGcGalaxyMapUI::NavigationStateData::NavigationStateData"
    class GetSolarSelectionPos(HookFactory):
        _name = "cGcGalaxyMapUI::GetSolarSelectionPos"
    class cGcGalaxyMapUI(HookFactory):
        _name = "cGcGalaxyMapUI::cGcGalaxyMapUI"
    class Prepare(HookFactory):
        _name = "cGcGalaxyMapUI::Prepare"
    class Update(HookFactory):
        _name = "cGcGalaxyMapUI::Update"
    class UpdateMessageData(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateMessageData"
    class Render(HookFactory):
        _name = "cGcGalaxyMapUI::Render"
    class UpdateNavigationStateData(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateNavigationStateData"
    class SelectSolarSystem(HookFactory):
        _name = "cGcGalaxyMapUI::SelectSolarSystem"
    class GetCurrentSolarSelectionLocation(HookFactory):
        _name = "cGcGalaxyMapUI::GetCurrentSolarSelectionLocation"
    class GetSolarPanelMatrix(HookFactory):
        _name = "cGcGalaxyMapUI::GetSolarPanelMatrix"
    class HasSelection(HookFactory):
        _name = "cGcGalaxyMapUI::HasSelection"
    class UpdateScanningState(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateScanningState"
    class UpdateSolarInfoPosition(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateSolarInfoPosition"
    class UpdateSolarDiscoveryInfo(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateSolarDiscoveryInfo"
    class ShowCinematicBars(HookFactory):
        _name = "cGcGalaxyMapUI::ShowCinematicBars"
    class RenderTextLabel(HookFactory):
        _name = "cGcGalaxyMapUI::RenderTextLabel"
    class GenerateGalaxyName(HookFactory):
        _name = "cGcGalaxyMapUI::GenerateGalaxyName"
    class SolarInfoPanel:
        class GatherMissionTooltips(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::GatherMissionTooltips"
        class Reset(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::Reset"
        class Update(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::Update"
        class GetHyperdriveErrorMessage(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::GetHyperdriveErrorMessage"
        class UpdatePanelUI(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::UpdatePanelUI"
        class UpdateWarpLabel(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::UpdateWarpLabel"
        class SetupDiscoveryBlob(HookFactory):
            _name = "cGcGalaxyMapUI::SolarInfoPanel::SetupDiscoveryBlob"
    class UpdateMinimap(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateMinimap"
    class UpdateNavigationHelperText(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateNavigationHelperText"
    class UpdateFilterHelperText(HookFactory):
        _name = "cGcGalaxyMapUI::UpdateFilterHelperText"
    class CustomPathSelectionRenderFunction(HookFactory):
        _name = "cGcGalaxyMapUI::CustomPathSelectionRenderFunction"
    class CustomScanRenderFunction(HookFactory):
        _name = "cGcGalaxyMapUI::CustomScanRenderFunction"
    class RenderPathSelector(HookFactory):
        _name = "cGcGalaxyMapUI::RenderPathSelector"

class IntroCameraLook:
    class SmoothTo(HookFactory):
        _name = "IntroCameraLook::SmoothTo"

class cGcGalaxyMap:
    class Data:
        class Data(HookFactory):
            _name = "cGcGalaxyMap::Data::Data"
        class HasWaypointForNavMode(HookFactory):
            _name = "cGcGalaxyMap::Data::HasWaypointForNavMode"
        class GetPathForNavMode(HookFactory):
            _name = "cGcGalaxyMap::Data::GetPathForNavMode"
        class StartingIntro(HookFactory):
            _name = "cGcGalaxyMap::Data::StartingIntro"
        class ResetScreens(HookFactory):
            _name = "cGcGalaxyMap::Data::ResetScreens"
        class GetScreenSpacePosition(HookFactory):
            _name = "cGcGalaxyMap::Data::GetScreenSpacePosition"
            _overload: overloads.cGcGalaxyMap.Data.GetScreenSpacePosition.overloads = "cGcGalaxyMap::Data *, cTkVector2 *, const cTkVector3 *, bool *"
            @classmethod
            def overload(cls, overload_args: overloads.cGcGalaxyMap.Data.GetScreenSpacePosition.overloads):
                cls._overload = overload_args
                return cls
        class DrawLine(HookFactory):
            _name = "cGcGalaxyMap::Data::DrawLine"
            _overload: overloads.cGcGalaxyMap.Data.DrawLine.overloads = "cGcGalaxyMap::Data *, const cTkPhysRelVec3 *, const cTkPhysRelVec3 *, const cTkColour *, float, bool"
            @classmethod
            def overload(cls, overload_args: overloads.cGcGalaxyMap.Data.DrawLine.overloads):
                cls._overload = overload_args
                return cls
        class Construct(HookFactory):
            _name = "cGcGalaxyMap::Data::Construct"
        class CommonReset(HookFactory):
            _name = "cGcGalaxyMap::Data::CommonReset"
        class StateEnter(HookFactory):
            _name = "cGcGalaxyMap::Data::StateEnter"
        class StateExit(HookFactory):
            _name = "cGcGalaxyMap::Data::StateExit"
        class Update(HookFactory):
            _name = "cGcGalaxyMap::Data::Update"
        class EnqueueRender3D(HookFactory):
            _name = "cGcGalaxyMap::Data::EnqueueRender3D"
        class RenderNVG(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderNVG"
        class RenderIntroTransition(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderIntroTransition"
        class AddSingleVoxelCube(HookFactory):
            _name = "cGcGalaxyMap::Data::AddSingleVoxelCube"
        class DoSolarSelection(HookFactory):
            _name = "cGcGalaxyMap::Data::DoSolarSelection"
        class DoSolarDeselection(HookFactory):
            _name = "cGcGalaxyMap::Data::DoSolarDeselection"
        class DoSolarPopup(HookFactory):
            _name = "cGcGalaxyMap::Data::DoSolarPopup"
        class CreateLocalLinksFromNewSelection(HookFactory):
            _name = "cGcGalaxyMap::Data::CreateLocalLinksFromNewSelection"
        class InstigateFocusPullOutForPending(HookFactory):
            _name = "cGcGalaxyMap::Data::InstigateFocusPullOutForPending"
        class RenderSolarSelection(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderSolarSelection"
        class RenderSolarSystem(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderSolarSystem"
        class RenderSolarSystemOrbit(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderSolarSystemOrbit"
        class RenderStarTree(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderStarTree"
        class RenderGeneratedPath(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderGeneratedPath"
        class RenderVisitedPath(HookFactory):
            _name = "cGcGalaxyMap::Data::RenderVisitedPath"
        class RequestVoxelForCoordinate(HookFactory):
            _name = "cGcGalaxyMap::Data::RequestVoxelForCoordinate"
        class CleanPrefetchAroundCoordinate(HookFactory):
            _name = "cGcGalaxyMap::Data::CleanPrefetchAroundCoordinate"
        class CheckAndWrapCamera(HookFactory):
            _name = "cGcGalaxyMap::Data::CheckAndWrapCamera"
        class TryAcceptDestination(HookFactory):
            _name = "cGcGalaxyMap::Data::TryAcceptDestination"
        class TransitionBackToGame(HookFactory):
            _name = "cGcGalaxyMap::Data::TransitionBackToGame"
        class InitiateWarpToNextGalaxy(HookFactory):
            _name = "cGcGalaxyMap::Data::InitiateWarpToNextGalaxy"
        class FindVoxelAlongDirectionAtGenerationCubeBoundary(HookFactory):
            _name = "cGcGalaxyMap::Data::FindVoxelAlongDirectionAtGenerationCubeBoundary"
        class DoInputHandlingCommon(HookFactory):
            _name = "cGcGalaxyMap::Data::DoInputHandlingCommon"
        class DoInputHandlingWaypoints(HookFactory):
            _name = "cGcGalaxyMap::Data::DoInputHandlingWaypoints"
        class DoInputHandlingPushToNavigate(HookFactory):
            _name = "cGcGalaxyMap::Data::DoInputHandlingPushToNavigate"
        class DoInputNavigationModeSwitch(HookFactory):
            _name = "cGcGalaxyMap::Data::DoInputNavigationModeSwitch"
        class DoInputFilterModeSwitch(HookFactory):
            _name = "cGcGalaxyMap::Data::DoInputFilterModeSwitch"
        class MoveAlongCurrentNavPath(HookFactory):
            _name = "cGcGalaxyMap::Data::MoveAlongCurrentNavPath"
        class TransitionNavigationMode(HookFactory):
            _name = "cGcGalaxyMap::Data::TransitionNavigationMode"
        class UpdateNavigationIndex(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdateNavigationIndex"
        class TriggerSelectionTransition(HookFactory):
            _name = "cGcGalaxyMap::Data::TriggerSelectionTransition"
        class UpdateCamera(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdateCamera"
        class UpdateCameraDependant(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdateCameraDependant"
        class UpdateLocalStarFieldEffects(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdateLocalStarFieldEffects"
        class UpdateWaypoints(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdateWaypoints"
        class UpdatePathFindingTasks(HookFactory):
            _name = "cGcGalaxyMap::Data::UpdatePathFindingTasks"
        class SetMapFilter(HookFactory):
            _name = "cGcGalaxyMap::Data::SetMapFilter"
        class IsFilterAvailable(HookFactory):
            _name = "cGcGalaxyMap::Data::IsFilterAvailable"
        class GetCurrentPathGoalDistanceLightYears(HookFactory):
            _name = "cGcGalaxyMap::Data::GetCurrentPathGoalDistanceLightYears"
        class EnsurePathToCenterTaskIsValid(HookFactory):
            _name = "cGcGalaxyMap::Data::EnsurePathToCenterTaskIsValid"
        class RemovePathFindingTask(HookFactory):
            _name = "cGcGalaxyMap::Data::RemovePathFindingTask"
        class DiscoveryQueryCompleted(HookFactory):
            _name = "cGcGalaxyMap::Data::DiscoveryQueryCompleted"
        class KnowledgeRevisionWaypointsChanged(HookFactory):
            _name = "cGcGalaxyMap::Data::KnowledgeRevisionWaypointsChanged"
        class IsGalaxyCenterReachable(HookFactory):
            _name = "cGcGalaxyMap::Data::IsGalaxyCenterReachable"
        class CanScan(HookFactory):
            _name = "cGcGalaxyMap::Data::CanScan"
    class PreloadResources(HookFactory):
        _name = "cGcGalaxyMap::PreloadResources"
    class DrawCircle(HookFactory):
        _name = "cGcGalaxyMap::DrawCircle"
    class TriggerGalacticMapLocationSyncToGameState(HookFactory):
        _name = "cGcGalaxyMap::TriggerGalacticMapLocationSyncToGameState"
    class DiscoveryQueryCompleted(HookFactory):
        _name = "cGcGalaxyMap::DiscoveryQueryCompleted"
    class DiscoveryDataSubmitted(HookFactory):
        _name = "cGcGalaxyMap::DiscoveryDataSubmitted"
    class KnowledgeRevisionWaypointsChanged(HookFactory):
        _name = "cGcGalaxyMap::KnowledgeRevisionWaypointsChanged"
    class ComputeInitialSpawnVoxel(HookFactory):
        _name = "cGcGalaxyMap::ComputeInitialSpawnVoxel"
    class ComputeBlackHoleDestinyVoxel(HookFactory):
        _name = "cGcGalaxyMap::ComputeBlackHoleDestinyVoxel"
    class RenderSetup(HookFactory):
        _name = "cGcGalaxyMap::RenderSetup"
    class EnqueueRender3D(HookFactory):
        _name = "cGcGalaxyMap::EnqueueRender3D"
    class PollToCompleteCurrentVoxelGeneration(HookFactory):
        _name = "cGcGalaxyMap::PollToCompleteCurrentVoxelGeneration"
    class GetGalaxyVoxelCache(HookFactory):
        _name = "cGcGalaxyMap::GetGalaxyVoxelCache"

class MarkerSortIndex:
    class SortMarkersOnUA(HookFactory):
        _name = "MarkerSortIndex::SortMarkersOnUA"

class TkGalactic:
    class ParticleInstanceData:
        class ParticleInstanceData(HookFactory):
            _name = "TkGalactic::ParticleInstanceData::ParticleInstanceData"
    class cEgPStreamCacheResource:
        class cEgPStreamCacheResource(HookFactory):
            _name = "TkGalactic::cEgPStreamCacheResource::cEgPStreamCacheResource"
        class MapResStream(HookFactory):
            _name = "TkGalactic::cEgPStreamCacheResource::MapResStream"
        class UnmapStream(HookFactory):
            _name = "TkGalactic::cEgPStreamCacheResource::UnmapStream"
    class cEgPStreamNode:
        class ParsingFunc(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::FactoryFunc"
        class Render(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::Render"
        class ResourceFactoryFunc(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::ResourceFactoryFunc"
        class RenderStars(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::RenderStars"
        class RenderInstanced(HookFactory):
            _name = "TkGalactic::cEgPStreamNode::RenderInstanced"
    class InitParticleStreamVertex(HookFactory):
        _name = "TkGalactic::InitParticleStreamVertex"
    class InitExtension(HookFactory):
        _name = "TkGalactic::InitExtension"

class StarTree:
    class LinkNode:
        class LinkNode(HookFactory):
            _name = "StarTree::LinkNode::LinkNode"
        class RecurseAndRender(HookFactory):
            _name = "StarTree::LinkNode::RecurseAndRender"

class cGcGalaxyVoxelCache:
    class cGcGalaxyVoxelCache(HookFactory):
        _name = "cGcGalaxyVoxelCache::cGcGalaxyVoxelCache"
    class Update(HookFactory):
        _name = "cGcGalaxyVoxelCache::Update"
    class SyncSpatial(HookFactory):
        _name = "cGcGalaxyVoxelCache::SyncSpatial"
    class RunSyncSpatialJob(HookFactory):
        _name = "cGcGalaxyVoxelCache::RunSyncSpatialJob"
    class RunVoxelGenerationJob(HookFactory):
        _name = "cGcGalaxyVoxelCache::RunVoxelGenerationJob"
    class FindOrGenerateVoxelAtCoordinate(HookFactory):
        _name = "cGcGalaxyVoxelCache::FindOrGenerateVoxelAtCoordinate"
    class FindVoxelAtCoordinate(HookFactory):
        _name = "cGcGalaxyVoxelCache::FindVoxelAtCoordinate"
    class SpatialQueryFindNearest(HookFactory):
        _name = "cGcGalaxyVoxelCache::SpatialQueryFindNearest"
    class SpatialQueryFindNearestAlongDir(HookFactory):
        _name = "cGcGalaxyVoxelCache::SpatialQueryFindNearestAlongDir"
    class RecurseSystemLinkages(HookFactory):
        _name = "cGcGalaxyVoxelCache::RecurseSystemLinkages"
    class FindSpecificSolarSystemByUAIndex(HookFactory):
        _name = "cGcGalaxyVoxelCache::FindSpecificSolarSystemByUAIndex"
    class BeginPointRouteSearch(HookFactory):
        _name = "cGcGalaxyVoxelCache::BeginPointRouteSearch"
    class RunPointRouteSearch(HookFactory):
        _name = "cGcGalaxyVoxelCache::RunPointRouteSearch"
    class GPNPopulateGraphNode(HookFactory):
        _name = "cGcGalaxyVoxelCache::GPNPopulateGraphNode"

class GcGalaxyFx:
    class nvgMultiEdgeRadial(HookFactory):
        _name = "GcGalaxyFx::nvgMultiEdgeRadial"
    class nvgPulse(HookFactory):
        _name = "GcGalaxyFx::nvgPulse"

class cGcGalaxySolarSelection:
    class IncTimers(HookFactory):
        _name = "cGcGalaxySolarSelection::IncTimers"
    class DecTimers(HookFactory):
        _name = "cGcGalaxySolarSelection::DecTimers"

class cGcGalacticSolarSystemAddress:
    class ComputeVoxelLightyearDistanceToSystem(HookFactory):
        _name = "cGcGalacticSolarSystemAddress::ComputeVoxelLightyearDistanceToSystem"

class SolarQueryResult:
    class ComputeLightyearDistanceBetweenSolarSystems(HookFactory):
        _name = "SolarQueryResult::ComputeLightyearDistanceBetweenSolarSystems"

class VoxelTraversal:
    class WalkPathBresenham(HookFactory):
        _name = "VoxelTraversal::WalkPathBresenham"

class cGcGalaxyVoxelGenerator:
    class Populate(HookFactory):
        _name = "cGcGalaxyVoxelGenerator::Populate"

class cGcGalaxyGenerationSetupData:
    class cGcGalaxyGenerationSetupData(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::cGcGalaxyGenerationSetupData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::GenerateHash"
    class Interpolate(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::Interpolate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyGenerationSetupData::WriteToXMLNodeExplicit"

class cGcGalaxyVoxelTransitMesh:
    class Generate(HookFactory):
        _name = "cGcGalaxyVoxelTransitMesh::Generate"

class cGcNavTarget:
    class IsValid(HookFactory):
        _name = "cGcNavTarget::IsValid"

class cGcNavigationQuery:
    class IsValid(HookFactory):
        _name = "cGcNavigationQuery::IsValid"

class cGcNavigation:
    class Prepare(HookFactory):
        _name = "cGcNavigation::Prepare"
    class Release(HookFactory):
        _name = "cGcNavigation::Release"
    class Update(HookFactory):
        _name = "cGcNavigation::Update"
    class CancelNavigation(HookFactory):
        _name = "cGcNavigation::CancelNavigation"
    class NavigateToPoint(HookFactory):
        _name = "cGcNavigation::NavigateToPoint"
        _overload: overloads.cGcNavigation.NavigateToPoint.overloads = "cGcNavigation *, const cTkPhysRelVec3 *, float"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNavigation.NavigateToPoint.overloads):
            cls._overload = overload_args
            return cls
    class IsAtTarget(HookFactory):
        _name = "cGcNavigation::IsAtTarget"
    class UpdateNavTarget(HookFactory):
        _name = "cGcNavigation::UpdateNavTarget"
    class cGcNavigation(HookFactory):
        _name = "cGcNavigation::cGcNavigation"

class cGcNavBorderSegment:
    class cGcNavBorderSegment(HookFactory):
        _name = "cGcNavBorderSegment::cGcNavBorderSegment"

class AirNavPhysProbeJob(HookFactory):
    _name = "AirNavPhysProbeJob"

class cGcAirNavigator:
    class Prepare(HookFactory):
        _name = "cGcAirNavigator::Prepare"
    class Release(HookFactory):
        _name = "cGcAirNavigator::Release"
    class Init(HookFactory):
        _name = "cGcAirNavigator::Init"
    class Update(HookFactory):
        _name = "cGcAirNavigator::Update"
    class ApplyToSteering(HookFactory):
        _name = "cGcAirNavigator::ApplyToSteering"
    class GetNearestAccessiblePoint(HookFactory):
        _name = "cGcAirNavigator::GetNearestAccessiblePoint"
    class GeneratePath(HookFactory):
        _name = "cGcAirNavigator::GeneratePath"
    class UpdatePath(HookFactory):
        _name = "cGcAirNavigator::UpdatePath"
    class GetBestSubTarget(HookFactory):
        _name = "cGcAirNavigator::GetBestSubTarget"
    class UpdatePhysProbes(HookFactory):
        _name = "cGcAirNavigator::UpdatePhysProbes"
    class IsStuck(HookFactory):
        _name = "cGcAirNavigator::IsStuck"

class cGcAirNavPhysProbeJob:
    class ProbePhysics(HookFactory):
        _name = "cGcAirNavPhysProbeJob::ProbePhysics"

class cGcGroundNavigator:
    class sPathData:
        class Invalidate(HookFactory):
            _name = "cGcGroundNavigator::sPathData::Invalidate"
        class IsValid(HookFactory):
            _name = "cGcGroundNavigator::sPathData::IsValid"
    class Prepare(HookFactory):
        _name = "cGcGroundNavigator::Prepare"
    class Release(HookFactory):
        _name = "cGcGroundNavigator::Release"
    class Init(HookFactory):
        _name = "cGcGroundNavigator::Init"
    class Update(HookFactory):
        _name = "cGcGroundNavigator::Update"
    class ApplyToSteering(HookFactory):
        _name = "cGcGroundNavigator::ApplyToSteering"
    class IsPointNavigable(HookFactory):
        _name = "cGcGroundNavigator::IsPointNavigable"
    class CanPathToPoint(HookFactory):
        _name = "cGcGroundNavigator::CanPathToPoint"
    class GetNearestAccessiblePoint(HookFactory):
        _name = "cGcGroundNavigator::GetNearestAccessiblePoint"
    class InitKnowledge(HookFactory):
        _name = "cGcGroundNavigator::InitKnowledge"
    class GeneratePath(HookFactory):
        _name = "cGcGroundNavigator::GeneratePath"
    class UpdatePath(HookFactory):
        _name = "cGcGroundNavigator::UpdatePath"
    class GetBestSubTarget(HookFactory):
        _name = "cGcGroundNavigator::GetBestSubTarget"

class cGcNavMeshSpatialMap:
    class KeysFromTile(HookFactory):
        _name = "cGcNavMeshSpatialMap::KeysFromTile"
    class Insert(HookFactory):
        _name = "cGcNavMeshSpatialMap::Insert"
    class Remove(HookFactory):
        _name = "cGcNavMeshSpatialMap::Remove"

class cGcNavMeshUpdater:
    class Update(HookFactory):
        _name = "cGcNavMeshUpdater::Update"

class AlignUp(HookFactory):
    _templates = ("T0", )
    _name = "AlignUp<{T0}>"

class cGcNavSteering:
    class PreUpdate(HookFactory):
        _name = "cGcNavSteering::PreUpdate"
    class GenerateRecipTurnRadii(HookFactory):
        _name = "cGcNavSteering::GenerateRecipTurnRadii"
    class PickBestDirection(HookFactory):
        _name = "cGcNavSteering::PickBestDirection"

class cGcWeightedSpringSteering:
    class Init(HookFactory):
        _name = "cGcWeightedSpringSteering::Init"
    class Update(HookFactory):
        _name = "cGcWeightedSpringSteering::Update"
    class AddInterest(HookFactory):
        _name = "cGcWeightedSpringSteering::AddInterest"
    class cGcWeightedSpringSteering(HookFactory):
        _name = "cGcWeightedSpringSteering::cGcWeightedSpringSteering"

class cGcPlayerAim:
    class Update(HookFactory):
        _name = "cGcPlayerAim::Update"
    class UpdateAutoAim(HookFactory):
        _name = "cGcPlayerAim::UpdateAutoAim"
    class UpdateComponentTargeting(HookFactory):
        _name = "cGcPlayerAim::UpdateComponentTargeting"
    class GetTargetPoint(HookFactory):
        _name = "cGcPlayerAim::GetTargetPoint"
    class GetTargetNormal(HookFactory):
        _name = "cGcPlayerAim::GetTargetNormal"
    class GetTargetBody(HookFactory):
        _name = "cGcPlayerAim::GetTargetBody"
    class GetAutoAimTarget(HookFactory):
        _name = "cGcPlayerAim::GetAutoAimTarget"
    class GetCrosshairAimPos(HookFactory):
        _name = "cGcPlayerAim::GetCrosshairAimPos"
    class GetCrosshairPos(HookFactory):
        _name = "cGcPlayerAim::GetCrosshairPos"
    class SetAutoAimPos(HookFactory):
        _name = "cGcPlayerAim::SetAutoAimPos"
    class GetAutoAimPos(HookFactory):
        _name = "cGcPlayerAim::GetAutoAimPos"
    class GetAutoAimWeight(HookFactory):
        _name = "cGcPlayerAim::GetAutoAimWeight"

class GetAnimationId(HookFactory):
    _name = "GetAnimationId"

class TkWorldMatrixToHkTransform(HookFactory):
    _name = "TkWorldMatrixToHkTransform"

class cGcHumanController:
    class GetButtonInput(HookFactory):
        _name = "cGcHumanController::GetButtonInput"
    class GetAnalogInput(HookFactory):
        _name = "cGcHumanController::GetAnalogInput"

class cGcPlayerCameraLook:
    class Construct(HookFactory):
        _name = "cGcPlayerCameraLook::Construct"

class cGcCharacterSuitAudio:
    class SetCharacterNode(HookFactory):
        _name = "cGcCharacterSuitAudio::SetCharacterNode"
    class Prepare(HookFactory):
        _name = "cGcCharacterSuitAudio::Prepare"
    class UpdateAudioObjectPositions(HookFactory):
        _name = "cGcCharacterSuitAudio::UpdateAudioObjectPositions"

class sFrigateFlybyRequest:
    class sFrigateFlybyRequest(HookFactory):
        _name = "sFrigateFlybyRequest::sFrigateFlybyRequest"

class cGcFrigateFlyby:
    class CreateFlyby(HookFactory):
        _name = "cGcFrigateFlyby::CreateFlyby"
    class DestroyFlyby(HookFactory):
        _name = "cGcFrigateFlyby::DestroyFlyby"
    class EndFlyby(HookFactory):
        _name = "cGcFrigateFlyby::EndFlyby"
    class Update(HookFactory):
        _name = "cGcFrigateFlyby::Update"
    class IsSquadLeader(HookFactory):
        _name = "cGcFrigateFlyby::IsSquadLeader"
    class GetFlybyType(HookFactory):
        _name = "cGcFrigateFlyby::GetFlybyType"
    class UpdateSpawnMatrixImmediatelyPriorToSpawn(HookFactory):
        _name = "cGcFrigateFlyby::UpdateSpawnMatrixImmediatelyPriorToSpawn"
    class CalculateSingleShipFlybySpawnMatrix(HookFactory):
        _name = "cGcFrigateFlyby::CalculateSingleShipFlybySpawnMatrix"
    class CalculateFlybySpawnMatrix(HookFactory):
        _name = "cGcFrigateFlyby::CalculateFlybySpawnMatrix"
    class ChooseFrigateClasses(HookFactory):
        _name = "cGcFrigateFlyby::ChooseFrigateClasses"

class cGcNetworkPlayerTeleportEffect:
    class cGcNetworkPlayerTeleportEffect(HookFactory):
        _name = "cGcNetworkPlayerTeleportEffect::cGcNetworkPlayerTeleportEffect"
    class Update(HookFactory):
        _name = "cGcNetworkPlayerTeleportEffect::Update"
    class UpdateEffectNode(HookFactory):
        _name = "cGcNetworkPlayerTeleportEffect::UpdateEffectNode"

class cGcSpawnRequest:
    class cGcSpawnRequest(HookFactory):
        _name = "cGcSpawnRequest::cGcSpawnRequest"

class cGcSentinelInfo:
    class Init(HookFactory):
        _name = "cGcSentinelInfo::Init"
    class AddSpawnsForCurrentWave(HookFactory):
        _name = "cGcSentinelInfo::AddSpawnsForCurrentWave"
    class Add(HookFactory):
        _name = "cGcSentinelInfo::Add"
    class IsDefeated(HookFactory):
        _name = "cGcSentinelInfo::IsDefeated"
    class Update(HookFactory):
        _name = "cGcSentinelInfo::Update"
    class CalculateNeeded(HookFactory):
        _name = "cGcSentinelInfo::CalculateNeeded"
    class Destruct(HookFactory):
        _name = "cGcSentinelInfo::Destruct"
    class Reset(HookFactory):
        _name = "cGcSentinelInfo::Reset"

class cGcFiendManagerBase:
    class Add(HookFactory):
        _name = "cGcFiendManagerBase::Add"
    class GetDespawnDistance(HookFactory):
        _name = "cGcFiendManagerBase::GetDespawnDistance"
    class GetNumLocalAndRemoteCreaturesOfType(HookFactory):
        _name = "cGcFiendManagerBase::GetNumLocalAndRemoteCreaturesOfType"
    class CanTakeControlOfFiend(HookFactory):
        _name = "cGcFiendManagerBase::CanTakeControlOfFiend"
    class TakeControlOfFiend(HookFactory):
        _name = "cGcFiendManagerBase::TakeControlOfFiend"
    class ReportCrime(HookFactory):
        _name = "cGcFiendManagerBase::ReportCrime"
    class GetSpawnRequests(HookFactory):
        _name = "cGcFiendManagerBase::GetSpawnRequests"
    class Update(HookFactory):
        _name = "cGcFiendManagerBase::Update"
    class RenderNGui(HookFactory):
        _name = "cGcFiendManagerBase::RenderNGui"
    class DebugDraw(HookFactory):
        _name = "cGcFiendManagerBase::DebugDraw"
    class Release(HookFactory):
        _name = "cGcFiendManagerBase::Release"

class cGcFiendManagerUnderwater:
    class ReportCrime(HookFactory):
        _name = "cGcFiendManagerUnderwater::ReportCrime"
    class Update(HookFactory):
        _name = "cGcFiendManagerUnderwater::Update"
    class RenderNGui(HookFactory):
        _name = "cGcFiendManagerUnderwater::RenderNGui"
    class GetNumBigFishFiends(HookFactory):
        _name = "cGcFiendManagerUnderwater::GetNumBigFishFiends"

class cGcChooser:
    class GenChoice(HookFactory):
        _templates = ("T0", )
        _name = "cGcChooser<{T0}>::GenChoice"
    class Construct(HookFactory):
        _templates = ("T0", )
        _name = "cGcChooser<{T0}>::Construct"

class cGcVirtualisedCreature:
    class cGcVirtualisedCreature(HookFactory):
        _name = "cGcVirtualisedCreature::cGcVirtualisedCreature"

class TkAddNodesHandle:
    class Reset(HookFactory):
        _name = "TkAddNodesHandle::Reset"

class sTerrainEditData:
    class sTerrainEditData(HookFactory):
        _name = "sTerrainEditData::sTerrainEditData"

class cGcPlayerRespawn:
    class DoPlayerRespawn(HookFactory):
        _name = "cGcPlayerRespawn::DoPlayerRespawn"
    class UpdateShipInventories(HookFactory):
        _name = "cGcPlayerRespawn::UpdateShipInventories"
    class SpawnAndPositionFreighter(HookFactory):
        _name = "cGcPlayerRespawn::SpawnAndPositionFreighter"
    class GetMultiplayerOffsetRotation(HookFactory):
        _name = "cGcPlayerRespawn::GetMultiplayerOffsetRotation"
    class GetShipPositionStartScene(HookFactory):
        _name = "cGcPlayerRespawn::GetShipPositionStartScene"
    class GetSpawnPosition(HookFactory):
        _name = "cGcPlayerRespawn::GetSpawnPosition"
    class AdjustPositionOnFreighter(HookFactory):
        _name = "cGcPlayerRespawn::AdjustPositionOnFreighter"
    class UpdateSolarSystem(HookFactory):
        _name = "cGcPlayerRespawn::UpdateSolarSystem"
    class UpdateTeleportLocations(HookFactory):
        _name = "cGcPlayerRespawn::UpdateTeleportLocations"
    class DoPlayerPositioningRaycast(HookFactory):
        _name = "cGcPlayerRespawn::DoPlayerPositioningRaycast"
    class DoShipPositioningRaycast(HookFactory):
        _name = "cGcPlayerRespawn::DoShipPositioningRaycast"
    class ChooseSpawnLocation(HookFactory):
        _name = "cGcPlayerRespawn::ChooseSpawnLocation"
    class GetGameStartSpawnLocation(HookFactory):
        _name = "cGcPlayerRespawn::GetGameStartSpawnLocation"
    class GetPositionInSpace(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionInSpace"
    class GetPositionLookingAtSpaceBattle(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionLookingAtSpaceBattle"
    class GetPositionLookingAtPlanet(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionLookingAtPlanet"
    class GetPositionLookingAtSpaceStation(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionLookingAtSpaceStation"
    class GetPositionLookingAtAnomaly(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionLookingAtAnomaly"
    class GetPositionLookingInGeneratedDirection(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionLookingInGeneratedDirection"
    class GetPositionInSpaceStation(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionInSpaceStation"
    class GetPositionOnGameStartPlanet(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionOnGameStartPlanet"
    class GetPositionOnNearestPlanet(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionOnNearestPlanet"
    class GetPositionNextToCrashedShip(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionNextToCrashedShip"
    class GetPositionNextToPortal(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionNextToPortal"
    class GetWarpDestinationOnPlayerFreighter(HookFactory):
        _name = "cGcPlayerRespawn::GetWarpDestinationOnPlayerFreighter"
    class GetDestinationOnGameStartFreighter(HookFactory):
        _name = "cGcPlayerRespawn::GetDestinationOnGameStartFreighter"
    class GetTeleportDestinationOnPlayerFreighter(HookFactory):
        _name = "cGcPlayerRespawn::GetTeleportDestinationOnPlayerFreighter"
    class GetPositionOnNexus(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionOnNexus"
    class GetPositionOnNearestAbandonedFreighter(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionOnNearestAbandonedFreighter"
    class GetPositionNextToBase(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionNextToBase"
    class GetPositionAwayFromShip(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionAwayFromShip"
    class GetSeasonalStartPositionNearBuilding(HookFactory):
        _name = "cGcPlayerRespawn::GetSeasonalStartPositionNearBuilding"
    class GetPositionNextToBuilding(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionNextToBuilding"
    class GetPrecisePositionNextToBuilding(HookFactory):
        _name = "cGcPlayerRespawn::GetPrecisePositionNextToBuilding"
    class GetPositionForTeleportEndpointInStation(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionForTeleportEndpointInStation"
    class GetPositionForTeleportEndpointInBase(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionForTeleportEndpointInBase"
    class GetPositionForTeleportEndpointInSettlement(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionForTeleportEndpointInSettlement"
    class GetPositionForTeleportEndpointOnFrigate(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionForTeleportEndpointOnFrigate"
    class GetLastFreighterTransform(HookFactory):
        _name = "cGcPlayerRespawn::GetLastFreighterTransform"
    class GetPositionForTeleportEndpointInAtlas(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionForTeleportEndpointInAtlas"
    class GetPositionFromSave(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionFromSave"
    class GetLocationFromDebugInput(HookFactory):
        _name = "cGcPlayerRespawn::GetLocationFromDebugInput"
    class GetPositionFromDebugInput(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionFromDebugInput"
    class GetPositionFromCurrentUGCBase(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionFromCurrentUGCBase"
    class GetPositionOnPlanetSurface(HookFactory):
        _name = "cGcPlayerRespawn::GetPositionOnPlanetSurface"
    class GetLastKnownPlayerState(HookFactory):
        _name = "cGcPlayerRespawn::GetLastKnownPlayerState"

class RayCastInfo:
    class AddLookRays(HookFactory):
        _name = "RayCastInfo::AddLookRays"
    class AddRay(HookFactory):
        _name = "RayCastInfo::AddRay"
    class AddShootRays(HookFactory):
        _name = "RayCastInfo::AddShootRays"

class AnimateItems:
    class GetPos(HookFactory):
        _name = "AnimateItems::GetPos"

class cGcWitness:
    class Update(HookFactory):
        _name = "cGcWitness::Update"

class cGcAnalogueMenuNavigator:
    class Update(HookFactory):
        _name = "cGcAnalogueMenuNavigator::Update"

class cGcMuzzleFlash:
    class Construct(HookFactory):
        _name = "cGcMuzzleFlash::Construct"
        _overload: overloads.cGcMuzzleFlash.Construct.overloads = "cGcMuzzleFlash *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMuzzleFlash.Construct.overloads):
            cls._overload = overload_args
            return cls
    class Prepare(HookFactory):
        _name = "cGcMuzzleFlash::Prepare"
    class SetColour(HookFactory):
        _name = "cGcMuzzleFlash::SetColour"
    class SetScale(HookFactory):
        _name = "cGcMuzzleFlash::SetScale"
    class SetParticlesEffect(HookFactory):
        _name = "cGcMuzzleFlash::SetParticlesEffect"

class cGcProjectile:
    class Update(HookFactory):
        _name = "cGcProjectile::Update"
    class GetDamage(HookFactory):
        _name = "cGcProjectile::GetDamage"

class sNetProjectileImpact:
    class sNetProjectileImpact(HookFactory):
        _name = "sNetProjectileImpact::sNetProjectileImpact"

class cGcDroneAttackMovement:
    class GetName(HookFactory):
        _name = "cGcDroneAttackMovement::GetName"
    class cGcDroneAttackMovement(HookFactory):
        _name = "cGcDroneAttackMovement::cGcDroneAttackMovement"
    class OnInit(HookFactory):
        _name = "cGcDroneAttackMovement::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneAttackMovement::Run"
    class UpdatePositioning(HookFactory):
        _name = "cGcDroneAttackMovement::UpdatePositioning"
    class ChooseAttackPosition(HookFactory):
        _name = "cGcDroneAttackMovement::ChooseAttackPosition"

class cGcDroneAttackShooting:
    class GetName(HookFactory):
        _name = "cGcDroneAttackShooting::GetName"
    class cGcDroneAttackShooting(HookFactory):
        _name = "cGcDroneAttackShooting::cGcDroneAttackShooting"
    class OnInit(HookFactory):
        _name = "cGcDroneAttackShooting::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneAttackShooting::Run"

class cGcDroneCheckAlert:
    class GetName(HookFactory):
        _name = "cGcDroneCheckAlert::GetName"
    class Subscribe(HookFactory):
        _name = "cGcDroneCheckAlert::Subscribe"
    class Run(HookFactory):
        _name = "cGcDroneCheckAlert::Run"

class cGcDroneGetAntagonistTarget:
    class GetName(HookFactory):
        _name = "cGcDroneGetAntagonistTarget::GetName"
    class cGcDroneGetAntagonistTarget(HookFactory):
        _name = "cGcDroneGetAntagonistTarget::cGcDroneGetAntagonistTarget"
    class Run(HookFactory):
        _name = "cGcDroneGetAntagonistTarget::Run"
    class Cancel(HookFactory):
        _name = "cGcDroneGetAntagonistTarget::Cancel"

class cGcDroneCoverMovement:
    class GetName(HookFactory):
        _name = "cGcDroneCoverMovement::GetName"
    class OnInit(HookFactory):
        _name = "cGcDroneCoverMovement::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneCoverMovement::Run"

class cGcDroneDoRepairs:
    class GetName(HookFactory):
        _name = "cGcDroneDoRepairs::GetName"
    class Run(HookFactory):
        _name = "cGcDroneDoRepairs::Run"

class cGcDroneFindPlayer:
    class GetName(HookFactory):
        _name = "cGcDroneFindPlayer::GetName"
    class OnInit(HookFactory):
        _name = "cGcDroneFindPlayer::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneFindPlayer::Run"

class cGcDronePatrol:
    class GetName(HookFactory):
        _name = "cGcDronePatrol::GetName"
    class cGcDronePatrol(HookFactory):
        _name = "cGcDronePatrol::cGcDronePatrol"
    class AlreadyScanned(HookFactory):
        _name = "cGcDronePatrol::AlreadyScanned"
    class OnInit(HookFactory):
        _name = "cGcDronePatrol::OnInit"
    class Subscribe(HookFactory):
        _name = "cGcDronePatrol::Subscribe"
    class GetSearchCentrePos(HookFactory):
        _name = "cGcDronePatrol::GetSearchCentrePos"
    class GetSearchRadius(HookFactory):
        _name = "cGcDronePatrol::GetSearchRadius"
    class ChooseTargetArea(HookFactory):
        _name = "cGcDronePatrol::ChooseTargetArea"
    class Run(HookFactory):
        _name = "cGcDronePatrol::Run"
    class GetToTarget(HookFactory):
        _name = "cGcDronePatrol::GetToTarget"
    class ChooseScanTarget(HookFactory):
        _name = "cGcDronePatrol::ChooseScanTarget"
    class InspectTarget(HookFactory):
        _name = "cGcDronePatrol::InspectTarget"
    class GetScanRadius(HookFactory):
        _name = "cGcDronePatrol::GetScanRadius"
    class InRange(HookFactory):
        _name = "cGcDronePatrol::InRange"

class cGcDroneIsOwnerWanted:
    class GetName(HookFactory):
        _name = "cGcDroneIsOwnerWanted::GetName"
    class Run(HookFactory):
        _name = "cGcDroneIsOwnerWanted::Run"

class cGcDroneFollowPlayer:
    class GetName(HookFactory):
        _name = "cGcDroneFollowPlayer::GetName"
    class cGcDroneFollowPlayer(HookFactory):
        _name = "cGcDroneFollowPlayer::cGcDroneFollowPlayer"
    class Run(HookFactory):
        _name = "cGcDroneFollowPlayer::Run"
    class GetSearchCentrePos(HookFactory):
        _name = "cGcDroneFollowPlayer::GetSearchCentrePos"
    class GetSearchRadius(HookFactory):
        _name = "cGcDroneFollowPlayer::GetSearchRadius"
    class Cancel(HookFactory):
        _name = "cGcDroneFollowPlayer::Cancel"

class cGcDronePlayerFocusBehaviour:
    class GetName(HookFactory):
        _name = "cGcDronePlayerFocusBehaviour::GetName"
    class cGcDronePlayerFocusBehaviour(HookFactory):
        _name = "cGcDronePlayerFocusBehaviour::cGcDronePlayerFocusBehaviour"
    class Subscribe(HookFactory):
        _name = "cGcDronePlayerFocusBehaviour::Subscribe"
    class ShowMood(HookFactory):
        _name = "cGcDronePlayerFocusBehaviour::ShowMood"
    class FocusOnPlayer(HookFactory):
        _name = "cGcDronePlayerFocusBehaviour::FocusOnPlayer"

class cGcDroneInteract:
    class GetName(HookFactory):
        _name = "cGcDroneInteract::GetName"
    class Run(HookFactory):
        _name = "cGcDroneInteract::Run"

class cGcDroneMoodResponse:
    class GetName(HookFactory):
        _name = "cGcDroneMoodResponse::GetName"
    class Run(HookFactory):
        _name = "cGcDroneMoodResponse::Run"

class cGcDroneInvestigate:
    class GetName(HookFactory):
        _name = "cGcDroneInvestigate::GetName"
    class AngleFromPlayer(HookFactory):
        _name = "cGcDroneInvestigate::AngleFromPlayer"
    class OnInit(HookFactory):
        _name = "cGcDroneInvestigate::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneInvestigate::Run"
    class NGuiRender(HookFactory):
        _name = "cGcDroneInvestigate::NGuiRender"
    class Subscribe(HookFactory):
        _name = "cGcDroneInvestigate::Subscribe"
    class AttackCriminal(HookFactory):
        _name = "cGcDroneInvestigate::AttackCriminal"
    class ScanCriminal(HookFactory):
        _name = "cGcDroneInvestigate::ScanCriminal"

class cGcDronePlaceCover:
    class GetName(HookFactory):
        _name = "cGcDronePlaceCover::GetName"
    class cGcDronePlaceCover(HookFactory):
        _name = "cGcDronePlaceCover::cGcDronePlaceCover"
    class Run(HookFactory):
        _name = "cGcDronePlaceCover::Run"

class cGcDroneStunned:
    class GetName(HookFactory):
        _name = "cGcDroneStunned::GetName"
    class OnInit(HookFactory):
        _name = "cGcDroneStunned::OnInit"
    class Run(HookFactory):
        _name = "cGcDroneStunned::Run"
    class Cancel(HookFactory):
        _name = "cGcDroneStunned::Cancel"
    class EndStun(HookFactory):
        _name = "cGcDroneStunned::EndStun"

class cGcDroneSummon:
    class GetName(HookFactory):
        _name = "cGcDroneSummon::GetName"
    class cGcDroneSummon(HookFactory):
        _name = "cGcDroneSummon::cGcDroneSummon"
    class Run(HookFactory):
        _name = "cGcDroneSummon::Run"
    class ClearPreviews(HookFactory):
        _name = "cGcDroneSummon::ClearPreviews"
    class Cancel(HookFactory):
        _name = "cGcDroneSummon::Cancel"

class cGcDroneSummonMovement:
    class GetName(HookFactory):
        _name = "cGcDroneSummonMovement::GetName"
    class Run(HookFactory):
        _name = "cGcDroneSummonMovement::Run"

class cGcDroneSummonAndDismiss:
    class GetName(HookFactory):
        _name = "cGcDroneSummonAndDismiss::GetName"
    class Run(HookFactory):
        _name = "cGcDroneSummonAndDismiss::Run"
    class Subscribe(HookFactory):
        _name = "cGcDroneSummonAndDismiss::Subscribe"

class cGcDroneBehaviour:
    class cGcDroneBehaviour(HookFactory):
        _name = "cGcDroneBehaviour::cGcDroneBehaviour"
    class GetPerception(HookFactory):
        _name = "cGcDroneBehaviour::GetPerception"
    class HasLineOfSight(HookFactory):
        _name = "cGcDroneBehaviour::HasLineOfSight"
    class NotifyWanted(HookFactory):
        _name = "cGcDroneBehaviour::NotifyWanted"

class cGcDroneBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcDroneBehaviourTree::Construct"
    class CreateInvestigateBehaviours(HookFactory):
        _name = "cGcDroneBehaviourTree::CreateInvestigateBehaviours"
    class CreateStunnedBehaviours(HookFactory):
        _name = "cGcDroneBehaviourTree::CreateStunnedBehaviours"
    class CreateAttackBehaviours(HookFactory):
        _name = "cGcDroneBehaviourTree::CreateAttackBehaviours"
    class CreatePatrolBehaviours(HookFactory):
        _name = "cGcDroneBehaviourTree::CreatePatrolBehaviours"
    class Prepare(HookFactory):
        _name = "cGcDroneBehaviourTree::Prepare"
    class Release(HookFactory):
        _name = "cGcDroneBehaviourTree::Release"
    class Update(HookFactory):
        _name = "cGcDroneBehaviourTree::Update"
    class UpdatePostPhysics(HookFactory):
        _name = "cGcDroneBehaviourTree::UpdatePostPhysics"
    class SetScanActive(HookFactory):
        _name = "cGcDroneBehaviourTree::SetScanActive"
    class Fire(HookFactory):
        _name = "cGcDroneBehaviourTree::Fire"
    class GetWeaponData(HookFactory):
        _name = "cGcDroneBehaviourTree::GetWeaponData"
    class IsTargetPlayerMech(HookFactory):
        _name = "cGcDroneBehaviourTree::IsTargetPlayerMech"
    class GetWeaponMoveDistanceMax(HookFactory):
        _name = "cGcDroneBehaviourTree::GetWeaponMoveDistanceMax"
    class GetWeaponMoveDistanceMin(HookFactory):
        _name = "cGcDroneBehaviourTree::GetWeaponMoveDistanceMin"
    class WitnessingCallback(HookFactory):
        _name = "cGcDroneBehaviourTree::WitnessingCallback"
    class SetVisualAlertness(HookFactory):
        _name = "cGcDroneBehaviourTree::SetVisualAlertness"
    class cGcDroneBehaviourTree(HookFactory):
        _name = "cGcDroneBehaviourTree::cGcDroneBehaviourTree"

class cGcDroneBlackboard:
    class SetAlertState(HookFactory):
        _name = "cGcDroneBlackboard::SetAlertState"
    class GetTargetPosition(HookFactory):
        _name = "cGcDroneBlackboard::GetTargetPosition"
    class GetTargetRigidBody(HookFactory):
        _name = "cGcDroneBlackboard::GetTargetRigidBody"
    class GetTargetRadius(HookFactory):
        _name = "cGcDroneBlackboard::GetTargetRadius"
    class UseHostilePerceptionRanges(HookFactory):
        _name = "cGcDroneBlackboard::UseHostilePerceptionRanges"
    class CalculateTargetMatrix(HookFactory):
        _name = "cGcDroneBlackboard::CalculateTargetMatrix"

class ComponentInstancercGcDroneComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcDroneComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcDroneComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcDroneComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcDroneComponent::DestructInstance"

class cGcDroneControl:
    class RepelFromNeighbours(HookFactory):
        _name = "cGcDroneControl::RepelFromNeighbours"
    class RepelFromGround(HookFactory):
        _name = "cGcDroneControl::RepelFromGround"
    class MoveWithVelocity(HookFactory):
        _name = "cGcDroneControl::MoveWithVelocity"
    class LookAt(HookFactory):
        _name = "cGcDroneControl::LookAt"
    class GetPerception(HookFactory):
        _name = "cGcDroneControl::GetPerception"
    class HasLineOfSight(HookFactory):
        _name = "cGcDroneControl::HasLineOfSight"
    class NearestGroundPos(HookFactory):
        _name = "cGcDroneControl::NearestGroundPos"

class cGcSentinelDrone:
    class Prepare(HookFactory):
        _name = "cGcSentinelDrone::Prepare"
    class Update(HookFactory):
        _name = "cGcSentinelDrone::Update"
    class FireWeapon(HookFactory):
        _name = "cGcSentinelDrone::FireWeapon"
    class GetTargetPoint(HookFactory):
        _name = "cGcSentinelDrone::GetTargetPoint"
    class GetForward(HookFactory):
        _name = "cGcSentinelDrone::GetForward"
    class GetLabelPoint(HookFactory):
        _name = "cGcSentinelDrone::GetLabelPoint"
    class GetTargetPointSize(HookFactory):
        _name = "cGcSentinelDrone::GetTargetPointSize"
    class GetSightPoint(HookFactory):
        _name = "cGcSentinelDrone::GetSightPoint"
    class GetObb(HookFactory):
        _name = "cGcSentinelDrone::GetObb"
    class GetEffectAttachLocator(HookFactory):
        _name = "cGcSentinelDrone::GetEffectAttachLocator"
    class IsAttacking(HookFactory):
        _name = "cGcSentinelDrone::IsAttacking"
    class IsAlert(HookFactory):
        _name = "cGcSentinelDrone::IsAlert"
    class GetAttackTarget(HookFactory):
        _name = "cGcSentinelDrone::GetAttackTarget"
    class GetAlertRange(HookFactory):
        _name = "cGcSentinelDrone::GetAlertRange"
    class GetSightRange(HookFactory):
        _name = "cGcSentinelDrone::GetSightRange"
    class GetSightAngle(HookFactory):
        _name = "cGcSentinelDrone::GetSightAngle"
    class GetOwnerConcept(HookFactory):
        _name = "cGcSentinelDrone::GetOwnerConcept"
    class GetTree(HookFactory):
        _name = "cGcSentinelDrone::GetTree"
    class OnHit(HookFactory):
        _name = "cGcSentinelDrone::OnHit"
    class OnDeath(HookFactory):
        _name = "cGcSentinelDrone::OnDeath"
    class RenderNGui(HookFactory):
        _name = "cGcSentinelDrone::RenderNGui"

class cGcSentinelWalker:
    class Prepare(HookFactory):
        _name = "cGcSentinelWalker::Prepare"
    class GetTargetPoint(HookFactory):
        _name = "cGcSentinelWalker::GetTargetPoint"
    class GetForward(HookFactory):
        _name = "cGcSentinelWalker::GetForward"
    class GetLabelPoint(HookFactory):
        _name = "cGcSentinelWalker::GetLabelPoint"
    class GetTargetPointSize(HookFactory):
        _name = "cGcSentinelWalker::GetTargetPointSize"
    class GetSightPoint(HookFactory):
        _name = "cGcSentinelWalker::GetSightPoint"
    class GetObb(HookFactory):
        _name = "cGcSentinelWalker::GetObb"
    class GetAttackTarget(HookFactory):
        _name = "cGcSentinelWalker::GetAttackTarget"
    class GetOwnerConcept(HookFactory):
        _name = "cGcSentinelWalker::GetOwnerConcept"
    class GetCreatureType(HookFactory):
        _name = "cGcSentinelWalker::GetCreatureType"
    class IsAttacking(HookFactory):
        _name = "cGcSentinelWalker::IsAttacking"
    class IsAlert(HookFactory):
        _name = "cGcSentinelWalker::IsAlert"
    class GetAlertRange(HookFactory):
        _name = "cGcSentinelWalker::GetAlertRange"
    class GetSightRange(HookFactory):
        _name = "cGcSentinelWalker::GetSightRange"
    class GetSightAngle(HookFactory):
        _name = "cGcSentinelWalker::GetSightAngle"

class cGcSentinelQuad:
    class FireWeapon(HookFactory):
        _name = "cGcSentinelQuad::FireWeapon"
    class GetEffectAttachLocator(HookFactory):
        _name = "cGcSentinelQuad::GetEffectAttachLocator"
    class IsAttacking(HookFactory):
        _name = "cGcSentinelQuad::IsAttacking"
    class IsAlert(HookFactory):
        _name = "cGcSentinelQuad::IsAlert"
    class IsDead(HookFactory):
        _name = "cGcSentinelQuad::IsDead"
    class GetAlertRange(HookFactory):
        _name = "cGcSentinelQuad::GetAlertRange"
    class GetSightRange(HookFactory):
        _name = "cGcSentinelQuad::GetSightRange"
    class GetSightAngle(HookFactory):
        _name = "cGcSentinelQuad::GetSightAngle"
    class GetTree(HookFactory):
        _name = "cGcSentinelQuad::GetTree"
    class RenderNGui(HookFactory):
        _name = "cGcSentinelQuad::RenderNGui"

class cGcSentinelRobot:
    class Prepare(HookFactory):
        _name = "cGcSentinelRobot::Prepare"
    class Update(HookFactory):
        _name = "cGcSentinelRobot::Update"
    class OnHitCallback(HookFactory):
        _name = "cGcSentinelRobot::OnHitCallback"
    class OnHit(HookFactory):
        _name = "cGcSentinelRobot::OnHit"
    class OnArmourHitCallback(HookFactory):
        _name = "cGcSentinelRobot::OnArmourHitCallback"
    class OnArmourHit(HookFactory):
        _name = "cGcSentinelRobot::OnArmourHit"
    class OnDeathCallback(HookFactory):
        _name = "cGcSentinelRobot::OnDeathCallback"
    class IsLocalPlayerEntityOwner(HookFactory):
        _name = "cGcSentinelRobot::IsLocalPlayerEntityOwner"
    class IsFromScriptedEncounter(HookFactory):
        _name = "cGcSentinelRobot::IsFromScriptedEncounter"

class hknpBreakableConstraintData:
    class getBreakingThreshold(HookFactory):
        _name = "hknpBreakableConstraintData::getBreakingThreshold"
    class getExactType(HookFactory):
        _name = "hknpBreakableConstraintData::getExactType"

class hkMemoryMeshMaterial:
    class getNumTextures(HookFactory):
        _name = "hkMemoryMeshMaterial::getNumTextures"
    class getExactType(HookFactory):
        _name = "hkMemoryMeshMaterial::getExactType"
    class getTesselationFactor(HookFactory):
        _name = "hkMemoryMeshMaterial::getTesselationFactor"
    class setTesselationFactor(HookFactory):
        _name = "hkMemoryMeshMaterial::setTesselationFactor"
    class getDisplacementAmount(HookFactory):
        _name = "hkMemoryMeshMaterial::getDisplacementAmount"
    class setDisplacementAmount(HookFactory):
        _name = "hkMemoryMeshMaterial::setDisplacementAmount"
    class hkMemoryMeshMaterial(HookFactory):
        _name = "hkMemoryMeshMaterial::hkMemoryMeshMaterial"
    class addTexture(HookFactory):
        _name = "hkMemoryMeshMaterial::addTexture"
    class createCompatibleVertexBuffer(HookFactory):
        _name = "hkMemoryMeshMaterial::createCompatibleVertexBuffer"
    class createCompatibleVertexFormat(HookFactory):
        _name = "hkMemoryMeshMaterial::createCompatibleVertexFormat"
    class equals(HookFactory):
        _name = "hkMemoryMeshMaterial::equals"
    class getColors(HookFactory):
        _name = "hkMemoryMeshMaterial::getColors"
    class getTexture(HookFactory):
        _name = "hkMemoryMeshMaterial::getTexture"
    class isCompatible(HookFactory):
        _name = "hkMemoryMeshMaterial::isCompatible"
    class reserveTextureSlot(HookFactory):
        _name = "hkMemoryMeshMaterial::reserveTextureSlot"
    class setColors(HookFactory):
        _name = "hkMemoryMeshMaterial::setColors"
    class setTexture(HookFactory):
        _name = "hkMemoryMeshMaterial::setTexture"

class cGcSentinelMechWeapon:
    class GetLastModeChangeTime(HookFactory):
        _name = "cGcSentinelMechWeapon::GetLastModeChangeTime"
    class GetPrimaryStat(HookFactory):
        _name = "cGcSentinelMechWeapon::GetPrimaryStat"
    class GetWeaponRange(HookFactory):
        _name = "cGcSentinelMechWeapon::GetWeaponRange"
    class GetWeaponSpeed(HookFactory):
        _name = "cGcSentinelMechWeapon::GetWeaponSpeed"
    class Update(HookFactory):
        _name = "cGcSentinelMechWeapon::Update"
    class OnBeginFiring(HookFactory):
        _name = "cGcSentinelMechWeapon::OnBeginFiring"
    class OnEndFiring(HookFactory):
        _name = "cGcSentinelMechWeapon::OnEndFiring"
    class SetModeIndex(HookFactory):
        _name = "cGcSentinelMechWeapon::SetModeIndex"
    class GetListOfModesIfActiveOrNot(HookFactory):
        _name = "cGcSentinelMechWeapon::GetListOfModesIfActiveOrNot"
    class GetShootPoint(HookFactory):
        _name = "cGcSentinelMechWeapon::GetShootPoint"

class cGcExoMechAttachShooting:
    class GetName(HookFactory):
        _name = "cGcExoMechAttachShooting::GetName"
    class Run(HookFactory):
        _name = "cGcExoMechAttachShooting::Run"
    class OnInit(HookFactory):
        _name = "cGcExoMechAttachShooting::OnInit"
    class Cancel(HookFactory):
        _name = "cGcExoMechAttachShooting::Cancel"
    class BeginFiring(HookFactory):
        _name = "cGcExoMechAttachShooting::BeginFiring"
    class EndFiring(HookFactory):
        _name = "cGcExoMechAttachShooting::EndFiring"
    class HaveValidShot(HookFactory):
        _name = "cGcExoMechAttachShooting::HaveValidShot"

class cGcMechAttackMove:
    class GetName(HookFactory):
        _name = "cGcMechAttackMove::GetName"
    class cGcMechAttackMove(HookFactory):
        _name = "cGcMechAttackMove::cGcMechAttackMove"
    class OnInit(HookFactory):
        _name = "cGcMechAttackMove::OnInit"
    class Cancel(HookFactory):
        _name = "cGcMechAttackMove::Cancel"
    class Run(HookFactory):
        _name = "cGcMechAttackMove::Run"

class cGcMechCheckAlert:
    class GetName(HookFactory):
        _name = "cGcMechCheckAlert::GetName"
    class Run(HookFactory):
        _name = "cGcMechCheckAlert::Run"

class cGcMechCheckCanAttack:
    class GetName(HookFactory):
        _name = "cGcMechCheckCanAttack::GetName"
    class Run(HookFactory):
        _name = "cGcMechCheckCanAttack::Run"

class cGcMechFollowPlayer:
    class GetName(HookFactory):
        _name = "cGcMechFollowPlayer::GetName"
    class Run(HookFactory):
        _name = "cGcMechFollowPlayer::Run"

class CAkActionExcept:
    class ClearExceptions(HookFactory):
        _name = "CAkActionExcept::ClearExceptions"
    class CAkActionExcept(HookFactory):
        _name = "CAkActionExcept::CAkActionExcept"
    class SetExceptParams(HookFactory):
        _name = "CAkActionExcept::SetExceptParams"

class cGcMechGuard:
    class GetName(HookFactory):
        _name = "cGcMechGuard::GetName"
    class cGcMechGuard(HookFactory):
        _name = "cGcMechGuard::cGcMechGuard"
    class OnInit(HookFactory):
        _name = "cGcMechGuard::OnInit"
    class Run(HookFactory):
        _name = "cGcMechGuard::Run"
    class FindBuildingToGuard(HookFactory):
        _name = "cGcMechGuard::FindBuildingToGuard"

class cGcMechSearchForTarget:
    class GetName(HookFactory):
        _name = "cGcMechSearchForTarget::GetName"
    class cGcMechSearchForTarget(HookFactory):
        _name = "cGcMechSearchForTarget::cGcMechSearchForTarget"
    class OnInit(HookFactory):
        _name = "cGcMechSearchForTarget::OnInit"
    class Run(HookFactory):
        _name = "cGcMechSearchForTarget::Run"
    class BeginMoveToLocation(HookFactory):
        _name = "cGcMechSearchForTarget::BeginMoveToLocation"

class cGcMechSelectAttackTarget:
    class GetName(HookFactory):
        _name = "cGcMechSelectAttackTarget::GetName"
    class cGcMechSelectAttackTarget(HookFactory):
        _name = "cGcMechSelectAttackTarget::cGcMechSelectAttackTarget"
    class Run(HookFactory):
        _name = "cGcMechSelectAttackTarget::Run"
    class Cancel(HookFactory):
        _name = "cGcMechSelectAttackTarget::Cancel"
    class IsValidTarget(HookFactory):
        _name = "cGcMechSelectAttackTarget::IsValidTarget"
    class HasLineOfSightToTarget(HookFactory):
        _name = "cGcMechSelectAttackTarget::HasLineOfSightToTarget"
    class GetSightPos(HookFactory):
        _name = "cGcMechSelectAttackTarget::GetSightPos"

class cGcMechStunned:
    class GetName(HookFactory):
        _name = "cGcMechStunned::GetName"
    class cGcMechStunned(HookFactory):
        _name = "cGcMechStunned::cGcMechStunned"
    class OnInit(HookFactory):
        _name = "cGcMechStunned::OnInit"
    class Run(HookFactory):
        _name = "cGcMechStunned::Run"

class cGcSentinelMechAttackShooting:
    class GetName(HookFactory):
        _name = "cGcSentinelMechAttackShooting::GetName"
    class EndFiring(HookFactory):
        _name = "cGcSentinelMechAttackShooting::EndFiring"
    class Run(HookFactory):
        _name = "cGcSentinelMechAttackShooting::Run"
    class OnInit(HookFactory):
        _name = "cGcSentinelMechAttackShooting::OnInit"
    class Cancel(HookFactory):
        _name = "cGcSentinelMechAttackShooting::Cancel"

class cGcMechAIController:
    class Prepare(HookFactory):
        _name = "cGcMechAIController::Prepare"
    class Update(HookFactory):
        _name = "cGcMechAIController::Update"
    class Reset(HookFactory):
        _name = "cGcMechAIController::Reset"
    class NetSerialize(HookFactory):
        _name = "cGcMechAIController::NetSerialize"
    class RelinquishControl(HookFactory):
        _name = "cGcMechAIController::RelinquishControl"
    class IsAIPilotAvailable(HookFactory):
        _name = "cGcMechAIController::IsAIPilotAvailable"
    class IsAIPilotInstalled(HookFactory):
        _name = "cGcMechAIController::IsAIPilotInstalled"
    class NeedsResummon(HookFactory):
        _name = "cGcMechAIController::NeedsResummon"
    class TryResummon(HookFactory):
        _name = "cGcMechAIController::TryResummon"

class cGcMechBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcMechBehaviourTree::Construct"
        _overload: overloads.cGcMechBehaviourTree.Construct.overloads = "cGcMechBehaviourTree *, cTkAttachment *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMechBehaviourTree.Construct.overloads):
            cls._overload = overload_args
            return cls
    class Prepare(HookFactory):
        _name = "cGcMechBehaviourTree::Prepare"

class sMechTargetData:
    class GetTargetBody(HookFactory):
        _name = "sMechTargetData::GetTargetBody"
    class GetTargetPoint(HookFactory):
        _name = "sMechTargetData::GetTargetPoint"

class cGcMechControl:
    class cGcMechControl(HookFactory):
        _name = "cGcMechControl::cGcMechControl"
    class Prepare(HookFactory):
        _name = "cGcMechControl::Prepare"
    class OnSummon(HookFactory):
        _name = "cGcMechControl::OnSummon"
    class Update(HookFactory):
        _name = "cGcMechControl::Update"
    class SetPhysicsEnabled(HookFactory):
        _name = "cGcMechControl::SetPhysicsEnabled"
    class DetermineAnimState(HookFactory):
        _name = "cGcMechControl::DetermineAnimState"
    class UpdateAnims(HookFactory):
        _name = "cGcMechControl::UpdateAnims"
    class UpdateFootDust(HookFactory):
        _name = "cGcMechControl::UpdateFootDust"
    class DoFootPrint(HookFactory):
        _name = "cGcMechControl::DoFootPrint"
    class PlayMechAudioEvent(HookFactory):
        _name = "cGcMechControl::PlayMechAudioEvent"
    class GetMoveDir(HookFactory):
        _name = "cGcMechControl::GetMoveDir"
    class UpdateFootprints(HookFactory):
        _name = "cGcMechControl::UpdateFootprints"
    class UpdateJetpack(HookFactory):
        _name = "cGcMechControl::UpdateJetpack"
    class UpdateWeaponArmAimAnims(HookFactory):
        _name = "cGcMechControl::UpdateWeaponArmAimAnims"
    class NetSerialize(HookFactory):
        _name = "cGcMechControl::NetSerialize"
    class UpdateContrails(HookFactory):
        _name = "cGcMechControl::UpdateContrails"
    class UpdateJumpState(HookFactory):
        _name = "cGcMechControl::UpdateJumpState"
    class IsJetpackIgnited(HookFactory):
        _name = "cGcMechControl::IsJetpackIgnited"
    class UpdateSlope(HookFactory):
        _name = "cGcMechControl::UpdateSlope"
    class GetCockpitBob(HookFactory):
        _name = "cGcMechControl::GetCockpitBob"
    class SetPilotType(HookFactory):
        _name = "cGcMechControl::SetPilotType"
    class DeactivatePilot(HookFactory):
        _name = "cGcMechControl::DeactivatePilot"
    class ActivatePilot(HookFactory):
        _name = "cGcMechControl::ActivatePilot"
    class PlayerInMechCombat(HookFactory):
        _name = "cGcMechControl::PlayerInMechCombat"
    class Release(HookFactory):
        _name = "cGcMechControl::Release"

class GetNumImposterViews(HookFactory):
    _name = "GetNumImposterViews"

class GetTextureWidth(HookFactory):
    _name = "GetTextureWidth"

class GetTextureHeight(HookFactory):
    _name = "GetTextureHeight"

class cGcFadeNodeUpdater:
    class Update(HookFactory):
        _name = "cGcFadeNodeUpdater::Update"
    class UpdateStart(HookFactory):
        _name = "cGcFadeNodeUpdater::UpdateStart"
    class UpdateEnd(HookFactory):
        _name = "cGcFadeNodeUpdater::UpdateEnd"
    class AddNode(HookFactory):
        _name = "cGcFadeNodeUpdater::AddNode"
    class GetInstance(HookFactory):
        _name = "cGcFadeNodeUpdater::GetInstance"

class cGcFadeNodeBase:
    class Invalidate(HookFactory):
        _name = "cGcFadeNodeBase::Invalidate"
    class SetHidden(HookFactory):
        _name = "cGcFadeNodeBase::SetHidden"
    class Update(HookFactory):
        _name = "cGcFadeNodeBase::Update"

class cTkMemoryPool:
    class Realloc(HookFactory):
        _name = "cTkMemoryPool::Realloc"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkMemoryPool::GetHighWaterUsage"
    class GetAllocInfo(HookFactory):
        _name = "cTkMemoryPool::GetAllocInfo"
    class FlagError(HookFactory):
        _name = "cTkMemoryPool::FlagError"
    class HasError(HookFactory):
        _name = "cTkMemoryPool::HasError"

class cTkLinearMemoryPool:
    class ContainsAddress(HookFactory):
        _name = "cTkLinearMemoryPool::ContainsAddress"
    class GetUsage(HookFactory):
        _name = "cTkLinearMemoryPool::GetUsage"
    class Create(HookFactory):
        _name = "cTkLinearMemoryPool::Create"
    class Malloc(HookFactory):
        _name = "cTkLinearMemoryPool::Malloc"
    class Realloc(HookFactory):
        _name = "cTkLinearMemoryPool::Realloc"
    class Reset(HookFactory):
        _name = "cTkLinearMemoryPool::Reset"
    class ResetToAddress(HookFactory):
        _name = "cTkLinearMemoryPool::ResetToAddress"

class IAnimatableNode:
    class SetLOD(HookFactory):
        _name = "IAnimatableNode::SetLOD"
    class SetANIgnoreAnimation(HookFactory):
        _name = "IAnimatableNode::SetANIgnoreAnimation"
    class AddANToIgnoreAnimationResetList(HookFactory):
        _name = "IAnimatableNode::AddANToIgnoreAnimationResetList"

class cTkDoubleBufferMemoryPool:
    class GetAlignment(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::GetAlignment"
    class cTkDoubleBufferMemoryPool(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::cTkDoubleBufferMemoryPool"
    class ContainsAddress(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::ContainsAddress"
    class Create(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::Create"
    class FrameSyncEnd(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::FrameSyncEnd"
    class GetBaseAddress(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::GetBaseAddress"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::GetHighWaterUsage"
    class GetSize(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::GetSize"
    class GetUsage(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::GetUsage"
    class Malloc(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::Malloc"
    class NeedsMutex(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::NeedsMutex"
    class Reset(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::Reset"
    class SetAlignment(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::SetAlignment"
    class SetMutex(HookFactory):
        _name = "cTkDoubleBufferMemoryPool::SetMutex"

class DeleteModel:
    class GetSizeBytes(HookFactory):
        _name = "DeleteModel::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "DeleteModel::GetOutput"
    class RenderNGui(HookFactory):
        _name = "DeleteModel::RenderNGui"

class OnPlayerNear:
    class GetOutput(HookFactory):
        _name = "OnPlayerNear::GetOutput"
    class RenderNGui(HookFactory):
        _name = "OnPlayerNear::RenderNGui"
    class CheckTrigger(HookFactory):
        _name = "OnPlayerNear::CheckTrigger"

class OnSpawned:
    class RenderNGui(HookFactory):
        _name = "OnSpawned::RenderNGui"

class sOnSpawnedType:
    class GetName(HookFactory):
        _name = "sOnSpawnedType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnSpawnedType::ConstructNode"

class StopParticles:
    class GetSizeBytes(HookFactory):
        _name = "StopParticles::GetSizeBytes"
    class GetSaveAddress(HookFactory):
        _name = "StopParticles::GetSaveAddress"
    class GetOutput(HookFactory):
        _name = "StopParticles::GetOutput"
    class RenderNGui(HookFactory):
        _name = "StopParticles::RenderNGui"

class OnVariableChanged:
    class Start(HookFactory):
        _name = "OnVariableChanged::Start"
    class GetOutput(HookFactory):
        _name = "OnVariableChanged::GetOutput"
    class RenderNGui(HookFactory):
        _name = "OnVariableChanged::RenderNGui"

class sOnVariableChangedType:
    class GetName(HookFactory):
        _name = "sOnVariableChangedType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnVariableChangedType::ConstructNode"

class OnBroadcastReceived:
    class RenderNGui(HookFactory):
        _name = "OnBroadcastReceived::RenderNGui"

class sOnBroadcastReceivedType:
    class GetName(HookFactory):
        _name = "sOnBroadcastReceivedType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnBroadcastReceivedType::ConstructNode"

class RotateNode:
    class GetSizeBytes(HookFactory):
        _name = "RotateNode::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "RotateNode::GetOutput"
    class RenderNGui(HookFactory):
        _name = "RotateNode::RenderNGui"

class SetVariableValue:
    class GetSaveSizeBytes(HookFactory):
        _name = "SetVariableValue::GetSaveSizeBytes"
    class GetSizeBytes(HookFactory):
        _name = "SetVariableValue::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "SetVariableValue::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetVariableValue::RenderNGui"

class OnComponentEvent:
    class Initialise(HookFactory):
        _name = "OnComponentEvent::Initialise"
    class RenderNGui(HookFactory):
        _name = "OnComponentEvent::RenderNGui"

class sOnComponentEventType:
    class GetName(HookFactory):
        _name = "sOnComponentEventType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnComponentEventType::ConstructNode"

class BroadcastValueDistance:
    class GetSizeBytes(HookFactory):
        _name = "BroadcastValueDistance::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "BroadcastValueDistance::GetOutput"
    class RenderNGui(HookFactory):
        _name = "BroadcastValueDistance::RenderNGui"

class OnAnimFrame:
    class GetSaveSizeBytes(HookFactory):
        _name = "OnAnimFrame::GetSaveSizeBytes"
    class RenderNGui(HookFactory):
        _name = "OnAnimFrame::RenderNGui"
    class CheckTrigger(HookFactory):
        _name = "OnAnimFrame::CheckTrigger"

class IfValueIs:
    class GetOutput(HookFactory):
        _name = "IfValueIs::GetOutput"
    class RenderNGui(HookFactory):
        _name = "IfValueIs::RenderNGui"

class sIfValueIsType:
    class GetName(HookFactory):
        _name = "sIfValueIsType::GetName"
    class ConstructNode(HookFactory):
        _name = "sIfValueIsType::ConstructNode"

class FadeModel:
    class GetSizeBytes(HookFactory):
        _name = "FadeModel::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "FadeModel::GetOutput"
    class RenderNGui(HookFactory):
        _name = "FadeModel::RenderNGui"

class ValueAsBool:
    class GetOutput(HookFactory):
        _name = "ValueAsBool::GetOutput"
    class RenderNGui(HookFactory):
        _name = "ValueAsBool::RenderNGui"

class sValueAsBoolType:
    class GetName(HookFactory):
        _name = "sValueAsBoolType::GetName"
    class ConstructNode(HookFactory):
        _name = "sValueAsBoolType::ConstructNode"

class FixedValue:
    class GetOutput(HookFactory):
        _name = "FixedValue::GetOutput"
    class RenderNGui(HookFactory):
        _name = "FixedValue::RenderNGui"

class sFixedValueType:
    class GetName(HookFactory):
        _name = "sFixedValueType::GetName"
    class ConstructNode(HookFactory):
        _name = "sFixedValueType::ConstructNode"

class GetVariableValue:
    class GetOutput(HookFactory):
        _name = "GetVariableValue::GetOutput"
    class RenderNGui(HookFactory):
        _name = "GetVariableValue::RenderNGui"

class sGetVariableValueType:
    class GetName(HookFactory):
        _name = "sGetVariableValueType::GetName"
    class ConstructNode(HookFactory):
        _name = "sGetVariableValueType::ConstructNode"

class sSetVariableValueType:
    class GetName(HookFactory):
        _name = "sSetVariableValueType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetVariableValueType::ConstructNode"

class SurveyVariableValue:
    class Start(HookFactory):
        _name = "SurveyVariableValue::Start"
    class GetOutput(HookFactory):
        _name = "SurveyVariableValue::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SurveyVariableValue::RenderNGui"

class sSurveyVariableValueType:
    class GetName(HookFactory):
        _name = "sSurveyVariableValueType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSurveyVariableValueType::ConstructNode"

class Sequence:
    class Initialise(HookFactory):
        _name = "Sequence::Initialise"
    class RenderNGui(HookFactory):
        _name = "Sequence::RenderNGui"

class sSequenceType:
    class GetName(HookFactory):
        _name = "sSequenceType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSequenceType::ConstructNode"

class WaitSeconds:
    class Start(HookFactory):
        _name = "WaitSeconds::Start"
    class GetOutput(HookFactory):
        _name = "WaitSeconds::GetOutput"
    class RenderNGui(HookFactory):
        _name = "WaitSeconds::RenderNGui"

class sWaitSecondsType:
    class GetName(HookFactory):
        _name = "sWaitSecondsType::GetName"
    class ConstructNode(HookFactory):
        _name = "sWaitSecondsType::ConstructNode"

class WaitFrames:
    class Start(HookFactory):
        _name = "WaitFrames::Start"
    class GetOutput(HookFactory):
        _name = "WaitFrames::GetOutput"
    class RenderNGui(HookFactory):
        _name = "WaitFrames::RenderNGui"

class sWaitFramesType:
    class GetName(HookFactory):
        _name = "sWaitFramesType::GetName"
    class ConstructNode(HookFactory):
        _name = "sWaitFramesType::ConstructNode"

class RandomNumber:
    class GetOutput(HookFactory):
        _name = "RandomNumber::GetOutput"
    class RenderNGui(HookFactory):
        _name = "RandomNumber::RenderNGui"

class sRandomNumberType:
    class GetName(HookFactory):
        _name = "sRandomNumberType::GetName"
    class ConstructNode(HookFactory):
        _name = "sRandomNumberType::ConstructNode"

class SetShaderValue:
    class GetSizeBytes(HookFactory):
        _name = "SetShaderValue::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "SetShaderValue::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetShaderValue::RenderNGui"

class MathsFunction:
    class GetSaveSizeBytes(HookFactory):
        _name = "MathsFunction::GetSaveSizeBytes"
    class GetOutput(HookFactory):
        _name = "MathsFunction::GetOutput"
    class RenderNGui(HookFactory):
        _name = "MathsFunction::RenderNGui"

class sMathsFunctionType:
    class GetName(HookFactory):
        _name = "sMathsFunctionType::GetName"
    class ConstructNode(HookFactory):
        _name = "sMathsFunctionType::ConstructNode"

class BroadcastValueModel:
    class GetOutput(HookFactory):
        _name = "BroadcastValueModel::GetOutput"
    class RenderNGui(HookFactory):
        _name = "BroadcastValueModel::RenderNGui"

class sBroadcastValueModelType:
    class GetName(HookFactory):
        _name = "sBroadcastValueModelType::GetName"
    class ConstructNode(HookFactory):
        _name = "sBroadcastValueModelType::ConstructNode"

class sBroadcastValueDistanceType:
    class GetName(HookFactory):
        _name = "sBroadcastValueDistanceType::GetName"
    class ConstructNode(HookFactory):
        _name = "sBroadcastValueDistanceType::ConstructNode"

class RaiseEvent:
    class GetSizeBytes(HookFactory):
        _name = "RaiseEvent::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "RaiseEvent::GetOutput"
    class RenderNGui(HookFactory):
        _name = "RaiseEvent::RenderNGui"

class SpawnParticles:
    class GetSaveSizeBytes(HookFactory):
        _name = "SpawnParticles::GetSaveSizeBytes"
    class Start(HookFactory):
        _name = "SpawnParticles::Start"
    class GetOutput(HookFactory):
        _name = "SpawnParticles::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SpawnParticles::RenderNGui"

class sRaiseEventType:
    class GetName(HookFactory):
        _name = "sRaiseEventType::GetName"
    class ConstructNode(HookFactory):
        _name = "sRaiseEventType::ConstructNode"

class sOnNodeActivatedType:
    class GetName(HookFactory):
        _name = "sOnNodeActivatedType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnNodeActivatedType::ConstructNode"

class OnTriggerVolume:
    class RenderNGui(HookFactory):
        _name = "OnTriggerVolume::RenderNGui"
    class CheckTrigger(HookFactory):
        _name = "OnTriggerVolume::CheckTrigger"

class sOnTriggerVolumeType:
    class GetName(HookFactory):
        _name = "sOnTriggerVolumeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnTriggerVolumeType::ConstructNode"

class sOnAnimFrameType:
    class GetName(HookFactory):
        _name = "sOnAnimFrameType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnAnimFrameType::ConstructNode"

class SetNodeActive:
    class GetOutput(HookFactory):
        _name = "SetNodeActive::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetNodeActive::RenderNGui"

class sSetNodeActiveType:
    class GetName(HookFactory):
        _name = "sSetNodeActiveType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetNodeActiveType::ConstructNode"

class sDeleteModelType:
    class GetName(HookFactory):
        _name = "sDeleteModelType::GetName"
    class ConstructNode(HookFactory):
        _name = "sDeleteModelType::ConstructNode"

class PlayAnim:
    class Start(HookFactory):
        _name = "PlayAnim::Start"
    class GetOutput(HookFactory):
        _name = "PlayAnim::GetOutput"
    class RenderNGui(HookFactory):
        _name = "PlayAnim::RenderNGui"

class sPlayAnimType:
    class ConstructNode(HookFactory):
        _name = "sPlayAnimType::ConstructNode"

class IfAnimIsPlaying:
    class GetOutput(HookFactory):
        _name = "IfAnimIsPlaying::GetOutput"
    class RenderNGui(HookFactory):
        _name = "IfAnimIsPlaying::RenderNGui"

class sIfAnimIsPlayingType:
    class GetName(HookFactory):
        _name = "sIfAnimIsPlayingType::GetName"
    class ConstructNode(HookFactory):
        _name = "sIfAnimIsPlayingType::ConstructNode"

class StopAnim:
    class GetOutput(HookFactory):
        _name = "StopAnim::GetOutput"
    class RenderNGui(HookFactory):
        _name = "StopAnim::RenderNGui"

class sStopAnimType:
    class GetName(HookFactory):
        _name = "sStopAnimType::GetName"
    class ConstructNode(HookFactory):
        _name = "sStopAnimType::ConstructNode"

class PlaySound:
    class EventCallbackFunc(HookFactory):
        _name = "PlaySound::EventCallbackFunc"
    class Start(HookFactory):
        _name = "PlaySound::Start"
    class GetOutput(HookFactory):
        _name = "PlaySound::GetOutput"
    class RenderNGui(HookFactory):
        _name = "PlaySound::RenderNGui"

class sPlaySoundType:
    class GetName(HookFactory):
        _name = "sPlaySoundType::GetName"
    class ConstructNode(HookFactory):
        _name = "sPlaySoundType::ConstructNode"

class StopSounds:
    class GetOutput(HookFactory):
        _name = "StopSounds::GetOutput"
    class RenderNGui(HookFactory):
        _name = "StopSounds::RenderNGui"

class sStopSoundsType:
    class GetName(HookFactory):
        _name = "sStopSoundsType::GetName"
    class ConstructNode(HookFactory):
        _name = "sStopSoundsType::ConstructNode"

class sFadeModelType:
    class GetName(HookFactory):
        _name = "sFadeModelType::GetName"
    class ConstructNode(HookFactory):
        _name = "sFadeModelType::ConstructNode"

class TranslateNode:
    class GetSaveSizeBytes(HookFactory):
        _name = "TranslateNode::GetSaveSizeBytes"
    class Start(HookFactory):
        _name = "TranslateNode::Start"
    class GetOutput(HookFactory):
        _name = "TranslateNode::GetOutput"
    class RenderNGui(HookFactory):
        _name = "TranslateNode::RenderNGui"

class sTranslateNodeType:
    class GetName(HookFactory):
        _name = "sTranslateNodeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sTranslateNodeType::ConstructNode"

class sRotateNodeType:
    class GetName(HookFactory):
        _name = "sRotateNodeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sRotateNodeType::ConstructNode"

class ScaleNode:
    class GetOutput(HookFactory):
        _name = "ScaleNode::GetOutput"
    class RenderNGui(HookFactory):
        _name = "ScaleNode::RenderNGui"

class sScaleNodeType:
    class GetName(HookFactory):
        _name = "sScaleNodeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sScaleNodeType::ConstructNode"

class SetLightIntensity:
    class GetOutput(HookFactory):
        _name = "SetLightIntensity::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetLightIntensity::RenderNGui"

class sSetLightIntensityType:
    class GetName(HookFactory):
        _name = "sSetLightIntensityType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetLightIntensityType::ConstructNode"

class SetLightColour:
    class GetOutput(HookFactory):
        _name = "SetLightColour::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetLightColour::RenderNGui"

class sSetLightColourType:
    class GetName(HookFactory):
        _name = "sSetLightColourType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetLightColourType::ConstructNode"

class sOnPlayerNearType:
    class GetName(HookFactory):
        _name = "sOnPlayerNearType::GetName"
    class ConstructNode(HookFactory):
        _name = "sOnPlayerNearType::ConstructNode"

class sSpawnParticlesType:
    class GetName(HookFactory):
        _name = "sSpawnParticlesType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSpawnParticlesType::ConstructNode"

class SetParticlesStage:
    class GetOutput(HookFactory):
        _name = "SetParticlesStage::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetParticlesStage::RenderNGui"

class sSetParticlesStageType:
    class GetName(HookFactory):
        _name = "sSetParticlesStageType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetParticlesStageType::ConstructNode"

class sStopParticlesType:
    class GetName(HookFactory):
        _name = "sStopParticlesType::GetName"
    class ConstructNode(HookFactory):
        _name = "sStopParticlesType::ConstructNode"

class DestroyDestructables:
    class GetOutput(HookFactory):
        _name = "DestroyDestructables::GetOutput"
    class RenderNGui(HookFactory):
        _name = "DestroyDestructables::RenderNGui"

class sDestroyDestructablesType:
    class GetName(HookFactory):
        _name = "sDestroyDestructablesType::GetName"
    class ConstructNode(HookFactory):
        _name = "sDestroyDestructablesType::ConstructNode"

class SetHazard:
    class GetOutput(HookFactory):
        _name = "SetHazard::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetHazard::RenderNGui"

class sSetHazardType:
    class GetName(HookFactory):
        _name = "sSetHazardType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetHazardType::ConstructNode"

class DamagePlayer:
    class GetOutput(HookFactory):
        _name = "DamagePlayer::GetOutput"
    class RenderNGui(HookFactory):
        _name = "DamagePlayer::RenderNGui"

class sDamagePlayerType:
    class GetName(HookFactory):
        _name = "sDamagePlayerType::GetName"
    class ConstructNode(HookFactory):
        _name = "sDamagePlayerType::ConstructNode"

class CameraShake:
    class Start(HookFactory):
        _name = "CameraShake::Start"
    class GetOutput(HookFactory):
        _name = "CameraShake::GetOutput"
    class RenderNGui(HookFactory):
        _name = "CameraShake::RenderNGui"

class sCameraShakeType:
    class GetName(HookFactory):
        _name = "sCameraShakeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sCameraShakeType::ConstructNode"

class StopCameraShake:
    class GetOutput(HookFactory):
        _name = "StopCameraShake::GetOutput"
    class RenderNGui(HookFactory):
        _name = "StopCameraShake::RenderNGui"

class sStopCameraShakeType:
    class GetName(HookFactory):
        _name = "sStopCameraShakeType::GetName"
    class ConstructNode(HookFactory):
        _name = "sStopCameraShakeType::ConstructNode"

class FadeMaterials:
    class GetSizeBytes(HookFactory):
        _name = "FadeMaterials::GetSizeBytes"
    class GetSaveSizeBytes(HookFactory):
        _name = "FadeMaterials::GetSaveSizeBytes"
    class GetOutput(HookFactory):
        _name = "FadeMaterials::GetOutput"
    class RenderNGui(HookFactory):
        _name = "FadeMaterials::RenderNGui"

class sFadeMaterialsType:
    class GetName(HookFactory):
        _name = "sFadeMaterialsType::GetName"
    class ConstructNode(HookFactory):
        _name = "sFadeMaterialsType::ConstructNode"

class SetMaterialUniform:
    class GetSizeBytes(HookFactory):
        _name = "SetMaterialUniform::GetSizeBytes"
    class GetOutput(HookFactory):
        _name = "SetMaterialUniform::GetOutput"
    class RenderNGui(HookFactory):
        _name = "SetMaterialUniform::RenderNGui"

class hknpAnimatedShapeSurfaceVelocityModifier:
    class getEnabledFunctions(HookFactory):
        _name = "hknpAnimatedShapeSurfaceVelocityModifier::getEnabledFunctions"
    class postContactJacobianReused(HookFactory):
        _name = "hknpAnimatedShapeSurfaceVelocityModifier::postContactJacobianReused"
    class postContactJacobianSetup(HookFactory):
        _name = "hknpAnimatedShapeSurfaceVelocityModifier::postContactJacobianSetup"

class sSetMaterialUniformType:
    class GetName(HookFactory):
        _name = "sSetMaterialUniformType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetMaterialUniformType::ConstructNode"

class sSetShaderValueType:
    class GetName(HookFactory):
        _name = "sSetShaderValueType::GetName"
    class ConstructNode(HookFactory):
        _name = "sSetShaderValueType::ConstructNode"

class GiveReward:
    class GetOutput(HookFactory):
        _name = "GiveReward::GetOutput"
    class RenderNGui(HookFactory):
        _name = "GiveReward::RenderNGui"

class sGiveRewardType:
    class GetName(HookFactory):
        _name = "sGiveRewardType::GetName"
    class ConstructNode(HookFactory):
        _name = "sGiveRewardType::ConstructNode"

class AddShootableHealth:
    class GetSizeBytes(HookFactory):
        _name = "AddShootableHealth::GetSizeBytes"
    class GetSaveSizeBytes(HookFactory):
        _name = "AddShootableHealth::GetSaveSizeBytes"
    class GetOutput(HookFactory):
        _name = "AddShootableHealth::GetOutput"
    class RenderNGui(HookFactory):
        _name = "AddShootableHealth::RenderNGui"

class sAddShootableHealthType:
    class GetName(HookFactory):
        _name = "sAddShootableHealthType::GetName"
    class ConstructNode(HookFactory):
        _name = "sAddShootableHealthType::ConstructNode"

class GetPlanetColour:
    class GetOutput(HookFactory):
        _name = "GetPlanetColour::GetOutput"
    class RenderNGui(HookFactory):
        _name = "GetPlanetColour::RenderNGui"

class sGetPlanetColourType:
    class GetName(HookFactory):
        _name = "sGetPlanetColourType::GetName"
    class ConstructNode(HookFactory):
        _name = "sGetPlanetColourType::ConstructNode"

class GetTimeOfDay:
    class GetOutput(HookFactory):
        _name = "GetTimeOfDay::GetOutput"
    class RenderNGui(HookFactory):
        _name = "GetTimeOfDay::RenderNGui"

class sGetTimeOfDayType:
    class GetName(HookFactory):
        _name = "sGetTimeOfDayType::GetName"
    class ConstructNode(HookFactory):
        _name = "sGetTimeOfDayType::ConstructNode"

class cGcInstancedPhysicsAsteroidGrid:
    class cGcInstancedPhysicsAsteroidGrid(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::cGcInstancedPhysicsAsteroidGrid"
    class ClearCells(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::ClearCells"
    class CalculateAsteroidTransform(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::CalculateAsteroidTransform"
    class Update(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::Update"
    class GenerateData(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::GenerateData"
    class Release(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::Release"
    class NotifyDataChanged(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::NotifyDataChanged"
        _overload: overloads.cGcInstancedPhysicsAsteroidGrid.NotifyDataChanged.overloads = "cGcInstancedPhysicsAsteroidGrid *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInstancedPhysicsAsteroidGrid.NotifyDataChanged.overloads):
            cls._overload = overload_args
            return cls
    class AutoUpdateForInvalidArea(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::AutoUpdateForInvalidArea"
    class AssignRigidBodies(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::AssignRigidBodies"
    class HitBody(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::HitBody"
    class DisablePhyscis(HookFactory):
        _name = "cGcInstancedPhysicsAsteroidGrid::DisablePhyscis"

class cTkCollision:
    class cTkCollision(HookFactory):
        _name = "cTkCollision::cTkCollision"
    class AddSphereShape(HookFactory):
        _name = "cTkCollision::AddSphereShape"
    class AddFromNode(HookFactory):
        _name = "cTkCollision::AddFromNode"
    class AddFromNodeStep(HookFactory):
        _name = "cTkCollision::AddFromNodeStep"
    class AddFromTerrain(HookFactory):
        _name = "cTkCollision::AddFromTerrain"
        _overload: overloads.cTkCollision.AddFromTerrain.overloads = "cTkCollision *, cTkQuadElement *, int, bool, float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkCollision.AddFromTerrain.overloads):
            cls._overload = overload_args
            return cls
    class AddHavokShapes(HookFactory):
        _name = "cTkCollision::AddHavokShapes"
    class AddStaticFromNode(HookFactory):
        _name = "cTkCollision::AddStaticFromNode"
    class BuildBoxShape(HookFactory):
        _name = "cTkCollision::BuildBoxShape"
    class BuildCapsuleShape(HookFactory):
        _name = "cTkCollision::BuildCapsuleShape"
    class BuildConvexPointsShape(HookFactory):
        _name = "cTkCollision::BuildConvexPointsShape"
    class BuildFromChildNode(HookFactory):
        _name = "cTkCollision::BuildFromChildNode"
    class BuildFromMesh(HookFactory):
        _name = "cTkCollision::BuildFromMesh"
    class BuildSphereShape(HookFactory):
        _name = "cTkCollision::BuildSphereShape"
    class BuildStaticFromChildNode(HookFactory):
        _name = "cTkCollision::BuildStaticFromChildNode"
    class CastShape(HookFactory):
        _name = "cTkCollision::CastShape"
    class ClosestPoint(HookFactory):
        _name = "cTkCollision::ClosestPoint"
    class Construct(HookFactory):
        _name = "cTkCollision::Construct"
    class ConvexHullClosestPoint(HookFactory):
        _name = "cTkCollision::ConvexHullClosestPoint"
    class CreateHull(HookFactory):
        _name = "cTkCollision::CreateHull"
    class CreateShape(HookFactory):
        _name = "cTkCollision::CreateShape"
    class CreateSingleShape(HookFactory):
        _name = "cTkCollision::CreateSingleShape"
    class CreateTriMesh(HookFactory):
        _name = "cTkCollision::CreateTriMesh"
    class Release(HookFactory):
        _name = "cTkCollision::Release"
    class GetOBB(HookFactory):
        _name = "cTkCollision::GetOBB"
    class GetRadius(HookFactory):
        _name = "cTkCollision::GetRadius"
    class GetVoxelTypeFromTri(HookFactory):
        _name = "cTkCollision::GetVoxelTypeFromTri"
    class SetVolumeAndInertiaToThatOfBox(HookFactory):
        _name = "cTkCollision::SetVolumeAndInertiaToThatOfBox"

class cGcAsteroidPatternGenerator:
    class Generate(HookFactory):
        _name = "cGcAsteroidPatternGenerator::Generate"
        _overload: overloads.cGcAsteroidPatternGenerator.Generate.overloads = "const cGcAsteroidGeneratorRing *, cGcAsteroidLayout *, const cTkSphere *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcAsteroidPatternGenerator.Generate.overloads):
            cls._overload = overload_args
            return cls

class cTkVoxelGeneratorAsteroid:
    class Generate(HookFactory):
        _name = "cTkVoxelGeneratorAsteroid::Generate"

class cGcModuleSet:
    class DeleteBuildingPresetsForAllModules(HookFactory):
        _name = "cGcModuleSet::DeleteBuildingPresetsForAllModules"
    class RotationsMatch(HookFactory):
        _name = "cGcModuleSet::RotationsMatch"
    class LoadModuleSet(HookFactory):
        _name = "cGcModuleSet::LoadModuleSet"
    class Import(HookFactory):
        _name = "cGcModuleSet::Import"
    class GetModulesWithoutConnectors(HookFactory):
        _name = "cGcModuleSet::GetModulesWithoutConnectors"
    class GetDecorationItemGeometry(HookFactory):
        _name = "cGcModuleSet::GetDecorationItemGeometry"
    class CreateNewMapFromPreset(HookFactory):
        _name = "cGcModuleSet::CreateNewMapFromPreset"
    class ConnectorsFit(HookFactory):
        _name = "cGcModuleSet::ConnectorsFit"
    class GetOrCreateBuildingPreset(HookFactory):
        _name = "cGcModuleSet::GetOrCreateBuildingPreset"
    class PollToOptimize(HookFactory):
        _name = "cGcModuleSet::PollToOptimize"
    class PrepareDecoration(HookFactory):
        _name = "cGcModuleSet::PrepareDecoration"
    class PrepareBoundaryConstraints(HookFactory):
        _name = "cGcModuleSet::PrepareBoundaryConstraints"
    class PreparePossibleNeighbours(HookFactory):
        _name = "cGcModuleSet::PreparePossibleNeighbours"
    class PrepareCompatibleConnectors(HookFactory):
        _name = "cGcModuleSet::PrepareCompatibleConnectors"
    class CreateMapParameters(HookFactory):
        _name = "cGcModuleSet::CreateMapParameters"
    class GetConnector(HookFactory):
        _name = "cGcModuleSet::GetConnector"

class GetClusterLayout(HookFactory):
    _name = "GetClusterLayout"

class RoundDirection(HookFactory):
    _name = "RoundDirection"

class cGcClusterLayoutPlacement:
    class GetClusterLayout(HookFactory):
        _name = "cGcClusterLayoutPlacement::GetClusterLayout"
    class GetOverlapError(HookFactory):
        _name = "cGcClusterLayoutPlacement::GetOverlapError"
    class TestBox(HookFactory):
        _name = "cGcClusterLayoutPlacement::TestBox"

class cGcPlanetBuildingGenerator:
    class GenerateBuildings(HookFactory):
        _name = "cGcPlanetBuildingGenerator::GenerateBuildings"
    class PollToPlaceInitialBuildings(HookFactory):
        _name = "cGcPlanetBuildingGenerator::PollToPlaceInitialBuildings"
    class AddOverrideBuildings(HookFactory):
        _name = "cGcPlanetBuildingGenerator::AddOverrideBuildings"
    class AddSurvivalBuildings(HookFactory):
        _name = "cGcPlanetBuildingGenerator::AddSurvivalBuildings"
    class GenerateBuildingModels(HookFactory):
        _name = "cGcPlanetBuildingGenerator::GenerateBuildingModels"
    class SetupBuildingFilenames(HookFactory):
        _name = "cGcPlanetBuildingGenerator::SetupBuildingFilenames"
    class PollCalculateBuildingSizes(HookFactory):
        _name = "cGcPlanetBuildingGenerator::PollCalculateBuildingSizes"

class cGcVoxelAsteroidGrid:
    class Release(HookFactory):
        _templates = ("T0", )
        _name = "cGcVoxelAsteroidGrid<{T0}>::Release"
    class GenerateData(HookFactory):
        _templates = ("T0", )
        _name = "cGcVoxelAsteroidGrid<{T0}>::GenerateData"

class cGcAsteroidGrid:
    class Iterate(HookFactory):
        _templates = ("T0", )
        _name = "cGcAsteroidGrid<{T0}>::Iterate"
    class Update(HookFactory):
        _templates = ("T0", )
        _name = "cGcAsteroidGrid<{T0}>::Update"
    class CalculateAsteroidTransform(HookFactory):
        _templates = ("T0", )
        _name = "cGcAsteroidGrid<{T0}>::CalculateAsteroidTransform"

class hkArrayBase:
    class _ensureOwnsStorage(HookFactory):
        _templates = ("T0", )
        _name = "hkArrayBase<{T0}>::_ensureOwnsStorage"

class sWFCNavigationSubgraphNode:
    class sWFCNavigationSubgraphNode(HookFactory):
        _name = "sWFCNavigationSubgraphNode::sWFCNavigationSubgraphNode"

class cGcBuildingPreset:
    class Generate(HookFactory):
        _name = "cGcBuildingPreset::Generate"
    class GenerateUsingFallback(HookFactory):
        _name = "cGcBuildingPreset::GenerateUsingFallback"
    class MergeBounds(HookFactory):
        _name = "cGcBuildingPreset::MergeBounds"

class cGcMap:
    class cGcMap(HookFactory):
        _name = "cGcMap::cGcMap"
    class Reset(HookFactory):
        _name = "cGcMap::Reset"
    class OnCollapseSlot(HookFactory):
        _name = "cGcMap::OnCollapseSlot"
    class CollapseAll(HookFactory):
        _name = "cGcMap::CollapseAll"
    class Generate(HookFactory):
        _name = "cGcMap::Generate"
    class ApplyMinimumUseConstraints(HookFactory):
        _name = "cGcMap::ApplyMinimumUseConstraints"
    class FullyCollapsed(HookFactory):
        _name = "cGcMap::FullyCollapsed"
    class PickDecorationItems(HookFactory):
        _name = "cGcMap::PickDecorationItems"
        _overload: overloads.cGcMap.PickDecorationItems.overloads = "cGcMap *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcMap.PickDecorationItems.overloads):
            cls._overload = overload_args
            return cls
    class CreateDecorationPartsList(HookFactory):
        _name = "cGcMap::CreateDecorationPartsList"
    class CopyState(HookFactory):
        _name = "cGcMap::CopyState"
    class ApplyConstraints(HookFactory):
        _name = "cGcMap::ApplyConstraints"
    class PropagateConstraints(HookFactory):
        _name = "cGcMap::PropagateConstraints"
    class ApplyWallThemes(HookFactory):
        _name = "cGcMap::ApplyWallThemes"
    class CreatePartsList(HookFactory):
        _name = "cGcMap::CreatePartsList"
    class CreateNPCList(HookFactory):
        _name = "cGcMap::CreateNPCList"
    class GetBoundingBox(HookFactory):
        _name = "cGcMap::GetBoundingBox"
    class DecideLayout(HookFactory):
        _name = "cGcMap::DecideLayout"
    class GetGroundLevelBoundingBoxes(HookFactory):
        _name = "cGcMap::GetGroundLevelBoundingBoxes"
    class GetNonApplyingSettlementProgressBits(HookFactory):
        _name = "cGcMap::GetNonApplyingSettlementProgressBits"
    class IsInside(HookFactory):
        _name = "cGcMap::IsInside"
    class FindReachableSlots(HookFactory):
        _name = "cGcMap::FindReachableSlots"
    class FindRooms(HookFactory):
        _name = "cGcMap::FindRooms"
    class GetRoom(HookFactory):
        _name = "cGcMap::GetRoom"
    class ImproveConnectedAreas(HookFactory):
        _name = "cGcMap::ImproveConnectedAreas"
    class GetStartSlot(HookFactory):
        _name = "cGcMap::GetStartSlot"
    class FindConnectedAreas(HookFactory):
        _name = "cGcMap::FindConnectedAreas"
    class AllocateSlots(HookFactory):
        _name = "cGcMap::AllocateSlots"
    class GetLowestEntropySlot(HookFactory):
        _name = "cGcMap::GetLowestEntropySlot"

class IsTerrainEditBoxNode(HookFactory):
    _name = "IsTerrainEditBoxNode"

class CanUseDecorationItem(HookFactory):
    _name = "CanUseDecorationItem"

class cGcMapLayout:
    class cGcMapLayout(HookFactory):
        _name = "cGcMapLayout::cGcMapLayout"
    class PollToParse(HookFactory):
        _name = "cGcMapLayout::PollToParse"
    class Parse(HookFactory):
        _name = "cGcMapLayout::Parse"

class GetModule(HookFactory):
    _name = "GetModule"

class GetSlotPosition(HookFactory):
    _name = "GetSlotPosition"

class cGcModule:
    class cGcModule(HookFactory):
        _name = "cGcModule::cGcModule"
    class GetFace(HookFactory):
        _name = "cGcModule::GetFace"
    class TransferPossibleNeighbourDataFromPreviousModule(HookFactory):
        _name = "cGcModule::TransferPossibleNeighbourDataFromPreviousModule"
    class BoundingBoxWithoutRotation(HookFactory):
        _name = "cGcModule::BoundingBoxWithoutRotation"

class IsExcluded(HookFactory):
    _name = "IsExcluded"

class GetFace(HookFactory):
    _name = "GetFace"

class Mirrored(HookFactory):
    _name = "Mirrored"

class GetConnectorForId(HookFactory):
    _name = "GetConnectorForId"

class cGcModuleSubset:
    class Intersects(HookFactory):
        _name = "cGcModuleSubset::Intersects"
    class IsSplitBy(HookFactory):
        _name = "cGcModuleSubset::IsSplitBy"
    class GetEntropyForSplit(HookFactory):
        _name = "cGcModuleSubset::GetEntropyForSplit"
    class PickGroup(HookFactory):
        _name = "cGcModuleSubset::PickGroup"

class cGcSlot:
    class Collapse(HookFactory):
        _name = "cGcSlot::Collapse"
    class CollapseRandom(HookFactory):
        _name = "cGcSlot::CollapseRandom"
    class GetRelativeTransform(HookFactory):
        _name = "cGcSlot::GetRelativeTransform"
    class RemoveModules(HookFactory):
        _name = "cGcSlot::RemoveModules"
    class RemoveAllBut(HookFactory):
        _name = "cGcSlot::RemoveAllBut"
    class UpdateNeighbours(HookFactory):
        _name = "cGcSlot::UpdateNeighbours"
    class GetNeighbour(HookFactory):
        _name = "cGcSlot::GetNeighbour"
    class CanWalk(HookFactory):
        _name = "cGcSlot::CanWalk"
    class GetNavigationSubGraph(HookFactory):
        _name = "cGcSlot::GetNavigationSubGraph"
    class IsBuildingEntrance(HookFactory):
        _name = "cGcSlot::IsBuildingEntrance"
        _overload: overloads.cGcSlot.IsBuildingEntrance.overloads = "cGcSlot *, eBlockDirection"
        @classmethod
        def overload(cls, overload_args: overloads.cGcSlot.IsBuildingEntrance.overloads):
            cls._overload = overload_args
            return cls

class GetRelativeTransform(HookFactory):
    _name = "GetRelativeTransform"

class cGcWFCScene:
    class PollToParseScenes(HookFactory):
        _name = "cGcWFCScene::PollToParseScenes"
    class Get(HookFactory):
        _name = "cGcWFCScene::Get"
    class BasebuildingTerrainEditBoxes(HookFactory):
        _name = "cGcWFCScene::BasebuildingTerrainEditBoxes"

class GetNavigationNodeArriveDistance(HookFactory):
    _name = "GetNavigationNodeArriveDistance"

class cGcWFCNavigationSubGraph:
    class ParseScene(HookFactory):
        _name = "cGcWFCNavigationSubGraph::ParseScene"

class FindInteractiveObjectInParents(HookFactory):
    _name = "FindInteractiveObjectInParents"

class cGcSolarSystemDirector:
    class Prepare(HookFactory):
        _name = "cGcSolarSystemDirector::Prepare"
    class Update(HookFactory):
        _name = "cGcSolarSystemDirector::Update"
    class UpdateRender(HookFactory):
        _name = "cGcSolarSystemDirector::UpdateRender"

class cGcSolarSystemGenerator:
    class GenerateQueryInfo(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateQueryInfo"
    class GenerateBiomesInfo(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateBiomesInfo"
    class Generate(HookFactory):
        _name = "cGcSolarSystemGenerator::Generate"
    class GenerateBasics(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateBasics"
    class GeneratePlanetBiomes(HookFactory):
        _name = "cGcSolarSystemGenerator::GeneratePlanetBiomes"
    class GeneratePlanetPositions(HookFactory):
        _name = "cGcSolarSystemGenerator::GeneratePlanetPositions"
    class GenerateSpaceStationAndPlayerSpawn(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateSpaceStationAndPlayerSpawn"
    class GenerateAsteroids(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateAsteroids"
    class GenerateSky(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateSky"
    class GenerateAttributeStrings(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateAttributeStrings"
    class GenerateProceduralStarClass(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateProceduralStarClass"
    class GenerateCelestialBodyStrings(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateCelestialBodyStrings"
    class GenerateLocators(HookFactory):
        _name = "cGcSolarSystemGenerator::GenerateLocators"
    class ShouldReplaceWithSailShip(HookFactory):
        _name = "cGcSolarSystemGenerator::ShouldReplaceWithSailShip"
    class GetSpaceSkyColours(HookFactory):
        _name = "cGcSolarSystemGenerator::GetSpaceSkyColours"

class cGcTradeRoute:
    class cGcTradeRoute(HookFactory):
        _name = "cGcTradeRoute::cGcTradeRoute"
    class GetClosestSectionInDirection(HookFactory):
        _name = "cGcTradeRoute::GetClosestSectionInDirection"
    class Generate(HookFactory):
        _name = "cGcTradeRoute::Generate"

class cGcTradeRouteSection:
    class cGcTradeRouteSection(HookFactory):
        _name = "cGcTradeRouteSection::cGcTradeRouteSection"
    class Construct(HookFactory):
        _name = "cGcTradeRouteSection::Construct"
    class GetClosestPoint(HookFactory):
        _name = "cGcTradeRouteSection::GetClosestPoint"
    class CalculatePointByDistance(HookFactory):
        _name = "cGcTradeRouteSection::CalculatePointByDistance"
    class Render(HookFactory):
        _name = "cGcTradeRouteSection::Render"

class cGcWarpEffect:
    class Construct(HookFactory):
        _name = "cGcWarpEffect::Construct"
    class RequestWarpIn(HookFactory):
        _name = "cGcWarpEffect::RequestWarpIn"
    class RequestWarpOut(HookFactory):
        _name = "cGcWarpEffect::RequestWarpOut"
    class Init(HookFactory):
        _name = "cGcWarpEffect::Init"
    class Update(HookFactory):
        _name = "cGcWarpEffect::Update"
    class PlayWarpEffect(HookFactory):
        _name = "cGcWarpEffect::PlayWarpEffect"
    class Finish(HookFactory):
        _name = "cGcWarpEffect::Finish"
    class IsNexus(HookFactory):
        _name = "cGcWarpEffect::IsNexus"
    class IsFreighter(HookFactory):
        _name = "cGcWarpEffect::IsFreighter"
    class GetAxisSign(HookFactory):
        _name = "cGcWarpEffect::GetAxisSign"
    class UpdateWarpIn(HookFactory):
        _name = "cGcWarpEffect::UpdateWarpIn"
    class UpdateWarpOut(HookFactory):
        _name = "cGcWarpEffect::UpdateWarpOut"

class NavGraphPhysProbeJob(HookFactory):
    _name = "NavGraphPhysProbeJob"

class cGcNPCManager:
    class Prepare(HookFactory):
        _name = "cGcNPCManager::Prepare"
    class GetNPCResource(HookFactory):
        _name = "cGcNPCManager::GetNPCResource"
    class Release(HookFactory):
        _name = "cGcNPCManager::Release"
    class StartGenerationTask(HookFactory):
        _name = "cGcNPCManager::StartGenerationTask"
    class SetPoseBonesForRace(HookFactory):
        _name = "cGcNPCManager::SetPoseBonesForRace"
    class GetRandomHologramProp(HookFactory):
        _name = "cGcNPCManager::GetRandomHologramProp"
    class GetNPCWordReaction(HookFactory):
        _name = "cGcNPCManager::GetNPCWordReaction"
    class GetTerminalWordReaction(HookFactory):
        _name = "cGcNPCManager::GetTerminalWordReaction"

class cGcNPCAnimationManager:
    class GetReaction(HookFactory):
        _name = "cGcNPCAnimationManager::GetReaction"
    class GetMoodAnim(HookFactory):
        _name = "cGcNPCAnimationManager::GetMoodAnim"
    class ChooseAnim(HookFactory):
        _name = "cGcNPCAnimationManager::ChooseAnim"

class cGcNPCNavGraph:
    class cGcNPCNavGraph(HookFactory):
        _name = "cGcNPCNavGraph::cGcNPCNavGraph"
    class Prepare(HookFactory):
        _name = "cGcNPCNavGraph::Prepare"
    class Release(HookFactory):
        _name = "cGcNPCNavGraph::Release"
    class FreeNavNode(HookFactory):
        _name = "cGcNPCNavGraph::FreeNavNode"
    class Expand(HookFactory):
        _name = "cGcNPCNavGraph::Expand"
    class IsValidHandle(HookFactory):
        _name = "cGcNPCNavGraph::IsValidHandle"
    class IsValidLink(HookFactory):
        _name = "cGcNPCNavGraph::IsValidLink"
    class GetNavNode(HookFactory):
        _name = "cGcNPCNavGraph::GetNavNode"
    class RebuildSpatialPartitioning(HookFactory):
        _name = "cGcNPCNavGraph::RebuildSpatialPartitioning"
    class AddNode(HookFactory):
        _name = "cGcNPCNavGraph::AddNode"
    class RemoveNode(HookFactory):
        _name = "cGcNPCNavGraph::RemoveNode"
    class InvalidateLinks(HookFactory):
        _name = "cGcNPCNavGraph::InvalidateLinks"
    class FindNearestNode(HookFactory):
        _name = "cGcNPCNavGraph::FindNearestNode"

class cGcNavGraphQuadTree:
    class TreeNode:
        class Insert(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::Insert"
        class Remove(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::Remove"
        class Subdivide(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::Subdivide"
        class Destroy(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::Destroy"
        class FindNearestNode(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::FindNearestNode"
        class FindNodesInRange(HookFactory):
            _name = "cGcNavGraphQuadTree::TreeNode::FindNodesInRange"
    class AABB:
        class ContainsPoint(HookFactory):
            _name = "cGcNavGraphQuadTree::AABB::ContainsPoint"
        class DistanceToPointSq(HookFactory):
            _name = "cGcNavGraphQuadTree::AABB::DistanceToPointSq"
    class AddNode(HookFactory):
        _name = "cGcNavGraphQuadTree::AddNode"
    class ExpandToFit(HookFactory):
        _name = "cGcNavGraphQuadTree::ExpandToFit"

class cGcNPCNavGraphPhysProbeJob:
    class ProbePhysics(HookFactory):
        _name = "cGcNPCNavGraphPhysProbeJob::ProbePhysics"

class cGcPlanetControls:
    class Construct(HookFactory):
        _name = "cGcPlanetControls::Construct"
    class Update(HookFactory):
        _name = "cGcPlanetControls::Update"
    class FulfillGenerationRequests(HookFactory):
        _name = "cGcPlanetControls::FulfillGenerationRequests"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___operator____cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___operator____cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___throwOverflowError(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___throwOverflowError"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___insertKeyPrepareEmptySpot_cGcNavGraphNodeHandle_const___(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___insertKeyPrepareEmptySpot_cGcNavGraphNodeHandle_const___"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___try_increase_info(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___try_increase_info"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___initData(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___initData"

class robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___rehashPowerOfTwo(HookFactory):
    _name = "robin_hood__detail__Table_1_80_cGcNavGraphNodeHandle__cGcNPCNavigationAreaComponent__GeneratePath____2___sAStarData_robin_hood__hash_cGcNavGraphNodeHandle_void__std__equal_to_cGcNavGraphNodeHandle___1___rehashPowerOfTwo"

class cTkHeirarchicalRNG:
    class Push(HookFactory):
        _name = "cTkHeirarchicalRNG::Push"

class IsObjectBPriorityLessThanObjectAPriority(HookFactory):
    _name = "IsObjectBPriorityLessThanObjectAPriority"

class cGcPlanetLodSphere:
    class UpdateRender(HookFactory):
        _name = "cGcPlanetLodSphere::UpdateRender"
    class Build(HookFactory):
        _name = "cGcPlanetLodSphere::Build"
    class BuildJob(HookFactory):
        _name = "cGcPlanetLodSphere::BuildJob"
    class GenerateSphere_Begin(HookFactory):
        _name = "cGcPlanetLodSphere::GenerateSphere_Begin"
    class GenerateSphere_End(HookFactory):
        _name = "cGcPlanetLodSphere::GenerateSphere_End"
    class IsFullyGenerated(HookFactory):
        _name = "cGcPlanetLodSphere::IsFullyGenerated"

class cGcPlanetMappingManager:
    class GetMappingDataFromUAWritable(HookFactory):
        _name = "cGcPlanetMappingManager::GetMappingDataFromUAWritable"
    class GetSectionIndexesFromWorldPosition(HookFactory):
        _name = "cGcPlanetMappingManager::GetSectionIndexesFromWorldPosition"
    class GetCurrentCubeIndexes(HookFactory):
        _name = "cGcPlanetMappingManager::GetCurrentCubeIndexes"

class cGcPlanetObjectSpawnData:
    class cGcPlanetObjectSpawnData(HookFactory):
        _name = "cGcPlanetObjectSpawnData::cGcPlanetObjectSpawnData"
        _overload: overloads.cGcPlanetObjectSpawnData.cGcPlanetObjectSpawnData.overloads = "cGcPlanetObjectSpawnData *, cGcPlanetObjectSpawnData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcPlanetObjectSpawnData.cGcPlanetObjectSpawnData.overloads):
            cls._overload = overload_args
            return cls

class cGcAvailableWeapons:
    class Prepare(HookFactory):
        _name = "cGcAvailableWeapons::Prepare"
    class ChooseBySeed(HookFactory):
        _name = "cGcAvailableWeapons::ChooseBySeed"

class cGcShipAIAttackBuilding:
    class Run(HookFactory):
        _name = "cGcShipAIAttackBuilding::Run"
    class ClampToHeightAboveGround(HookFactory):
        _name = "cGcShipAIAttackBuilding::ClampToHeightAboveGround"
    class GetName(HookFactory):
        _name = "cGcShipAIAttackBuilding::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAIAttackBuilding::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIAttackBuilding::ShipAIConstruct"

class cGcFrigateAIBase:
    class Run(HookFactory):
        _name = "cGcFrigateAIBase::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcFrigateAIBase::ShipAIConstruct"
    class SetPositionOfInterest(HookFactory):
        _name = "cGcFrigateAIBase::SetPositionOfInterest"
    class Subscribe(HookFactory):
        _name = "cGcFrigateAIBase::Subscribe"
    class GetName(HookFactory):
        _name = "cGcFrigateAIBase::GetName"

class cGcShipAIFollowTradeRoutes:
    class SetLandTarget(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::SetLandTarget"
    class Run(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::Run"
    class AttachToClosestTradeRoute(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::AttachToClosestTradeRoute"
    class GetName(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::GetName"
    class cGcShipAIFollowTradeRoutes(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::cGcShipAIFollowTradeRoutes"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFollowTradeRoutes::ShipAIConstruct"

class cGcShipAILand:
    class Run(HookFactory):
        _name = "cGcShipAILand::Run"
    class GetName(HookFactory):
        _name = "cGcShipAILand::GetName"
    class cGcShipAILand(HookFactory):
        _name = "cGcShipAILand::cGcShipAILand"
    class OnInit(HookFactory):
        _name = "cGcShipAILand::OnInit"

class cGcShipAILandNextToPlayer:
    class Run(HookFactory):
        _name = "cGcShipAILandNextToPlayer::Run"
    class PickSearchLocation(HookFactory):
        _name = "cGcShipAILandNextToPlayer::PickSearchLocation"
    class GetName(HookFactory):
        _name = "cGcShipAILandNextToPlayer::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAILandNextToPlayer::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAILandNextToPlayer::ShipAIConstruct"
    class Subscribe(HookFactory):
        _name = "cGcShipAILandNextToPlayer::Subscribe"

class cGcShipAIDocked:
    class Run(HookFactory):
        _name = "cGcShipAIDocked::Run"
    class Cancel(HookFactory):
        _name = "cGcShipAIDocked::Cancel"
    class Subscribe(HookFactory):
        _name = "cGcShipAIDocked::Subscribe"
    class PutPilotBackInShip(HookFactory):
        _name = "cGcShipAIDocked::PutPilotBackInShip"
    class GetName(HookFactory):
        _name = "cGcShipAIDocked::GetName"
    class cGcShipAIDocked(HookFactory):
        _name = "cGcShipAIDocked::cGcShipAIDocked"
    class OnInit(HookFactory):
        _name = "cGcShipAIDocked::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIDocked::ShipAIConstruct"

class cGcShipAITakeOff:
    class Run(HookFactory):
        _name = "cGcShipAITakeOff::Run"
    class Cancel(HookFactory):
        _name = "cGcShipAITakeOff::Cancel"
    class GetName(HookFactory):
        _name = "cGcShipAITakeOff::GetName"
    class cGcShipAITakeOff(HookFactory):
        _name = "cGcShipAITakeOff::cGcShipAITakeOff"
    class OnInit(HookFactory):
        _name = "cGcShipAITakeOff::OnInit"

class cGcShipAIHasHailReply:
    class Run(HookFactory):
        _name = "cGcShipAIHasHailReply::Run"
    class Cancel(HookFactory):
        _name = "cGcShipAIHasHailReply::Cancel"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIHasHailReply::ShipAIConstruct"

class cGcShipAIHasSpecificHailReply:
    class Subscribe(HookFactory):
        _name = "cGcShipAIHasSpecificHailReply::Subscribe"
    class GetName(HookFactory):
        _name = "cGcShipAIHasSpecificHailReply::GetName"

class cGcShipAIClearCommunication:
    class OnInit(HookFactory):
        _name = "cGcShipAIClearCommunication::OnInit"
    class GetName(HookFactory):
        _name = "cGcShipAIClearCommunication::GetName"

class cGcShipAISendFightPlayerMessage:
    class OnInit(HookFactory):
        _name = "cGcShipAISendFightPlayerMessage::OnInit"
    class GetName(HookFactory):
        _name = "cGcShipAISendFightPlayerMessage::GetName"

class cGcShipAIFlybyOverhead:
    class StartFlyby(HookFactory):
        _name = "cGcShipAIFlybyOverhead::StartFlyby"
    class Run(HookFactory):
        _name = "cGcShipAIFlybyOverhead::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIFlybyOverhead::GetName"
    class cGcShipAIFlybyOverhead(HookFactory):
        _name = "cGcShipAIFlybyOverhead::cGcShipAIFlybyOverhead"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFlybyOverhead::ShipAIConstruct"
    class Subscribe(HookFactory):
        _name = "cGcShipAIFlybyOverhead::Subscribe"

class cGcShipAIFlybyClose:
    class Run(HookFactory):
        _name = "cGcShipAIFlybyClose::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFlybyClose::ShipAIConstruct"
    class StartFlyby(HookFactory):
        _name = "cGcShipAIFlybyClose::StartFlyby"
    class UpdateLocked(HookFactory):
        _name = "cGcShipAIFlybyClose::UpdateLocked"
    class UpdateAttack(HookFactory):
        _name = "cGcShipAIFlybyClose::UpdateAttack"
    class GetName(HookFactory):
        _name = "cGcShipAIFlybyClose::GetName"
    class cGcShipAIFlybyClose(HookFactory):
        _name = "cGcShipAIFlybyClose::cGcShipAIFlybyClose"
    class Subscribe(HookFactory):
        _name = "cGcShipAIFlybyClose::Subscribe"

class cGcShipAIFlybyIntercept:
    class Run(HookFactory):
        _name = "cGcShipAIFlybyIntercept::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIFlybyIntercept::GetName"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFlybyIntercept::ShipAIConstruct"
    class Subscribe(HookFactory):
        _name = "cGcShipAIFlybyIntercept::Subscribe"

class cGcShipAIStayClose:
    class Run(HookFactory):
        _name = "cGcShipAIStayClose::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIStayClose::ShipAIConstruct"
    class GetName(HookFactory):
        _name = "cGcShipAIStayClose::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAIStayClose::OnInit"

class cGcShipAIEscort:
    class Run(HookFactory):
        _name = "cGcShipAIEscort::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIEscort::ShipAIConstruct"
    class Subscribe(HookFactory):
        _name = "cGcShipAIEscort::Subscribe"
    class GetName(HookFactory):
        _name = "cGcShipAIEscort::GetName"

class cGcShipAIFlybyMineAsteroids:
    class Run(HookFactory):
        _name = "cGcShipAIFlybyMineAsteroids::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFlybyMineAsteroids::ShipAIConstruct"
    class Subscribe(HookFactory):
        _name = "cGcShipAIFlybyMineAsteroids::Subscribe"
    class StartFlyby(HookFactory):
        _name = "cGcShipAIFlybyMineAsteroids::StartFlyby"
    class sAsteroidData:
        class IsValid(HookFactory):
            _name = "cGcShipAIFlybyMineAsteroids::sAsteroidData::IsValid"
    class GetName(HookFactory):
        _name = "cGcShipAIFlybyMineAsteroids::GetName"

class cGcShipAICheckShooter:
    class Run(HookFactory):
        _name = "cGcShipAICheckShooter::Run"
    class GetName(HookFactory):
        _name = "cGcShipAICheckShooter::GetName"

class cGcShipAIAlertData:
    class NewTarget(HookFactory):
        _name = "cGcShipAIAlertData::NewTarget"
    class cGcShipAIAlertData(HookFactory):
        _name = "cGcShipAIAlertData::cGcShipAIAlertData"

class cGcShipAIShooterData:
    class NewShooter(HookFactory):
        _name = "cGcShipAIShooterData::NewShooter"
    class cGcShipAIShooterData(HookFactory):
        _name = "cGcShipAIShooterData::cGcShipAIShooterData"

class cGcShipAISetAlert:
    class Run(HookFactory):
        _name = "cGcShipAISetAlert::Run"
    class GetName(HookFactory):
        _name = "cGcShipAISetAlert::GetName"
    class cGcShipAISetAlert(HookFactory):
        _name = "cGcShipAISetAlert::cGcShipAISetAlert"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAISetAlert::ShipAIConstruct"

class cGcShipAICheckPlayerIsShooter:
    class Run(HookFactory):
        _name = "cGcShipAICheckPlayerIsShooter::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAICheckPlayerIsShooter::ShipAIConstruct"
    class GetName(HookFactory):
        _name = "cGcShipAICheckPlayerIsShooter::GetName"

class cGcShipAISetPlayerShooter:
    class OnInit(HookFactory):
        _name = "cGcShipAISetPlayerShooter::OnInit"
    class GetName(HookFactory):
        _name = "cGcShipAISetPlayerShooter::GetName"

class cGcShipAICheckDeath:
    class Run(HookFactory):
        _name = "cGcShipAICheckDeath::Run"
    class DropLoot(HookFactory):
        _name = "cGcShipAICheckDeath::DropLoot"
    class FinalDestruction(HookFactory):
        _name = "cGcShipAICheckDeath::FinalDestruction"
    class GetName(HookFactory):
        _name = "cGcShipAICheckDeath::GetName"

class cGcShipAICheckOrbit:
    class Run(HookFactory):
        _name = "cGcShipAICheckOrbit::Run"
    class GetName(HookFactory):
        _name = "cGcShipAICheckOrbit::GetName"

class cGcShipAITrackTarget:
    class Run(HookFactory):
        _name = "cGcShipAITrackTarget::Run"
    class GetName(HookFactory):
        _name = "cGcShipAITrackTarget::GetName"
    class cGcShipAITrackTarget(HookFactory):
        _name = "cGcShipAITrackTarget::cGcShipAITrackTarget"
    class OnInit(HookFactory):
        _name = "cGcShipAITrackTarget::OnInit"
    class Subscribe(HookFactory):
        _name = "cGcShipAITrackTarget::Subscribe"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAITrackTarget::ShipAIConstruct"

class cGcShipAIAttack:
    class Run(HookFactory):
        _name = "cGcShipAIAttack::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIAttack::GetName"
    class cGcShipAIAttack(HookFactory):
        _name = "cGcShipAIAttack::cGcShipAIAttack"
    class OnInit(HookFactory):
        _name = "cGcShipAIAttack::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIAttack::ShipAIConstruct"

class cGcShipAIAttackFreighter:
    class Run(HookFactory):
        _name = "cGcShipAIAttackFreighter::Run"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIAttackFreighter::ShipAIConstruct"
    class GetTargetNormal(HookFactory):
        _name = "cGcShipAIAttackFreighter::GetTargetNormal"
    class GetName(HookFactory):
        _name = "cGcShipAIAttackFreighter::GetName"
    class cGcShipAIAttackFreighter(HookFactory):
        _name = "cGcShipAIAttackFreighter::cGcShipAIAttackFreighter"
    class OnInit(HookFactory):
        _name = "cGcShipAIAttackFreighter::OnInit"

class cGcShipAIBehaviour:
    class GetSpaceshipComponentData(HookFactory):
        _name = "cGcShipAIBehaviour::GetSpaceshipComponentData"
    class Travel(HookFactory):
        _name = "cGcShipAIBehaviour::Travel"
        _overload: overloads.cGcShipAIBehaviour.Travel.overloads = "cGcShipAIBehaviour *, const cTkVector3 *, const cGcSpaceshipTravelData *, const cTkVector3 *, cGcShipAIAvoidanceTracking *, bool, cTkRigidBody *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcShipAIBehaviour.Travel.overloads):
            cls._overload = overload_args
            return cls
    class CanTarget(HookFactory):
        _name = "cGcShipAIBehaviour::CanTarget"
    class NewTarget(HookFactory):
        _name = "cGcShipAIBehaviour::NewTarget"
    class FollowLeader(HookFactory):
        _name = "cGcShipAIBehaviour::FollowLeader"
    class CountSquadTargets(HookFactory):
        _name = "cGcShipAIBehaviour::CountSquadTargets"
    class GetAxis(HookFactory):
        _name = "cGcShipAIBehaviour::GetAxis"
    class GetName(HookFactory):
        _name = "cGcShipAIBehaviour::GetName"

class cGcShipAIEscape:
    class Run(HookFactory):
        _name = "cGcShipAIEscape::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIEscape::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAIEscape::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIEscape::ShipAIConstruct"

class cGcShipAIWarpingIn:
    class Run(HookFactory):
        _name = "cGcShipAIWarpingIn::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIWarpingIn::GetName"

class cGcShipAIWarpingOut:
    class Run(HookFactory):
        _name = "cGcShipAIWarpingOut::Run"
    class GetName(HookFactory):
        _name = "cGcShipAIWarpingOut::GetName"

class cGcShipAIFreighterTargeting:
    class NotifySquad(HookFactory):
        _name = "cGcShipAIFreighterTargeting::NotifySquad"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIFreighterTargeting::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAIFreighterTargeting::Run"
    class Subscribe(HookFactory):
        _name = "cGcShipAIFreighterTargeting::Subscribe"
    class UpdateTracking(HookFactory):
        _name = "cGcShipAIFreighterTargeting::UpdateTracking"
    class GetName(HookFactory):
        _name = "cGcShipAIFreighterTargeting::GetName"

class cGcShipAISquadronData:
    class SetFormationState(HookFactory):
        _name = "cGcShipAISquadronData::SetFormationState"

class cEgGeometryResource:
    class GetDeletionFrameDelay(HookFactory):
        _name = "cEgGeometryResource::GetDeletionFrameDelay"
    class FactoryFunc(HookFactory):
        _name = "cEgGeometryResource::FactoryFunc"
    class GetBindTransform(HookFactory):
        _name = "cEgGeometryResource::GetBindTransform"
    class SetSkinnedVertexData(HookFactory):
        _name = "cEgGeometryResource::SetSkinnedVertexData"
    class CloneOriginalVertDataToIndex(HookFactory):
        _name = "cEgGeometryResource::CloneOriginalVertDataToIndex"
    class CreateVertexInfoForHash(HookFactory):
        _name = "cEgGeometryResource::CreateVertexInfoForHash"
    class InsertElement(HookFactory):
        _name = "cEgGeometryResource::InsertElement"
        _overload: overloads.cEgGeometryResource.InsertElement.overloads = "cEgGeometryResource *, char *, int, const cTkVector2 *, const cTkVertexElement *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgGeometryResource.InsertElement.overloads):
            cls._overload = overload_args
            return cls
    class cEgGeometryResource(HookFactory):
        _name = "cEgGeometryResource::cEgGeometryResource"
    class Clone(HookFactory):
        _name = "cEgGeometryResource::Clone"
    class CloneInternal(HookFactory):
        _name = "cEgGeometryResource::CloneInternal"
    class InitDefault(HookFactory):
        _name = "cEgGeometryResource::InitDefault"
    class ReleaseVertexBuffer(HookFactory):
        _name = "cEgGeometryResource::ReleaseVertexBuffer"
    class Release(HookFactory):
        _name = "cEgGeometryResource::Release"
    class Load(HookFactory):
        _name = "cEgGeometryResource::Load"
    class ParseData(HookFactory):
        _name = "cEgGeometryResource::ParseData"
    class GetElementCount(HookFactory):
        _name = "cEgGeometryResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgGeometryResource::GetElementParamInt"
    class MapResStream(HookFactory):
        _name = "cEgGeometryResource::MapResStream"
    class GetSkinnedVertexData(HookFactory):
        _name = "cEgGeometryResource::GetSkinnedVertexData"
    class UpdateDynamicVertData(HookFactory):
        _name = "cEgGeometryResource::UpdateDynamicVertData"
    class BuildVertexDecl(HookFactory):
        _name = "cEgGeometryResource::BuildVertexDecl"
    class GetVertexBufferHandle(HookFactory):
        _name = "cEgGeometryResource::GetVertexBufferHandle"
    class GetIndexBufferHandle(HookFactory):
        _name = "cEgGeometryResource::GetIndexBufferHandle"

class cGcShipAISquadronFormationAttack:
    class GetName(HookFactory):
        _name = "cGcShipAISquadronFormationAttack::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAISquadronFormationAttack::OnInit"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAISquadronFormationAttack::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAISquadronFormationAttack::Run"

class cGcShipAILandingData:
    class cGcShipAILandingData(HookFactory):
        _name = "cGcShipAILandingData::cGcShipAILandingData"

class cGcShipAIPlayerSquadronCheckFormation:
    class GetName(HookFactory):
        _name = "cGcShipAIPlayerSquadronCheckFormation::GetName"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIPlayerSquadronCheckFormation::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAIPlayerSquadronCheckFormation::Run"

class cGcShipAIPlayerSquadronUpdateTarget:
    class GetName(HookFactory):
        _name = "cGcShipAIPlayerSquadronUpdateTarget::GetName"
    class cGcShipAIPlayerSquadronUpdateTarget(HookFactory):
        _name = "cGcShipAIPlayerSquadronUpdateTarget::cGcShipAIPlayerSquadronUpdateTarget"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIPlayerSquadronUpdateTarget::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAIPlayerSquadronUpdateTarget::Run"

class cGcShipAIPlayerSquadronLeave:
    class GetName(HookFactory):
        _name = "cGcShipAIPlayerSquadronLeave::GetName"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIPlayerSquadronLeave::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAIPlayerSquadronLeave::Run"

class cGcShipAISquadronFormationMove:
    class GetName(HookFactory):
        _name = "cGcShipAISquadronFormationMove::GetName"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAISquadronFormationMove::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAISquadronFormationMove::Run"
    class MaintainFormation(HookFactory):
        _name = "cGcShipAISquadronFormationMove::MaintainFormation"
    class UpdateJoiningFormation(HookFactory):
        _name = "cGcShipAISquadronFormationMove::UpdateJoiningFormation"
    class UpdateBreakingFormation(HookFactory):
        _name = "cGcShipAISquadronFormationMove::UpdateBreakingFormation"

class cGcFlybyFrigateBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcFlybyFrigateBehaviourTree::Construct"

class cGcCrashedShipTakeOff:
    class ShipAIConstruct(HookFactory):
        _name = "cGcCrashedShipTakeOff::ShipAIConstruct"
    class GetName(HookFactory):
        _name = "cGcCrashedShipTakeOff::GetName"
    class cGcCrashedShipTakeOff(HookFactory):
        _name = "cGcCrashedShipTakeOff::cGcCrashedShipTakeOff"
    class Run(HookFactory):
        _name = "cGcCrashedShipTakeOff::Run"
    class UpdateWingman(HookFactory):
        _name = "cGcCrashedShipTakeOff::UpdateWingman"

class cGcPlayerSquadronSpaceshipBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcPlayerSquadronSpaceshipBehaviourTree::Construct"

class cGcSpaceCrashedShipBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpaceCrashedShipBehaviourTree::Construct"

class cGcShipAIDefenceForceChooseTarget:
    class GetName(HookFactory):
        _name = "cGcShipAIDefenceForceChooseTarget::GetName"
    class Run(HookFactory):
        _name = "cGcShipAIDefenceForceChooseTarget::Run"

class cGcSpaceDefenceForceBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpaceDefenceForceBehaviourTree::Construct"

class cGcSpaceFreighterBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpaceFreighterBehaviourTree::Construct"

class cGcShipAIPirateChooseTarget:
    class GetName(HookFactory):
        _name = "cGcShipAIPirateChooseTarget::GetName"
    class ShipAIConstruct(HookFactory):
        _name = "cGcShipAIPirateChooseTarget::ShipAIConstruct"
    class Run(HookFactory):
        _name = "cGcShipAIPirateChooseTarget::Run"

class cGcSpacePirateBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpacePirateBehaviourTree::Construct"

class cGcShipAIPoliceChooseTarget:
    class GetName(HookFactory):
        _name = "cGcShipAIPoliceChooseTarget::GetName"
    class Run(HookFactory):
        _name = "cGcShipAIPoliceChooseTarget::Run"

class cGcSpacePoliceBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpacePoliceBehaviourTree::Construct"

class cGcSpaceshipCommon:
    class Construct(HookFactory):
        _name = "cGcSpaceshipCommon::Construct"
    class GetSpaceshipComponent(HookFactory):
        _name = "cGcSpaceshipCommon::GetSpaceshipComponent"
    class CheckBeenShot(HookFactory):
        _name = "cGcSpaceshipCommon::CheckBeenShot"
    class GetLeader(HookFactory):
        _name = "cGcSpaceshipCommon::GetLeader"
    class GetTravelData(HookFactory):
        _name = "cGcSpaceshipCommon::GetTravelData"

class cGcSpaceshipBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpaceshipBehaviourTree::Construct"
    class IsAttackingPlayer(HookFactory):
        _name = "cGcSpaceshipBehaviourTree::IsAttackingPlayer"
    class GetAttackingAttachment(HookFactory):
        _name = "cGcSpaceshipBehaviourTree::GetAttackingAttachment"
    class cGcSpaceshipBehaviourTree(HookFactory):
        _name = "cGcSpaceshipBehaviourTree::cGcSpaceshipBehaviourTree"

class cGcShipAIClearShooter:
    class GetName(HookFactory):
        _name = "cGcShipAIClearShooter::GetName"
    class OnInit(HookFactory):
        _name = "cGcShipAIClearShooter::OnInit"

class cGcSpaceTraderBehaviourTree:
    class Construct(HookFactory):
        _name = "cGcSpaceTraderBehaviourTree::Construct"

class cGcAIShipSquad:
    class HasActiveMembers(HookFactory):
        _name = "cGcAIShipSquad::HasActiveMembers"
    class CalcAveragePos(HookFactory):
        _name = "cGcAIShipSquad::CalcAveragePos"
    class GetLeader(HookFactory):
        _name = "cGcAIShipSquad::GetLeader"

class cGcShipFlareComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcShipFlareComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcShipFlareComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cGcShipFlareComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cGcShipFlareComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcShipFlareComponent::Update"

class ComponentInstancercTkGravityComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkGravityComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkGravityComponent::ConstructInstance"

class cGcAIShipSpawnEvent:
    class cGcAIShipSpawnEvent(HookFactory):
        _name = "cGcAIShipSpawnEvent::cGcAIShipSpawnEvent"

class cGcCachedShipResource:
    class cGcCachedShipResource(HookFactory):
        _name = "cGcCachedShipResource::cGcCachedShipResource"

class cGcEngineComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cGcEngineComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cGcEngineComponent::InitData"
    class Prepare(HookFactory):
        _name = "cGcEngineComponent::Prepare"
    class Update(HookFactory):
        _name = "cGcEngineComponent::Update"

class ComponentInstancercGcEngineComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercGcEngineComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercGcEngineComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercGcEngineComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercGcEngineComponent::DestructInstance"

class cGcSpaceCombatFollowMode:
    class UpdateFollowTarget(HookFactory):
        _name = "cGcSpaceCombatFollowMode::UpdateFollowTarget"
    class Update(HookFactory):
        _name = "cGcSpaceCombatFollowMode::Update"
    class GetTarget(HookFactory):
        _name = "cGcSpaceCombatFollowMode::GetTarget"
    class IsValidTarget(HookFactory):
        _name = "cGcSpaceCombatFollowMode::IsValidTarget"

class cGcPIDController:
    class Update(HookFactory):
        _name = "cGcPIDController::Update"

class cGcShipTargetDisplay:
    class Construct(HookFactory):
        _name = "cGcShipTargetDisplay::Construct"
    class Update(HookFactory):
        _name = "cGcShipTargetDisplay::Update"
    class RemoveShipRender(HookFactory):
        _name = "cGcShipTargetDisplay::RemoveShipRender"

class cTkBehaviourTreeSelector:
    class GetName(HookFactory):
        _name = "cTkBehaviourTreeSelector::GetName"
    class AddNode(HookFactory):
        _name = "cTkBehaviourTreeSelector::AddNode"
    class Cancel(HookFactory):
        _name = "cTkBehaviourTreeSelector::Cancel"
    class GetChild(HookFactory):
        _name = "cTkBehaviourTreeSelector::GetChild"
    class GetNumChildren(HookFactory):
        _name = "cTkBehaviourTreeSelector::GetNumChildren"

class cGcSpaceshipControl:
    class cGcAvoidance:
        class Construct(HookFactory):
            _name = "cGcSpaceshipControl::cGcAvoidance::Construct"
        class UpdateAndApply(HookFactory):
            _name = "cGcSpaceshipControl::cGcAvoidance::UpdateAndApply"
        class GetContactByFilter(HookFactory):
            _name = "cGcSpaceshipControl::cGcAvoidance::GetContactByFilter"
        class CalculateCentre(HookFactory):
            _name = "cGcSpaceshipControl::cGcAvoidance::CalculateCentre"
        class CalculateOffset(HookFactory):
            _name = "cGcSpaceshipControl::cGcAvoidance::CalculateOffset"
    class cGcSpaceshipControl(HookFactory):
        _name = "cGcSpaceshipControl::cGcSpaceshipControl"
    class GetPosition(HookFactory):
        _name = "cGcSpaceshipControl::GetPosition"
    class GetVelocity(HookFactory):
        _name = "cGcSpaceshipControl::GetVelocity"
    class GetAxis(HookFactory):
        _name = "cGcSpaceshipControl::GetAxis"
    class Align(HookFactory):
        _name = "cGcSpaceshipControl::Align"
    class Move(HookFactory):
        _name = "cGcSpaceshipControl::Move"
    class Hover(HookFactory):
        _name = "cGcSpaceshipControl::Hover"
    class ApplyPlanetAvoidance(HookFactory):
        _name = "cGcSpaceshipControl::ApplyPlanetAvoidance"
    class ApplyHeightForce(HookFactory):
        _name = "cGcSpaceshipControl::ApplyHeightForce"
    class Notify(HookFactory):
        _name = "cGcSpaceshipControl::Notify"
    class NotifyModel(HookFactory):
        _name = "cGcSpaceshipControl::NotifyModel"
    class IsNotificationActive(HookFactory):
        _name = "cGcSpaceshipControl::IsNotificationActive"

class cGcSpaceshipEngineAudioController:
    class Prepare(HookFactory):
        _name = "cGcSpaceshipEngineAudioController::Prepare"
    class Update(HookFactory):
        _name = "cGcSpaceshipEngineAudioController::Update"
    class Release(HookFactory):
        _name = "cGcSpaceshipEngineAudioController::Release"

class cGcShootPoint:
    class Construct(HookFactory):
        _name = "cGcShootPoint::Construct"
    class Init(HookFactory):
        _name = "cGcShootPoint::Init"
    class Update(HookFactory):
        _name = "cGcShootPoint::Update"

class RaceSection:
    class IsPersistencyValid(HookFactory):
        _name = "RaceSection::IsPersistencyValid"
    class GetRaceIndex(HookFactory):
        _name = "RaceSection::GetRaceIndex"
    class GetBestTime(HookFactory):
        _name = "RaceSection::GetBestTime"
    class SetBestTime(HookFactory):
        _name = "RaceSection::SetBestTime"
    class GetMatrix(HookFactory):
        _name = "RaceSection::GetMatrix"
    class Checkpoint(HookFactory):
        _name = "RaceSection::Checkpoint"
    class RaceSection(HookFactory):
        _name = "RaceSection::RaceSection"

class cGcVehicleControlStick:
    class Prepare(HookFactory):
        _name = "cGcVehicleControlStick::Prepare"
    class Update(HookFactory):
        _name = "cGcVehicleControlStick::Update"
    class UpdateAsStick(HookFactory):
        _name = "cGcVehicleControlStick::UpdateAsStick"
    class UpdateAsThrottle(HookFactory):
        _name = "cGcVehicleControlStick::UpdateAsThrottle"
    class CalculateHandStickValues(HookFactory):
        _name = "cGcVehicleControlStick::CalculateHandStickValues"

class cGcAttractor:
    class Attract(HookFactory):
        _name = "cGcAttractor::Attract"
    class Align(HookFactory):
        _name = "cGcAttractor::Align"

class cGcCarSuspensionAction:
    class TransformedMotion:
        class CopyFromBody(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::CopyFromBody"
        class CopyToBody(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::CopyToBody"
        class GetLinearVelocityAtPoint(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::GetLinearVelocityAtPoint"
        class ApplyCentralImpulse(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::ApplyCentralImpulse"
        class ApplyImpulseAtPoint(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::ApplyImpulseAtPoint"
            _overload: overloads.cGcCarSuspensionAction.TransformedMotion.ApplyImpulseAtPoint.overloads = "cGcCarSuspensionAction::TransformedMotion *, const cTkVector3 *, const cTkVector3 *, double"
            @classmethod
            def overload(cls, overload_args: overloads.cGcCarSuspensionAction.TransformedMotion.ApplyImpulseAtPoint.overloads):
                cls._overload = overload_args
                return cls
        class TransformedMotion(HookFactory):
            _name = "cGcCarSuspensionAction::TransformedMotion::TransformedMotion"
    class cGcCarSuspensionAction(HookFactory):
        _name = "cGcCarSuspensionAction::cGcCarSuspensionAction"
    class GetWheelTurnForce(HookFactory):
        _name = "cGcCarSuspensionAction::GetWheelTurnForce"
    class resetWheels(HookFactory):
        _name = "cGcCarSuspensionAction::resetWheels"
    class getBodies(HookFactory):
        _name = "cGcCarSuspensionAction::getBodies"
    class applyAction(HookFactory):
        _name = "cGcCarSuspensionAction::applyAction"

class GcVehicleInstanceBroadphaseFunc(HookFactory):
    _name = "GcVehicleInstanceBroadphaseFunc"

class GcVehicleInstanceManifoldFunc(HookFactory):
    _name = "GcVehicleInstanceManifoldFunc"

class cGcInputRemap:
    class Construct(HookFactory):
        _name = "cGcInputRemap::Construct"
    class LoadActionSets(HookFactory):
        _name = "cGcInputRemap::LoadActionSets"
    class RegisterBindings(HookFactory):
        _name = "cGcInputRemap::RegisterBindings"
    class Prepare(HookFactory):
        _name = "cGcInputRemap::Prepare"
    class Update(HookFactory):
        _name = "cGcInputRemap::Update"
    class ResetBindings(HookFactory):
        _name = "cGcInputRemap::ResetBindings"
    class RemapAction(HookFactory):
        _name = "cGcInputRemap::RemapAction"
        _overload: overloads.cGcInputRemap.RemapAction.overloads = "cGcInputRemap *, eActionSetType, eInputAction, eInputButton"
        @classmethod
        def overload(cls, overload_args: overloads.cGcInputRemap.RemapAction.overloads):
            cls._overload = overload_args
            return cls
    class ValidateRemapping(HookFactory):
        _name = "cGcInputRemap::ValidateRemapping"
    class HasKeyButton(HookFactory):
        _name = "cGcInputRemap::HasKeyButton"
    class IsPadActive(HookFactory):
        _name = "cGcInputRemap::IsPadActive"
    class GetKeyName(HookFactory):
        _name = "cGcInputRemap::GetKeyName"
    class HasPadButton(HookFactory):
        _name = "cGcInputRemap::HasPadButton"
    class GetPadName(HookFactory):
        _name = "cGcInputRemap::GetPadName"
    class GetPadIcon(HookFactory):
        _name = "cGcInputRemap::GetPadIcon"
    class GetKeyIcon(HookFactory):
        _name = "cGcInputRemap::GetKeyIcon"
    class RetrieveCustomBindings(HookFactory):
        _name = "cGcInputRemap::RetrieveCustomBindings"
    class StoreCustomBindings(HookFactory):
        _name = "cGcInputRemap::StoreCustomBindings"

class FindInputBinding(HookFactory):
    _name = "FindInputBinding"

class BindingHelpers__CollectBindings(HookFactory):
    _name = "BindingHelpers__CollectBindings"

class BindingHelpers__CollectBindings_0(HookFactory):
    _name = "BindingHelpers__CollectBindings_0"

class cGcVibrationManager:
    class Construct(HookFactory):
        _name = "cGcVibrationManager::Construct"
    class Update(HookFactory):
        _name = "cGcVibrationManager::Update"
    class AddChannel(HookFactory):
        _name = "cGcVibrationManager::AddChannel"
    class SendValue(HookFactory):
        _name = "cGcVibrationManager::SendValue"
    class SetTriggerFeedback(HookFactory):
        _name = "cGcVibrationManager::SetTriggerFeedback"
    class GetActionTriggerIndex(HookFactory):
        _name = "cGcVibrationManager::GetActionTriggerIndex"
    class RenderNGui(HookFactory):
        _name = "cGcVibrationManager::RenderNGui"

class cGcSimpleAnimationQueue:
    class UpdateQueue(HookFactory):
        _name = "cGcSimpleAnimationQueue::UpdateQueue"
    class StopAll(HookFactory):
        _name = "cGcSimpleAnimationQueue::StopAll"
    class IsPlaying(HookFactory):
        _name = "cGcSimpleAnimationQueue::IsPlaying"

class cTkRotationComponent:
    class GetTypeNameHash64(HookFactory):
        _name = "cTkRotationComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkRotationComponent::InitData"
    class OnAttached(HookFactory):
        _name = "cTkRotationComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkRotationComponent::Prepare"
    class Update(HookFactory):
        _name = "cTkRotationComponent::Update"
    class GetUpdatePeriod(HookFactory):
        _name = "cTkRotationComponent::GetUpdatePeriod"
    class RenderNGui(HookFactory):
        _name = "cTkRotationComponent::RenderNGui"
    class GetTypedComponent(HookFactory):
        _name = "cTkRotationComponent::GetTypedComponent"

class ComponentInstancercTkRotationComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkRotationComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkRotationComponent::ConstructInstance"

class ComponentInstancercTkReferenceComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkReferenceComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkReferenceComponent::ConstructInstance"

class ComponentLoadInstancercTkReferenceComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercTkReferenceComponent::Register"

class cGcDebugRenderOffsetControl:
    class ApplyCamCenterRenderOffset(HookFactory):
        _name = "cGcDebugRenderOffsetControl::ApplyCamCenterRenderOffset"

class cTkResource:
    class IsLoaded(HookFactory):
        _name = "cTkResource::IsLoaded"
    class SetDescriptor(HookFactory):
        _name = "cTkResource::SetDescriptor"
    class Equals(HookFactory):
        _name = "cTkResource::Equals"
    class cTkResource(HookFactory):
        _name = "cTkResource::cTkResource"
    class CloneInternal(HookFactory):
        _name = "cTkResource::CloneInternal"
    class MakePersistent(HookFactory):
        _name = "cTkResource::MakePersistent"

class cEgCodeResource:
    class FactoryFunc(HookFactory):
        _name = "cEgCodeResource::FactoryFunc"
    class cEgCodeResource(HookFactory):
        _name = "cEgCodeResource::cEgCodeResource"
        _overload: overloads.cEgCodeResource.cEgCodeResource.overloads = "cEgCodeResource *, const cEgCodeResource *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgCodeResource.cEgCodeResource.overloads):
            cls._overload = overload_args
            return cls
    class Clone(HookFactory):
        _name = "cEgCodeResource::Clone"
    class CloneInternal(HookFactory):
        _name = "cEgCodeResource::CloneInternal"
    class InitDefault(HookFactory):
        _name = "cEgCodeResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgCodeResource::Release"
    class Load(HookFactory):
        _name = "cEgCodeResource::Load"
    class HasDependency(HookFactory):
        _name = "cEgCodeResource::HasDependency"
    class UpdateShaders(HookFactory):
        _name = "cEgCodeResource::UpdateShaders"

class cEgShaderResource:
    class FactoryFunc(HookFactory):
        _name = "cEgShaderResource::FactoryFunc"
    class cEgShaderResource(HookFactory):
        _name = "cEgShaderResource::cEgShaderResource"
    class Release(HookFactory):
        _name = "cEgShaderResource::Release"
    class RaiseError(HookFactory):
        _name = "cEgShaderResource::RaiseError"
    class ParseFXSection(HookFactory):
        _name = "cEgShaderResource::ParseFXSection"
    class Load(HookFactory):
        _name = "cEgShaderResource::Load"
    class PreLoadCombination(HookFactory):
        _name = "cEgShaderResource::PreLoadCombination"
    class CompileShader(HookFactory):
        _name = "cEgShaderResource::CompileShader"
    class CompileCombination(HookFactory):
        _name = "cEgShaderResource::CompileCombination"
    class StartAsyncCompileCombination(HookFactory):
        _name = "cEgShaderResource::StartAsyncCompileCombination"
    class FinishAsyncCompileCombination(HookFactory):
        _name = "cEgShaderResource::FinishAsyncCompileCombination"
    class AddToLoadingList(HookFactory):
        _name = "cEgShaderResource::AddToLoadingList"
    class AppendUncompiledContextsToCompilationTaskList(HookFactory):
        _name = "cEgShaderResource::AppendUncompiledContextsToCompilationTaskList"
    class PollToExecuteCompilationTaskList(HookFactory):
        _name = "cEgShaderResource::PollToExecuteCompilationTaskList"
    class CompileContextsSynchronous(HookFactory):
        _name = "cEgShaderResource::CompileContextsSynchronous"
    class GetElementCount(HookFactory):
        _name = "cEgShaderResource::GetElementCount"
    class GetElementParamFloat(HookFactory):
        _name = "cEgShaderResource::GetElementParamFloat"
    class SetElementParamFloat(HookFactory):
        _name = "cEgShaderResource::SetElementParamFloat"
    class GetElementParamStr(HookFactory):
        _name = "cEgShaderResource::GetElementParamStr"

class cTkTextureBase:
    class ComputeEvictableSize(HookFactory):
        _name = "cTkTextureBase::ComputeEvictableSize"
    class CalculateTextureSize(HookFactory):
        _name = "cTkTextureBase::CalculateTextureSize"
    class CreateTexture(HookFactory):
        _name = "cTkTextureBase::CreateTexture"
    class Load(HookFactory):
        _name = "cTkTextureBase::Load"
    class LoadDDS(HookFactory):
        _name = "cTkTextureBase::LoadDDS"
    class ReleaseTexture(HookFactory):
        _name = "cTkTextureBase::ReleaseTexture"
    class RestoreMipsFromDDS(HookFactory):
        _name = "cTkTextureBase::RestoreMipsFromDDS"
    class UpdateTextureSubData(HookFactory):
        _name = "cTkTextureBase::UpdateTextureSubData"
    class UploadTextureData(HookFactory):
        _name = "cTkTextureBase::UploadTextureData"

class cEgTextureResource:
    class FactoryFunc(HookFactory):
        _name = "cEgTextureResource::FactoryFunc"
    class ScheduleForEviction(HookFactory):
        _name = "cEgTextureResource::ScheduleForEviction"
    class Evict(HookFactory):
        _name = "cEgTextureResource::Evict"
    class GetDataSize(HookFactory):
        _name = "cEgTextureResource::GetDataSize"
    class EvictOneMip(HookFactory):
        _name = "cEgTextureResource::EvictOneMip"
    class AbortEviction(HookFactory):
        _name = "cEgTextureResource::AbortEviction"
    class InitialisationFunc(HookFactory):
        _name = "cEgTextureResource::InitialisationFunc"
    class cEgTextureResource(HookFactory):
        _name = "cEgTextureResource::cEgTextureResource"
    class Initialise(HookFactory):
        _name = "cEgTextureResource::Initialise"
    class InitDefault(HookFactory):
        _name = "cEgTextureResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgTextureResource::Release"
    class SearchCache(HookFactory):
        _name = "cEgTextureResource::SearchCache"
    class Load(HookFactory):
        _name = "cEgTextureResource::Load"
    class CopyResourceFlagsToTexture(HookFactory):
        _name = "cEgTextureResource::CopyResourceFlagsToTexture"
    class LoadFromDds(HookFactory):
        _name = "cEgTextureResource::LoadFromDds"
    class GetMipCount(HookFactory):
        _name = "cEgTextureResource::GetMipCount"
    class GetElementCount(HookFactory):
        _name = "cEgTextureResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgTextureResource::GetElementParamInt"
    class SetElementParamInt(HookFactory):
        _name = "cEgTextureResource::SetElementParamInt"
    class MapResStream(HookFactory):
        _name = "cEgTextureResource::MapResStream"
    class UnmapStream(HookFactory):
        _name = "cEgTextureResource::UnmapStream"
    class GetElementParamFloat(HookFactory):
        _name = "cEgTextureResource::GetElementParamFloat"
    class CalculateAverageColour(HookFactory):
        _name = "cEgTextureResource::CalculateAverageColour"
    class NotifyResidentToMip(HookFactory):
        _name = "cEgTextureResource::NotifyResidentToMip"
    class AddToStreamList(HookFactory):
        _name = "cEgTextureResource::AddToStreamList"
    class PanicEvict(HookFactory):
        _name = "cEgTextureResource::PanicEvict"
    class CheckForDeletedStreamingTextures(HookFactory):
        _name = "cEgTextureResource::CheckForDeletedStreamingTextures"
    class OutOfMemoryCallback(HookFactory):
        _name = "cEgTextureResource::OutOfMemoryCallback"
    class UpdateStreaming(HookFactory):
        _name = "cEgTextureResource::UpdateStreaming"

class cEgMaterialResource:
    class FactoryFunc(HookFactory):
        _name = "cEgMaterialResource::FactoryFunc"
    class cEgMaterialResource(HookFactory):
        _name = "cEgMaterialResource::cEgMaterialResource"
    class OnResourceLoaded(HookFactory):
        _name = "cEgMaterialResource::OnResourceLoaded"
    class Clone(HookFactory):
        _name = "cEgMaterialResource::Clone"
    class CloneInternal(HookFactory):
        _name = "cEgMaterialResource::CloneInternal"
    class InitDefault(HookFactory):
        _name = "cEgMaterialResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgMaterialResource::Release"
    class ParseNode(HookFactory):
        _name = "cEgMaterialResource::ParseNode"
    class GetFlagsForSampler(HookFactory):
        _name = "cEgMaterialResource::GetFlagsForSampler"
    class Load(HookFactory):
        _name = "cEgMaterialResource::Load"
    class SetUniformArray(HookFactory):
        _name = "cEgMaterialResource::SetUniformArray"
        _overload: overloads.cEgMaterialResource.SetUniformArray.overloads = "cEgMaterialResource *, const char *, const float *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cEgMaterialResource.SetUniformArray.overloads):
            cls._overload = overload_args
            return cls
    class GetUniform(HookFactory):
        _name = "cEgMaterialResource::GetUniform"
    class SetSampler(HookFactory):
        _name = "cEgMaterialResource::SetSampler"
    class GetElementCount(HookFactory):
        _name = "cEgMaterialResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgMaterialResource::GetElementParamInt"
    class SetElementParamInt(HookFactory):
        _name = "cEgMaterialResource::SetElementParamInt"
    class GetElementParamFloat(HookFactory):
        _name = "cEgMaterialResource::GetElementParamFloat"
    class SetElementParamFloat(HookFactory):
        _name = "cEgMaterialResource::SetElementParamFloat"
    class GetElementParamStr(HookFactory):
        _name = "cEgMaterialResource::GetElementParamStr"
    class SetElementParamStr(HookFactory):
        _name = "cEgMaterialResource::SetElementParamStr"
    class AllocateUniformBuffers(HookFactory):
        _name = "cEgMaterialResource::AllocateUniformBuffers"
    class CreateStaticMaterialHash(HookFactory):
        _name = "cEgMaterialResource::CreateStaticMaterialHash"
    class GetTextureSortHash(HookFactory):
        _name = "cEgMaterialResource::GetTextureSortHash"

class cEgPipelineResource:
    class FactoryFunc(HookFactory):
        _name = "cEgPipelineResource::FactoryFunc"
    class InitDefault(HookFactory):
        _name = "cEgPipelineResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgPipelineResource::Release"
    class RaiseError(HookFactory):
        _name = "cEgPipelineResource::RaiseError"
    class ParseStage(HookFactory):
        _name = "cEgPipelineResource::ParseStage"
    class ParseAndAddRenderTarget(HookFactory):
        _name = "cEgPipelineResource::ParseAndAddRenderTarget"
    class ParseRenderTargetGroup(HookFactory):
        _name = "cEgPipelineResource::ParseRenderTargetGroup"
    class FindRenderTarget(HookFactory):
        _name = "cEgPipelineResource::FindRenderTarget"
    class EnableRenderTargets(HookFactory):
        _name = "cEgPipelineResource::EnableRenderTargets"
    class CreateRenderTargets(HookFactory):
        _name = "cEgPipelineResource::CreateRenderTargets"
    class CreateDelayedTempRenderTargets(HookFactory):
        _name = "cEgPipelineResource::CreateDelayedTempRenderTargets"
    class ReleaseRenderTargets(HookFactory):
        _name = "cEgPipelineResource::ReleaseRenderTargets"
    class GetRenderTargetFinalScale(HookFactory):
        _name = "cEgPipelineResource::GetRenderTargetFinalScale"
    class Load(HookFactory):
        _name = "cEgPipelineResource::Load"
    class GetElementCount(HookFactory):
        _name = "cEgPipelineResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgPipelineResource::GetElementParamInt"
    class SetElementParamInt(HookFactory):
        _name = "cEgPipelineResource::SetElementParamInt"
    class GetElementParamStr(HookFactory):
        _name = "cEgPipelineResource::GetElementParamStr"

class cEgThreadableRenderCall:
    class SetData(HookFactory):
        _name = "cEgThreadableRenderCall::SetData"
    class cEgThreadableRenderCall(HookFactory):
        _name = "cEgThreadableRenderCall::cEgThreadableRenderCall"

class cEgSceneNodeTemplate:
    class cEgSceneNodeTemplate(HookFactory):
        _name = "cEgSceneNodeTemplate::cEgSceneNodeTemplate"
    class SetName(HookFactory):
        _name = "cEgSceneNodeTemplate::SetName"
    class GetTransform(HookFactory):
        _name = "cEgSceneNodeTemplate::GetTransform"
    class SetDescriptor(HookFactory):
        _name = "cEgSceneNodeTemplate::SetDescriptor"
    class GatherMaterials(HookFactory):
        _name = "cEgSceneNodeTemplate::GatherMaterials"
    class GatherData(HookFactory):
        _name = "cEgSceneNodeTemplate::GatherData"
    class GetBoundingBox(HookFactory):
        _name = "cEgSceneNodeTemplate::GetBoundingBox"
    class IsGeometryStreamedIn(HookFactory):
        _name = "cEgSceneNodeTemplate::IsGeometryStreamedIn"
    class GatherNonReferenceData(HookFactory):
        _name = "cEgSceneNodeTemplate::GatherNonReferenceData"
    class GatherModels(HookFactory):
        _name = "cEgSceneNodeTemplate::GatherModels"

class cEgAnimationResource:
    class FactoryFunc(HookFactory):
        _name = "cEgAnimationResource::FactoryFunc"
    class cEgAnimationResource(HookFactory):
        _name = "cEgAnimationResource::cEgAnimationResource"
    class Clone(HookFactory):
        _name = "cEgAnimationResource::Clone"
    class CloneInternal(HookFactory):
        _name = "cEgAnimationResource::CloneInternal"
    class InitDefault(HookFactory):
        _name = "cEgAnimationResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgAnimationResource::Release"
    class Load(HookFactory):
        _name = "cEgAnimationResource::Load"
    class GetElementCount(HookFactory):
        _name = "cEgAnimationResource::GetElementCount"
    class GetElementParamInt(HookFactory):
        _name = "cEgAnimationResource::GetElementParamInt"
    class FindEntity(HookFactory):
        _name = "cEgAnimationResource::FindEntity"

class GeometryStreaming:
    class cEgStreamRequests:
        class Prepare(HookFactory):
            _name = "GeometryStreaming::cEgStreamRequests::Prepare"
        class GetInstance(HookFactory):
            _name = "GeometryStreaming::cEgStreamRequests::GetInstance"
        class ProcessOnlyStreamRequests(HookFactory):
            _name = "GeometryStreaming::cEgStreamRequests::ProcessOnlyStreamRequests"
        class ProcessRenderDataSyncRequests(HookFactory):
            _name = "GeometryStreaming::cEgStreamRequests::ProcessRenderDataSyncRequests"
        class AddRenderDataSyncRequest(HookFactory):
            _name = "GeometryStreaming::cEgStreamRequests::AddRenderDataSyncRequest"
    class cEgGeometryStreamer:
        class IsMeshDoubleBuffered(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::IsMeshDoubleBuffered"
        class SyncDataForRender(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::SyncDataForRender"
        class Prepare(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::Prepare"
        class UpdateDoubleBufferedMeshList(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::UpdateDoubleBufferedMeshList"
        class GetVertexBufferByHash(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::GetVertexBufferByHash"
        class Release(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::Release"
        class OnBufferLoadFinish(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::OnBufferLoadFinish"
        class RequestStream(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::RequestStream"
        class RequestUnstream(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::RequestUnstream"
        class FindBufferIndex(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::FindBufferIndex"
        class DecrementBufferRefCount(HookFactory):
            _name = "GeometryStreaming::cEgGeometryStreamer::DecrementBufferRefCount"

class cEgGeometryAABBCache:
    class cEgGeometryAABBCache(HookFactory):
        _name = "cEgGeometryAABBCache::cEgGeometryAABBCache"

class cEgModelNodeTemplate:
    class cEgModelNodeTemplate(HookFactory):
        _name = "cEgModelNodeTemplate::cEgModelNodeTemplate"
    class GetBoundingBox(HookFactory):
        _name = "cEgModelNodeTemplate::GetBoundingBox"
    class IsGeometryStreamedIn(HookFactory):
        _name = "cEgModelNodeTemplate::IsGeometryStreamedIn"
    class IsLoaded(HookFactory):
        _name = "cEgModelNodeTemplate::IsLoaded"

class cEgLightNodeTemplate:
    class cEgLightNodeTemplate(HookFactory):
        _name = "cEgLightNodeTemplate::cEgLightNodeTemplate"

class cEgIndexMappingArray:
    class GetIndex(HookFactory):
        _name = "cEgIndexMappingArray::GetIndex"

class cEgSceneManager:
    class ClearQueues(HookFactory):
        _name = "cEgSceneManager::ClearQueues"
    class AllocRenderQueue(HookFactory):
        _name = "cEgSceneManager::AllocRenderQueue"
    class cEgSceneManager(HookFactory):
        _name = "cEgSceneManager::cEgSceneManager"
    class Construct(HookFactory):
        _name = "cEgSceneManager::Construct"
    class RegisterType(HookFactory):
        _name = "cEgSceneManager::RegisterType"
    class FindType(HookFactory):
        _name = "cEgSceneManager::FindType"
        _overload: overloads.cEgSceneManager.FindType.overloads = "cEgSceneManager *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cEgSceneManager.FindType.overloads):
            cls._overload = overload_args
            return cls
    class TransferPrivateRenderData(HookFactory):
        _name = "cEgSceneManager::TransferPrivateRenderData"
    class AddNode(HookFactory):
        _name = "cEgSceneManager::AddNode"
    class RelocateNode(HookFactory):
        _name = "cEgSceneManager::RelocateNode"
    class FindNodes(HookFactory):
        _name = "cEgSceneManager::FindNodes"
    class IterateNode(HookFactory):
        _name = "cEgSceneManager::IterateNode"
        _overload: overloads.cEgSceneManager.IterateNode.overloads = "cEgSceneManager *, __int64, const char *, int, __int64 *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgSceneManager.IterateNode.overloads):
            cls._overload = overload_args
            return cls
    class FindAttachment(HookFactory):
        _name = "cEgSceneManager::FindAttachment"

class cEgCameraNodeTemplate:
    class cEgCameraNodeTemplate(HookFactory):
        _name = "cEgCameraNodeTemplate::cEgCameraNodeTemplate"

class cEgRenderActionSetResParam:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetResParam::MoveTo"
    class cEgRenderActionSetResParam(HookFactory):
        _name = "cEgRenderActionSetResParam::cEgRenderActionSetResParam"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetResParam::Execute"

class cEgRenderActionSetMaterialUniform:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetMaterialUniform::MoveTo"
    class cEgRenderActionSetMaterialUniform(HookFactory):
        _name = "cEgRenderActionSetMaterialUniform::cEgRenderActionSetMaterialUniform"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetMaterialUniform::Execute"

class cEgRenderActionSetMaterialUniformArray:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetMaterialUniformArray::MoveTo"
    class cEgRenderActionSetMaterialUniformArray(HookFactory):
        _name = "cEgRenderActionSetMaterialUniformArray::cEgRenderActionSetMaterialUniformArray"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetMaterialUniformArray::Execute"

class cEgRenderActionSetMaterialSampler:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetMaterialSampler::MoveTo"
    class cEgRenderActionSetMaterialSampler(HookFactory):
        _name = "cEgRenderActionSetMaterialSampler::cEgRenderActionSetMaterialSampler"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetMaterialSampler::Execute"

class cEgRenderActionClearMaterialSamplers:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionClearMaterialSamplers::MoveTo"
    class Execute(HookFactory):
        _name = "cEgRenderActionClearMaterialSamplers::Execute"

class cEgRenderActionFlushTexture:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionFlushTexture::MoveTo"
    class Execute(HookFactory):
        _name = "cEgRenderActionFlushTexture::Execute"

class cEgRenderActionSetAsyncComputeEnable:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetAsyncComputeEnable::MoveTo"

class cEgRenderActionBlitTexture:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionBlitTexture::MoveTo"
    class cEgRenderActionBlitTexture(HookFactory):
        _name = "cEgRenderActionBlitTexture::cEgRenderActionBlitTexture"
    class Execute(HookFactory):
        _name = "cEgRenderActionBlitTexture::Execute"

class cEgRenderActionEndScissorTest:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionEndScissorTest::MoveTo"

class cEgRenderActionSetupViewport:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetupViewport::MoveTo"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetupViewport::Execute"

class cEgRenderActionSetRenderTarget:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetRenderTarget::MoveTo"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetRenderTarget::Execute"

class cEgRenderActionSetSamplerDefaultTexture:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionSetSamplerDefaultTexture::MoveTo"
    class cEgRenderActionSetSamplerDefaultTexture(HookFactory):
        _name = "cEgRenderActionSetSamplerDefaultTexture::cEgRenderActionSetSamplerDefaultTexture"
    class Execute(HookFactory):
        _name = "cEgRenderActionSetSamplerDefaultTexture::Execute"

class cEgRenderActionClear:
    class Execute(HookFactory):
        _name = "cEgRenderActionClear::Execute"
    class MoveTo(HookFactory):
        _name = "cEgRenderActionClear::MoveTo"

class cEgRenderActionQueue:
    class MoveActionQueue(HookFactory):
        _name = "cEgRenderActionQueue::MoveActionQueue"
    class EnqueueAction(HookFactory):
        _templates = ("T0", )
        _name = "cEgRenderActionQueue::EnqueueAction<{T0}>"

class cEgRenderer:
    class EnqueueBlitTexture(HookFactory):
        _name = "cEgRenderer::EnqueueBlitTexture"
    class GetRenderSpaceOffset(HookFactory):
        _templates = ("T0", )
        _name = "cEgRenderer::GetRenderSpaceOffset<{T0}>"
    class cEgRenderer(HookFactory):
        _name = "cEgRenderer::cEgRenderer"
    class UseScratchBuf(HookFactory):
        _name = "cEgRenderer::UseScratchBuf"
    class Initialise(HookFactory):
        _name = "cEgRenderer::Initialise"
    class ProcessInFlightShaderCombinations(HookFactory):
        _name = "cEgRenderer::ProcessInFlightShaderCombinations"
    class ProcessInFlightMaterials(HookFactory):
        _name = "cEgRenderer::ProcessInFlightMaterials"
    class SetMaterialTextures(HookFactory):
        _name = "cEgRenderer::SetMaterialTextures"
    class SetLightingUniforms(HookFactory):
        _name = "cEgRenderer::SetLightingUniforms"
    class SetMaterialUniforms(HookFactory):
        _name = "cEgRenderer::SetMaterialUniforms"
    class BindPipeBuffer(HookFactory):
        _name = "cEgRenderer::BindPipeBuffer"
    class DrawRenderables(HookFactory):
        _name = "cEgRenderer::DrawRenderables"
    class SetupMeshGeometry(HookFactory):
        _name = "cEgRenderer::SetupMeshGeometry"
    class SetupMeshMaterial(HookFactory):
        _name = "cEgRenderer::SetupMeshMaterial"
    class DrawImposterMeshes(HookFactory):
        _name = "cEgRenderer::DrawImposterMeshes"
    class DrawMeshes(HookFactory):
        _name = "cEgRenderer::DrawMeshes"
    class DrawMeshesBboxes(HookFactory):
        _name = "cEgRenderer::DrawMeshesBboxes"
    class PopulateCameraInfoFromNode(HookFactory):
        _name = "cEgRenderer::PopulateCameraInfoFromNode"
    class EnqueueRender(HookFactory):
        _name = "cEgRenderer::EnqueueRender"
    class Render(HookFactory):
        _name = "cEgRenderer::Render"
    class FinalizeFrame(HookFactory):
        _name = "cEgRenderer::FinalizeFrame"
    class SetShaderContext(HookFactory):
        _name = "cEgRenderer::SetShaderContext"
    class KickUpdateShadowMap(HookFactory):
        _name = "cEgRenderer::KickUpdateShadowMap"
    class SetShadowViewMatrices(HookFactory):
        _name = "cEgRenderer::SetShadowViewMatrices"
    class ExecutePipelineCommand(HookFactory):
        _name = "cEgRenderer::ExecutePipelineCommand"
    class CreatePrimitives(HookFactory):
        _name = "cEgRenderer::CreatePrimitives"
    class DrawSphere_(HookFactory):
        _name = "cEgRenderer::DrawSphere_"
    class DrawShape_(HookFactory):
        _name = "cEgRenderer::DrawShape_"
    class SetPerRenderTargetUniforms(HookFactory):
        _name = "cEgRenderer::SetPerRenderTargetUniforms"
    class CallPipelineCommand(HookFactory):
        _name = "cEgRenderer::CallPipelineCommand"
    class RunStageMultiThreaded(HookFactory):
        _name = "cEgRenderer::RunStageMultiThreaded"
    class ReleaseBuffer(HookFactory):
        _name = "cEgRenderer::ReleaseBuffer"
    class ReleaseUnusedBuffers(HookFactory):
        _name = "cEgRenderer::ReleaseUnusedBuffers"
    class RunPipeline(HookFactory):
        _name = "cEgRenderer::RunPipeline"
    class SetMaterial(HookFactory):
        _name = "cEgRenderer::SetMaterial"
    class SetStereoTarget(HookFactory):
        _name = "cEgRenderer::SetStereoTarget"
    class UpdatePerTargetUniforms(HookFactory):
        _name = "cEgRenderer::UpdatePerTargetUniforms"

class cEgExtensionManager:
    class InstallExtension(HookFactory):
        _name = "cEgExtensionManager::InstallExtension"
    class InstallExtensions(HookFactory):
        _name = "cEgExtensionManager::InstallExtensions"

class cEgMeshNodeTemplate:
    class cEgMeshNodeTemplate(HookFactory):
        _name = "cEgMeshNodeTemplate::cEgMeshNodeTemplate"
    class SetName(HookFactory):
        _name = "cEgMeshNodeTemplate::SetName"
    class SetDescriptor(HookFactory):
        _name = "cEgMeshNodeTemplate::SetDescriptor"
    class GatherMaterials(HookFactory):
        _name = "cEgMeshNodeTemplate::GatherMaterials"
    class GetBoundingBox(HookFactory):
        _name = "cEgMeshNodeTemplate::GetBoundingBox"
    class IsGeometryStreamedIn(HookFactory):
        _name = "cEgMeshNodeTemplate::IsGeometryStreamedIn"

class cEgMeshNode:
    class GetANName(HookFactory):
        _name = "cEgMeshNode::GetANName"
    class GetANNameHash(HookFactory):
        _name = "cEgMeshNode::GetANNameHash"
    class GetParentModel(HookFactory):
        _name = "cEgMeshNode::GetParentModel"
    class cEgMeshNode(HookFactory):
        _name = "cEgMeshNode::cEgMeshNode"
    class ParsingFunc(HookFactory):
        _name = "cEgMeshNode::ParsingFunc"
    class Parse(HookFactory):
        _name = "cEgMeshNode::Parse"
    class FactoryFunc(HookFactory):
        _name = "cEgMeshNode::FactoryFunc"
    class GetANParent(HookFactory):
        _name = "cEgMeshNode::GetANParent"
    class CanAttach(HookFactory):
        _name = "cEgMeshNode::CanAttach"
    class GetParameterInt(HookFactory):
        _name = "cEgMeshNode::GetParameterInt"
    class SetParameterInt(HookFactory):
        _name = "cEgMeshNode::SetParameterInt"
    class CheckIntersection(HookFactory):
        _name = "cEgMeshNode::CheckIntersection"
    class OnAttach(HookFactory):
        _name = "cEgMeshNode::OnAttach"
    class GetVisibleBBox(HookFactory):
        _name = "cEgMeshNode::GetVisibleBBox"
    class GetParameterFloat(HookFactory):
        _name = "cEgMeshNode::GetParameterFloat"
    class SetParameterFloat(HookFactory):
        _name = "cEgMeshNode::SetParameterFloat"
    class EnqueueFunc(HookFactory):
        _name = "cEgMeshNode::EnqueueFunc"

class cEgJointNode:
    class GetANName(HookFactory):
        _name = "cEgJointNode::GetANName"
    class GetANNameHash(HookFactory):
        _name = "cEgJointNode::GetANNameHash"
    class GetJointIndex(HookFactory):
        _name = "cEgJointNode::GetJointIndex"
    class ParsingFunc(HookFactory):
        _name = "cEgJointNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgJointNode::FactoryFunc"
    class GetANParent(HookFactory):
        _name = "cEgJointNode::GetANParent"
    class GetParameterInt(HookFactory):
        _name = "cEgJointNode::GetParameterInt"
    class OnAttach(HookFactory):
        _name = "cEgJointNode::OnAttach"
    class OnDetach(HookFactory):
        _name = "cEgJointNode::OnDetach"

class CAkFxBaseStateAware:
    class GetStateChunks(HookFactory):
        _name = "CAkFxBaseStateAware::GetStateChunks"
    class GetStateProperties(HookFactory):
        _name = "CAkFxBaseStateAware::GetStateProperties"
    class CAkFxBaseStateAware(HookFactory):
        _name = "CAkFxBaseStateAware::CAkFxBaseStateAware"
    class EnsureStateData(HookFactory):
        _name = "CAkFxBaseStateAware::EnsureStateData"
    class NotifyStateParamTargets(HookFactory):
        _name = "CAkFxBaseStateAware::NotifyStateParamTargets"
    class PushStateParamUpdate(HookFactory):
        _name = "CAkFxBaseStateAware::PushStateParamUpdate"
    class SetStateProperties(HookFactory):
        _name = "CAkFxBaseStateAware::SetStateProperties"

class cEgAnimationController:
    class ResizeNodeList(HookFactory):
        _name = "cEgAnimationController::ResizeNodeList"
    class RegisterNode(HookFactory):
        _name = "cEgAnimationController::RegisterNode"
    class CreateAnimMapping(HookFactory):
        _name = "cEgAnimationController::CreateAnimMapping"
    class MapAnimationResource(HookFactory):
        _name = "cEgAnimationController::MapAnimationResource"
    class SetWorldPoseMatrix(HookFactory):
        _name = "cEgAnimationController::SetWorldPoseMatrix"
    class RunPreAdditiveCallback(HookFactory):
        _name = "cEgAnimationController::RunPreAdditiveCallback"
    class WriteBindPose(HookFactory):
        _name = "cEgAnimationController::WriteBindPose"
    class MirrorPose(HookFactory):
        _name = "cEgAnimationController::MirrorPose"
    class ExtractZeroFrame(HookFactory):
        _name = "cEgAnimationController::ExtractZeroFrame"
    class Subtract(HookFactory):
        _name = "cEgAnimationController::Subtract"
    class Add(HookFactory):
        _name = "cEgAnimationController::Add"
    class NlerpAdd(HookFactory):
        _name = "cEgAnimationController::NlerpAdd"
    class NlerpComplete(HookFactory):
        _name = "cEgAnimationController::NlerpComplete"
    class NlerpMultiply(HookFactory):
        _name = "cEgAnimationController::NlerpMultiply"
    class Multiply(HookFactory):
        _name = "cEgAnimationController::Multiply"
    class Blend(HookFactory):
        _name = "cEgAnimationController::Blend"
    class EvalCommandListInternal(HookFactory):
        _name = "cEgAnimationController::EvalCommandListInternal"
    class BuildSkinningMatrices(HookFactory):
        _name = "cEgAnimationController::BuildSkinningMatrices"
    class AddAnimToAdditivePose(HookFactory):
        _name = "cEgAnimationController::AddAnimToAdditivePose"
    class AnimMapping:
        class AnimMapping(HookFactory):
            _name = "cEgAnimationController::AnimMapping::AnimMapping"

class ExecuteExtractFrame(HookFactory):
    _name = "ExecuteExtractFrame"

class ExtractFrame(HookFactory):
    _name = "ExtractFrame"

class ExtractAllTransformsForFrame(HookFactory):
    _name = "ExtractAllTransformsForFrame"

class ExtractMoveLocatorTransform(HookFactory):
    _name = "ExtractMoveLocatorTransform"

class cEgCameraNode:
    class cEgCameraNode(HookFactory):
        _name = "cEgCameraNode::cEgCameraNode"
        _overload: overloads.cEgCameraNode.cEgCameraNode.overloads = "cEgCameraNode *, const cEgCameraNodeTemplate *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgCameraNode.cEgCameraNode.overloads):
            cls._overload = overload_args
            return cls
    class ParsingFunc(HookFactory):
        _name = "cEgCameraNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgCameraNode::FactoryFunc"
    class GetParameterInt(HookFactory):
        _name = "cEgCameraNode::GetParameterInt"
    class SetParameterInt(HookFactory):
        _name = "cEgCameraNode::SetParameterInt"
    class GetParameterFloat(HookFactory):
        _name = "cEgCameraNode::GetParameterFloat"
    class SetParameterFloat(HookFactory):
        _name = "cEgCameraNode::SetParameterFloat"
    class SetupViewParams(HookFactory):
        _name = "cEgCameraNode::SetupViewParams"
    class SetVelFromPrevMatrix(HookFactory):
        _name = "cEgCameraNode::SetVelFromPrevMatrix"
    class UpdateViewFrustum(HookFactory):
        _name = "cEgCameraNode::UpdateViewFrustum"

class cEgCollisionNode:
    class ParsingFunc(HookFactory):
        _name = "cEgCollisionNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgCollisionNode::FactoryFunc"
    class GetParameterInt(HookFactory):
        _name = "cEgCollisionNode::GetParameterInt"
    class GetParameterFloat(HookFactory):
        _name = "cEgCollisionNode::GetParameterFloat"

class cEgEngineLog:
    class PushMessage(HookFactory):
        _name = "cEgEngineLog::PushMessage"
    class WriteError(HookFactory):
        _name = "cEgEngineLog::WriteError"
    class WriteWarning(HookFactory):
        _name = "cEgEngineLog::WriteWarning"
    class WriteDebugInfo(HookFactory):
        _name = "cEgEngineLog::WriteDebugInfo"

class cEgNodeAttachment:
    class GetFromNode(HookFactory):
        _name = "cEgNodeAttachment::GetFromNode"
    class AttachToNode(HookFactory):
        _name = "cEgNodeAttachment::AttachToNode"

class cEgLightNode:
    class cEgLightNode(HookFactory):
        _name = "cEgLightNode::cEgLightNode"
    class ParsingFunc(HookFactory):
        _name = "cEgLightNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgLightNode::FactoryFunc"
    class EnqueueFunc(HookFactory):
        _name = "cEgLightNode::EnqueueFunc"
    class GetParameterInt(HookFactory):
        _name = "cEgLightNode::GetParameterInt"
    class SetParameterInt(HookFactory):
        _name = "cEgLightNode::SetParameterInt"
    class GetParameterFloat(HookFactory):
        _name = "cEgLightNode::GetParameterFloat"
    class SetParameterFloat(HookFactory):
        _name = "cEgLightNode::SetParameterFloat"
    class GetParameterStr(HookFactory):
        _name = "cEgLightNode::GetParameterStr"
    class SetParameterStr(HookFactory):
        _name = "cEgLightNode::SetParameterStr"
    class UpdatePositionAndDirection(HookFactory):
        _name = "cEgLightNode::UpdatePositionAndDirection"
    class CalculateViewMatrix(HookFactory):
        _name = "cEgLightNode::CalculateViewMatrix"
    class GetFalloff(HookFactory):
        _name = "cEgLightNode::GetFalloff"

class cEgSceneGraphResource:
    class FactoryFunc(HookFactory):
        _name = "cEgSceneGraphResource::FactoryFunc"
    class GetBoundingBox(HookFactory):
        _name = "cEgSceneGraphResource::GetBoundingBox"
        _overload: overloads.cEgSceneGraphResource.GetBoundingBox.overloads = "cEgSceneGraphResource *, cTkAABB *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.cEgSceneGraphResource.GetBoundingBox.overloads):
            cls._overload = overload_args
            return cls
    class IsLoaded(HookFactory):
        _name = "cEgSceneGraphResource::IsLoaded"
    class GetAttribute(HookFactory):
        _name = "cEgSceneGraphResource::GetAttribute"
    class SetDescriptor(HookFactory):
        _name = "cEgSceneGraphResource::SetDescriptor"
    class GatherMaterials(HookFactory):
        _name = "cEgSceneGraphResource::GatherMaterials"
    class GatherData(HookFactory):
        _name = "cEgSceneGraphResource::GatherData"
    class cEgSceneGraphResource(HookFactory):
        _name = "cEgSceneGraphResource::cEgSceneGraphResource"
    class InitDefault(HookFactory):
        _name = "cEgSceneGraphResource::InitDefault"
    class Release(HookFactory):
        _name = "cEgSceneGraphResource::Release"
    class CloneInternal(HookFactory):
        _name = "cEgSceneGraphResource::CloneInternal"
    class ParseData(HookFactory):
        _name = "cEgSceneGraphResource::ParseData"
    class Load(HookFactory):
        _name = "cEgSceneGraphResource::Load"
    class SetElementParamFloat(HookFactory):
        _name = "cEgSceneGraphResource::SetElementParamFloat"
    class RegisterWithMetadataCache(HookFactory):
        _name = "cEgSceneGraphResource::RegisterWithMetadataCache"

class cEgMetadataResource:
    class FactoryFunc(HookFactory):
        _name = "cEgMetadataResource::FactoryFunc"

class Engine:
    class Create3DTexture(HookFactory):
        _name = "Engine::Create3DTexture"
    class CreateTexture(HookFactory):
        _name = "Engine::CreateTexture"
    class Initialise(HookFactory):
        _name = "Engine::Initialise"
    class Release(HookFactory):
        _name = "Engine::Release"
    class ForceUpdateNodes(HookFactory):
        _name = "Engine::ForceUpdateNodes"
    class CopyThreadData(HookFactory):
        _name = "Engine::CopyThreadData"
    class SetThreadID(HookFactory):
        _name = "Engine::SetThreadID"
    class GetThreadID(HookFactory):
        _name = "Engine::GetThreadID"
    class SetRenderQueueCameras(HookFactory):
        _name = "Engine::SetRenderQueueCameras"
    class SetRenderQueueStereoCameras(HookFactory):
        _name = "Engine::SetRenderQueueStereoCameras"
    class EnqueueRender(HookFactory):
        _name = "Engine::EnqueueRender"
    class PatchRenderTargetMatrices(HookFactory):
        _name = "Engine::PatchRenderTargetMatrices"
    class ExecuteQueuedActions(HookFactory):
        _name = "Engine::ExecuteQueuedActions"
    class EnqueueSetAsyncComputeEnable(HookFactory):
        _name = "Engine::EnqueueSetAsyncComputeEnable"
    class SetGameCameraNode(HookFactory):
        _name = "Engine::SetGameCameraNode"
    class SetupViewport(HookFactory):
        _name = "Engine::SetupViewport"
    class EnqueueSetupViewport(HookFactory):
        _name = "Engine::EnqueueSetupViewport"
    class EnqueueEndScissorTest(HookFactory):
        _name = "Engine::EnqueueEndScissorTest"
    class GetMsg(HookFactory):
        _name = "Engine::GetMsg"
    class SetOption(HookFactory):
        _name = "Engine::SetOption"
    class SyncGeometryStreaming(HookFactory):
        _name = "Engine::SyncGeometryStreaming"
    class FindRes(HookFactory):
        _name = "Engine::FindRes"
    class AddResource(HookFactory):
        _name = "Engine::AddResource"
    class GetDefaultTexture(HookFactory):
        _name = "Engine::GetDefaultTexture"
    class GetDefaultUavTexture(HookFactory):
        _name = "Engine::GetDefaultUavTexture"
    class IsMeshStreamedIn(HookFactory):
        _name = "Engine::IsMeshStreamedIn"
    class GetResourceDescriptorFromNode(HookFactory):
        _name = "Engine::GetResourceDescriptorFromNode"
    class GetResourceHandleForNode(HookFactory):
        _name = "Engine::GetResourceHandleForNode"
    class UpdateVertexBufferData(HookFactory):
        _name = "Engine::UpdateVertexBufferData"
    class PollToReleaseUnusedResources(HookFactory):
        _name = "Engine::PollToReleaseUnusedResources"
    class ReleaseUnusedResources(HookFactory):
        _name = "Engine::ReleaseUnusedResources"
    class CreateShaderCompilationState(HookFactory):
        _name = "Engine::CreateShaderCompilationState"
    class cEgShaderCompilationState:
        class cEgShaderCompilationState(HookFactory):
            _name = "Engine::cEgShaderCompilationState::cEgShaderCompilationState"
    class DestroyShaderCompilationState(HookFactory):
        _name = "Engine::DestroyShaderCompilationState"
    class PollToCompileShaderTaskList(HookFactory):
        _name = "Engine::PollToCompileShaderTaskList"
    class PollToCompileUncompiledShaders(HookFactory):
        _name = "Engine::PollToCompileUncompiledShaders"
    class PollToCompilePreloadedShaders(HookFactory):
        _name = "Engine::PollToCompilePreloadedShaders"
    class CompileAnyUncompiledShaders(HookFactory):
        _name = "Engine::CompileAnyUncompiledShaders"
    class RefreshAllTexturesLodBias(HookFactory):
        _name = "Engine::RefreshAllTexturesLodBias"
    class RefreshAllTexturesAniso(HookFactory):
        _name = "Engine::RefreshAllTexturesAniso"
    class RendererReady(HookFactory):
        _name = "Engine::RendererReady"
    class RefreshAllPipelines(HookFactory):
        _name = "Engine::RefreshAllPipelines"
    class AnyRenderTargetScaleChange(HookFactory):
        _name = "Engine::AnyRenderTargetScaleChange"
    class SetShaderPreambles(HookFactory):
        _name = "Engine::SetShaderPreambles"
    class RecalculateRenderIDChildren(HookFactory):
        _name = "Engine::RecalculateRenderIDChildren"
    class RecalculateRenderID(HookFactory):
        _name = "Engine::RecalculateRenderID"
    class SetUniformArrayDefaultMultipleShaders(HookFactory):
        _name = "Engine::SetUniformArrayDefaultMultipleShaders"
        _overload: overloads.Engine.SetUniformArrayDefaultMultipleShaders.overloads = "TkStrongType<int,TkStrongTypeIDs::TkResHandleID> *, int, const char *, const float *, int"
        @classmethod
        def overload(cls, overload_args: overloads.Engine.SetUniformArrayDefaultMultipleShaders.overloads):
            cls._overload = overload_args
            return cls
    class GetRenderBufferTexture(HookFactory):
        _name = "Engine::GetRenderBufferTexture"
    class SetFurAllowed(HookFactory):
        _name = "Engine::SetFurAllowed"
    class GetNodeIsValid(HookFactory):
        _name = "Engine::GetNodeIsValid"
    class GetNodeType(HookFactory):
        _name = "Engine::GetNodeType"
    class GetNodeParent(HookFactory):
        _name = "Engine::GetNodeParent"
    class GetModelNode(HookFactory):
        _name = "Engine::GetModelNode"
    class SetNodeParent(HookFactory):
        _name = "Engine::SetNodeParent"
    class GetNodeFirstChild(HookFactory):
        _name = "Engine::GetNodeFirstChild"
    class GetNodeNextSibling(HookFactory):
        _name = "Engine::GetNodeNextSibling"
    class GetNodeNumChildren(HookFactory):
        _name = "Engine::GetNodeNumChildren"
    class GetNodeNumDescendants(HookFactory):
        _name = "Engine::GetNodeNumDescendants"
    class AddNodesStep(HookFactory):
        _name = "Engine::AddNodesStep"
    class DeleteRemovedNodes(HookFactory):
        _name = "Engine::DeleteRemovedNodes"
    class RequestRemoveNode(HookFactory):
        _name = "Engine::RequestRemoveNode"
    class SetNodeActivation(HookFactory):
        _name = "Engine::SetNodeActivation"
    class SetNodeCastsShadow(HookFactory):
        _name = "Engine::SetNodeCastsShadow"
    class SetNodeActivationRecursive(HookFactory):
        _name = "Engine::SetNodeActivationRecursive"
    class SetNodesActivation(HookFactory):
        _name = "Engine::SetNodesActivation"
    class MarkNodeNeedsUpdate(HookFactory):
        _name = "Engine::MarkNodeNeedsUpdate"
    class IsNodeAndParentsActive(HookFactory):
        _name = "Engine::IsNodeAndParentsActive"
    class GetNodeActivation(HookFactory):
        _name = "Engine::GetNodeActivation"
    class GetNodeTransMats(HookFactory):
        _name = "Engine::GetNodeTransMats"
        _overload: overloads.Engine.GetNodeTransMats.overloads = "TkHandle, cTkMatrix34 *, cTkMatrix34 *"
        @classmethod
        def overload(cls, overload_args: overloads.Engine.GetNodeTransMats.overloads):
            cls._overload = overload_args
            return cls
    class GetNodeAbsoluteTransMatrix(HookFactory):
        _name = "Engine::GetNodeAbsoluteTransMatrix"
    class GetNodeTransPositions(HookFactory):
        _name = "Engine::GetNodeTransPositions"
    class SetNodeTransMat(HookFactory):
        _name = "Engine::SetNodeTransMat"
    class ShiftAllTransformsForNode(HookFactory):
        _name = "Engine::ShiftAllTransformsForNode"
    class GetNodeParamI(HookFactory):
        _name = "Engine::GetNodeParamI"
    class SetNodeParamI(HookFactory):
        _name = "Engine::SetNodeParamI"
    class GetNodeParamF(HookFactory):
        _name = "Engine::GetNodeParamF"
    class SetNodeParamF(HookFactory):
        _name = "Engine::SetNodeParamF"
    class GetNodeParamV(HookFactory):
        _name = "Engine::GetNodeParamV"
    class GetNodeNameHash(HookFactory):
        _name = "Engine::GetNodeNameHash"
    class SetNodeName(HookFactory):
        _name = "Engine::SetNodeName"
    class GetNodeNetworkId(HookFactory):
        _name = "Engine::GetNodeNetworkId"
    class SetNodeNetworkId(HookFactory):
        _name = "Engine::SetNodeNetworkId"
    class GetNodeAltId(HookFactory):
        _name = "Engine::GetNodeAltId"
    class GetNodeLocalAABB(HookFactory):
        _name = "Engine::GetNodeLocalAABB"
    class SetNodeLocalAABB(HookFactory):
        _name = "Engine::SetNodeLocalAABB"
    class GetNodeAABB(HookFactory):
        _name = "Engine::GetNodeAABB"
    class IterateNode(HookFactory):
        _name = "Engine::IterateNode"
        _overload: overloads.Engine.IterateNode.overloads = "TkHandle, cEgSceneNode *, __int64, __int64 *"
        @classmethod
        def overload(cls, overload_args: overloads.Engine.IterateNode.overloads):
            cls._overload = overload_args
            return cls
    class FindAttachment(HookFactory):
        _name = "Engine::FindAttachment"
    class AddGroupNode(HookFactory):
        _name = "Engine::AddGroupNode"
    class AddLocatorNode(HookFactory):
        _name = "Engine::AddLocatorNode"
    class GetAnimNameFromMapping(HookFactory):
        _name = "Engine::GetAnimNameFromMapping"
    class ApplyAnimCommandList(HookFactory):
        _name = "Engine::ApplyAnimCommandList"
    class UpdateLodding(HookFactory):
        _name = "Engine::UpdateLodding"
    class SetAnimLOD(HookFactory):
        _name = "Engine::SetAnimLOD"
    class SetAnimJointsLOD(HookFactory):
        _name = "Engine::SetAnimJointsLOD"
    class ResetModelAnimJoints(HookFactory):
        _name = "Engine::ResetModelAnimJoints"
    class SetModelAnimCulledNextUpdate(HookFactory):
        _name = "Engine::SetModelAnimCulledNextUpdate"
    class ClearModelAdditivePose(HookFactory):
        _name = "Engine::ClearModelAdditivePose"
    class SetModelAnimJointPoseMatrix(HookFactory):
        _name = "Engine::SetModelAnimJointPoseMatrix"
    class SetModelAnimPoseOffset(HookFactory):
        _name = "Engine::SetModelAnimPoseOffset"
    class SubscribeToPreAdditiveCallback(HookFactory):
        _name = "Engine::SubscribeToPreAdditiveCallback"
    class UnsubscribeFromPreAdditiveCallback(HookFactory):
        _name = "Engine::UnsubscribeFromPreAdditiveCallback"
    class IsSubscribedToPreAdditiveCallback(HookFactory):
        _name = "Engine::IsSubscribedToPreAdditiveCallback"
    class SubscribeToOnPostAnimCallback(HookFactory):
        _name = "Engine::SubscribeToOnPostAnimCallback"
    class UnsubscribeFromOnPostAnimCallback(HookFactory):
        _name = "Engine::UnsubscribeFromOnPostAnimCallback"
    class IsSubscribedToOnPostAnimCallback(HookFactory):
        _name = "Engine::IsSubscribedToOnPostAnimCallback"
    class SwitchToEditedGeometry(HookFactory):
        _name = "Engine::SwitchToEditedGeometry"
    class UpdateModelGeometry(HookFactory):
        _name = "Engine::UpdateModelGeometry"
    class UpdateModelLODsImmediate(HookFactory):
        _name = "Engine::UpdateModelLODsImmediate"
    class SetLODsUpdateEnabled(HookFactory):
        _name = "Engine::SetLODsUpdateEnabled"
    class RequestStream(HookFactory):
        _name = "Engine::RequestStream"
    class RequestStreamNode(HookFactory):
        _name = "Engine::RequestStreamNode"
    class DoesNodeUseJoint(HookFactory):
        _name = "Engine::DoesNodeUseJoint"
    class GetWindEigenvectorSet(HookFactory):
        _name = "Engine::GetWindEigenvectorSet"
    class SetWindEigenvectorSet(HookFactory):
        _name = "Engine::SetWindEigenvectorSet"
    class DoesHeadNodeUseJoint(HookFactory):
        _name = "Engine::DoesHeadNodeUseJoint"
    class SetupCameraView(HookFactory):
        _name = "Engine::SetupCameraView"
    class SetupCameraViewOrthographic(HookFactory):
        _name = "Engine::SetupCameraViewOrthographic"
    class SetCameraCustomViewport(HookFactory):
        _name = "Engine::SetCameraCustomViewport"
    class SetCameraCustomScissor(HookFactory):
        _name = "Engine::SetCameraCustomScissor"
    class SetCameraJumped(HookFactory):
        _name = "Engine::SetCameraJumped"
    class SetCameraVelFromPrevMatrix(HookFactory):
        _name = "Engine::SetCameraVelFromPrevMatrix"
    class ClearCameraBlurAndJitter(HookFactory):
        _name = "Engine::ClearCameraBlurAndJitter"
    class SetBlurParams(HookFactory):
        _name = "Engine::SetBlurParams"
    class ClearNodeMotion(HookFactory):
        _name = "Engine::ClearNodeMotion"
    class GetCameraProjMat(HookFactory):
        _name = "Engine::GetCameraProjMat"
    class GetCameraViewMat(HookFactory):
        _name = "Engine::GetCameraViewMat"
    class InFrustum(HookFactory):
        _name = "Engine::InFrustum"
    class SetRenderSpaceOffset(HookFactory):
        _name = "Engine::SetRenderSpaceOffset"
    class RunMultiThreaded(HookFactory):
        _name = "Engine::RunMultiThreaded"
    class CleanupMultithreadedPointers(HookFactory):
        _name = "Engine::CleanupMultithreadedPointers"
    class TempGetNewRenderContext(HookFactory):
        _name = "Engine::TempGetNewRenderContext"
    class EncodeVertexIntoStream(HookFactory):
        _name = "Engine::EncodeVertexIntoStream"
    class GetNodeRelativeTransMatrix(HookFactory):
        _templates = ("T0", )
        _name = "Engine::GetNodeRelativeTransMatrix<{T0}>"
    class ComputeNodeTransMatInOffsetSpace(HookFactory):
        _templates = ("T0", )
        _name = "Engine::ComputeNodeTransMatInOffsetSpace<{T0}>"
    class GetNodeName(HookFactory):
        _templates = ("T0", )
        _name = "Engine::GetNodeName<{T0}>"
    class GetRenderSpaceOffset(HookFactory):
        _templates = ("T0", )
        _name = "Engine::GetRenderSpaceOffset<{T0}>"

class cTkGraphicsTempBuffer:
    class Malloc(HookFactory):
        _templates = ("T0", )
        _name = "cTkGraphicsTempBuffer::Malloc<{T0}>"
    class Create(HookFactory):
        _name = "cTkGraphicsTempBuffer::Create"
    class Destroy(HookFactory):
        _name = "cTkGraphicsTempBuffer::Destroy"
    class MallocOnOverFlow(HookFactory):
        _name = "cTkGraphicsTempBuffer::MallocOnOverFlow"
    class Reset(HookFactory):
        _name = "cTkGraphicsTempBuffer::Reset"

class cEgMaterialSampler:
    class SetName(HookFactory):
        _name = "cEgMaterialSampler::SetName"
    class cEgMaterialSampler(HookFactory):
        _name = "cEgMaterialSampler::cEgMaterialSampler"

class PCIntParam:
    class PCIntParam(HookFactory):
        _name = "PCIntParam::PCIntParam"

class PCVoidVec4Param:
    class PCVoidVec4Param(HookFactory):
        _name = "PCVoidVec4Param::PCVoidVec4Param"
    class Set(HookFactory):
        _name = "PCVoidVec4Param::Set"
        _overload: overloads.PCVoidVec4Param.Set.overloads = "PCVoidVec4Param *, unsigned int, unsigned int, unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.PCVoidVec4Param.Set.overloads):
            cls._overload = overload_args
            return cls

class PCFloatParam:
    class PCFloatParam(HookFactory):
        _name = "PCFloatParam::PCFloatParam"

class PCStringParam:
    class PCStringParam(HookFactory):
        _name = "PCStringParam::PCStringParam"

class PCID128Param:
    class PCID128Param(HookFactory):
        _name = "PCID128Param::PCID128Param"
        _overload: overloads.PCID128Param.PCID128Param.overloads = "PCID128Param *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.PCID128Param.PCID128Param.overloads):
            cls._overload = overload_args
            return cls

class PCID128HashedParam:
    class PCID128HashedParam(HookFactory):
        _name = "PCID128HashedParam::PCID128HashedParam"

class cEgPipelineCommand:
    class cEgPipelineCommand(HookFactory):
        _name = "cEgPipelineCommand::cEgPipelineCommand"

class cEgRenderTarget:
    class cEgRenderTarget(HookFactory):
        _name = "cEgRenderTarget::cEgRenderTarget"
        _overload: overloads.cEgRenderTarget.cEgRenderTarget.overloads = "cEgRenderTarget *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgRenderTarget.cEgRenderTarget.overloads):
            cls._overload = overload_args
            return cls

class cTkResourceManager:
    class SetResourceLoaded(HookFactory):
        _name = "cTkResourceManager::SetResourceLoaded"
    class cTkResourceManager(HookFactory):
        _name = "cTkResourceManager::cTkResourceManager"
    class AddNonExistingResource(HookFactory):
        _name = "cTkResourceManager::AddNonExistingResource"
    class AddResource(HookFactory):
        _name = "cTkResourceManager::AddResource"
    class AddResourceInternal(HookFactory):
        _name = "cTkResourceManager::AddResourceInternal"
    class AreAllResourcesKillableThisFrame(HookFactory):
        _name = "cTkResourceManager::AreAllResourcesKillableThisFrame"
    class CloneResource(HookFactory):
        _name = "cTkResourceManager::CloneResource"
    class FindResourceA(HookFactory):
        _name = "cTkResourceManager::FindResourceA"
    class GetAllResourceHandlesOfType(HookFactory):
        _name = "cTkResourceManager::GetAllResourceHandlesOfType"
    class GetDefaultResource(HookFactory):
        _name = "cTkResourceManager::GetDefaultResource"
    class GetResourceTypeName(HookFactory):
        _name = "cTkResourceManager::GetResourceTypeName"
    class PollToReleaseUnusedResources(HookFactory):
        _name = "cTkResourceManager::PollToReleaseUnusedResources"
    class QueryAllUnloadedResources(HookFactory):
        _name = "cTkResourceManager::QueryAllUnloadedResources"
    class QueryUnloadedResource(HookFactory):
        _name = "cTkResourceManager::QueryUnloadedResource"
    class RegisterType(HookFactory):
        _name = "cTkResourceManager::RegisterType"
    class SetDefaultResource(HookFactory):
        _name = "cTkResourceManager::SetDefaultResource"
    class UpdateStreamRequests(HookFactory):
        _name = "cTkResourceManager::UpdateStreamRequests"

class cEgLodNodes:
    class AddNode(HookFactory):
        _name = "cEgLodNodes::AddNode"
    class GetGenericMeshName(HookFactory):
        _name = "cEgLodNodes::GetGenericMeshName"
    class CheckMeshesMatch(HookFactory):
        _name = "cEgLodNodes::CheckMeshesMatch"

class cEgModules:
    class Initialise(HookFactory):
        _name = "cEgModules::Initialise"
    class Release(HookFactory):
        _name = "cEgModules::Release"

class PlatformCheck(HookFactory):
    _name = "PlatformCheck"

class GetGroupEnabledFromId(HookFactory):
    _name = "GetGroupEnabledFromId"

class cEgFlowParseStack:
    class Pop(HookFactory):
        _name = "cEgFlowParseStack::Pop"
    class Push(HookFactory):
        _name = "cEgFlowParseStack::Push"
    class Set(HookFactory):
        _name = "cEgFlowParseStack::Set"
    class Bind(HookFactory):
        _name = "cEgFlowParseStack::Bind"
    class Bound(HookFactory):
        _name = "cEgFlowParseStack::Bound"

class ParseIf(HookFactory):
    _name = "ParseIf"

class ParseCondition(HookFactory):
    _name = "ParseCondition"

class cEgFrustum:
    class BuildViewFrustum(HookFactory):
        _name = "cEgFrustum::BuildViewFrustum"
    class CalculateFrustumCorners(HookFactory):
        _name = "cEgFrustum::CalculateFrustumCorners"
    class CalculateShadowFrustum(HookFactory):
        _name = "cEgFrustum::CalculateShadowFrustum"

class TransposeFrustum(HookFactory):
    _name = "TransposeFrustum"

class cTkMaterialUniform:
    class cTkMaterialUniform(HookFactory):
        _name = "cTkMaterialUniform::cTkMaterialUniform"
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialUniform::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMaterialUniform::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialUniform::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialUniform::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialUniform::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialUniform::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialUniform::WriteToXMLNodeExplicit"

class cEgShaderCombination:
    class cEgShaderCombination(HookFactory):
        _name = "cEgShaderCombination::cEgShaderCombination"
        _overload: overloads.cEgShaderCombination.cEgShaderCombination.overloads = "cEgShaderCombination *, cEgShaderCombination *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgShaderCombination.cEgShaderCombination.overloads):
            cls._overload = overload_args
            return cls

class TkShaderBufferHandle:
    class TkShaderBufferHandle(HookFactory):
        _name = "TkShaderBufferHandle::TkShaderBufferHandle"

class cTkShaderAsyncLoadData:
    class Cleanup(HookFactory):
        _name = "cTkShaderAsyncLoadData::Cleanup"

class cEgShaderContext:
    class cEgShaderContext(HookFactory):
        _name = "cEgShaderContext::cEgShaderContext"
        _overload: overloads.cEgShaderContext.cEgShaderContext.overloads = "cEgShaderContext *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgShaderContext.cEgShaderContext.overloads):
            cls._overload = overload_args
            return cls

class Tokenizer:
    class seekChar(HookFactory):
        _name = "Tokenizer::seekChar"
    class getNextToken(HookFactory):
        _name = "Tokenizer::getNextToken"
    class checkToken(HookFactory):
        _name = "Tokenizer::checkToken"
    class getToken(HookFactory):
        _name = "Tokenizer::getToken"

class CreateShaderNames(HookFactory):
    _name = "CreateShaderNames"

class cEgShaderPreloadList:
    class Read(HookFactory):
        _name = "cEgShaderPreloadList::Read"
    class ShaderContext:
        class ShaderContext(HookFactory):
            _name = "cEgShaderPreloadList::ShaderContext::ShaderContext"

class EvictTex(HookFactory):
    _name = "EvictTex"

class cEgSMShaderContext:
    class cEgSMShaderContext(HookFactory):
        _name = "cEgSMShaderContext::cEgSMShaderContext"

class cEgShaderUniform:
    class cEgShaderUniform(HookFactory):
        _name = "cEgShaderUniform::cEgShaderUniform"

class cEgShaderSampler:
    class cEgShaderSampler(HookFactory):
        _name = "cEgShaderSampler::cEgShaderSampler"

class cEgDrawScreenQuad:
    class Draw(HookFactory):
        _name = "cEgDrawScreenQuad::Draw"

class cEgFfxFsr2Pass:
    class Dispatch(HookFactory):
        _name = "cEgFfxFsr2Pass::Dispatch"

class cEgFfxFsr2Draw:
    class Draw(HookFactory):
        _name = "cEgFfxFsr2Draw::Draw"

class cEgDrawGeometry:
    class Draw(HookFactory):
        _name = "cEgDrawGeometry::Draw"

class cEgDrawLightGeometry:
    class Draw(HookFactory):
        _name = "cEgDrawLightGeometry::Draw"

class cEgDrawLightShapes:
    class Draw(HookFactory):
        _name = "cEgDrawLightShapes::Draw"

class cEgDrawLightShapesMulti:
    class Draw(HookFactory):
        _name = "cEgDrawLightShapesMulti::Draw"

class cEgDrawShadowGeometry:
    class Draw(HookFactory):
        _name = "cEgDrawShadowGeometry::Draw"

class cEgDrawBboxes:
    class Draw(HookFactory):
        _name = "cEgDrawBboxes::Draw"

class AVX_memcpy16_aligned(HookFactory):
    _name = "AVX_memcpy16_aligned"

class RunGraphicsTask(HookFactory):
    _name = "RunGraphicsTask"

class cEgRenderQueueInfo:
    class cEgRenderQueueInfo(HookFactory):
        _name = "cEgRenderQueueInfo::cEgRenderQueueInfo"

class cEgRenderCameraInfo:
    class cEgRenderCameraInfo(HookFactory):
        _name = "cEgRenderCameraInfo::cEgRenderCameraInfo"

class cEgRenderActionRender:
    class MoveTo(HookFactory):
        _name = "cEgRenderActionRender::MoveTo"
    class Execute(HookFactory):
        _name = "cEgRenderActionRender::Execute"

class cEgRendererBase:
    class Resize(HookFactory):
        _name = "cEgRendererBase::Resize"
    class GetRenderBuffer(HookFactory):
        _name = "cEgRendererBase::GetRenderBuffer"
    class Initialise(HookFactory):
        _name = "cEgRendererBase::Initialise"
    class CreateVertexBuffer(HookFactory):
        _name = "cEgRendererBase::CreateVertexBuffer"
    class CreateIndexBuffer(HookFactory):
        _name = "cEgRendererBase::CreateIndexBuffer"
    class DoReleaseBuffer(HookFactory):
        _name = "cEgRendererBase::DoReleaseBuffer"
    class CloneRenderBuffer(HookFactory):
        _name = "cEgRendererBase::CloneRenderBuffer"
    class StealRenderBuffers(HookFactory):
        _name = "cEgRendererBase::StealRenderBuffers"
    class CreateRenderBuffer(HookFactory):
        _name = "cEgRendererBase::CreateRenderBuffer"
    class CreateRenderBufferSamplers(HookFactory):
        _name = "cEgRendererBase::CreateRenderBufferSamplers"
    class ReleaseRenderBuffer(HookFactory):
        _name = "cEgRendererBase::ReleaseRenderBuffer"
    class GenerateMipMaps(HookFactory):
        _name = "cEgRendererBase::GenerateMipMaps"
    class UpdateMappedBufferData(HookFactory):
        _name = "cEgRendererBase::UpdateMappedBufferData"
    class GetRenderBufferTexture(HookFactory):
        _name = "cEgRendererBase::GetRenderBufferTexture"
    class SetRenderBuffer(HookFactory):
        _name = "cEgRendererBase::SetRenderBuffer"
    class UnSetRenderBuffer(HookFactory):
        _name = "cEgRendererBase::UnSetRenderBuffer"
    class ApplyVertexLayout(HookFactory):
        _name = "cEgRendererBase::ApplyVertexLayout"
    class ClearVertexLayout(HookFactory):
        _name = "cEgRendererBase::ClearVertexLayout"
    class BeginPipelineStage(HookFactory):
        _name = "cEgRendererBase::BeginPipelineStage"

class GetCameraInfo(HookFactory):
    _name = "GetCameraInfo"

class cTkBitAlloc:
    class Construct(HookFactory):
        _name = "cTkBitAlloc::Construct"
    class Alloc(HookFactory):
        _name = "cTkBitAlloc::Alloc"
    class IterateNext(HookFactory):
        _name = "cTkBitAlloc::IterateNext"

class cEgEventPool:
    class Create(HookFactory):
        _name = "cEgEventPool::Create"

class cEgRenderQueueBuffer:
    class DuplicateEntries(HookFactory):
        _name = "cEgRenderQueueBuffer::DuplicateEntries"
    class CalculateDepthValue(HookFactory):
        _name = "cEgRenderQueueBuffer::CalculateDepthValue"

class cEgPrivateManagedRenderData:
    class cEgPrivateManagedRenderData(HookFactory):
        _name = "cEgPrivateManagedRenderData::cEgPrivateManagedRenderData"

class cEgRenderQueue:
    class PostCullUpdate(HookFactory):
        _name = "cEgRenderQueue::PostCullUpdate"
    class Finalise(HookFactory):
        _name = "cEgRenderQueue::Finalise"
    class FinaliseJobFunc(HookFactory):
        _name = "cEgRenderQueue::FinaliseJobFunc"
    class FinaliseJob(HookFactory):
        _name = "cEgRenderQueue::FinaliseJob"
    class GetSortedRenderQueue(HookFactory):
        _name = "cEgRenderQueue::GetSortedRenderQueue"
    class KickSortsForPipeline(HookFactory):
        _name = "cEgRenderQueue::KickSortsForPipeline"

class cEgReferenceNodeTemplate:
    class SetDescriptor(HookFactory):
        _name = "cEgReferenceNodeTemplate::SetDescriptor"
    class GatherMaterials(HookFactory):
        _name = "cEgReferenceNodeTemplate::GatherMaterials"
    class GetBoundingBox(HookFactory):
        _name = "cEgReferenceNodeTemplate::GetBoundingBox"
    class GatherData(HookFactory):
        _name = "cEgReferenceNodeTemplate::GatherData"

class cEgRenderableSceneNode:
    class cEgRenderableSceneNode(HookFactory):
        _name = "cEgRenderableSceneNode::cEgRenderableSceneNode"
    class RecalculateRenderID(HookFactory):
        _name = "cEgRenderableSceneNode::RecalculateRenderID"
    class OnAttach(HookFactory):
        _name = "cEgRenderableSceneNode::OnAttach"
    class OnDetach(HookFactory):
        _name = "cEgRenderableSceneNode::OnDetach"

class cEgGroupNode:
    class ParsingFunc(HookFactory):
        _name = "cEgGroupNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgGroupNode::FactoryFunc"

class cEgLocatorNode:
    class ParsingFunc(HookFactory):
        _name = "cEgLocatorNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgLocatorNode::FactoryFunc"
    class OnAttach(HookFactory):
        _name = "cEgLocatorNode::OnAttach"
    class OnDetach(HookFactory):
        _name = "cEgLocatorNode::OnDetach"

class GetNodeCountRecursive(HookFactory):
    _name = "GetNodeCountRecursive"

class cEgRenderLightInfo:
    class SetFromLight(HookFactory):
        _name = "cEgRenderLightInfo::SetFromLight"
    class SetFromQueueEntry(HookFactory):
        _name = "cEgRenderLightInfo::SetFromQueueEntry"

class cEgSceneNodeData:
    class cEgSceneNodeData(HookFactory):
        _name = "cEgSceneNodeData::cEgSceneNodeData"
    class ChangeNodeParent(HookFactory):
        _name = "cEgSceneNodeData::ChangeNodeParent"
    class AddNode(HookFactory):
        _name = "cEgSceneNodeData::AddNode"
    class UpdateAsync(HookFactory):
        _name = "cEgSceneNodeData::UpdateAsync"
    class UpdateLod(HookFactory):
        _name = "cEgSceneNodeData::UpdateLod"
    class UpdateHierarchyFromRoot(HookFactory):
        _name = "cEgSceneNodeData::UpdateHierarchyFromRoot"
    class ForceUpdateNodes(HookFactory):
        _name = "cEgSceneNodeData::ForceUpdateNodes"
    class ForceUpdateRecurse(HookFactory):
        _name = "cEgSceneNodeData::ForceUpdateRecurse"
    class UpdateBoundingBoxesAndTransformsFromRoot(HookFactory):
        _name = "cEgSceneNodeData::UpdateBoundingBoxesAndTransformsFromRoot"
    class UpdateBoundingBoxesAndTransformsRecursive(HookFactory):
        _name = "cEgSceneNodeData::UpdateBoundingBoxesAndTransformsRecursive"
    class FinishAsyncTransformUpdates(HookFactory):
        _name = "cEgSceneNodeData::FinishAsyncTransformUpdates"
    class SubmitAsyncTransformUpdates(HookFactory):
        _name = "cEgSceneNodeData::SubmitAsyncTransformUpdates"
    class AsyncTransformUpdate(HookFactory):
        _name = "cEgSceneNodeData::AsyncTransformUpdate"
    class CacheNodeFlags(HookFactory):
        _name = "cEgSceneNodeData::CacheNodeFlags"
    class KickUpdateQueuesJob(HookFactory):
        _name = "cEgSceneNodeData::KickUpdateQueuesJob"
    class UpdateQueuesJob(HookFactory):
        _name = "cEgSceneNodeData::UpdateQueuesJob"
    class SetRelativeTransform(HookFactory):
        _name = "cEgSceneNodeData::SetRelativeTransform"
    class ComputeTransformInOffsetSpace(HookFactory):
        _name = "cEgSceneNodeData::ComputeTransformInOffsetSpace"
    class ComputePrevTransformInOffsetSpace(HookFactory):
        _name = "cEgSceneNodeData::ComputePrevTransformInOffsetSpace"
    class UpdateNodeNetworkIdLookup(HookFactory):
        _name = "cEgSceneNodeData::UpdateNodeNetworkIdLookup"
    class RemoveNode(HookFactory):
        _name = "cEgSceneNodeData::RemoveNode"
    class ProcessDeferredRemoveNode(HookFactory):
        _name = "cEgSceneNodeData::ProcessDeferredRemoveNode"
    class DetachRecurse(HookFactory):
        _name = "cEgSceneNodeData::DetachRecurse"
    class RemoveRecurse(HookFactory):
        _name = "cEgSceneNodeData::RemoveRecurse"
    class DeleteRemovedNodes(HookFactory):
        _name = "cEgSceneNodeData::DeleteRemovedNodes"
    class RequestAsyncUpdate(HookFactory):
        _name = "cEgSceneNodeData::RequestAsyncUpdate"
    class RecalculateAbsoluteTransform(HookFactory):
        _name = "cEgSceneNodeData::RecalculateAbsoluteTransform"
    class RecalculateAABBRecurse(HookFactory):
        _name = "cEgSceneNodeData::RecalculateAABBRecurse"
    class MarkSelfOrAncestorTransformDirtyRecurse(HookFactory):
        _name = "cEgSceneNodeData::MarkSelfOrAncestorTransformDirtyRecurse"
    class MarkSelfOrDescendentsAABBDirty(HookFactory):
        _name = "cEgSceneNodeData::MarkSelfOrDescendentsAABBDirty"
    class SwapNodes(HookFactory):
        _name = "cEgSceneNodeData::SwapNodes"
    class MoveChildrenTo(HookFactory):
        _name = "cEgSceneNodeData::MoveChildrenTo"
    class FullDefrag(HookFactory):
        _name = "cEgSceneNodeData::FullDefrag"
    class IncrementalDefrag(HookFactory):
        _name = "cEgSceneNodeData::IncrementalDefrag"
    class SubmitCullNodeNoneRecursive(HookFactory):
        _templates = ("T0", )
        _name = "cEgSceneNodeData::SubmitCullNodeNoneRecursive<{T0}>"
    class AsyncCull(HookFactory):
        _templates = ("T0", )
        _name = "cEgSceneNodeData::AsyncCull<{T0}>"

class SwapIndexListFixup(HookFactory):
    _name = "SwapIndexListFixup"

class cEgUpdateTransformsWorkBuffer:
    class CreateNextWorkload(HookFactory):
        _name = "cEgUpdateTransformsWorkBuffer::CreateNextWorkload"
    class Job(HookFactory):
        _name = "cEgUpdateTransformsWorkBuffer::Job"

class cEgCullNodesWorkBuffer:
    class Begin(HookFactory):
        _name = "cEgCullNodesWorkBuffer::Begin"
    class Submit(HookFactory):
        _name = "cEgCullNodesWorkBuffer::Submit"
    class Job(HookFactory):
        _templates = ("T0", )
        _name = "cEgCullNodesWorkBuffer::Job<{T0}>"
    class AddNodestoQueue(HookFactory):
        _templates = ("T0", )
        _name = "cEgCullNodesWorkBuffer::AddNodestoQueue<{T0}>"

class cTkRenderStateCache:
    class cTkRenderStateCache(HookFactory):
        _name = "cTkRenderStateCache::cTkRenderStateCache"
    class ApplyShader(HookFactory):
        _name = "cTkRenderStateCache::ApplyShader"
    class BeginFrame(HookFactory):
        _name = "cTkRenderStateCache::BeginFrame"
    class Clear(HookFactory):
        _name = "cTkRenderStateCache::Clear"
    class DiscardTargetContents(HookFactory):
        _name = "cTkRenderStateCache::DiscardTargetContents"
    class FinaliseRenderState(HookFactory):
        _name = "cTkRenderStateCache::FinaliseRenderState"
    class Initialise(HookFactory):
        _name = "cTkRenderStateCache::Initialise"
    class NukeFrameBuffers(HookFactory):
        _name = "cTkRenderStateCache::NukeFrameBuffers"
    class NukePipelines(HookFactory):
        _name = "cTkRenderStateCache::NukePipelines"
    class NukeRenderPasses(HookFactory):
        _name = "cTkRenderStateCache::NukeRenderPasses"
    class PrecachePipeState(HookFactory):
        _name = "cTkRenderStateCache::PrecachePipeState"
    class RenderBuffer(HookFactory):
        _name = "cTkRenderStateCache::RenderBuffer"
    class RenderInstancedArrays(HookFactory):
        _name = "cTkRenderStateCache::RenderInstancedArrays"
    class ResetState(HookFactory):
        _name = "cTkRenderStateCache::ResetState"
    class SetBlendMode(HookFactory):
        _name = "cTkRenderStateCache::SetBlendMode"
    class SetBuffer(HookFactory):
        _name = "cTkRenderStateCache::SetBuffer"
    class SetColourMask(HookFactory):
        _name = "cTkRenderStateCache::SetColourMask"
    class SetDepthBoundsAllowed(HookFactory):
        _name = "cTkRenderStateCache::SetDepthBoundsAllowed"
    class SetDepthBoundsEnable(HookFactory):
        _name = "cTkRenderStateCache::SetDepthBoundsEnable"
    class SetDepthBoundsRange(HookFactory):
        _name = "cTkRenderStateCache::SetDepthBoundsRange"
    class SetFlag(HookFactory):
        _name = "cTkRenderStateCache::SetFlag"
    class SetImage(HookFactory):
        _name = "cTkRenderStateCache::SetImage"
    class SetStencilFunc(HookFactory):
        _name = "cTkRenderStateCache::SetStencilFunc"
    class SetStencilMask(HookFactory):
        _name = "cTkRenderStateCache::SetStencilMask"
    class SetStencilMode(HookFactory):
        _name = "cTkRenderStateCache::SetStencilMode"
    class SetStencilOp(HookFactory):
        _name = "cTkRenderStateCache::SetStencilOp"
    class SetTest(HookFactory):
        _name = "cTkRenderStateCache::SetTest"
    class SetTexture(HookFactory):
        _name = "cTkRenderStateCache::SetTexture"
    class UnbindTexUnitCountersMasked(HookFactory):
        _name = "cTkRenderStateCache::UnbindTexUnitCountersMasked"

class cEgRenderBuffer:
    class cEgRenderBuffer(HookFactory):
        _name = "cEgRenderBuffer::cEgRenderBuffer"
        _overload: overloads.cEgRenderBuffer.cEgRenderBuffer.overloads = "cEgRenderBuffer *"
        @classmethod
        def overload(cls, overload_args: overloads.cEgRenderBuffer.cEgRenderBuffer.overloads):
            cls._overload = overload_args
            return cls

class EngineUtils:
    class LoadResourcesFromDisk(HookFactory):
        _name = "EngineUtils::LoadResourcesFromDisk"
    class AreResourcesAwaitingLoad(HookFactory):
        _name = "EngineUtils::AreResourcesAwaitingLoad"
    class DumpMessages(HookFactory):
        _name = "EngineUtils::DumpMessages"

class xmlMalloc(HookFactory):
    _name = "xmlMalloc"

class xmlRealloc(HookFactory):
    _name = "xmlRealloc"

class XMLNode:
    class getError(HookFactory):
        _name = "XMLNode::getError"
    class writeToFile(HookFactory):
        _name = "XMLNode::writeToFile"
    class XMLNode(HookFactory):
        _name = "XMLNode::XMLNode"
        _overload: overloads.XMLNode.XMLNode.overloads = "XMLNode *, XMLNode::XMLNodeDataTag *, char *, char"
        @classmethod
        def overload(cls, overload_args: overloads.XMLNode.XMLNode.overloads):
            cls._overload = overload_args
            return cls
    class createXMLTopNode(HookFactory):
        _name = "XMLNode::createXMLTopNode"
    class removeOrderElement(HookFactory):
        _name = "XMLNode::removeOrderElement"
    class addToOrder(HookFactory):
        _name = "XMLNode::addToOrder"
    class addChild_priv(HookFactory):
        _name = "XMLNode::addChild_priv"
    class addText_priv(HookFactory):
        _name = "XMLNode::addText_priv"
    class parseClearTag(HookFactory):
        _name = "XMLNode::parseClearTag"
    class exactMemory(HookFactory):
        _name = "XMLNode::exactMemory"
    class maybeAddTxT(HookFactory):
        _name = "XMLNode::maybeAddTxT"
    class ParseXMLElement(HookFactory):
        _name = "XMLNode::ParseXMLElement"
    class parseString(HookFactory):
        _name = "XMLNode::parseString"
    class parseFile(HookFactory):
        _name = "XMLNode::parseFile"
    class CreateXMLStringR(HookFactory):
        _name = "XMLNode::CreateXMLStringR"
    class detachFromParent(HookFactory):
        _name = "XMLNode::detachFromParent"
    class deleteNodeContent(HookFactory):
        _name = "XMLNode::deleteNodeContent"
    class deleteNodeContent_priv(HookFactory):
        _name = "XMLNode::deleteNodeContent_priv"
    class deepCopy(HookFactory):
        _name = "XMLNode::deepCopy"
    class deleteAttribute(HookFactory):
        _name = "XMLNode::deleteAttribute"
        _overload: overloads.XMLNode.deleteAttribute.overloads = "XMLNode *, int"
        @classmethod
        def overload(cls, overload_args: overloads.XMLNode.deleteAttribute.overloads):
            cls._overload = overload_args
            return cls
    class updateAttribute_WOSD(HookFactory):
        _name = "XMLNode::updateAttribute_WOSD"
    class nChildNode(HookFactory):
        _name = "XMLNode::nChildNode"
        _overload: overloads.XMLNode.nChildNode.overloads = "XMLNode *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.XMLNode.nChildNode.overloads):
            cls._overload = overload_args
            return cls
    class getChildNode(HookFactory):
        _name = "XMLNode::getChildNode"
        _overload: overloads.XMLNode.getChildNode.overloads = "XMLNode *, XMLNode *, const char *, int *"
        @classmethod
        def overload(cls, overload_args: overloads.XMLNode.getChildNode.overloads):
            cls._overload = overload_args
            return cls
    class getChildNodeWithAttribute(HookFactory):
        _name = "XMLNode::getChildNodeWithAttribute"
    class getAttribute(HookFactory):
        _name = "XMLNode::getAttribute"
        _overload: overloads.XMLNode.getAttribute.overloads = "XMLNode *, const char *, int *"
        @classmethod
        def overload(cls, overload_args: overloads.XMLNode.getAttribute.overloads):
            cls._overload = overload_args
            return cls
    class getName(HookFactory):
        _name = "XMLNode::getName"
    class nAttribute(HookFactory):
        _name = "XMLNode::nAttribute"
    class getAttributeName(HookFactory):
        _name = "XMLNode::getAttributeName"
    class isEmpty(HookFactory):
        _name = "XMLNode::isEmpty"
    class addChild(HookFactory):
        _name = "XMLNode::addChild"
    class addAttribute(HookFactory):
        _name = "XMLNode::addAttribute"
    class addAttribute_WOSD(HookFactory):
        _name = "XMLNode::addAttribute_WOSD"
    class updateAttribute(HookFactory):
        _name = "XMLNode::updateAttribute"

class stringDup(HookFactory):
    _name = "stringDup"

class toXMLStringUnSafe(HookFactory):
    _name = "toXMLStringUnSafe"

class lengthXMLString(HookFactory):
    _name = "lengthXMLString"

class fromXMLString(HookFactory):
    _name = "fromXMLString"

class myTagCompare(HookFactory):
    _name = "myTagCompare"

class GetNextToken(HookFactory):
    _name = "GetNextToken"

class XMLParserBase64Tool:
    class encode(HookFactory):
        _name = "XMLParserBase64Tool::encode"
    class decode(HookFactory):
        _name = "XMLParserBase64Tool::decode"

class TkExample:
    class cEgCubeNode:
        class cEgCubeNodeTemplate:
            class GetBoundingBox(HookFactory):
                _name = "TkExample::cEgCubeNode::cEgCubeNodeTemplate::GetBoundingBox"
        class cEgCubeNode(HookFactory):
            _name = "TkExample::cEgCubeNode::cEgCubeNode"
        class InitialiseVertexLayout(HookFactory):
            _name = "TkExample::cEgCubeNode::InitialiseVertexLayout"
        class ParsingFunc(HookFactory):
            _name = "TkExample::cEgCubeNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkExample::cEgCubeNode::FactoryFunc"
        class Render(HookFactory):
            _name = "TkExample::cEgCubeNode::Render"
        class DrawShape(HookFactory):
            _name = "TkExample::cEgCubeNode::DrawShape"
    class InitExtension(HookFactory):
        _name = "TkExample::InitExtension"

class GetScreenPlaneData(HookFactory):
    _name = "GetScreenPlaneData"

class GetCullingIcosahedron(HookFactory):
    _name = "GetCullingIcosahedron"

class GetIcoFaceBox(HookFactory):
    _name = "GetIcoFaceBox"

class TkHeavyAir:
    class TkHeavyAirNodeTemplate:
        class GetBoundingBox(HookFactory):
            _name = "TkHeavyAir::TkHeavyAirNodeTemplate::GetBoundingBox"
        class TkHeavyAirNodeTemplate(HookFactory):
            _name = "TkHeavyAir::TkHeavyAirNodeTemplate::TkHeavyAirNodeTemplate"
    class BeginIncrementUpdateCounter(HookFactory):
        _name = "TkHeavyAir::BeginIncrementUpdateCounter"
    class cTkHeavyAirNode:
        class cTkHeavyAirNode(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::cTkHeavyAirNode"
        class Construct(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::Construct"
        class BeginUpdate(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::BeginUpdate"
        class OnDetach(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::OnDetach"
        class ParsingFunc(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::FactoryFunc"
        class Render(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::Render"
        class RenderBatch(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::RenderBatch"
        class GetParameterFloat(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::GetParameterFloat"
        class SetParameterFloat(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::SetParameterFloat"
        class Destruct(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirNode::Destruct"
    class cTkHeavyAirWorkLoad:
        class Run(HookFactory):
            _name = "TkHeavyAir::cTkHeavyAirWorkLoad::Run"
    class HeavyAirAsyncUpdate(HookFactory):
        _name = "TkHeavyAir::HeavyAirAsyncUpdate"

class TkAtmospherics:
    class InitExtension(HookFactory):
        _name = "TkAtmospherics::InitExtension"

class TkSpeedLines:
    class cTkSpeedLinesNode:
        class cTkSpeedLinesNode(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::cTkSpeedLinesNode"
        class Construct(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::Construct"
        class ParsingFunc(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::FactoryFunc"
        class Render(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::Render"
        class PreAsyncUpdate(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::PreAsyncUpdate"
        class AsyncUpdate(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::AsyncUpdate"
        class SetParameterFloat(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::SetParameterFloat"
        class Destruct(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::Destruct"
        class UpdateLineBuffer(HookFactory):
            _name = "TkSpeedLines::cTkSpeedLinesNode::UpdateLineBuffer"

class EgInstancedModelExtension:
    class cEgInstancedModelNode:
        class GetLodScales(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetLodScales"
        class PreAsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::PreAsyncUpdate"
        class AsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::AsyncUpdate"
        class PostAsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::PostAsyncUpdate"
        class GetLodMeshType(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetLodMeshType"
        class ParsingFunc(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::FactoryFunc"
        class GatherConstantParams(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GatherConstantParams"
        class PostCullUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::PostCullUpdate"
        class PostCullUpdateJob(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::PostCullUpdateJob"
        class UpdateLocalMeshAABBs(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::UpdateLocalMeshAABBs"
        class InstanceTransformsUpdated(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::InstanceTransformsUpdated"
        class RebuildInstanceAABBs_PreAsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::RebuildInstanceAABBs_PreAsyncUpdate"
        class RebuildInstanceAABBs_AsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::RebuildInstanceAABBs_AsyncUpdate"
        class RebuildInstanceAABBs_PostAsyncUpdate(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::RebuildInstanceAABBs_PostAsyncUpdate"
        class ExpandBoundingBoxes(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::ExpandBoundingBoxes"
        class CheckIntersection(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::CheckIntersection"
        class RemoveOneInstance(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::RemoveOneInstance"
        class SetParameterFloat(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetParameterFloat"
        class SetParameterInt(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetParameterInt"
        class GetClassOverride(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetClassOverride"
        class GetHasNoneZeroInterpolationVectors(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetHasNoneZeroInterpolationVectors<{T0}>"
        class GetInstanceTransforms(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetInstanceTransforms<{T0}>"
        class GetInterpolateFromVectors(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetInterpolateFromVectors<{T0}>"
        class GetInstancePositions(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetInstancePositions<{T0}>"
        class SetHasNoneZeroInterpolationVectors(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetHasNoneZeroInterpolationVectors<{T0}>"
        class GetInstanceOrderMap(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetInstanceOrderMap<{T0}>"
        class GetNumInstanceTransforms(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetNumInstanceTransforms<{T0}>"
        class GetOverallBox(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetOverallBox<{T0}>"
        class SetLodLevelMin(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetLodLevelMin<{T0}>"
        class SetLodLevelMax(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetLodLevelMax<{T0}>"
        class SetAabbListDirty(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::SetAabbListDirty<{T0}>"
        class GetFadeOutStart(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetFadeOutStart<{T0}>"
        class GetFadeOutOffsetDistance(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetFadeOutOffsetDistance<{T0}>"
        class GetFadeOutRange(HookFactory):
            _templates = ("T0", )
            _name = "EgInstancedModelExtension::cEgInstancedModelNode::GetFadeOutRange<{T0}>"
    class InitExtension(HookFactory):
        _name = "EgInstancedModelExtension::InitExtension"
    class GetInstanceTransformsMappedOrder(HookFactory):
        _name = "EgInstancedModelExtension::GetInstanceTransformsMappedOrder"
    class GetInstanceOrderMap(HookFactory):
        _name = "EgInstancedModelExtension::GetInstanceOrderMap"
    class GetNodeRegionHandle(HookFactory):
        _name = "EgInstancedModelExtension::GetNodeRegionHandle"
    class GetNodeResHandle(HookFactory):
        _name = "EgInstancedModelExtension::GetNodeResHandle"
    class RemoveOneInstance(HookFactory):
        _name = "EgInstancedModelExtension::RemoveOneInstance"
    class IsInstanceModelNode(HookFactory):
        _name = "EgInstancedModelExtension::IsInstanceModelNode"
    class cEgInstancedMeshNode:
        class EnqueueFunc(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::EnqueueFunc"
        class ParsingFunc(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::FactoryFunc"
        class CanAttach(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::CanAttach"
        class OnAttach(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::OnAttach"
        class Render(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::Render"
        class RenderStereo(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::RenderStereo"
        class StartFrame(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::StartFrame"
        class BuildMatrixJobPostCull(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::BuildMatrixJobPostCull"
        class BuildMatrixJob(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::BuildMatrixJob"
        class RenderAsync(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::RenderAsync"
        class RenderInstancedNode(HookFactory):
            _name = "EgInstancedModelExtension::cEgInstancedMeshNode::RenderInstancedNode"
    class PostCullUpdateJobParams:
        class PostCullUpdateJobParams(HookFactory):
            _name = "EgInstancedModelExtension::PostCullUpdateJobParams::PostCullUpdateJobParams"
    class UpdateAndSearchForRenderables(HookFactory):
        _name = "EgInstancedModelExtension::UpdateAndSearchForRenderables"
    class CacheGrassPushers(HookFactory):
        _name = "EgInstancedModelExtension::CacheGrassPushers"
    class InstanceNguiCallback(HookFactory):
        _name = "EgInstancedModelExtension::InstanceNguiCallback"

class Json:
    class Value:
        class nullSingleton(HookFactory):
            _name = "Json::Value::nullSingleton"
        class CommentInfo:
            class setComment(HookFactory):
                _name = "Json::Value::CommentInfo::setComment"
        class CZString:
            class CZString(HookFactory):
                _name = "Json::Value::CZString::CZString"
        class Value(HookFactory):
            _name = "Json::Value::Value"
            _overload: overloads.Json.Value.Value.overloads = "Json::Value *, int"
            @classmethod
            def overload(cls, overload_args: overloads.Json.Value.Value.overloads):
                cls._overload = overload_args
                return cls
        class asCString(HookFactory):
            _name = "Json::Value::asCString"
        class asString(HookFactory):
            _name = "Json::Value::asString"
        class asInt(HookFactory):
            _name = "Json::Value::asInt"
        class asUInt(HookFactory):
            _name = "Json::Value::asUInt"
        class asDouble(HookFactory):
            _name = "Json::Value::asDouble"
        class asBool(HookFactory):
            _name = "Json::Value::asBool"
        class size(HookFactory):
            _name = "Json::Value::size"
        class dupPayload(HookFactory):
            _name = "Json::Value::dupPayload"
        class releasePayload(HookFactory):
            _name = "Json::Value::releasePayload"
        class dupMeta(HookFactory):
            _name = "Json::Value::dupMeta"
        class resolveReference(HookFactory):
            _name = "Json::Value::resolveReference"
        class find(HookFactory):
            _name = "Json::Value::find"
        class get(HookFactory):
            _name = "Json::Value::get"
        class getMemberNames(HookFactory):
            _name = "Json::Value::getMemberNames"
        class isInt(HookFactory):
            _name = "Json::Value::isInt"
        class isUInt(HookFactory):
            _name = "Json::Value::isUInt"
        class isString(HookFactory):
            _name = "Json::Value::isString"
        class isArray(HookFactory):
            _name = "Json::Value::isArray"
        class isObject(HookFactory):
            _name = "Json::Value::isObject"
        class toStyledString(HookFactory):
            _name = "Json::Value::toStyledString"
        class begin(HookFactory):
            _name = "Json::Value::begin"
        class end(HookFactory):
            _name = "Json::Value::end"
    class ValueIteratorBase:
        class deref(HookFactory):
            _name = "Json::ValueIteratorBase::deref"
        class increment(HookFactory):
            _name = "Json::ValueIteratorBase::increment"
        class isEqual(HookFactory):
            _name = "Json::ValueIteratorBase::isEqual"
        class key(HookFactory):
            _name = "Json::ValueIteratorBase::key"
    class Reader:
        class Reader(HookFactory):
            _name = "Json::Reader::Reader"
        class parse(HookFactory):
            _name = "Json::Reader::parse"
        class readValue(HookFactory):
            _name = "Json::Reader::readValue"
        class readToken(HookFactory):
            _name = "Json::Reader::readToken"
        class readComment(HookFactory):
            _name = "Json::Reader::readComment"
        class readObject(HookFactory):
            _name = "Json::Reader::readObject"
        class readArray(HookFactory):
            _name = "Json::Reader::readArray"
        class decodeNumber(HookFactory):
            _name = "Json::Reader::decodeNumber"
            _overload: overloads.Json.Reader.decodeNumber.overloads = "Json::Reader *, Json::Reader::Token *"
            @classmethod
            def overload(cls, overload_args: overloads.Json.Reader.decodeNumber.overloads):
                cls._overload = overload_args
                return cls
        class decodeDouble(HookFactory):
            _name = "Json::Reader::decodeDouble"
        class decodeUnicodeCodePoint(HookFactory):
            _name = "Json::Reader::decodeUnicodeCodePoint"
        class addError(HookFactory):
            _name = "Json::Reader::addError"
    class OurReader:
        class decodeString(HookFactory):
            _name = "Json::OurReader::decodeString"
            _overload: overloads.Json.OurReader.decodeString.overloads = "Json::Reader *, Json::Reader::Token *"
            @classmethod
            def overload(cls, overload_args: overloads.Json.OurReader.decodeString.overloads):
                cls._overload = overload_args
                return cls
        class decodeUnicodeEscapeSequence(HookFactory):
            _name = "Json::OurReader::decodeUnicodeEscapeSequence"
        class parse(HookFactory):
            _name = "Json::OurReader::parse"
        class readValue(HookFactory):
            _name = "Json::OurReader::readValue"
        class readToken(HookFactory):
            _name = "Json::OurReader::readToken"
        class readComment(HookFactory):
            _name = "Json::OurReader::readComment"
        class readNumber(HookFactory):
            _name = "Json::OurReader::readNumber"
        class readObject(HookFactory):
            _name = "Json::OurReader::readObject"
        class readArray(HookFactory):
            _name = "Json::OurReader::readArray"
        class decodeNumber(HookFactory):
            _name = "Json::OurReader::decodeNumber"
            _overload: overloads.Json.OurReader.decodeNumber.overloads = "Json::OurReader *, Json::OurReader::Token *"
            @classmethod
            def overload(cls, overload_args: overloads.Json.OurReader.decodeNumber.overloads):
                cls._overload = overload_args
                return cls
        class decodeDouble(HookFactory):
            _name = "Json::OurReader::decodeDouble"
        class getFormattedErrorMessages(HookFactory):
            _name = "Json::OurReader::getFormattedErrorMessages"
    class OurCharReader:
        class parse(HookFactory):
            _name = "Json::OurCharReader::parse"
    class CharReaderBuilder:
        class CharReaderBuilder(HookFactory):
            _name = "Json::CharReaderBuilder::CharReaderBuilder"
        class newCharReader(HookFactory):
            _name = "Json::CharReaderBuilder::newCharReader"
        class setDefaults(HookFactory):
            _name = "Json::CharReaderBuilder::setDefaults"
    class valueToString(HookFactory):
        _name = "Json::valueToString"
        _overload: overloads.Json.valueToString.overloads = "std::string *, __int64"
        @classmethod
        def overload(cls, overload_args: overloads.Json.valueToString.overloads):
            cls._overload = overload_args
            return cls
    class BuiltStyledStreamWriter:
        class write(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::write"
        class writeValue(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeValue"
        class writeArrayValue(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeArrayValue"
        class isMultilineArray(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::isMultilineArray"
        class writeIndent(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeIndent"
        class writeWithIndent(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeWithIndent"
        class unindent(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::unindent"
        class writeCommentBeforeValue(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeCommentBeforeValue"
        class writeCommentAfterValueOnSameLine(HookFactory):
            _name = "Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine"
    class StreamWriterBuilder:
        class newStreamWriter(HookFactory):
            _name = "Json::StreamWriterBuilder::newStreamWriter"
        class setDefaults(HookFactory):
            _name = "Json::StreamWriterBuilder::setDefaults"

class Json__duplicateStringValue(HookFactory):
    _name = "Json__duplicateStringValue"

class Json__codePointToUTF8(HookFactory):
    _name = "Json__codePointToUTF8"

class Json__toHex16Bit(HookFactory):
    _name = "Json__toHex16Bit"

class Json__valueToQuotedStringN(HookFactory):
    _name = "Json__valueToQuotedStringN"

class TkLineRenderer:
    class cEgLineRendererNode:
        class cEgLineRendererNode(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::cEgLineRendererNode"
        class ParsingFunc(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::FactoryFunc"
        class Render(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::Render"
        class RenderLines(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::RenderLines"
        class AddLineImmediate(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::AddLineImmediate"
        class AddLineImmediatePhysRel(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::AddLineImmediatePhysRel"
        class AddCircleImmediate(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::AddCircleImmediate"
        class Release(HookFactory):
            _name = "TkLineRenderer::cEgLineRendererNode::Release"
    class InitExtension(HookFactory):
        _name = "TkLineRenderer::InitExtension"
    class AddLine(HookFactory):
        _name = "TkLineRenderer::AddLine"
    class AddLineImmediatePhysRel(HookFactory):
        _name = "TkLineRenderer::AddLineImmediatePhysRel"
        _overload: overloads.TkLineRenderer.AddLineImmediatePhysRel.overloads = "TkHandle, cTkPhysRelVec3 *, const cTkColour *, int, float"
        @classmethod
        def overload(cls, overload_args: overloads.TkLineRenderer.AddLineImmediatePhysRel.overloads):
            cls._overload = overload_args
            return cls
    class AddCircleImmediate(HookFactory):
        _name = "TkLineRenderer::AddCircleImmediate"
    class ClearImmediateBuffers(HookFactory):
        _name = "TkLineRenderer::ClearImmediateBuffers"

class LZ4_putPosition(HookFactory):
    _name = "LZ4_putPosition"

class LZ4_compress_fast_extState(HookFactory):
    _name = "LZ4_compress_fast_extState"

class LZ4_compress_fast(HookFactory):
    _name = "LZ4_compress_fast"

class LZ4_renormDictT(HookFactory):
    _name = "LZ4_renormDictT"

class LZ4_compress_fast_continue(HookFactory):
    _name = "LZ4_compress_fast_continue"

class LZ4_decompress_safe(HookFactory):
    _name = "LZ4_decompress_safe"

class LZ4_decompress_fast(HookFactory):
    _name = "LZ4_decompress_fast"

class LZ4_decompress_safe_continue(HookFactory):
    _name = "LZ4_decompress_safe_continue"

class EgMagicModels__SetModelFadeValue(HookFactory):
    _name = "EgMagicModels__SetModelFadeValue"

class EgMagicModels:
    class cEgMagicModel:
        class cEgMagicModel(HookFactory):
            _name = "EgMagicModels::cEgMagicModel::cEgMagicModel"
        class UpdateMatrix(HookFactory):
            _name = "EgMagicModels::cEgMagicModel::UpdateMatrix"
        class SpawnModel(HookFactory):
            _name = "EgMagicModels::cEgMagicModel::SpawnModel"
        class UpdateModel(HookFactory):
            _name = "EgMagicModels::cEgMagicModel::UpdateModel"
        class UpdateFade(HookFactory):
            _name = "EgMagicModels::cEgMagicModel::UpdateFade"
    class GetExtensionName(HookFactory):
        _name = "EgMagicModels::GetExtensionName"
    class InitExtension(HookFactory):
        _name = "EgMagicModels::InitExtension"
    class AddMagicModel(HookFactory):
        _name = "EgMagicModels::AddMagicModel"
    class ForceActivateMagicModel(HookFactory):
        _name = "EgMagicModels::ForceActivateMagicModel"
    class UpdateModelMatrix(HookFactory):
        _name = "EgMagicModels::UpdateModelMatrix"
    class RemoveMagicModel(HookFactory):
        _name = "EgMagicModels::RemoveMagicModel"
    class SetBudgetValue(HookFactory):
        _name = "EgMagicModels::SetBudgetValue"
    class Update(HookFactory):
        _name = "EgMagicModels::Update"
    class UpdateModelSpawns(HookFactory):
        _name = "EgMagicModels::UpdateModelSpawns"
    class SortByVisibility(HookFactory):
        _name = "EgMagicModels::SortByVisibility"
    class AddModelToSpawnList(HookFactory):
        _name = "EgMagicModels::AddModelToSpawnList"
    class BuildVisibilityMap(HookFactory):
        _name = "EgMagicModels::BuildVisibilityMap"
    class ComputeModelVisibilities(HookFactory):
        _name = "EgMagicModels::ComputeModelVisibilities"
    class UpdateModelsForBudget(HookFactory):
        _name = "EgMagicModels::UpdateModelsForBudget"
    class cEgMagicVisibilityMap:
        class CalculateModelVisibility(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::CalculateModelVisibility"
        class CouldBeObscuringConeSphereIntersection(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::CouldBeObscuringConeSphereIntersection"
        class QuickHull(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::QuickHull"
        class ProjectModelToShape(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::ProjectModelToShape"
        class CutShape(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::CutShape"
        class CalculateArea(HookFactory):
            _name = "EgMagicModels::cEgMagicVisibilityMap::CalculateArea"
    class sEgMagicBuffer:
        class GetEntry(HookFactory):
            _templates = ("T0", )
            _name = "EgMagicModels::sEgMagicBuffer<{T0}>::GetEntry"
    class BandSegments:
        class GetSegment(HookFactory):
            _templates = ("T0", )
            _name = "EgMagicModels::BandSegments<{T0}>::GetSegment"

class EgMagicModels__GatherMeshVertsRecursive(HookFactory):
    _name = "EgMagicModels__GatherMeshVertsRecursive"

class EgMagicModels__GatherModelVertsRecursive(HookFactory):
    _name = "EgMagicModels__GatherModelVertsRecursive"

class nNanoVG__stbtt__isfont(HookFactory):
    _name = "nNanoVG__stbtt__isfont"

class nNanoVG__stbtt__find_table(HookFactory):
    _name = "nNanoVG__stbtt__find_table"

class stbtt_GetFontOffsetForIndex(HookFactory):
    _name = "stbtt_GetFontOffsetForIndex"

class stbtt_InitFont(HookFactory):
    _name = "stbtt_InitFont"

class stbtt_FindGlyphIndex(HookFactory):
    _name = "stbtt_FindGlyphIndex"

class nNanoVG__stbtt__GetGlyfOffset(HookFactory):
    _name = "nNanoVG__stbtt__GetGlyfOffset"

class nNanoVG__stbtt__close_shape(HookFactory):
    _name = "nNanoVG__stbtt__close_shape"

class stbtt_GetGlyphShape(HookFactory):
    _name = "stbtt_GetGlyphShape"

class stbtt_GetGlyphKernAdvance(HookFactory):
    _name = "stbtt_GetGlyphKernAdvance"

class nNanoVG__stbtt__fill_active_edges(HookFactory):
    _name = "nNanoVG__stbtt__fill_active_edges"

class nNanoVG__stbtt__rasterize_sorted_edges(HookFactory):
    _name = "nNanoVG__stbtt__rasterize_sorted_edges"

class nNanoVG__stbtt__edge_compare(HookFactory):
    _name = "nNanoVG__stbtt__edge_compare"

class nNanoVG__stbtt__rasterize(HookFactory):
    _name = "nNanoVG__stbtt__rasterize"

class nNanoVG__stbtt__tesselate_curve(HookFactory):
    _name = "nNanoVG__stbtt__tesselate_curve"

class nNanoVG:
    class stbtt_FlattenCurves(HookFactory):
        _name = "nNanoVG::stbtt_FlattenCurves"
    class fonsCreateInternal(HookFactory):
        _name = "nNanoVG::fonsCreateInternal"
    class fonsAddFontMem(HookFactory):
        _name = "nNanoVG::fonsAddFontMem"
    class fonsGetFontByName(HookFactory):
        _name = "nNanoVG::fonsGetFontByName"
    class fonsTextIterInit(HookFactory):
        _name = "nNanoVG::fonsTextIterInit"
    class fonsTextIterNext(HookFactory):
        _name = "nNanoVG::fonsTextIterNext"
    class fonsTextBounds(HookFactory):
        _name = "nNanoVG::fonsTextBounds"
    class fonsLineBounds(HookFactory):
        _name = "nNanoVG::fonsLineBounds"
    class fonsDeleteInternal(HookFactory):
        _name = "nNanoVG::fonsDeleteInternal"
    class fonsResetAtlas(HookFactory):
        _name = "nNanoVG::fonsResetAtlas"

class stbtt_MakeGlyphBitmapSubpixel(HookFactory):
    _name = "stbtt_MakeGlyphBitmapSubpixel"

class nNanoVG__fons__tmpalloc(HookFactory):
    _name = "nNanoVG__fons__tmpalloc"

class nNanoVG__fons__atlasInsertNode(HookFactory):
    _name = "nNanoVG__fons__atlasInsertNode"

class nNanoVG__fons__atlasAddSkylineLevel(HookFactory):
    _name = "nNanoVG__fons__atlasAddSkylineLevel"

class nNanoVG__fons__atlasAddRect(HookFactory):
    _name = "nNanoVG__fons__atlasAddRect"

class nNanoVG__fons__addWhiteRect(HookFactory):
    _name = "nNanoVG__fons__addWhiteRect"

class nNanoVG__fons__allocFont(HookFactory):
    _name = "nNanoVG__fons__allocFont"

class nNanoVG__fons__allocGlyph(HookFactory):
    _name = "nNanoVG__fons__allocGlyph"

class nNanoVG__fons__blurCols(HookFactory):
    _name = "nNanoVG__fons__blurCols"

class nNanoVG__fons__blurRows(HookFactory):
    _name = "nNanoVG__fons__blurRows"

class nNanoVG__fons__blur(HookFactory):
    _name = "nNanoVG__fons__blur"

class nNanoVG__fons__getQuad(HookFactory):
    _name = "nNanoVG__fons__getQuad"

class nNanoVG__fons__flush(HookFactory):
    _name = "nNanoVG__fons__flush"

class nNanoVG__fons__getVertAlign(HookFactory):
    _name = "nNanoVG__fons__getVertAlign"

class nNanoVG__stbi_load_main(HookFactory):
    _name = "nNanoVG__stbi_load_main"

class nNanoVG__stbi__refill_buffer(HookFactory):
    _name = "nNanoVG__stbi__refill_buffer"

class nNanoVG__stbi__skip(HookFactory):
    _name = "nNanoVG__stbi__skip"

class nNanoVG__stbi__getn(HookFactory):
    _name = "nNanoVG__stbi__getn"

class nNanoVG__stbi__get16be(HookFactory):
    _name = "nNanoVG__stbi__get16be"

class nNanoVG__stbi__get32be(HookFactory):
    _name = "nNanoVG__stbi__get32be"

class nNanoVG__stbi__get16le(HookFactory):
    _name = "nNanoVG__stbi__get16le"

class nNanoVG__stbi__get32le(HookFactory):
    _name = "nNanoVG__stbi__get32le"

class nNanoVG__stbi__convert_format(HookFactory):
    _name = "nNanoVG__stbi__convert_format"

class nNanoVG__stbi__build_huffman(HookFactory):
    _name = "nNanoVG__stbi__build_huffman"

class nNanoVG__stbi__grow_buffer_unsafe(HookFactory):
    _name = "nNanoVG__stbi__grow_buffer_unsafe"

class nNanoVG__stbi__jpeg_decode_block(HookFactory):
    _name = "nNanoVG__stbi__jpeg_decode_block"

class nNanoVG__stbi__idct_block(HookFactory):
    _name = "nNanoVG__stbi__idct_block"

class nNanoVG__stbi__get_marker(HookFactory):
    _name = "nNanoVG__stbi__get_marker"

class nNanoVG__stbi__parse_entropy_coded_data(HookFactory):
    _name = "nNanoVG__stbi__parse_entropy_coded_data"

class nNanoVG__stbi__process_marker(HookFactory):
    _name = "nNanoVG__stbi__process_marker"

class nNanoVG__stbi__process_scan_header(HookFactory):
    _name = "nNanoVG__stbi__process_scan_header"

class nNanoVG__stbi__process_frame_header(HookFactory):
    _name = "nNanoVG__stbi__process_frame_header"

class nNanoVG__decode_jpeg_header(HookFactory):
    _name = "nNanoVG__decode_jpeg_header"

class nNanoVG__stbi__resample_row_v_2(HookFactory):
    _name = "nNanoVG__stbi__resample_row_v_2"

class nNanoVG__stbi__resample_row_h_2(HookFactory):
    _name = "nNanoVG__stbi__resample_row_h_2"

class nNanoVG__stbi__resample_row_hv_2(HookFactory):
    _name = "nNanoVG__stbi__resample_row_hv_2"

class nNanoVG__stbi__resample_row_generic(HookFactory):
    _name = "nNanoVG__stbi__resample_row_generic"

class nNanoVG__stbi__cleanup_jpeg(HookFactory):
    _name = "nNanoVG__stbi__cleanup_jpeg"

class nNanoVG__load_jpeg_image(HookFactory):
    _name = "nNanoVG__load_jpeg_image"

class nNanoVG__stbi__jpeg_load(HookFactory):
    _name = "nNanoVG__stbi__jpeg_load"

class zbuild_huffman(HookFactory):
    _name = "zbuild_huffman"

class nNanoVG__stbi__zexpand(HookFactory):
    _name = "nNanoVG__stbi__zexpand"

class nNanoVG__stbi__parse_huffman_block(HookFactory):
    _name = "nNanoVG__stbi__parse_huffman_block"

class nNanoVG__stbi__compute_huffman_codes(HookFactory):
    _name = "nNanoVG__stbi__compute_huffman_codes"

class nNanoVG__stbi__parse_uncomperssed_block(HookFactory):
    _name = "nNanoVG__stbi__parse_uncomperssed_block"

class nNanoVG__stbi__parse_zlib(HookFactory):
    _name = "nNanoVG__stbi__parse_zlib"

class nNanoVG__stbi__check_png_header(HookFactory):
    _name = "nNanoVG__stbi__check_png_header"

class nNanoVG__stbi__create_png_image_raw(HookFactory):
    _name = "nNanoVG__stbi__create_png_image_raw"

class nNanoVG__stbi__create_png_image(HookFactory):
    _name = "nNanoVG__stbi__create_png_image"

class nNanoVG__stbi__parse_png_file(HookFactory):
    _name = "nNanoVG__stbi__parse_png_file"

class high_bit(HookFactory):
    _name = "high_bit"

class nNanoVG__stbi__bmp_load(HookFactory):
    _name = "nNanoVG__stbi__bmp_load"

class nNanoVG__stbi__tga_test(HookFactory):
    _name = "nNanoVG__stbi__tga_test"

class nNanoVG__stbi__tga_load(HookFactory):
    _name = "nNanoVG__stbi__tga_load"

class nNanoVG__stbi__psd_load(HookFactory):
    _name = "nNanoVG__stbi__psd_load"

class nNanoVG__stbi__pic_is4(HookFactory):
    _name = "nNanoVG__stbi__pic_is4"

class nNanoVG__stbi__readval(HookFactory):
    _name = "nNanoVG__stbi__readval"

class nNanoVG__stbi__pic_load_core(HookFactory):
    _name = "nNanoVG__stbi__pic_load_core"

class nNanoVG__stbi__pic_load(HookFactory):
    _name = "nNanoVG__stbi__pic_load"

class nNanoVG__stbi__gif_test_raw(HookFactory):
    _name = "nNanoVG__stbi__gif_test_raw"

class nNanoVG__stbi__gif_header(HookFactory):
    _name = "nNanoVG__stbi__gif_header"

class nNanoVG__stbi__out_gif_code(HookFactory):
    _name = "nNanoVG__stbi__out_gif_code"

class nNanoVG__stbi__process_gif_raster(HookFactory):
    _name = "nNanoVG__stbi__process_gif_raster"

class nNanoVG__stbi__gif_load_next(HookFactory):
    _name = "nNanoVG__stbi__gif_load_next"

class nNanoVG__stbi__gif_load(HookFactory):
    _name = "nNanoVG__stbi__gif_load"

class nNanoVG__stbi__hdr_test(HookFactory):
    _name = "nNanoVG__stbi__hdr_test"

class nNanoVG__stbi__hdr_gettoken(HookFactory):
    _name = "nNanoVG__stbi__hdr_gettoken"

class hdr_convert(HookFactory):
    _name = "hdr_convert"

class nNanoVG__stbi__hdr_load(HookFactory):
    _name = "nNanoVG__stbi__hdr_load"

class nNanoVG__stbiw__jpg_writeBits(HookFactory):
    _name = "nNanoVG__stbiw__jpg_writeBits"

class nNanoVG__stbiw__jpg_DCT(HookFactory):
    _name = "nNanoVG__stbiw__jpg_DCT"

class nNanoVG__stbi_write_jpg_core(HookFactory):
    _name = "nNanoVG__stbi_write_jpg_core"

class nvg__deletePathCache(HookFactory):
    _name = "nvg__deletePathCache"

class nvgCreateInternal(HookFactory):
    _name = "nvgCreateInternal"

class nvgBeginFrame(HookFactory):
    _name = "nvgBeginFrame"

class nvgEndFrame(HookFactory):
    _name = "nvgEndFrame"

class nvgRGBf(HookFactory):
    _name = "nvgRGBf"

class nvgRGBA(HookFactory):
    _name = "nvgRGBA"

class nvgRGBAf(HookFactory):
    _name = "nvgRGBAf"

class nvgTransformScale(HookFactory):
    _name = "nvgTransformScale"

class nvgTransformMultiply(HookFactory):
    _name = "nvgTransformMultiply"

class nvgTransformInverse(HookFactory):
    _name = "nvgTransformInverse"

class nvgSave(HookFactory):
    _name = "nvgSave"

class nvgRestore(HookFactory):
    _name = "nvgRestore"

class nvgReset(HookFactory):
    _name = "nvgReset"

class nvgStrokeWidth(HookFactory):
    _name = "nvgStrokeWidth"

class nvgLineCap(HookFactory):
    _name = "nvgLineCap"

class nvgGlobalAlpha(HookFactory):
    _name = "nvgGlobalAlpha"

class nvgTranslate(HookFactory):
    _name = "nvgTranslate"

class nvgScale(HookFactory):
    _name = "nvgScale"

class nvgCurrentTransform(HookFactory):
    _name = "nvgCurrentTransform"

class nvgImagePattern(HookFactory):
    _name = "nvgImagePattern"

class nvgScissor(HookFactory):
    _name = "nvgScissor"

class nvgIntersectScissor(HookFactory):
    _name = "nvgIntersectScissor"

class nvgResetScissor(HookFactory):
    _name = "nvgResetScissor"

class nvg__appendCommands(HookFactory):
    _name = "nvg__appendCommands"

class nvg__addPoint(HookFactory):
    _name = "nvg__addPoint"

class nvg__getAverageScale(HookFactory):
    _name = "nvg__getAverageScale"

class nvg__allocTempVerts(HookFactory):
    _name = "nvg__allocTempVerts"

class nvg__tesselateBezier(HookFactory):
    _name = "nvg__tesselateBezier"

class nvg__flattenPaths(HookFactory):
    _name = "nvg__flattenPaths"

class nvg__roundJoin(HookFactory):
    _name = "nvg__roundJoin"

class nvg__bevelJoin(HookFactory):
    _name = "nvg__bevelJoin"

class nvg__buttCapStart(HookFactory):
    _name = "nvg__buttCapStart"

class nvg__buttCapEnd(HookFactory):
    _name = "nvg__buttCapEnd"

class nvg__calculateJoins(HookFactory):
    _name = "nvg__calculateJoins"

class nvg__expandStroke(HookFactory):
    _name = "nvg__expandStroke"

class nvg__expandFill(HookFactory):
    _name = "nvg__expandFill"

class nvgBeginPath(HookFactory):
    _name = "nvgBeginPath"

class nvgMoveTo(HookFactory):
    _name = "nvgMoveTo"

class nvgLineTo(HookFactory):
    _name = "nvgLineTo"

class nvgBezierTo(HookFactory):
    _name = "nvgBezierTo"

class nvgArcTo(HookFactory):
    _name = "nvgArcTo"

class nvgPathWinding(HookFactory):
    _name = "nvgPathWinding"

class nvgArc(HookFactory):
    _name = "nvgArc"

class nvgRect(HookFactory):
    _name = "nvgRect"

class nvgRoundedRect(HookFactory):
    _name = "nvgRoundedRect"

class nvgEllipse(HookFactory):
    _name = "nvgEllipse"

class nvgCircle(HookFactory):
    _name = "nvgCircle"

class nvgFill(HookFactory):
    _name = "nvgFill"

class nvgStroke(HookFactory):
    _name = "nvgStroke"

class nvgCreateFontMem(HookFactory):
    _name = "nvgCreateFontMem"

class nvgFontSize(HookFactory):
    _name = "nvgFontSize"

class nvgFontBlur(HookFactory):
    _name = "nvgFontBlur"

class nvgTextLetterSpacing(HookFactory):
    _name = "nvgTextLetterSpacing"

class nvgTextAlign(HookFactory):
    _name = "nvgTextAlign"

class nvgFontFaceId(HookFactory):
    _name = "nvgFontFaceId"

class nvgFontFace(HookFactory):
    _name = "nvgFontFace"

class nvg__flushTextTexture(HookFactory):
    _name = "nvg__flushTextTexture"

class nvg__allocTextAtlas(HookFactory):
    _name = "nvg__allocTextAtlas"

class nvg__renderText(HookFactory):
    _name = "nvg__renderText"

class nvgText(HookFactory):
    _name = "nvgText"

class nvgTextBox(HookFactory):
    _name = "nvgTextBox"

class nvgTextBreakLines(HookFactory):
    _name = "nvgTextBreakLines"

class nvgTextBounds(HookFactory):
    _name = "nvgTextBounds"

class nvgTextBoxBounds(HookFactory):
    _name = "nvgTextBoxBounds"

class nvgTextMetrics(HookFactory):
    _name = "nvgTextMetrics"

class nvg_malloc(HookFactory):
    _name = "nvg_malloc"

class nvg_calloc(HookFactory):
    _name = "nvg_calloc"

class nvg_free(HookFactory):
    _name = "nvg_free"

class nvg_realloc(HookFactory):
    _name = "nvg_realloc"

class cEgTrailNode:
    class ResourceFactoryFunc(HookFactory):
        _name = "cEgTrailNode::ResourceFactoryFunc"
    class SetParameterFloat(HookFactory):
        _name = "cEgTrailNode::SetParameterFloat"
    class PreTransferRenderData(HookFactory):
        _name = "cEgTrailNode::PreTransferRenderData"
    class cTkTrailVertex:
        class cTkTrailVertex(HookFactory):
            _name = "cEgTrailNode::cTkTrailVertex::cTkTrailVertex"
    class cEgTrailNode(HookFactory):
        _name = "cEgTrailNode::cEgTrailNode"
    class ParsingFunc(HookFactory):
        _name = "cEgTrailNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgTrailNode::FactoryFunc"
    class Render(HookFactory):
        _name = "cEgTrailNode::Render"
    class GetLinePosition(HookFactory):
        _name = "cEgTrailNode::GetLinePosition"
    class CreateTrail(HookFactory):
        _name = "cEgTrailNode::CreateTrail"
    class Update(HookFactory):
        _name = "cEgTrailNode::Update"
    class UpdateVertexData(HookFactory):
        _name = "cEgTrailNode::UpdateVertexData"
    class EnqueueFunc(HookFactory):
        _name = "cEgTrailNode::EnqueueFunc"

class TkParticle:
    class TkParticleNodeTpl:
        class GetBoundingBox(HookFactory):
            _name = "TkParticle::TkParticleNodeTpl::GetBoundingBox"
    class InitExtension(HookFactory):
        _name = "TkParticle::InitExtension"
    class AsyncBeginParticles(HookFactory):
        _name = "TkParticle::AsyncBeginParticles"
    class BeginIncrementUpdateCounter(HookFactory):
        _name = "TkParticle::BeginIncrementUpdateCounter"
    class Sync(HookFactory):
        _name = "TkParticle::Sync"
    class EnableEmitters(HookFactory):
        _name = "TkParticle::EnableEmitters"
    class SetEmitterFade(HookFactory):
        _name = "TkParticle::SetEmitterFade"
    class SetEmitterStage(HookFactory):
        _name = "TkParticle::SetEmitterStage"
    class StopEmitters(HookFactory):
        _name = "TkParticle::StopEmitters"
    class StopEmittersAndAttachToProxy(HookFactory):
        _name = "TkParticle::StopEmittersAndAttachToProxy"
    class HasFinished(HookFactory):
        _name = "TkParticle::HasFinished"
    class SetEmitterMaxRenderDistance(HookFactory):
        _name = "TkParticle::SetEmitterMaxRenderDistance"
    class SetUserColour(HookFactory):
        _name = "TkParticle::SetUserColour"
    class SetColourisation(HookFactory):
        _name = "TkParticle::SetColourisation"
    class SetSpawnOffsetMultiplier(HookFactory):
        _name = "TkParticle::SetSpawnOffsetMultiplier"
    class NGuiRender(HookFactory):
        _name = "TkParticle::NGuiRender"
    class GetEmitterFloatPropertyMax(HookFactory):
        _name = "TkParticle::GetEmitterFloatPropertyMax"
    class GetEmitterFloatPropertyMin(HookFactory):
        _name = "TkParticle::GetEmitterFloatPropertyMin"
    class cTkEmitterNode:
        class GetEmitterFloatProperty(HookFactory):
            _name = "TkParticle::cTkEmitterNode::GetEmitterFloatProperty"
        class cTkEmitterNode(HookFactory):
            _name = "TkParticle::cTkEmitterNode::cTkEmitterNode"
        class OnAttach(HookFactory):
            _name = "TkParticle::cTkEmitterNode::OnAttach"
        class OnDetach(HookFactory):
            _name = "TkParticle::cTkEmitterNode::OnDetach"
        class ParsingFunc(HookFactory):
            _name = "TkParticle::cTkEmitterNode::ParsingFunc"
        class FactoryFunc(HookFactory):
            _name = "TkParticle::cTkEmitterNode::FactoryFunc"
        class CreateParticleBuffer(HookFactory):
            _name = "TkParticle::cTkEmitterNode::CreateParticleBuffer"
        class EmitterBeginUpdate(HookFactory):
            _name = "TkParticle::cTkEmitterNode::EmitterBeginUpdate"
        class SpawnParticleFromParticle(HookFactory):
            _name = "TkParticle::cTkEmitterNode::SpawnParticleFromParticle"
        class EmitterAsyncUpdate(HookFactory):
            _name = "TkParticle::cTkEmitterNode::EmitterAsyncUpdate"
        class EmitterEndUpdate(HookFactory):
            _name = "TkParticle::cTkEmitterNode::EmitterEndUpdate"
        class SpawnParticle(HookFactory):
            _name = "TkParticle::cTkEmitterNode::SpawnParticle"
        class Sync(HookFactory):
            _name = "TkParticle::cTkEmitterNode::Sync"
        class DrawParticles(HookFactory):
            _name = "TkParticle::cTkEmitterNode::DrawParticles"
        class RenderBatch(HookFactory):
            _name = "TkParticle::cTkEmitterNode::RenderBatch"
        class UpdateEmitter(HookFactory):
            _name = "TkParticle::cTkEmitterNode::UpdateEmitter"
        class GetParameterInt(HookFactory):
            _name = "TkParticle::cTkEmitterNode::GetParameterInt"
        class SetPerDrawUniforms(HookFactory):
            _name = "TkParticle::cTkEmitterNode::SetPerDrawUniforms"
    class GetEmitterFloatPropertyIntegral(HookFactory):
        _name = "TkParticle::GetEmitterFloatPropertyIntegral"
    class CalculateBufferSize(HookFactory):
        _name = "TkParticle::CalculateBufferSize"

class GPU:
    class UberNoiseSOA4(HookFactory):
        _name = "GPU::UberNoiseSOA4"
    class GenerateNoise2D(HookFactory):
        _name = "GPU::GenerateNoise2D"
    class TrySpawnObject_CheckDensity(HookFactory):
        _name = "GPU::TrySpawnObject_CheckDensity"
    class TrySpawnObject_CheckNoise(HookFactory):
        _name = "GPU::TrySpawnObject_CheckNoise"
    class TrySpawnObject(HookFactory):
        _name = "GPU::TrySpawnObject"

class squish:
    class DecompressAlphaDxt3(HookFactory):
        _name = "squish::DecompressAlphaDxt3"
    class DecompressAlphaDxt5(HookFactory):
        _name = "squish::DecompressAlphaDxt5"
    class DecompressColour(HookFactory):
        _name = "squish::DecompressColour"

class cEgSingleLineNode:
    class cEgSingleLineNode(HookFactory):
        _name = "cEgSingleLineNode::cEgSingleLineNode"
    class ParsingFunc(HookFactory):
        _name = "cEgSingleLineNode::ParsingFunc"
    class FactoryFunc(HookFactory):
        _name = "cEgSingleLineNode::FactoryFunc"
    class EnqueueFunc(HookFactory):
        _name = "cEgSingleLineNode::EnqueueFunc"
    class Render(HookFactory):
        _name = "cEgSingleLineNode::Render"
    class Update(HookFactory):
        _name = "cEgSingleLineNode::Update"
    class SetParameterInt(HookFactory):
        _name = "cEgSingleLineNode::SetParameterInt"
    class SetParameterFloat(HookFactory):
        _name = "cEgSingleLineNode::SetParameterFloat"
    class UpdateLineBuffer(HookFactory):
        _name = "cEgSingleLineNode::UpdateLineBuffer"

class EgDynamicVertexExtension:
    class InitTerrainVertex(HookFactory):
        _name = "EgDynamicVertexExtension::InitTerrainVertex"
    class InitLineVertex(HookFactory):
        _name = "EgDynamicVertexExtension::InitLineVertex"
    class InitExtension(HookFactory):
        _name = "EgDynamicVertexExtension::InitExtension"

class findMapping(HookFactory):
    _name = "findMapping"

class findValidMapping(HookFactory):
    _name = "findValidMapping"

class parseMapping(HookFactory):
    _name = "parseMapping"

class glfwSetInputMode(HookFactory):
    _name = "glfwSetInputMode"

class glfwGetKeyName(HookFactory):
    _name = "glfwGetKeyName"

class glfwGetKey(HookFactory):
    _name = "glfwGetKey"

class glfwGetMouseButton(HookFactory):
    _name = "glfwGetMouseButton"

class glfwGetCursorPos(HookFactory):
    _name = "glfwGetCursorPos"

class glfwSetCursorPos(HookFactory):
    _name = "glfwSetCursorPos"

class glfwCreateStandardCursor(HookFactory):
    _name = "glfwCreateStandardCursor"

class glfwDestroyCursor(HookFactory):
    _name = "glfwDestroyCursor"

class glfwSetCursor(HookFactory):
    _name = "glfwSetCursor"

class glfwSetKeyCallback(HookFactory):
    _name = "glfwSetKeyCallback"

class glfwSetCharCallback(HookFactory):
    _name = "glfwSetCharCallback"

class glfwSetScrollCallback(HookFactory):
    _name = "glfwSetScrollCallback"

class glfwUpdateGamepadMappings(HookFactory):
    _name = "glfwUpdateGamepadMappings"

class glfwSwapInterval(HookFactory):
    _name = "glfwSwapInterval"

class glfwExtensionSupported(HookFactory):
    _name = "glfwExtensionSupported"

class terminate_0(HookFactory):
    _name = "terminate_0"

class glfwInit(HookFactory):
    _name = "glfwInit"

class glfwTerminate(HookFactory):
    _name = "glfwTerminate"

class compareVideoModes(HookFactory):
    _name = "compareVideoModes"

class refreshVideoModes(HookFactory):
    _name = "refreshVideoModes"

class glfwGetMonitors(HookFactory):
    _name = "glfwGetMonitors"

class glfwGetPrimaryMonitor(HookFactory):
    _name = "glfwGetPrimaryMonitor"

class glfwGetMonitorPos(HookFactory):
    _name = "glfwGetMonitorPos"

class glfwGetMonitorName(HookFactory):
    _name = "glfwGetMonitorName"

class glfwGetVideoModes(HookFactory):
    _name = "glfwGetVideoModes"

class glfwGetVideoMode(HookFactory):
    _name = "glfwGetVideoMode"

class glfwCreateWindow(HookFactory):
    _name = "glfwCreateWindow"

class glfwWindowHint(HookFactory):
    _name = "glfwWindowHint"

class glfwDestroyWindow(HookFactory):
    _name = "glfwDestroyWindow"

class glfwGetWindowPos(HookFactory):
    _name = "glfwGetWindowPos"

class glfwSetWindowPos(HookFactory):
    _name = "glfwSetWindowPos"

class glfwGetWindowSize(HookFactory):
    _name = "glfwGetWindowSize"

class glfwSetWindowSize(HookFactory):
    _name = "glfwSetWindowSize"

class glfwGetWindowAttrib(HookFactory):
    _name = "glfwGetWindowAttrib"

class glfwSetWindowMonitor(HookFactory):
    _name = "glfwSetWindowMonitor"

class glfwSetWindowCloseCallback(HookFactory):
    _name = "glfwSetWindowCloseCallback"

class glfwPollEvents(HookFactory):
    _name = "glfwPollEvents"

class glfwGetRequiredInstanceExtensions(HookFactory):
    _name = "glfwGetRequiredInstanceExtensions"

class glfwGetPhysicalDevicePresentationSupport(HookFactory):
    _name = "glfwGetPhysicalDevicePresentationSupport"

class glfwCreateWindowSurface(HookFactory):
    _name = "glfwCreateWindowSurface"

class monitorCallback(HookFactory):
    _name = "monitorCallback"

class createMonitor(HookFactory):
    _name = "createMonitor"

class CAkLFOCtx:
    class GetParamsPtr(HookFactory):
        _name = "CAkLFOCtx::GetParamsPtr"
    class CalcBufferNeeded(HookFactory):
        _name = "CAkLFOCtx::CalcBufferNeeded"
    class InitializeOutput(HookFactory):
        _name = "CAkLFOCtx::InitializeOutput"
    class SetParam(HookFactory):
        _name = "CAkLFOCtx::SetParam"
    class FillParams(HookFactory):
        _name = "CAkLFOCtx::FillParams"

class glfwGetMonitorAdapterName(HookFactory):
    _name = "glfwGetMonitorAdapterName"

class getWindowStyle(HookFactory):
    _name = "getWindowStyle"

class applyAspectRatio(HookFactory):
    _name = "applyAspectRatio"

class updateCursorImage(HookFactory):
    _name = "updateCursorImage"

class enableRawMouseMotion(HookFactory):
    _name = "enableRawMouseMotion"

class disableRawMouseMotion(HookFactory):
    _name = "disableRawMouseMotion"

class disableCursor(HookFactory):
    _name = "disableCursor"

class enableCursor(HookFactory):
    _name = "enableCursor"

class cursorInContentArea(HookFactory):
    _name = "cursorInContentArea"

class updateFramebufferTransparency(HookFactory):
    _name = "updateFramebufferTransparency"

class getKeyMods(HookFactory):
    _name = "getKeyMods"

class getAsyncKeyMods(HookFactory):
    _name = "getAsyncKeyMods"

class fitToMonitor(HookFactory):
    _name = "fitToMonitor"

class acquireMonitor(HookFactory):
    _name = "acquireMonitor"

class releaseMonitor(HookFactory):
    _name = "releaseMonitor"

class windowProc(HookFactory):
    _name = "windowProc"

class createNativeWindow(HookFactory):
    _name = "createNativeWindow"

class glfwGetWin32Window(HookFactory):
    _name = "glfwGetWin32Window"

class compareJoystickObjects(HookFactory):
    _name = "compareJoystickObjects"

class closeJoystick(HookFactory):
    _name = "closeJoystick"

class deviceObjectCallback(HookFactory):
    _name = "deviceObjectCallback"

class deviceCallback(HookFactory):
    _name = "deviceCallback"

class loadLibraries(HookFactory):
    _name = "loadLibraries"

class createKeyTables(HookFactory):
    _name = "createKeyTables"

class findPixelFormatAttribValue(HookFactory):
    _name = "findPixelFormatAttribValue"

class choosePixelFormat(HookFactory):
    _name = "choosePixelFormat"

class makeContextCurrentWGL(HookFactory):
    _name = "makeContextCurrentWGL"

class swapBuffersWGL(HookFactory):
    _name = "swapBuffersWGL"

class swapIntervalWGL(HookFactory):
    _name = "swapIntervalWGL"

class extensionSupportedWGL(HookFactory):
    _name = "extensionSupportedWGL"

class getProcAddressWGL(HookFactory):
    _name = "getProcAddressWGL"

class destroyContextWGL(HookFactory):
    _name = "destroyContextWGL"

class getEGLErrorString(HookFactory):
    _name = "getEGLErrorString"

class chooseEGLConfig(HookFactory):
    _name = "chooseEGLConfig"

class makeContextCurrentEGL(HookFactory):
    _name = "makeContextCurrentEGL"

class swapBuffersEGL(HookFactory):
    _name = "swapBuffersEGL"

class swapIntervalEGL(HookFactory):
    _name = "swapIntervalEGL"

class extensionSupportedEGL(HookFactory):
    _name = "extensionSupportedEGL"

class getProcAddressEGL(HookFactory):
    _name = "getProcAddressEGL"

class destroyContextEGL(HookFactory):
    _name = "destroyContextEGL"

class makeContextCurrentOSMesa(HookFactory):
    _name = "makeContextCurrentOSMesa"

class getProcAddressOSMesa(HookFactory):
    _name = "getProcAddressOSMesa"

class destroyContextOSMesa(HookFactory):
    _name = "destroyContextOSMesa"

class stbi_image_free(HookFactory):
    _name = "stbi_image_free"

class stbi_load_from_memory(HookFactory):
    _name = "stbi_load_from_memory"

class stbi_loadf_from_memory(HookFactory):
    _name = "stbi_loadf_from_memory"

class stbi_is_hdr_from_memory(HookFactory):
    _name = "stbi_is_hdr_from_memory"

class get8(HookFactory):
    _name = "get8"

class get8u(HookFactory):
    _name = "get8u"

class skip(HookFactory):
    _name = "skip"

class get16(HookFactory):
    _name = "get16"

class get16le(HookFactory):
    _name = "get16le"

class getn(HookFactory):
    _name = "getn"

class convert_format(HookFactory):
    _name = "convert_format"

class ldr_to_hdr(HookFactory):
    _name = "ldr_to_hdr"

class hdr_to_ldr(HookFactory):
    _name = "hdr_to_ldr"

class build_huffman(HookFactory):
    _name = "build_huffman"

class grow_buffer_unsafe(HookFactory):
    _name = "grow_buffer_unsafe"

class decode_block(HookFactory):
    _name = "decode_block"

class idct_block(HookFactory):
    _name = "idct_block"

class get_marker(HookFactory):
    _name = "get_marker"

class parse_entropy_coded_data(HookFactory):
    _name = "parse_entropy_coded_data"

class process_marker(HookFactory):
    _name = "process_marker"

class process_scan_header(HookFactory):
    _name = "process_scan_header"

class process_frame_header(HookFactory):
    _name = "process_frame_header"

class decode_jpeg_header(HookFactory):
    _name = "decode_jpeg_header"

class resample_v_2(HookFactory):
    _name = "resample_v_2"

class resample_hv_2(HookFactory):
    _name = "resample_hv_2"

class cleanup_jpeg(HookFactory):
    _name = "cleanup_jpeg"

class load_jpeg_image(HookFactory):
    _name = "load_jpeg_image"

class fill_bits(HookFactory):
    _name = "fill_bits"

class expand(HookFactory):
    _name = "expand"

class parse_huffman_block(HookFactory):
    _name = "parse_huffman_block"

class compute_huffman_codes(HookFactory):
    _name = "compute_huffman_codes"

class parse_zlib(HookFactory):
    _name = "parse_zlib"

class create_png_image(HookFactory):
    _name = "create_png_image"

class parse_png_file(HookFactory):
    _name = "parse_png_file"

class do_png(HookFactory):
    _name = "do_png"

class bmp_test(HookFactory):
    _name = "bmp_test"

class bmp_load(HookFactory):
    _name = "bmp_load"

class tga_test(HookFactory):
    _name = "tga_test"

class tga_load(HookFactory):
    _name = "tga_load"

class hdr_test(HookFactory):
    _name = "hdr_test"

class hdr_gettoken(HookFactory):
    _name = "hdr_gettoken"

class hdr_load(HookFactory):
    _name = "hdr_load"

class dds_test(HookFactory):
    _name = "dds_test"

class stbi_decode_DXT1_block(HookFactory):
    _name = "stbi_decode_DXT1_block"

class stbi_decode_DXT45_alpha_block(HookFactory):
    _name = "stbi_decode_DXT45_alpha_block"

class stbi_decode_DXT_color_block(HookFactory):
    _name = "stbi_decode_DXT_color_block"

class dds_load(HookFactory):
    _name = "dds_load"

class cTkNoiseVoxelTypeEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseVoxelTypeEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseVoxelTypeEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseVoxelTypeEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseVoxelTypeEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseVoxelTypeEnum::WriteToXMLNodeExplicit"

class cTkVoxelGeneratorData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVoxelGeneratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVoxelGeneratorData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cTkVoxelGeneratorData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cTkVoxelGeneratorData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cTkVoxelGeneratorData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkVoxelGeneratorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVoxelGeneratorData::WriteToXMLNodeExplicit"

class cTkVoxelGeneratorRegionData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVoxelGeneratorRegionData::WriteToXMLNodeExplicit"

class cTkVoxelGeneratorSettingsArray:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVoxelGeneratorSettingsArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVoxelGeneratorSettingsArray::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkVoxelGeneratorSettingsArray::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorSettingsArray::WriteToXMLNode"

class cTkVoxelGeneratorSettingsElement:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVoxelGeneratorSettingsElement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVoxelGeneratorSettingsElement::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkVoxelGeneratorSettingsElement::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorSettingsElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVoxelGeneratorSettingsElement::WriteToXMLNodeExplicit"

class cTkVoxelGeneratorSettingsTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVoxelGeneratorSettingsTypes::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorSettingsTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVoxelGeneratorSettingsTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVoxelGeneratorSettingsTypes::WriteToXMLNodeExplicit"

class cGcFrigateFlybyType:
    class SetDefaults(HookFactory):
        _name = "cGcFrigateFlybyType::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateFlybyType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateFlybyType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateFlybyType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateFlybyType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateFlybyType::WriteToXMLNodeExplicit"

class cTkCavesEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCavesEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCavesEnum::WriteToXMLNode"

class cTkFeaturesEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkFeaturesEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkFeaturesEnum::WriteToXMLNode"

class cTkGridLayersEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGridLayersEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGridLayersEnum::WriteToXMLNode"

class cTkNoiseCaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseCaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNoiseCaveData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cTkNoiseCaveData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cTkNoiseCaveData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseCaveData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseCaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseCaveData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseCaveData::WriteToXMLNode"

class cTkNoiseFlattenFixedPosition:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseFlattenFixedPosition::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseFlattenFixedPosition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseFlattenFixedPosition::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseFlattenFixedPosition::WriteToXMLNode"

class cTkNoiseFlattenOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseFlattenOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseFlattenOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseFlattenOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseFlattenOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseFlattenOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseFlattenOptions::WriteToXMLNodeExplicit"

class cTkNoiseFlattenPoint:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseFlattenPoint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseFlattenPoint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseFlattenPoint::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNoiseFlattenPoint::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseFlattenPoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseFlattenPoint::WriteToXMLNodeExplicit"

class cTkNoiseLayerData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseLayerData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseLayerData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseLayerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseLayerData::WriteToXMLNodeExplicit"

class cTkNoiseLayersEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseLayersEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseLayersEnum::WriteToXMLNode"

class cTkNoiseOffsetEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseOffsetEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseOffsetEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseOffsetEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseOffsetEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseOffsetEnum::WriteToXMLNodeExplicit"

class cTkNoiseSuperFormulaData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseSuperFormulaData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseSuperFormulaData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseSuperFormulaData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseSuperFormulaData::WriteToXMLNodeExplicit"

class cTkNoiseSuperPrimitiveData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseSuperPrimitiveData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseSuperPrimitiveData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseSuperPrimitiveData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseSuperPrimitiveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseSuperPrimitiveData::WriteToXMLNodeExplicit"

class cTkNoiseUberData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNoiseUberData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNoiseUberData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNoiseUberData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNoiseUberData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNoiseUberData::WriteToXMLNodeExplicit"

class cTkActionButtonLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkActionButtonLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkActionButtonLookup::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkActionButtonLookup::WriteToXMLNode"

class cTkActionButtonMap:
    class ClassPointerCreate(HookFactory):
        _name = "cTkActionButtonMap::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkActionButtonMap::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkActionButtonMap::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkActionButtonMap::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkActionButtonMap::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkActionButtonMap::WriteToXMLNodeExplicit"

class cTkAxisImageLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAxisImageLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAxisImageLookup::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkAxisImageLookup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkAxisImageLookup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAxisImageLookup::WriteToXMLNode"

class cTkAxisPathMapping:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAxisPathMapping::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAxisPathMapping::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAxisPathMapping::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAxisPathMapping::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkAxisPathMapping::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAxisPathMapping::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAxisPathMapping::WriteToXMLNodeExplicit"

class cTkButtonImageLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkButtonImageLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkButtonImageLookup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkButtonImageLookup::FixDown"
    class GenerateHash(HookFactory):
        _name = "cTkButtonImageLookup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkButtonImageLookup::WriteToXMLNode"

class cTkButtonPathMapping:
    class ClassPointerCreate(HookFactory):
        _name = "cTkButtonPathMapping::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkButtonPathMapping::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkButtonPathMapping::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkButtonPathMapping::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkButtonPathMapping::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkButtonPathMapping::WriteToXMLNodeExplicit"

class cTkChordPathMapping:
    class ClassPointerCreate(HookFactory):
        _name = "cTkChordPathMapping::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkChordPathMapping::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkChordPathMapping::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkChordPathMapping::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkChordPathMapping::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkChordPathMapping::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkChordPathMapping::WriteToXMLNodeExplicit"

class cTkChordsImageLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkChordsImageLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkChordsImageLookup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkChordsImageLookup::FixDown"
    class FixUp(HookFactory):
        _name = "cTkChordsImageLookup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkChordsImageLookup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkChordsImageLookup::WriteToXMLNode"

class cTkControllerButtonLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkControllerButtonLookup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkControllerButtonLookup::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkControllerButtonLookup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkControllerButtonLookup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkControllerButtonLookup::WriteToXMLNodeExplicit"

class cTkControllerList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkControllerList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkControllerList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkControllerList::WriteToXMLNode"

class cTkControllerSpecification:
    class ClassPointerCreate(HookFactory):
        _name = "cTkControllerSpecification::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkControllerSpecification::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkControllerSpecification::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkControllerSpecification::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkControllerSpecification::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkControllerSpecification::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkControllerSpecification::WriteToXMLNodeExplicit"

class cTkInputValidation:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputValidation::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputValidation::WriteToXMLNode"

class cTkOpenVRControllerList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkOpenVRControllerList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkOpenVRControllerList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkOpenVRControllerList::WriteToXMLNode"

class cTkOpenVRControllerLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cTkOpenVRControllerLookup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkOpenVRControllerLookup::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkOpenVRControllerLookup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkOpenVRControllerLookup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkOpenVRControllerLookup::WriteToXMLNodeExplicit"

class cTkPlatformButtonPair:
    class ClassPointerCreate(HookFactory):
        _name = "cTkPlatformButtonPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkPlatformButtonPair::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkPlatformButtonPair::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPlatformButtonPair::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkPlatformButtonPair::WriteToXMLNodeExplicit"

class cTkTriggerFeedbackData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTriggerFeedbackData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkTriggerFeedbackData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkTriggerFeedbackData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTriggerFeedbackData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkTriggerFeedbackData::WriteToXMLNodeExplicit"

class cGcHeavyAirList:
    class FixUp(HookFactory):
        _name = "cGcHeavyAirList::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHeavyAirList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHeavyAirList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHeavyAirList::WriteToXMLNode"

class cTkRandomComponentData:
    class Cast(HookFactory):
        _name = "cTkRandomComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkRandomComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkRandomComponentData::WriteToXMLNode"

class cGcInputActionMapping2:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputActionMapping2::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInputActionMapping2::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInputActionMapping2::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInputActionMapping2::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputActionMapping2::WriteToXMLNode"

class cGcInputActionMapping:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputActionMapping::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInputActionMapping::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInputActionMapping::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInputActionMapping::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputActionMapping::WriteToXMLNode"

class cGcInputActions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputActions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInputActions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInputActions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputActions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInputActions::WriteToXMLNodeExplicit"

class cTkImGuiData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkImGuiData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkImGuiData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkImGuiData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkImGuiData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkImGuiData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkImGuiData::WriteToXMLNodeExplicit"

class cTkImGuiSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkImGuiSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkImGuiSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkImGuiSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkImGuiSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkImGuiSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkImGuiSettings::WriteToXMLNodeExplicit"

class cTkImGuiWindowData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkImGuiWindowData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkImGuiWindowData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkImGuiWindowData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkImGuiWindowData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkImGuiWindowData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkImGuiWindowData::WriteToXMLNodeExplicit"

class cTkPostProcessData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkPostProcessData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkPostProcessData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPostProcessData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkPostProcessData::WriteToXMLNodeExplicit"

class cTkSpeedLineData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSpeedLineData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkSpeedLineData::GenerateHash"
    class Save(HookFactory):
        _name = "cTkSpeedLineData::Save"
    class SetDefaults(HookFactory):
        _name = "cTkSpeedLineData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSpeedLineData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSpeedLineData::WriteToXMLNodeExplicit"

class cTkTrailData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTrailData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkTrailData::GenerateHash"
    class Save(HookFactory):
        _name = "cTkTrailData::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTrailData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkTrailData::WriteToXMLNodeExplicit"

class cTkLSystemRuleTemplate:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemRuleTemplate::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemRuleTemplate::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemRuleTemplate::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemRuleTemplate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLSystemRuleTemplate::WriteToXMLNodeExplicit"

class cTkLSystemRulesData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemRulesData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLSystemRulesData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkLSystemRulesData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemRulesData::WriteToXMLNode"

class cTkMagicModelData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMagicModelData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMagicModelData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkMagicModelData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cTkMagicModelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMagicModelData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMagicModelData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMagicModelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMagicModelData::WriteToXMLNodeExplicit"

class cTkMaterialMetaData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialMetaData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMaterialMetaData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialMetaData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialMetaData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialMetaData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialMetaData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialMetaData::WriteToXMLNodeExplicit"

class cTkParticleBurstData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkParticleBurstData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkParticleBurstData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkParticleBurstData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkParticleBurstData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkParticleBurstData::WriteToXMLNodeExplicit"

class cTkParticleData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkParticleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkParticleData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkParticleData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkParticleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkParticleData::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cTkParticleData::Save"
    class SetDefaults(HookFactory):
        _name = "cTkParticleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkParticleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkParticleData::WriteToXMLNodeExplicit"

class cTkCoordinateOrientation:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCoordinateOrientation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkCoordinateOrientation::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkCoordinateOrientation::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCoordinateOrientation::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCoordinateOrientation::WriteToXMLNodeExplicit"

class cTkEmitFromParticleInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEmitFromParticleInfo::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkEmitFromParticleInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkEmitFromParticleInfo::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEmitFromParticleInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkEmitFromParticleInfo::WriteToXMLNodeExplicit"

class cTkEmitterData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEmitterData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEmitterData::WriteToXMLNode"

class cTkEmitterFloatProperty:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEmitterFloatProperty::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkEmitterFloatProperty::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkEmitterFloatProperty::FixDown"
    class FixUp(HookFactory):
        _name = "cTkEmitterFloatProperty::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkEmitterFloatProperty::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkEmitterFloatProperty::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkEmitterFloatProperty::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEmitterFloatProperty::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkEmitterFloatProperty::WriteToXMLNodeExplicit"

class cTkFoliageData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkFoliageData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkFoliageData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkFoliageData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkFoliageData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkFoliageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkFoliageData::WriteToXMLNodeExplicit"

class cTkHeavyAirCollection:
    class ClassPointerCreate(HookFactory):
        _name = "cTkHeavyAirCollection::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkHeavyAirCollection::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkHeavyAirCollection::WriteToXMLNode"

class cTkHeavyAirData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkHeavyAirData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkHeavyAirData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkHeavyAirData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkHeavyAirData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkHeavyAirData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkHeavyAirData::WriteToXMLNodeExplicit"

class cTkHeavyAirSystem:
    class ClassPointerCreate(HookFactory):
        _name = "cTkHeavyAirSystem::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkHeavyAirSystem::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkHeavyAirSystem::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkHeavyAirSystem::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkHeavyAirSystem::WriteToXMLNodeExplicit"

class cTkIdSceneFilename:
    class ClassPointerCreate(HookFactory):
        _name = "cTkIdSceneFilename::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkIdSceneFilename::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkIdSceneFilename::WriteToXMLNode"

class cTkInputAxisEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputAxisEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInputAxisEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkInputAxisEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputAxisEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInputAxisEnum::WriteToXMLNodeExplicit"

class cTkInputEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInputEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkInputEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInputEnum::WriteToXMLNodeExplicit"

class cTkInputFrame:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputFrame::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInputFrame::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkInputFrame::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputFrame::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInputFrame::WriteToXMLNodeExplicit"

class cTkInputFrameArray:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputFrameArray::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputFrameArray::WriteToXMLNode"

class cTkInputHandEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInputHandEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInputHandEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkInputHandEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInputHandEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInputHandEnum::WriteToXMLNodeExplicit"

class cTkLSystemGlobalRestriction:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemGlobalRestriction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLSystemGlobalRestriction::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkLSystemGlobalRestriction::FixDown"
    class FixUp(HookFactory):
        _name = "cTkLSystemGlobalRestriction::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemGlobalRestriction::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLSystemGlobalRestriction::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemGlobalRestriction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemGlobalRestriction::WriteToXMLNode"

class cTkLSystemGlobalVariation:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemGlobalVariation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemGlobalVariation::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLSystemGlobalVariation::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemGlobalVariation::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemGlobalVariation::WriteToXMLNode"

class cTkLSystemInnerRule:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemInnerRule::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLSystemInnerRule::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkLSystemInnerRule::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemInnerRule::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLSystemInnerRule::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemInnerRule::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemInnerRule::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLSystemInnerRule::WriteToXMLNodeExplicit"

class cTkLSystemLocatorEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemLocatorEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLSystemLocatorEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemLocatorEntry::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemLocatorEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemLocatorEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLSystemLocatorEntry::WriteToXMLNodeExplicit"

class cTkLSystemRestrictionData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemRestrictionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemRestrictionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLSystemRestrictionData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemRestrictionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLSystemRestrictionData::WriteToXMLNodeExplicit"

class cTkLSystemRule:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLSystemRule::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLSystemRule::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkLSystemRule::FixDown"
    class FixUp(HookFactory):
        _name = "cTkLSystemRule::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkLSystemRule::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLSystemRule::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLSystemRule::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLSystemRule::WriteToXMLNode"

class cGcAtlasSendSubmitContribution:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasSendSubmitContribution::WriteToXMLNodeExplicit"

class cGcMissionSequenceExplorationLogSpecial:
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceExplorationLogSpecial::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceExplorationLogSpecial::WriteToXMLNode"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceExplorationLogSpecial::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceExplorationLogSpecial::ClassPointerCreate"

class cTkPaletteTexture:
    class ClassPointerCreate(HookFactory):
        _name = "cTkPaletteTexture::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkPaletteTexture::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkPaletteTexture::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkPaletteTexture::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkPaletteTexture::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cTkPaletteTexture::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPaletteTexture::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkPaletteTexture::WriteToXMLNodeExplicit"

class cTkProbability:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProbability::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProbability::WriteToXMLNode"

class cTkProceduralTexture:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTexture::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralTexture::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkProceduralTexture::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkProceduralTexture::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTexture::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkProceduralTexture::WriteToXMLNodeExplicit"

class cTkProceduralTextureChosenOption:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTextureChosenOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralTextureChosenOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkProceduralTextureChosenOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkProceduralTextureChosenOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkProceduralTextureChosenOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTextureChosenOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkProceduralTextureChosenOption::WriteToXMLNodeExplicit"

class cTkProceduralTextureChosenOptionSampler:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::ReadFromDocument"
    class WriteToDocument(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTextureChosenOptionSampler::WriteToXMLNode"

class cTkProceduralTextureLayer:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTextureLayer::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralTextureLayer::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralTextureLayer::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkProceduralTextureLayer::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTextureLayer::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkProceduralTextureLayer::WriteToXMLNodeExplicit"

class cTkProceduralTextureList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralTextureList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralTextureList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkProceduralTextureList::FixUp"
    class SetDefaults(HookFactory):
        _name = "cTkProceduralTextureList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralTextureList::WriteToXMLNode"

class cTkRawID:
    class ClassPointerCreate(HookFactory):
        _name = "cTkRawID::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkRawID::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkRawID::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkRawID::WriteToXMLNode"

class cTkSketchConditions:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSketchConditions::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSketchConditions::WriteToXMLNode"

class cTkSketchNodeConnections:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSketchNodeConnections::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkSketchNodeConnections::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkSketchNodeConnections::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSketchNodeConnections::WriteToXMLNode"

class cTkSketchNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSketchNodeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkSketchNodeData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkSketchNodeData::FixDown"
    class FixUp(HookFactory):
        _name = "cTkSketchNodeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkSketchNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkSketchNodeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkSketchNodeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSketchNodeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSketchNodeData::WriteToXMLNodeExplicit"

class cTkTrophyData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTrophyData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkTrophyData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTrophyData::WriteToXMLNode"

class cTkTrophyEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTrophyEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkTrophyEntry::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkTrophyEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTrophyEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkTrophyEntry::WriteToXMLNodeExplicit"

class cTkTrophyEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTrophyEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTrophyEnum::WriteToXMLNode"

class cTkMaterialResource:
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialResource::WriteToXMLNode"
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialResource::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialResource::GenerateHash"

class cGcSelectableObjectData:
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSelectableObjectData::WriteToXMLNodeExplicit"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSelectableObjectData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSelectableObjectData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSelectableObjectData::WriteToXMLNode"

class cTkLocalisationEntry:
    class cTkLocalisationEntry(HookFactory):
        _name = "cTkLocalisationEntry::cTkLocalisationEntry"
    class ClassPointerCreate(HookFactory):
        _name = "cTkLocalisationEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLocalisationEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkLocalisationEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cTkLocalisationEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkLocalisationEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLocalisationEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLocalisationEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLocalisationEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLocalisationEntry::WriteToXMLNodeExplicit"

class cTkBoundingBoxData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBoundingBoxData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBoundingBoxData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBoundingBoxData::WriteToXMLNode"

class cTkCameraWanderData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCameraWanderData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkCameraWanderData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCameraWanderData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCameraWanderData::WriteToXMLNodeExplicit"

class cTkEqualityEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEqualityEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkEqualityEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkEqualityEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEqualityEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkEqualityEnum::WriteToXMLNodeExplicit"

class cTkFloatRange:
    class ClassPointerCreate(HookFactory):
        _name = "cTkFloatRange::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkFloatRange::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkFloatRange::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkFloatRange::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkFloatRange::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkFloatRange::WriteToXMLNodeExplicit"

class cTkGlobals:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGlobals::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkGlobals::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGlobals::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkGlobals::WriteToXMLNodeExplicit"

class cTkIdArray:
    class ClassPointerCreate(HookFactory):
        _name = "cTkIdArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkIdArray::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkIdArray::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkIdArray::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkIdArray::WriteToXMLNode"

class cTkInteractiveControlData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInteractiveControlData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInteractiveControlData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkInteractiveControlData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInteractiveControlData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInteractiveControlData::WriteToXMLNodeExplicit"

class cTkInteractiveSceneData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInteractiveSceneData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkInteractiveSceneData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkInteractiveSceneData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkInteractiveSceneData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInteractiveSceneData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInteractiveSceneData::WriteToXMLNodeExplicit"

class cTkInteractivityData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInteractivityData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkInteractivityData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInteractivityData::WriteToXMLNode"

class cTkLODModelResource:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLODModelResource::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLODModelResource::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkLODModelResource::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLODModelResource::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLODModelResource::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLODModelResource::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLODModelResource::WriteToXMLNodeExplicit"

class cTkLanguageFontTable:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLanguageFontTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLanguageFontTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLanguageFontTable::WriteToXMLNode"

class cTkLanguageFontTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLanguageFontTableEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLanguageFontTableEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLanguageFontTableEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLanguageFontTableEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLanguageFontTableEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLanguageFontTableEntry::WriteToXMLNodeExplicit"

class cTkLanguages:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLanguages::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLanguages::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cTkLanguages::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLanguages::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cTkLanguages::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLanguages::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLanguages::WriteToXMLNodeExplicit"

class cTkLanguagesAllowedData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLanguagesAllowedData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLanguagesAllowedData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLanguagesAllowedData::WriteToXMLNode"

class cTkLocalisationTable:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLocalisationTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLocalisationTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkLocalisationTable::FixDown"
    class FixUp(HookFactory):
        _name = "cTkLocalisationTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLocalisationTable::WriteToXMLNode"

class cTkMetadataFilenameList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMetadataFilenameList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMetadataFilenameList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMetadataFilenameList::WriteToXMLNode"

class cTkMetadataReadMask:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMetadataReadMask::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMetadataReadMask::WriteToXMLNode"

class cTkModelRendererCameraData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkModelRendererCameraData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkModelRendererCameraData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkModelRendererCameraData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkModelRendererCameraData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkModelRendererCameraData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkModelRendererCameraData::WriteToXMLNodeExplicit"

class cTkModelRendererData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkModelRendererData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkModelRendererData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkModelRendererData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkModelRendererData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkModelRendererData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkModelRendererData::WriteToXMLNodeExplicit"

class cTkUserServiceAuthProvider:
    class ClassPointerCreate(HookFactory):
        _name = "cTkUserServiceAuthProvider::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkUserServiceAuthProvider::WriteToXMLNode"

class cTkBehaviourTreeConcurrentSelectorData:
    class Cast(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelectorData::WriteToXMLNodeExplicit"

class cTkBehaviourTreeSequentialSelectorData:
    class Cast(HookFactory):
        _name = "cTkBehaviourTreeSequentialSelectorData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBehaviourTreeSequentialSelectorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkBehaviourTreeSequentialSelectorData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkBehaviourTreeSequentialSelectorData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBehaviourTreeSequentialSelectorData::WriteToXMLNode"

class cTkBehaviourTreeSucceedDecoratorData:
    class Cast(HookFactory):
        _name = "cTkBehaviourTreeSucceedDecoratorData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBehaviourTreeSucceedDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkBehaviourTreeSucceedDecoratorData::ClassPointerFix"

class cTkBlackboardValueBool:
    class Cast(HookFactory):
        _name = "cTkBlackboardValueBool::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardValueBool::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardValueBool::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardValueBool::WriteToXMLNode"

class cTkBlackboardValueFloat:
    class Cast(HookFactory):
        _name = "cTkBlackboardValueFloat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardValueFloat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardValueFloat::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardValueFloat::WriteToXMLNode"

class cTkBlackboardValueId:
    class Cast(HookFactory):
        _name = "cTkBlackboardValueId::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardValueId::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardValueId::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardValueId::WriteToXMLNode"

class cTkBlackboardValueInteger:
    class Cast(HookFactory):
        _name = "cTkBlackboardValueInteger::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardValueInteger::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardValueInteger::WriteToXMLNode"

class cTkBlackboardValueVector:
    class Cast(HookFactory):
        _name = "cTkBlackboardValueVector::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardValueVector::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardValueVector::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardValueVector::WriteToXMLNode"

class cTkBehaviourTreePriorityDecoratorData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBehaviourTreePriorityDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkBehaviourTreePriorityDecoratorData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBehaviourTreePriorityDecoratorData::WriteToXMLNode"

class cTkBlackboardCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardCategory::WriteToXMLNodeExplicit"

class cTkBlackboardComparisonTypeEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardComparisonTypeEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardComparisonTypeEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardComparisonTypeEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardComparisonTypeEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardComparisonTypeEnum::WriteToXMLNodeExplicit"

class cTkBlackboardDefaultValueBool:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardDefaultValueBool::WriteToXMLNodeExplicit"

class cTkBlackboardDefaultValueFloat:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardDefaultValueFloat::WriteToXMLNodeExplicit"

class cTkBlackboardDefaultValueId:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardDefaultValueId::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardDefaultValueId::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueId::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkBlackboardDefaultValueId::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueId::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardDefaultValueId::WriteToXMLNodeExplicit"

class cTkBlackboardDefaultValueInteger:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardDefaultValueInteger::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardDefaultValueInteger::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueInteger::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueInteger::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardDefaultValueInteger::WriteToXMLNodeExplicit"

class cTkBlackboardDefaultValueVector:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardDefaultValueVector::WriteToXMLNodeExplicit"

class cTkBlackboardKey:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardKey::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkBlackboardKey::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkBlackboardKey::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkBlackboardKey::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardKey::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkBlackboardKey::WriteToXMLNodeExplicit"

class cTkBlackboardType:
    class ClassPointerCreate(HookFactory):
        _name = "cTkBlackboardType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkBlackboardType::WriteToXMLNode"

class cTkPhysRelVectorData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkPhysRelVectorData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkPhysRelVectorData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkPhysRelVectorData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkPhysRelVectorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPhysRelVectorData::WriteToXMLNode"

class cTkSceneBoneRemapping:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSceneBoneRemapping::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkSceneBoneRemapping::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkSceneBoneRemapping::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSceneBoneRemapping::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSceneBoneRemapping::WriteToXMLNodeExplicit"

class cTkSceneBoneRemappingTable:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSceneBoneRemappingTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkSceneBoneRemappingTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSceneBoneRemappingTable::WriteToXMLNode"

class cTkSceneNodeAttributeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSceneNodeAttributeData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkSceneNodeAttributeData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkSceneNodeAttributeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSceneNodeAttributeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSceneNodeAttributeData::WriteToXMLNodeExplicit"

class cTkSceneNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkSceneNodeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkSceneNodeData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkSceneNodeData::FixDown"
    class FixUp(HookFactory):
        _name = "cTkSceneNodeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkSceneNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkSceneNodeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkSceneNodeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSceneNodeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSceneNodeData::WriteToXMLNodeExplicit"

class cTkTransformData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkTransformData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkTransformData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkTransformData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkTransformData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkTransformData::WriteToXMLNodeExplicit"

class cTkMaterialAlternative:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialAlternative::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialAlternative::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialAlternative::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialAlternative::WriteToXMLNode"

class cTkMaterialData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMaterialData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkMaterialData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialData::WriteToXMLNodeExplicit"

class cTkMaterialFlags:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialFlags::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialFlags::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialFlags::ReadFromXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialFlags::WriteToXMLNodeExplicit"

class cTkMaterialSampler:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialSampler::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialSampler::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialSampler::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialSampler::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialSampler::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialSampler::WriteToXMLNodeExplicit"

class cTkMaterialShaderMillComment:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillComment::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillComment::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillComment::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialShaderMillComment::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialShaderMillComment::WriteToXMLNodeExplicit"

class cTkMaterialShaderMillConnect:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillConnect::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillConnect::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialShaderMillConnect::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialShaderMillConnect::WriteToXMLNodeExplicit"

class cTkMaterialShaderMillData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMaterialShaderMillData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkMaterialShaderMillData::FixDown"
    class FixUp(HookFactory):
        _name = "cTkMaterialShaderMillData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialShaderMillData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialShaderMillData::WriteToXMLNodeExplicit"

class cTkMaterialShaderMillFlag:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillFlag::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillFlag::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillFlag::WriteToXMLNode"

class cTkMaterialShaderMillLink:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillLink::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillLink::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillLink::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialShaderMillLink::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillLink::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialShaderMillLink::WriteToXMLNodeExplicit"

class cTkMaterialShaderMillNode:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMaterialShaderMillNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMaterialShaderMillNode::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkMaterialShaderMillNode::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillNode::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMaterialShaderMillNode::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMaterialShaderMillNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMaterialShaderMillNode::WriteToXMLNodeExplicit"

class cTkVertexLayout:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVertexLayout::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVertexLayout::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkVertexLayout::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVertexLayout::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVertexLayout::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVertexLayout::WriteToXMLNodeExplicit"

class cTkVertexStream:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVertexStream::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkVertexStream::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVertexStream::WriteToXMLNode"

class cGcSubstanceSecondaryLookup:
    class FixDown(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceSecondaryLookup::WriteToXMLNode"

class cTkRagdollData:
    class Cast(HookFactory):
        _name = "cTkRagdollData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkRagdollData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkRagdollData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkRagdollData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkRagdollData::WriteToXMLNode"

class cTkAnimCompactMetadata:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimCompactMetadata::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimCompactMetadata::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimCompactMetadata::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimCompactMetadata::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimCompactMetadata::WriteToXMLNodeExplicit"

class cTkAnimMetadata:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimMetadata::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimMetadata::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkAnimMetadata::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkAnimMetadata::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimMetadata::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimMetadata::WriteToXMLNodeExplicit"

class cTkAnimNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimNodeData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAnimNodeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkAnimNodeData::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimNodeData::WriteToXMLNodeExplicit"

class cTkAnimNodeFrameData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimNodeFrameData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimNodeFrameData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimNodeFrameData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimNodeFrameData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimNodeFrameData::WriteToXMLNodeExplicit"

class cTkAnimNodeFrameHalfData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimNodeFrameHalfData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimNodeFrameHalfData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimNodeFrameHalfData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimNodeFrameHalfData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimNodeFrameHalfData::WriteToXMLNodeExplicit"

class cTkGeometryData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGeometryData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkGeometryData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkGeometryData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkGeometryData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGeometryData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGeometryData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkGeometryData::WriteToXMLNodeExplicit"

class cTkGeometryStreamData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGeometryStreamData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkGeometryStreamData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkGeometryStreamData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGeometryStreamData::WriteToXMLNode"

class cTkIndexStream:
    class ClassPointerCreate(HookFactory):
        _name = "cTkIndexStream::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkIndexStream::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkIndexStream::WriteToXMLNode"

class cTkJointBindingData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkJointBindingData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkJointBindingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkJointBindingData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkJointBindingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkJointBindingData::WriteToXMLNodeExplicit"

class cTkJointExtentData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkJointExtentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkJointExtentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkJointExtentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkJointExtentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkJointExtentData::WriteToXMLNodeExplicit"

class cTkJointMirrorAxis:
    class ClassPointerCreate(HookFactory):
        _name = "cTkJointMirrorAxis::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkJointMirrorAxis::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkJointMirrorAxis::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkJointMirrorAxis::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkJointMirrorAxis::WriteToXMLNodeExplicit"

class cTkMeshData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMeshData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkMeshData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkMeshData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMeshData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMeshData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkMeshData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMeshData::WriteToXMLNodeExplicit"

class cTkMeshMetaData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkMeshMetaData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkMeshMetaData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkMeshMetaData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkMeshMetaData::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkMeshMetaData::WriteToXMLNodeExplicit"

class cTkPhysicsData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkPhysicsData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkPhysicsData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkPhysicsData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkPhysicsData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPhysicsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkPhysicsData::WriteToXMLNodeExplicit"

class cTkVertexElement:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVertexElement::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkVertexElement::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVertexElement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkVertexElement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVertexElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVertexElement::WriteToXMLNodeExplicit"

class cTKNGuiEditorComponentSize:
    class ClassPointerCreate(HookFactory):
        _name = "cTKNGuiEditorComponentSize::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTKNGuiEditorComponentSize::WriteToXMLNode"

class cTKNGuiEditorTextType:
    class ClassPointerCreate(HookFactory):
        _name = "cTKNGuiEditorTextType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTKNGuiEditorTextType::WriteToXMLNode"

class cTkEntitlementList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEntitlementList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkEntitlementList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEntitlementList::WriteToXMLNode"

class cTkNGuiAlignment:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiAlignment::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiAlignment::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiAlignment::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiAlignment::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiAlignment::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiAlignment::WriteToXMLNodeExplicit"

class cTkNGuiEditorGraphicType:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiEditorGraphicType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiEditorGraphicType::WriteToXMLNode"

class cTkNGuiEditorLayout:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiEditorLayout::ClassPointerCreate"
    class Save(HookFactory):
        _name = "cTkNGuiEditorLayout::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiEditorLayout::WriteToXMLNode"

class cTkNGuiEditorStyleColour:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiEditorStyleColour::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiEditorStyleColour::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiEditorStyleColour::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiEditorStyleColour::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiEditorStyleColour::WriteToXMLNodeExplicit"

class cTkNGuiEditorStyleData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiEditorStyleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNGuiEditorStyleData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiEditorStyleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiEditorStyleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiEditorStyleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiEditorStyleData::WriteToXMLNode"

class cTkNGuiForcedStyle:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiForcedStyle::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiForcedStyle::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiForcedStyle::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiForcedStyle::WriteToXMLNode"

class cTkNGuiGraphicStyleData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiGraphicStyleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiGraphicStyleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiGraphicStyleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiGraphicStyleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiGraphicStyleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiGraphicStyleData::WriteToXMLNodeExplicit"

class cTkNGuiLayoutList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiLayoutList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNGuiLayoutList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiLayoutList::WriteToXMLNode"

class cTkNGuiLayoutListData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiLayoutListData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiLayoutListData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiLayoutListData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiLayoutListData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiLayoutListData::WriteToXMLNodeExplicit"

class cTkNGuiRectanglePulseEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiRectanglePulseEffect::WriteToXMLNodeExplicit"

class cTkNGuiTextStyleData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiTextStyleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiTextStyleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiTextStyleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiTextStyleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiTextStyleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiTextStyleData::WriteToXMLNodeExplicit"

class cTkNGuiUserSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiUserSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiUserSettings::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiUserSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiUserSettings::WriteToXMLNode"

class cTkNGuiWindowLayoutData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkNGuiWindowLayoutData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkNGuiWindowLayoutData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkNGuiWindowLayoutData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkNGuiWindowLayoutData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNGuiWindowLayoutData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNGuiWindowLayoutData::WriteToXMLNodeExplicit"

class cGcWaterColourSettingList:
    class FixUp(HookFactory):
        _name = "cGcWaterColourSettingList::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWaterColourSettingList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWaterColourSettingList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWaterColourSettingList::WriteToXMLNode"

class cTkAnimDetailSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimDetailSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimDetailSettings::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimDetailSettings::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimDetailSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimDetailSettings::WriteToXMLNodeExplicit"

class cTkAnimDetailSettingsData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimDetailSettingsData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimDetailSettingsData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimDetailSettingsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimDetailSettingsData::WriteToXMLNodeExplicit"

class cTkAnimDetailSettingsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimDetailSettingsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimDetailSettingsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkAnimDetailSettingsTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimDetailSettingsTable::WriteToXMLNode"

class cTkDynamicResScalingSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkDynamicResScalingSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkDynamicResScalingSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkDynamicResScalingSettings::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkDynamicResScalingSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkDynamicResScalingSettings::WriteToXMLNodeExplicit"

class cTkEngineSettingTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEngineSettingTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEngineSettingTypes::WriteToXMLNode"

class cTkEngineSettingsMapping:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEngineSettingsMapping::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkEngineSettingsMapping::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkEngineSettingsMapping::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEngineSettingsMapping::WriteToXMLNode"

class cTkGameSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGameSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkGameSettings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkGameSettings::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGameSettings::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGameSettings::WriteToXMLNode"

class cTkGraphicsDetailPreset:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGraphicsDetailPreset::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkGraphicsDetailPreset::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGraphicsDetailPreset::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkGraphicsDetailPreset::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGraphicsDetailPreset::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkGraphicsDetailPreset::WriteToXMLNodeExplicit"

class cTkGraphicsDetailTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGraphicsDetailTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkGraphicsDetailTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGraphicsDetailTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGraphicsDetailTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkGraphicsDetailTypes::WriteToXMLNodeExplicit"

class cTkGraphicsSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cTkGraphicsSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkGraphicsSettings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkGraphicsSettings::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkGraphicsSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkGraphicsSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkGraphicsSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGraphicsSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkGraphicsSettings::WriteToXMLNodeExplicit"

class cTkLODDistances:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLODDistances::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLODDistances::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLODDistances::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLODDistances::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLODDistances::WriteToXMLNode"

class cTkLODSettingsData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkLODSettingsData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkLODSettingsData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkLODSettingsData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkLODSettingsData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLODSettingsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkLODSettingsData::WriteToXMLNodeExplicit"

class cGcWealthClass:
    class SetDefaults(HookFactory):
        _name = "cGcWealthClass::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWealthClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWealthClass::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcWealthClass::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWealthClass::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcWealthClass::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWealthClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWealthClass::WriteToXMLNodeExplicit"

class cTkGravityComponentData:
    class Cast(HookFactory):
        _name = "cTkGravityComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkGravityComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkGravityComponentData::WriteToXMLNode"

class cTkLODComponentData:
    class Cast(HookFactory):
        _name = "cTkLODComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkLODComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkLODComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkLODComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkLODComponentData::WriteToXMLNode"

class cTkModelDescriptorList:
    class Cast(HookFactory):
        _name = "cTkModelDescriptorList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkModelDescriptorList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkModelDescriptorList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkModelDescriptorList::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkModelDescriptorList::WriteToXMLNode"

class cTkProceduralModelComponentData:
    class Cast(HookFactory):
        _name = "cTkProceduralModelComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralModelComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralModelComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralModelComponentData::WriteToXMLNode"

class cTkReferenceComponentData:
    class Cast(HookFactory):
        _name = "cTkReferenceComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkReferenceComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cTkReferenceComponentData::WriteToXMLNode"

class cTkRotationComponentData:
    class Cast(HookFactory):
        _name = "cTkRotationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkRotationComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkRotationComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkRotationComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkRotationComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkRotationComponentData::WriteToXMLNodeExplicit"

class cTkSketchComponentData:
    class Cast(HookFactory):
        _name = "cTkSketchComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkSketchComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkSketchComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkSketchComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkSketchComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkSketchComponentData::WriteToXMLNodeExplicit"

class cTkProceduralInstance:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralInstance::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cTkProceduralInstance::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralInstance::WriteToXMLNode"

class cTkProceduralInstanceData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralInstanceData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralInstanceData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralInstanceData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkProceduralInstanceData::WriteToXMLNodeExplicit"

class cTkProceduralModelList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkProceduralModelList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkProceduralModelList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkProceduralModelList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkProceduralModelList::WriteToXMLNode"

class cTkResourceDescriptorData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkResourceDescriptorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkResourceDescriptorData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkResourceDescriptorData::FixDown"
    class FixUp(HookFactory):
        _name = "cTkResourceDescriptorData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkResourceDescriptorData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkResourceDescriptorData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkResourceDescriptorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkResourceDescriptorData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkResourceDescriptorData::WriteToXMLNodeExplicit"

class cTkResourceDescriptorList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkResourceDescriptorList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkResourceDescriptorList::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkResourceDescriptorList::FixDown"
    class FixUp(HookFactory):
        _name = "cTkResourceDescriptorList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cTkResourceDescriptorList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkResourceDescriptorList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkResourceDescriptorList::WriteToXMLNodeExplicit"

class cTkResourceFilterData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkResourceFilterData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkResourceFilterData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkResourceFilterData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkResourceFilterData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkResourceFilterData::WriteToXMLNodeExplicit"

class cTkResourceFilterList:
    class ClassPointerCreate(HookFactory):
        _name = "cTkResourceFilterList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkResourceFilterList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cTkResourceFilterList::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cTkResourceFilterList::WriteToXMLNode"

class cTkShearWindData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkShearWindData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkShearWindData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkShearWindData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkShearWindData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkShearWindData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkShearWindData::WriteToXMLNodeExplicit"

class cTkShearWindOctaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkShearWindOctaveData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkShearWindOctaveData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkShearWindOctaveData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkShearWindOctaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkShearWindOctaveData::WriteToXMLNodeExplicit"

class cTkAudioComponentData:
    class Cast(HookFactory):
        _name = "cTkAudioComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkAudioComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAudioComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAudioComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkAudioComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAudioComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAudioComponentData::WriteToXMLNodeExplicit"

class cTkCreatureTailComponentData:
    class Cast(HookFactory):
        _name = "cTkCreatureTailComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkCreatureTailComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkCreatureTailComponentData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cTkCreatureTailComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCreatureTailComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCreatureTailComponentData::WriteToXMLNodeExplicit"

class cTkDynamicChainComponentData:
    class Cast(HookFactory):
        _name = "cTkDynamicChainComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkDynamicChainComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkDynamicChainComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkDynamicChainComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkDynamicChainComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkDynamicChainComponentData::WriteToXMLNodeExplicit"

class cTkInstanceWindComponentData:
    class Cast(HookFactory):
        _name = "cTkInstanceWindComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkInstanceWindComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInstanceWindComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInstanceWindComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInstanceWindComponentData::WriteToXMLNodeExplicit"

class cTkNetReplicatedEntityComponentData:
    class Cast(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkNetReplicatedEntityComponentData::WriteToXMLNodeExplicit"

class cTkPhysicsComponentData:
    class Cast(HookFactory):
        _name = "cTkPhysicsComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkPhysicsComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkPhysicsComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkPhysicsComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkPhysicsComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkPhysicsComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkPhysicsComponentData::WriteToXMLNodeExplicit"

class cTkStaticPhysicsComponentData:
    class Cast(HookFactory):
        _name = "cTkStaticPhysicsComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkStaticPhysicsComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkStaticPhysicsComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkStaticPhysicsComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkStaticPhysicsComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkStaticPhysicsComponentData::WriteToXMLNodeExplicit"

class cTkAudioAnimTrigger:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAudioAnimTrigger::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAudioAnimTrigger::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkAudioAnimTrigger::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAudioAnimTrigger::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAudioAnimTrigger::WriteToXMLNodeExplicit"

class cTkCreatureTailJoints:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCreatureTailJoints::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkCreatureTailJoints::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkCreatureTailJoints::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkCreatureTailJoints::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCreatureTailJoints::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCreatureTailJoints::WriteToXMLNodeExplicit"

class cTkCreatureTailParams:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCreatureTailParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkCreatureTailParams::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkCreatureTailParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkCreatureTailParams::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCreatureTailParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCreatureTailParams::WriteToXMLNodeExplicit"

class cTkVolumeTriggerType:
    class ClassPointerCreate(HookFactory):
        _name = "cTkVolumeTriggerType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkVolumeTriggerType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkVolumeTriggerType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkVolumeTriggerType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkVolumeTriggerType::WriteToXMLNodeExplicit"

class cTkAnimPoseComponentData:
    class Cast(HookFactory):
        _name = "cTkAnimPoseComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimPoseComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkAnimPoseComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseComponentData::WriteToXMLNode"

class cTkAnimationComponentData:
    class Cast(HookFactory):
        _name = "cTkAnimationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimationComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimationComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimationComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimationComponentData::WriteToXMLNode"

class cTkAnimBlendTree:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimBlendTree::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimBlendTree::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimBlendTree::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimBlendTree::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimBlendTree::WriteToXMLNodeExplicit"

class cTkAnimJointLODData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimJointLODData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimJointLODData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimJointLODData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimJointLODData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimJointLODData::WriteToXMLNodeExplicit"

class cTkAnimPoseBabyModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseBabyModifier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseBabyModifier::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseBabyModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimPoseBabyModifier::WriteToXMLNodeExplicit"

class cTkAnimPoseCorrelationData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseCorrelationData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseCorrelationData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseCorrelationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimPoseCorrelationData::WriteToXMLNodeExplicit"

class cTkAnimPoseData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimPoseData::WriteToXMLNodeExplicit"

class cTkAnimPoseExampleData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseExampleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimPoseExampleData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseExampleData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseExampleData::WriteToXMLNode"

class cTkAnimPoseExampleElement:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimPoseExampleElement::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimPoseExampleElement::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimPoseExampleElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimPoseExampleElement::WriteToXMLNodeExplicit"

class cTkAnimationData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimationData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAnimationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkAnimationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimationData::WriteToXMLNodeExplicit"

class cTkAnimationDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimationDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimationDataTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimationDataTable::WriteToXMLNode"

class cTkAnimationGameData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimationGameData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkAnimationGameData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAnimationGameData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimationGameData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimationGameData::WriteToXMLNodeExplicit"

class cTkAttachmentData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAttachmentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAttachmentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cTkAttachmentData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cTkAttachmentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAttachmentData::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cTkAttachmentData::Save"
    class SetDefaults(HookFactory):
        _name = "cTkAttachmentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAttachmentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAttachmentData::WriteToXMLNodeExplicit"

class cTkCurveType:
    class ClassPointerCreate(HookFactory):
        _name = "cTkCurveType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkCurveType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkCurveType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkCurveType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkCurveType::WriteToXMLNodeExplicit"

class cTkHitCurveData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkHitCurveData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkHitCurveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkHitCurveData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkHitCurveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkHitCurveData::WriteToXMLNodeExplicit"

class cTkInOutCurve:
    class ClassPointerCreate(HookFactory):
        _name = "cTkInOutCurve::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkInOutCurve::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkInOutCurve::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkInOutCurve::WriteToXMLNodeExplicit"

class cGcBasePlacementRule:
    class FixUp(HookFactory):
        _name = "cGcBasePlacementRule::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBasePlacementRule::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBasePlacementRule::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBasePlacementRule::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBasePlacementRule::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBasePlacementRule::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBasePlacementRule::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBasePlacementRule::WriteToXMLNodeExplicit"

class cGcCameraAmbientSpaceData:
    class SetDefaults(HookFactory):
        _name = "cGcCameraAmbientSpaceData::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAmbientSpaceData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraAmbientSpaceData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAmbientSpaceData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAmbientSpaceData::WriteToXMLNode"

class cGcCharacterCustomisationBoneScaleData:
    class SetDefaults(HookFactory):
        _name = "cGcCharacterCustomisationBoneScaleData::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterCustomisationBoneScaleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterCustomisationBoneScaleData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationBoneScaleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterCustomisationBoneScaleData::WriteToXMLNodeExplicit"

class cGcPlayerControlInput:
    class SetDefaults(HookFactory):
        _name = "cGcPlayerControlInput::SetDefaults"
    class cGcPlayerControlInput(HookFactory):
        _name = "cGcPlayerControlInput::cGcPlayerControlInput"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlInput::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlInput::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerControlInput::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerControlInput::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlInput::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerControlInput::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlInput::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerControlInput::WriteToXMLNodeExplicit"

class cGcWikiTopicType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWikiTopicType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWikiTopicType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWikiTopicType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWikiTopicType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWikiTopicType::WriteToXMLNodeExplicit"

class cGcWonderCategoryConfig:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderCategoryConfig::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWonderCategoryConfig::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWonderCategoryConfig::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWonderCategoryConfig::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderCategoryConfig::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWonderCategoryConfig::WriteToXMLNodeExplicit"

class cGcWonderCreatureCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderCreatureCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderCreatureCategory::WriteToXMLNode"

class cGcWonderCustomCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderCustomCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderCustomCategory::WriteToXMLNode"

class cGcWonderFloraCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderFloraCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderFloraCategory::WriteToXMLNode"

class cGcWonderMineralCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderMineralCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderMineralCategory::WriteToXMLNode"

class cGcWonderPlanetCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderPlanetCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderPlanetCategory::WriteToXMLNode"

class cGcWonderRecord:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderRecord::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWonderRecord::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcWonderRecord::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWonderRecord::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWonderRecord::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcWonderRecord::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderRecord::WriteToXMLNode"

class cGcWonderTreasureCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderTreasureCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderTreasureCategory::WriteToXMLNode"

class cGcWonderType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWonderType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWonderType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWonderType::WriteToXMLNodeExplicit"

class cGcWonderWeirdBasePartCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWonderWeirdBasePartCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWonderWeirdBasePartCategory::WriteToXMLNode"

class cTkAnim2dBlendNode:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnim2dBlendNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnim2dBlendNode::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnim2dBlendNode::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkAnim2dBlendNode::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnim2dBlendNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnim2dBlendNode::WriteToXMLNodeExplicit"

class cTkAnim2dBlendNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnim2dBlendNodeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnim2dBlendNodeData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnim2dBlendNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAnim2dBlendNodeData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnim2dBlendNodeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnim2dBlendNodeData::WriteToXMLNodeExplicit"

class cTkAnimAnimNode:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimAnimNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimAnimNode::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimAnimNode::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cTkAnimAnimNode::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimAnimNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimAnimNode::WriteToXMLNodeExplicit"

class cTkAnimBlendNode:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimBlendNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimBlendNode::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimBlendNode::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimBlendNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimBlendNode::WriteToXMLNodeExplicit"

class cTkAnimVectorBlendNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cTkAnimVectorBlendNodeData::WriteToXMLNodeExplicit"

class cGcVibrationData:
    class cGcVibrationData(HookFactory):
        _name = "cGcVibrationData::cGcVibrationData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcVibrationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVibrationData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcVibrationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVibrationData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVibrationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVibrationData::WriteToXMLNodeExplicit"

class cGcIDLookupPath:
    class ClassPointerCreate(HookFactory):
        _name = "cGcIDLookupPath::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcIDLookupPath::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcIDLookupPath::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcIDLookupPath::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcIDLookupPath::WriteToXMLNodeExplicit"

class cGcIDLookupPaths:
    class ClassPointerCreate(HookFactory):
        _name = "cGcIDLookupPaths::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcIDLookupPaths::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcIDLookupPaths::WriteToXMLNode"

class cGcStoriesTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoriesTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoriesTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcStoriesTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoriesTable::WriteToXMLNode"

class cGcStoryCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryCategory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoryCategory::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcStoryCategory::FixDown"
    class FixUp(HookFactory):
        _name = "cGcStoryCategory::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStoryCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStoryCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryCategory::WriteToXMLNodeExplicit"

class cGcStoryEntryBranch:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryEntryBranch::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStoryEntryBranch::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcStoryEntryBranch::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryEntryBranch::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryEntryBranch::WriteToXMLNodeExplicit"

class cGcStoryPage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryPage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoryPage::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcStoryPage::FixDown"
    class FixUp(HookFactory):
        _name = "cGcStoryPage::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStoryPage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStoryPage::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryPage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryPage::WriteToXMLNodeExplicit"

class cGcStoryPageSeenData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryPageSeenData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStoryPageSeenData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryPageSeenData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryPageSeenData::WriteToXMLNodeExplicit"

class cGcStoryPageSeenDataArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryPageSeenDataArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoryPageSeenDataArray::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcStoryPageSeenDataArray::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcStoryPageSeenDataArray::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStoryPageSeenDataArray::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcStoryPageSeenDataArray::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryPageSeenDataArray::WriteToXMLNode"

class cGcTestMetadata:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTestMetadata::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTestMetadata::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTestMetadata::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTestMetadata::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTestMetadata::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTestMetadata::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTestMetadata::WriteToXMLNodeExplicit"

class cGcVibrationChannelData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVibrationChannelData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVibrationChannelData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcVibrationChannelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVibrationChannelData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVibrationChannelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVibrationChannelData::WriteToXMLNodeExplicit"

class cGcVibrationDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVibrationDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVibrationDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcVibrationDataTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVibrationDataTable::WriteToXMLNode"

class cGcWiki:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWiki::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWiki::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWiki::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWiki::WriteToXMLNode"

class cGcWikiCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWikiCategory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWikiCategory::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWikiCategory::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWikiCategory::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWikiCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWikiCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWikiCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWikiCategory::WriteToXMLNodeExplicit"

class cGcWikiPage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWikiPage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWikiPage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWikiPage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWikiPage::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWikiPage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWikiPage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWikiPage::WriteToXMLNodeExplicit"

class cGcWikiTopic:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWikiTopic::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWikiTopic::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWikiTopic::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWikiTopic::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWikiTopic::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWikiTopic::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWikiTopic::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWikiTopic::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWikiTopic::WriteToXMLNodeExplicit"

class cGcLaunchFuelCostDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLaunchFuelCostDifficultyOption::WriteToXMLNodeExplicit"

class cGcOptionsUIHeaderIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcOptionsUIHeaderIcons::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcOptionsUIHeaderIcons::WriteToXMLNode"

class cGcPersistentBaseDifficultyData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistentBaseDifficultyData::WriteToXMLNodeExplicit"

class cGcPhotoModeAdjustData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoModeAdjustData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPhotoModeAdjustData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPhotoModeAdjustData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoModeAdjustData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoModeAdjustData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPhotoModeAdjustData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoModeAdjustData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPhotoModeAdjustData::WriteToXMLNodeExplicit"

class cGcPhotoModeSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoModeSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoModeSettings::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPhotoModeSettings::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoModeSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPhotoModeSettings::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPhotoModeSettings::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoModeSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPhotoModeSettings::WriteToXMLNodeExplicit"

class cGcReputationGainDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcReputationGainDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcReputationGainDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcReputationGainDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcReputationGainDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcReputationGainDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcReputationGainDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcReputationGainDifficultyOption::WriteToXMLNodeExplicit"

class cGcScannerRechargeDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannerRechargeDifficultyOption::WriteToXMLNodeExplicit"

class cGcSprintingCostDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSprintingCostDifficultyOption::WriteToXMLNodeExplicit"

class cGcSubstanceCollectionDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSubstanceCollectionDifficultyOption::WriteToXMLNodeExplicit"

class cGcSurvivalBarBoolArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSurvivalBarBoolArray::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSurvivalBarBoolArray::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSurvivalBarBoolArray::WriteToXMLNode"

class cGcTriggerFeedbackState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTriggerFeedbackState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTriggerFeedbackState::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTriggerFeedbackState::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTriggerFeedbackState::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTriggerFeedbackState::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTriggerFeedbackState::WriteToXMLNodeExplicit"

class cGcTriggerFeedbackStateTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTriggerFeedbackStateTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTriggerFeedbackStateTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcTriggerFeedbackStateTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTriggerFeedbackStateTable::WriteToXMLNode"

class cGcPlanetSize:
    class SetDefaults(HookFactory):
        _name = "cGcPlanetSize::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetSize::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetSize::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetSize::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetSize::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetSize::WriteToXMLNodeExplicit"

class cGcDifficultySettingEditability:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingEditability::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingEditability::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingEditability::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingEditability::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultySettingEditability::WriteToXMLNodeExplicit"

class cGcDifficultySettingEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultySettingEnum::WriteToXMLNodeExplicit"

class cGcDifficultySettingLocData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingLocData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingLocData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingLocData::WriteToXMLNode"

class cGcDifficultySettingType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultySettingType::WriteToXMLNodeExplicit"

class cGcDifficultySettingUIOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingUIOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultySettingUIOption::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingUIOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingUIOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingUIOption::WriteToXMLNode"

class cGcDifficultySettingsData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingsData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultySettingsData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcDifficultySettingsData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcDifficultySettingsData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingsData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDifficultySettingsData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingsData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultySettingsData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcDifficultySettingsData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultySettingsData::WriteToXMLNodeExplicit"

class cGcDifficultySettingsReplicatedState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingsReplicatedState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultySettingsReplicatedState::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingsReplicatedState::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingsReplicatedState::WriteToXMLNode"

class cGcDifficultyStartWithAllItemsKnownOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyStartWithAllItemsKnownOptionData::WriteToXMLNodeExplicit"

class cGcDifficultyStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyStateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultyStateData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcDifficultyStateData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcDifficultyStateData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyStateData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDifficultyStateData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultyStateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultyStateData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcDifficultyStateData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyStateData::WriteToXMLNodeExplicit"

class cGcEnergyDrainDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEnergyDrainDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcEnergyDrainDifficultyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEnergyDrainDifficultyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEnergyDrainDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEnergyDrainDifficultyOption::WriteToXMLNodeExplicit"

class cGcFuelUseDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFuelUseDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFuelUseDifficultyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFuelUseDifficultyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFuelUseDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFuelUseDifficultyOption::WriteToXMLNodeExplicit"

class cGcGyroSettingsData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGyroSettingsData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGyroSettingsData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGyroSettingsData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGyroSettingsData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGyroSettingsData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcGyroSettingsData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGyroSettingsData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGyroSettingsData::WriteToXMLNodeExplicit"

class cGcHazardDrainDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHazardDrainDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHazardDrainDifficultyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHazardDrainDifficultyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHazardDrainDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHazardDrainDifficultyOption::WriteToXMLNodeExplicit"

class cGcInventoryStackLimitsDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryStackLimitsDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryStackLimitsDifficultyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryStackLimitsDifficultyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryStackLimitsDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryStackLimitsDifficultyOption::WriteToXMLNodeExplicit"

class cGcItemShopAvailabilityDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOption::WriteToXMLNodeExplicit"

class cGcItemShopAvailabilityDifficultyOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOptionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOptionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOptionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOptionData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemShopAvailabilityDifficultyOptionData::WriteToXMLNode"

class cGcExperienceDebugTriggerInput:
    class FixDown(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::FixDown"
    class ClassPointerCreate(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerInput::WriteToXMLNode"

class cGcDebugCamera:
    class FixUp(HookFactory):
        _name = "cGcDebugCamera::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebugCamera::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDebugCamera::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDebugCamera::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugCamera::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDebugCamera::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugCamera::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebugCamera::WriteToXMLNodeExplicit"

class cGcDeathConsequencesDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDeathConsequencesDifficultyOption::WriteToXMLNodeExplicit"

class cGcDifficultyConfig:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyConfig::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultyConfig::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcDifficultyConfig::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyConfig::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultyConfig::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultyConfig::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyConfig::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyConfig::WriteToXMLNodeExplicit"

class cGcDifficultyCurrencyCostOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyCurrencyCostOptionData::WriteToXMLNodeExplicit"

class cGcDifficultyFuelUseOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyFuelUseOptionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultyFuelUseOptionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyFuelUseOptionData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyFuelUseOptionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyFuelUseOptionData::WriteToXMLNodeExplicit"

class cGcDifficultyFuelUseTechOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyFuelUseTechOverride::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyFuelUseTechOverride::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyFuelUseTechOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyFuelUseTechOverride::WriteToXMLNodeExplicit"

class cGcDifficultyInventoryStackSizeOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyInventoryStackSizeOptionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyInventoryStackSizeOptionData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultyInventoryStackSizeOptionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyInventoryStackSizeOptionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyInventoryStackSizeOptionData::WriteToXMLNodeExplicit"

class cGcDifficultyOptionGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyOptionGroups::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyOptionGroups::WriteToXMLNode"

class cGcDifficultyOptionUIGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyOptionUIGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultyOptionUIGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyOptionUIGroup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyOptionUIGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyOptionUIGroup::WriteToXMLNodeExplicit"

class cGcDifficultyPresetType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultyPresetType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultyPresetType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDifficultyPresetType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultyPresetType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcDifficultyPresetType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultyPresetType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultyPresetType::WriteToXMLNodeExplicit"

class cGcDifficultySettingCommonData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDifficultySettingCommonData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDifficultySettingCommonData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDifficultySettingCommonData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDifficultySettingCommonData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDifficultySettingCommonData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDifficultySettingCommonData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDifficultySettingCommonData::WriteToXMLNodeExplicit"

class cGcActiveSurvivalBarsDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActiveSurvivalBarsDifficultyOption::WriteToXMLNodeExplicit"

class cGcBlockListPersistence:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlockListPersistence::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBlockListPersistence::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBlockListPersistence::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBlockListPersistence::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBlockListPersistence::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcBlockListPersistence::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlockListPersistence::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBlockListPersistence::WriteToXMLNodeExplicit"

class cGcBlockedMessage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlockedMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBlockedMessage::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlockedMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBlockedMessage::WriteToXMLNodeExplicit"

class cGcBlockedUser:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlockedUser::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBlockedUser::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBlockedUser::ReadFromDocument"
    class SetDefaults(HookFactory):
        _name = "cGcBlockedUser::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlockedUser::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBlockedUser::WriteToXMLNodeExplicit"

class cGcBreakTechOnDamageDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBreakTechOnDamageDifficultyOption::WriteToXMLNodeExplicit"

class cGcChargingRequirementsDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcChargingRequirementsDifficultyOption::WriteToXMLNodeExplicit"

class cGcCombatTimerDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatTimerDifficultyOption::WriteToXMLNodeExplicit"

class cGcCreatureHostilityDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureHostilityDifficultyOption::WriteToXMLNodeExplicit"

class cGcCurrencyCostDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCurrencyCostDifficultyOption::WriteToXMLNodeExplicit"

class cGcDamageGivenDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDamageGivenDifficultyOption::WriteToXMLNodeExplicit"

class cGcDamageReceivedDifficultyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDamageReceivedDifficultyOption::WriteToXMLNodeExplicit"

class cGcHotActionMenuTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHotActionMenuTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHotActionMenuTypes::WriteToXMLNode"

class cGcInWorldUIScreenData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInWorldUIScreenData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInWorldUIScreenData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInWorldUIScreenData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInWorldUIScreenData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInWorldUIScreenData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcInWorldUIScreenData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInWorldUIScreenData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInWorldUIScreenData::WriteToXMLNodeExplicit"

class cGcQuickMenuActionSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcQuickMenuActionSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcQuickMenuActionSaveData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcQuickMenuActionSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcQuickMenuActionSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcQuickMenuActionSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcQuickMenuActionSaveData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcQuickMenuActionSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcQuickMenuActionSaveData::WriteToXMLNodeExplicit"

class cGcQuickMenuActions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcQuickMenuActions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcQuickMenuActions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcQuickMenuActions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcQuickMenuActions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcQuickMenuActions::WriteToXMLNodeExplicit"

class cGcRemoteWeapons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRemoteWeapons::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRemoteWeapons::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRemoteWeapons::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRemoteWeapons::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRemoteWeapons::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRemoteWeapons::WriteToXMLNodeExplicit"

class cGcShipWeaponData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipWeaponData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipWeaponData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcShipWeaponData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipWeaponData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipWeaponData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipWeaponData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipWeaponData::WriteToXMLNodeExplicit"

class cGcShipWeapons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipWeapons::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipWeapons::WriteToXMLNode"

class cGcSpringLink:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpringLink::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpringLink::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSpringLink::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSpringLink::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSpringLink::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpringLink::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpringLink::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpringLink::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpringLink::WriteToXMLNodeExplicit"

class cGcRewardChangeGlobalMission:
    class SetDefaults(HookFactory):
        _name = "cGcRewardChangeGlobalMission::SetDefaults"
    class Cast(HookFactory):
        _name = "cGcRewardChangeGlobalMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardChangeGlobalMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardChangeGlobalMission::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardChangeGlobalMission::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardChangeGlobalMission::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardChangeGlobalMission::WriteToXMLNodeExplicit"

class cGcVehicleCheckpointComponentData:
    class Cast(HookFactory):
        _name = "cGcVehicleCheckpointComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleCheckpointComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleCheckpointComponentData::WriteToXMLNode"

class cGcVehicleComponentData:
    class Cast(HookFactory):
        _name = "cGcVehicleComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVehicleComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcVehicleComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcVehicleComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleComponentData::WriteToXMLNodeExplicit"

class cGcVehicleGarageComponentData:
    class Cast(HookFactory):
        _name = "cGcVehicleGarageComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleGarageComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleGarageComponentData::WriteToXMLNode"

class cGcVehicleRaceInviteComponentData:
    class Cast(HookFactory):
        _name = "cGcVehicleRaceInviteComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleRaceInviteComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleRaceInviteComponentData::WriteToXMLNode"

class cGcWaypointComponentData:
    class Cast(HookFactory):
        _name = "cGcWaypointComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWaypointComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWaypointComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWaypointComponentData::WriteToXMLNode"

class cGcAIShipWeapons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAIShipWeapons::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAIShipWeapons::WriteToXMLNode"

class cGcCamouflageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCamouflageData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCamouflageData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCamouflageData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCamouflageData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCamouflageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCamouflageData::WriteToXMLNodeExplicit"

class cGcPlayerWeaponBiomeProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerWeaponBiomeProperties::WriteToXMLNodeExplicit"

class cGcPlayerWeaponClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerWeaponClass::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeaponClass::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeaponClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerWeaponClass::WriteToXMLNodeExplicit"

class cGcPlayerWeaponData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerWeaponData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeaponData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerWeaponData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeaponData::WriteToXMLNode"

class cGcPlayerWeaponPropertiesData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerWeaponPropertiesData::WriteToXMLNodeExplicit"

class cGcPlayerWeaponPropertiesTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerWeaponPropertiesTable::WriteToXMLNodeExplicit"

class cGcPlayerWeapons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeapons::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerWeapons::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerWeapons::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerWeapons::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerWeapons::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerWeapons::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerWeapons::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerWeapons::WriteToXMLNodeExplicit"

class cGcVehicleMuzzleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleMuzzleData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleMuzzleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcVehicleMuzzleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleMuzzleData::WriteToXMLNode"

class cGcVehicleScanTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleScanTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVehicleScanTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcVehicleScanTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleScanTable::WriteToXMLNode"

class cGcVehicleScanTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleScanTableEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcVehicleScanTableEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcVehicleScanTableEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleScanTableEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleScanTableEntry::WriteToXMLNodeExplicit"

class cGcVehicleType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcVehicleType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleType::WriteToXMLNodeExplicit"

class cGcVehicleWeaponMode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleWeaponMode::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleWeaponMode::WriteToXMLNode"

class cGcVehicleWeaponMuzzleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleWeaponMuzzleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcVehicleWeaponMuzzleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleWeaponMuzzleData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleWeaponMuzzleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleWeaponMuzzleData::WriteToXMLNodeExplicit"

class cGcIDPair:
    class SetDefaults(HookFactory):
        _name = "cGcIDPair::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcIDPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcIDPair::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcIDPair::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcIDPair::WriteToXMLNode"

class cGcMechMeshPartTypeData:
    class cGcMechMeshPartTypeData(HookFactory):
        _name = "cGcMechMeshPartTypeData::cGcMechMeshPartTypeData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechMeshPartTypeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechMeshPartTypeData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMechMeshPartTypeData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechMeshPartTypeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechMeshPartTypeData::WriteToXMLNodeExplicit"

class cGcMechMeshPart:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechMeshPart::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMechMeshPart::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechMeshPart::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechMeshPart::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechMeshPart::WriteToXMLNodeExplicit"

class cGcMechMeshPartData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechMeshPartData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechMeshPartData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMechMeshPartData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMechMeshPartData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechMeshPartData::WriteToXMLNode"

class cGcMechMeshPartTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechMeshPartTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechMeshPartTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMechMeshPartTable::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechMeshPartTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMechMeshPartTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechMeshPartTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechMeshPartTable::WriteToXMLNodeExplicit"

class cGcMechMeshType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechMeshType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMechMeshType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechMeshType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechMeshType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechMeshType::WriteToXMLNodeExplicit"

class cGcMechPartAudioEventOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechPartAudioEventOverride::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechPartAudioEventOverride::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMechPartAudioEventOverride::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcMechPartAudioEventOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechPartAudioEventOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMechPartAudioEventOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechPartAudioEventOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechPartAudioEventOverride::WriteToXMLNodeExplicit"

class cGcMechWeaponLocation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechWeaponLocation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMechWeaponLocation::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechWeaponLocation::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechWeaponLocation::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechWeaponLocation::WriteToXMLNodeExplicit"

class cGcMechWeaponLocationPriority:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechWeaponLocationPriority::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechWeaponLocationPriority::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechWeaponLocationPriority::WriteToXMLNode"

class cGcVehicleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVehicleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcVehicleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcVehicleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleData::WriteToXMLNodeExplicit"

class cGcPulseEncounterSpawnAbandonedFreighter:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnAbandonedFreighter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnAbandonedFreighter::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterSpawnAbandonedFreighter::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnAbandonedFreighter::WriteToXMLNode"

class cGcPulseEncounterSpawnFrigateFlyby:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPulseEncounterSpawnFrigateFlyby::WriteToXMLNodeExplicit"

class cGcPulseEncounterSpawnObject:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPulseEncounterSpawnObject::WriteToXMLNodeExplicit"

class cGcPulseEncounterSpawnPirates:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnPirates::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnPirates::ClassPointerCreate"

class cGcPulseEncounterSpawnSpaceHostiles:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnSpaceHostiles::WriteToXMLNode"

class cGcPulseEncounterSpawnTrader:
    class Cast(HookFactory):
        _name = "cGcPulseEncounterSpawnTrader::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnTrader::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterSpawnTrader::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnTrader::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnTrader::WriteToXMLNode"

class cGcBackgroundSpaceEncounterInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBackgroundSpaceEncounterInfo::WriteToXMLNodeExplicit"

class cGcBackgroundSpaceEncounterSpawnConditions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBackgroundSpaceEncounterSpawnConditions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBackgroundSpaceEncounterSpawnConditions::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBackgroundSpaceEncounterSpawnConditions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBackgroundSpaceEncounterSpawnConditions::WriteToXMLNodeExplicit"

class cGcDebugCameraEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebugCameraEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDebugCameraEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugCameraEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugCameraEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebugCameraEntry::WriteToXMLNodeExplicit"

class cGcDebugShipTravelLine:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebugShipTravelLine::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDebugShipTravelLine::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugShipTravelLine::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDebugShipTravelLine::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugShipTravelLine::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebugShipTravelLine::WriteToXMLNodeExplicit"

class cGcExoMechWeaponData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExoMechWeaponData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExoMechWeaponData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExoMechWeaponData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcExoMechWeaponData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExoMechWeaponData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExoMechWeaponData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExoMechWeaponData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExoMechWeaponData::WriteToXMLNodeExplicit"

class cGcMechAudioEvent:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechAudioEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechAudioEvent::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMechAudioEvent::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcMechAudioEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMechAudioEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechAudioEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechAudioEvent::WriteToXMLNodeExplicit"

class cGcMechAudioEventTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechAudioEventTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechAudioEventTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMechAudioEventTable::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechAudioEventTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMechAudioEventTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechAudioEventTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechAudioEventTable::WriteToXMLNodeExplicit"

class cGcMechDebugSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechDebugSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMechDebugSpawnData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMechDebugSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMechDebugSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMechDebugSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechDebugSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMechDebugSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechDebugSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechDebugSpawnData::WriteToXMLNodeExplicit"

class cGcPulseEncounterInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPulseEncounterInfo::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPulseEncounterInfo::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPulseEncounterInfo::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPulseEncounterInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPulseEncounterInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPulseEncounterInfo::WriteToXMLNodeExplicit"

class cGcPulseEncounterSpawnAlienFreighter:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnAlienFreighter::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnAlienFreighter::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnAlienFreighter::WriteToXMLNode"

class cGcPulseEncounterSpawnConditions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPulseEncounterSpawnConditions::WriteToXMLNodeExplicit"

class cGcDoShipClearCommunication:
    class Cast(HookFactory):
        _name = "cGcDoShipClearCommunication::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipClearCommunication::ClassPointerCreate"

class cGcDoShipEscort:
    class Cast(HookFactory):
        _name = "cGcDoShipEscort::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipEscort::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDoShipEscort::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDoShipEscort::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDoShipEscort::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipEscort::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDoShipEscort::WriteToXMLNodeExplicit"

class cGcDoShipFlybyClose:
    class Cast(HookFactory):
        _name = "cGcDoShipFlybyClose::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipFlybyClose::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDoShipFlybyClose::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipFlybyClose::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDoShipFlybyClose::WriteToXMLNodeExplicit"

class cGcDoShipFlybyIntercept:
    class Cast(HookFactory):
        _name = "cGcDoShipFlybyIntercept::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipFlybyIntercept::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipFlybyIntercept::WriteToXMLNode"

class cGcDoShipFlybyMineAsteroids:
    class Cast(HookFactory):
        _name = "cGcDoShipFlybyMineAsteroids::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipFlybyMineAsteroids::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipFlybyMineAsteroids::WriteToXMLNode"

class cGcDoShipFlybyOverhead:
    class Cast(HookFactory):
        _name = "cGcDoShipFlybyOverhead::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipFlybyOverhead::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipFlybyOverhead::WriteToXMLNode"

class cGcDoShipReceiveHail:
    class Cast(HookFactory):
        _name = "cGcDoShipReceiveHail::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipReceiveHail::ClassPointerCreate"

class cGcDoShipReceiveMessage:
    class Cast(HookFactory):
        _name = "cGcDoShipReceiveMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipReceiveMessage::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDoShipReceiveMessage::WriteToXMLNode"

class cGcShipOwnershipComponentData:
    class Cast(HookFactory):
        _name = "cGcShipOwnershipComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipOwnershipComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipOwnershipComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipOwnershipComponentData::WriteToXMLNode"

class cGcSpaceshipComponentData:
    class Cast(HookFactory):
        _name = "cGcSpaceshipComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpaceshipComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceshipComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceshipComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipComponentData::WriteToXMLNodeExplicit"

class cGcSpaceshipShieldComponentData:
    class Cast(HookFactory):
        _name = "cGcSpaceshipShieldComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipShieldComponentData::ClassPointerCreate"

class cGcDoShipLandNextToPlayer:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDoShipLandNextToPlayer::ClassPointerCreate"

class cGcShipAICombatDefinition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAICombatDefinition::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipAICombatDefinition::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcShipAICombatDefinition::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcShipAICombatDefinition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAICombatDefinition::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipAICombatDefinition::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAICombatDefinition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipAICombatDefinition::WriteToXMLNodeExplicit"

class cGcShipAIDeathData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAIDeathData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipAIDeathData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAIDeathData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipAIDeathData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAIDeathData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipAIDeathData::WriteToXMLNodeExplicit"

class cGcShipAIPerformanceArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAIPerformanceArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipAIPerformanceArray::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcShipAIPerformanceArray::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAIPerformanceArray::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAIPerformanceArray::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipAIPerformanceArray::WriteToXMLNodeExplicit"

class cGcShipAIPlanetPatrolData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipAIPlanetPatrolData::WriteToXMLNodeExplicit"

class cGcShipDialogue:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipDialogue::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipDialogue::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcShipDialogue::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipDialogue::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipDialogue::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipDialogue::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipDialogue::WriteToXMLNodeExplicit"

class cGcShipDialogueTreeEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipDialogueTreeEnum::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipDialogueTreeEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipDialogueTreeEnum::WriteToXMLNode"

class cGcShipMessage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipMessage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipMessage::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipMessage::WriteToXMLNodeExplicit"

class cGcSpaceshipAvoidanceData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipAvoidanceData::WriteToXMLNodeExplicit"

class cGcEngineComponentData:
    class Cast(HookFactory):
        _name = "cGcEngineComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcEngineComponentData::ClassPointerCreate"

class cGcPlayerSpaceshipAim:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpaceshipAim::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpaceshipAim::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipAim::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpaceshipAim::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipAim::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpaceshipAim::WriteToXMLNodeExplicit"

class cGcPlayerSpaceshipClassBonuses:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpaceshipClassBonuses::WriteToXMLNodeExplicit"

class cGcPlayerSpaceshipControlData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpaceshipControlData::WriteToXMLNodeExplicit"

class cGcPlayerSpaceshipEngineData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::GenerateHash"
    class Interpolate(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::Interpolate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpaceshipEngineData::WriteToXMLNodeExplicit"

class cGcPlayerSpaceshipWarpData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpaceshipWarpData::WriteToXMLNodeExplicit"

class cGcShieldComponentData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShieldComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShieldComponentData::WriteToXMLNode"

class cGcShipAIAttackData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAIAttackData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipAIAttackData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAIAttackData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipAIAttackData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAIAttackData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipAIAttackData::WriteToXMLNodeExplicit"

class cGcShipAIAttackDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipAIAttackDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShipAIAttackDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcShipAIAttackDataTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcShipAIAttackDataTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipAIAttackDataTable::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcShipAIAttackDataTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipAIAttackDataTable::WriteToXMLNode"

class cGcSpaceshipTravelData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipTravelData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceshipTravelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipTravelData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceshipTravelData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipTravelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipTravelData::WriteToXMLNodeExplicit"

class cGcFreighterSyncComponentData:
    class Cast(HookFactory):
        _name = "cGcFreighterSyncComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterSyncComponentData::ClassPointerCreate"

class cGcShipFlareComponentData:
    class Cast(HookFactory):
        _name = "cGcShipFlareComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipFlareComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipFlareComponentData::WriteToXMLNode"

class cGcAISpaceshipModelDataArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::FixDown"
    class FixUp(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipModelDataArray::WriteToXMLNode"

class cGcAISpaceshipPreloadCacheData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipPreloadCacheData::WriteToXMLNodeExplicit"

class cGcAISpaceshipPreloadList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipPreloadList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipPreloadList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipPreloadList::WriteToXMLNode"

class cGcAISpaceshipRoles:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipRoles::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipRoles::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipRoles::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipRoles::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipRoles::WriteToXMLNodeExplicit"

class cGcAISpaceshipTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipTypes::WriteToXMLNodeExplicit"

class cGcAISpaceshipWeightingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipWeightingData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipWeightingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipWeightingData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipWeightingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipWeightingData::WriteToXMLNode"

class cGcBountySpawnInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBountySpawnInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBountySpawnInfo::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBountySpawnInfo::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBountySpawnInfo::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBountySpawnInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBountySpawnInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBountySpawnInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBountySpawnInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBountySpawnInfo::WriteToXMLNodeExplicit"

class cGcDebugPlanetPos:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebugPlanetPos::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDebugPlanetPos::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugPlanetPos::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDebugPlanetPos::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugPlanetPos::WriteToXMLNode"

class cGcPlayerSquadronConfig:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSquadronConfig::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerSquadronConfig::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerSquadronConfig::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSquadronConfig::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSquadronConfig::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSquadronConfig::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSquadronConfig::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSquadronConfig::WriteToXMLNodeExplicit"

class cGcSpaceshipShieldData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipShieldData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceshipShieldData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipShieldData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceshipShieldData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipShieldData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipShieldData::WriteToXMLNodeExplicit"

class cGcAISpaceshipComponentData:
    class Cast(HookFactory):
        _name = "cGcAISpaceshipComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipComponentData::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipComponentData::WriteToXMLNodeExplicit"

class cGcAIShipDebugSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAIShipDebugSpawnData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAIShipDebugSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAIShipDebugSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAIShipDebugSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAIShipDebugSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAIShipDebugSpawnData::WriteToXMLNodeExplicit"

class cGcAIShipSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAIShipSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAIShipSpawnData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAIShipSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcAIShipSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAIShipSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAIShipSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAIShipSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAIShipSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAIShipSpawnData::WriteToXMLNodeExplicit"
    class cGcAIShipSpawnData(HookFactory):
        _name = "cGcAIShipSpawnData::cGcAIShipSpawnData"

class cGcAIShipSpawnMarkerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAIShipSpawnMarkerData::WriteToXMLNodeExplicit"

class cGcAISpaceshipInstanceData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipInstanceData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipInstanceData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipInstanceData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipInstanceData::WriteToXMLNodeExplicit"

class cGcAISpaceshipManagerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipManagerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipManagerData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcAISpaceshipManagerData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipManagerData::WriteToXMLNode"

class cGcAISpaceshipMappingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipMappingData::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipMappingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipMappingData::WriteToXMLNode"

class cGcAISpaceshipModelData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAISpaceshipModelData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAISpaceshipModelData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAISpaceshipModelData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcAISpaceshipModelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipModelData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipModelData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipModelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipModelData::WriteToXMLNodeExplicit"

class cGcTerrainEditing:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainEditing::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainEditing::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainEditing::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainEditing::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainEditing::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainEditing::WriteToXMLNodeExplicit"

class cGcTerrainTexture:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainTexture::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTerrainTexture::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcTerrainTexture::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainTexture::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainTexture::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainTexture::WriteToXMLNode"

class cGcTileTypeSets:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTileTypeSets::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTileTypeSets::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcTileTypeSets::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTileTypeSets::WriteToXMLNode"

class cGcTradingClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradingClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTradingClass::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTradingClass::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradingClass::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcTradingClass::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradingClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradingClass::WriteToXMLNodeExplicit"

class cGcWeatherColourSettingList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherColourSettingList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherColourSettingList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherColourSettingList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherColourSettingList::WriteToXMLNode"

class cGcWeatherColourSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherColourSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherColourSettings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWeatherColourSettings::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherColourSettings::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherColourSettings::WriteToXMLNode"

class cGcWeatherWeightings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherWeightings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherWeightings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherWeightings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherWeightings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherWeightings::WriteToXMLNode"

class cGcSolarSystemSkyColourData:
    class cGcSolarSystemSkyColourData(HookFactory):
        _name = "cGcSolarSystemSkyColourData::cGcSolarSystemSkyColourData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemSkyColourData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemSkyColourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemSkyColourData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemSkyColourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemSkyColourData::WriteToXMLNodeExplicit"

class cGcPlanetSectionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetSectionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetSectionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetSectionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetSectionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetSectionData::WriteToXMLNode"

class cGcPlanetSentinelData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetSentinelData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetSentinelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetSentinelData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetSentinelData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetSentinelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetSentinelData::WriteToXMLNodeExplicit"

class cGcPlanetTerrainColour:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetTerrainColour::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetTerrainColour::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetTerrainColour::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetTerrainColour::WriteToXMLNodeExplicit"

class cGcPlanetTradingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetTradingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetTradingData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlanetTradingData::DeallocateDynamic"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetTradingData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlanetTradingData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetTradingData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetTradingData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlanetTradingData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetTradingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetTradingData::WriteToXMLNodeExplicit"

class cGcPlanetWaterColourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetWaterColourData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetWaterColourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetWaterColourData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetWaterColourData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetWaterColourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetWaterColourData::WriteToXMLNodeExplicit"

class cGcPlanetWaterData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetWaterData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetWaterData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlanetWaterData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPlanetWaterData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetWaterData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetWaterData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetWaterData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetWaterData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetWaterData::WriteToXMLNodeExplicit"

class cGcPlanetWeatherColourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetWeatherColourData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetWeatherColourData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlanetWeatherColourData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetWeatherColourData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetWeatherColourData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetWeatherColourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetWeatherColourData::WriteToXMLNodeExplicit"

class cGcPlanetWeatherColourIndex:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetWeatherColourIndex::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetWeatherColourIndex::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetWeatherColourIndex::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetWeatherColourIndex::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetWeatherColourIndex::WriteToXMLNodeExplicit"

class cGcPlanetWeatherData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetWeatherData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetWeatherData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlanetWeatherData::DeallocateDynamic"
    class FixUp(HookFactory):
        _name = "cGcPlanetWeatherData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetWeatherData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetWeatherData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetWeatherData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetWeatherData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetWeatherData::WriteToXMLNodeExplicit"

class cGcPlayerConflictData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerConflictData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerConflictData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerConflictData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerConflictData::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerConflictData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerConflictData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerConflictData::WriteToXMLNodeExplicit"

class cGcRainbowType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRainbowType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRainbowType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRainbowType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRainbowType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRainbowType::WriteToXMLNodeExplicit"

class cGcScreenFilterOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScreenFilterOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScreenFilterOption::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcScreenFilterOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScreenFilterOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScreenFilterOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScreenFilterOption::WriteToXMLNode"

class cGcSolarSystemClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemClass::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemClass::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemClass::WriteToXMLNodeExplicit"

class cGcSpaceSkyColourSettingList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceSkyColourSettingList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpaceSkyColourSettingList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceSkyColourSettingList::WriteToXMLNode"

class cGcSpawnDensity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpawnDensity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpawnDensity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpawnDensity::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpawnDensity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpawnDensity::WriteToXMLNodeExplicit"

class cGcSpawnDensityList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpawnDensityList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpawnDensityList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpawnDensityList::WriteToXMLNode"

class cGcTerrainControls:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainControls::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainControls::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainControls::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainControls::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainControls::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainControls::WriteToXMLNodeExplicit"

class cGcCreatureAlertData:
    class FixDown(HookFactory):
        _name = "cGcCreatureAlertData::FixDown"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureAlertData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureAlertData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureAlertData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureAlertData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureAlertData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureAlertData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureAlertData::WriteToXMLNodeExplicit"

class cGcAccessibleOverride_Text:
    class SetDefaults(HookFactory):
        _name = "cGcAccessibleOverride_Text::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAccessibleOverride_Text::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAccessibleOverride_Text::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAccessibleOverride_Text::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAccessibleOverride_Text::WriteToXMLNode"

class cGcMiningSubstanceData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMiningSubstanceData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMiningSubstanceData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMiningSubstanceData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcMiningSubstanceData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMiningSubstanceData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMiningSubstanceData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMiningSubstanceData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMiningSubstanceData::WriteToXMLNodeExplicit"

class cGcOverlayTexture:
    class ClassPointerCreate(HookFactory):
        _name = "cGcOverlayTexture::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcOverlayTexture::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcOverlayTexture::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcOverlayTexture::WriteToXMLNode"

class cGcPlanetClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetClass::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetClass::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetClass::WriteToXMLNodeExplicit"

class cGcPlanetColourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetColourData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetColourData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlanetColourData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetColourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetColourData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetColourData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetColourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetColourData::WriteToXMLNodeExplicit"

class cGcPlanetData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlanetData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPlanetData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetData::WriteToXMLNodeExplicit"

class cGcPlanetDataResourceHint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetDataResourceHint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetDataResourceHint::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetDataResourceHint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetDataResourceHint::WriteToXMLNodeExplicit"

class cGcPlanetGenerationInputData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetGenerationInputData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetGenerationInputData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlanetGenerationInputData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetGenerationInputData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetGenerationInputData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetGenerationInputData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetGenerationInputData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetGenerationInputData::WriteToXMLNodeExplicit"

class cGcPlanetGenerationIntermediateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetGenerationIntermediateData::WriteToXMLNodeExplicit"

class cGcPlanetHazardData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetHazardData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetHazardData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetHazardData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetHazardData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetHazardData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetHazardData::WriteToXMLNodeExplicit"

class cGcPlanetHeavyAirData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetHeavyAirData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetHeavyAirData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlanetHeavyAirData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetHeavyAirData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetHeavyAirData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetHeavyAirData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetHeavyAirData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetHeavyAirData::WriteToXMLNodeExplicit"

class cGcPlanetInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetInfo::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetInfo::WriteToXMLNodeExplicit"

class cGcPlanetRingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetRingData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetRingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetRingData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetRingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetRingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetRingData::WriteToXMLNodeExplicit"

class cGcPlanetaryMappingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetaryMappingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetaryMappingData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetaryMappingData::WriteToXMLNode"

class cGcPlanetaryMappingTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetaryMappingTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetaryMappingTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetaryMappingTable::WriteToXMLNode"

class cGcPlanetaryMappingValues:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetaryMappingValues::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetaryMappingValues::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetaryMappingValues::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetaryMappingValues::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetaryMappingValues::WriteToXMLNodeExplicit"

class cGcNPCNavigationAreaComponentData:
    class Cast(HookFactory):
        _name = "cGcNPCNavigationAreaComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCNavigationAreaComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCNavigationAreaComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCNavigationAreaComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCNavigationAreaComponentData::WriteToXMLNodeExplicit"

class cGcBiomeCloudSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeCloudSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeCloudSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeCloudSettings::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeCloudSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeCloudSettings::WriteToXMLNodeExplicit"

class cGcBiomeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBiomeData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBiomeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBiomeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeData::WriteToXMLNodeExplicit"

class cGcBiomeFileList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeFileList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBiomeFileList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBiomeFileList::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeFileList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeFileList::WriteToXMLNode"

class cGcBiomeFileListOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeFileListOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeFileListOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeFileListOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBiomeFileListOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeFileListOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeFileListOption::WriteToXMLNodeExplicit"

class cGcBiomeFileListOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeFileListOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBiomeFileListOptions::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeFileListOptions::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeFileListOptions::WriteToXMLNode"

class cGcBiomeList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBiomeList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeList::WriteToXMLNodeExplicit"

class cGcBiomeSubType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeSubType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeSubType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBiomeSubType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeSubType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcBiomeSubType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeSubType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeSubType::WriteToXMLNodeExplicit"

class cGcBiomeType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBiomeType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcBiomeType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBiomeType::WriteToXMLNodeExplicit"

class cGcExternalObjectFileList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExternalObjectFileList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExternalObjectFileList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcExternalObjectFileList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExternalObjectFileList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExternalObjectFileList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExternalObjectFileList::WriteToXMLNodeExplicit"

class cGcExternalObjectList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExternalObjectList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExternalObjectList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExternalObjectList::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExternalObjectList::WriteToXMLNode"

class cGcHeavyAirColourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHeavyAirColourData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHeavyAirColourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHeavyAirColourData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHeavyAirColourData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHeavyAirColourData::WriteToXMLNode"

class cGcHeavyAirSetting:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHeavyAirSetting::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHeavyAirSetting::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcHeavyAirSetting::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcHeavyAirSetting::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHeavyAirSetting::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHeavyAirSetting::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHeavyAirSetting::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHeavyAirSetting::WriteToXMLNodeExplicit"

class cGcSolarSystemLocator:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemLocator::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemLocator::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemLocator::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemLocator::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemLocator::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemLocator::WriteToXMLNodeExplicit"

class cGcSolarSystemLocatorChoice:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemLocatorChoice::WriteToXMLNodeExplicit"

class cGcSolarSystemLocatorTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemLocatorTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemLocatorTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemLocatorTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemLocatorTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemLocatorTypes::WriteToXMLNodeExplicit"

class cGcSolarSystemTraderSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemTraderSpawnData::WriteToXMLNodeExplicit"

class cGcSpaceStationSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceStationSpawnData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceStationSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceStationSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceStationSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceStationSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceStationSpawnData::WriteToXMLNodeExplicit"

class cGcAsteroidGeneratorRing:
    class Cast(HookFactory):
        _name = "cGcAsteroidGeneratorRing::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidGeneratorRing::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAsteroidGeneratorRing::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAsteroidGeneratorRing::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidGeneratorRing::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidGeneratorRing::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAsteroidGeneratorRing::WriteToXMLNodeExplicit"

class cGcAsteroidGeneratorSlab:
    class Cast(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAsteroidGeneratorSlab::WriteToXMLNodeExplicit"

class cGcAsteroidGeneratorSurround:
    class Cast(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAsteroidGeneratorSurround::WriteToXMLNodeExplicit"

class cGcAsteroidGeneratorAssignment:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAsteroidGeneratorAssignment::WriteToXMLNodeExplicit"

class cGcAtmosphereList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtmosphereList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtmosphereList::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtmosphereList::WriteToXMLNode"

class cGcBiomeListPerStarType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeListPerStarType::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBiomeListPerStarType::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBiomeListPerStarType::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBiomeListPerStarType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBiomeListPerStarType::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBiomeListPerStarType::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeListPerStarType::WriteToXMLNode"

class cGcExperienceTimers:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExperienceTimers::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExperienceTimers::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExperienceTimers::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExperienceTimers::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExperienceTimers::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExperienceTimers::WriteToXMLNodeExplicit"

class cGcGeneratedShipCounts:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedShipCounts::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedShipCounts::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedShipCounts::WriteToXMLNode"

class cGcSmokeBotPlanetReport:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSmokeBotPlanetReport::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSmokeBotPlanetReport::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSmokeBotPlanetReport::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSmokeBotPlanetReport::WriteToXMLNodeExplicit"

class cGcSmokeBotReport:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSmokeBotReport::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSmokeBotReport::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSmokeBotReport::WriteToXMLNode"

class cGcSmokeBotStats:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSmokeBotStats::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSmokeBotStats::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSmokeBotStats::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSmokeBotStats::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSmokeBotStats::WriteToXMLNodeExplicit"

class cGcSmokeBotSystemReport:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSmokeBotSystemReport::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSmokeBotSystemReport::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSmokeBotSystemReport::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSmokeBotSystemReport::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSmokeBotSystemReport::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSmokeBotSystemReport::WriteToXMLNodeExplicit"

class cGcSolarGenerationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarGenerationData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarGenerationData::WriteToXMLNode"

class cGcSolarSystemData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSolarSystemData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSolarSystemData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSolarSystemData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemData::WriteToXMLNodeExplicit"

class cGcSolarSystemEventWarpIn:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarSystemEventWarpIn::WriteToXMLNodeExplicit"

class cGcSolarSystemEventWarpOut:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemEventWarpOut::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSolarSystemEventWarpOut::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcSolarSystemEventWarpOut::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemEventWarpOut::WriteToXMLNode"

class cGcSolarSystemEventWarpPlayer:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSolarSystemEventWarpPlayer::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSolarSystemEventWarpPlayer::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSolarSystemEventWarpPlayer::WriteToXMLNode"

class cGcSentinelRobotComponentData:
    class Cast(HookFactory):
        _name = "cGcSentinelRobotComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelRobotComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelRobotComponentData::WriteToXMLNode"

class cGcButtonSpawn:
    class ClassPointerCreate(HookFactory):
        _name = "cGcButtonSpawn::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcButtonSpawn::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcButtonSpawn::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcButtonSpawn::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcButtonSpawn::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcButtonSpawn::WriteToXMLNodeExplicit"

class cGcButtonSpawnOffset:
    class ClassPointerCreate(HookFactory):
        _name = "cGcButtonSpawnOffset::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcButtonSpawnOffset::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcButtonSpawnOffset::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcButtonSpawnOffset::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcButtonSpawnOffset::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcButtonSpawnOffset::WriteToXMLNodeExplicit"

class cGcButtonSpawnTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcButtonSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcButtonSpawnTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcButtonSpawnTable::WriteToXMLNode"

class cGcMechTargetSelectionWeightingSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMechTargetSelectionWeightingSettings::WriteToXMLNodeExplicit"

class cGcRobotLaserData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRobotLaserData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRobotLaserData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRobotLaserData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRobotLaserData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRobotLaserData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRobotLaserData::WriteToXMLNodeExplicit"

class cGcSentinelEncounterOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelEncounterOverride::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelEncounterOverride::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSentinelEncounterOverride::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelEncounterOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelEncounterOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelEncounterOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelEncounterOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelEncounterOverride::WriteToXMLNodeExplicit"

class cGcSentinelMechWeaponData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelMechWeaponData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelMechWeaponData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSentinelMechWeaponData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelMechWeaponData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelMechWeaponData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelMechWeaponData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelMechWeaponData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelMechWeaponData::WriteToXMLNodeExplicit"

class cGcSentinelMechWeaponMode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelMechWeaponMode::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelMechWeaponMode::WriteToXMLNode"

class cGcSentinelResource:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelResource::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelResource::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelResource::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelResource::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelResource::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelResource::WriteToXMLNodeExplicit"

class cGcSentinelTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelTypes::WriteToXMLNodeExplicit"

class cGcDroneComponentData:
    class Cast(HookFactory):
        _name = "cGcDroneComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDroneComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDroneComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDroneComponentData::WriteToXMLNodeExplicit"

class cGcShootableComponentData:
    class Cast(HookFactory):
        _name = "cGcShootableComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcShootableComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcShootableComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcShootableComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShootableComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShootableComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShootableComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShootableComponentData::WriteToXMLNodeExplicit"

class cGcDroneControlData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneControlData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDroneControlData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDroneControlData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneControlData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDroneControlData::WriteToXMLNodeExplicit"

class cGcDroneData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDroneData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcDroneData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcDroneData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDroneData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDroneData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDroneData::WriteToXMLNodeExplicit"

class cGcDroneResource:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneResource::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneResource::WriteToXMLNode"

class cGcDroneTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneTypes::WriteToXMLNode"

class cGcDroneWeaponData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneWeaponData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDroneWeaponData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDroneWeaponData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDroneWeaponData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneWeaponData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDroneWeaponData::WriteToXMLNodeExplicit"

class cGcProjectileImpactData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectileImpactData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProjectileImpactData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProjectileImpactData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectileImpactData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProjectileImpactData::WriteToXMLNodeExplicit"

class cGcProjectileImpactType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectileImpactType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProjectileImpactType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProjectileImpactType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectileImpactType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProjectileImpactType::WriteToXMLNodeExplicit"

class cGcProjectileLineData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectileLineData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProjectileLineData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcProjectileLineData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProjectileLineData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProjectileLineData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectileLineData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProjectileLineData::WriteToXMLNodeExplicit"

class cGcTracerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTracerData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTracerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTracerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTracerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTracerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTracerData::WriteToXMLNodeExplicit"

class cGcSubstanceSecondary:
    class SetDefaults(HookFactory):
        _name = "cGcSubstanceSecondary::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceSecondary::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSubstanceSecondary::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSubstanceSecondary::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceSecondary::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSubstanceSecondary::WriteToXMLNodeExplicit"

class cGcLaserBeamData:
    class cGcLaserBeamData(HookFactory):
        _name = "cGcLaserBeamData::cGcLaserBeamData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLaserBeamData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcLaserBeamData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcLaserBeamData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcLaserBeamData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcLaserBeamData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLaserBeamData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLaserBeamData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLaserBeamData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLaserBeamData::WriteToXMLNodeExplicit"

class cGcDestructableComponentData:
    class Cast(HookFactory):
        _name = "cGcDestructableComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDestructableComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDestructableComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDestructableComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDestructableComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDestructableComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDestructableComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDestructableComponentData::WriteToXMLNodeExplicit"

class cGcMissileComponentData:
    class Cast(HookFactory):
        _name = "cGcMissileComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissileComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissileComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissileComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissileComponentData::WriteToXMLNode"

class cGcBoidData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBoidData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBoidData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBoidData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBoidData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBoidData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBoidData::WriteToXMLNodeExplicit"

class cGcCombatEffectDamageMultiplier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatEffectDamageMultiplier::WriteToXMLNodeExplicit"

class cGcDamageMultiplier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDamageMultiplier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDamageMultiplier::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDamageMultiplier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDamageMultiplier::WriteToXMLNodeExplicit"

class cGcDamageMultiplierLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDamageMultiplierLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDamageMultiplierLookup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDamageMultiplierLookup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDamageMultiplierLookup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDamageMultiplierLookup::WriteToXMLNode"

class cGcDamageType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDamageType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDamageType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDamageType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDamageType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDamageType::WriteToXMLNodeExplicit"

class cGcProjectileDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectileDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProjectileDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcProjectileDataTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectileDataTable::WriteToXMLNode"

class cGcPlayerStatsGroup:
    class FixDown(HookFactory):
        _name = "cGcPlayerStatsGroup::FixDown"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerStatsGroup::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerStatsGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerStatsGroup::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlayerStatsGroup::DeallocateDynamic"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerStatsGroup::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerStatsGroup::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerStatsGroup::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerStatsGroup::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerStatsGroup::WriteToXMLNode"

class cGcBaseBuildingFamily:
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingFamily::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingFamily::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingFamily::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingFamily::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingFamily::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingFamily::WriteToXMLNode"

class cGcFreighterDungeonChoice:
    class SetDefaults(HookFactory):
        _name = "cGcFreighterDungeonChoice::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterDungeonChoice::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterDungeonChoice::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterDungeonChoice::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterDungeonChoice::WriteToXMLNode"

class cGcPlayerCharacterStateType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterStateType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterStateType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCharacterStateType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterStateType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCharacterStateType::WriteToXMLNodeExplicit"

class cGcPlayerCommunicatorMessage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCommunicatorMessage::WriteToXMLNodeExplicit"

class cGcPlayerCommunicatorMessageWeighted:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCommunicatorMessageWeighted::WriteToXMLNode"

class cGcPlayerEmote:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerEmote::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerEmote::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerEmote::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerEmote::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerEmote::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerEmote::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerEmote::WriteToXMLNodeExplicit"

class cGcPlayerEmoteList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerEmoteList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerEmoteList::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerEmoteList::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerEmoteList::WriteToXMLNode"

class cGcPlayerEmotePropData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerEmotePropData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerEmotePropData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerEmotePropData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerEmotePropData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerEmotePropData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerEmotePropData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerEmotePropData::WriteToXMLNodeExplicit"

class cGcPlayerHazardData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerHazardData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerHazardData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerHazardData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerHazardData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerHazardData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerHazardData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerHazardData::WriteToXMLNodeExplicit"

class cGcPlayerHazardTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerHazardTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerHazardTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerHazardTable::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerHazardTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerHazardTable::WriteToXMLNode"

class cGcPlayerHazardType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerHazardType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerHazardType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerHazardType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerHazardType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerHazardType::WriteToXMLNodeExplicit"

class cGcPlayerStickData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerStickData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerStickData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerStickData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerStickData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerStickData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerStickData::WriteToXMLNodeExplicit"

class cGcPlayerSurvivalBarType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSurvivalBarType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSurvivalBarType::WriteToXMLNode"

class cGcProjectorOffsetData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProjectorOffsetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProjectorOffsetData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcProjectorOffsetData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProjectorOffsetData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProjectorOffsetData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProjectorOffsetData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProjectorOffsetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProjectorOffsetData::WriteToXMLNodeExplicit"

class cGcScanData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScanData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanData::WriteToXMLNodeExplicit"

class cGcScanEffectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEffectData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScanEffectData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEffectData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanEffectData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEffectData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEffectData::WriteToXMLNodeExplicit"

class cGcZoomData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcZoomData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcZoomData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcZoomData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcZoomData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcZoomData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcZoomData::WriteToXMLNodeExplicit"

class cGcAreaDamageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAreaDamageData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAreaDamageData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAreaDamageData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAreaDamageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAreaDamageData::WriteToXMLNodeExplicit"

class cGcAreaDamageDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAreaDamageDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAreaDamageDataTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAreaDamageDataTable::WriteToXMLNode"

class cGcCreatureDiscoveryThumbnailOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureDiscoveryThumbnailOverride::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureDiscoveryThumbnailOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureDiscoveryThumbnailOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureDiscoveryThumbnailOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureDiscoveryThumbnailOverride::WriteToXMLNode"

class cGcDebrisData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebrisData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDebrisData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDebrisData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebrisData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebrisData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebrisData::WriteToXMLNodeExplicit"

class cGcExplosionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExplosionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExplosionData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcExplosionData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcExplosionData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcExplosionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExplosionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExplosionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExplosionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExplosionData::WriteToXMLNodeExplicit"

class cGcExplosionDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExplosionDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExplosionDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExplosionDataTable::FixUp"
    class Save(HookFactory):
        _name = "cGcExplosionDataTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExplosionDataTable::WriteToXMLNode"

class cGcGrabbableData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGrabbableData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGrabbableData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGrabbableData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGrabbableData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGrabbableData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGrabbableData::WriteToXMLNodeExplicit"

class cGcHand:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHand::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHand::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcHand::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHand::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcHand::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHand::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHand::WriteToXMLNodeExplicit"

class cGcMovementDirection:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMovementDirection::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMovementDirection::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcMovementDirection::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMovementDirection::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcMovementDirection::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMovementDirection::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMovementDirection::WriteToXMLNodeExplicit"

class cGcPhotoBuilding:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoBuilding::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoBuilding::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoBuilding::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoBuilding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPhotoBuilding::WriteToXMLNodeExplicit"

class cGcPhotoBuildings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoBuildings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoBuildings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoBuildings::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoBuildings::WriteToXMLNode"

class cGcPhotoCreature:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoCreature::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoCreature::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoCreature::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoCreature::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPhotoCreature::WriteToXMLNodeExplicit"

class cGcPhotoFauna:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoFauna::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoFauna::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoFauna::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPhotoFauna::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoFauna::WriteToXMLNode"

class cGcPhotoFlora:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoFlora::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoFlora::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoFlora::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPhotoFlora::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoFlora::WriteToXMLNode"

class cGcPhotoPlant:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhotoPlant::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPhotoPlant::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPhotoPlant::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhotoPlant::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPhotoPlant::WriteToXMLNodeExplicit"

class cGcPlayerCharacterAnimationOverrideData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterAnimationOverrideData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterAnimationOverrideData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterAnimationOverrideData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCharacterAnimationOverrideData::WriteToXMLNodeExplicit"

class cGcPlayerCharacterIKOverrideData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCharacterIKOverrideData::WriteToXMLNodeExplicit"

class cGcPlayerCharacterIKStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCharacterIKStateData::WriteToXMLNodeExplicit"

class cGcPlayerCharacterStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterStateData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterStateData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerCharacterStateData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerCharacterStateData::WriteToXMLNodeExplicit"

class cGcPlayerCharacterStateTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterStateTable::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerCharacterStateTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterStateTable::WriteToXMLNode"

class cGcReplacementEffectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcReplacementEffectData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcReplacementEffectData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcReplacementEffectData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcReplacementEffectData::WriteToXMLNode"

class cGcNPCRaceProbabilityModifierData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCRaceProbabilityModifierData::WriteToXMLNodeExplicit"

class cGcNPCReactionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCReactionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCReactionData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCReactionData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCReactionData::WriteToXMLNode"

class cGcNPCReactionEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCReactionEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCReactionEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCReactionEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCReactionEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCReactionEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourAreaProperty:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaProperty::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaProperty::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaProperty::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaProperty::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaProperty::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourAreaPropertyWeightEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaPropertyWeightEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaPropertyWeightEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaPropertyWeightEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaPropertyWeightEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourAreaPropertyWeightEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourBuildingClassCapacityEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassCapacityEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourBuildingClassWeightEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassWeightEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassWeightEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassWeightEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassWeightEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourBuildingClassWeightEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourData::WriteToXMLNode"

class cGcNPCSettlementBehaviourEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourObjectTypeWeightEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSettlementBehaviourObjectTypeWeightEntry::WriteToXMLNodeExplicit"

class cGcNPCSettlementBehaviourState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSettlementBehaviourState::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSettlementBehaviourState::WriteToXMLNode"

class cGcNPCSpawnTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCSpawnTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCSpawnTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSpawnTable::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNPCSpawnTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSpawnTable::WriteToXMLNode"

class cGcNPCWordReactionCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCWordReactionCategory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCWordReactionCategory::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCWordReactionCategory::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCWordReactionCategory::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCWordReactionCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCWordReactionCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCWordReactionCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCWordReactionCategory::WriteToXMLNodeExplicit"

class cGcNPCWordReactionList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCWordReactionList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCWordReactionList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCWordReactionList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCWordReactionList::WriteToXMLNode"

class cGcNPCWordReactionTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCWordReactionTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCWordReactionTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCWordReactionTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCWordReactionTable::WriteToXMLNode"

class cGcMissionType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionType::WriteToXMLNodeExplicit"

class cGcNPCAnimationList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCAnimationList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCAnimationList::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCAnimationList::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCAnimationList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCAnimationList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCAnimationList::WriteToXMLNode"

class cGcNPCAnimationSetData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCAnimationSetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCAnimationSetData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCAnimationSetData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCAnimationSetData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCAnimationSetData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCAnimationSetData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCAnimationSetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCAnimationSetData::WriteToXMLNodeExplicit"

class cGcNPCAnimationsData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCAnimationsData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCAnimationsData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCAnimationsData::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcNPCAnimationsData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCAnimationsData::WriteToXMLNode"

class cGcNPCColourGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCColourGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCColourGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCColourGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCColourGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCColourGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCColourGroup::WriteToXMLNodeExplicit"

class cGcNPCColourTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCColourTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCColourTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCColourTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCColourTable::WriteToXMLNode"

class cGcNPCDebugSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCDebugSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCDebugSpawnData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCDebugSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCDebugSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCDebugSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCDebugSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCDebugSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCDebugSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCDebugSpawnData::WriteToXMLNodeExplicit"
    class cGcNPCDebugSpawnData(HookFactory):
        _name = "cGcNPCDebugSpawnData::cGcNPCDebugSpawnData"
        _overload: overloads.cGcNPCDebugSpawnData.cGcNPCDebugSpawnData.overloads = "cGcNPCDebugSpawnData *, cGcNPCDebugSpawnData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcNPCDebugSpawnData.cGcNPCDebugSpawnData.overloads):
            cls._overload = overload_args
            return cls

class cGcNPCInteractionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCInteractionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCInteractionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCInteractionData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCInteractionData::WriteToXMLNodeExplicit"

class cGcNPCInteractionsDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractionsDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCInteractionsDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCInteractionsDataTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractionsDataTable::WriteToXMLNode"

class cGcNPCInteractiveObjectState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractiveObjectState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCInteractiveObjectState::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCInteractiveObjectState::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCInteractiveObjectState::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCInteractiveObjectState::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectState::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCInteractiveObjectState::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectState::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCInteractiveObjectState::WriteToXMLNodeExplicit"

class cGcNPCInteractiveObjectStateTransition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCInteractiveObjectStateTransition::WriteToXMLNodeExplicit"

class cGcNPCInteractiveObjectType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractiveObjectType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCInteractiveObjectType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectType::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCInteractiveObjectType::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCInteractiveObjectType::WriteToXMLNodeExplicit"

class cGcNPCProbabilityAnimationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCProbabilityAnimationData::WriteToXMLNodeExplicit"

class cGcNPCProbabilityReactionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCProbabilityReactionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCProbabilityReactionData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNPCProbabilityReactionData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNPCProbabilityReactionData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNPCProbabilityReactionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCProbabilityReactionData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCProbabilityReactionData::WriteToXMLNode"

class cGcNPCProbabilityWordReactionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCProbabilityWordReactionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCProbabilityWordReactionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCProbabilityWordReactionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCProbabilityWordReactionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCProbabilityWordReactionData::WriteToXMLNode"

class cGcNPCPropInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCPropInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCPropInfo::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCPropInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCPropInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCPropInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCPropInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCPropInfo::WriteToXMLNodeExplicit"

class cGcNPCPropTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCPropTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCPropTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNPCPropTable::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcNPCPropTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCPropTable::WriteToXMLNode"

class cGcProductToCollect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProductToCollect::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProductToCollect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProductToCollect::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProductToCollect::WriteToXMLNode"

class cGcScanEventGPSHint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventGPSHint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventGPSHint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventGPSHint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventGPSHint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventGPSHint::WriteToXMLNodeExplicit"

class cGcExpeditionPaymentToken:
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionPaymentToken::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionPaymentToken::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionPaymentToken::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionPaymentToken::WriteToXMLNode"

class cGcMissionSequenceWaitForRefuel:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForRefuel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForRefuel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForRefuel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForRefuel::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForRefuel::SetDefaults"

class cGcMissionSequenceWaitForRepair:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForRepair::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForRepair::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForRepair::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForRepair::WriteToXMLNode"

class cGcMissionSequenceWaitForScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForScanEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForSettlementActivity:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForSettlementActivity::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForShips:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForShips::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForStat:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForStat::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForStatMilestone:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForStatMilestone::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForStatSeasonal:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForStatSeasonal::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForSuitUpgrade:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForSuitUpgrade::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForSuitUpgrade::ClassPointerCreate"

class cGcMissionSequenceWaitForWarps:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForWarps::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForWarps::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForWarps::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForWarps::WriteToXMLNode"

class cGcMissionSequenceWaitRealTime:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitRealTime::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitRealTimeCombat:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitRealTimeCombat::WriteToXMLNodeExplicit"

class cGcConstructionPart:
    class ClassPointerCreate(HookFactory):
        _name = "cGcConstructionPart::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcConstructionPart::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcConstructionPart::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcConstructionPart::WriteToXMLNode"

class cGcJudgementMessageOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJudgementMessageOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcJudgementMessageOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcJudgementMessageOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcJudgementMessageOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJudgementMessageOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJudgementMessageOptions::WriteToXMLNodeExplicit"

class cGcMissionCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionCategory::WriteToXMLNodeExplicit"

class cGcMissionConditionTest:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionTest::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionTest::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionConditionTest::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionTest::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionTest::WriteToXMLNodeExplicit"

class cGcMissionDifficulty:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionDifficulty::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionDifficulty::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionDifficulty::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionDifficulty::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionDifficulty::WriteToXMLNodeExplicit"

class cGcMissionFaction:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionFaction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionFaction::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionFaction::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionFaction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionFaction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionFaction::WriteToXMLNodeExplicit"

class cGcMissionGalacticFeature:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionGalacticFeature::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionGalacticFeature::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionGalacticFeature::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionGalacticFeature::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionGalacticFeature::WriteToXMLNodeExplicit"

class cGcMissionGalacticPoint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionGalacticPoint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionGalacticPoint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionGalacticPoint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionGalacticPoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionGalacticPoint::WriteToXMLNodeExplicit"

class cGcMissionPageHint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionPageHint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionPageHint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionPageHint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionPageHint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionPageHint::WriteToXMLNodeExplicit"

class cGcMissionSequenceSignalGalacticPoint:
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::SetDefaults"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceSignalGalacticPoint::WriteToXMLNodeExplicit"

class cGcMissionSequenceGatherForRefuel:
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGatherForRefuel::WriteToXMLNode"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGatherForRefuel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGatherForRefuel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceGatherForRefuel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGatherForRefuel::GenerateHash"

class cGcMissionSequenceStartScanEventSpecific:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceStartScanEventSpecific::WriteToXMLNodeExplicit"

class cGcMissionSequenceStartSummonAnomaly:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceStartSummonAnomaly::WriteToXMLNodeExplicit"

class cGcMissionSequenceStop:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceStop::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceStop::ClassPointerCreate"

class cGcMissionSequenceSummonNexus:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSummonNexus::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSummonNexus::ClassPointerCreate"

class cGcMissionSequenceSuppressMarkers:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSuppressMarkers::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSuppressMarkers::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceSuppressMarkers::WriteToXMLNode"

class cGcMissionSequenceTeleport:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceTeleport::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceTeleport::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceTeleport::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceTeleport::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceTeleport::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceTeleport::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceTeleport::WriteToXMLNodeExplicit"

class cGcMissionSequenceVehicleScan:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceVehicleScan::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceVehicleScan::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceVehicleScan::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceVehicleScan::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceVehicleScan::WriteToXMLNode"

class cGcMissionSequenceVisitPlanets:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceVisitPlanets::WriteToXMLNodeExplicit"

class cGcMissionSequenceWait:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWait::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWait::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWait::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWait::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWait::WriteToXMLNode"

class cGcMissionSequenceWaitForAbandFreighterDoorOpen:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForAbandFreighterDoorOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForAbandFreighterDoorOpen::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForAbandFreighterDoorOpen::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForAbandFreighterDoorOpen::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForAbandFreighterDoorOpen::WriteToXMLNode"

class cGcMissionSequenceWaitForBuild:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForBuild::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForBuild::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForBuild::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForBuild::WriteToXMLNode"

class cGcMissionSequenceWaitForCompletionMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForCompletionMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForCompletionMessage::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForCompletionMessage::WriteToXMLNode"

class cGcMissionSequenceWaitForConditions:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForConditions::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForDepots:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForDepots::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForFactionStanding:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForFactionStanding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForFactionStanding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForFactionStanding::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForFactionStanding::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForFactionStanding::SetDefaults"

class cGcMissionSequenceWaitForFreighterPods:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForFreighterPods::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForFriendlyDroneScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForFriendlyDroneScanEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForMessage::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForMessage::WriteToXMLNode"

class cGcMissionSequenceWaitForPhoto:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceWaitForPhoto::WriteToXMLNodeExplicit"

class cGcMissionSequenceWaitForPortalWarp:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceWaitForPortalWarp::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceWaitForPortalWarp::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceWaitForPortalWarp::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceWaitForPortalWarp::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceWaitForPortalWarp::WriteToXMLNode"

class cGcMissionSequenceGetUnitsToBuyItem:
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGetUnitsToBuyItem::SetDefaults"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGetUnitsToBuyItem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGetUnitsToBuyItem::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGetUnitsToBuyItem::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGetUnitsToBuyItem::WriteToXMLNode"

class cGcMissionSequenceDoMissionsForFaction:
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::WriteToXMLNodeExplicit"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceDoMissionsForFaction::GenerateHash"

class cGcMissionSequenceKill:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceKill::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceKill::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceKill::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceKill::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceKill::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceKill::WriteToXMLNodeExplicit"

class cGcMissionSequenceKillEncounter:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceKillEncounter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceKillEncounter::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceKillEncounter::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceKillEncounter::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceKillEncounter::WriteToXMLNode"

class cGcMissionSequenceLearnWords:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceLearnWords::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceLearnWords::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceLearnWords::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceLearnWords::WriteToXMLNode"

class cGcMissionSequenceLeaveNexusMP:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceLeaveNexusMP::WriteToXMLNode"

class cGcMissionSequenceModifyStat:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceModifyStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceModifyStat::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceModifyStat::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceModifyStat::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceModifyStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceModifyStat::WriteToXMLNodeExplicit"

class cGcMissionSequencePirates:
    class Cast(HookFactory):
        _name = "cGcMissionSequencePirates::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequencePirates::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequencePirates::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequencePirates::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequencePirates::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequencePirates::WriteToXMLNodeExplicit"

class cGcMissionSequenceProductAmountNeeded:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceProductAmountNeeded::WriteToXMLNodeExplicit"

class cGcMissionSequenceRepairTech:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceRepairTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceRepairTech::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceRepairTech::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceRepairTech::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceRepairTech::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceRepairTech::WriteToXMLNode"

class cGcMissionSequenceReward:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceReward::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceReward::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceReward::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceReward::WriteToXMLNodeExplicit"

class cGcMissionSequenceScan:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceScan::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceScan::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceScan::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceScan::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceScan::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceScan::WriteToXMLNodeExplicit"

class cGcMissionSequenceSendChatMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSendChatMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSendChatMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceSendChatMessage::GenerateHash"

class cGcMissionSequenceSetCurrentMission:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSetCurrentMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSetCurrentMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceSetCurrentMission::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceSetCurrentMission::WriteToXMLNode"

class cGcMissionSequenceSetGlobalMission:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceSetGlobalMission::WriteToXMLNodeExplicit"

class cGcMissionSequenceShowMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceShowMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceShowMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceShowMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceShowMessage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceShowMessage::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceShowMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceShowMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceShowMessage::WriteToXMLNodeExplicit"

class cGcMissionSequenceShowMissionUpdateMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceShowMissionUpdateMessage::WriteToXMLNodeExplicit"

class cGcMissionSequenceShowPodMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceShowPodMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceShowPodMessage::ClassPointerCreate"

class cGcMissionSequenceShowSeasonTimeWarning:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceShowSeasonTimeWarning::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceShowSeasonTimeWarning::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceShowSeasonTimeWarning::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceShowSeasonTimeWarning::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceShowSeasonTimeWarning::WriteToXMLNode"

class cGcMissionSequenceStartMission:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceStartMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceStartMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceStartMission::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceStartMission::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceStartMission::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceStartMission::WriteToXMLNodeExplicit"

class cGcMissionSequenceStartScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceStartScanEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceCompleteMission:
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCompleteMission::SetDefaults"
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCompleteMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCompleteMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCompleteMission::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCompleteMission::WriteToXMLNode"

class cGcRewardSendChatMessage:
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSendChatMessage::WriteToXMLNode"
    class Cast(HookFactory):
        _name = "cGcRewardSendChatMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSendChatMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSendChatMessage::GenerateHash"

class cGcMissionSequenceEndScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceEndScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceEndScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceEndScanEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceEndScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceEndScanEvent::WriteToXMLNode"

class cGcMissionSequenceEnsureBarrelsAtPlayerSettlement:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceEnsureBarrelsAtPlayerSettlement::WriteToXMLNodeExplicit"

class cGcMissionSequenceExploreAbandonedFreighter:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceExploreAbandonedFreighter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceExploreAbandonedFreighter::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceExploreAbandonedFreighter::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceExploreAbandonedFreighter::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceExploreAbandonedFreighter::WriteToXMLNode"

class cGcMissionSequenceFeed:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceFeed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceFeed::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceFeed::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceFeed::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceFeed::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceFeed::WriteToXMLNodeExplicit"

class cGcMissionSequenceFinishSummonAnomaly:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceFinishSummonAnomaly::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceFinishSummonAnomaly::ClassPointerCreate"

class cGcMissionSequenceFreighterDefend:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceFreighterDefend::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceFreighterDefend::ClassPointerCreate"

class cGcMissionSequenceFreighterEngage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceFreighterEngage::WriteToXMLNodeExplicit"

class cGcMissionSequenceGatherForBuild:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGatherForBuild::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGatherForBuild::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGatherForBuild::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGatherForBuild::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGatherForBuild::WriteToXMLNode"

class cGcMissionSequenceGatherForRepair:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGatherForRepair::WriteToXMLNode"

class cGcMissionSequenceGetInShip:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGetInShip::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGetInShip::ClassPointerCreate"

class cGcMissionSequenceGetToExpedition:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceGetToExpedition::WriteToXMLNodeExplicit"

class cGcMissionSequenceGetToScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceGetToScanEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceGetUnits:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGetUnits::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGetUnits::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGetUnits::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGetUnits::WriteToXMLNode"

class cGcMissionSequenceGoToGalacticPoint:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGoToGalacticPoint::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGoToGalacticPoint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceGoToGalacticPoint::ClassPointerFix"

class cGcMissionSequenceGroup:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceGroup::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceGroup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMissionSequenceGroup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMissionSequenceGroup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceGroup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceGroup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceGroup::WriteToXMLNodeExplicit"

class cGcMissionSequenceCollectProduct:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCollectProduct::WriteToXMLNodeExplicit"

class cGcMissionSequenceCollectSubstance:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCollectSubstance::WriteToXMLNodeExplicit"

class cGcMissionSequenceCommunicator:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCommunicator::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCommunicator::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCommunicator::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCommunicator::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCommunicator::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCommunicator::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCommunicator::WriteToXMLNodeExplicit"

class cGcMissionSequenceCommunicatorOnTakeOff:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCommunicatorOnTakeOff::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCommunicatorOnTakeOff::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCommunicatorOnTakeOff::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCommunicatorOnTakeOff::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCommunicatorOnTakeOff::WriteToXMLNode"

class cGcMissionSequenceCompleteSeasonalMilestone:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCompleteSeasonalMilestone::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCompleteSeasonalMilestone::ClassPointerCreate"

class cGcMissionSequenceCompleteSettlementJudgement:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCompleteSettlementJudgement::WriteToXMLNode"

class cGcMissionSequenceConditionalReward:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceConditionalReward::WriteToXMLNodeExplicit"

class cGcMissionSequenceConstruct:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceConstruct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceConstruct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceConstruct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceConstruct::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceConstruct::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceConstruct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceConstruct::WriteToXMLNodeExplicit"

class cGcMissionSequenceConstructSettlementBuildingWithScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceConstructSettlementBuildingWithScanEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceCreateSpecificPulseEncounter:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCreateSpecificPulseEncounter::WriteToXMLNodeExplicit"

class cGcMissionSequenceDetailMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceDetailMessage::WriteToXMLNodeExplicit"

class cGcMissionSequenceDiscover:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceDiscover::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDiscover::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceDiscover::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceDiscover::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDiscover::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceDiscover::WriteToXMLNodeExplicit"

class cGcMissionSequenceDiscoverOnPlanet:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceDiscoverOnPlanet::WriteToXMLNodeExplicit"

class cGcMissionSequenceDisplaySeasonRewardReminder:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceDisplaySeasonRewardReminder::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDisplaySeasonRewardReminder::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceDisplaySeasonRewardReminder::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDisplaySeasonRewardReminder::WriteToXMLNode"

class cGcMissionSequenceDetailMessagePoint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceDetailMessagePoint::WriteToXMLNodeExplicit"

class cGcDailyRecurrence:
    class Cast(HookFactory):
        _name = "cGcDailyRecurrence::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDailyRecurrence::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcDailyRecurrence::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDailyRecurrence::WriteToXMLNode"

class cGcMissionSequenceAudioEvent:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceAudioEvent::WriteToXMLNodeExplicit"

class cGcMissionSequenceBounty:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceBounty::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceBounty::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceBounty::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceBounty::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceBounty::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceBounty::WriteToXMLNodeExplicit"

class cGcMissionSequenceBroadcastMessage:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceBroadcastMessage::WriteToXMLNodeExplicit"

class cGcMissionSequenceBuild:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceBuild::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceBuild::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceBuild::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceBuild::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceBuild::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceBuild::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceBuild::WriteToXMLNodeExplicit"

class cGcMissionSequenceClearInventoryHistory:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceClearInventoryHistory::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceClearInventoryHistory::ClassPointerCreate"

class cGcMissionSequenceCloseMenu:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCloseMenu::WriteToXMLNodeExplicit"

class cGcMissionSequenceCollectMoney:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSequenceCollectMoney::WriteToXMLNodeExplicit"

class cGcMissionSequenceCollectMultiProducts:
    class Cast(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSequenceCollectMultiProducts::WriteToXMLNode"

class cGcMonthlyRecurrence:
    class Cast(HookFactory):
        _name = "cGcMonthlyRecurrence::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMonthlyRecurrence::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcMonthlyRecurrence::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMonthlyRecurrence::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMonthlyRecurrence::WriteToXMLNodeExplicit"

class cGcWeeklyRecurrence:
    class Cast(HookFactory):
        _name = "cGcWeeklyRecurrence::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeeklyRecurrence::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeeklyRecurrence::WriteToXMLNode"

class cGcYearlyRecurrence:
    class Cast(HookFactory):
        _name = "cGcYearlyRecurrence::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcYearlyRecurrence::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcYearlyRecurrence::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcYearlyRecurrence::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcYearlyRecurrence::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcYearlyRecurrence::WriteToXMLNodeExplicit"

class cGcDate:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDate::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDate::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDate::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDate::WriteToXMLNodeExplicit"

class cGcDay:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDay::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDay::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDay::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDay::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDay::WriteToXMLNodeExplicit"

class cGcMissionCommunityData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionCommunityData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionCommunityData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMissionCommunityData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMissionCommunityData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionCommunityData::WriteToXMLNode"

class cGcMissionCommunityMissionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionCommunityMissionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionCommunityMissionData::GenerateHash"

class cGcMissionConsequenceClearDetailMessages:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConsequenceClearDetailMessages::ClassPointerCreate"

class cGcMissionIDEpochPair:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionIDEpochPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionIDEpochPair::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcMissionIDEpochPair::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionIDEpochPair::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcMissionIDEpochPair::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionIDEpochPair::WriteToXMLNode"

class cGcMissionSchedulesTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSchedulesTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSchedulesTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMissionSchedulesTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSchedulesTable::WriteToXMLNode"

class cGcMissionSchedulingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionSchedulingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionSchedulingData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionSchedulingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionSchedulingData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionSchedulingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionSchedulingData::WriteToXMLNodeExplicit"

class cGcMonth:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMonth::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMonth::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMonth::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMonth::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMonth::WriteToXMLNodeExplicit"

class cGcObjectiveTextFormatOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectiveTextFormatOptions::WriteToXMLNodeExplicit"

class cGcTargetMissionSurveyOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTargetMissionSurveyOptions::WriteToXMLNodeExplicit"

class cGcGenericMissionSequence:
    class cGcGenericMissionSequence(HookFactory):
        _name = "cGcGenericMissionSequence::cGcGenericMissionSequence"
        _overload: overloads.cGcGenericMissionSequence.cGcGenericMissionSequence.overloads = "cGcGenericMissionSequence *, cGcGenericMissionSequence *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcGenericMissionSequence.cGcGenericMissionSequence.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcGenericMissionSequence::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGenericMissionSequence::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcGenericMissionSequence::FixDown"
    class FixUp(HookFactory):
        _name = "cGcGenericMissionSequence::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcGenericMissionSequence::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGenericMissionSequence::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGenericMissionSequence::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGenericMissionSequence::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGenericMissionSequence::WriteToXMLNodeExplicit"

class cGcScanEventData:
    class cGcScanEventData(HookFactory):
        _name = "cGcScanEventData::cGcScanEventData"
        _overload: overloads.cGcScanEventData.cGcScanEventData.overloads = "cGcScanEventData *, cGcScanEventData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcScanEventData.cGcScanEventData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEventData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcScanEventData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcScanEventData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcScanEventData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScanEventData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanEventData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcScanEventData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventData::WriteToXMLNodeExplicit"

class cGcMissionConsequenceRemoveCommunicatorMessage:
    class Cast(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorMessage::GenerateHash"

class cGcMissionConsequenceRemoveCommunicatorTakeOffMessage:
    class Cast(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorTakeOffMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorTakeOffMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorTakeOffMessage::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConsequenceRemoveCommunicatorTakeOffMessage::WriteToXMLNode"

class cGcMissionConsequenceRemoveScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionConsequenceRemoveScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConsequenceRemoveScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConsequenceRemoveScanEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConsequenceRemoveScanEvent::WriteToXMLNode"

class cGcMissionConsequenceResetPulseEncounterOverride:
    class Cast(HookFactory):
        _name = "cGcMissionConsequenceResetPulseEncounterOverride::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConsequenceResetPulseEncounterOverride::ClassPointerCreate"

class cGcCustomNotifyTimerOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomNotifyTimerOptions::WriteToXMLNodeExplicit"

class cGcDefaultMissionItemsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultMissionItemsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDefaultMissionItemsTable::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDefaultMissionItemsTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDefaultMissionItemsTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDefaultMissionItemsTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDefaultMissionItemsTable::WriteToXMLNodeExplicit"

class cGcDefaultMissionProduct:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultMissionProduct::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDefaultMissionProduct::GenerateHash"

class cGcDefaultMissionProductEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultMissionProductEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDefaultMissionProductEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDefaultMissionProductEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDefaultMissionProductEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDefaultMissionProductEnum::WriteToXMLNodeExplicit"

class cGcDefaultMissionSubstance:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultMissionSubstance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDefaultMissionSubstance::GenerateHash"

class cGcDefaultMissionSubstanceEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultMissionSubstanceEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDefaultMissionSubstanceEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDefaultMissionSubstanceEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDefaultMissionSubstanceEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDefaultMissionSubstanceEnum::WriteToXMLNodeExplicit"

class cGcFactionSelectOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFactionSelectOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFactionSelectOptions::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFactionSelectOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFactionSelectOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFactionSelectOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFactionSelectOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFactionSelectOptions::WriteToXMLNodeExplicit"

class cGcGenericMissionStage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGenericMissionStage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGenericMissionStage::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcGenericMissionStage::FixDown"
    class FixUp(HookFactory):
        _name = "cGcGenericMissionStage::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcGenericMissionStage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGenericMissionStage::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGenericMissionStage::WriteToXMLNode"

class cGcGenericMissionVersionProgress:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGenericMissionVersionProgress::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGenericMissionVersionProgress::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGenericMissionVersionProgress::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGenericMissionVersionProgress::WriteToXMLNodeExplicit"

class cGcMissionBoardOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionBoardOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionBoardOptions::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMissionBoardOptions::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMissionBoardOptions::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMissionBoardOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionBoardOptions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionBoardOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionBoardOptions::WriteToXMLNodeExplicit"

class cGcMissionTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMissionTable::FixUp"
    class Save(HookFactory):
        _name = "cGcMissionTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionTable::WriteToXMLNode"

class cGcUniverseAddressData:
    class FixUp(HookFactory):
        _name = "cGcUniverseAddressData::FixUp"
    class ClassPointerCreate(HookFactory):
        _name = "cGcUniverseAddressData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUniverseAddressData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcUniverseAddressData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcUniverseAddressData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUniverseAddressData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcUniverseAddressData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcUniverseAddressData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUniverseAddressData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUniverseAddressData::WriteToXMLNodeExplicit"

class cGcMissionConditionSystemHasInfestedPlanet:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSystemHasInfestedPlanet::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSystemHasInfestedPlanet::ClassPointerCreate"

class cGcMissionConditionSystemPlanetTest:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSystemPlanetTest::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSystemPlanetTest::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSystemPlanetTest::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSystemPlanetTest::WriteToXMLNode"

class cGcMissionConditionSystemRace:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSystemRace::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSystemRace::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSystemRace::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSystemRace::WriteToXMLNode"

class cGcMissionConditionSystemStarClass:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSystemStarClass::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSystemStarClass::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSystemStarClass::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSystemStarClass::WriteToXMLNode"

class cGcMissionConditionTakingDamage:
    class Cast(HookFactory):
        _name = "cGcMissionConditionTakingDamage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionTakingDamage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionTakingDamage::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionTakingDamage::WriteToXMLNode"

class cGcMissionConditionTechnologyKnown:
    class Cast(HookFactory):
        _name = "cGcMissionConditionTechnologyKnown::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionTechnologyKnown::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionTechnologyKnown::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionTechnologyKnown::WriteToXMLNode"

class cGcMissionConditionTotalWarpsNumber:
    class Cast(HookFactory):
        _name = "cGcMissionConditionTotalWarpsNumber::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionTotalWarpsNumber::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionTotalWarpsNumber::WriteToXMLNode"

class cGcMissionConditionTutorialEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionTutorialEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionTutorialEnabled::ClassPointerCreate"

class cGcMissionConditionUnclaimedStageReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionUnclaimedStageReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionUnclaimedStageReward::ClassPointerCreate"

class cGcMissionConditionUnderwaterDepth:
    class Cast(HookFactory):
        _name = "cGcMissionConditionUnderwaterDepth::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionUnderwaterDepth::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionUnderwaterDepth::WriteToXMLNode"

class cGcMissionConditionUsingPortal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionUsingPortal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionUsingPortal::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionUsingPortal::WriteToXMLNode"

class cGcMissionConditionUsingThirdPersonCamera:
    class Cast(HookFactory):
        _name = "cGcMissionConditionUsingThirdPersonCamera::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionUsingThirdPersonCamera::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionUsingThirdPersonCamera::WriteToXMLNode"

class cGcMissionConditionVisorActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionVisorActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionVisorActive::ClassPointerCreate"

class cGcMissionConditionWaitForPirates:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionWaitForPirates::WriteToXMLNodeExplicit"

class cGcMissionConditionWaitForTime:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWaitForTime::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWaitForTime::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWaitForTime::WriteToXMLNode"

class cGcMissionConditionWarping:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWarping::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWarping::ClassPointerCreate"

class cGcMissionConditionWaterInSystem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWaterInSystem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWaterInSystem::ClassPointerCreate"

class cGcMissionConditionWaterPlanet:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWaterPlanet::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWaterPlanet::ClassPointerCreate"

class cGcMissionConditionWeaponMode:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWeaponMode::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWeaponMode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionWeaponMode::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWeaponMode::WriteToXMLNode"

class cGcMissionConditionWeather:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWeather::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWeather::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionWeather::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionWeather::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWeather::WriteToXMLNode"

class cGcMissionConditionWristMenuOpen:
    class Cast(HookFactory):
        _name = "cGcMissionConditionWristMenuOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWristMenuOpen::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionWristMenuOpen::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWristMenuOpen::WriteToXMLNode"

class cGcMissionConditionWordCategoryKnown:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionWordCategoryKnown::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionWordCategoryKnown::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionWordCategoryKnown::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionWordCategoryKnown::WriteToXMLNodeExplicit"

class cGcMissionConditionProductKnown:
    class Cast(HookFactory):
        _name = "cGcMissionConditionProductKnown::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionProductKnown::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionProductKnown::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionProductKnown::WriteToXMLNode"

class cGcMissionConditionPulseEncounterActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPulseEncounterActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPulseEncounterActive::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionPulseEncounterActive::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionPulseEncounterActive::WriteToXMLNode"

class cGcMissionConditionPulseEncounterOverriden:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPulseEncounterOverriden::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPulseEncounterOverriden::ClassPointerCreate"

class cGcMissionConditionReadyToSpawnPirates:
    class Cast(HookFactory):
        _name = "cGcMissionConditionReadyToSpawnPirates::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionReadyToSpawnPirates::ClassPointerCreate"

class cGcMissionConditionRefinerActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionRefinerActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionRefinerActive::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionRefinerActive::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionRefinerActive::WriteToXMLNode"

class cGcMissionConditionRefinerHasOutput:
    class Cast(HookFactory):
        _name = "cGcMissionConditionRefinerHasOutput::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionRefinerHasOutput::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionRefinerHasOutput::WriteToXMLNode"

class cGcMissionConditionRequestedPhoto:
    class Cast(HookFactory):
        _name = "cGcMissionConditionRequestedPhoto::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionRequestedPhoto::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionRequestedPhoto::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionRequestedPhoto::WriteToXMLNode"

class cGcMissionConditionRidingCreature:
    class Cast(HookFactory):
        _name = "cGcMissionConditionRidingCreature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionRidingCreature::ClassPointerCreate"

class cGcMissionConditionSeasonNumber:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSeasonNumber::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSeasonNumber::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSeasonNumber::WriteToXMLNode"

class cGcMissionConditionSeasonRewardUnlocked:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSeasonRewardUnlocked::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSeasonRewardUnlocked::ClassPointerCreate"

class cGcMissionConditionSeasonRewardsRecipe:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSeasonRewardsRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSeasonRewardsRecipe::ClassPointerCreate"

class cGcMissionConditionSentinelLevel:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSentinelLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSentinelLevel::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSentinelLevel::WriteToXMLNode"

class cGcMissionConditionSentinelsDisabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSentinelsDisabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSentinelsDisabled::ClassPointerCreate"

class cGcMissionConditionSettlementBuildingsAllStarted:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSettlementBuildingsAllStarted::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSettlementBuildingsAllStarted::ClassPointerCreate"

class cGcMissionConditionSettlementStatLevel:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionSettlementStatLevel::WriteToXMLNodeExplicit"

class cGcMissionConditionSettlementsEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSettlementsEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSettlementsEnabled::ClassPointerCreate"

class cGcMissionConditionShieldDown:
    class Cast(HookFactory):
        _name = "cGcMissionConditionShieldDown::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionShieldDown::ClassPointerCreate"

class cGcMissionConditionShipEngineStatus:
    class Cast(HookFactory):
        _name = "cGcMissionConditionShipEngineStatus::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionShipEngineStatus::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionShipEngineStatus::WriteToXMLNode"

class cGcMissionConditionSpaceCombatEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSpaceCombatEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSpaceCombatEnabled::ClassPointerCreate"

class cGcMissionConditionSpecialKnown:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSpecialKnown::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSpecialKnown::ClassPointerCreate"

class cGcMissionConditionSquadronPilotsOwned:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSquadronPilotsOwned::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSquadronPilotsOwned::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSquadronPilotsOwned::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSquadronPilotsOwned::WriteToXMLNode"

class cGcMissionConditionSquadronSlots:
    class Cast(HookFactory):
        _name = "cGcMissionConditionSquadronSlots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionSquadronSlots::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionSquadronSlots::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionSquadronSlots::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionSquadronSlots::WriteToXMLNode"

class cGcMissionConditionStartWithAllPartsKnown:
    class Cast(HookFactory):
        _name = "cGcMissionConditionStartWithAllPartsKnown::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionStartWithAllPartsKnown::ClassPointerCreate"

class cGcMissionConditionStatChange:
    class Cast(HookFactory):
        _name = "cGcMissionConditionStatChange::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionStatChange::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionStatChange::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionStatChange::WriteToXMLNode"

class cGcMissionConditionStatDiff:
    class Cast(HookFactory):
        _name = "cGcMissionConditionStatDiff::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionStatDiff::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionStatDiff::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionStatDiff::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionStatDiff::WriteToXMLNode"

class cGcMissionConditionStatLevel:
    class Cast(HookFactory):
        _name = "cGcMissionConditionStatLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionStatLevel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionStatLevel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionStatLevel::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMissionConditionStatLevel::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionStatLevel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionStatLevel::WriteToXMLNodeExplicit"

class cGcMissionConditionMissionCompleted:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMissionCompleted::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMissionCompleted::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionMissionCompleted::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionMissionCompleted::WriteToXMLNode"

class cGcMissionConditionMissionMessage:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMissionMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMissionMessage::ClassPointerCreate"

class cGcMissionConditionMissionMessagePortal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMissionMessagePortal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMissionMessagePortal::ClassPointerCreate"

class cGcMissionConditionMissionMessageWarp:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMissionMessageWarp::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMissionMessageWarp::ClassPointerCreate"

class cGcMissionConditionMissionSelected:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMissionSelected::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMissionSelected::ClassPointerCreate"

class cGcMissionConditionMultiplayerFreighterAvailable:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMultiplayerFreighterAvailable::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMultiplayerFreighterAvailable::ClassPointerCreate"

class cGcMissionConditionNPCHabitationHasWorker:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNPCHabitationHasWorker::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNPCHabitationHasWorker::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionNPCHabitationHasWorker::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNPCHabitationHasWorker::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionNPCHabitationHasWorker::WriteToXMLNodeExplicit"

class cGcMissionConditionNearObject:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNearObject::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNearObject::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNearObject::WriteToXMLNode"

class cGcMissionConditionNearPole:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNearPole::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNearPole::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNearPole::WriteToXMLNode"

class cGcMissionConditionNearScanEvent:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNearScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNearScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionNearScanEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNearScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionNearScanEvent::WriteToXMLNodeExplicit"

class cGcMissionConditionNearestBuilding:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNearestBuilding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNearestBuilding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionNearestBuilding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNearestBuilding::WriteToXMLNode"

class cGcMissionConditionNexusEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNexusEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNexusEnabled::ClassPointerCreate"

class cGcMissionConditionNumAtlasStationsVisited:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNumAtlasStationsVisited::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNumAtlasStationsVisited::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionNumAtlasStationsVisited::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNumAtlasStationsVisited::WriteToXMLNode"

class cGcMissionConditionNumberOfShipsOwned:
    class Cast(HookFactory):
        _name = "cGcMissionConditionNumberOfShipsOwned::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionNumberOfShipsOwned::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionNumberOfShipsOwned::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionNumberOfShipsOwned::WriteToXMLNode"

class cGcMissionConditionOnFootCombatEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionOnFootCombatEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionOnFootCombatEnabled::ClassPointerCreate"

class cGcMissionConditionOnMultiplayerMission:
    class Cast(HookFactory):
        _name = "cGcMissionConditionOnMultiplayerMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionOnMultiplayerMission::ClassPointerCreate"

class cGcMissionConditionOnOtherSideOfPortal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionOnOtherSideOfPortal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionOnOtherSideOfPortal::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionOnOtherSideOfPortal::WriteToXMLNode"

class cGcMissionConditionOnPlanetWithSandwormsOverriden:
    class Cast(HookFactory):
        _name = "cGcMissionConditionOnPlanetWithSandwormsOverriden::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionOnPlanetWithSandwormsOverriden::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionOnPlanetWithSandwormsOverriden::WriteToXMLNode"

class cGcMissionConditionPadActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPadActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPadActive::ClassPointerCreate"

class cGcMissionConditionPercentageChance:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPercentageChance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPercentageChance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionPercentageChance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionPercentageChance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionPercentageChance::WriteToXMLNodeExplicit"

class cGcMissionConditionPirateSystem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPirateSystem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPirateSystem::ClassPointerCreate"

class cGcMissionConditionPlanetAttackPiratesActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPlanetAttackPiratesActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPlanetAttackPiratesActive::ClassPointerCreate"

class cGcMissionConditionPlanetCreatureRoles:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPlanetCreatureRoles::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPlanetCreatureRoles::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionPlanetCreatureRoles::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionPlanetCreatureRoles::WriteToXMLNode"

class cGcMissionConditionPlanetResourceHint:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPlanetResourceHint::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPlanetResourceHint::ClassPointerCreate"

class cGcMissionConditionPlanetStatLevel:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionPlanetStatLevel::WriteToXMLNodeExplicit"

class cGcMissionConditionPrimaryExocraft:
    class Cast(HookFactory):
        _name = "cGcMissionConditionPrimaryExocraft::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionPrimaryExocraft::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionPrimaryExocraft::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionPrimaryExocraft::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionPrimaryExocraft::WriteToXMLNodeExplicit"

class cGcMissionConditionInVR:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInVR::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInVR::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionInVR::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInVR::WriteToXMLNode"

class cGcMissionConditionInventoryOpen:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInventoryOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInventoryOpen::ClassPointerCreate"

class cGcMissionConditionInventorySlots:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInventorySlots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInventorySlots::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionInventorySlots::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionInventorySlots::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInventorySlots::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionInventorySlots::WriteToXMLNodeExplicit"

class cGcMissionConditionIsAbandFreighterDoorOpen:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsAbandFreighterDoorOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsAbandFreighterDoorOpen::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsAbandFreighterDoorOpen::WriteToXMLNode"

class cGcMissionConditionIsAnomalyLoaded:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsAnomalyLoaded::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsAnomalyLoaded::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionIsAnomalyLoaded::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsAnomalyLoaded::WriteToXMLNode"

class cGcMissionConditionIsCurrentMission:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsCurrentMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsCurrentMission::ClassPointerCreate"

class cGcMissionConditionIsDepotDestroyed:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsDepotDestroyed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsDepotDestroyed::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsDepotDestroyed::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsDepotDestroyed::WriteToXMLNode"

class cGcMissionConditionIsFrigateFlybyActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsFrigateFlybyActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsFrigateFlybyActive::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionIsFrigateFlybyActive::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsFrigateFlybyActive::WriteToXMLNode"

class cGcMissionConditionIsGrabbed:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsGrabbed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsGrabbed::ClassPointerCreate"

class cGcMissionConditionIsLookingAtAnomaly:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsLookingAtAnomaly::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsLookingAtAnomaly::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsLookingAtAnomaly::WriteToXMLNode"

class cGcMissionConditionIsMissionInProgress:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsMissionInProgress::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsMissionInProgress::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsMissionInProgress::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsMissionInProgress::WriteToXMLNode"

class cGcMissionConditionIsPartyPlanetUnlocked:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsPartyPlanetUnlocked::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsPartyPlanetUnlocked::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsPartyPlanetUnlocked::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsPartyPlanetUnlocked::WriteToXMLNode"

class cGcMissionConditionIsPlayerWanted:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsPlayerWanted::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsPlayerWanted::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionIsPlayerWanted::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsPlayerWanted::WriteToXMLNode"

class cGcMissionConditionIsPlayerWeak:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsPlayerWeak::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsPlayerWeak::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsPlayerWeak::WriteToXMLNode"

class cGcMissionConditionIsScanEventActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsScanEventActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsScanEventActive::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsScanEventActive::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsScanEventActive::WriteToXMLNode"

class cGcMissionConditionIsScanEventLocal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocal::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocal::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocal::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocal::WriteToXMLNodeExplicit"

class cGcMissionConditionIsScanEventLocalOrNear:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocalOrNear::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocalOrNear::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsScanEventLocalOrNear::WriteToXMLNode"

class cGcMissionConditionIsScanEventOnCurrentPlanet:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsScanEventOnCurrentPlanet::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsScanEventOnCurrentPlanet::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsScanEventOnCurrentPlanet::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsScanEventOnCurrentPlanet::WriteToXMLNode"

class cGcMissionConditionIsScanEventRepaired:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsScanEventRepaired::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsScanEventRepaired::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsScanEventRepaired::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsScanEventRepaired::WriteToXMLNode"

class cGcMissionConditionIsSurveying:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsSurveying::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsSurveying::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsSurveying::WriteToXMLNode"

class cGcMissionConditionIsTechnologyRepaired:
    class Cast(HookFactory):
        _name = "cGcMissionConditionIsTechnologyRepaired::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionIsTechnologyRepaired::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionIsTechnologyRepaired::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionIsTechnologyRepaired::WriteToXMLNode"

class cGcMissionConditionItemCostsEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionItemCostsEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionItemCostsEnabled::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionItemCostsEnabled::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionItemCostsEnabled::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionItemCostsEnabled::WriteToXMLNodeExplicit"

class cGcMissionConditionLifeSupportEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionLifeSupportEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionLifeSupportEnabled::ClassPointerCreate"

class cGcMissionConditionLocalScanActive:
    class Cast(HookFactory):
        _name = "cGcMissionConditionLocalScanActive::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionLocalScanActive::ClassPointerCreate"

class cGcMissionConditionLocation:
    class Cast(HookFactory):
        _name = "cGcMissionConditionLocation::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionLocation::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionLocation::WriteToXMLNode"

class cGcMissionConditionMessageBeaconsQuery:
    class Cast(HookFactory):
        _name = "cGcMissionConditionMessageBeaconsQuery::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionMessageBeaconsQuery::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionMessageBeaconsQuery::WriteToXMLNode"

class cGcMissionConditionHasMultiTool:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasMultiTool::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasMultiTool::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasMultiTool::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasMultiTool::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasMultiTool::WriteToXMLNode"

class cGcMissionConditionHasPendingSettlementJudgement:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasPendingSettlementJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasPendingSettlementJudgement::ClassPointerCreate"

class cGcMissionConditionHasPlatformReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasPlatformReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasPlatformReward::ClassPointerCreate"

class cGcMissionConditionHasProcMissionForFaction:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasProcMissionForFaction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasProcMissionForFaction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasProcMissionForFaction::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasProcMissionForFaction::WriteToXMLNode"

class cGcMissionConditionHasProcProduct:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasProcProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasProcProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasProcProduct::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasProcProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasProcProduct::WriteToXMLNodeExplicit"

class cGcMissionConditionHasProcTechnology:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasProcTechnology::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasProcTechnology::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasProcTechnology::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasProcTechnology::WriteToXMLNode"

class cGcMissionConditionHasProduct:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasProduct::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMissionConditionHasProduct::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasProduct::WriteToXMLNodeExplicit"

class cGcMissionConditionHasSeasonalReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSeasonalReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSeasonalReward::ClassPointerCreate"

class cGcMissionConditionHasSettlement:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSettlement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSettlement::ClassPointerCreate"

class cGcMissionConditionHasSettlementBuilding:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSettlementBuilding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSettlementBuilding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasSettlementBuilding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasSettlementBuilding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasSettlementBuilding::WriteToXMLNodeExplicit"

class cGcMissionConditionHasSettlementLocal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSettlementLocal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSettlementLocal::ClassPointerCreate"

class cGcMissionConditionHasSettlementProductPending:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSettlementProductPending::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSettlementProductPending::ClassPointerCreate"

class cGcMissionConditionHasShip:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasShip::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasShip::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasShip::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasShip::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasShip::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasShip::WriteToXMLNodeExplicit"

class cGcMissionConditionHasSpareProcTech:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSpareProcTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSpareProcTech::ClassPointerCreate"

class cGcMissionConditionHasSubstance:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasSubstance::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasSubstance::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasSubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasSubstance::WriteToXMLNodeExplicit"

class cGcMissionConditionHasTechnology:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasTechnology::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasTechnology::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasTechnology::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasTechnology::WriteToXMLNode"

class cGcMissionConditionHasTwitchReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasTwitchReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasTwitchReward::ClassPointerCreate"

class cGcMissionConditionHazard:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHazard::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHazard::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHazard::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHazard::WriteToXMLNode"

class cGcMissionConditionHazardsEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHazardsEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHazardsEnabled::ClassPointerCreate"

class cGcMissionConditionInCombat:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInCombat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInCombat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionInCombat::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInCombat::WriteToXMLNode"

class cGcMissionConditionInMultiplayer:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInMultiplayer::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInMultiplayer::ClassPointerCreate"

class cGcMissionConditionInSeasonalUA:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInSeasonalUA::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInSeasonalUA::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionInSeasonalUA::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInSeasonalUA::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionInSeasonalUA::WriteToXMLNodeExplicit"

class cGcMissionConditionInUA:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInUA::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInUA::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInUA::WriteToXMLNode"

class cGcMissionConditionInteractionIndexChanged:
    class Cast(HookFactory):
        _name = "cGcMissionConditionInteractionIndexChanged::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionInteractionIndexChanged::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionInteractionIndexChanged::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionInteractionIndexChanged::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionInteractionIndexChanged::WriteToXMLNodeExplicit"

class cGcCreaturePetPartHider:
    class SetDefaults(HookFactory):
        _name = "cGcCreaturePetPartHider::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetPartHider::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreaturePetPartHider::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetPartHider::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetPartHider::WriteToXMLNode"

class cGcMissionConditionExtraSuitSlots:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExtraSuitSlots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExtraSuitSlots::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionExtraSuitSlots::WriteToXMLNode"

class cGcMissionConditionFactionRank:
    class Cast(HookFactory):
        _name = "cGcMissionConditionFactionRank::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionFactionRank::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionFactionRank::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionFactionRank::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionFactionRank::WriteToXMLNodeExplicit"

class cGcMissionConditionFeedingCreatures:
    class Cast(HookFactory):
        _name = "cGcMissionConditionFeedingCreatures::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionFeedingCreatures::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionFeedingCreatures::WriteToXMLNode"

class cGcMissionConditionForceHideMultiplayer:
    class Cast(HookFactory):
        _name = "cGcMissionConditionForceHideMultiplayer::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionForceHideMultiplayer::ClassPointerCreate"

class cGcMissionConditionFreighterBattle:
    class Cast(HookFactory):
        _name = "cGcMissionConditionFreighterBattle::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionFreighterBattle::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionFreighterBattle::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionFreighterBattle::WriteToXMLNode"

class cGcMissionConditionFrigateCount:
    class Cast(HookFactory):
        _name = "cGcMissionConditionFrigateCount::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionFrigateCount::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionFrigateCount::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionFrigateCount::WriteToXMLNode"

class cGcMissionConditionGameMode:
    class Cast(HookFactory):
        _name = "cGcMissionConditionGameMode::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionGameMode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionGameMode::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionGameMode::WriteToXMLNode"

class cGcMissionConditionGlobalMission:
    class Cast(HookFactory):
        _name = "cGcMissionConditionGlobalMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionGlobalMission::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionGlobalMission::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionGlobalMission::WriteToXMLNode"

class cGcMissionConditionGroup:
    class Cast(HookFactory):
        _name = "cGcMissionConditionGroup::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionGroup::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionGroup::WriteToXMLNode"

class cGcMissionConditionGunOut:
    class Cast(HookFactory):
        _name = "cGcMissionConditionGunOut::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionGunOut::ClassPointerCreate"

class cGcMissionConditionHasActiveDetailMessage:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasActiveDetailMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasActiveDetailMessage::ClassPointerCreate"

class cGcMissionConditionHasActiveStatsMessage:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasActiveStatsMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasActiveStatsMessage::ClassPointerCreate"

class cGcMissionConditionHasAnySettlementBuildingInProgress:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasAnySettlementBuildingInProgress::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasAnySettlementBuildingInProgress::ClassPointerCreate"

class cGcMissionConditionHasCommunicatorSignal:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasCommunicatorSignal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasCommunicatorSignal::ClassPointerCreate"

class cGcMissionConditionHasCreatureEggItem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasCreatureEggItem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasCreatureEggItem::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasCreatureEggItem::WriteToXMLNode"

class cGcMissionConditionHasEndpointForEvent:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasEndpointForEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasEndpointForEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasEndpointForEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasEndpointForEvent::WriteToXMLNode"

class cGcMissionConditionHasEntitlement:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasEntitlement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasEntitlement::ClassPointerCreate"

class cGcMissionConditionHasExocraft:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasExocraft::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasExocraft::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasExocraft::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasExocraft::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasExocraft::WriteToXMLNodeExplicit"

class cGcMissionConditionHasFreighter:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasFreighter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasFreighter::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasFreighter::WriteToXMLNode"

class cGcMissionConditionHasFuel:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasFuel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasFuel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasFuel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasFuel::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasFuel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasFuel::WriteToXMLNodeExplicit"

class cGcMissionConditionHasFuelForTakeoff:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasFuelForTakeoff::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasFuelForTakeoff::ClassPointerCreate"

class cGcMissionConditionHasGalacticFeature:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasGalacticFeature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasGalacticFeature::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasGalacticFeature::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasGalacticFeature::WriteToXMLNode"

class cGcMissionConditionHasGrabbableTarget:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasGrabbableTarget::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasGrabbableTarget::ClassPointerCreate"

class cGcMissionConditionHasIllegalGoods:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasIllegalGoods::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasIllegalGoods::ClassPointerCreate"

class cGcMissionConditionHasIngredientsForItem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasIngredientsForItem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasIngredientsForItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasIngredientsForItem::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionHasIngredientsForItem::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasIngredientsForItem::WriteToXMLNode"

class cGcMissionConditionHasLegacyBasePending:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasLegacyBasePending::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasLegacyBasePending::ClassPointerCreate"

class cGcMissionConditionHasMoney:
    class Cast(HookFactory):
        _name = "cGcMissionConditionHasMoney::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionHasMoney::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionHasMoney::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionHasMoney::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionHasMoney::WriteToXMLNodeExplicit"

class cGcMissionConditionBaseRequiresPower:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBaseRequiresPower::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBaseRequiresPower::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBaseRequiresPower::WriteToXMLNode"

class cGcMissionConditionBiomeType:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBiomeType::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBiomeType::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionBiomeType::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBiomeType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionBiomeType::WriteToXMLNodeExplicit"

class cGcMissionConditionBuildMenuOpen:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBuildMenuOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBuildMenuOpen::ClassPointerCreate"

class cGcMissionConditionCameraControlStealing:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCameraControlStealing::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCameraControlStealing::ClassPointerCreate"

class cGcMissionConditionCanReceiveReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCanReceiveReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCanReceiveReward::ClassPointerCreate"

class cGcMissionConditionCanSummonExocraft:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCanSummonExocraft::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCanSummonExocraft::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCanSummonExocraft::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCanSummonExocraft::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionCanSummonExocraft::WriteToXMLNodeExplicit"

class cGcMissionConditionCommunityResearchTier:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCommunityResearchTier::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCommunityResearchTier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCommunityResearchTier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionCommunityResearchTier::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCommunityResearchTier::WriteToXMLNode"

class cGcMissionConditionConvertedFromSeason:
    class Cast(HookFactory):
        _name = "cGcMissionConditionConvertedFromSeason::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionConvertedFromSeason::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionConvertedFromSeason::WriteToXMLNode"

class cGcMissionConditionCreatureOwned:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureOwned::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureOwned::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCreatureOwned::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionCreatureOwned::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCreatureOwned::WriteToXMLNode"

class cGcMissionConditionCreatureReadyToHatch:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureReadyToHatch::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureReadyToHatch::ClassPointerCreate"

class cGcMissionConditionCreatureReadyToLay:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureReadyToLay::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureReadyToLay::ClassPointerCreate"

class cGcMissionConditionCreatureSlots:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureSlots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureSlots::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCreatureSlots::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCreatureSlots::WriteToXMLNode"

class cGcMissionConditionCreatureSummoned:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureSummoned::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureSummoned::ClassPointerCreate"

class cGcMissionConditionCreatureTrust:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCreatureTrust::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCreatureTrust::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCreatureTrust::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCreatureTrust::WriteToXMLNode"

class cGcMissionConditionCriticalMissionsDone:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCriticalMissionsDone::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCriticalMissionsDone::ClassPointerCreate"

class cGcMissionConditionCurrentSlope:
    class Cast(HookFactory):
        _name = "cGcMissionConditionCurrentSlope::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionCurrentSlope::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionCurrentSlope::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionCurrentSlope::WriteToXMLNode"

class cGcMissionConditionDamagedFrigateAtHome:
    class Cast(HookFactory):
        _name = "cGcMissionConditionDamagedFrigateAtHome::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionDamagedFrigateAtHome::ClassPointerCreate"

class cGcMissionConditionDefaultItem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionDefaultItem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionDefaultItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionDefaultItem::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionDefaultItem::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionDefaultItem::WriteToXMLNodeExplicit"

class cGcMissionConditionEggMachinePageOpen:
    class Cast(HookFactory):
        _name = "cGcMissionConditionEggMachinePageOpen::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionEggMachinePageOpen::ClassPointerCreate"

class cGcMissionConditionElevation:
    class Cast(HookFactory):
        _name = "cGcMissionConditionElevation::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionElevation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionElevation::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionElevation::WriteToXMLNode"

class cGcMissionConditionEventRequiresRGB:
    class Cast(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionEventRequiresRGB::WriteToXMLNodeExplicit"

class cGcMissionConditionExocraftMoving:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExocraftMoving::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExocraftMoving::ClassPointerCreate"

class cGcMissionConditionExpeditionContainsReward:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExpeditionContainsReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExpeditionContainsReward::ClassPointerCreate"

class cGcMissionConditionExpeditionCount:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionExpeditionCount::WriteToXMLNodeExplicit"

class cGcMissionConditionExpeditionNearlyOver:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExpeditionNearlyOver::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExpeditionNearlyOver::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionExpeditionNearlyOver::WriteToXMLNode"

class cGcMissionConditionExpeditionProgress:
    class Cast(HookFactory):
        _name = "cGcMissionConditionExpeditionProgress::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionExpeditionProgress::ClassPointerCreate"

class cGcMissionConditionAIShipCount:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAIShipCount::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAIShipCount::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionAIShipCount::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionAIShipCount::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionAIShipCount::WriteToXMLNodeExplicit"

class cGcMissionConditionAbandonedFreighterExplored:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAbandonedFreighterExplored::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAbandonedFreighterExplored::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionAbandonedFreighterExplored::WriteToXMLNode"

class cGcMissionConditionAbandonedOrEmptySystem:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAbandonedOrEmptySystem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAbandonedOrEmptySystem::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionAbandonedOrEmptySystem::WriteToXMLNode"

class cGcMissionConditionAimingTeleporter:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAimingTeleporter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAimingTeleporter::ClassPointerCreate"

class cGcMissionConditionAlienPodAggroed:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAlienPodAggroed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAlienPodAggroed::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionAlienPodAggroed::WriteToXMLNode"

class cGcMissionConditionAllMilestonesComplete:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAllMilestonesComplete::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAllMilestonesComplete::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionAllMilestonesComplete::WriteToXMLNode"

class cGcMissionConditionAreDroneHivePartsDestroyed:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAreDroneHivePartsDestroyed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAreDroneHivePartsDestroyed::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionAreDroneHivePartsDestroyed::GenerateHash"

class cGcMissionConditionAutoPowerEnabled:
    class Cast(HookFactory):
        _name = "cGcMissionConditionAutoPowerEnabled::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionAutoPowerEnabled::ClassPointerCreate"

class cGcMissionConditionBaseClaimed:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionBaseClaimed::WriteToXMLNodeExplicit"

class cGcMissionConditionBasePartBuilt:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionBasePartBuilt::WriteToXMLNodeExplicit"

class cGcMissionConditionBasePartNear:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBasePartNear::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBasePartNear::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBasePartNear::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBasePartNear::WriteToXMLNode"

class cGcMissionConditionBasePartsQuery:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionBasePartsQuery::WriteToXMLNodeExplicit"

class cGcMissionConditionBasePowerGenerated:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBasePowerGenerated::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBasePowerGenerated::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBasePowerGenerated::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBasePowerGenerated::WriteToXMLNode"

class cGcMissionConditionBaseQuery:
    class Cast(HookFactory):
        _name = "cGcMissionConditionBaseQuery::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMissionConditionBaseQuery::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMissionConditionBaseQuery::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMissionConditionBaseQuery::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMissionConditionBaseQuery::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMissionConditionBaseQuery::WriteToXMLNodeExplicit"

class cGcModelExplosionRule:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModelExplosionRule::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcModelExplosionRule::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcModelExplosionRule::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcModelExplosionRule::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModelExplosionRule::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcModelExplosionRule::WriteToXMLNodeExplicit"

class cGcModelExplosionRules:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModelExplosionRules::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModelExplosionRules::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcModelExplosionRules::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcModelExplosionRules::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModelExplosionRules::WriteToXMLNode"

class cGcScanEventTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEventTable::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcScanEventTable::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcScanEventTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcScanEventTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventTable::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScanEventTable::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventTable::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcScanEventTable::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventTable::WriteToXMLNodeExplicit"

class cGcScanEventTableType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventTableType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventTableType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventTableType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventTableType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventTableType::WriteToXMLNodeExplicit"

class cGcScanEventTriggers:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventTriggers::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEventTriggers::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcScanEventTriggers::DeallocateDynamic"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventTriggers::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScanEventTriggers::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventTriggers::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanEventTriggers::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcScanEventTriggers::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventTriggers::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventTriggers::WriteToXMLNodeExplicit"

class cGcSceneSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSceneSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSceneSettings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSceneSettings::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSceneSettings::GenerateHash"
    class Save(HookFactory):
        _name = "cGcSceneSettings::Save"
    class SetDefaults(HookFactory):
        _name = "cGcSceneSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSceneSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSceneSettings::WriteToXMLNodeExplicit"

class cGcSpaceshipClasses:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceshipClasses::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceshipClasses::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSpaceshipClasses::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipClasses::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSpaceshipClasses::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipClasses::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipClasses::WriteToXMLNodeExplicit"

class cGcWeaponClasses:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeaponClasses::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeaponClasses::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeaponClasses::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeaponClasses::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeaponClasses::WriteToXMLNodeExplicit"

class cGcQuestItemPlacementRule:
    class Cast(HookFactory):
        _name = "cGcQuestItemPlacementRule::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcQuestItemPlacementRule::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcQuestItemPlacementRule::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcQuestItemPlacementRule::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcQuestItemPlacementRule::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcQuestItemPlacementRule::WriteToXMLNodeExplicit"

class cGcRoomCountRule:
    class Cast(HookFactory):
        _name = "cGcRoomCountRule::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRoomCountRule::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRoomCountRule::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRoomCountRule::WriteToXMLNode"

class cGcRoomSequenceRule:
    class Cast(HookFactory):
        _name = "cGcRoomSequenceRule::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRoomSequenceRule::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRoomSequenceRule::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRoomSequenceRule::WriteToXMLNode"

class cGcPassiveFrigateIncomeArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPassiveFrigateIncomeArray::WriteToXMLNodeExplicit"

class cGcPhysicsCollisionGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPhysicsCollisionGroups::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPhysicsCollisionGroups::WriteToXMLNode"

class cGcRegionHotspotBiomeGases:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRegionHotspotBiomeGases::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRegionHotspotBiomeGases::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRegionHotspotBiomeGases::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRegionHotspotBiomeGases::WriteToXMLNodeExplicit"

class cGcRegionHotspotData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRegionHotspotData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRegionHotspotData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRegionHotspotData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRegionHotspotData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRegionHotspotData::WriteToXMLNodeExplicit"

class cGcRegionHotspotSubstance:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRegionHotspotSubstance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRegionHotspotSubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRegionHotspotSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRegionHotspotSubstance::WriteToXMLNodeExplicit"

class cGcRegionHotspotTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRegionHotspotTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRegionHotspotTypes::WriteToXMLNode"

class cGcRegionHotspotsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRegionHotspotsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRegionHotspotsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcRegionHotspotsTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRegionHotspotsTable::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcRegionHotspotsTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRegionHotspotsTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRegionHotspotsTable::WriteToXMLNodeExplicit"

class cGcScanEventSave:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventSave::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEventSave::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcScanEventSave::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcScanEventSave::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventSave::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScanEventSave::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventSave::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanEventSave::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcScanEventSave::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventSave::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventSave::WriteToXMLNodeExplicit"

class cGcScanEventSolarSystemLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScanEventSolarSystemLookup::WriteToXMLNodeExplicit"

class cGcExpeditionEventOccurrenceRate:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionEventOccurrenceRate::WriteToXMLNodeExplicit"

class cGcExpeditionEventTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionEventTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionEventTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExpeditionEventTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionEventTable::WriteToXMLNode"

class cGcExpeditionInterventionEventData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionInterventionEventData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionInterventionEventData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionInterventionEventData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionInterventionEventData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionInterventionEventData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionInterventionEventData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionInterventionEventData::WriteToXMLNodeExplicit"

class cGcFreighterBaseOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterBaseOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterBaseOption::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterBaseOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFreighterBaseOption::WriteToXMLNodeExplicit"

class cGcFreighterBaseOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterBaseOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterBaseOptions::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterBaseOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterBaseOptions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterBaseOptions::WriteToXMLNode"

class cGcFreighterDungeonParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterDungeonParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterDungeonParams::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcFreighterDungeonParams::FixDown"
    class FixUp(HookFactory):
        _name = "cGcFreighterDungeonParams::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterDungeonParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterDungeonParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFreighterDungeonParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterDungeonParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFreighterDungeonParams::WriteToXMLNodeExplicit"

class cGcFrigateClassCost:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateClassCost::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateClassCost::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateClassCost::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateClassCost::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateClassCost::WriteToXMLNodeExplicit"

class cGcFrigateFlybyLayout:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateFlybyLayout::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFrigateFlybyLayout::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateFlybyLayout::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateFlybyLayout::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateFlybyLayout::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateFlybyLayout::WriteToXMLNodeExplicit"

class cGcFrigateFlybyOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateFlybyOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFrigateFlybyOption::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateFlybyOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateFlybyOption::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateFlybyOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateFlybyOption::WriteToXMLNodeExplicit"

class cGcFrigateFlybyTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateFlybyTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFrigateFlybyTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcFrigateFlybyTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateFlybyTable::WriteToXMLNode"

class cGcFrigateStatRange:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateStatRange::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateStatRange::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateStatRange::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateStatRange::WriteToXMLNodeExplicit"

class cGcFrigateStats:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateStats::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateStats::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateStats::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateStats::WriteToXMLNodeExplicit"

class cGcFrigateStatsByClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateStatsByClass::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateStatsByClass::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFrigateStatsByClass::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateStatsByClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateStatsByClass::WriteToXMLNodeExplicit"

class cGcFrigateTraitData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFrigateTraitData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateTraitData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateTraitData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateTraitData::WriteToXMLNodeExplicit"

class cGcFrigateTraitIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitIcons::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateTraitIcons::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFrigateTraitIcons::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitIcons::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateTraitIcons::WriteToXMLNodeExplicit"

class cGcFrigateTraitStrengthByType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitStrengthByType::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrengthByType::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFrigateTraitStrengthByType::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrengthByType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateTraitStrengthByType::WriteToXMLNodeExplicit"

class cGcFrigateTraitStrengthValues:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateTraitStrengthValues::WriteToXMLNodeExplicit"

class cGcFrigateTraitTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFrigateTraitTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcFrigateTraitTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitTable::WriteToXMLNode"

class cGcFrigateUITraitLines:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateUITraitLines::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateUITraitLines::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateUITraitLines::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFrigateUITraitLines::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateUITraitLines::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateUITraitLines::WriteToXMLNodeExplicit"

class cGcInventoryClassCostMultiplier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryClassCostMultiplier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryClassCostMultiplier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryClassCostMultiplier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryClassCostMultiplier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryClassCostMultiplier::WriteToXMLNodeExplicit"

class cGcPassiveFrigateIncome:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPassiveFrigateIncome::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPassiveFrigateIncome::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPassiveFrigateIncome::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPassiveFrigateIncome::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPassiveFrigateIncome::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPassiveFrigateIncome::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPassiveFrigateIncome::WriteToXMLNodeExplicit"

class cGcWeightedFilename:
    class SetDefaults(HookFactory):
        _name = "cGcWeightedFilename::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeightedFilename::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeightedFilename::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeightedFilename::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeightedFilename::WriteToXMLNode"

class cGcAsteroidGenerationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidGenerationData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAsteroidGenerationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAsteroidGenerationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidGenerationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidGenerationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAsteroidGenerationData::WriteToXMLNodeExplicit"

class cGcAsteroidSystemGenerationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAsteroidSystemGenerationData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAsteroidSystemGenerationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAsteroidSystemGenerationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAsteroidSystemGenerationData::WriteToXMLNode"

class cGcDebugScene:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDebugScene::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDebugScene::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcDebugScene::FixDown"
    class FixUp(HookFactory):
        _name = "cGcDebugScene::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcDebugScene::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugScene::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcDebugScene::Save"
    class SetDefaults(HookFactory):
        _name = "cGcDebugScene::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugScene::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebugScene::WriteToXMLNodeExplicit"

class cGcDungeonQuestParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDungeonQuestParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDungeonQuestParams::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDungeonQuestParams::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcDungeonQuestParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDungeonQuestParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDungeonQuestParams::WriteToXMLNodeExplicit"

class cGcDungeonRoomParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDungeonRoomParams::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDungeonRoomParams::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcDungeonRoomParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDungeonRoomParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDungeonRoomParams::WriteToXMLNodeExplicit"

class cGcExpeditionCategoryStrength:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionCategoryStrength::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionCategoryStrength::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionCategoryStrength::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionCategoryStrength::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionCategoryStrength::WriteToXMLNode"

class cGcExpeditionDebriefPunctuation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionDebriefPunctuation::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionDebriefPunctuation::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionDebriefPunctuation::WriteToXMLNode"

class cGcExpeditionDifficultyKeyframe:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionDifficultyKeyframe::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionDifficultyKeyframe::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionDifficultyKeyframe::WriteToXMLNode"

class cGcExpeditionDurationValues:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionDurationValues::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionDurationValues::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionDurationValues::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionDurationValues::WriteToXMLNodeExplicit"

class cGcExpeditionEventData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionEventData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionEventData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcExpeditionEventData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionEventData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionEventData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionEventData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionEventData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionEventData::WriteToXMLNodeExplicit"

class cGcGalaxyWaypoint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyWaypoint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGalaxyWaypoint::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyWaypoint::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGalaxyWaypoint::ReadFromDocument"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyWaypoint::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcGalaxyWaypoint::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyWaypoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyWaypoint::WriteToXMLNodeExplicit"

class cGcGalaxyWaypointTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyWaypointTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyWaypointTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyWaypointTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyWaypointTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyWaypointTypes::WriteToXMLNodeExplicit"

class cGcPunctuationDelay:
    class SetDefaults(HookFactory):
        _name = "cGcPunctuationDelay::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPunctuationDelay::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPunctuationDelay::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPunctuationDelay::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPunctuationDelay::WriteToXMLNodeExplicit"

class cGcGalaxyInfoIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyInfoIcons::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGalaxyInfoIcons::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcGalaxyInfoIcons::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyInfoIcons::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyInfoIcons::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyInfoIcons::WriteToXMLNode"

class cGcGalaxyMarkerSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyMarkerSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyMarkerSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyMarkerSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyMarkerSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyMarkerSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyMarkerSettings::WriteToXMLNodeExplicit"

class cGcGalaxyMarkerTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyMarkerTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyMarkerTypes::WriteToXMLNode"

class cGcGalaxyRenderAnostreakData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyRenderAnostreakData::WriteToXMLNodeExplicit"

class cGcGalaxyRenderSetupData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyRenderSetupData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyRenderSetupData::GenerateHash"
    class Interpolate(HookFactory):
        _name = "cGcGalaxyRenderSetupData::Interpolate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyRenderSetupData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyRenderSetupData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyRenderSetupData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyRenderSetupData::WriteToXMLNodeExplicit"

class cGcGalaxySolarSystemOrbitParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxySolarSystemOrbitParams::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxySolarSystemOrbitParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxySolarSystemOrbitParams::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxySolarSystemOrbitParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxySolarSystemOrbitParams::WriteToXMLNodeExplicit"

class cGcGalaxySolarSystemParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxySolarSystemParams::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxySolarSystemParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxySolarSystemParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxySolarSystemParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxySolarSystemParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxySolarSystemParams::WriteToXMLNodeExplicit"

class cGcGalaxyStarAnomaly:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyStarAnomaly::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyStarAnomaly::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGalaxyStarAnomaly::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyStarAnomaly::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcGalaxyStarAnomaly::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyStarAnomaly::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyStarAnomaly::WriteToXMLNodeExplicit"

class cGcGalaxyStarAttributesData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyStarAttributesData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGalaxyStarAttributesData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyStarAttributesData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyStarAttributesData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyStarAttributesData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyStarAttributesData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyStarAttributesData::WriteToXMLNodeExplicit"

class cGcGalaxyStarColours:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyStarColours::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyStarColours::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyStarColours::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyStarColours::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyStarColours::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyStarColours::WriteToXMLNodeExplicit"

class cGcGalaxyStarTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyStarTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyStarTypes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGalaxyStarTypes::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyStarTypes::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcGalaxyStarTypes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyStarTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyStarTypes::WriteToXMLNodeExplicit"

class cGcGalaxyVoxelAttributesData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyVoxelAttributesData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyVoxelAttributesData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyVoxelAttributesData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyVoxelAttributesData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyVoxelAttributesData::WriteToXMLNodeExplicit"

class cGcWFCFace:
    class cGcWFCFace(HookFactory):
        _name = "cGcWFCFace::cGcWFCFace"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCFace::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCFace::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWFCFace::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCFace::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWFCFace::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCFace::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCFace::WriteToXMLNodeExplicit"

class cGcGalaxyAudioSetupData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyAudioSetupData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGalaxyAudioSetupData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcGalaxyAudioSetupData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyAudioSetupData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyAudioSetupData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyAudioSetupData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyAudioSetupData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyAudioSetupData::WriteToXMLNodeExplicit"

class cGcGalaxyCameraData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalaxyCameraData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalaxyCameraData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyCameraData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyCameraData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyCameraData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyCameraData::WriteToXMLNodeExplicit"

class cGcWFCBuilding:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCBuilding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCBuilding::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWFCBuilding::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWFCBuilding::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWFCBuilding::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCBuilding::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWFCBuilding::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCBuilding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCBuilding::WriteToXMLNodeExplicit"

class cGcWFCModulePrototype:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCModulePrototype::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCModulePrototype::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWFCModulePrototype::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWFCModulePrototype::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWFCModulePrototype::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCModulePrototype::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWFCModulePrototype::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCModulePrototype::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCModulePrototype::WriteToXMLNodeExplicit"

class cGcWFCModuleSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCModuleSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCModuleSet::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWFCModuleSet::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWFCModuleSet::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcWFCModuleSet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCModuleSet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCModuleSet::WriteToXMLNodeExplicit"

class cGcWFCTerrainConstraint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCTerrainConstraint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWFCTerrainConstraint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCTerrainConstraint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCTerrainConstraint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCTerrainConstraint::WriteToXMLNodeExplicit"

class cGcWFCDecorationItem:
    class cGcWFCDecorationItem(HookFactory):
        _name = "cGcWFCDecorationItem::cGcWFCDecorationItem"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCDecorationItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCDecorationItem::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWFCDecorationItem::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWFCDecorationItem::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWFCDecorationItem::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCDecorationItem::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWFCDecorationItem::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCDecorationItem::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCDecorationItem::WriteToXMLNodeExplicit"

class cGcWeatherEffectLightningData:
    class Cast(HookFactory):
        _name = "cGcWeatherEffectLightningData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherEffectLightningData::ClassPointerCreate"

class cGcWeatherHazardLightningData:
    class Cast(HookFactory):
        _name = "cGcWeatherHazardLightningData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherHazardLightningData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherHazardLightningData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherHazardLightningData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherHazardLightningData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherHazardLightningData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherHazardLightningData::WriteToXMLNodeExplicit"

class cGcWeatherHazardMeteorData:
    class Cast(HookFactory):
        _name = "cGcWeatherHazardMeteorData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherHazardMeteorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherHazardMeteorData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherHazardMeteorData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherHazardMeteorData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherHazardMeteorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherHazardMeteorData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherHazardMeteorData::WriteToXMLNodeExplicit"

class cGcWeatherHazardTornadoData:
    class Cast(HookFactory):
        _name = "cGcWeatherHazardTornadoData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherHazardTornadoData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherHazardTornadoData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherHazardTornadoData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherHazardTornadoData::WriteToXMLNodeExplicit"

class cGcBuildingColourPalette:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingColourPalette::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingColourPalette::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingColourPalette::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingColourPalette::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingColourPalette::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingColourPalette::WriteToXMLNodeExplicit"

class cGcFreighterBaseRoom:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterBaseRoom::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterBaseRoom::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterBaseRoom::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterBaseRoom::WriteToXMLNode"

class cGcMinimumUseConstraint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMinimumUseConstraint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMinimumUseConstraint::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMinimumUseConstraint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMinimumUseConstraint::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMinimumUseConstraint::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMinimumUseConstraint::WriteToXMLNode"

class cGcModuleOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModuleOverride::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModuleOverride::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcModuleOverride::FixDown"
    class FixUp(HookFactory):
        _name = "cGcModuleOverride::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcModuleOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcModuleOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcModuleOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModuleOverride::WriteToXMLNode"

class cGcSettlementColourPalette:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementColourPalette::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementColourPalette::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSettlementColourPalette::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSettlementColourPalette::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementColourPalette::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementColourPalette::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementColourPalette::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementColourPalette::WriteToXMLNodeExplicit"

class cGcSettlementColourTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementColourTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementColourTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSettlementColourTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementColourTable::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementColourTable::WriteToXMLNode"

class cGcWFCDecorationFace:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCDecorationFace::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWFCDecorationFace::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWFCDecorationFace::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCDecorationFace::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWFCDecorationFace::WriteToXMLNodeExplicit"

class cGcWFCDecorationSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCDecorationSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWFCDecorationSet::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWFCDecorationSet::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCDecorationSet::WriteToXMLNode"

class cGcWFCDecorationTheme:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWFCDecorationTheme::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWFCDecorationTheme::WriteToXMLNode"

class cGcWeightedBuildingSize:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeightedBuildingSize::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeightedBuildingSize::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeightedBuildingSize::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeightedBuildingSize::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeightedBuildingSize::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeightedBuildingSize::WriteToXMLNodeExplicit"

class cGcWeightedColourId:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeightedColourId::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeightedColourId::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeightedColourId::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeightedColourId::WriteToXMLNodeExplicit"

class cGcWeightedResource:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeightedResource::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeightedResource::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcWeightedResource::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeightedResource::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeightedResource::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeightedResource::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeightedResource::WriteToXMLNodeExplicit"

class cGcSettlementGiftDetails:
    class SetDefaults(HookFactory):
        _name = "cGcSettlementGiftDetails::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementGiftDetails::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementGiftDetails::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementGiftDetails::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementGiftDetails::WriteToXMLNode"

class cGcFontData:
    class SetDefaults(HookFactory):
        _name = "cGcFontData::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFontData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFontData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFontData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFontData::WriteToXMLNodeExplicit"

class cGcHazardModifiers:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHazardModifiers::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHazardModifiers::WriteToXMLNode"

class cGcHazardValueTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHazardValueTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHazardValueTypes::WriteToXMLNode"

class cGcHazardValues:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHazardValues::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHazardValues::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHazardValues::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHazardValues::WriteToXMLNodeExplicit"

class cGcObjectPlacementCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectPlacementCategory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectPlacementCategory::WriteToXMLNode"

class cGcSelectableObjectList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSelectableObjectList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSelectableObjectList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSelectableObjectList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSelectableObjectList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSelectableObjectList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSelectableObjectList::WriteToXMLNodeExplicit"

class cGcSelectableObjectSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSelectableObjectSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSelectableObjectSpawnData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSelectableObjectSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSelectableObjectSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSelectableObjectSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSelectableObjectSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSelectableObjectSpawnData::WriteToXMLNodeExplicit"

class cGcSelectableObjectSpawnList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSelectableObjectSpawnList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSelectableObjectSpawnList::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcSelectableObjectSpawnList::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcSelectableObjectSpawnList::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSelectableObjectSpawnList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSelectableObjectSpawnList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSelectableObjectSpawnList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSelectableObjectSpawnList::WriteToXMLNode"

class cGcSelectableObjectTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSelectableObjectTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSelectableObjectTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSelectableObjectTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSelectableObjectTable::WriteToXMLNode"

class cGcWeatherEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherEffect::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherEffect::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcWeatherEffect::FixDown"
    class FixUp(HookFactory):
        _name = "cGcWeatherEffect::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherEffect::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherEffect::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherEffect::WriteToXMLNodeExplicit"

class cGcWeatherEffectTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherEffectTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherEffectTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWeatherEffectTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherEffectTable::WriteToXMLNode"

class cGcWeatherOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherOptions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherOptions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherOptions::WriteToXMLNodeExplicit"

class cGcWeatherProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcWeatherProperties::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcWeatherProperties::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeatherProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeatherProperties::WriteToXMLNodeExplicit"

class cGcWeatherTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeatherTable::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeatherTable::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcWeatherTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeatherTable::WriteToXMLNode"

class cGcSentinelSpawnNamedSequence:
    class SetDefaults(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnNamedSequence::WriteToXMLNode"

class cGcPlanetSkyProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetSkyProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetSkyProperties::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlanetSkyProperties::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetSkyProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetSkyProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetSkyProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetSkyProperties::WriteToXMLNodeExplicit"

class cGcResourceCollectEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcResourceCollectEffect::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcResourceCollectEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcResourceCollectEffect::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcResourceCollectEffect::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcResourceCollectEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcResourceCollectEffect::WriteToXMLNodeExplicit"

class cGcResourceOrigin:
    class ClassPointerCreate(HookFactory):
        _name = "cGcResourceOrigin::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcResourceOrigin::WriteToXMLNode"

class cGcSkyProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSkyProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSkyProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSkyProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSkyProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSkyProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSkyProperties::WriteToXMLNodeExplicit"

class cGcSpaceSkyColours:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceSkyColours::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceSkyColours::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceSkyColours::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceSkyColours::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceSkyColours::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceSkyColours::WriteToXMLNodeExplicit"

class cGcSpaceSkyProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceSkyProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpaceSkyProperties::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceSkyProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceSkyProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceSkyProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceSkyProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceSkyProperties::WriteToXMLNodeExplicit"

class cGcStormProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStormProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStormProperties::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcStormProperties::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStormProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStormProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcStormProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStormProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStormProperties::WriteToXMLNodeExplicit"

class cGcSubstanceAmount:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceAmount::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSubstanceAmount::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSubstanceAmount::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcSubstanceAmount::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSubstanceAmount::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSubstanceAmount::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceAmount::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSubstanceAmount::WriteToXMLNodeExplicit"

class cGcTerrainTextureSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainTextureSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainTextureSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainTextureSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainTextureSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainTextureSettings::WriteToXMLNode"

class cGcTerrainTileType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainTileType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainTileType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainTileType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainTileType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainTileType::WriteToXMLNodeExplicit"

class cGcTileTypeOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTileTypeOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTileTypeOptions::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTileTypeOptions::WriteToXMLNode"

class cGcTileTypeSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTileTypeSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTileTypeSet::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcTileTypeSet::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcTileTypeSet::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTileTypeSet::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTileTypeSet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTileTypeSet::WriteToXMLNode"

class cGcObjectSpawnData:
    class cGcObjectSpawnData(HookFactory):
        _name = "cGcObjectSpawnData::cGcObjectSpawnData"
        _overload: overloads.cGcObjectSpawnData.cGcObjectSpawnData.overloads = "cGcObjectSpawnData *, cGcObjectSpawnData *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcObjectSpawnData.cGcObjectSpawnData.overloads):
            cls._overload = overload_args
            return cls
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcObjectSpawnData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcObjectSpawnData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcObjectSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcObjectSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcObjectSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcObjectSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcObjectSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectSpawnData::WriteToXMLNodeExplicit"

class cGcEnvironmentSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEnvironmentSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEnvironmentSpawnData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcEnvironmentSpawnData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcEnvironmentSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcEnvironmentSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcEnvironmentSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEnvironmentSpawnData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEnvironmentSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEnvironmentSpawnData::WriteToXMLNodeExplicit"

class cGcExternalObjectListOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExternalObjectListOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExternalObjectListOptions::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcExternalObjectListOptions::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcExternalObjectListOptions::FixDown"
    class FixUp(HookFactory):
        _name = "cGcExternalObjectListOptions::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcExternalObjectListOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExternalObjectListOptions::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExternalObjectListOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExternalObjectListOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExternalObjectListOptions::WriteToXMLNodeExplicit"

class cGcFogProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFogProperties::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFogProperties::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcFogProperties::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcFogProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFogProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFogProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFogProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFogProperties::WriteToXMLNodeExplicit"

class cGcLightProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLightProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLightProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLightProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLightProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLightProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLightProperties::WriteToXMLNodeExplicit"

class cGcLightShaftProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLightShaftProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLightShaftProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLightShaftProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLightShaftProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLightShaftProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLightShaftProperties::WriteToXMLNodeExplicit"

class cGcObjectDefinitionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectDefinitionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcObjectDefinitionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcObjectDefinitionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcObjectDefinitionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectDefinitionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectDefinitionData::WriteToXMLNodeExplicit"

class cGcObjectSpawnDataArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectSpawnDataArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcObjectSpawnDataArray::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectSpawnDataArray::WriteToXMLNode"

class cGcObjectSpawnDataVariant:
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectSpawnDataVariant::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcObjectSpawnDataVariant::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcObjectSpawnDataVariant::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcObjectSpawnDataVariant::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectSpawnDataVariant::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectSpawnDataVariant::WriteToXMLNodeExplicit"

class cGcPlanetBuildingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetBuildingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetBuildingData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlanetBuildingData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPlanetBuildingData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlanetBuildingData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetBuildingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetBuildingData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetBuildingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetBuildingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetBuildingData::WriteToXMLNodeExplicit"

class cGcPlanetCloudProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetCloudProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetCloudProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetCloudProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetCloudProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetCloudProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetCloudProperties::WriteToXMLNodeExplicit"

class cGcPlanetLife:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetLife::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetLife::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetLife::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetLife::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlanetLife::WriteToXMLNodeExplicit"

class cGcFoliageComponentData:
    class Cast(HookFactory):
        _name = "cGcFoliageComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFoliageComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFoliageComponentData::WriteToXMLNode"

class cGcBuildingClassification:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingClassification::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingClassification::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBuildingClassification::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingClassification::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcBuildingClassification::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingClassification::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingClassification::WriteToXMLNodeExplicit"

class cGcBuildingClusterLayout:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingClusterLayout::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingClusterLayout::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingClusterLayout::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingClusterLayout::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingClusterLayout::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingClusterLayout::WriteToXMLNodeExplicit"

class cGcBuildingClusterLayoutEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingClusterLayoutEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingClusterLayoutEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingClusterLayoutEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingClusterLayoutEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingClusterLayoutEntry::WriteToXMLNodeExplicit"

class cGcBuildingDefinitionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingDefinitionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingDefinitionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingDefinitionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingDefinitionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingDefinitionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingDefinitionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingDefinitionData::WriteToXMLNodeExplicit"

class cGcBuildingDefinitionTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingDefinitionTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingDefinitionTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBuildingDefinitionTable::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingDefinitionTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingDefinitionTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingDefinitionTable::WriteToXMLNode"

class cGcBuildingDensity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingDensity::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingDensity::WriteToXMLNode"

class cGcBuildingDensityLevels:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingDensityLevels::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingDensityLevels::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingDensityLevels::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingDensityLevels::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingDensityLevels::WriteToXMLNodeExplicit"

class cGcBuildingDistribution:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingDistribution::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingDistribution::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingDistribution::WriteToXMLNode"

class cGcBuildingFilename:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingFilename::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingFilename::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingFilename::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingFilename::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingFilename::WriteToXMLNodeExplicit"

class cGcBuildingFilenameList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingFilenameList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingFilenameList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingFilenameList::WriteToXMLNode"

class cGcBuildingOverrideData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingOverrideData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingOverrideData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingOverrideData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingOverrideData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingOverrideData::WriteToXMLNode"

class cGcBuildingSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildingSpawnData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcBuildingSpawnData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcBuildingSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBuildingSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingSpawnData::WriteToXMLNodeExplicit"

class cGcBuildingSpawnSlot:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingSpawnSlot::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingSpawnSlot::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingSpawnSlot::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingSpawnSlot::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingSpawnSlot::WriteToXMLNode"

class cGcBuildingSystemTypeEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingSystemTypeEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingSystemTypeEnum::WriteToXMLNode"

class cGcCloudProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCloudProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCloudProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCloudProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCloudProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCloudProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCloudProperties::WriteToXMLNodeExplicit"

class cGcEnvironmentProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEnvironmentProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcEnvironmentProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEnvironmentProperties::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcEnvironmentProperties::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEnvironmentProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEnvironmentProperties::WriteToXMLNodeExplicit"

class cGcCreatureSpawnEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSpawnEnum::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSpawnEnum::WriteToXMLNode"

class cGcDeprecatedAssetsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDeprecatedAssetsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDeprecatedAssetsTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDeprecatedAssetsTable::WriteToXMLNode"

class cGcEcosystemCreatureData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEcosystemCreatureData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEcosystemCreatureData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcEcosystemCreatureData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEcosystemCreatureData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEcosystemCreatureData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEcosystemCreatureData::WriteToXMLNodeExplicit"

class cGcEcosystemSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEcosystemSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEcosystemSpawnData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcEcosystemSpawnData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEcosystemSpawnData::WriteToXMLNode"

class cGcIkPistonData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcIkPistonData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcIkPistonData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcIkPistonData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcIkPistonData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcIkPistonData::WriteToXMLNode"

class cGcNPCPropType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCPropType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCPropType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCPropType::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCPropType::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCPropType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCPropType::WriteToXMLNodeExplicit"

class cGcNPCSeatedPosture:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCSeatedPosture::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCSeatedPosture::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCSeatedPosture::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCSeatedPosture::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCSeatedPosture::WriteToXMLNodeExplicit"

class cGcNPCTriggerTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCTriggerTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCTriggerTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCTriggerTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCTriggerTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCTriggerTypes::WriteToXMLNodeExplicit"

class cGcPetAccessoryGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetAccessoryGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetAccessoryGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetAccessoryGroup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetAccessoryGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetAccessoryGroup::WriteToXMLNodeExplicit"

class cGcPetAccessoryInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetAccessoryInfo::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetAccessoryInfo::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetAccessoryInfo::WriteToXMLNode"

class cGcPetAccessoryTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetAccessoryTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetAccessoryTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPetAccessoryTable::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcPetAccessoryTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetAccessoryTable::WriteToXMLNode"

class cGcPetAccessoryType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetAccessoryType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetAccessoryType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetAccessoryType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetAccessoryType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetAccessoryType::WriteToXMLNodeExplicit"

class cGcPetEggSpeciesOverrideData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetEggSpeciesOverrideData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetEggSpeciesOverrideData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetEggSpeciesOverrideData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetEggSpeciesOverrideData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetEggSpeciesOverrideData::WriteToXMLNodeExplicit"

class cGcPetEggSpeciesOverrideTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetEggSpeciesOverrideTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetEggSpeciesOverrideTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetEggSpeciesOverrideTable::WriteToXMLNode"

class cGcPetEggTraitModifierOverrideData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideData::WriteToXMLNodeExplicit"

class cGcPetEggTraitModifierOverrideTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetEggTraitModifierOverrideTable::WriteToXMLNode"

class cGcSandwormTimerAndFrequencyOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSandwormTimerAndFrequencyOverride::WriteToXMLNodeExplicit"

class cGcSpawnComponentOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpawnComponentOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpawnComponentOption::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSpawnComponentOption::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSpawnComponentOption::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSpawnComponentOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpawnComponentOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpawnComponentOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpawnComponentOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpawnComponentOption::WriteToXMLNodeExplicit"

class cGcCreatureLegIKComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureLegIKComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureLegIKComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureLegIKComponentData::WriteToXMLNode"

class cGcCreatureSpawnComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureSpawnComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSpawnComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureSpawnComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSpawnComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureSpawnComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureSpawnComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSpawnComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureSpawnComponentData::WriteToXMLNodeExplicit"

class cGcCreatureGenerationWeightedListDomainEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationWeightedListDomainEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationWeightedListDomainEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGenerationWeightedListDomainEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureGenerationWeightedListDomainEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationWeightedListDomainEntry::WriteToXMLNode"

class cGcCreatureGroupDescription:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGroupDescription::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGroupDescription::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGroupDescription::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGroupDescription::WriteToXMLNodeExplicit"

class cGcCreatureGroupProbability:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGroupProbability::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGroupProbability::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGroupProbability::WriteToXMLNode"

class cGcCreatureGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGroups::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGroups::WriteToXMLNode"

class cGcCreatureHemiSphere:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHemiSphere::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHemiSphere::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHemiSphere::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHemiSphere::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureHemiSphere::WriteToXMLNodeExplicit"

class cGcCreatureIkData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureIkData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureIkData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureIkData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureIkData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureIkData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureIkData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureIkData::WriteToXMLNodeExplicit"

class cGcCreatureRoleDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleDataTable::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcCreatureRoleDataTable::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcCreatureRoleDataTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureRoleDataTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleDataTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRoleDataTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRoleDataTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleDataTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleDataTable::WriteToXMLNodeExplicit"

class cGcCreatureRoleDescription:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleDescription::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleDescription::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleDescription::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRoleDescription::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRoleDescription::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleDescription::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleDescription::WriteToXMLNodeExplicit"

class cGcCreatureRoleDescriptionTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleDescriptionTable::WriteToXMLNodeExplicit"

class cGcCreatureRoleFilename:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleFilename::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleFilename::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRoleFilename::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleFilename::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleFilename::WriteToXMLNodeExplicit"

class cGcCreatureRoleFilenameList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleFilenameList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleFilenameList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleFilenameList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleFilenameList::WriteToXMLNode"

class cGcCreatureRoleFilenameTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleFilenameTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRoleFilenameTable::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleFilenameTable::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleFilenameTable::WriteToXMLNode"

class cGcCreatureRoles:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoles::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoles::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRoles::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoles::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoles::WriteToXMLNodeExplicit"

class cGcCreatureSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureSpawnData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcCreatureSpawnData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcCreatureSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureSpawnData::WriteToXMLNodeExplicit"

class cGcCreatureAttractorComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureAttractorComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureAttractorComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureAttractorComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureAttractorComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureAttractorComponentData::WriteToXMLNodeExplicit"

class cGcCreatureBaitComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureBaitComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureBaitComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureBaitComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureBaitComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureBaitComponentData::WriteToXMLNode"

class cGcCreatureComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureComponentData::WriteToXMLNodeExplicit"

class cGcCreatureEffectComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureEffectComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureEffectComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureEffectComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureEffectComponentData::WriteToXMLNode"

class cGcCreatureEggComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureEggComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureEggComponentData::ClassPointerCreate"

class cGcBehaviourPlayAnimTrigger:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourPlayAnimTrigger::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourPlayAnimTrigger::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBehaviourPlayAnimTrigger::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourPlayAnimTrigger::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourPlayAnimTrigger::WriteToXMLNode"

class cGcCreatureActiveTime:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureActiveTime::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureActiveTime::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureActiveTime::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureActiveTime::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureActiveTime::WriteToXMLNodeExplicit"

class cGcCreatureDebugSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureDebugSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureDebugSpawnData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureDebugSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureDebugSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureDebugSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureDebugSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureDebugSpawnData::WriteToXMLNodeExplicit"

class cGcCreatureDebugWaypoint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureDebugWaypoint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureDebugWaypoint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureDebugWaypoint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureDebugWaypoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureDebugWaypoint::WriteToXMLNodeExplicit"

class cGcCreatureDiet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureDiet::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureDiet::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureDiet::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureDiet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureDiet::WriteToXMLNodeExplicit"

class cGcCreatureFilename:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFilename::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFilename::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureFilename::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureFilename::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFilename::WriteToXMLNode"

class cGcCreatureGenerationArchetypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationArchetypes::WriteToXMLNode"

class cGcCreatureGenerationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureGenerationData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureGenerationData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureGenerationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationData::WriteToXMLNodeExplicit"

class cGcCreatureGenerationDensity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationDensity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationDensity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDensity::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDensity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationDensity::WriteToXMLNodeExplicit"

class cGcCreatureGenerationDomainEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationDomainEntry::WriteToXMLNodeExplicit"

class cGcCreatureGenerationDomainTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationDomainTable::WriteToXMLNodeExplicit"

class cGcCreatureGenerationOptionalWeightedList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationOptionalWeightedList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureGenerationOptionalWeightedList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationOptionalWeightedList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationOptionalWeightedList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationOptionalWeightedList::WriteToXMLNodeExplicit"

class cGcCreatureGenerationWeightedList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGenerationWeightedList::WriteToXMLNodeExplicit"

class cGcPetBehaviourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetBehaviourData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetBehaviourData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPetBehaviourData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPetBehaviourData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPetBehaviourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetBehaviourData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetBehaviourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetBehaviourData::WriteToXMLNodeExplicit"

class cGcPetBehaviourMoodModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetBehaviourMoodModifier::WriteToXMLNodeExplicit"

class cGcPetBehaviourTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetBehaviourTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetBehaviourTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPetBehaviourTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPetBehaviourTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetBehaviourTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPetBehaviourTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetBehaviourTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetBehaviourTable::WriteToXMLNodeExplicit"

class cGcPetBehaviourTraitModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetBehaviourTraitModifier::WriteToXMLNodeExplicit"

class cGcPetBehaviours:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetBehaviours::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetBehaviours::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetBehaviours::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetBehaviours::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetBehaviours::WriteToXMLNodeExplicit"

class cGcPetFollowUpBehaviour:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetFollowUpBehaviour::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetFollowUpBehaviour::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetFollowUpBehaviour::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetFollowUpBehaviour::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetFollowUpBehaviour::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetFollowUpBehaviour::WriteToXMLNodeExplicit"

class cGcPetMoodStaminaModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetMoodStaminaModifier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetMoodStaminaModifier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetMoodStaminaModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetMoodStaminaModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetMoodStaminaModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetMoodStaminaModifier::WriteToXMLNodeExplicit"

class cGcPetTraitMoodModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetTraitMoodModifier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetTraitMoodModifier::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetTraitMoodModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetTraitMoodModifier::WriteToXMLNodeExplicit"

class cGcPetTraitMoodModifierList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetTraitMoodModifierList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetTraitMoodModifierList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetTraitMoodModifierList::WriteToXMLNode"

class cGcPetTraitStaminaModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetTraitStaminaModifier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetTraitStaminaModifier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetTraitStaminaModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetTraitStaminaModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetTraitStaminaModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetTraitStaminaModifier::WriteToXMLNodeExplicit"

class cGcWeirdCreatureRewardList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeirdCreatureRewardList::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeirdCreatureRewardList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWeirdCreatureRewardList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeirdCreatureRewardList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeirdCreatureRewardList::WriteToXMLNodeExplicit"

class cGcCreatureFullBodyIKComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureFullBodyIKComponentData::WriteToXMLNodeExplicit"

class cGcCreatureAudioTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureAudioTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureAudioTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureAudioTable::FixUp"
    class Save(HookFactory):
        _name = "cGcCreatureAudioTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureAudioTable::WriteToXMLNode"

class cGcCreatureBehaviourTreeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureBehaviourTreeData::WriteToXMLNodeExplicit"

class cGcCreatureBehaviourTrees:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureBehaviourTrees::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureBehaviourTrees::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureBehaviourTrees::FixUp"
    class Save(HookFactory):
        _name = "cGcCreatureBehaviourTrees::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureBehaviourTrees::WriteToXMLNode"

class cGcCreatureData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureData::WriteToXMLNodeExplicit"

class cGcCreatureDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureDataTable::FixUp"
    class Save(HookFactory):
        _name = "cGcCreatureDataTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureDataTable::WriteToXMLNode"

class cGcCreatureEffectTrigger:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureEffectTrigger::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureEffectTrigger::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureEffectTrigger::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureEffectTrigger::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureEffectTrigger::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureEffectTrigger::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureEffectTrigger::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureEffectTrigger::WriteToXMLNodeExplicit"

class cGcCreatureFilenameTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFilenameTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureFilenameTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCreatureFilenameTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFilenameTable::WriteToXMLNode"

class cGcCreatureFoodList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFoodList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFoodList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureFoodList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureFoodList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFoodList::WriteToXMLNode"

class cGcCreatureHarvestSubstanceList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHarvestSubstanceList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHarvestSubstanceList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHarvestSubstanceList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureHarvestSubstanceList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHarvestSubstanceList::WriteToXMLNode"

class cGcCreatureInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureInfo::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcCreatureInfo::DeallocateDynamic"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureInfo::WriteToXMLNodeExplicit"

class cGcCreatureRoleFrequencyModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRoleFrequencyModifier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRoleFrequencyModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRoleFrequencyModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRoleFrequencyModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRoleFrequencyModifier::WriteToXMLNodeExplicit"

class cGcCreatureSizeClasses:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSizeClasses::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSizeClasses::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureSizeClasses::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSizeClasses::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureSizeClasses::WriteToXMLNodeExplicit"

class cGcCreatureStupidName:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureStupidName::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureStupidName::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureStupidName::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureStupidName::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureStupidName::WriteToXMLNodeExplicit"

class cGcCreatureStupidNameTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureStupidNameTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureStupidNameTable::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureStupidNameTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureStupidNameTable::WriteToXMLNode"

class cGcCreatureSubstanceList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSubstanceList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSubstanceList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureSubstanceList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSubstanceList::WriteToXMLNode"

class cGcCreatureTagAndRarity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureTagAndRarity::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureTagAndRarity::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureTagAndRarity::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureTagAndRarity::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureTagAndRarity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureTagAndRarity::WriteToXMLNodeExplicit"

class cGcCreatureTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureTypes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcCreatureTypes::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureTypes::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcCreatureTypes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureTypes::WriteToXMLNodeExplicit"

class cGcCreatureVocalTestData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureVocalTestData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureVocalTestData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureVocalTestData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureVocalTestData::WriteToXMLNode"

class cGcPetActionMoodModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetActionMoodModifier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPetActionMoodModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetActionMoodModifier::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetActionMoodModifier::WriteToXMLNode"

class cGcCreatureRidingData:
    class Cast(HookFactory):
        _name = "cGcCreatureRidingData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRidingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRidingData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRidingData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRidingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRidingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRidingData::WriteToXMLNodeExplicit"

class cGcCreatureSwarmData:
    class Cast(HookFactory):
        _name = "cGcCreatureSwarmData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSwarmData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureSwarmData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSwarmData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSwarmData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureSwarmData::WriteToXMLNodeExplicit"

class cGcCreatureVocalData:
    class Cast(HookFactory):
        _name = "cGcCreatureVocalData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureVocalData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureVocalData::WriteToXMLNode"

class cGcCreatureWeirdMovementData:
    class Cast(HookFactory):
        _name = "cGcCreatureWeirdMovementData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureWeirdMovementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureWeirdMovementData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureWeirdMovementData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureWeirdMovementData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureWeirdMovementData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureWeirdMovementData::WriteToXMLNodeExplicit"

class cGcCreatureRidingAnimation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRidingAnimation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRidingAnimation::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRidingAnimation::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRidingAnimation::WriteToXMLNodeExplicit"

class cGcCreatureRidingPartModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRidingPartModifier::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureRidingPartModifier::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRidingPartModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRidingPartModifier::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureRidingPartModifier::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRidingPartModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRidingPartModifier::WriteToXMLNodeExplicit"

class cGcCreatureSwarmDataParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureSwarmDataParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureSwarmDataParams::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureSwarmDataParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureSwarmDataParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureSwarmDataParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureSwarmDataParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureSwarmDataParams::WriteToXMLNodeExplicit"

class cGcCreatureVocalSoundData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureVocalSoundData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureVocalSoundData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureVocalSoundData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureVocalSoundData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureVocalSoundData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureVocalSoundData::WriteToXMLNodeExplicit"

class cGcFlyingSnakeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFlyingSnakeData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFlyingSnakeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFlyingSnakeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFlyingSnakeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFlyingSnakeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFlyingSnakeData::WriteToXMLNodeExplicit"

class cGcCreatureFlockMovementData:
    class Cast(HookFactory):
        _name = "cGcCreatureFlockMovementData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFlockMovementData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFlockMovementData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureFlockMovementData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFlockMovementData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureFlockMovementData::WriteToXMLNodeExplicit"

class cGcCreatureFootParticleData:
    class Cast(HookFactory):
        _name = "cGcCreatureFootParticleData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFootParticleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureFootParticleData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFootParticleData::WriteToXMLNode"

class cGcCreatureHealthData:
    class Cast(HookFactory):
        _name = "cGcCreatureHealthData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHealthData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureHealthData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureHealthData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureHealthData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHealthData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHealthData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureHealthData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHealthData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureHealthData::WriteToXMLNodeExplicit"

class cGcCreatureHoverMovementData:
    class Cast(HookFactory):
        _name = "cGcCreatureHoverMovementData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHoverMovementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureHoverMovementData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHoverMovementData::WriteToXMLNode"

class cGcCreatureMovementData:
    class Cast(HookFactory):
        _name = "cGcCreatureMovementData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureMovementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureMovementData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureMovementData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureMovementData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureMovementData::WriteToXMLNodeExplicit"

class cGcCreaturePetData:
    class Cast(HookFactory):
        _name = "cGcCreaturePetData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreaturePetData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetData::WriteToXMLNode"

class cGcCreatureFootParticleSingleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureFootParticleSingleData::WriteToXMLNodeExplicit"

class cGcCreatureHoverMovementDataParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureHoverMovementDataParams::WriteToXMLNodeExplicit"

class cGcCreatureHoverTintableEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureHoverTintableEffect::WriteToXMLNodeExplicit"

class cGcCreatureMoveAnimData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureMoveAnimData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureMoveAnimData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureMoveAnimData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureMoveAnimData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureMoveAnimData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureMoveAnimData::WriteToXMLNodeExplicit"

class cGcCreaturePetAccessory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetAccessory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreaturePetAccessory::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetAccessory::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetAccessory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetAccessory::WriteToXMLNodeExplicit"

class cGcCreaturePetAccessorySlot:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetAccessorySlot::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetAccessorySlot::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreaturePetAccessorySlot::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetAccessorySlot::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetAccessorySlot::WriteToXMLNodeExplicit"

class cGcCreaturePetMood:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetMood::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetMood::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreaturePetMood::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetMood::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetMood::WriteToXMLNodeExplicit"

class cGcCreaturePetRewardActions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetRewardActions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetRewardActions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreaturePetRewardActions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetRewardActions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetRewardActions::WriteToXMLNodeExplicit"

class cGcCreaturePetTraitRange:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetTraitRange::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetTraitRange::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetTraitRange::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetTraitRange::WriteToXMLNodeExplicit"

class cGcCreaturePetTraitRanges:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetTraitRanges::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetTraitRanges::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreaturePetTraitRanges::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreaturePetTraitRanges::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetTraitRanges::WriteToXMLNode"

class cGcCreaturePetTraits:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreaturePetTraits::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreaturePetTraits::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreaturePetTraits::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreaturePetTraits::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreaturePetTraits::WriteToXMLNodeExplicit"

class cGcBehaviourPlayAnimData:
    class Cast(HookFactory):
        _name = "cGcBehaviourPlayAnimData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourPlayAnimData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourPlayAnimData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourPlayAnimData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourPlayAnimData::WriteToXMLNode"

class cGcBehaviourRegisterAttackerData:
    class Cast(HookFactory):
        _name = "cGcBehaviourRegisterAttackerData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourRegisterAttackerData::ClassPointerCreate"

class cGcBehaviourWaitData:
    class Cast(HookFactory):
        _name = "cGcBehaviourWaitData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourWaitData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourWaitData::WriteToXMLNode"

class cGcBirdData:
    class Cast(HookFactory):
        _name = "cGcBirdData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBirdData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBirdData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBirdData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBirdData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBirdData::WriteToXMLNodeExplicit"

class cGcBlackboardValueDecoratorData:
    class Cast(HookFactory):
        _name = "cGcBlackboardValueDecoratorData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlackboardValueDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBlackboardValueDecoratorData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBlackboardValueDecoratorData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlackboardValueDecoratorData::WriteToXMLNode"

class cGcCreatureCrystalMovementData:
    class Cast(HookFactory):
        _name = "cGcCreatureCrystalMovementData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureCrystalMovementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureCrystalMovementData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureCrystalMovementData::WriteToXMLNode"

class cGcCreatureFiendAttackData:
    class Cast(HookFactory):
        _name = "cGcCreatureFiendAttackData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFiendAttackData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFiendAttackData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureFiendAttackData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFiendAttackData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureFiendAttackData::WriteToXMLNodeExplicit"

class cGcBlackboardFloatCompareDecoratorData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlackboardFloatCompareDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBlackboardFloatCompareDecoratorData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcBlackboardFloatCompareDecoratorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlackboardFloatCompareDecoratorData::WriteToXMLNode"

class cGcBlackboardIntCompareDecoratorData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlackboardIntCompareDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBlackboardIntCompareDecoratorData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcBlackboardIntCompareDecoratorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlackboardIntCompareDecoratorData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBlackboardIntCompareDecoratorData::WriteToXMLNodeExplicit"

class cGcBlackboardIntModifyData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBlackboardIntModifyData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBlackboardIntModifyData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBlackboardIntModifyData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBlackboardIntModifyData::WriteToXMLNode"

class cGcCooldownDecoratorData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCooldownDecoratorData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCooldownDecoratorData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcCooldownDecoratorData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCooldownDecoratorData::WriteToXMLNode"

class cGcCreatureCrystalMovementDataParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureCrystalMovementDataParams::WriteToXMLNodeExplicit"

class cGcCreatureIkType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureIkType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureIkType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureIkType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureIkType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureIkType::WriteToXMLNodeExplicit"

class cGcPrimaryAxis:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPrimaryAxis::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPrimaryAxis::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPrimaryAxis::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPrimaryAxis::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPrimaryAxis::WriteToXMLNodeExplicit"

class cGcBehaviourGetTargetData:
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourGetTargetData::WriteToXMLNode"
    class Cast(HookFactory):
        _name = "cGcBehaviourGetTargetData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourGetTargetData::ClassPointerCreate"

class cGcBehaviourAppearData:
    class Cast(HookFactory):
        _name = "cGcBehaviourAppearData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourAppearData::ClassPointerCreate"

class cGcBehaviourApplyDamageData:
    class Cast(HookFactory):
        _name = "cGcBehaviourApplyDamageData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourApplyDamageData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourApplyDamageData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourApplyDamageData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourApplyDamageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBehaviourApplyDamageData::WriteToXMLNodeExplicit"

class cGcBehaviourCheckDeathData:
    class Cast(HookFactory):
        _name = "cGcBehaviourCheckDeathData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourCheckDeathData::ClassPointerCreate"

class cGcBehaviourDetailAnimsData:
    class Cast(HookFactory):
        _name = "cGcBehaviourDetailAnimsData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourDetailAnimsData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourDetailAnimsData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourDetailAnimsData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourDetailAnimsData::WriteToXMLNode"

class cGcBehaviourFaceTargetData:
    class Cast(HookFactory):
        _name = "cGcBehaviourFaceTargetData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourFaceTargetData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourFaceTargetData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourFaceTargetData::WriteToXMLNode"

class cGcBehaviourIdleData:
    class Cast(HookFactory):
        _name = "cGcBehaviourIdleData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourIdleData::ClassPointerCreate"

class cGcBehaviourLaunchProjectileData:
    class Cast(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBehaviourLaunchProjectileData::WriteToXMLNodeExplicit"

class cGcBehaviourLegacyData:
    class Cast(HookFactory):
        _name = "cGcBehaviourLegacyData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourLegacyData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourLegacyData::WriteToXMLNode"

class cGcBehaviourLookData:
    class Cast(HookFactory):
        _name = "cGcBehaviourLookData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourLookData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourLookData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourLookData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourLookData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourLookData::WriteToXMLNode"

class cGcBehaviourMaintainRangeFromTargetData:
    class Cast(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBehaviourMaintainRangeFromTargetData::WriteToXMLNodeExplicit"

class cGcBehaviourMoveToTargetData:
    class Cast(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBehaviourMoveToTargetData::WriteToXMLNodeExplicit"

class cGcBehaviourCooldownBeginData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourCooldownBeginData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourCooldownBeginData::WriteToXMLNode"

class cGcBehaviourIncrementCounter:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBehaviourIncrementCounter::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBehaviourIncrementCounter::WriteToXMLNode"

class cGcCustomisationRace:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationRace::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationRace::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationRace::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationRace::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationRace::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationRace::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationRace::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationRace::WriteToXMLNodeExplicit"

class cGcCustomisationShipBobbleHeads:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationShipBobbleHeads::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationShipBobbleHeads::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationShipBobbleHeads::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationShipBobbleHeads::WriteToXMLNode"

class cGcCustomisationShipTrails:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationShipTrails::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationShipTrails::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationShipTrails::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationShipTrails::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationShipTrails::WriteToXMLNodeExplicit"

class cGcCustomisationTextureGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationTextureGroup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationTextureGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationTextureGroup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationTextureGroup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationTextureGroup::WriteToXMLNode"

class cGcCustomisationThrusterEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationThrusterEffect::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationThrusterEffect::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationThrusterEffect::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationThrusterEffect::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationThrusterEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationThrusterEffect::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationThrusterEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationThrusterEffect::WriteToXMLNodeExplicit"

class cGcCustomisationThrusterEffects:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationThrusterEffects::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationThrusterEffects::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationThrusterEffects::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationThrusterEffects::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationThrusterEffects::WriteToXMLNode"

class cGcCustomisationThrusterJet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationThrusterJet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationThrusterJet::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationThrusterJet::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationThrusterJet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationThrusterJet::WriteToXMLNodeExplicit"

class cGcCustomisationUI:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationUI::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationUI::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationUI::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationUI::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationUI::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationUI::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationUI::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationUI::WriteToXMLNodeExplicit"

class cGcCustomisationUIData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationUIData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationUIData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationUIData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationUIData::WriteToXMLNode"

class cGcCustomisationDescriptorGroupOption:
    class cGcCustomisationDescriptorGroupOption(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::cGcCustomisationDescriptorGroupOption"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOption::WriteToXMLNodeExplicit"

class cGcAnimFrameEvent:
    class Cast(HookFactory):
        _name = "cGcAnimFrameEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAnimFrameEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAnimFrameEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAnimFrameEvent::WriteToXMLNode"

class cGcBeenShotEvent:
    class Cast(HookFactory):
        _name = "cGcBeenShotEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBeenShotEvent::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBeenShotEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBeenShotEvent::WriteToXMLNodeExplicit"

class cGcCreatureNearbyEvent:
    class Cast(HookFactory):
        _name = "cGcCreatureNearbyEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureNearbyEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureNearbyEvent::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureNearbyEvent::WriteToXMLNode"

class cGcCustomisationComponentData:
    class Cast(HookFactory):
        _name = "cGcCustomisationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationComponentData::WriteToXMLNode"

class cGcPlayerNearbyEvent:
    class Cast(HookFactory):
        _name = "cGcPlayerNearbyEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerNearbyEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerNearbyEvent::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerNearbyEvent::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerNearbyEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerNearbyEvent::WriteToXMLNodeExplicit"

class cGcStateTimeEvent:
    class Cast(HookFactory):
        _name = "cGcStateTimeEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStateTimeEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStateTimeEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStateTimeEvent::WriteToXMLNode"

class cGcStormEvent:
    class Cast(HookFactory):
        _name = "cGcStormEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStormEvent::ClassPointerCreate"

class cGcCustomisationBackpackData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationBackpackData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationBackpackData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationBackpackData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationBackpackData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationBackpackData::WriteToXMLNode"

class cGcCustomisationBannerGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationBannerGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationBannerGroup::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationBannerGroup::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationBannerGroup::WriteToXMLNode"

class cGcCustomisationBannerImageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationBannerImageData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationBannerImageData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationBannerImageData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationBannerImageData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationBannerImageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationBannerImageData::WriteToXMLNodeExplicit"

class cGcCustomisationBobbleHead:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationBobbleHead::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationBobbleHead::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationBobbleHead::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationBobbleHead::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationBobbleHead::WriteToXMLNode"

class cGcCustomisationBoneScales:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationBoneScales::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationBoneScales::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationBoneScales::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationBoneScales::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationBoneScales::WriteToXMLNodeExplicit"

class cGcCustomisationCameraData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationCameraData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationCameraData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationCameraData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationCameraData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationCameraData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationCameraData::WriteToXMLNodeExplicit"

class cGcCustomisationColourGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationColourGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationColourGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationColourGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationColourGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationColourGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationColourGroup::WriteToXMLNodeExplicit"

class cGcCustomisationDescriptorGroupOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationDescriptorGroupOptions::WriteToXMLNodeExplicit"

class cGcCustomisationFreighterEngineEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationFreighterEngineEffect::WriteToXMLNodeExplicit"

class cGcCustomisationGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationGroup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationGroup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationGroup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationGroup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationGroup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationGroup::WriteToXMLNodeExplicit"

class cGcCustomisationGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationGroups::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationGroups::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationGroups::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationGroups::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationGroups::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationGroups::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationGroups::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationGroups::WriteToXMLNodeExplicit"

class cGcPlayerControlModeEntry:
    class SetDefaults(HookFactory):
        _name = "cGcPlayerControlModeEntry::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlModeEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlModeEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlModeEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerControlModeEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlModeEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerControlModeEntry::WriteToXMLNodeExplicit"

class cGcBaseBuildingSettingsAction:
    class Cast(HookFactory):
        _name = "cGcBaseBuildingSettingsAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingSettingsAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingSettingsAction::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingSettingsAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingSettingsAction::WriteToXMLNodeExplicit"

class cGcCameraShakeAction:
    class Cast(HookFactory):
        _name = "cGcCameraShakeAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeAction::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCameraShakeAction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeAction::WriteToXMLNode"

class cGcDestroyAction:
    class Cast(HookFactory):
        _name = "cGcDestroyAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDestroyAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDestroyAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDestroyAction::WriteToXMLNode"

class cGcDisplayText:
    class Cast(HookFactory):
        _name = "cGcDisplayText::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDisplayText::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDisplayText::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcDisplayText::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcDisplayText::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDisplayText::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDisplayText::WriteToXMLNodeExplicit"

class cGcFiendCrimeAction:
    class Cast(HookFactory):
        _name = "cGcFiendCrimeAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFiendCrimeAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFiendCrimeAction::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFiendCrimeAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFiendCrimeAction::WriteToXMLNodeExplicit"

class cGcFireSimpleInteractionAction:
    class Cast(HookFactory):
        _name = "cGcFireSimpleInteractionAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFireSimpleInteractionAction::ClassPointerCreate"

class cGcFrigateInteractionAction:
    class Cast(HookFactory):
        _name = "cGcFrigateInteractionAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateInteractionAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateInteractionAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateInteractionAction::WriteToXMLNode"

class cGcGoToStateAction:
    class Cast(HookFactory):
        _name = "cGcGoToStateAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGoToStateAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGoToStateAction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGoToStateAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGoToStateAction::WriteToXMLNode"

class cGcHarvestPlantAction:
    class Cast(HookFactory):
        _name = "cGcHarvestPlantAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHarvestPlantAction::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHarvestPlantAction::WriteToXMLNode"

class cGcHazardAction:
    class Cast(HookFactory):
        _name = "cGcHazardAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHazardAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHazardAction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcHazardAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHazardAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHazardAction::WriteToXMLNodeExplicit"

class cGcLodAction:
    class Cast(HookFactory):
        _name = "cGcLodAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLodAction::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLodAction::WriteToXMLNode"

class cGcNodeActivationAction:
    class Cast(HookFactory):
        _name = "cGcNodeActivationAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNodeActivationAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNodeActivationAction::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNodeActivationAction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNodeActivationAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNodeActivationAction::WriteToXMLNodeExplicit"

class cGcPainAction:
    class Cast(HookFactory):
        _name = "cGcPainAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPainAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPainAction::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcPainAction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPainAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPainAction::WriteToXMLNodeExplicit"

class cGcParticleAction:
    class Cast(HookFactory):
        _name = "cGcParticleAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcParticleAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcParticleAction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcParticleAction::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcParticleAction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcParticleAction::WriteToXMLNode"

class cGcPlayAnimAction:
    class Cast(HookFactory):
        _name = "cGcPlayAnimAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayAnimAction::ClassPointerCreate"

class cGcPlayAudioAction:
    class Cast(HookFactory):
        _name = "cGcPlayAudioAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayAudioAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayAudioAction::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcPlayAudioAction::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayAudioAction::WriteToXMLNode"

class cGcPowerStateAction:
    class Cast(HookFactory):
        _name = "cGcPowerStateAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPowerStateAction::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPowerStateAction::WriteToXMLNode"

class cGcResetSimpleInteractionAction:
    class Cast(HookFactory):
        _name = "cGcResetSimpleInteractionAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcResetSimpleInteractionAction::ClassPointerCreate"

class cGcRewardAction:
    class Cast(HookFactory):
        _name = "cGcRewardAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardAction::ClassPointerCreate"

class cGcScareCreaturesAction:
    class Cast(HookFactory):
        _name = "cGcScareCreaturesAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcScareCreaturesAction::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScareCreaturesAction::WriteToXMLNode"

class cGcSpawnAction:
    class Cast(HookFactory):
        _name = "cGcSpawnAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpawnAction::ClassPointerCreate"

class cGcUniqueIdComponentData:
    class Cast(HookFactory):
        _name = "cGcUniqueIdComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcUniqueIdComponentData::ClassPointerCreate"

class cGcWarpAction:
    class Cast(HookFactory):
        _name = "cGcWarpAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWarpAction::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWarpAction::WriteToXMLNode"

class cGcBaseDefenceStatusAction:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseDefenceStatusAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseDefenceStatusAction::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseDefenceStatusAction::WriteToXMLNode"

class cGcAbandonedFreighterComponentData:
    class Cast(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAbandonedFreighterComponentData::WriteToXMLNodeExplicit"

class cGcCameraShakeComponentData:
    class Cast(HookFactory):
        _name = "cGcCameraShakeComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCameraShakeComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeComponentData::WriteToXMLNode"

class cGcCharacterInterfaceComponentData:
    class Cast(HookFactory):
        _name = "cGcCharacterInterfaceComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterInterfaceComponentData::ClassPointerCreate"

class cGcColouriseComponentData:
    class Cast(HookFactory):
        _name = "cGcColouriseComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcColouriseComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcColouriseComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcColouriseComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcColouriseComponentData::WriteToXMLNodeExplicit"

class cGcCustomInventoryComponentData:
    class Cast(HookFactory):
        _name = "cGcCustomInventoryComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomInventoryComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomInventoryComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomInventoryComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomInventoryComponentData::WriteToXMLNode"

class cGcDecorationComponentData:
    class Cast(HookFactory):
        _name = "cGcDecorationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDecorationComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDecorationComponentData::WriteToXMLNode"

class cGcFreighterBaseComponentData:
    class Cast(HookFactory):
        _name = "cGcFreighterBaseComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterBaseComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterBaseComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterBaseComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterBaseComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFreighterBaseComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterBaseComponentData::WriteToXMLNode"

class cGcMarkerComponentData:
    class Cast(HookFactory):
        _name = "cGcMarkerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMarkerComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMarkerComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMarkerComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMarkerComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMarkerComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMarkerComponentData::WriteToXMLNodeExplicit"

class cGcPlayerCharacterComponentData:
    class Cast(HookFactory):
        _name = "cGcPlayerCharacterComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerCharacterComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerCharacterComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerCharacterComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerCharacterComponentData::WriteToXMLNode"

class cGcPlayerControlComponentData:
    class Cast(HookFactory):
        _name = "cGcPlayerControlComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerControlComponentData::WriteToXMLNodeExplicit"

class cGcTriggerActionComponentData:
    class Cast(HookFactory):
        _name = "cGcTriggerActionComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcTriggerActionComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTriggerActionComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTriggerActionComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTriggerActionComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTriggerActionComponentData::WriteToXMLNodeExplicit"

class cGcActionTrigger:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionTrigger::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcActionTrigger::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcActionTrigger::FixDown"
    class FixUp(HookFactory):
        _name = "cGcActionTrigger::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcActionTrigger::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionTrigger::WriteToXMLNode"

class cGcActionTriggerState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionTriggerState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcActionTriggerState::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcActionTriggerState::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionTriggerState::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActionTriggerState::WriteToXMLNodeExplicit"

class cGcBaseDefenceStatusType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseDefenceStatusType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseDefenceStatusType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseDefenceStatusType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseDefenceStatusType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseDefenceStatusType::WriteToXMLNodeExplicit"

class cGcBaseDefenceTrigger:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseDefenceTrigger::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseDefenceTrigger::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseDefenceTrigger::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseDefenceTrigger::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseDefenceTrigger::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseDefenceTrigger::WriteToXMLNodeExplicit"

class cGcBroadcastLevel:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBroadcastLevel::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBroadcastLevel::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBroadcastLevel::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBroadcastLevel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBroadcastLevel::WriteToXMLNodeExplicit"

class cGcCameraShakeTriggerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeTriggerData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeTriggerData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCameraShakeTriggerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeTriggerData::WriteToXMLNode"

class cGcChainComponentData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcChainComponentData::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcChainComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcChainComponentData::WriteToXMLNode"

class cGcInventoryTechProbability:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryTechProbability::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryTechProbability::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryTechProbability::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryTechProbability::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryTechProbability::WriteToXMLNodeExplicit"

class cGcLootProbability:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLootProbability::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcLootProbability::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcLootProbability::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLootProbability::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLootProbability::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLootProbability::WriteToXMLNode"

class cGcMetaBallComponentData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMetaBallComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMetaBallComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMetaBallComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMetaBallComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMetaBallComponentData::WriteToXMLNodeExplicit"

class cGcMultitoolPoolData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMultitoolPoolData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMultitoolPoolData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMultitoolPoolData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMultitoolPoolData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMultitoolPoolData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMultitoolPoolData::WriteToXMLNodeExplicit"

class cGcClothPiece:
    class cGcClothPiece(HookFactory):
        _name = "cGcClothPiece::cGcClothPiece"
    class ClassPointerCreate(HookFactory):
        _name = "cGcClothPiece::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcClothPiece::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcClothPiece::FixDown"
    class FixUp(HookFactory):
        _name = "cGcClothPiece::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcClothPiece::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcClothPiece::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcClothPiece::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcClothPiece::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcClothPiece::WriteToXMLNodeExplicit"

class cGcClothComponentData:
    class Cast(HookFactory):
        _name = "cGcClothComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcClothComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcClothComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcClothComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcClothComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcClothComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcClothComponentData::WriteToXMLNodeExplicit"

class cGcEncyclopediaComponentData:
    class Cast(HookFactory):
        _name = "cGcEncyclopediaComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcEncyclopediaComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEncyclopediaComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEncyclopediaComponentData::WriteToXMLNode"

class cGcNetworkInterpolationComponentData:
    class Cast(HookFactory):
        _name = "cGcNetworkInterpolationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNetworkInterpolationComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNetworkInterpolationComponentData::WriteToXMLNode"

class cGcNetworkPlayerMarkerComponentData:
    class Cast(HookFactory):
        _name = "cGcNetworkPlayerMarkerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNetworkPlayerMarkerComponentData::ClassPointerCreate"

class cGcOutpostComponentData:
    class Cast(HookFactory):
        _name = "cGcOutpostComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcOutpostComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcOutpostComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcOutpostComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcOutpostComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcOutpostComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcOutpostComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcOutpostComponentData::WriteToXMLNodeExplicit"

class cGcPlayerFullBodyIKComponentData:
    class Cast(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerFullBodyIKComponentData::WriteToXMLNodeExplicit"

class cGcPlayerWeaponComponentData:
    class Cast(HookFactory):
        _name = "cGcPlayerWeaponComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerWeaponComponentData::ClassPointerCreate"

class cGcScanEffectComponentData:
    class Cast(HookFactory):
        _name = "cGcScanEffectComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcScanEffectComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScanEffectComponentData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcScanEffectComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScanEffectComponentData::WriteToXMLNode"

class cGcScannableComponentData:
    class Cast(HookFactory):
        _name = "cGcScannableComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannableComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScannableComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcScannableComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannableComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScannableComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannableComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannableComponentData::WriteToXMLNodeExplicit"

class cGcSpringAttachmentComponentData:
    class Cast(HookFactory):
        _name = "cGcSpringAttachmentComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpringAttachmentComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSpringAttachmentComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSpringAttachmentComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcSpringAttachmentComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpringAttachmentComponentData::WriteToXMLNode"

class cGcMiningComponentData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMiningComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMiningComponentData::WriteToXMLNode"

class cGcOutpostLSystemPair:
    class ClassPointerCreate(HookFactory):
        _name = "cGcOutpostLSystemPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcOutpostLSystemPair::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcOutpostLSystemPair::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcOutpostLSystemPair::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcOutpostLSystemPair::WriteToXMLNodeExplicit"

class cGcLadderComponentData:
    class Cast(HookFactory):
        _name = "cGcLadderComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLadderComponentData::ClassPointerCreate"

class cGcLookAtComponentData:
    class Cast(HookFactory):
        _name = "cGcLookAtComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLookAtComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLookAtComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcLookAtComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLookAtComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLookAtComponentData::WriteToXMLNodeExplicit"

class cGcMaintenanceComponentData:
    class Cast(HookFactory):
        _name = "cGcMaintenanceComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceComponentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMaintenanceComponentData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMaintenanceComponentData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMaintenanceComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMaintenanceComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMaintenanceComponentData::WriteToXMLNodeExplicit"

class cGcNPCComponentData:
    class Cast(HookFactory):
        _name = "cGcNPCComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCComponentData::WriteToXMLNodeExplicit"

class cGcNPCInteractiveObjectComponentData:
    class Cast(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCInteractiveObjectComponentData::WriteToXMLNodeExplicit"

class cGcRefinerUnitComponentData:
    class Cast(HookFactory):
        _name = "cGcRefinerUnitComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRefinerUnitComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRefinerUnitComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRefinerUnitComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRefinerUnitComponentData::WriteToXMLNodeExplicit"

class cGcRocketLockerComponentData:
    class Cast(HookFactory):
        _name = "cGcRocketLockerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRocketLockerComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRocketLockerComponentData::WriteToXMLNode"

class cGcSentinelCoverComponentData:
    class Cast(HookFactory):
        _name = "cGcSentinelCoverComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelCoverComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelCoverComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelCoverComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelCoverComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelCoverComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelCoverComponentData::WriteToXMLNodeExplicit"

class cGcSquadronHologramComponentData:
    class Cast(HookFactory):
        _name = "cGcSquadronHologramComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSquadronHologramComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSquadronHologramComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSquadronHologramComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSquadronHologramComponentData::WriteToXMLNodeExplicit"

class cGcTechnologyAttachmentComponentData:
    class Cast(HookFactory):
        _name = "cGcTechnologyAttachmentComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyAttachmentComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechnologyAttachmentComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTechnologyAttachmentComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyAttachmentComponentData::WriteToXMLNode"

class cGcInteractionDof:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionDof::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionDof::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionDof::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInteractionDof::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionDof::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionDof::WriteToXMLNodeExplicit"

class cGcInteractionType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInteractionType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInteractionType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionType::WriteToXMLNodeExplicit"

class cGcAntagonistComponentData:
    class Cast(HookFactory):
        _name = "cGcAntagonistComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAntagonistComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAntagonistComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAntagonistComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAntagonistComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAntagonistComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAntagonistComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAntagonistComponentData::WriteToXMLNodeExplicit"

class cGcAudioAreaTriggerComponentData:
    class Cast(HookFactory):
        _name = "cGcAudioAreaTriggerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudioAreaTriggerComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAudioAreaTriggerComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAudioAreaTriggerComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudioAreaTriggerComponentData::WriteToXMLNode"

class cGcByteBeatPlayerComponentData:
    class Cast(HookFactory):
        _name = "cGcByteBeatPlayerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatPlayerComponentData::ClassPointerCreate"

class cGcChairComponentData:
    class Cast(HookFactory):
        _name = "cGcChairComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcChairComponentData::ClassPointerCreate"

class cGcCombatEffectsComponentData:
    class Cast(HookFactory):
        _name = "cGcCombatEffectsComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectsComponentData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatEffectsComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCombatEffectsComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectsComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatEffectsComponentData::WriteToXMLNodeExplicit"

class cGcCreatureFeederComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureFeederComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureFeederComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureFeederComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureFeederComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureFeederComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureFeederComponentData::WriteToXMLNodeExplicit"

class cGcCreatureHarvesterComponentData:
    class Cast(HookFactory):
        _name = "cGcCreatureHarvesterComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureHarvesterComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCreatureHarvesterComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureHarvesterComponentData::WriteToXMLNode"

class cGcDissolveEffectComponentData:
    class Cast(HookFactory):
        _name = "cGcDissolveEffectComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDissolveEffectComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDissolveEffectComponentData::WriteToXMLNode"

class cGcEggMachineComponentData:
    class Cast(HookFactory):
        _name = "cGcEggMachineComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcEggMachineComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEggMachineComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEggMachineComponentData::WriteToXMLNode"

class cGcEncounterComponentData:
    class Cast(HookFactory):
        _name = "cGcEncounterComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcEncounterComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEncounterComponentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcEncounterComponentData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcEncounterComponentData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcEncounterComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEncounterComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEncounterComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEncounterComponentData::WriteToXMLNodeExplicit"

class cGcEncounterStateComponentData:
    class Cast(HookFactory):
        _name = "cGcEncounterStateComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcEncounterStateComponentData::ClassPointerCreate"

class cGcExpeditionHologramComponentData:
    class Cast(HookFactory):
        _name = "cGcExpeditionHologramComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionHologramComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionHologramComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionHologramComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionHologramComponentData::WriteToXMLNodeExplicit"

class cGcFleetHologramComponentData:
    class Cast(HookFactory):
        _name = "cGcFleetHologramComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFleetHologramComponentData::ClassPointerCreate"

class cGcGeneratorUnitComponentData:
    class Cast(HookFactory):
        _name = "cGcGeneratorUnitComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratorUnitComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratorUnitComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratorUnitComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGeneratorUnitComponentData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratorUnitComponentData::WriteToXMLNode"

class cGcHologramComponentData:
    class Cast(HookFactory):
        _name = "cGcHologramComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHologramComponentData::ClassPointerCreate"

class cGcInteractionComponentData:
    class Cast(HookFactory):
        _name = "cGcInteractionComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInteractionComponentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcInteractionComponentData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInteractionComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionComponentData::WriteToXMLNodeExplicit"

class cGcNPCHabitationComponentData:
    class Cast(HookFactory):
        _name = "cGcNPCHabitationComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCHabitationComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCHabitationComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCHabitationComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCHabitationComponentData::WriteToXMLNodeExplicit"

class cGcPlayerControlInputAxis:
    class Cast(HookFactory):
        _name = "cGcPlayerControlInputAxis::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlInputAxis::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlInputAxis::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlInputAxis::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlInputAxis::WriteToXMLNode"

class cGcPlayerControlInputMouse:
    class Cast(HookFactory):
        _name = "cGcPlayerControlInputMouse::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlInputMouse::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlInputMouse::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlInputMouse::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlInputMouse::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerControlInputMouse::WriteToXMLNodeExplicit"

class cGcPlayerControlInputRemap:
    class Cast(HookFactory):
        _name = "cGcPlayerControlInputRemap::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlInputRemap::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlInputRemap::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlInputRemap::WriteToXMLNode"

class cGcPlayerEffectsComponentData:
    class Cast(HookFactory):
        _name = "cGcPlayerEffectsComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerEffectsComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerEffectsComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerEffectsComponentData::WriteToXMLNode"

class cGcCombatEffectsProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectsProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCombatEffectsProperties::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatEffectsProperties::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectsProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatEffectsProperties::WriteToXMLNodeExplicit"

class cGcCharacterMove:
    class Cast(HookFactory):
        _name = "cGcCharacterMove::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterMove::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterMove::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterMove::WriteToXMLNode"

class cGcCharacterRotate:
    class Cast(HookFactory):
        _name = "cGcCharacterRotate::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterRotate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCharacterRotate::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterRotate::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterRotate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterRotate::WriteToXMLNodeExplicit"

class cGcAmbientModeCameras:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAmbientModeCameras::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAmbientModeCameras::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcAmbientModeCameras::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAmbientModeCameras::WriteToXMLNode"

class cGcCharacterAlternateAnimation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterAlternateAnimation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterAlternateAnimation::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterAlternateAnimation::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterAlternateAnimation::WriteToXMLNode"

class cGcCharacterControlInputValidity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterControlInputValidity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterControlInputValidity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterControlInputValidity::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterControlInputValidity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterControlInputValidity::WriteToXMLNodeExplicit"

class cGcCharacterControlOutputSpace:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterControlOutputSpace::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterControlOutputSpace::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterControlOutputSpace::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterControlOutputSpace::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterControlOutputSpace::WriteToXMLNodeExplicit"

class cGcCharacterJetpackEffect:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterJetpackEffect::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterJetpackEffect::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterJetpackEffect::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterJetpackEffect::WriteToXMLNode"

class cGcCharacterLookAtData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterLookAtData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterLookAtData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterLookAtData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCharacterLookAtData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterLookAtData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterLookAtData::WriteToXMLNodeExplicit"

class cGcExactResource:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExactResource::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExactResource::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcExactResource::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExactResource::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExactResource::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcExactResource::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExactResource::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExactResource::WriteToXMLNodeExplicit"

class cGcInventoryValueData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryValueData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryValueData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryValueData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryValueData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryValueData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryValueData::WriteToXMLNodeExplicit"

class cGcPlayerControlState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerControlState::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerControlState::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerControlState::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerControlState::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerControlState::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerControlState::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerControlState::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerControlState::WriteToXMLNode"

class cGcRewardDestructEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDestructEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDestructEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDestructEntry::WriteToXMLNode"

class cGcRewardDestructRarities:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDestructRarities::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDestructRarities::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardDestructRarities::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDestructRarities::WriteToXMLNode"

class cGcRewardDestructTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDestructTable::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDestructTable::WriteToXMLNode"

class cGcRewardTableEntitlementItem:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTableEntitlementItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTableEntitlementItem::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRewardTableEntitlementItem::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRewardTableEntitlementItem::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTableEntitlementItem::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTableEntitlementItem::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTableEntitlementItem::WriteToXMLNode"

class cGcRewardTableItemList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTableItemList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTableItemList::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRewardTableItemList::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRewardTableItemList::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTableItemList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTableItemList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRewardTableItemList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTableItemList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardTableItemList::WriteToXMLNodeExplicit"
    class cGcRewardTableItemList(HookFactory):
        _name = "cGcRewardTableItemList::cGcRewardTableItemList"
        _overload: overloads.cGcRewardTableItemList.cGcRewardTableItemList.overloads = "cGcRewardTableItemList *"
        @classmethod
        def overload(cls, overload_args: overloads.cGcRewardTableItemList.cGcRewardTableItemList.overloads):
            cls._overload = overload_args
            return cls

class cGcStatIconTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatIconTable::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcStatIconTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatIconTable::WriteToXMLNode"

class cGcStatsBonus:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsBonus::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatsBonus::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcStatsBonus::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatsBonus::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcStatsBonus::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcStatsBonus::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsBonus::WriteToXMLNode"

class cGcStatsTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatsTypes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcStatsTypes::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatsTypes::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcStatsTypes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatsTypes::WriteToXMLNodeExplicit"

class cGcValueData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcValueData::ClassPointerCreate"

class cgcwordcategorytableEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cgcwordcategorytableEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cgcwordcategorytableEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cgcwordcategorytableEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cgcwordcategorytableEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cgcwordcategorytableEnum::WriteToXMLNodeExplicit"

class cGcTradingClassData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradingClassData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTradingClassData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTradingClassData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradingClassData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradingClassData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradingClassData::WriteToXMLNodeExplicit"

class cGcTradingClassTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradingClassTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTradingClassTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcTradingClassTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcTradingClassTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradingClassTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTradingClassTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradingClassTable::WriteToXMLNode"

class cGcUnlockableItemTree:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableItemTree::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableItemTree::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableItemTree::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUnlockableItemTree::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableItemTree::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableItemTree::WriteToXMLNodeExplicit"

class cGcUnlockableItemTreeGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableItemTreeGroups::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableItemTreeGroups::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUnlockableItemTreeGroups::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableItemTreeGroups::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableItemTreeGroups::WriteToXMLNodeExplicit"

class cGcUnlockableItemTreeNode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableItemTreeNode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableItemTreeNode::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcUnlockableItemTreeNode::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableItemTreeNode::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableItemTreeNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableItemTreeNode::WriteToXMLNodeExplicit"

class cGcUnlockableItemTrees:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableItemTrees::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableItemTrees::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcUnlockableItemTrees::FixDown"
    class FixUp(HookFactory):
        _name = "cGcUnlockableItemTrees::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableItemTrees::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableItemTrees::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableItemTrees::WriteToXMLNodeExplicit"

class cGcUnlockablePlatformReward:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockablePlatformReward::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockablePlatformReward::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockablePlatformReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockablePlatformReward::WriteToXMLNodeExplicit"

class cGcUnlockablePlatformRewards:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockablePlatformRewards::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockablePlatformRewards::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockablePlatformRewards::WriteToXMLNode"

class cGcUnlockableSeasonReward:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableSeasonReward::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableSeasonReward::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableSeasonReward::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUnlockableSeasonReward::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableSeasonReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableSeasonReward::WriteToXMLNodeExplicit"

class cGcUnlockableSeasonRewards:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableSeasonRewards::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableSeasonRewards::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcUnlockableSeasonRewards::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableSeasonRewards::WriteToXMLNode"

class cGcUnlockableTreeCostType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableTreeCostType::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableTreeCostType::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableTreeCostType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUnlockableTreeCostType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableTreeCostType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableTreeCostType::WriteToXMLNodeExplicit"

class cGcUnlockableTrees:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableTrees::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableTrees::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcUnlockableTrees::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcUnlockableTrees::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableTrees::WriteToXMLNode"

class cGcUnlockableTwitchReward:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableTwitchReward::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcUnlockableTwitchReward::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableTwitchReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUnlockableTwitchReward::WriteToXMLNodeExplicit"

class cGcUnlockableTwitchRewards:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUnlockableTwitchRewards::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUnlockableTwitchRewards::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUnlockableTwitchRewards::WriteToXMLNode"

class cGcWeaponInventoryMaxUpgradeCapacity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeaponInventoryMaxUpgradeCapacity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeaponInventoryMaxUpgradeCapacity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeaponInventoryMaxUpgradeCapacity::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeaponInventoryMaxUpgradeCapacity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeaponInventoryMaxUpgradeCapacity::WriteToXMLNodeExplicit"

class cGcWeightingCurve:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWeightingCurve::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWeightingCurve::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWeightingCurve::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWeightingCurve::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWeightingCurve::WriteToXMLNodeExplicit"

class cGcByteBeatTemplate:
    class FixDown(HookFactory):
        _name = "cGcByteBeatTemplate::FixDown"
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatTemplate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcByteBeatTemplate::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcByteBeatTemplate::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatTemplate::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatTemplate::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatTemplate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatTemplate::WriteToXMLNodeExplicit"

class cGcSubstanceTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSubstanceTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSubstanceTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceTable::WriteToXMLNode"

class cGcTechBoxData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechBoxData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechBoxData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTechBoxData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechBoxData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechBoxData::WriteToXMLNodeExplicit"

class cGcTechBoxTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechBoxTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechBoxTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcTechBoxTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechBoxTable::WriteToXMLNode"

class cGcTechList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTechList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTechList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechList::WriteToXMLNodeExplicit"

class cGcTechnologyCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTechnologyCategory::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTechnologyCategory::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTechnologyCategory::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTechnologyCategory::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTechnologyCategory::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechnologyCategory::WriteToXMLNodeExplicit"

class cGcTechnologyRarity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyRarity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTechnologyRarity::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTechnologyRarity::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTechnologyRarity::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcTechnologyRarity::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyRarity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechnologyRarity::WriteToXMLNodeExplicit"

class cGcTechnologyRequirement:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyRequirement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechnologyRequirement::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTechnologyRequirement::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTechnologyRequirement::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTechnologyRequirement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTechnologyRequirement::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTechnologyRequirement::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyRequirement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTechnologyRequirement::WriteToXMLNodeExplicit"

class cGcTechnologyTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechnologyTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyTable::WriteToXMLNode"

class cGcTechnologyTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTechnologyTypes::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTechnologyTypes::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcTechnologyTypes::FixDown"
    class FixUp(HookFactory):
        _name = "cGcTechnologyTypes::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTechnologyTypes::WriteToXMLNode"

class cGcTradeCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradeCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTradeCategory::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTradeCategory::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradeCategory::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcTradeCategory::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradeCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradeCategory::WriteToXMLNodeExplicit"

class cGcTradeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTradeData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcTradeData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcTradeData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcTradeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcTradeData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTradeData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTradeData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTradeData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradeData::WriteToXMLNodeExplicit"

class cGcTradeSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradeSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTradeSettings::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcTradeSettings::FixDown"
    class FixUp(HookFactory):
        _name = "cGcTradeSettings::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcTradeSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradeSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTradeSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradeSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradeSettings::WriteToXMLNodeExplicit"

class cGcTradingCategoryData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradingCategoryData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTradingCategoryData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcTradingCategoryData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcTradingCategoryData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradingCategoryData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTradingCategoryData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradingCategoryData::WriteToXMLNode"

class cGcSettlementJobDetails:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementJobDetails::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementJobDetails::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementJobDetails::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementJobDetails::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementJobDetails::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementJobDetails::WriteToXMLNode"

class cGcSettlementJudgementData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementJudgementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementJudgementData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSettlementJudgementData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSettlementJudgementData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementJudgementData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementJudgementData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementJudgementData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementJudgementData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementJudgementData::WriteToXMLNodeExplicit"
    class cGcSettlementJudgementData(HookFactory):
        _name = "cGcSettlementJudgementData::cGcSettlementJudgementData"

class cGcSettlementJudgementOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementJudgementOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementJudgementOption::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSettlementJudgementOption::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSettlementJudgementOption::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementJudgementOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementJudgementOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementJudgementOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementJudgementOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementJudgementOption::WriteToXMLNodeExplicit"
    class cGcSettlementJudgementOption(HookFactory):
        _name = "cGcSettlementJudgementOption::cGcSettlementJudgementOption"

class cGcSettlementJudgementPerkOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementJudgementPerkOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementJudgementPerkOption::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementJudgementPerkOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementJudgementPerkOption::WriteToXMLNodeExplicit"

class cGcSettlementPerkData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementPerkData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementPerkData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementPerkData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementPerkData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementPerkData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementPerkData::WriteToXMLNodeExplicit"

class cGcSettlementPerkUsefulData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementPerkUsefulData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementPerkUsefulData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementPerkUsefulData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementPerkUsefulData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementPerkUsefulData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementPerkUsefulData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementPerkUsefulData::WriteToXMLNodeExplicit"

class cGcSettlementPerksTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementPerksTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementPerksTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSettlementPerksTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementPerksTable::WriteToXMLNode"

class cGcSettlementStatChange:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatChange::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementStatChange::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementStatChange::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementStatChange::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementStatChange::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatChange::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementStatChange::WriteToXMLNodeExplicit"

class cGcSettlementStatChangeArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatChangeArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementStatChangeArray::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSettlementStatChangeArray::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementStatChangeArray::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatChangeArray::WriteToXMLNode"

class cGcSettlementStatStrength:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatStrength::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementStatStrength::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementStatStrength::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatStrength::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementStatStrength::WriteToXMLNodeExplicit"

class cGcSettlementStatStrengthData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatStrengthData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementStatStrengthData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementStatStrengthData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatStrengthData::WriteToXMLNode"

class cGcSettlementStatStrengthRanges:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatStrengthRanges::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementStatStrengthRanges::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatStrengthRanges::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementStatStrengthRanges::WriteToXMLNodeExplicit"

class cGcShipInventoryMaxUpgradeCapacity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipInventoryMaxUpgradeCapacity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipInventoryMaxUpgradeCapacity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipInventoryMaxUpgradeCapacity::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipInventoryMaxUpgradeCapacity::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipInventoryMaxUpgradeCapacity::WriteToXMLNode"

class cGcSizeIndicator:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSizeIndicator::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSizeIndicator::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSizeIndicator::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSizeIndicator::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSizeIndicator::WriteToXMLNodeExplicit"

class cGcStats:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStats::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStats::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcStats::FixDown"
    class FixUp(HookFactory):
        _name = "cGcStats::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStats::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStats::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStats::WriteToXMLNode"

class cGcStatsEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatsEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcStatsEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatsEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcStatsEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatsEntry::WriteToXMLNodeExplicit"

class cGcStatsEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatsEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatsEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatsEnum::WriteToXMLNodeExplicit"

class cGcStatsGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatsGroup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcStatsGroup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcStatsGroup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStatsGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatsGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatsGroup::WriteToXMLNodeExplicit"

class cGcStoryUtilityOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStoryUtilityOverride::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStoryUtilityOverride::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcStoryUtilityOverride::FixDown"
    class FixUp(HookFactory):
        _name = "cGcStoryUtilityOverride::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStoryUtilityOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStoryUtilityOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcStoryUtilityOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStoryUtilityOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStoryUtilityOverride::WriteToXMLNodeExplicit"

class cGcSubstanceSecondaryBiome:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSubstanceSecondaryBiome::WriteToXMLNodeExplicit"

class cGcRewardTeachWord:
    class Cast(HookFactory):
        _name = "cGcRewardTeachWord::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTeachWord::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTeachWord::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTeachWord::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardTeachWord::WriteToXMLNodeExplicit"

class cGcRewardTechRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardTechRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTechRecipe::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTechRecipe::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTechRecipe::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardTechRecipe::WriteToXMLNodeExplicit"

class cGcRewardTeleport:
    class Cast(HookFactory):
        _name = "cGcRewardTeleport::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTeleport::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTeleport::WriteToXMLNode"

class cGcRewardTimeWarp:
    class Cast(HookFactory):
        _name = "cGcRewardTimeWarp::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTimeWarp::ClassPointerCreate"

class cGcRewardTraderFlyby:
    class Cast(HookFactory):
        _name = "cGcRewardTraderFlyby::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTraderFlyby::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTraderFlyby::WriteToXMLNode"

class cGcRewardTrigger:
    class Cast(HookFactory):
        _name = "cGcRewardTrigger::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTrigger::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTrigger::WriteToXMLNode"

class cGcRewardTriggerSettlementJudgement:
    class Cast(HookFactory):
        _name = "cGcRewardTriggerSettlementJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTriggerSettlementJudgement::ClassPointerCreate"

class cGcRewardTriggerStorm:
    class Cast(HookFactory):
        _name = "cGcRewardTriggerStorm::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTriggerStorm::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTriggerStorm::WriteToXMLNode"

class cGcRewardUnlockSeasonReward:
    class Cast(HookFactory):
        _name = "cGcRewardUnlockSeasonReward::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUnlockSeasonReward::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardUnlockSeasonReward::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardUnlockSeasonReward::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardUnlockSeasonReward::WriteToXMLNodeExplicit"

class cGcRewardUnlockTitle:
    class Cast(HookFactory):
        _name = "cGcRewardUnlockTitle::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUnlockTitle::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardUnlockTitle::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardUnlockTitle::WriteToXMLNode"

class cGcRewardUpgradeBase:
    class Cast(HookFactory):
        _name = "cGcRewardUpgradeBase::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUpgradeBase::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardUpgradeBase::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardUpgradeBase::WriteToXMLNode"

class cGcRewardUpgradeShipClass:
    class Cast(HookFactory):
        _name = "cGcRewardUpgradeShipClass::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUpgradeShipClass::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardUpgradeShipClass::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardUpgradeShipClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardUpgradeShipClass::WriteToXMLNodeExplicit"

class cGcRewardUpgradeWeaponClass:
    class Cast(HookFactory):
        _name = "cGcRewardUpgradeWeaponClass::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUpgradeWeaponClass::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardUpgradeWeaponClass::WriteToXMLNode"

class cGcRewardUploadBase:
    class Cast(HookFactory):
        _name = "cGcRewardUploadBase::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardUploadBase::ClassPointerCreate"

class cGcRewardWantedLevel:
    class Cast(HookFactory):
        _name = "cGcRewardWantedLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardWantedLevel::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardWantedLevel::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardWantedLevel::WriteToXMLNode"

class cGcRewardWeapon:
    class Cast(HookFactory):
        _name = "cGcRewardWeapon::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardWeapon::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardWeapon::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardWeapon::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardWeapon::WriteToXMLNodeExplicit"

class cGcRewardWeaponSlot:
    class Cast(HookFactory):
        _name = "cGcRewardWeaponSlot::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardWeaponSlot::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardWeaponSlot::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcRewardWeaponSlot::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardWeaponSlot::WriteToXMLNode"

class cGcRewardWikiTopic:
    class Cast(HookFactory):
        _name = "cGcRewardWikiTopic::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardWikiTopic::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardWikiTopic::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardWikiTopic::WriteToXMLNode"

class cGcRewardWorker:
    class Cast(HookFactory):
        _name = "cGcRewardWorker::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardWorker::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardWorker::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardWorker::WriteToXMLNode"

class cGcRewardTableCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTableCategory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTableCategory::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTableCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTableCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTableCategory::WriteToXMLNode"

class cGcRewardTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTableEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTableEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRewardTableEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRewardTableEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTableEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTableEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRewardTableEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTableEntry::WriteToXMLNode"

class cGcRewardTableItem:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTableItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTableItem::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRewardTableItem::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRewardTableItem::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTableItem::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTableItem::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRewardTableItem::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTableItem::WriteToXMLNode"

class cGcSettlementBuildingCost:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementBuildingCost::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementBuildingCost::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSettlementBuildingCost::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementBuildingCost::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementBuildingCost::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementBuildingCost::WriteToXMLNode"

class cGcSettlementBuildingCostData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementBuildingCostData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementBuildingCostData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementBuildingCostData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementBuildingCostData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementBuildingCostData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementBuildingCostData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementBuildingCostData::WriteToXMLNodeExplicit"

class cGcSettlementCustomJudgement:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementCustomJudgement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSettlementCustomJudgement::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSettlementCustomJudgement::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementCustomJudgement::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementCustomJudgement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementCustomJudgement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementCustomJudgement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementCustomJudgement::WriteToXMLNodeExplicit"

class cGcRewardSpecificSeasonalSubstance:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificSeasonalSubstance::WriteToXMLNodeExplicit"

class cGcRewardSpecificShip:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificShip::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificShip::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificShip::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificShip::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardSpecificShip::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRewardSpecificShip::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificShip::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificShip::WriteToXMLNodeExplicit"

class cGcRewardSpecificSpecial:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificSpecial::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificSpecial::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificSpecial::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificSpecial::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificSpecial::WriteToXMLNodeExplicit"

class cGcRewardSpecificSubstance:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificSubstance::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificSubstance::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificSubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificSubstance::WriteToXMLNodeExplicit"

class cGcRewardSpecificTech:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificTech::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificTech::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificTech::WriteToXMLNode"

class cGcRewardSpecificTechFromList:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificTechFromList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificTechFromList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificTechFromList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificTechFromList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificTechFromList::WriteToXMLNode"

class cGcRewardSpecificWeapon:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificWeapon::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificWeapon::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificWeapon::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificWeapon::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardSpecificWeapon::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificWeapon::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificWeapon::WriteToXMLNodeExplicit"

class cGcRewardStanding:
    class Cast(HookFactory):
        _name = "cGcRewardStanding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardStanding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardStanding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardStanding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardStanding::WriteToXMLNodeExplicit"

class cGcRewardStartPurchase:
    class Cast(HookFactory):
        _name = "cGcRewardStartPurchase::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardStartPurchase::ClassPointerCreate"

class cGcRewardStartSettlementExpedition:
    class Cast(HookFactory):
        _name = "cGcRewardStartSettlementExpedition::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardStartSettlementExpedition::ClassPointerCreate"

class cGcRewardStatCompareAndSet:
    class Cast(HookFactory):
        _name = "cGcRewardStatCompareAndSet::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardStatCompareAndSet::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardStatCompareAndSet::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardStatCompareAndSet::WriteToXMLNode"

class cGcRewardStatDiff:
    class Cast(HookFactory):
        _name = "cGcRewardStatDiff::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardStatDiff::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardStatDiff::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardStatDiff::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardStatDiff::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardStatDiff::WriteToXMLNodeExplicit"

class cGcRewardSubstance:
    class Cast(HookFactory):
        _name = "cGcRewardSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSubstance::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSubstance::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSubstance::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardSubstance::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSubstance::WriteToXMLNodeExplicit"

class cGcRewardSwapMultiTool:
    class Cast(HookFactory):
        _name = "cGcRewardSwapMultiTool::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSwapMultiTool::ClassPointerCreate"

class cGcRewardSystemSpecificProductFromList:
    class Cast(HookFactory):
        _name = "cGcRewardSystemSpecificProductFromList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSystemSpecificProductFromList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSystemSpecificProductFromList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSystemSpecificProductFromList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSystemSpecificProductFromList::WriteToXMLNode"

class cGcRewardTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRewardTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRewardTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRewardTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardTable::WriteToXMLNodeExplicit"

class cGcRewardSecondarySubstance:
    class Cast(HookFactory):
        _name = "cGcRewardSecondarySubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSecondarySubstance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSecondarySubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSecondarySubstance::WriteToXMLNode"

class cGcRewardSetAbandonedFreighterMissionState:
    class Cast(HookFactory):
        _name = "cGcRewardSetAbandonedFreighterMissionState::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSetAbandonedFreighterMissionState::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSetAbandonedFreighterMissionState::WriteToXMLNode"

class cGcRewardSetCurrentMission:
    class Cast(HookFactory):
        _name = "cGcRewardSetCurrentMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSetCurrentMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSetCurrentMission::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSetCurrentMission::WriteToXMLNode"

class cGcRewardSetInteractionSeenBitmask:
    class Cast(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSetInteractionSeenBitmask::WriteToXMLNodeExplicit"

class cGcRewardSetNexusExitWarpTargetToFireteamMemberUA:
    class Cast(HookFactory):
        _name = "cGcRewardSetNexusExitWarpTargetToFireteamMemberUA::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSetNexusExitWarpTargetToFireteamMemberUA::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSetNexusExitWarpTargetToFireteamMemberUA::WriteToXMLNode"

class cGcRewardSetWeaponSuppressed:
    class Cast(HookFactory):
        _name = "cGcRewardSetWeaponSuppressed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSetWeaponSuppressed::ClassPointerCreate"

class cGcRewardSettlementCustomJudgement:
    class Cast(HookFactory):
        _name = "cGcRewardSettlementCustomJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSettlementCustomJudgement::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSettlementCustomJudgement::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSettlementCustomJudgement::WriteToXMLNode"

class cGcRewardSettlementJudgement:
    class Cast(HookFactory):
        _name = "cGcRewardSettlementJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSettlementJudgement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSettlementJudgement::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSettlementJudgement::WriteToXMLNode"

class cGcRewardSettlementProgress:
    class Cast(HookFactory):
        _name = "cGcRewardSettlementProgress::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSettlementProgress::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSettlementProgress::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSettlementProgress::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSettlementProgress::WriteToXMLNodeExplicit"

class cGcRewardSettlementStat:
    class Cast(HookFactory):
        _name = "cGcRewardSettlementStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSettlementStat::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSettlementStat::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSettlementStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSettlementStat::WriteToXMLNodeExplicit"

class cGcRewardShield:
    class Cast(HookFactory):
        _name = "cGcRewardShield::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardShield::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardShield::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardShield::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardShield::WriteToXMLNodeExplicit"

class cGcRewardShipAssistance:
    class Cast(HookFactory):
        _name = "cGcRewardShipAssistance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardShipAssistance::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardShipAssistance::WriteToXMLNode"

class cGcRewardShipMessage:
    class Cast(HookFactory):
        _name = "cGcRewardShipMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardShipMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardShipMessage::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardShipMessage::WriteToXMLNode"

class cGcRewardShipSlot:
    class Cast(HookFactory):
        _name = "cGcRewardShipSlot::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardShipSlot::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardShipSlot::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcRewardShipSlot::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardShipSlot::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardShipSlot::WriteToXMLNodeExplicit"

class cGcRewardShowBlackHoles:
    class Cast(HookFactory):
        _name = "cGcRewardShowBlackHoles::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardShowBlackHoles::ClassPointerCreate"

class cGcRewardSignalScan:
    class Cast(HookFactory):
        _name = "cGcRewardSignalScan::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSignalScan::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSignalScan::WriteToXMLNode"

class cGcRewardSpecificCommunityTierProduct:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificCommunityTierProduct::WriteToXMLNodeExplicit"

class cGcRewardSpecificFrigate:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificFrigate::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificFrigate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificFrigate::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificFrigate::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardSpecificFrigate::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificFrigate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificFrigate::WriteToXMLNodeExplicit"

class cGcRewardSpecificPetEgg:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificPetEgg::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificPetEgg::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificPetEgg::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificPetEgg::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificPetEgg::WriteToXMLNodeExplicit"

class cGcRewardSpecificProduct:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardSpecificProduct::WriteToXMLNodeExplicit"

class cGcRewardSpecificProductRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificProductRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificProductRecipe::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificProductRecipe::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificProductRecipe::WriteToXMLNode"

class cGcRewardSpecificProductRecipeFromList:
    class Cast(HookFactory):
        _name = "cGcRewardSpecificProductRecipeFromList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSpecificProductRecipeFromList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSpecificProductRecipeFromList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardSpecificProductRecipeFromList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSpecificProductRecipeFromList::WriteToXMLNode"

class cGcRewardOverridePulseEncounterChance:
    class Cast(HookFactory):
        _name = "cGcRewardOverridePulseEncounterChance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardOverridePulseEncounterChance::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardOverridePulseEncounterChance::WriteToXMLNode"

class cGcRewardPetAction:
    class Cast(HookFactory):
        _name = "cGcRewardPetAction::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPetAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardPetAction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardPetAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardPetAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardPetAction::WriteToXMLNodeExplicit"

class cGcRewardPetEgg:
    class Cast(HookFactory):
        _name = "cGcRewardPetEgg::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPetEgg::ClassPointerCreate"

class cGcRewardPetEggHatch:
    class Cast(HookFactory):
        _name = "cGcRewardPetEggHatch::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPetEggHatch::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardPetEggHatch::WriteToXMLNode"

class cGcRewardPirateAttack:
    class Cast(HookFactory):
        _name = "cGcRewardPirateAttack::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPirateAttack::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardPirateAttack::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardPirateAttack::WriteToXMLNode"

class cGcRewardPirateProbeSignal:
    class Cast(HookFactory):
        _name = "cGcRewardPirateProbeSignal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPirateProbeSignal::ClassPointerCreate"

class cGcRewardPlanetSubstance:
    class Cast(HookFactory):
        _name = "cGcRewardPlanetSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPlanetSubstance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardPlanetSubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardPlanetSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardPlanetSubstance::WriteToXMLNodeExplicit"

class cGcRewardPoliceScanSignal:
    class Cast(HookFactory):
        _name = "cGcRewardPoliceScanSignal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardPoliceScanSignal::ClassPointerCreate"

class cGcRewardProcTechProduct:
    class Cast(HookFactory):
        _name = "cGcRewardProcTechProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProcTechProduct::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardProcTechProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardProcTechProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardProcTechProduct::WriteToXMLNodeExplicit"

class cGcRewardProceduralProduct:
    class Cast(HookFactory):
        _name = "cGcRewardProceduralProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProceduralProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardProceduralProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardProceduralProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardProceduralProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardProceduralProduct::WriteToXMLNodeExplicit"

class cGcRewardProceduralProductFromBiome:
    class Cast(HookFactory):
        _name = "cGcRewardProceduralProductFromBiome::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProceduralProductFromBiome::ClassPointerCreate"

class cGcRewardProceduralTechnology:
    class Cast(HookFactory):
        _name = "cGcRewardProceduralTechnology::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProceduralTechnology::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardProceduralTechnology::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardProceduralTechnology::WriteToXMLNode"

class cGcRewardProduct:
    class Cast(HookFactory):
        _name = "cGcRewardProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardProduct::WriteToXMLNodeExplicit"

class cGcRewardProductRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardProductRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardProductRecipe::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardProductRecipe::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardProductRecipe::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardProductRecipe::WriteToXMLNode"

class cGcRewardRechargeTech:
    class Cast(HookFactory):
        _name = "cGcRewardRechargeTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardRechargeTech::ClassPointerCreate"

class cGcRewardRefreshHazProt:
    class Cast(HookFactory):
        _name = "cGcRewardRefreshHazProt::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardRefreshHazProt::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardRefreshHazProt::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardRefreshHazProt::WriteToXMLNode"

class cGcRewardRepairTech:
    class Cast(HookFactory):
        _name = "cGcRewardRepairTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardRepairTech::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardRepairTech::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardRepairTech::WriteToXMLNode"

class cGcRewardRepairWholeInventory:
    class Cast(HookFactory):
        _name = "cGcRewardRepairWholeInventory::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardRepairWholeInventory::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardRepairWholeInventory::WriteToXMLNode"

class cGcRewardRequirementsForRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardRequirementsForRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardRequirementsForRecipe::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardRequirementsForRecipe::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardRequirementsForRecipe::WriteToXMLNode"

class cGcRewardSalvageShip:
    class Cast(HookFactory):
        _name = "cGcRewardSalvageShip::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSalvageShip::ClassPointerCreate"

class cGcRewardScan:
    class Cast(HookFactory):
        _name = "cGcRewardScan::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardScan::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardScan::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardScan::WriteToXMLNode"

class cGcRewardScanEvent:
    class Cast(HookFactory):
        _name = "cGcRewardScanEvent::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardScanEvent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardScanEvent::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardScanEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardScanEvent::WriteToXMLNodeExplicit"

class cGcRewardScanEventNearestBuilding:
    class Cast(HookFactory):
        _name = "cGcRewardScanEventNearestBuilding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardScanEventNearestBuilding::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardScanEventNearestBuilding::WriteToXMLNode"

class cGcRewardSecondaryInteractionOptions:
    class Cast(HookFactory):
        _name = "cGcRewardSecondaryInteractionOptions::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardSecondaryInteractionOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardSecondaryInteractionOptions::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardSecondaryInteractionOptions::WriteToXMLNode"

class cGcRewardScanEventOutcome:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardScanEventOutcome::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardScanEventOutcome::WriteToXMLNode"

class cGcRewardIncrementStat:
    class Cast(HookFactory):
        _name = "cGcRewardIncrementStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardIncrementStat::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardIncrementStat::WriteToXMLNode"

class cGcRewardInstallTech:
    class Cast(HookFactory):
        _name = "cGcRewardInstallTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardInstallTech::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardInstallTech::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardInstallTech::WriteToXMLNode"

class cGcRewardInterventionResponse:
    class Cast(HookFactory):
        _name = "cGcRewardInterventionResponse::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardInterventionResponse::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardInterventionResponse::WriteToXMLNode"

class cGcRewardInventorySlots:
    class Cast(HookFactory):
        _name = "cGcRewardInventorySlots::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardInventorySlots::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardInventorySlots::WriteToXMLNode"

class cGcRewardJetpackBoost:
    class Cast(HookFactory):
        _name = "cGcRewardJetpackBoost::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardJetpackBoost::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardJetpackBoost::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardJetpackBoost::WriteToXMLNode"

class cGcRewardJourneyThroughCentre:
    class Cast(HookFactory):
        _name = "cGcRewardJourneyThroughCentre::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardJourneyThroughCentre::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardJourneyThroughCentre::WriteToXMLNode"

class cGcRewardMission:
    class Cast(HookFactory):
        _name = "cGcRewardMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMission::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMission::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMission::WriteToXMLNode"

class cGcRewardMissionMessage:
    class Cast(HookFactory):
        _name = "cGcRewardMissionMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMissionMessage::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMissionMessage::GenerateHash"

class cGcRewardMissionMessageSeeded:
    class Cast(HookFactory):
        _name = "cGcRewardMissionMessageSeeded::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMissionMessageSeeded::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMissionMessageSeeded::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMissionMessageSeeded::WriteToXMLNode"

class cGcRewardMissionMessageToMatchingSeeds:
    class Cast(HookFactory):
        _name = "cGcRewardMissionMessageToMatchingSeeds::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMissionMessageToMatchingSeeds::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMissionMessageToMatchingSeeds::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMissionMessageToMatchingSeeds::WriteToXMLNode"

class cGcRewardMissionSeeded:
    class Cast(HookFactory):
        _name = "cGcRewardMissionSeeded::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMissionSeeded::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMissionSeeded::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMissionSeeded::WriteToXMLNode"

class cGcRewardModifyStat:
    class Cast(HookFactory):
        _name = "cGcRewardModifyStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardModifyStat::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardModifyStat::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardModifyStat::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardModifyStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardModifyStat::WriteToXMLNodeExplicit"

class cGcRewardMoney:
    class Cast(HookFactory):
        _name = "cGcRewardMoney::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMoney::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardMoney::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMoney::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardMoney::WriteToXMLNodeExplicit"

class cGcRewardMultiSpecificItems:
    class Cast(HookFactory):
        _name = "cGcRewardMultiSpecificItems::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMultiSpecificItems::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardMultiSpecificItems::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMultiSpecificItems::WriteToXMLNode"

class cGcRewardMultiSpecificProductRecipes:
    class Cast(HookFactory):
        _name = "cGcRewardMultiSpecificProductRecipes::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMultiSpecificProductRecipes::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardMultiSpecificProductRecipes::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMultiSpecificProductRecipes::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMultiSpecificProductRecipes::WriteToXMLNode"

class cGcRewardMultiSpecificProducts:
    class Cast(HookFactory):
        _name = "cGcRewardMultiSpecificProducts::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMultiSpecificProducts::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardMultiSpecificProducts::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMultiSpecificProducts::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMultiSpecificProducts::WriteToXMLNode"

class cGcRewardMultiSpecificTechRecipes:
    class Cast(HookFactory):
        _name = "cGcRewardMultiSpecificTechRecipes::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMultiSpecificTechRecipes::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardMultiSpecificTechRecipes::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMultiSpecificTechRecipes::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMultiSpecificTechRecipes::WriteToXMLNode"

class cGcRewardNetworkPlayer:
    class Cast(HookFactory):
        _name = "cGcRewardNetworkPlayer::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardNetworkPlayer::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcRewardNetworkPlayer::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardNetworkPlayer::WriteToXMLNode"

class cGcRewardNexus:
    class Cast(HookFactory):
        _name = "cGcRewardNexus::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardNexus::ClassPointerCreate"

class cGcRewardOSDMessage:
    class Cast(HookFactory):
        _name = "cGcRewardOSDMessage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardOSDMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardOSDMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardOSDMessage::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardOSDMessage::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardOSDMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardOSDMessage::WriteToXMLNodeExplicit"

class cGcRewardOpenFreeFreighter:
    class Cast(HookFactory):
        _name = "cGcRewardOpenFreeFreighter::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardOpenFreeFreighter::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardOpenFreeFreighter::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardOpenFreeFreighter::WriteToXMLNode"

class cGcRewardOpenPage:
    class Cast(HookFactory):
        _name = "cGcRewardOpenPage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardOpenPage::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardOpenPage::WriteToXMLNode"

class cGcRewardOpenUnlockTree:
    class Cast(HookFactory):
        _name = "cGcRewardOpenUnlockTree::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardOpenUnlockTree::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardOpenUnlockTree::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardOpenUnlockTree::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardOpenUnlockTree::WriteToXMLNodeExplicit"

class cGcRewardMissionOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardMissionOverride::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardMissionOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardMissionOverride::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardMissionOverride::WriteToXMLNode"

class cGcRewardDeactivateFiends:
    class Cast(HookFactory):
        _name = "cGcRewardDeactivateFiends::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDeactivateFiends::ClassPointerCreate"

class cGcRewardDeath:
    class Cast(HookFactory):
        _name = "cGcRewardDeath::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDeath::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardDeath::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDeath::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardDeath::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRewardDeath::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDeath::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardDeath::WriteToXMLNodeExplicit"

class cGcRewardDisableSentinels:
    class Cast(HookFactory):
        _name = "cGcRewardDisableSentinels::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDisableSentinels::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDisableSentinels::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcRewardDisableSentinels::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDisableSentinels::WriteToXMLNode"

class cGcRewardDiscoverRune:
    class Cast(HookFactory):
        _name = "cGcRewardDiscoverRune::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDiscoverRune::ClassPointerCreate"

class cGcRewardDisguisedProduct:
    class Cast(HookFactory):
        _name = "cGcRewardDisguisedProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDisguisedProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardDisguisedProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDisguisedProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDisguisedProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardDisguisedProduct::WriteToXMLNodeExplicit"

class cGcRewardDisplayTechWindow:
    class Cast(HookFactory):
        _name = "cGcRewardDisplayTechWindow::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDisplayTechWindow::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDisplayTechWindow::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDisplayTechWindow::WriteToXMLNode"

class cGcRewardDummyLocID:
    class Cast(HookFactory):
        _name = "cGcRewardDummyLocID::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDummyLocID::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDummyLocID::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDummyLocID::WriteToXMLNode"

class cGcRewardEnableInteractionClass:
    class Cast(HookFactory):
        _name = "cGcRewardEnableInteractionClass::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardEnableInteractionClass::ClassPointerCreate"

class cGcRewardEnableSentinels:
    class Cast(HookFactory):
        _name = "cGcRewardEnableSentinels::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardEnableSentinels::ClassPointerCreate"

class cGcRewardEndFrigateFlyby:
    class Cast(HookFactory):
        _name = "cGcRewardEndFrigateFlyby::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardEndFrigateFlyby::ClassPointerCreate"

class cGcRewardEndSettlementExpedition:
    class Cast(HookFactory):
        _name = "cGcRewardEndSettlementExpedition::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardEndSettlementExpedition::ClassPointerCreate"

class cGcRewardEnergy:
    class Cast(HookFactory):
        _name = "cGcRewardEnergy::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardEnergy::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardEnergy::WriteToXMLNode"

class cGcRewardExchangeProduct:
    class Cast(HookFactory):
        _name = "cGcRewardExchangeProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardExchangeProduct::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardExchangeProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardExchangeProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardExchangeProduct::WriteToXMLNodeExplicit"

class cGcRewardFactionStanding:
    class Cast(HookFactory):
        _name = "cGcRewardFactionStanding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFactionStanding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardFactionStanding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardFactionStanding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardFactionStanding::WriteToXMLNodeExplicit"

class cGcRewardForceDiscoverSystem:
    class Cast(HookFactory):
        _name = "cGcRewardForceDiscoverSystem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardForceDiscoverSystem::ClassPointerCreate"

class cGcRewardForgetSpecificProductRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardForgetSpecificProductRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardForgetSpecificProductRecipe::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardForgetSpecificProductRecipe::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardForgetSpecificProductRecipe::WriteToXMLNode"

class cGcRewardForgetSpecificTechRecipe:
    class Cast(HookFactory):
        _name = "cGcRewardForgetSpecificTechRecipe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardForgetSpecificTechRecipe::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardForgetSpecificTechRecipe::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardForgetSpecificTechRecipe::WriteToXMLNode"

class cGcRewardFreeStamina:
    class Cast(HookFactory):
        _name = "cGcRewardFreeStamina::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFreeStamina::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardFreeStamina::WriteToXMLNode"

class cGcRewardFreighterBaseReset:
    class Cast(HookFactory):
        _name = "cGcRewardFreighterBaseReset::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFreighterBaseReset::ClassPointerCreate"

class cGcRewardFreighterMegaWarp:
    class Cast(HookFactory):
        _name = "cGcRewardFreighterMegaWarp::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFreighterMegaWarp::ClassPointerCreate"

class cGcRewardFreighterSlot:
    class Cast(HookFactory):
        _name = "cGcRewardFreighterSlot::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFreighterSlot::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardFreighterSlot::WriteToXMLNode"

class cGcRewardFrigateDamageResponse:
    class Cast(HookFactory):
        _name = "cGcRewardFrigateDamageResponse::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFrigateDamageResponse::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardFrigateDamageResponse::WriteToXMLNode"

class cGcRewardFrigateFlyby:
    class Cast(HookFactory):
        _name = "cGcRewardFrigateFlyby::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardFrigateFlyby::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardFrigateFlyby::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardFrigateFlyby::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRewardFrigateFlyby::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardFrigateFlyby::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardFrigateFlyby::WriteToXMLNodeExplicit"

class cGcRewardHazard:
    class Cast(HookFactory):
        _name = "cGcRewardHazard::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardHazard::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardHazard::WriteToXMLNode"

class cGcRewardHealth:
    class Cast(HookFactory):
        _name = "cGcRewardHealth::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardHealth::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardHealth::WriteToXMLNode"

class cGcRewardIncrementInteractionIndex:
    class Cast(HookFactory):
        _name = "cGcRewardIncrementInteractionIndex::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardIncrementInteractionIndex::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardIncrementInteractionIndex::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardIncrementInteractionIndex::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardIncrementInteractionIndex::WriteToXMLNodeExplicit"

class cGcRewardAbortTakeoff:
    class Cast(HookFactory):
        _name = "cGcRewardAbortTakeoff::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardAbortTakeoff::ClassPointerCreate"

class cGcRewardActivateEncounterSentinels:
    class Cast(HookFactory):
        _name = "cGcRewardActivateEncounterSentinels::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardActivateEncounterSentinels::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardActivateEncounterSentinels::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardActivateEncounterSentinels::WriteToXMLNode"

class cGcRewardActivateFiends:
    class Cast(HookFactory):
        _name = "cGcRewardActivateFiends::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardActivateFiends::ClassPointerCreate"

class cGcRewardAdvancePortalState:
    class Cast(HookFactory):
        _name = "cGcRewardAdvancePortalState::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardAdvancePortalState::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardAdvancePortalState::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardAdvancePortalState::WriteToXMLNode"

class cGcRewardAssessCookedProduct:
    class Cast(HookFactory):
        _name = "cGcRewardAssessCookedProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardAssessCookedProduct::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardAssessCookedProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardAssessCookedProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardAssessCookedProduct::WriteToXMLNodeExplicit"

class cGcRewardAtlasPathProgress:
    class Cast(HookFactory):
        _name = "cGcRewardAtlasPathProgress::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardAtlasPathProgress::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardAtlasPathProgress::WriteToXMLNode"

class cGcRewardBeginSettlementBuilding:
    class Cast(HookFactory):
        _name = "cGcRewardBeginSettlementBuilding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardBeginSettlementBuilding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardBeginSettlementBuilding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardBeginSettlementBuilding::WriteToXMLNode"

class cGcRewardCargo:
    class Cast(HookFactory):
        _name = "cGcRewardCargo::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCargo::ClassPointerCreate"

class cGcRewardClosePortal:
    class Cast(HookFactory):
        _name = "cGcRewardClosePortal::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardClosePortal::ClassPointerCreate"

class cGcRewardCommunityContribution:
    class Cast(HookFactory):
        _name = "cGcRewardCommunityContribution::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCommunityContribution::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardCommunityContribution::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardCommunityContribution::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCommunityContribution::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardCommunityContribution::WriteToXMLNodeExplicit"

class cGcRewardCompleteMission:
    class Cast(HookFactory):
        _name = "cGcRewardCompleteMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCompleteMission::ClassPointerCreate"

class cGcRewardCompleteMultiMission:
    class Cast(HookFactory):
        _name = "cGcRewardCompleteMultiMission::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCompleteMultiMission::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardCompleteMultiMission::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCompleteMultiMission::WriteToXMLNode"

class cGcRewardCrashSiteFly:
    class Cast(HookFactory):
        _name = "cGcRewardCrashSiteFly::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCrashSiteFly::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardCrashSiteFly::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCrashSiteFly::WriteToXMLNode"

class cGcRewardCrashSiteRepair:
    class Cast(HookFactory):
        _name = "cGcRewardCrashSiteRepair::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCrashSiteRepair::ClassPointerCreate"

class cGcRewardCustomExpeditionLogEntry:
    class Cast(HookFactory):
        _name = "cGcRewardCustomExpeditionLogEntry::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCustomExpeditionLogEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRewardCustomExpeditionLogEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCustomExpeditionLogEntry::WriteToXMLNode"

class cGcRewardCustomPlayerControl:
    class Cast(HookFactory):
        _name = "cGcRewardCustomPlayerControl::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCustomPlayerControl::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCustomPlayerControl::WriteToXMLNode"

class cGcRewardDamage:
    class Cast(HookFactory):
        _name = "cGcRewardDamage::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDamage::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDamage::WriteToXMLNode"

class cGcRewardDamageTech:
    class Cast(HookFactory):
        _name = "cGcRewardDamageTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardDamageTech::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardDamageTech::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardDamageTech::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardDamageTech::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardDamageTech::WriteToXMLNodeExplicit"

class cGcRecipeTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRecipeTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRecipeTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcRecipeTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRecipeTable::WriteToXMLNode"

class cGcRefinerRecipe:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRefinerRecipe::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRefinerRecipe::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRefinerRecipe::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRefinerRecipe::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRefinerRecipe::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRefinerRecipe::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRefinerRecipe::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRefinerRecipe::WriteToXMLNodeExplicit"

class cGcRewardCommunicatorMessage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRewardCommunicatorMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRewardCommunicatorMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRewardCommunicatorMessage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcRewardCommunicatorMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRewardCommunicatorMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRewardCommunicatorMessage::WriteToXMLNodeExplicit"

class cGcRealityIcon:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityIcon::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRealityIcon::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcRealityIcon::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityIcon::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealityIcon::WriteToXMLNodeExplicit"

class cGcRealityIconTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityIconTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRealityIconTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRealityIconTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRealityIconTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRealityIconTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealityIconTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRealityIconTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityIconTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealityIconTable::WriteToXMLNodeExplicit"

class cGcRealityManagerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityManagerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRealityManagerData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcRealityManagerData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRealityManagerData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRealityManagerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealityManagerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRealityManagerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityManagerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealityManagerData::WriteToXMLNodeExplicit"

class cGcRealitySubstanceCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealitySubstanceCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRealitySubstanceCategory::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcRealitySubstanceCategory::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealitySubstanceCategory::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcRealitySubstanceCategory::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealitySubstanceCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealitySubstanceCategory::WriteToXMLNodeExplicit"

class cGcRealitySubstanceCraftingMix:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealitySubstanceCraftingMix::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRealitySubstanceCraftingMix::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealitySubstanceCraftingMix::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealitySubstanceCraftingMix::WriteToXMLNode"

class cGcProceduralProductWord:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralProductWord::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralProductWord::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcProceduralProductWord::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralProductWord::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralProductWord::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProceduralProductWord::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralProductWord::WriteToXMLNode"

class cGcProceduralTechnologyCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralTechnologyCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralTechnologyCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProceduralTechnologyCategory::WriteToXMLNodeExplicit"

class cGcProceduralTechnologyStatLevel:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProceduralTechnologyStatLevel::WriteToXMLNodeExplicit"

class cGcProceduralTechnologyTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralTechnologyTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralTechnologyTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcProceduralTechnologyTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralTechnologyTable::WriteToXMLNode"

class cGcProductCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProductCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProductCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProductCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProductCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProductCategory::WriteToXMLNodeExplicit"

class cGcProductProceduralOnlyData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProductProceduralOnlyData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProductProceduralOnlyData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcProductProceduralOnlyData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcProductProceduralOnlyData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProductProceduralOnlyData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProductProceduralOnlyData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProductProceduralOnlyData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProductProceduralOnlyData::WriteToXMLNodeExplicit"

class cGcProductTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProductTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProductTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcProductTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcProductTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProductTable::WriteToXMLNode"

class cGcPurchaseableBuildingBlueprints:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPurchaseableBuildingBlueprints::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPurchaseableBuildingBlueprints::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPurchaseableBuildingBlueprints::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPurchaseableBuildingBlueprints::WriteToXMLNode"

class cGcPurchaseableSpecial:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPurchaseableSpecial::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPurchaseableSpecial::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPurchaseableSpecial::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPurchaseableSpecial::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPurchaseableSpecial::WriteToXMLNodeExplicit"

class cGcPurchaseableSpecials:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPurchaseableSpecials::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPurchaseableSpecials::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPurchaseableSpecials::WriteToXMLNode"

class cGcPuzzleTextFlow:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPuzzleTextFlow::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPuzzleTextFlow::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPuzzleTextFlow::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcPuzzleTextFlow::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPuzzleTextFlow::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPuzzleTextFlow::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPuzzleTextFlow::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPuzzleTextFlow::WriteToXMLNodeExplicit"

class cGcRarity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRarity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRarity::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcRarity::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRarity::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcRarity::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRarity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRarity::WriteToXMLNodeExplicit"

class cGcRealityCommonFactions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityCommonFactions::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRealityCommonFactions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealityCommonFactions::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityCommonFactions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealityCommonFactions::WriteToXMLNodeExplicit"

class cGcRealityCraftingRecipeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityCraftingRecipeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRealityCraftingRecipeData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcRealityCraftingRecipeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRealityCraftingRecipeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealityCraftingRecipeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRealityCraftingRecipeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityCraftingRecipeData::WriteToXMLNode"

class cGcRealityGameIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRealityGameIcons::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRealityGameIcons::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRealityGameIcons::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRealityGameIcons::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRealityGameIcons::WriteToXMLNodeExplicit"

class cGcLegacyItemTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLegacyItemTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcLegacyItemTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLegacyItemTable::WriteToXMLNode"

class cGcLegality:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLegality::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLegality::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcLegality::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLegality::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcLegality::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLegality::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLegality::WriteToXMLNodeExplicit"

class cGcMaintenanceElement:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceElement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceElement::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceElement::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMaintenanceElement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMaintenanceElement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMaintenanceElement::WriteToXMLNodeExplicit"

class cGcMaintenanceElementGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceElementGroups::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceElementGroups::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMaintenanceElementGroups::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceElementGroups::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMaintenanceElementGroups::WriteToXMLNodeExplicit"

class cGcMaintenanceGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceGroup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceGroup::WriteToXMLNode"

class cGcMaintenanceGroupEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceGroupEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceGroupEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceGroupEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceGroupEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMaintenanceGroupEntry::WriteToXMLNodeExplicit"

class cGcMaintenanceGroupsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceGroupsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMaintenanceGroupsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcMaintenanceGroupsTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceGroupsTable::WriteToXMLNode"

class cGcMultiSpecificItemEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMultiSpecificItemEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMultiSpecificItemEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcMultiSpecificItemEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcMultiSpecificItemEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcMultiSpecificItemEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMultiSpecificItemEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMultiSpecificItemEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMultiSpecificItemEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMultiSpecificItemEntry::WriteToXMLNodeExplicit"

class cGcNameGeneratorSectorTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNameGeneratorSectorTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNameGeneratorSectorTypes::WriteToXMLNode"

class cGcNameGeneratorTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNameGeneratorTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNameGeneratorTypes::WriteToXMLNode"

class cGcNameGeneratorWord:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNameGeneratorWord::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNameGeneratorWord::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNameGeneratorWord::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNameGeneratorWord::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNameGeneratorWord::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNameGeneratorWord::WriteToXMLNodeExplicit"

class cGcNumberedTextList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNumberedTextList::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNumberedTextList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNumberedTextList::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNumberedTextList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNumberedTextList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNumberedTextList::WriteToXMLNodeExplicit"

class cGcPlanetResourceIconLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlanetResourceIconLookup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlanetResourceIconLookup::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlanetResourceIconLookup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlanetResourceIconLookup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlanetResourceIconLookup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlanetResourceIconLookup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlanetResourceIconLookup::WriteToXMLNode"

class cGcPlayerDamageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerDamageData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerDamageData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerDamageData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerDamageData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerDamageData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerDamageData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerDamageData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerDamageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerDamageData::WriteToXMLNodeExplicit"

class cGcPlayerDamageTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerDamageTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerDamageTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerDamageTable::FixUp"
    class Save(HookFactory):
        _name = "cGcPlayerDamageTable::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerDamageTable::WriteToXMLNode"

class cGcPlayerTitleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerTitleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerTitleData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerTitleData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerTitleData::WriteToXMLNode"

class cGcProceduralProductCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralProductCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProceduralProductCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProceduralProductCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralProductCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcProceduralProductCategory::WriteToXMLNodeExplicit"

class cGcProceduralProductDeployable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralProductDeployable::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralProductDeployable::WriteToXMLNode"

class cGcProceduralProductTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProceduralProductTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcProceduralProductTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcProceduralProductTable::FixUp"
    class Save(HookFactory):
        _name = "cGcProceduralProductTable::Save"
    class SetDefaults(HookFactory):
        _name = "cGcProceduralProductTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProceduralProductTable::WriteToXMLNode"

class cGcInventoryClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryClass::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryClass::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryClass::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryClass::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryClass::WriteToXMLNodeExplicit"

class cGcInventoryClassProbabilities:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryClassProbabilities::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryClassProbabilities::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryClassProbabilities::WriteToXMLNode"

class cGcInventoryCostData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryCostData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryCostData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryCostData::WriteToXMLNode"

class cGcInventoryCostDataEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryCostDataEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryCostDataEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryCostDataEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryCostDataEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryCostDataEntry::WriteToXMLNodeExplicit"

class cGcInventoryGenerationBaseStatClassData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryGenerationBaseStatClassData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryGenerationBaseStatClassData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryGenerationBaseStatClassData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryGenerationBaseStatClassData::WriteToXMLNode"

class cGcInventoryGenerationBaseStatData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryGenerationBaseStatData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryGenerationBaseStatData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryGenerationBaseStatData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryGenerationBaseStatData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryGenerationBaseStatData::WriteToXMLNode"

class cGcInventoryGenerationBaseStatDataEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryGenerationBaseStatDataEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryGenerationBaseStatDataEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryGenerationBaseStatDataEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryGenerationBaseStatDataEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryGenerationBaseStatDataEntry::WriteToXMLNodeExplicit"

class cGcInventoryLayoutGenerationBounds:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryLayoutGenerationBounds::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryLayoutGenerationBounds::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationBounds::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationBounds::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryLayoutGenerationBounds::WriteToXMLNodeExplicit"

class cGcInventoryLayoutGenerationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationData::WriteToXMLNode"

class cGcInventoryLayoutGenerationDataEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryLayoutGenerationDataEntry::WriteToXMLNodeExplicit"

class cGcInventoryLayoutSizeType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryLayoutSizeType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryLayoutSizeType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryLayoutSizeType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryLayoutSizeType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryLayoutSizeType::WriteToXMLNodeExplicit"

class cGcInventorySpecialSlotType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventorySpecialSlotType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventorySpecialSlotType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventorySpecialSlotType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventorySpecialSlotType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventorySpecialSlotType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventorySpecialSlotType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventorySpecialSlotType::WriteToXMLNodeExplicit"

class cGcInventoryStackSizeGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryStackSizeGroup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryStackSizeGroup::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryStackSizeGroup::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryStackSizeGroup::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryStackSizeGroup::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryStackSizeGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryStackSizeGroup::WriteToXMLNodeExplicit"

class cGcInventoryTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcInventoryTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcInventoryTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryTable::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcInventoryTable::Save"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryTable::WriteToXMLNodeExplicit"

class cGcInventoryTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryTableEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryTableEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryTableEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryTableEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryTableEntry::WriteToXMLNodeExplicit"

class cGcInventoryType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryType::WriteToXMLNodeExplicit"

class cGcItemAmountCostPair:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemAmountCostPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcItemAmountCostPair::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemAmountCostPair::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemAmountCostPair::WriteToXMLNode"

class cGcItemCostData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemCostData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcItemCostData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemCostData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcItemCostData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemCostData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcItemCostData::WriteToXMLNodeExplicit"

class cGcItemNeedPurpose:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemNeedPurpose::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcItemNeedPurpose::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemNeedPurpose::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemNeedPurpose::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcItemNeedPurpose::WriteToXMLNodeExplicit"

class cGcItemPriceModifiers:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemPriceModifiers::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcItemPriceModifiers::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcItemPriceModifiers::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcItemPriceModifiers::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcItemPriceModifiers::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemPriceModifiers::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcItemPriceModifiers::WriteToXMLNodeExplicit"

class cGcLegacyItem:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLegacyItem::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLegacyItem::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLegacyItem::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLegacyItem::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLegacyItem::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLegacyItem::WriteToXMLNodeExplicit"

class cGcCostWordKnowledge:
    class Cast(HookFactory):
        _name = "cGcCostWordKnowledge::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostWordKnowledge::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostWordKnowledge::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostWordKnowledge::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostWordKnowledge::WriteToXMLNodeExplicit"

class cGcCostTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostTableEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostTableEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCostTableEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCostTableEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCostTableEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCostTableEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCostTableEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostTableEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostTableEntry::WriteToXMLNodeExplicit"

class cGcCreatureRarity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCreatureRarity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCreatureRarity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureRarity::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureRarity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureRarity::WriteToXMLNodeExplicit"

class cGcCurrency:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCurrency::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCurrency::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCurrency::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCurrency::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCurrency::WriteToXMLNodeExplicit"

class cGcDeathQuote:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDeathQuote::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDeathQuote::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcDeathQuote::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDeathQuote::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDeathQuote::WriteToXMLNodeExplicit"

class cGcDeathStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDeathStateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDeathStateData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDeathStateData::WriteToXMLNode"

class cGcDialogClearanceInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDialogClearanceInfo::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDialogClearanceInfo::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDialogClearanceInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDialogClearanceInfo::WriteToXMLNodeExplicit"

class cGcDialogClearanceTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDialogClearanceTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDialogClearanceTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDialogClearanceTable::WriteToXMLNode"

class cGcDiscoveryOwner:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryOwner::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDiscoveryOwner::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcDiscoveryOwner::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDiscoveryOwner::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDiscoveryOwner::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcDiscoveryOwner::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryOwner::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDiscoveryOwner::WriteToXMLNodeExplicit"

class cGcDiscoveryRewardLookup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryRewardLookup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDiscoveryRewardLookup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDiscoveryRewardLookup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryRewardLookup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDiscoveryRewardLookup::WriteToXMLNodeExplicit"

class cGcDiscoveryRewardLookupTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryRewardLookupTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDiscoveryRewardLookupTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryRewardLookupTable::WriteToXMLNode"

class cGcDiscoveryType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDiscoveryType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDiscoveryType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDiscoveryType::WriteToXMLNodeExplicit"

class cGcDiscoveryWorth:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryWorth::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDiscoveryWorth::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDiscoveryWorth::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDiscoveryWorth::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryWorth::WriteToXMLNode"

class cGcExpeditionCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionCategory::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcExpeditionCategory::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionCategory::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcExpeditionCategory::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionCategory::WriteToXMLNodeExplicit"

class cGcExpeditionDuration:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionDuration::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionDuration::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcExpeditionDuration::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionDuration::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcExpeditionDuration::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionDuration::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionDuration::WriteToXMLNodeExplicit"

class cGcExpeditionPowerup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionPowerup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionPowerup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionPowerup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionPowerup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionPowerup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionPowerup::WriteToXMLNodeExplicit"

class cGcExpeditionRewardTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionRewardTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionRewardTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcExpeditionRewardTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionRewardTable::WriteToXMLNode"

class cGcFreighterCargoOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterCargoOption::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterCargoOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterCargoOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFreighterCargoOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterCargoOption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFreighterCargoOption::WriteToXMLNodeExplicit"

class cGcFrigateClass:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateClass::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateClass::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcFrigateClass::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateClass::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcFrigateClass::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateClass::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateClass::WriteToXMLNodeExplicit"

class cGcFrigateStatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateStatType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateStatType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateStatType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateStatType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateStatType::WriteToXMLNodeExplicit"

class cGcFrigateTraitStrength:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFrigateTraitStrength::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFrigateTraitStrength::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrength::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFrigateTraitStrength::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFrigateTraitStrength::WriteToXMLNodeExplicit"

class cGcGenericRewardTableEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGenericRewardTableEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGenericRewardTableEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcGenericRewardTableEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcGenericRewardTableEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcGenericRewardTableEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGenericRewardTableEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGenericRewardTableEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGenericRewardTableEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGenericRewardTableEntry::WriteToXMLNodeExplicit"

class cGcInventoryBaseStat:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryBaseStat::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryBaseStat::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcInventoryBaseStat::FixDown"
    class FixUp(HookFactory):
        _name = "cGcInventoryBaseStat::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryBaseStat::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryBaseStat::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryBaseStat::WriteToXMLNode"

class cGcInventoryBaseStatBonus:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryBaseStatBonus::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryBaseStatBonus::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryBaseStatBonus::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryBaseStatBonus::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryBaseStatBonus::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryBaseStatBonus::WriteToXMLNodeExplicit"

class cGcInventoryBaseStatEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryBaseStatEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryBaseStatEntry::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryBaseStatEntry::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryBaseStatEntry::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryBaseStatEntry::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryBaseStatEntry::WriteToXMLNode"

class cGcCostItemFromList:
    class Cast(HookFactory):
        _name = "cGcCostItemFromList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostItemFromList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostItemFromList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostItemFromList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostItemFromList::WriteToXMLNode"

class cGcCostItemListIndexed:
    class Cast(HookFactory):
        _name = "cGcCostItemListIndexed::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostItemListIndexed::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostItemListIndexed::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostItemListIndexed::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostItemListIndexed::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostItemListIndexed::WriteToXMLNodeExplicit"

class cGcCostJourneyMilestone:
    class Cast(HookFactory):
        _name = "cGcCostJourneyMilestone::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostJourneyMilestone::ClassPointerCreate"

class cGcCostJourneyStatLevel:
    class Cast(HookFactory):
        _name = "cGcCostJourneyStatLevel::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostJourneyStatLevel::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostJourneyStatLevel::WriteToXMLNode"

class cGcCostMissionComplete:
    class Cast(HookFactory):
        _name = "cGcCostMissionComplete::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostMissionComplete::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCostMissionComplete::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostMissionComplete::WriteToXMLNode"

class cGcCostMoney:
    class Cast(HookFactory):
        _name = "cGcCostMoney::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostMoney::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostMoney::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostMoney::WriteToXMLNode"

class cGcCostMoneyList:
    class Cast(HookFactory):
        _name = "cGcCostMoneyList::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostMoneyList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostMoneyList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostMoneyList::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostMoneyList::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostMoneyList::WriteToXMLNodeExplicit"

class cGcCostMultiItem:
    class Cast(HookFactory):
        _name = "cGcCostMultiItem::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostMultiItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostMultiItem::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostMultiItem::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostMultiItem::WriteToXMLNode"

class cGcCostNPCHabitation:
    class Cast(HookFactory):
        _name = "cGcCostNPCHabitation::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostNPCHabitation::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostNPCHabitation::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostNPCHabitation::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostNPCHabitation::WriteToXMLNodeExplicit"

class cGcCostOwnSettlement:
    class Cast(HookFactory):
        _name = "cGcCostOwnSettlement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostOwnSettlement::ClassPointerCreate"

class cGcCostPendingSettlementJudgement:
    class Cast(HookFactory):
        _name = "cGcCostPendingSettlementJudgement::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostPendingSettlementJudgement::ClassPointerCreate"

class cGcCostPirateTribute:
    class Cast(HookFactory):
        _name = "cGcCostPirateTribute::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostPirateTribute::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostPirateTribute::WriteToXMLNode"

class cGcCostPoliceCargoBribe:
    class Cast(HookFactory):
        _name = "cGcCostPoliceCargoBribe::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostPoliceCargoBribe::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCostPoliceCargoBribe::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostPoliceCargoBribe::WriteToXMLNode"

class cGcCostPoliceCargoComply:
    class Cast(HookFactory):
        _name = "cGcCostPoliceCargoComply::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostPoliceCargoComply::ClassPointerCreate"

class cGcCostProcProduct:
    class Cast(HookFactory):
        _name = "cGcCostProcProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostProcProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostProcProduct::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostProcProduct::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostProcProduct::WriteToXMLNodeExplicit"

class cGcCostProduct:
    class Cast(HookFactory):
        _name = "cGcCostProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostProduct::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostProduct::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostProduct::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostProduct::WriteToXMLNode"

class cGcCostProductOnlyTakeIfCanAfford:
    class Cast(HookFactory):
        _name = "cGcCostProductOnlyTakeIfCanAfford::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostProductOnlyTakeIfCanAfford::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostProductOnlyTakeIfCanAfford::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostProductOnlyTakeIfCanAfford::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostProductOnlyTakeIfCanAfford::WriteToXMLNode"

class cGcCostSalvageShip:
    class Cast(HookFactory):
        _name = "cGcCostSalvageShip::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostSalvageShip::ClassPointerCreate"

class cGcCostSentinelBlockStatus:
    class Cast(HookFactory):
        _name = "cGcCostSentinelBlockStatus::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostSentinelBlockStatus::ClassPointerCreate"

class cGcCostSpecificCreatureBait:
    class Cast(HookFactory):
        _name = "cGcCostSpecificCreatureBait::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostSpecificCreatureBait::ClassPointerCreate"

class cGcCostStanding:
    class Cast(HookFactory):
        _name = "cGcCostStanding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostStanding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostStanding::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostStanding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostStanding::WriteToXMLNodeExplicit"

class cGcCostStat:
    class Cast(HookFactory):
        _name = "cGcCostStat::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostStat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCostStat::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCostStat::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostStat::WriteToXMLNodeExplicit"

class cGcCostStatCompare:
    class Cast(HookFactory):
        _name = "cGcCostStatCompare::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostStatCompare::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCostStatCompare::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostStatCompare::WriteToXMLNode"

class cGcCostSubstance:
    class Cast(HookFactory):
        _name = "cGcCostSubstance::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostSubstance::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostSubstance::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostSubstance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostSubstance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostSubstance::WriteToXMLNodeExplicit"

class cGcCostShipUpgradeable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostShipUpgradeable::ClassPointerCreate"

class cGcCostTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCostTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCostTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCostTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCostTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostTable::WriteToXMLNode"

class cGcAlienPuzzleEntry:
    class cGcAlienPuzzleEntry(HookFactory):
        _name = "cGcAlienPuzzleEntry::cGcAlienPuzzleEntry"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAlienPuzzleEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAlienPuzzleEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcAlienPuzzleEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAlienPuzzleEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPuzzleEntry::WriteToXMLNodeExplicit"

class cGcCostAdvanceSettlementBuilding:
    class Cast(HookFactory):
        _name = "cGcCostAdvanceSettlementBuilding::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostAdvanceSettlementBuilding::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostAdvanceSettlementBuilding::WriteToXMLNode"

class cGcCostAnyCookedProduct:
    class Cast(HookFactory):
        _name = "cGcCostAnyCookedProduct::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostAnyCookedProduct::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCostAnyCookedProduct::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCostAnyCookedProduct::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostAnyCookedProduct::WriteToXMLNode"

class cGcCostBuildingParts:
    class Cast(HookFactory):
        _name = "cGcCostBuildingParts::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostBuildingParts::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostBuildingParts::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostBuildingParts::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostBuildingParts::WriteToXMLNode"

class cGcCostCanAdoptCreature:
    class Cast(HookFactory):
        _name = "cGcCostCanAdoptCreature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCanAdoptCreature::ClassPointerCreate"

class cGcCostCanCustomiseCreature:
    class Cast(HookFactory):
        _name = "cGcCostCanCustomiseCreature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCanCustomiseCreature::ClassPointerCreate"

class cGcCostCanFreighterMegaWarp:
    class Cast(HookFactory):
        _name = "cGcCostCanFreighterMegaWarp::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCanFreighterMegaWarp::ClassPointerCreate"

class cGcCostCanMilkCreature:
    class Cast(HookFactory):
        _name = "cGcCostCanMilkCreature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCanMilkCreature::ClassPointerCreate"

class cGcCostCanRideCreature:
    class Cast(HookFactory):
        _name = "cGcCostCanRideCreature::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCanRideCreature::ClassPointerCreate"

class cGcCostCreatureCanLayEggs:
    class Cast(HookFactory):
        _name = "cGcCostCreatureCanLayEggs::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCreatureCanLayEggs::ClassPointerCreate"

class cGcCostFleetStoredIncome:
    class Cast(HookFactory):
        _name = "cGcCostFleetStoredIncome::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostFleetStoredIncome::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostFleetStoredIncome::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostFleetStoredIncome::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostFleetStoredIncome::WriteToXMLNodeExplicit"

class cGcCostFrigateCargo:
    class Cast(HookFactory):
        _name = "cGcCostFrigateCargo::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostFrigateCargo::ClassPointerCreate"

class cGcCostHasFireteamMember:
    class Cast(HookFactory):
        _name = "cGcCostHasFireteamMember::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostHasFireteamMember::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostHasFireteamMember::WriteToXMLNode"

class cGcCostHealth:
    class Cast(HookFactory):
        _name = "cGcCostHealth::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostHealth::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostHealth::WriteToXMLNode"

class cGcCostInstalledTech:
    class Cast(HookFactory):
        _name = "cGcCostInstalledTech::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostInstalledTech::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostInstalledTech::WriteToXMLNode"

class cGcCostInteractionIndex:
    class Cast(HookFactory):
        _name = "cGcCostInteractionIndex::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostInteractionIndex::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostInteractionIndex::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostInteractionIndex::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcCostInteractionIndex::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostInteractionIndex::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostInteractionIndex::WriteToXMLNodeExplicit"

class cGcAlienPuzzleTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAlienPuzzleTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcAlienPuzzleTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcAlienPuzzleTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPuzzleTable::WriteToXMLNodeExplicit"

class cGcAlienPuzzleTableIndex:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleTableIndex::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleTableIndex::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleTableIndex::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleTableIndex::WriteToXMLNode"

class cGcAlienRace:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienRace::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienRace::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcAlienRace::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienRace::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcAlienRace::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienRace::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienRace::WriteToXMLNodeExplicit"

class cGcAlienSpeechEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienSpeechEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAlienSpeechEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAlienSpeechEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienSpeechEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienSpeechEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienSpeechEntry::WriteToXMLNodeExplicit"

class cGcAlienSpeechTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienSpeechTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAlienSpeechTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcAlienSpeechTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienSpeechTable::WriteToXMLNode"

class cGcBreakTechByStatData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBreakTechByStatData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBreakTechByStatData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBreakTechByStatData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBreakTechByStatData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBreakTechByStatData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBreakTechByStatData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBreakTechByStatData::WriteToXMLNodeExplicit"

class cGcBuildingBlueprint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingBlueprint::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingBlueprint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingBlueprint::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingBlueprint::WriteToXMLNode"

class cGcBuildingCostPartCount:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingCostPartCount::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBuildingCostPartCount::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingCostPartCount::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingCostPartCount::WriteToXMLNodeExplicit"

class cGcCatalogueGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCatalogueGroups::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCatalogueGroups::WriteToXMLNode"

class cGcConsumableItem:
    class ClassPointerCreate(HookFactory):
        _name = "cGcConsumableItem::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcConsumableItem::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcConsumableItem::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcConsumableItem::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcConsumableItem::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcConsumableItem::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcConsumableItem::WriteToXMLNodeExplicit"

class cGcConsumableItemTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcConsumableItemTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcConsumableItemTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcConsumableItemTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcConsumableItemTable::WriteToXMLNode"

class cGcCostCargo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostCargo::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostCargo::WriteToXMLNode"

class cGcCostGameMode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCostGameMode::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCostGameMode::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCostGameMode::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCostGameMode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCostGameMode::WriteToXMLNodeExplicit"

class cGcAlienMood:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienMood::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienMood::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienMood::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienMood::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienMood::WriteToXMLNodeExplicit"

class cGcAlienPuzzleCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleCategory::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPuzzleCategory::WriteToXMLNodeExplicit"

class cGcAlienPuzzleMissionOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPuzzleMissionOverride::WriteToXMLNodeExplicit"

class cGcExperienceDebugTriggerAction:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExperienceDebugTriggerAction::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExperienceDebugTriggerAction::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerAction::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExperienceDebugTriggerAction::WriteToXMLNodeExplicit"

class cGcExperienceDebugTriggerActionTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExperienceDebugTriggerActionTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcExperienceDebugTriggerActionTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerActionTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExperienceDebugTriggerActionTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExperienceDebugTriggerActionTypes::WriteToXMLNodeExplicit"

class cGcExperienceSpawnTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExperienceSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExperienceSpawnTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcExperienceSpawnTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcExperienceSpawnTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcExperienceSpawnTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExperienceSpawnTable::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcExperienceSpawnTable::Save"
    class SetDefaults(HookFactory):
        _name = "cGcExperienceSpawnTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExperienceSpawnTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExperienceSpawnTable::WriteToXMLNodeExplicit"

class cGcPerformanceFlyby:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPerformanceFlyby::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPerformanceFlyby::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPerformanceFlyby::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPerformanceFlyby::WriteToXMLNodeExplicit"

class cGcPerformanceGuard:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPerformanceGuard::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPerformanceGuard::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcPerformanceGuard::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPerformanceGuard::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPerformanceGuard::WriteToXMLNodeExplicit"

class cGcPlayfabMatchmakingAttributes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::ReadFromDocument"
    class SetDefaults(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayfabMatchmakingAttributes::WriteToXMLNodeExplicit"

class cGcJourney:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourney::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcJourney::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcJourney::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourney::WriteToXMLNode"

class cGcJourneyCategory:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyCategory::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcJourneyCategory::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcJourneyCategory::FixDown"
    class FixUp(HookFactory):
        _name = "cGcJourneyCategory::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcJourneyCategory::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcJourneyCategory::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyCategory::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJourneyCategory::WriteToXMLNodeExplicit"

class cGcJourneyCategoryType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyCategoryType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcJourneyCategoryType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcJourneyCategoryType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyCategoryType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJourneyCategoryType::WriteToXMLNodeExplicit"

class cGcJourneyMedal:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyMedal::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcJourneyMedal::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcJourneyMedal::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcJourneyMedal::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcJourneyMedal::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyMedal::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJourneyMedal::WriteToXMLNodeExplicit"

class cGcJourneyMedalTiers:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyMedalTiers::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcJourneyMedalTiers::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcJourneyMedalTiers::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyMedalTiers::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJourneyMedalTiers::WriteToXMLNodeExplicit"

class cGcJourneyMedalType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyMedalType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyMedalType::WriteToXMLNode"

class cGcMessageCrime:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageCrime::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMessageCrime::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMessageCrime::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageCrime::WriteToXMLNode"

class cGcMessageFiendCrime:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageFiendCrime::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMessageFiendCrime::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMessageFiendCrime::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMessageFiendCrime::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageFiendCrime::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMessageFiendCrime::WriteToXMLNodeExplicit"

class cGcMessageNPCBehaviourEvent:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMessageNPCBehaviourEvent::WriteToXMLNodeExplicit"

class cGcMessagePetBehaviourEvent:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMessagePetBehaviourEvent::WriteToXMLNodeExplicit"

class cGcMessageProjectileImpact:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageProjectileImpact::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcMessageProjectileImpact::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcMessageProjectileImpact::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMessageProjectileImpact::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcMessageProjectileImpact::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageProjectileImpact::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMessageProjectileImpact::WriteToXMLNodeExplicit"

class cGcMessageProjectileLaunch:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageProjectileLaunch::ClassPointerCreate"

class cGcMessageRequestTakeOff:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageRequestTakeOff::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageRequestTakeOff::WriteToXMLNode"

class cGcMessageRequestWarp:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageRequestWarp::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageRequestWarp::WriteToXMLNode"

class cGcMessageSubstanceMined:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageSubstanceMined::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageSubstanceMined::WriteToXMLNode"

class cGcMessageSummonAndDismiss:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageSummonAndDismiss::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageSummonAndDismiss::WriteToXMLNode"

class cGcMessageTitanFall:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageTitanFall::ClassPointerCreate"

class cGcMessageTrackTargetAlert:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageTrackTargetAlert::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMessageTrackTargetAlert::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcMessageTrackTargetAlert::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageTrackTargetAlert::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMessageTrackTargetAlert::WriteToXMLNodeExplicit"

class cGcMessageUpdateFrigateSpeed:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMessageUpdateFrigateSpeed::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMessageUpdateFrigateSpeed::WriteToXMLNode"

class cGcStyleProp_Colour:
    class Cast(HookFactory):
        _name = "cGcStyleProp_Colour::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStyleProp_Colour::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStyleProp_Colour::GenerateHash"

class cGcStyleProp_Font:
    class Cast(HookFactory):
        _name = "cGcStyleProp_Font::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStyleProp_Font::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStyleProp_Font::WriteToXMLNode"

class cGcStyleProp_Size:
    class Cast(HookFactory):
        _name = "cGcStyleProp_Size::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcStyleProp_Size::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStyleProp_Size::WriteToXMLNode"

class cGcActionSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcActionSet::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcActionSet::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcActionSet::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcActionSet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionSet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActionSet::WriteToXMLNodeExplicit"

class cGcActionSetAction:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionSetAction::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcActionSetAction::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcActionSetAction::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionSetAction::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActionSetAction::WriteToXMLNodeExplicit"

class cGcActionSetType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionSetType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcActionSetType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcActionSetType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionSetType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActionSetType::WriteToXMLNodeExplicit"

class cGcActionSets:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionSets::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcActionSets::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcActionSets::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionSets::WriteToXMLNode"

class cGcActionUseType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcActionUseType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcActionUseType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcActionUseType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcActionUseType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcActionUseType::WriteToXMLNodeExplicit"

class cGcIKConstraint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcIKConstraint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcIKConstraint::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcIKConstraint::FixDown"
    class FixUp(HookFactory):
        _name = "cGcIKConstraint::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcIKConstraint::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcIKConstraint::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcIKConstraint::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcIKConstraint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcIKConstraint::WriteToXMLNodeExplicit"

class cGcInputActionInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputActionInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInputActionInfo::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInputActionInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInputActionInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInputActionInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputActionInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInputActionInfo::WriteToXMLNodeExplicit"

class cGcInputActionInfoMap:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputActionInfoMap::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInputActionInfoMap::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcInputActionInfoMap::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcInputActionInfoMap::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputActionInfoMap::WriteToXMLNode"

class cGcInputBinding:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputBinding::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInputBinding::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInputBinding::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInputBinding::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputBinding::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInputBinding::WriteToXMLNodeExplicit"

class cGcInputBindingSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputBindingSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInputBindingSet::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcInputBindingSet::FixDown"
    class FixUp(HookFactory):
        _name = "cGcInputBindingSet::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInputBindingSet::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputBindingSet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInputBindingSet::WriteToXMLNodeExplicit"

class cGcInputBindings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInputBindings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInputBindings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcInputBindings::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInputBindings::WriteToXMLNode"

class cGcNGuiSpecialTextStyles:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiSpecialTextStyles::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiSpecialTextStyles::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcNGuiSpecialTextStyles::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiSpecialTextStyles::WriteToXMLNode"

class cGcNGuiStyleAnimationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiStyleAnimationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiStyleAnimationData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNGuiStyleAnimationData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNGuiStyleAnimationData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiStyleAnimationData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiStyleAnimationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiStyleAnimationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiStyleAnimationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiStyleAnimationData::WriteToXMLNodeExplicit"

class cGcNGuiStyleAnimationKeyframeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiStyleAnimationKeyframeData::WriteToXMLNodeExplicit"

class cGcVROverride_Layout:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVROverride_Layout::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcVROverride_Layout::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVROverride_Layout::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVROverride_Layout::WriteToXMLNode"

class cGcVROverride_Text:
    class ClassPointerCreate(HookFactory):
        _name = "cGcVROverride_Text::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcVROverride_Text::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVROverride_Text::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVROverride_Text::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVROverride_Text::WriteToXMLNodeExplicit"

class cGcNGuiSpacingData:
    class Cast(HookFactory):
        _name = "cGcNGuiSpacingData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiSpacingData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiSpacingData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiSpacingData::SetDefaults"
    class WriteToClassPtr(HookFactory):
        _name = "cGcNGuiSpacingData::WriteToClassPtr"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiSpacingData::WriteToXMLNode"

class cGcAccessibleOverride_Layout:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAccessibleOverride_Layout::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAccessibleOverride_Layout::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAccessibleOverride_Layout::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAccessibleOverride_Layout::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAccessibleOverride_Layout::WriteToXMLNodeExplicit"

class cGcNGuiActionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiActionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiActionData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiActionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiActionData::WriteToXMLNode"

class cGcNGuiElementData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiElementData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiElementData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNGuiElementData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNGuiElementData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiElementData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiElementData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiElementData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiElementData::WriteToXMLNodeExplicit"

class cGcNGuiFileBrowserRecents:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiFileBrowserRecents::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiFileBrowserRecents::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiFileBrowserRecents::WriteToXMLNode"

class cGcNGuiPreset:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiPreset::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiPreset::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiPreset::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiPreset::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiPreset::WriteToXMLNode"

class cGcNGuiPresetGraphic:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiPresetGraphic::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiPresetGraphic::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiPresetGraphic::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiPresetGraphic::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiPresetGraphic::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiPresetGraphic::WriteToXMLNodeExplicit"

class cGcNGuiPresetText:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiPresetText::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiPresetText::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiPresetText::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiPresetText::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiPresetText::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiPresetText::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiPresetText::WriteToXMLNodeExplicit"

class cGcNGuiSpecialTextImageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiSpecialTextImageData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiSpecialTextImageData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiSpecialTextImageData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiSpecialTextImageData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiSpecialTextImageData::WriteToXMLNodeExplicit"

class cGcNGuiSpecialTextImages:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiSpecialTextImages::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiSpecialTextImages::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiSpecialTextImages::WriteToXMLNode"

class cGcNGuiSpecialTextStyleData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNGuiSpecialTextStyleData::WriteToXMLNodeExplicit"

class cGcShipHUDTargetData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipHUDTargetData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipHUDTargetData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipHUDTargetData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipHUDTargetData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipHUDTargetData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipHUDTargetData::WriteToXMLNodeExplicit"

class cGcShipHUDTargetIconData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcShipHUDTargetIconData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcShipHUDTargetIconData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcShipHUDTargetIconData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcShipHUDTargetIconData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcShipHUDTargetIconData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcShipHUDTargetIconData::WriteToXMLNodeExplicit"

class cGcTextStyleOutline:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTextStyleOutline::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTextStyleOutline::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTextStyleOutline::WriteToXMLNode"

class cGcTextStylePlain:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTextStylePlain::ClassPointerCreate"

class cGcTextStyleShadow:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTextStyleShadow::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTextStyleShadow::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTextStyleShadow::WriteToXMLNode"

class cGcScannerIconTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerIconTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScannerIconTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannerIconTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerIconTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannerIconTypes::WriteToXMLNodeExplicit"

class cGcScannerIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerIcons::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScannerIcons::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcScannerIcons::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcScannerIcons::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannerIcons::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScannerIcons::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerIcons::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannerIcons::WriteToXMLNodeExplicit"

class cGcSpaceMapObjectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpaceMapObjectData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSpaceMapObjectData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceMapObjectData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceMapObjectData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceMapObjectData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceMapObjectData::WriteToXMLNodeExplicit"

class cGcTextPreset:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTextPreset::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTextPreset::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcTextPreset::FixDown"
    class FixUp(HookFactory):
        _name = "cGcTextPreset::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcTextPreset::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTextPreset::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTextPreset::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTextPreset::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTextPreset::WriteToXMLNodeExplicit"

class cGcTextPresetTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTextPresetTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTextPresetTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTextPresetTable::WriteToXMLNode"

class cGcByteBeatIcons:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatIcons::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcByteBeatIcons::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcByteBeatIcons::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatIcons::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcByteBeatIcons::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatIcons::WriteToXMLNode"

class cGcDiscoveryHelperTimings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDiscoveryHelperTimings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDiscoveryHelperTimings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDiscoveryHelperTimings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDiscoveryHelperTimings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDiscoveryHelperTimings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDiscoveryHelperTimings::WriteToXMLNodeExplicit"

class cGcFontTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFontTable::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcFontTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFontTable::WriteToXMLNode"

class cGcFontTypesEnum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFontTypesEnum::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFontTypesEnum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFontTypesEnum::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFontTypesEnum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFontTypesEnum::WriteToXMLNodeExplicit"

class cGcGenericIconTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGenericIconTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGenericIconTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGenericIconTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGenericIconTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGenericIconTypes::WriteToXMLNodeExplicit"

class cGcHUDComponent:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDComponent::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHUDComponent::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHUDComponent::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDComponent::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDComponent::WriteToXMLNodeExplicit"

class cGcHUDEffectRewardData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDEffectRewardData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDEffectRewardData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcHUDEffectRewardData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHUDEffectRewardData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHUDEffectRewardData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDEffectRewardData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDEffectRewardData::WriteToXMLNodeExplicit"

class cGcHUDImageData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDImageData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHUDImageData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcHUDImageData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDImageData::WriteToXMLNode"

class cGcHUDLayerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDLayerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDLayerData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDLayerData::WriteToXMLNode"

class cGcHUDMarkerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDMarkerData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcHUDMarkerData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcHUDMarkerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDMarkerData::WriteToXMLNode"

class cGcHUDStartup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDStartup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDStartup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcHUDStartup::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcHUDStartup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDStartup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDStartup::WriteToXMLNodeExplicit"

class cGcHUDStartupTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDStartupTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDStartupTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcHUDStartupTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcHUDStartupTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHUDStartupTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcHUDStartupTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDStartupTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDStartupTable::WriteToXMLNodeExplicit"

class cGcHUDTextData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDTextData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDTextData::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcHUDTextData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDTextData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDTextData::WriteToXMLNodeExplicit"

class cGcInventoryFilterOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryFilterOptions::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryFilterOptions::WriteToXMLNode"

class cGcInventorySlotActionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventorySlotActionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventorySlotActionData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcInventorySlotActionData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInventorySlotActionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventorySlotActionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventorySlotActionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventorySlotActionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventorySlotActionData::WriteToXMLNodeExplicit"

class cGcModelViewCollection:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModelViewCollection::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModelViewCollection::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcModelViewCollection::FixUp"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcModelViewCollection::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcModelViewCollection::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModelViewCollection::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcModelViewCollection::WriteToXMLNodeExplicit"

class cGcPunctuationDelayData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPunctuationDelayData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPunctuationDelayData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPunctuationDelayData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPunctuationDelayData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPunctuationDelayData::WriteToXMLNodeExplicit"

class cGcPunctuationDelayTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPunctuationDelayTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPunctuationDelayTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPunctuationDelayTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPunctuationDelayTable::WriteToXMLNode"

class cGcScannerBuildingIconTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerBuildingIconTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerBuildingIconTypes::WriteToXMLNode"

class cGcScannerIcon:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerIcon::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcScannerIcon::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcScannerIcon::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcScannerIcon::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannerIcon::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScannerIcon::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerIcon::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannerIcon::WriteToXMLNodeExplicit"

class cGcScannerIconHighlightTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScannerIconHighlightTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScannerIconHighlightTypes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcScannerIconHighlightTypes::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScannerIconHighlightTypes::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcScannerIconHighlightTypes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScannerIconHighlightTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScannerIconHighlightTypes::WriteToXMLNodeExplicit"

class cGcBootLogoData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBootLogoData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBootLogoData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcBootLogoData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBootLogoData::WriteToXMLNode"

class cGcCameraAmbientBuildingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAmbientBuildingData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraAmbientBuildingData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAmbientBuildingData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraAmbientBuildingData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAmbientBuildingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraAmbientBuildingData::WriteToXMLNodeExplicit"

class cGcCameraAmbientSpecialData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAmbientSpecialData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraAmbientSpecialData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAmbientSpecialData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraAmbientSpecialData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAmbientSpecialData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraAmbientSpecialData::WriteToXMLNodeExplicit"

class cGcCameraAnimationData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAnimationData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCameraAnimationData::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAnimationData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraAnimationData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAnimationData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraAnimationData::WriteToXMLNodeExplicit"

class cGcCameraAnomalySetupData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAnomalySetupData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraAnomalySetupData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAnomalySetupData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraAnomalySetupData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAnomalySetupData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraAnomalySetupData::WriteToXMLNodeExplicit"

class cGcCameraShakeCapturedData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeCapturedData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeCapturedData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraShakeCapturedData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeCapturedData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraShakeCapturedData::WriteToXMLNodeExplicit"

class cGcCameraShakeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraShakeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraShakeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraShakeData::WriteToXMLNodeExplicit"

class cGcCameraShakeMechanicalData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraShakeMechanicalData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraShakeMechanicalData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraShakeMechanicalData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraShakeMechanicalData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraShakeMechanicalData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraShakeMechanicalData::WriteToXMLNodeExplicit"

class cGcCameraSpawnSetupData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraSpawnSetupData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraSpawnSetupData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraSpawnSetupData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraSpawnSetupData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraSpawnSetupData::WriteToXMLNode"

class cGcHUDManagerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcHUDManagerData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcHUDManagerData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcHUDManagerData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcHUDManagerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcHUDManagerData::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcHUDManagerData::Save"
    class SetDefaults(HookFactory):
        _name = "cGcHUDManagerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHUDManagerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcHUDManagerData::WriteToXMLNodeExplicit"

class cGcPresetTextureData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPresetTextureData::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPresetTextureData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPresetTextureData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPresetTextureData::WriteToXMLNode"

class cGcScreenFilterData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScreenFilterData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScreenFilterData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScreenFilterData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcScreenFilterData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScreenFilterData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScreenFilterData::WriteToXMLNodeExplicit"

class cGcScreenFilterTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScreenFilterTable::ClassPointerCreate"
    class SetDefaults(HookFactory):
        _name = "cGcScreenFilterTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScreenFilterTable::WriteToXMLNode"

class cGcScreenFilters:
    class ClassPointerCreate(HookFactory):
        _name = "cGcScreenFilters::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcScreenFilters::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcScreenFilters::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcScreenFilters::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcScreenFilters::WriteToXMLNodeExplicit"

class cGcTexturePrefetchData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTexturePrefetchData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTexturePrefetchData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTexturePrefetchData::WriteToXMLNode"

class cGcWorldUISettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWorldUISettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWorldUISettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWorldUISettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWorldUISettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWorldUISettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWorldUISettings::WriteToXMLNodeExplicit"

class RegistercGcWaterGlobals:
    class Load(HookFactory):
        _name = "RegistercGcWaterGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcWaterGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcWaterGlobals::LoadModFromFolder"

class cGcCameraAerialViewData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraAerialViewData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCameraAerialViewData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCameraAerialViewData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCameraAerialViewData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraAerialViewData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraAerialViewData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraAerialViewData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraAerialViewData::WriteToXMLNodeExplicit"

class cGcCameraFollowSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraFollowSettings::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCameraFollowSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraFollowSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraFollowSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraFollowSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraFollowSettings::WriteToXMLNodeExplicit"

class cGcCameraWarpSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCameraWarpSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCameraWarpSettings::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCameraWarpSettings::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCameraWarpSettings::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraWarpSettings::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCameraWarpSettings::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraWarpSettings::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraWarpSettings::WriteToXMLNodeExplicit"

class cGcColourModifier:
    class ClassPointerCreate(HookFactory):
        _name = "cGcColourModifier::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcColourModifier::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcColourModifier::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcColourModifier::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcColourModifier::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcColourModifier::WriteToXMLNodeExplicit"

class cGcColourPaletteData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcColourPaletteData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcColourPaletteData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcColourPaletteData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcColourPaletteData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcColourPaletteData::WriteToXMLNode"

class cGcPaletteData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPaletteData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPaletteData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPaletteData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPaletteData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPaletteData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPaletteData::WriteToXMLNodeExplicit"

class cGcPaletteList:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPaletteList::ClassPointerCreate"
    class Save(HookFactory):
        _name = "cGcPaletteList::Save"
    class SetDefaults(HookFactory):
        _name = "cGcPaletteList::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPaletteList::WriteToXMLNode"

class cGcTerrainOverlayColours:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainOverlayColours::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainOverlayColours::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainOverlayColours::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainOverlayColours::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainOverlayColours::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainOverlayColours::WriteToXMLNodeExplicit"

class cGcWaterGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcWaterGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWaterGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcWaterGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcWaterGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcWaterGlobals::WriteToXMLNodeExplicit"

class RegistercGcVehicleGlobals:
    class Load(HookFactory):
        _name = "RegistercGcVehicleGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcVehicleGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcVehicleGlobals::LoadModFromFolder"

class cGcVehicleGlobals:
    class FixUp(HookFactory):
        _name = "cGcVehicleGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcVehicleGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcVehicleGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcVehicleGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcVehicleGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcVehicleGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcVehicleGlobals::WriteToXMLNodeExplicit"

class RegistercGcTerrainGlobals:
    class Load(HookFactory):
        _name = "RegistercGcTerrainGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcTerrainGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcTerrainGlobals::LoadModFromFolder"

class RegistercGcUIGlobals:
    class Load(HookFactory):
        _name = "RegistercGcUIGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcUIGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcUIGlobals::LoadModFromFolder"

class cGcUIGlobals:
    class FixUp(HookFactory):
        _name = "cGcUIGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcUIGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUIGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcUIGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcUIGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUIGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUIGlobals::WriteToXMLNodeExplicit"

class cGcTerrainGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcTerrainGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcTerrainGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainGlobals::WriteToXMLNodeExplicit"

class RegistercGcSpaceshipGlobals:
    class Load(HookFactory):
        _name = "RegistercGcSpaceshipGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcSpaceshipGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSpaceshipGlobals::LoadModFromFolder"

class cGcSpaceshipGlobals:
    class FixUp(HookFactory):
        _name = "cGcSpaceshipGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSpaceshipGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSpaceshipGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSpaceshipGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSpaceshipGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpaceshipGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSpaceshipGlobals::WriteToXMLNodeExplicit"

class RegistercGcSolarGenerationGlobals:
    class Load(HookFactory):
        _name = "RegistercGcSolarGenerationGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcSolarGenerationGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSolarGenerationGlobals::LoadModFromFolder"

class RegistercGcSkyGlobals:
    class Load(HookFactory):
        _name = "RegistercGcSkyGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcSkyGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSkyGlobals::LoadModFromFolder"

class RegistercGcSmokeTestOptions:
    class Load(HookFactory):
        _name = "RegistercGcSmokeTestOptions::Load"
    class Register(HookFactory):
        _name = "RegistercGcSmokeTestOptions::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSmokeTestOptions::LoadModFromFolder"

class cGcSkyGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSkyGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSkyGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSkyGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSkyGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSkyGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSkyGlobals::WriteToXMLNodeExplicit"

class cGcSmokeTestOptions:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSmokeTestOptions::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSmokeTestOptions::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSmokeTestOptions::ReadModFromFile"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSmokeTestOptions::WriteToXMLNodeExplicit"

class cGcSolarGenerationGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSolarGenerationGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSolarGenerationGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSolarGenerationGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSolarGenerationGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSolarGenerationGlobals::WriteToXMLNodeExplicit"

class RegistercGcSceneOptions:
    class Load(HookFactory):
        _name = "RegistercGcSceneOptions::Load"
    class Register(HookFactory):
        _name = "RegistercGcSceneOptions::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSceneOptions::LoadModFromFolder"

class RegistercGcScratchpadGlobals:
    class Load(HookFactory):
        _name = "RegistercGcScratchpadGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcScratchpadGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcScratchpadGlobals::LoadModFromFolder"

class RegistercGcSettlementGlobals:
    class Load(HookFactory):
        _name = "RegistercGcSettlementGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcSettlementGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSettlementGlobals::LoadModFromFolder"

class RegistercGcSimulationGlobals:
    class Load(HookFactory):
        _name = "RegistercGcSimulationGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcSimulationGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcSimulationGlobals::LoadModFromFolder"

class cGcSettlementGlobals:
    class FixUp(HookFactory):
        _name = "cGcSettlementGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSettlementGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSettlementGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSettlementGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementGlobals::WriteToXMLNodeExplicit"

class cGcSceneOptions:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSceneOptions::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSceneOptions::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSceneOptions::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSceneOptions::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSceneOptions::WriteToXMLNodeExplicit"

class cGcScratchpadGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcScratchpadGlobals::NGuiRenderCallback"
    class ReadModFromFile(HookFactory):
        _name = "cGcScratchpadGlobals::ReadModFromFile"

class cGcSimulationGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcSimulationGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSimulationGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcSimulationGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcSimulationGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSimulationGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSimulationGlobals::WriteToXMLNodeExplicit"

class RegistercGcRichPresenceGlobals:
    class Load(HookFactory):
        _name = "RegistercGcRichPresenceGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcRichPresenceGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcRichPresenceGlobals::LoadModFromFolder"

class RegistercGcRobotGlobals:
    class Load(HookFactory):
        _name = "RegistercGcRobotGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcRobotGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcRobotGlobals::LoadModFromFolder"

class cGcRichPresenceGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcRichPresenceGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRichPresenceGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcRichPresenceGlobals::ReadModFromFile"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRichPresenceGlobals::WriteToXMLNodeExplicit"

class cGcRobotGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcRobotGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRobotGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcRobotGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcRobotGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRobotGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRobotGlobals::WriteToXMLNodeExplicit"

class RegistercGcMultiplayerGlobals:
    class Load(HookFactory):
        _name = "RegistercGcMultiplayerGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcMultiplayerGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcMultiplayerGlobals::LoadModFromFolder"

class RegistercGcPlacementGlobals:
    class Load(HookFactory):
        _name = "RegistercGcPlacementGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcPlacementGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcPlacementGlobals::LoadModFromFolder"

class RegistercGcPlayerGlobals:
    class Load(HookFactory):
        _name = "RegistercGcPlayerGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcPlayerGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcPlayerGlobals::LoadModFromFolder"

class cGcPlayerGlobals:
    class FixUp(HookFactory):
        _name = "cGcPlayerGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcPlayerGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcPlayerGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerGlobals::WriteToXMLNodeExplicit"

class cGcMultiplayerGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcMultiplayerGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMultiplayerGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcMultiplayerGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcMultiplayerGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcMultiplayerGlobals::WriteToXMLNodeExplicit"

class cGcPlacementGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcPlacementGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlacementGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcPlacementGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcPlacementGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlacementGlobals::WriteToXMLNodeExplicit"

class RegistercGcGraphicsGlobals:
    class Load(HookFactory):
        _name = "RegistercGcGraphicsGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcGraphicsGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcGraphicsGlobals::LoadModFromFolder"

class cGcGraphicsGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcGraphicsGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGraphicsGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcGraphicsGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcGraphicsGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGraphicsGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGraphicsGlobals::WriteToXMLNodeExplicit"

class RegistercGcGameplayGlobals:
    class Load(HookFactory):
        _name = "RegistercGcGameplayGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcGameplayGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcGameplayGlobals::LoadModFromFolder"

class cGcGameplayGlobals:
    class FixUp(HookFactory):
        _name = "cGcGameplayGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcGameplayGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGameplayGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcGameplayGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcGameplayGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGameplayGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGameplayGlobals::WriteToXMLNodeExplicit"

class RegistercGcFreighterBaseGlobals:
    class Load(HookFactory):
        _name = "RegistercGcFreighterBaseGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcFreighterBaseGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcFreighterBaseGlobals::LoadModFromFolder"

class RegistercGcGalaxyGlobals:
    class Load(HookFactory):
        _name = "RegistercGcGalaxyGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcGalaxyGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcGalaxyGlobals::LoadModFromFolder"

class cGcFreighterBaseGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcFreighterBaseGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterBaseGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcFreighterBaseGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcFreighterBaseGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFreighterBaseGlobals::WriteToXMLNodeExplicit"

class cGcGalaxyGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcGalaxyGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalaxyGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcGalaxyGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcGalaxyGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalaxyGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalaxyGlobals::WriteToXMLNodeExplicit"

class RegistercGcEffectsGlobals:
    class Load(HookFactory):
        _name = "RegistercGcEffectsGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcEffectsGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcEffectsGlobals::LoadModFromFolder"

class RegistercGcEnvironmentGlobals:
    class Load(HookFactory):
        _name = "RegistercGcEnvironmentGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcEnvironmentGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcEnvironmentGlobals::LoadModFromFolder"

class RegistercGcFleetGlobals:
    class Load(HookFactory):
        _name = "RegistercGcFleetGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcFleetGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcFleetGlobals::LoadModFromFolder"

class cGcFleetGlobals:
    class FixUp(HookFactory):
        _name = "cGcFleetGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcFleetGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFleetGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcFleetGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcFleetGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFleetGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFleetGlobals::WriteToXMLNodeExplicit"

class cGcEffectsGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcEffectsGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEffectsGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcEffectsGlobals::ReadModFromFile"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEffectsGlobals::WriteToXMLNodeExplicit"

class cGcEnvironmentGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcEnvironmentGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEnvironmentGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcEnvironmentGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcEnvironmentGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEnvironmentGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEnvironmentGlobals::WriteToXMLNodeExplicit"

class RegistercGcDebugOptions:
    class Load(HookFactory):
        _name = "RegistercGcDebugOptions::Load"
    class Register(HookFactory):
        _name = "RegistercGcDebugOptions::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcDebugOptions::LoadModFromFolder"

class cGcDebugOptions:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcDebugOptions::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDebugOptions::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcDebugOptions::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcDebugOptions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDebugOptions::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDebugOptions::WriteToXMLNodeExplicit"

class RegistercGcCreatureGlobals:
    class Load(HookFactory):
        _name = "RegistercGcCreatureGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcCreatureGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcCreatureGlobals::LoadModFromFolder"

class RegistercGcCharacterGlobals:
    class Load(HookFactory):
        _name = "RegistercGcCharacterGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcCharacterGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcCharacterGlobals::LoadModFromFolder"

class cGcCreatureGlobals:
    class FixUp(HookFactory):
        _name = "cGcCreatureGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcCreatureGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCreatureGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcCreatureGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcCreatureGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCreatureGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCreatureGlobals::WriteToXMLNodeExplicit"

class cGcCharacterGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcCharacterGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcCharacterGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcCharacterGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterGlobals::WriteToXMLNodeExplicit"

class RegistercGcCameraGlobals:
    class Load(HookFactory):
        _name = "RegistercGcCameraGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcCameraGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcCameraGlobals::LoadModFromFolder"

class cGcCameraGlobals:
    class FixUp(HookFactory):
        _name = "cGcCameraGlobals::FixUp"
    class NGuiRenderCallback(HookFactory):
        _name = "cGcCameraGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCameraGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcCameraGlobals::ReadModFromFile"
    class Save(HookFactory):
        _name = "cGcCameraGlobals::Save"
    class SetDefaults(HookFactory):
        _name = "cGcCameraGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCameraGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCameraGlobals::WriteToXMLNodeExplicit"

class RegistercGcBuildingGlobals:
    class Load(HookFactory):
        _name = "RegistercGcBuildingGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcBuildingGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcBuildingGlobals::LoadModFromFolder"

class RegistercGcAtlasGlobals:
    class Load(HookFactory):
        _name = "RegistercGcAtlasGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcAtlasGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcAtlasGlobals::LoadModFromFolder"

class RegistercGcAudioGlobals:
    class Load(HookFactory):
        _name = "RegistercGcAudioGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcAudioGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcAudioGlobals::LoadModFromFolder"

class cGcAtlasGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcAtlasGlobals::NGuiRenderCallback"
    class ReadModFromFile(HookFactory):
        _name = "cGcAtlasGlobals::ReadModFromFile"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasGlobals::WriteToXMLNodeExplicit"

class cGcAudioGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcAudioGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAudioGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcAudioGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcAudioGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudioGlobals::WriteToXMLNodeExplicit"

class cGcBuildingGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcBuildingGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildingGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcBuildingGlobals::ReadModFromFile"
    class SetDefaults(HookFactory):
        _name = "cGcBuildingGlobals::SetDefaults"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBuildingGlobals::WriteToXMLNodeExplicit"

class RegistercGcAISpaceshipGlobals:
    class Load(HookFactory):
        _name = "RegistercGcAISpaceshipGlobals::Load"
    class Register(HookFactory):
        _name = "RegistercGcAISpaceshipGlobals::Register"
    class LoadModFromFolder(HookFactory):
        _name = "RegistercGcAISpaceshipGlobals::LoadModFromFolder"

class cGcItemCostTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcItemCostTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcItemCostTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcItemCostTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcItemCostTable::WriteToXMLNode"

class cGcTelemetryStat:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTelemetryStat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTelemetryStat::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTelemetryStat::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTelemetryStat::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcTelemetryStat::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTelemetryStat::WriteToXMLNode"

class cGcAISpaceshipGlobals:
    class NGuiRenderCallback(HookFactory):
        _name = "cGcAISpaceshipGlobals::NGuiRenderCallback"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAISpaceshipGlobals::ReadFromXMLNode"
    class ReadModFromFile(HookFactory):
        _name = "cGcAISpaceshipGlobals::ReadModFromFile"
    class Save(HookFactory):
        _name = "cGcAISpaceshipGlobals::Save"
    class SetDefaults(HookFactory):
        _name = "cGcAISpaceshipGlobals::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAISpaceshipGlobals::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAISpaceshipGlobals::WriteToXMLNodeExplicit"

class cGcJourneyMilestoneData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyMilestoneData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcJourneyMilestoneData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyMilestoneData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcJourneyMilestoneData::WriteToXMLNodeExplicit"

class cGcJourneyMilestoneTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcJourneyMilestoneTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcJourneyMilestoneTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcJourneyMilestoneTable::WriteToXMLNode"

class cGcLeveledStatData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLeveledStatData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcLeveledStatData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcLeveledStatData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLeveledStatData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcLeveledStatData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLeveledStatData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLeveledStatData::WriteToXMLNodeExplicit"

class cGcLeveledStatTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLeveledStatTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcLeveledStatTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcLeveledStatTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLeveledStatTable::WriteToXMLNode"

class cGcPlayerStat:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerStat::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerStat::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerStat::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerStat::WriteToXMLNodeExplicit"

class cGcPlayerTitle:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerTitle::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerTitle::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerTitle::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerTitle::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerTitle::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerTitle::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerTitle::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerTitle::WriteToXMLNodeExplicit"

class cGcStatDefinition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatDefinition::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatDefinition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatDefinition::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatDefinition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatDefinition::WriteToXMLNodeExplicit"

class cGcStatDefinitionTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatDefinitionTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatDefinitionTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatDefinitionTable::WriteToXMLNode"

class cGcStatDisplayType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatDisplayType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatDisplayType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatDisplayType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatDisplayType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatDisplayType::WriteToXMLNodeExplicit"

class cGcStatGroupData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatGroupData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatGroupData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcStatGroupData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatGroupData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatGroupData::WriteToXMLNodeExplicit"

class cGcStatGroupTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatGroupTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatGroupTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatGroupTable::WriteToXMLNode"

class cGcStatLevelData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatLevelData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatLevelData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatLevelData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatLevelData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatLevelData::WriteToXMLNodeExplicit"

class cGcStatModifyType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatModifyType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatModifyType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatModifyType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatModifyType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatModifyType::WriteToXMLNodeExplicit"

class cGcStatTrackType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatTrackType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatTrackType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatTrackType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatTrackType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatTrackType::WriteToXMLNodeExplicit"

class cGcStatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatType::WriteToXMLNodeExplicit"

class cGcStatValueData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatValueData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatValueData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcStatValueData::ReadFromDocument"
    class WriteToDocument(HookFactory):
        _name = "cGcStatValueData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatValueData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatValueData::WriteToXMLNodeExplicit"

class cGcStatsAchievements:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsAchievements::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsAchievements::WriteToXMLNode"

class cGcStatsOneShotTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsOneShotTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsOneShotTypes::WriteToXMLNode"

class cGcStatsValueTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatsValueTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatsValueTypes::WriteToXMLNode"

class cGcFriendlyDroneChatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFriendlyDroneChatType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFriendlyDroneChatType::WriteToXMLNode"

class cGcFriendlyDroneVocabularyEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFriendlyDroneVocabularyEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFriendlyDroneVocabularyEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFriendlyDroneVocabularyEntry::WriteToXMLNode"

class cGcInteractionBufferType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionBufferType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionBufferType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionBufferType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionBufferType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionBufferType::WriteToXMLNodeExplicit"

class cGcInteractionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInteractionData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInteractionData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcInteractionData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionData::WriteToXMLNodeExplicit"

class cGcPersistentTerrainEdits:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentTerrainEdits::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPersistentTerrainEdits::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentTerrainEdits::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentTerrainEdits::WriteToXMLNode"

class cGcPetChatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetChatType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetChatType::WriteToXMLNode"

class cGcPetVocabularyEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetVocabularyEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetVocabularyEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetVocabularyEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetVocabularyEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetVocabularyEntry::WriteToXMLNodeExplicit"

class cGcPetVocabularyTraitEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPetVocabularyTraitEntry::WriteToXMLNodeExplicit"

class cGcPetVocabularyWords:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPetVocabularyWords::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPetVocabularyWords::WriteToXMLNode"

class cGcSavedInteractionDialogData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSavedInteractionDialogData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSavedInteractionDialogData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSavedInteractionDialogData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSavedInteractionDialogData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSavedInteractionDialogData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSavedInteractionDialogData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSavedInteractionDialogData::WriteToXMLNode"

class cGcSavedInteractionRaceData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSavedInteractionRaceData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSavedInteractionRaceData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSavedInteractionRaceData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSavedInteractionRaceData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSavedInteractionRaceData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSavedInteractionRaceData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSavedInteractionRaceData::WriteToXMLNode"

class cGcSpecialPetChatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpecialPetChatType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSpecialPetChatType::WriteToXMLNode"

class cGcStatusMessageDefinition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatusMessageDefinition::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatusMessageDefinition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatusMessageDefinition::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatusMessageDefinition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatusMessageDefinition::WriteToXMLNodeExplicit"

class cGcStatusMessageDefinitions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatusMessageDefinitions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcStatusMessageDefinitions::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcStatusMessageDefinitions::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcStatusMessageDefinitions::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatusMessageDefinitions::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcStatusMessageDefinitions::Save"
    class SetDefaults(HookFactory):
        _name = "cGcStatusMessageDefinitions::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatusMessageDefinitions::WriteToXMLNode"

class cGcStatusMessageMissionMarkup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcStatusMessageMissionMarkup::WriteToXMLNodeExplicit"

class cGcTerrainEdit:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainEdit::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainEdit::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTerrainEdit::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainEdit::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainEdit::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainEdit::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainEdit::WriteToXMLNodeExplicit"

class cGcTerrainEditsBuffer:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTerrainEditsBuffer::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTerrainEditsBuffer::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTerrainEditsBuffer::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTerrainEditsBuffer::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTerrainEditsBuffer::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTerrainEditsBuffer::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTerrainEditsBuffer::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTerrainEditsBuffer::WriteToXMLNodeExplicit"

class cGcUAProtectedLocations:
    class SetDefaults(HookFactory):
        _name = "cGcUAProtectedLocations::SetDefaults"
    class ClassPointerCreate(HookFactory):
        _name = "cGcUAProtectedLocations::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUAProtectedLocations::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcUAProtectedLocations::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcUAProtectedLocations::ReadFromDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUAProtectedLocations::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUAProtectedLocations::WriteToXMLNodeExplicit"

class cGcSeasonPetConstraints:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonPetConstraints::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonPetConstraints::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSeasonPetConstraints::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonPetConstraints::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonPetConstraints::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonPetConstraints::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSeasonPetConstraints::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonPetConstraints::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonPetConstraints::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonPetConstraints::WriteToXMLNodeExplicit"

class cGcSeasonSaveStateOnDeath:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonSaveStateOnDeath::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonSaveStateOnDeath::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonSaveStateOnDeath::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonSaveStateOnDeath::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonSaveStateOnDeath::WriteToXMLNodeExplicit"

class cGcSeasonStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonStateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonStateData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcSeasonStateData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcSeasonStateData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSeasonStateData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonStateData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonStateData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonStateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSeasonStateData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonStateData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonStateData::WriteToXMLNodeExplicit"

class cGcSettlementProductionSlotData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementProductionSlotData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementProductionSlotData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSettlementProductionSlotData::ReadFromDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementProductionSlotData::WriteToXMLNode"

class cGcSyncBufferSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSyncBufferSaveData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSyncBufferSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSyncBufferSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSyncBufferSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSyncBufferSaveData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSyncBufferSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSyncBufferSaveData::WriteToXMLNodeExplicit"

class cGcSynchronisedBufferData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSynchronisedBufferData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSynchronisedBufferData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSynchronisedBufferData::WriteToXMLNode"

class cGcSynchronisedBufferType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSynchronisedBufferType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSynchronisedBufferType::WriteToXMLNode"

class cGcTeleportEndpoint:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTeleportEndpoint::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcTeleportEndpoint::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcTeleportEndpoint::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTeleportEndpoint::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTeleportEndpoint::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTeleportEndpoint::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTeleportEndpoint::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTeleportEndpoint::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTeleportEndpoint::WriteToXMLNodeExplicit"

class cGcTeleporterType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTeleporterType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTeleporterType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTeleporterType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTeleporterType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTeleporterType::WriteToXMLNodeExplicit"

class cGcTradingSupplyData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcTradingSupplyData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTradingSupplyData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcTradingSupplyData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTradingSupplyData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTradingSupplyData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcTradingSupplyData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTradingSupplyData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTradingSupplyData::WriteToXMLNodeExplicit"

class cGcUniqueIdData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUniqueIdData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcUniqueIdData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcUniqueIdData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUniqueIdData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUniqueIdData::WriteToXMLNodeExplicit"

class cGcWordGroupKnowledge:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWordGroupKnowledge::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWordGroupKnowledge::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcWordGroupKnowledge::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWordGroupKnowledge::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcWordGroupKnowledge::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcWordGroupKnowledge::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWordGroupKnowledge::WriteToXMLNode"

class cGcWordKnowledge:
    class ClassPointerCreate(HookFactory):
        _name = "cGcWordKnowledge::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcWordKnowledge::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcWordKnowledge::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcWordKnowledge::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcWordKnowledge::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcWordKnowledge::WriteToXMLNode"

class cGcPortalSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPortalSaveData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPortalSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPortalSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPortalSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPortalSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPortalSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPortalSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPortalSaveData::WriteToXMLNodeExplicit"

class cGcProtectedLocation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcProtectedLocation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcProtectedLocation::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcProtectedLocation::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcProtectedLocation::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcProtectedLocation::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcProtectedLocation::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcProtectedLocation::WriteToXMLNode"

class cGcRepairTechData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRepairTechData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcRepairTechData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcRepairTechData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcRepairTechData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcRepairTechData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcRepairTechData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcRepairTechData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRepairTechData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRepairTechData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcRepairTechData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRepairTechData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRepairTechData::WriteToXMLNodeExplicit"

class cGcSavedEntitlement:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSavedEntitlement::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSavedEntitlement::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSavedEntitlement::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSavedEntitlement::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSavedEntitlement::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSavedEntitlement::WriteToXMLNode"

class cGcSeasonalGameModeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalGameModeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonalGameModeData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcSeasonalGameModeData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcSeasonalGameModeData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSeasonalGameModeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonalGameModeData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonalGameModeData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonalGameModeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSeasonalGameModeData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonalGameModeData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalGameModeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonalGameModeData::WriteToXMLNodeExplicit"

class cGcSeasonalMilestone:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalMilestone::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonalMilestone::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcSeasonalMilestone::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonalMilestone::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonalMilestone::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonalMilestone::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSeasonalMilestone::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonalMilestone::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalMilestone::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonalMilestone::WriteToXMLNodeExplicit"

class cGcSeasonalMilestoneEncryption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonalMilestoneEncryption::WriteToXMLNodeExplicit"

class cGcSeasonalRingArray:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalRingArray::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonalRingArray::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSeasonalRingArray::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalRingArray::WriteToXMLNode"

class cGcSeasonalRingData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalRingData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonalRingData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalRingData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonalRingData::WriteToXMLNodeExplicit"

class cGcSeasonalStage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSeasonalStage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSeasonalStage::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSeasonalStage::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSeasonalStage::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSeasonalStage::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSeasonalStage::ReadFromDocument"
    class WriteToDocument(HookFactory):
        _name = "cGcSeasonalStage::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSeasonalStage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSeasonalStage::WriteToXMLNodeExplicit"

class cGcFleetExpeditionSaveData:
    class cGcFleetExpeditionSaveData(HookFactory):
        _name = "cGcFleetExpeditionSaveData::cGcFleetExpeditionSaveData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcFleetExpeditionSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFleetExpeditionSaveData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcFleetExpeditionSaveData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcFleetExpeditionSaveData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcFleetExpeditionSaveData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcFleetExpeditionSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcFleetExpeditionSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFleetExpeditionSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFleetExpeditionSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcFleetExpeditionSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFleetExpeditionSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFleetExpeditionSaveData::WriteToXMLNodeExplicit"

class cGcPlayerSpawnStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerSpawnStateData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerSpawnStateData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerSpawnStateData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerSpawnStateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerSpawnStateData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerSpawnStateData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerSpawnStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerSpawnStateData::WriteToXMLNodeExplicit"

class cGcPlayerStateData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerStateData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerStateData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPlayerStateData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPlayerStateData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerStateData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerStateData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerStateData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerStateData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerStateData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerStateData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerStateData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerStateData::WriteToXMLNodeExplicit"

class cGcInventoryStoreBalance:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryStoreBalance::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryStoreBalance::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryStoreBalance::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryStoreBalance::WriteToXMLNodeExplicit"

class cGcKnownThingsPreset:
    class ClassPointerCreate(HookFactory):
        _name = "cGcKnownThingsPreset::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcKnownThingsPreset::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcKnownThingsPreset::FixDown"
    class FixUp(HookFactory):
        _name = "cGcKnownThingsPreset::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcKnownThingsPreset::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcKnownThingsPreset::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcKnownThingsPreset::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcKnownThingsPreset::WriteToXMLNodeExplicit"

class cGcMaintenanceSaveKey:
    class ClassPointerCreate(HookFactory):
        _name = "cGcMaintenanceSaveKey::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcMaintenanceSaveKey::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcMaintenanceSaveKey::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcMaintenanceSaveKey::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcMaintenanceSaveKey::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcMaintenanceSaveKey::WriteToXMLNode"

class cGcModSettings:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModSettings::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModSettings::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModSettings::WriteToXMLNode"

class cGcModSettingsInfo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModSettingsInfo::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModSettingsInfo::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcModSettingsInfo::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcModSettingsInfo::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcModSettingsInfo::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModSettingsInfo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcModSettingsInfo::WriteToXMLNodeExplicit"

class cGcPersistedStatData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistedStatData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPersistedStatData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistedStatData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistedStatData::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistedStatData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistedStatData::WriteToXMLNode"

class cGcPlayerMissionParticipant:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionParticipant::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerMissionParticipant::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerMissionParticipant::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerMissionParticipant::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerMissionParticipant::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionParticipant::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerMissionParticipant::WriteToXMLNodeExplicit"

class cGcPlayerMissionParticipantType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionParticipantType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerMissionParticipantType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerMissionParticipantType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerMissionParticipantType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerMissionParticipantType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionParticipantType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerMissionParticipantType::WriteToXMLNodeExplicit"

class cGcPlayerMissionProgress:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionProgress::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerMissionProgress::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPlayerMissionProgress::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerMissionProgress::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerMissionProgress::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPlayerMissionProgress::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionProgress::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerMissionProgress::WriteToXMLNodeExplicit"

class cGcPlayerMissionProgressMapEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionProgressMapEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerMissionProgressMapEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionProgressMapEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerMissionProgressMapEntry::WriteToXMLNodeExplicit"

class cGcPlayerMissionProgressMapTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionProgressMapTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerMissionProgressMapTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionProgressMapTable::WriteToXMLNode"

class cGcPlayerMissionUpgradeMapEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapEntry::WriteToXMLNodeExplicit"

class cGcPlayerMissionUpgradeMapTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerMissionUpgradeMapTable::WriteToXMLNode"

class cGcCustomisationColourPaletteExtraData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationColourPaletteExtraData::WriteToXMLNodeExplicit"

class cGcCustomisationColourPalettes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationColourPalettes::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationColourPalettes::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationColourPalettes::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationColourPalettes::WriteToXMLNode"

class cGcCustomisationDescriptorGroups:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationDescriptorGroups::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationDescriptorGroups::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationDescriptorGroups::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroups::WriteToXMLNode"

class cGcCustomisationPreset:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationPreset::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationPreset::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationPreset::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationPreset::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationPreset::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationPreset::WriteToXMLNodeExplicit"

class cGcCustomisationPresets:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationPresets::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationPresets::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationPresets::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationPresets::WriteToXMLNode"

class cGcCustomisationTextureOptions:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationTextureOptions::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationTextureOptions::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCustomisationTextureOptions::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationTextureOptions::WriteToXMLNode"

class cGcDefaultSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDefaultSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcDefaultSaveData::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcDefaultSaveData::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDefaultSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDefaultSaveData::WriteToXMLNodeExplicit"

class cGcExpeditionEventSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcExpeditionEventSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcExpeditionEventSaveData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcExpeditionEventSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcExpeditionEventSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcExpeditionEventSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcExpeditionEventSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcExpeditionEventSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcExpeditionEventSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcExpeditionEventSaveData::WriteToXMLNodeExplicit"

class cGcFleetFrigateSaveData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFleetFrigateSaveData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFleetFrigateSaveData::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcFleetFrigateSaveData::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcFleetFrigateSaveData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcFleetFrigateSaveData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcFleetFrigateSaveData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcFleetFrigateSaveData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFleetFrigateSaveData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFleetFrigateSaveData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcFleetFrigateSaveData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFleetFrigateSaveData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFleetFrigateSaveData::WriteToXMLNodeExplicit"

class cGcGalacticAddressData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGalacticAddressData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGalacticAddressData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGalacticAddressData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGalacticAddressData::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcGalacticAddressData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGalacticAddressData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGalacticAddressData::WriteToXMLNodeExplicit"

class cGcGameMode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGameMode::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGameMode::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcGameMode::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGameMode::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcGameMode::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGameMode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGameMode::WriteToXMLNodeExplicit"

class cGcInventoryElement:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryElement::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventoryElement::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryElement::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryElement::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryElement::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryElement::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryElement::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryElement::WriteToXMLNodeExplicit"

class cGcInventoryIndex:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryIndex::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryIndex::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryIndex::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryIndex::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryIndex::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryIndex::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryIndex::WriteToXMLNodeExplicit"

class cGcInventoryLayout:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventoryLayout::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInventoryLayout::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcInventoryLayout::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventoryLayout::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInventoryLayout::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcInventoryLayout::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventoryLayout::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventoryLayout::WriteToXMLNodeExplicit"

class cGcInventorySpecialSlot:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInventorySpecialSlot::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInventorySpecialSlot::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcInventorySpecialSlot::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInventorySpecialSlot::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInventorySpecialSlot::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInventorySpecialSlot::WriteToXMLNodeExplicit"

class cGcSentinelSpawnSequenceGroupList:
    class FixDown(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::FixDown"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroupList::WriteToXMLNode"

class cGcCharacterCustomisationColourData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterCustomisationColourData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCharacterCustomisationColourData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterCustomisationColourData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationColourData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCharacterCustomisationColourData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationColourData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterCustomisationColourData::WriteToXMLNodeExplicit"

class cGcCharacterCustomisationTextureOptionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCharacterCustomisationTextureOptionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCharacterCustomisationTextureOptionData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCharacterCustomisationTextureOptionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCharacterCustomisationTextureOptionData::WriteToXMLNodeExplicit"

class cGcCustomisationDescriptorGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCustomisationDescriptorGroup::WriteToXMLNodeExplicit"

class cGcCustomisationTextureOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCustomisationTextureOption::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCustomisationTextureOption::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcCustomisationTextureOption::FixDown"
    class FixUp(HookFactory):
        _name = "cGcCustomisationTextureOption::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcCustomisationTextureOption::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCustomisationTextureOption::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcCustomisationTextureOption::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCustomisationTextureOption::WriteToXMLNode"

class cGcFreighterNPCSpawnPriority:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterNPCSpawnPriority::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterNPCSpawnPriority::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterNPCSpawnPriority::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterNPCSpawnPriority::WriteToXMLNode"

class cGcFreighterNPCType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterNPCType::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterNPCType::WriteToXMLNode"

class cGcFreighterRoomNPCData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterRoomNPCData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterRoomNPCData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFreighterRoomNPCData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcFreighterRoomNPCData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterRoomNPCData::WriteToXMLNode"

class cGcFreighterRoomNPCSpawnCapacities:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacities::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacities::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacities::WriteToXMLNode"

class cGcFreighterRoomNPCSpawnCapacityEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacityEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacityEntry::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacityEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFreighterRoomNPCSpawnCapacityEntry::WriteToXMLNodeExplicit"

class cGcNPCNavSubgraphNodeType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCNavSubgraphNodeType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCNavSubgraphNodeType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCNavSubgraphNodeType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCNavSubgraphNodeType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCNavSubgraphNodeType::WriteToXMLNodeExplicit"

class cGcNPCNavSubgraphNodeTypeConnectivity:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCNavSubgraphNodeTypeConnectivity::WriteToXMLNodeExplicit"

class cGcPersistentBBObjectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentBBObjectData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentBBObjectData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistentBBObjectData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistentBBObjectData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPersistentBBObjectData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistentBBObjectData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentBBObjectData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistentBBObjectData::WriteToXMLNodeExplicit"

class cGcPersistentBaseEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentBaseEntry::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentBaseEntry::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistentBaseEntry::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistentBaseEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPersistentBaseEntry::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistentBaseEntry::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentBaseEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistentBaseEntry::WriteToXMLNodeExplicit"

class cGcPersistentBaseTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentBaseTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentBaseTypes::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistentBaseTypes::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistentBaseTypes::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistentBaseTypes::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentBaseTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistentBaseTypes::WriteToXMLNodeExplicit"

class cGcSnapPointCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSnapPointCondition::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSnapPointCondition::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSnapPointCondition::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSnapPointCondition::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSnapPointCondition::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSnapPointCondition::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSnapPointCondition::WriteToXMLNodeExplicit"

class cGcGeneratedBaseRoomTemplate:
    class cGcGeneratedBaseRoomTemplate(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::cGcGeneratedBaseRoomTemplate"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGeneratedBaseRoomTemplate::WriteToXMLNodeExplicit"

class cGcBaseSnapState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseSnapState::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseSnapState::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseSnapState::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseSnapState::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseSnapState::WriteToXMLNodeExplicit"

class cGcBaseStatCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseStatCondition::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseStatCondition::WriteToXMLNode"

class cGcBiomeCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBiomeCondition::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBiomeCondition::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBiomeCondition::WriteToXMLNode"

class cGcBuildMenuIconSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildMenuIconSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBuildMenuIconSet::ClassPointerFix"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBuildMenuIconSet::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBuildMenuIconSet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildMenuIconSet::WriteToXMLNode"

class cGcBuildMenuOption:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildMenuOption::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildMenuOption::WriteToXMLNode"

class cGcBuildingModeCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingModeCondition::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingModeCondition::WriteToXMLNode"

class cGcBuildingPlacementErrorTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingPlacementErrorTypes::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBuildingPlacementErrorTypes::WriteToXMLNode"

class cGcFreighterDungeonsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFreighterDungeonsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFreighterDungeonsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcFreighterDungeonsTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFreighterDungeonsTable::WriteToXMLNode"

class cGcGeneratedBaseDecorationTemplate:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGeneratedBaseDecorationTemplate::WriteToXMLNodeExplicit"

class cGcGeneratedBaseLockDoorPair:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseLockDoorPair::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedBaseLockDoorPair::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseLockDoorPair::WriteToXMLNode"

class cGcGeneratedBasePruningRule:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBasePruningRule::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBasePruningRule::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedBasePruningRule::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGeneratedBasePruningRule::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBasePruningRule::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGeneratedBasePruningRule::WriteToXMLNodeExplicit"

class cGcGeneratedBaseStructuralTemplate:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseStructuralTemplate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBaseStructuralTemplate::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseStructuralTemplate::WriteToXMLNode"

class cGcGeneratedBaseTemplatesTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseTemplatesTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBaseTemplatesTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcGeneratedBaseTemplatesTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcGeneratedBaseTemplatesTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseTemplatesTable::WriteToXMLNode"

class cGcGeneratedBaseThemeTemplate:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGeneratedBaseThemeTemplate::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGeneratedBaseThemeTemplate::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGeneratedBaseThemeTemplate::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGeneratedBaseThemeTemplate::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGeneratedBaseThemeTemplate::WriteToXMLNodeExplicit"

class cGcGroupCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcGroupCondition::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGroupCondition::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGroupCondition::WriteToXMLNode"

class cGcId256List:
    class ClassPointerCreate(HookFactory):
        _name = "cGcId256List::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcId256List::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcId256List::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcId256List::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcId256List::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcId256List::WriteToXMLNode"

class cGcLinkNetworkTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcLinkNetworkTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLinkNetworkTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcLinkNetworkTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLinkNetworkTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLinkNetworkTypes::WriteToXMLNodeExplicit"

class cGcModBasePart:
    class ClassPointerCreate(HookFactory):
        _name = "cGcModBasePart::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcModBasePart::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcModBasePart::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcModBasePart::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcModBasePart::WriteToXMLNodeExplicit"

class cGcNPCHabitationType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCHabitationType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcNPCHabitationType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcNPCHabitationType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCHabitationType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcNPCHabitationType::WriteToXMLNodeExplicit"

class cGcOutSnapSocketCondition:
    class ClassPointerCreate(HookFactory):
        _name = "cGcOutSnapSocketCondition::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcOutSnapSocketCondition::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcOutSnapSocketCondition::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcOutSnapSocketCondition::WriteToXMLNode"

class cGcPersistentBase:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistentBase::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPersistentBase::ClassPointerFix"
    class DeallocateDynamic(HookFactory):
        _name = "cGcPersistentBase::DeallocateDynamic"
    class FixDown(HookFactory):
        _name = "cGcPersistentBase::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPersistentBase::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPersistentBase::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcPersistentBase::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistentBase::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPersistentBase::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcPersistentBase::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistentBase::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistentBase::WriteToXMLNodeExplicit"

class cGcPlayerExperienceSpawnTable:
    class FixDown(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::FixDown"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerExperienceSpawnTable::WriteToXMLNodeExplicit"

class cGcBaseBuildingEntry:
    class cGcBaseBuildingEntry(HookFactory):
        _name = "cGcBaseBuildingEntry::cGcBaseBuildingEntry"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingEntry::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingEntry::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingEntry::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingEntry::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingEntry::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingEntry::WriteToXMLNodeExplicit"

class cGcBaseLinkGridConnectionData:
    class cGcBaseLinkGridConnectionData(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::cGcBaseLinkGridConnectionData"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseLinkGridConnectionData::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartNavData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartNavData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartNavData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingPartNavData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartNavData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartNavData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartNavData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPartNavData::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartNavNodeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPartNavNodeData::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartStyle:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartStyle::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartStyle::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartStyle::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartStyle::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPartStyle::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartStyleModel:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartStyleModel::WriteToXMLNode"

class cGcBaseBuildingPartsDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartsDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartsDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartsDataTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartsDataTable::WriteToXMLNode"

class cGcBaseBuildingPartsNavDataTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartsNavDataTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartsNavDataTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartsNavDataTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartsNavDataTable::WriteToXMLNode"

class cGcBaseBuildingPartsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartsTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartsTable::WriteToXMLNode"

class cGcBaseBuildingProperties:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingProperties::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingProperties::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingProperties::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingProperties::WriteToXMLNodeExplicit"

class cGcBaseBuildingSubGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingSubGroup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingSubGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingSubGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingSubGroup::WriteToXMLNode"

class cGcBaseBuildingTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingTable::WriteToXMLNodeExplicit"

class cGcBaseGridSearchFilter:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseGridSearchFilter::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseGridSearchFilter::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseGridSearchFilter::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseGridSearchFilter::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseGridSearchFilter::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseGridSearchFilter::WriteToXMLNodeExplicit"

class cGcBaseLinkGridConnectionDependency:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseLinkGridConnectionDependency::WriteToXMLNodeExplicit"

class cGcBaseLinkGridData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseLinkGridData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseLinkGridData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseLinkGridData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseLinkGridData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseLinkGridData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseLinkGridData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseLinkGridData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseLinkGridData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseLinkGridData::WriteToXMLNodeExplicit"

class cGcBasePartSearchFilter:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBasePartSearchFilter::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBasePartSearchFilter::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBasePartSearchFilter::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcBasePartSearchFilter::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBasePartSearchFilter::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBasePartSearchFilter::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBasePartSearchFilter::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBasePartSearchFilter::WriteToXMLNodeExplicit"

class cGcBaseSearchFilter:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseSearchFilter::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseSearchFilter::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseSearchFilter::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseSearchFilter::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseSearchFilter::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseSearchFilter::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseSearchFilter::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseSearchFilter::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseSearchFilter::WriteToXMLNodeExplicit"

class cGcBaseAutoPowerSetting:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseAutoPowerSetting::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseAutoPowerSetting::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcBaseAutoPowerSetting::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseAutoPowerSetting::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcBaseAutoPowerSetting::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseAutoPowerSetting::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseAutoPowerSetting::WriteToXMLNodeExplicit"

class cGcBaseBuildingCostsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingCostsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingCostsTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingCostsTable::WriteToXMLNode"

class cGcBaseBuildingEntryCosts:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingEntryCosts::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingEntryCosts::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingEntryCosts::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingEntryCosts::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingEntryCosts::WriteToXMLNodeExplicit"

class cGcBaseBuildingEntryGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingEntryGroup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingEntryGroup::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingEntryGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingEntryGroup::WriteToXMLNodeExplicit"

class cGcBaseBuildingGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingGroup::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingGroup::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingGroup::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingGroup::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingGroup::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingGroup::WriteToXMLNodeExplicit"

class cGcBaseBuildingMaterial:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingMaterial::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingMaterial::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingMaterial::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingMaterial::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingMaterial::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingMaterial::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingMaterial::WriteToXMLNodeExplicit"

class cGcBaseBuildingMode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingMode::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingMode::WriteToXMLNode"

class cGcBaseBuildingObjectDecorationTypes:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingObjectDecorationTypes::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingObjectDecorationTypes::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingObjectDecorationTypes::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingObjectDecorationTypes::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingObjectDecorationTypes::WriteToXMLNodeExplicit"

class cGcBaseBuildingPalette:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPalette::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPalette::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPalette::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingPalette::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPalette::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPalette::WriteToXMLNodeExplicit"

class cGcBaseBuildingPart:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPart::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPart::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingPart::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPart::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPart::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPart::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPart::WriteToXMLNode"

class cGcBaseBuildingPartAudioLocationEntry:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationEntry::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartAudioLocationTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationTable::FixUp"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartAudioLocationTable::WriteToXMLNode"

class cGcBaseBuildingPartData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseBuildingPartData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcBaseBuildingPartData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcBaseBuildingPartData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingPartData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseBuildingPartData::WriteToXMLNodeExplicit"

class cGcBaseBuildingPartInteractionData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseBuildingPartInteractionData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseBuildingPartInteractionData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartInteractionData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseBuildingPartInteractionData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseBuildingPartInteractionData::WriteToXMLNode"

class cGcSimpleIkRecoilComponentData:
    class Cast(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSimpleIkRecoilComponentData::WriteToXMLNodeExplicit"

class cGcSimpleInteractionComponentData:
    class Cast(HookFactory):
        _name = "cGcSimpleInteractionComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSimpleInteractionComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSimpleInteractionComponentData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSimpleInteractionComponentData::FixDown"
    class GenerateHash(HookFactory):
        _name = "cGcSimpleInteractionComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSimpleInteractionComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSimpleInteractionComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSimpleInteractionComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSimpleInteractionComponentData::WriteToXMLNodeExplicit"

class cGcSpawnedObjectComponentData:
    class Cast(HookFactory):
        _name = "cGcSpawnedObjectComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcSpawnedObjectComponentData::ClassPointerCreate"

class cGcThereminComponentData:
    class Cast(HookFactory):
        _name = "cGcThereminComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcThereminComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcThereminComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcThereminComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcThereminComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcThereminComponentData::WriteToXMLNodeExplicit"

class cGcTurretComponentData:
    class Cast(HookFactory):
        _name = "cGcTurretComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcTurretComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcTurretComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcTurretComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcTurretComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcTurretComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcTurretComponentData::WriteToXMLNodeExplicit"

class cGcWiringSocketComponentData:
    class Cast(HookFactory):
        _name = "cGcWiringSocketComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcWiringSocketComponentData::ClassPointerCreate"

class cGcSentinelSpawnSequenceStep:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnSequenceStep::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnSequenceStep::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnSequenceStep::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequenceStep::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequenceStep::WriteToXMLNode"

class cGcSentinelSpawnWave:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnWave::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnWave::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcSentinelSpawnWave::FixDown"
    class FixUp(HookFactory):
        _name = "cGcSentinelSpawnWave::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnWave::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelSpawnWave::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelSpawnWave::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnWave::WriteToXMLNode"

class cGcSentinelWaveGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelWaveGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelWaveGroup::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelWaveGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelWaveGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelWaveGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelWaveGroup::WriteToXMLNodeExplicit"

class cGcSettlementConstructionLevel:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementConstructionLevel::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementConstructionLevel::WriteToXMLNode"

class cGcSettlementJudgementType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementJudgementType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementJudgementType::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcSettlementJudgementType::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementJudgementType::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcSettlementJudgementType::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementJudgementType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementJudgementType::WriteToXMLNodeExplicit"

class cGcSettlementStatType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSettlementStatType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcSettlementStatType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSettlementStatType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSettlementStatType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSettlementStatType::WriteToXMLNodeExplicit"

class cGcUniqueNPCSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcUniqueNPCSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcUniqueNPCSpawnData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcUniqueNPCSpawnData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcUniqueNPCSpawnData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcUniqueNPCSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcUniqueNPCSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcUniqueNPCSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcUniqueNPCSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcUniqueNPCSpawnData::WriteToXMLNodeExplicit"

class cGcNPCPlacementComponentData:
    class Cast(HookFactory):
        _name = "cGcNPCPlacementComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcNPCPlacementComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcNPCPlacementComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcNPCPlacementComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcNPCPlacementComponentData::WriteToXMLNode"

class cGcObjectPlacementComponentData:
    class Cast(HookFactory):
        _name = "cGcObjectPlacementComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectPlacementComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcObjectPlacementComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcObjectPlacementComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectPlacementComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectPlacementComponentData::WriteToXMLNodeExplicit"

class cGcObjectSpawnerComponentData:
    class Cast(HookFactory):
        _name = "cGcObjectSpawnerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcObjectSpawnerComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcObjectSpawnerComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcObjectSpawnerComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcObjectSpawnerComponentData::WriteToXMLNodeExplicit"

class cGcPortalComponentData:
    class Cast(HookFactory):
        _name = "cGcPortalComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcPortalComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPortalComponentData::WriteToXMLNode"

class cGcPersistencyMissionOverride:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPersistencyMissionOverride::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPersistencyMissionOverride::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcPersistencyMissionOverride::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPersistencyMissionOverride::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPersistencyMissionOverride::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPersistencyMissionOverride::WriteToXMLNodeExplicit"

class cGcPlayerExperienceAsteroidCreatureSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnData::WriteToXMLNodeExplicit"

class cGcPlayerExperienceAsteroidCreatureSpawnTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerExperienceAsteroidCreatureSpawnTable::WriteToXMLNodeExplicit"

class cGcPlayerExperienceSpawnArchetypeData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::FixDown"
    class FixUp(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerExperienceSpawnArchetypeData::WriteToXMLNodeExplicit"

class cGcPlayerExperienceSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPlayerExperienceSpawnData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPlayerExperienceSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPlayerExperienceSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPlayerExperienceSpawnData::WriteToXMLNodeExplicit"

class cGcPortalData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcPortalData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcPortalData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcPortalData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcPortalData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcPortalData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcPortalData::WriteToXMLNodeExplicit"

class cGcSentinelCoverState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelCoverState::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelCoverState::WriteToXMLNode"

class cGcSentinelSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcSentinelSpawnData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcSentinelSpawnData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcSentinelSpawnData::WriteToXMLNodeExplicit"

class cGcSentinelSpawnSequence:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnSequence::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnSequence::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcSentinelSpawnSequence::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequence::WriteToXMLNode"

class cGcSentinelSpawnSequenceGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroup::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroup::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcSentinelSpawnSequenceGroup::WriteToXMLNode"

class cGcDistanceScaleComponentData:
    class Cast(HookFactory):
        _name = "cGcDistanceScaleComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcDistanceScaleComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDistanceScaleComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDistanceScaleComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcDistanceScaleComponentData::WriteToXMLNodeExplicit"

class cGcGrabPlayerComponentData:
    class Cast(HookFactory):
        _name = "cGcGrabPlayerComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGrabPlayerComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGrabPlayerComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcGrabPlayerComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGrabPlayerComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGrabPlayerComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGrabPlayerComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGrabPlayerComponentData::WriteToXMLNodeExplicit"

class cGcGrabbableComponentData:
    class Cast(HookFactory):
        _name = "cGcGrabbableComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGrabbableComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcGrabbableComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGrabbableComponentData::WriteToXMLNode"

class cGcGroundWormComponentData:
    class Cast(HookFactory):
        _name = "cGcGroundWormComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcGroundWormComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcGroundWormComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcGroundWormComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcGroundWormComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcGroundWormComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcGroundWormComponentData::WriteToXMLNodeExplicit"

class cGcHeightAdjustComponentData:
    class Cast(HookFactory):
        _name = "cGcHeightAdjustComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcHeightAdjustComponentData::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcHeightAdjustComponentData::WriteToXMLNode"

class cGcLandingHelperComponentData:
    class Cast(HookFactory):
        _name = "cGcLandingHelperComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLandingHelperComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLandingHelperComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLandingHelperComponentData::WriteToXMLNode"

class cGcLootComponentData:
    class Cast(HookFactory):
        _name = "cGcLootComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcLootComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcLootComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcLootComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcLootComponentData::WriteToXMLNodeExplicit"

class cGcDroneGun:
    class ClassPointerCreate(HookFactory):
        _name = "cGcDroneGun::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcDroneGun::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcDroneGun::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcDroneGun::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcDroneGun::WriteToXMLNode"

class cGcEncounterType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEncounterType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcEncounterType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcEncounterType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEncounterType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEncounterType::WriteToXMLNodeExplicit"

class cGcFiendCrime:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFiendCrime::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcFiendCrime::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFiendCrime::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFiendCrime::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFiendCrime::WriteToXMLNodeExplicit"

class cGcFiendCrimeSpawnData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFiendCrimeSpawnData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFiendCrimeSpawnData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcFiendCrimeSpawnData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFiendCrimeSpawnData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFiendCrimeSpawnData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcFiendCrimeSpawnData::WriteToXMLNodeExplicit"

class cGcFiendCrimeSpawnTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::FixDown"
    class FixUp(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcFiendCrimeSpawnTable::WriteToXMLNode"

class cGcImpactCombatEffectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcImpactCombatEffectData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcImpactCombatEffectData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcImpactCombatEffectData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcImpactCombatEffectData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcImpactCombatEffectData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcImpactCombatEffectData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcImpactCombatEffectData::WriteToXMLNodeExplicit"

class cGcInteractionActivationCost:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionActivationCost::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcInteractionActivationCost::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcInteractionActivationCost::FixDown"
    class FixUp(HookFactory):
        _name = "cGcInteractionActivationCost::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionActivationCost::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionActivationCost::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcInteractionActivationCost::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionActivationCost::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcInteractionActivationCost::WriteToXMLNodeExplicit"

class cGcInteractionBaseBuildingState:
    class ClassPointerCreate(HookFactory):
        _name = "cGcInteractionBaseBuildingState::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcInteractionBaseBuildingState::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcInteractionBaseBuildingState::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcInteractionBaseBuildingState::WriteToXMLNode"

class cGcAlienPodComponentData:
    class Cast(HookFactory):
        _name = "cGcAlienPodComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPodComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAlienPodComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPodComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAlienPodComponentData::WriteToXMLNodeExplicit"

class cGcAtmosphereEntryComponentData:
    class Cast(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtmosphereEntryComponentData::WriteToXMLNodeExplicit"

class cGcBaseDefenceComponentData:
    class Cast(HookFactory):
        _name = "cGcBaseDefenceComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseDefenceComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBaseDefenceComponentData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcBaseDefenceComponentData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseDefenceComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseDefenceComponentData::WriteToXMLNodeExplicit"

class cGcBaseMiniPortalComponentData:
    class Cast(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBaseMiniPortalComponentData::WriteToXMLNodeExplicit"

class cGcBasePlacementComponentData:
    class Cast(HookFactory):
        _name = "cGcBasePlacementComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBasePlacementComponentData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcBasePlacementComponentData::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBasePlacementComponentData::WriteToXMLNode"

class cGcBuildingComponentData:
    class Cast(HookFactory):
        _name = "cGcBuildingComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcBuildingComponentData::ClassPointerCreate"

class cGcByteBeatSwitchComponentData:
    class Cast(HookFactory):
        _name = "cGcByteBeatSwitchComponentData::Cast"
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatSwitchComponentData::ClassPointerCreate"

class cGcAntagonistEnemy:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAntagonistEnemy::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAntagonistEnemy::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAntagonistEnemy::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAntagonistEnemy::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAntagonistEnemy::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAntagonistEnemy::WriteToXMLNode"

class cGcAntagonistFriend:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAntagonistFriend::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAntagonistFriend::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAntagonistFriend::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAntagonistFriend::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAntagonistFriend::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAntagonistFriend::WriteToXMLNode"

class cGcAntagonistGroup:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAntagonistGroup::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAntagonistGroup::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAntagonistGroup::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAntagonistGroup::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAntagonistGroup::WriteToXMLNodeExplicit"

class cGcAntagonistPerception:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAntagonistPerception::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAntagonistPerception::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAntagonistPerception::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAntagonistPerception::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAntagonistPerception::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAntagonistPerception::WriteToXMLNodeExplicit"

class cGcCombatEffectData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCombatEffectData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcCombatEffectData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatEffectData::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatEffectData::WriteToXMLNodeExplicit"

class cGcCombatEffectType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcCombatEffectType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcCombatEffectType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcCombatEffectType::WriteToXMLNodeExplicit"

class cGcCombatEffectsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcCombatEffectsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcCombatEffectsTable::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcCombatEffectsTable::FixUp"
    class SetDefaults(HookFactory):
        _name = "cGcCombatEffectsTable::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcCombatEffectsTable::WriteToXMLNode"

class cGcConstraintsToCreateSpec:
    class ClassPointerCreate(HookFactory):
        _name = "cGcConstraintsToCreateSpec::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcConstraintsToCreateSpec::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcConstraintsToCreateSpec::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcConstraintsToCreateSpec::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcConstraintsToCreateSpec::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcConstraintsToCreateSpec::WriteToXMLNodeExplicit"

class cGcEntitlementRewardData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEntitlementRewardData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcEntitlementRewardData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEntitlementRewardData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcEntitlementRewardData::WriteToXMLNodeExplicit"

class cGcEntitlementRewardsTable:
    class ClassPointerCreate(HookFactory):
        _name = "cGcEntitlementRewardsTable::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcEntitlementRewardsTable::ClassPointerFix"
    class WriteToXMLNode(HookFactory):
        _name = "cGcEntitlementRewardsTable::WriteToXMLNode"

class cGcRectangularInitialShape:
    class ClassPointerCreate(HookFactory):
        _name = "cGcRectangularInitialShape::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcRectangularInitialShape::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcRectangularInitialShape::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcRectangularInitialShape::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcRectangularInitialShape::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcRectangularInitialShape::WriteToXMLNodeExplicit"

class cTkEntitlementListData:
    class ClassPointerCreate(HookFactory):
        _name = "cTkEntitlementListData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cTkEntitlementListData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cTkEntitlementListData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cTkEntitlementListData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cTkEntitlementListData::WriteToXMLNode"

class cAxisSpecification:
    class ClassPointerCreate(HookFactory):
        _name = "cAxisSpecification::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cAxisSpecification::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cAxisSpecification::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cAxisSpecification::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cAxisSpecification::WriteToXMLNodeExplicit"

class cGcAdvancedTweaks:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAdvancedTweaks::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAdvancedTweaks::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAdvancedTweaks::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAdvancedTweaks::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAdvancedTweaks::WriteToXMLNodeExplicit"

class cGcAttachedNode:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAttachedNode::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAttachedNode::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAttachedNode::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAttachedNode::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAttachedNode::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAttachedNode::WriteToXMLNodeExplicit"

class cGcAttachmentPointData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAttachmentPointData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAttachmentPointData::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAttachmentPointData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAttachmentPointData::WriteToXMLNodeExplicit"

class cGcAttachmentPointSet:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAttachmentPointSet::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAttachmentPointSet::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAttachmentPointSet::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAttachmentPointSet::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAttachmentPointSet::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAttachmentPointSet::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAttachmentPointSet::WriteToXMLNodeExplicit"

class cGcByteBeatEnvelope:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatEnvelope::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatEnvelope::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatEnvelope::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatEnvelope::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatEnvelope::WriteToXMLNodeExplicit"

class cGcByteBeatLibraryData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatLibraryData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatLibraryData::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcByteBeatLibraryData::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatLibraryData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcByteBeatLibraryData::SetDefaults"
    class WriteToDocument(HookFactory):
        _name = "cGcByteBeatLibraryData::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatLibraryData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatLibraryData::WriteToXMLNodeExplicit"

class cGcByteBeatTemplates:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatTemplates::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcByteBeatTemplates::ClassPointerFix"
    class FixDown(HookFactory):
        _name = "cGcByteBeatTemplates::FixDown"
    class FixUp(HookFactory):
        _name = "cGcByteBeatTemplates::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatTemplates::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatTemplates::ReadFromXMLNode"
    class Save(HookFactory):
        _name = "cGcByteBeatTemplates::Save"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatTemplates::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatTemplates::WriteToXMLNodeExplicit"

class cGcByteBeatToken:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatToken::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatToken::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatToken::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatToken::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatToken::WriteToXMLNodeExplicit"

class cGcByteBeatWave:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatWave::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatWave::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatWave::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatWave::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatWave::WriteToXMLNodeExplicit"

class cGcClothAttachmentCirlce:
    class ClassPointerCreate(HookFactory):
        _name = "cGcClothAttachmentCirlce::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcClothAttachmentCirlce::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcClothAttachmentCirlce::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcClothAttachmentCirlce::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcClothAttachmentCirlce::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcClothAttachmentCirlce::WriteToXMLNodeExplicit"

class cGcClothAttachmentLine:
    class ClassPointerCreate(HookFactory):
        _name = "cGcClothAttachmentLine::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcClothAttachmentLine::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcClothAttachmentLine::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcClothAttachmentLine::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcClothAttachmentLine::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcClothAttachmentLine::WriteToXMLNodeExplicit"

class cGcClothCollisionBone:
    class ClassPointerCreate(HookFactory):
        _name = "cGcClothCollisionBone::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcClothCollisionBone::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcClothCollisionBone::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcClothCollisionBone::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcClothCollisionBone::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcClothCollisionBone::WriteToXMLNodeExplicit"

class cGcAudio3PointDopplerData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudio3PointDopplerData::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAudio3PointDopplerData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAudio3PointDopplerData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAudio3PointDopplerData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudio3PointDopplerData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudio3PointDopplerData::WriteToXMLNodeExplicit"

class cGcAudioNPCDoppler:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudioNPCDoppler::ClassPointerCreate"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAudioNPCDoppler::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAudioNPCDoppler::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudioNPCDoppler::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudioNPCDoppler::WriteToXMLNodeExplicit"

class cGcAudioPulseDemo:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudioPulseDemo::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAudioPulseDemo::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudioPulseDemo::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudioPulseDemo::WriteToXMLNodeExplicit"

class cGcAudioWwiseEvents:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudioWwiseEvents::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAudioWwiseEvents::GenerateHash"
    class ReadFromDocument(HookFactory):
        _name = "cGcAudioWwiseEvents::ReadFromDocument"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAudioWwiseEvents::ReadFromXMLNode"
    class WriteToDocument(HookFactory):
        _name = "cGcAudioWwiseEvents::WriteToDocument"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudioWwiseEvents::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudioWwiseEvents::WriteToXMLNodeExplicit"

class cGcAudioWwiseRTPCs:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAudioWwiseRTPCs::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAudioWwiseRTPCs::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAudioWwiseRTPCs::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAudioWwiseRTPCs::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAudioWwiseRTPCs::WriteToXMLNodeExplicit"

class cGcBasePartAudioLocation:
    class ClassPointerCreate(HookFactory):
        _name = "cGcBasePartAudioLocation::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcBasePartAudioLocation::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcBasePartAudioLocation::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcBasePartAudioLocation::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcBasePartAudioLocation::WriteToXMLNodeExplicit"

class cGcByteBeatDrum:
    class ClassPointerCreate(HookFactory):
        _name = "cGcByteBeatDrum::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcByteBeatDrum::ClassPointerFix"
    class FixUp(HookFactory):
        _name = "cGcByteBeatDrum::FixUp"
    class GenerateHash(HookFactory):
        _name = "cGcByteBeatDrum::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcByteBeatDrum::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcByteBeatDrum::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcByteBeatDrum::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcByteBeatDrum::WriteToXMLNodeExplicit"

class cGcAtlasSendSubmitDiscoveryExact:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitDiscoveryExact::SetDefaults"

class cGcAtlasSendSubmitMessage:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitMessage::SetDefaults"

class cGcAtlasSendSubmitSettlement:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitSettlement::SetDefaults"

class cGcAtlasRecvMonumentList:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvMonumentList::SetDefaults"

class cGcAtlasRecvSettlementList:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvSettlementList::SetDefaults"

class cGcAtlasRecvTotalContribution:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvTotalContribution::SetDefaults"

class cGcAtlasRecvVoxel:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvVoxel::SetDefaults"

class cGcAtlasSendMarkFeaturedBase:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendMarkFeaturedBase::SetDefaults"

class cGcAtlasRecvActiveFeaturedBasesQuery:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvActiveFeaturedBasesQuery::SetDefaults"

class cGcAtlasSendReportBase:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendReportBase::SetDefaults"

class cGcAtlasSendRequestBases:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendRequestBases::SetDefaults"

class cGcAtlasSendRequestBlob:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendRequestBlob::SetDefaults"

class cGcAtlasSendRequestDiscoveryExact:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendRequestDiscoveryExact::SetDefaults"

class cGcAtlasSendSubmitBaseWithImage:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasSendSubmitBaseWithImage::SetDefaults"

class cGcAlienPodAnimParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAlienPodAnimParams::ClassPointerCreate"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAlienPodAnimParams::WriteToXMLNode"

class cGcAtlasActiveFeaturedBaseHeader:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasActiveFeaturedBaseHeader::WriteToXMLNodeExplicit"

class cGcAtlasBase:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasBase::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasBase::ClassPointerFix"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasBase::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasBase::WriteToXMLNode"

class cGcAtlasBaseQuery:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasBaseQuery::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasBaseQuery::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasBaseQuery::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasBaseQuery::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasBaseQuery::WriteToXMLNode"

class cGcAtlasBasesRequest:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasBasesRequest::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasBasesRequest::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasBasesRequest::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasBasesRequest::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasBasesRequest::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasBasesRequest::WriteToXMLNodeExplicit"

class cGcAtlasDiscovery:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasDiscovery::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasDiscovery::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasDiscovery::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAtlasDiscovery::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasDiscovery::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasDiscovery::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasDiscovery::WriteToXMLNodeExplicit"

class cGcAtlasDiscoveryData:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasDiscoveryData::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasDiscoveryData::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasDiscoveryData::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAtlasDiscoveryData::ReadFromXMLNode"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasDiscoveryData::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasDiscoveryData::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasDiscoveryData::WriteToXMLNodeExplicit"

class cGcAtlasDiscoveryMetadata:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasDiscoveryMetadata::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasDiscoveryMetadata::GenerateHash"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasDiscoveryMetadata::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasDiscoveryMetadata::WriteToXMLNodeExplicit"

class cGcAtlasDownloadType:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasDownloadType::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasDownloadType::GenerateHash"
    class ReadFromXMLNode(HookFactory):
        _name = "cGcAtlasDownloadType::ReadFromXMLNode"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasDownloadType::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasDownloadType::WriteToXMLNodeExplicit"

class cGcAtlasFeaturedBaseStateChange:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasFeaturedBaseStateChange::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasFeaturedBaseStateChange::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasFeaturedBaseStateChange::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasFeaturedBaseStateChange::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasFeaturedBaseStateChange::WriteToXMLNodeExplicit"

class cGcAtlasMessage:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasMessage::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasMessage::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasMessage::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasMessage::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasMessage::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasMessage::WriteToXMLNodeExplicit"

class cGcAtlasMonument:
    class ClassPointerCreate(HookFactory):
        _name = "cGcAtlasMonument::ClassPointerCreate"
    class ClassPointerFix(HookFactory):
        _name = "cGcAtlasMonument::ClassPointerFix"
    class GenerateHash(HookFactory):
        _name = "cGcAtlasMonument::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcAtlasMonument::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcAtlasMonument::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcAtlasMonument::WriteToXMLNodeExplicit"

class cGcThirdPersonAnimParams:
    class ClassPointerCreate(HookFactory):
        _name = "cGcThirdPersonAnimParams::ClassPointerCreate"
    class GenerateHash(HookFactory):
        _name = "cGcThirdPersonAnimParams::GenerateHash"
    class SetDefaults(HookFactory):
        _name = "cGcThirdPersonAnimParams::SetDefaults"
    class WriteToXMLNode(HookFactory):
        _name = "cGcThirdPersonAnimParams::WriteToXMLNode"
    class WriteToXMLNodeExplicit(HookFactory):
        _name = "cGcThirdPersonAnimParams::WriteToXMLNodeExplicit"

class cGcAtlasRecvBaseImages:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvBaseImages::SetDefaults"

class cGcAtlasRecvBaseQueryList:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvBaseQueryList::SetDefaults"

class cGcAtlasRecvBasic:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvBasic::SetDefaults"

class cGcAtlasRecvBlob:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvBlob::SetDefaults"

class cGcAtlasRecvDiscoveryExact:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvDiscoveryExact::SetDefaults"

class cGcAtlasRecvDiscoveryList:
    class SetDefaults(HookFactory):
        _name = "cGcAtlasRecvDiscoveryList::SetDefaults"

class hkContainerAllocator:
    class malloc(HookFactory):
        _name = "hkContainerAllocator::malloc"

class hkBuiltinContainerAllocatorBase:
    class malloc(HookFactory):
        _name = "hkBuiltinContainerAllocatorBase::malloc"
    class free(HookFactory):
        _name = "hkBuiltinContainerAllocatorBase::free"

class hkMemory:
    class Allocator:
        class batchAllocate(HookFactory):
            _name = "hkMemory::Allocator::batchAllocate"
        class batchDeallocate(HookFactory):
            _name = "hkMemory::Allocator::batchDeallocate"
    class memCheck4(HookFactory):
        _name = "hkMemory::memCheck4"
        _overload: overloads.hkMemory.memCheck4.overloads = "const void *, const int, unsigned __int64, unsigned __int64, unsigned __int64 *"
        @classmethod
        def overload(cls, overload_args: overloads.hkMemory.memCheck4.overloads):
            cls._overload = overload_args
            return cls
    class memCpyBackwards(HookFactory):
        _name = "hkMemory::memCpyBackwards"
    class memMove(HookFactory):
        _name = "hkMemory::memMove"
    class memSet4(HookFactory):
        _name = "hkMemory::memSet4"
    class memSet(HookFactory):
        _name = "hkMemory::memSet"
    class AllocatorStack:
        class AllocatorStack(HookFactory):
            _name = "hkMemory::AllocatorStack::AllocatorStack"
        class pop(HookFactory):
            _name = "hkMemory::AllocatorStack::pop"
        class push(HookFactory):
            _name = "hkMemory::AllocatorStack::push"
    class Detail:
        class FwdToSharedAllocator:
            class malloc(HookFactory):
                _name = "hkMemory::Detail::FwdToSharedAllocator::malloc"
                _overload: overloads.hkMemory.Detail.FwdToSharedAllocator.malloc.overloads = "hkMemory::Detail::FwdToSharedAllocator *, unsigned __int64"
                @classmethod
                def overload(cls, overload_args: overloads.hkMemory.Detail.FwdToSharedAllocator.malloc.overloads):
                    cls._overload = overload_args
                    return cls
            class free(HookFactory):
                _name = "hkMemory::Detail::FwdToSharedAllocator::free"
        class DebugDataFuncs:
            class checkForMemoryBudgetRestored(HookFactory):
                _name = "hkMemory::Detail::DebugDataFuncs::checkForMemoryBudgetRestored"
        class deleteDebugThreadData(HookFactory):
            _name = "hkMemory::Detail::deleteDebugThreadData"
        class DebugCrossThreadData:
            class deleteThisReferencedObject(HookFactory):
                _name = "hkMemory::Detail::DebugCrossThreadData::deleteThisReferencedObject"
        class AllocationDebugInfo:
            class destroy(HookFactory):
                _name = "hkMemory::Detail::AllocationDebugInfo::destroy"
            class Data:
                class TrackingData:
                    class destroyBookmark(HookFactory):
                        _name = "hkMemory::Detail::AllocationDebugInfo::Data::TrackingData::destroyBookmark"
                    class untrack(HookFactory):
                        _name = "hkMemory::Detail::AllocationDebugInfo::Data::TrackingData::untrack"
        class destroyMetaAndDeallocate(HookFactory):
            _name = "hkMemory::Detail::destroyMetaAndDeallocate"
        class freeDebugCrossThreadData(HookFactory):
            _name = "hkMemory::Detail::freeDebugCrossThreadData"
        class freeWithDebugHeader(HookFactory):
            _name = "hkMemory::Detail::freeWithDebugHeader"
        class getDebugThreadDataStats(HookFactory):
            _name = "hkMemory::Detail::getDebugThreadDataStats"
        class initDebugCrossThreadData(HookFactory):
            _name = "hkMemory::Detail::initDebugCrossThreadData"
        class newDebugThreadData(HookFactory):
            _name = "hkMemory::Detail::newDebugThreadData"
        class purgeAllDeallocationTraces(HookFactory):
            _name = "hkMemory::Detail::purgeAllDeallocationTraces"
        class outOfMemory(HookFactory):
            _name = "hkMemory::Detail::outOfMemory"
    class Group:
        class purgeDeallocationQueuesInternal(HookFactory):
            _templates = ("T0", )
            _name = "hkMemory::Group::purgeDeallocationQueuesInternal<{T0}>"
        class purgeAllDelayedFrees(HookFactory):
            _name = "hkMemory::Group::purgeAllDelayedFrees"
    class ForwardingContainerAllocator:
        class free(HookFactory):
            _name = "hkMemory::ForwardingContainerAllocator::free"
        class malloc(HookFactory):
            _name = "hkMemory::ForwardingContainerAllocator::malloc"
    class FreeListAllocator:
        class FreeListAllocator(HookFactory):
            _name = "hkMemory::FreeListAllocator::FreeListAllocator"
        class allocate(HookFactory):
            _name = "hkMemory::FreeListAllocator::allocate"
        class batchAllocate(HookFactory):
            _name = "hkMemory::FreeListAllocator::batchAllocate"
        class batchDeallocate(HookFactory):
            _name = "hkMemory::FreeListAllocator::batchDeallocate"
        class collectGarbage(HookFactory):
            _name = "hkMemory::FreeListAllocator::collectGarbage"
        class deallocate(HookFactory):
            _name = "hkMemory::FreeListAllocator::deallocate"
        class getAllocatorStats(HookFactory):
            _name = "hkMemory::FreeListAllocator::getAllocatorStats"
        class getSystemStats(HookFactory):
            _name = "hkMemory::FreeListAllocator::getSystemStats"
        class resetPeakInUse(HookFactory):
            _name = "hkMemory::FreeListAllocator::resetPeakInUse"
    class FreeListAllocatorImpl:
        class FixedSizeAllocator:
            class allocate(HookFactory):
                _name = "hkMemory::FreeListAllocatorImpl::FixedSizeAllocator::allocate"
            class batchAllocate(HookFactory):
                _name = "hkMemory::FreeListAllocatorImpl::FixedSizeAllocator::batchAllocate"
            class batchDeallocate(HookFactory):
                _name = "hkMemory::FreeListAllocatorImpl::FixedSizeAllocator::batchDeallocate"
            class deallocate(HookFactory):
                _name = "hkMemory::FreeListAllocatorImpl::FixedSizeAllocator::deallocate"
        class setFixedSizeCinfo(HookFactory):
            _name = "hkMemory::FreeListAllocatorImpl::setFixedSizeCinfo"
    class MallocAllocator:
        class allocate(HookFactory):
            _name = "hkMemory::MallocAllocator::allocate"
        class deallocate(HookFactory):
            _name = "hkMemory::MallocAllocator::deallocate"
        class getAllocatorStats(HookFactory):
            _name = "hkMemory::MallocAllocator::getAllocatorStats"
        class getSystemStats(HookFactory):
            _name = "hkMemory::MallocAllocator::getSystemStats"
        class resetPeakInUse(HookFactory):
            _name = "hkMemory::MallocAllocator::resetPeakInUse"
    class LifoAllocator:
        class LifoAllocator(HookFactory):
            _name = "hkMemory::LifoAllocator::LifoAllocator"
        class allocate(HookFactory):
            _name = "hkMemory::LifoAllocator::allocate"
        class allocateFromNewSlab(HookFactory):
            _name = "hkMemory::LifoAllocator::allocateFromNewSlab"
        class deallocate(HookFactory):
            _name = "hkMemory::LifoAllocator::deallocate"
        class getSystemStats(HookFactory):
            _name = "hkMemory::LifoAllocator::getSystemStats"
        class insertNonLifoFree(HookFactory):
            _name = "hkMemory::LifoAllocator::insertNonLifoFree"
        class popNonLifoFrees(HookFactory):
            _name = "hkMemory::LifoAllocator::popNonLifoFrees"
        class resetPeakInUse(HookFactory):
            _name = "hkMemory::LifoAllocator::resetPeakInUse"
        class slowBlockFree(HookFactory):
            _name = "hkMemory::LifoAllocator::slowBlockFree"
    class BufferedAllocatorNoCleanup:
        class clear(HookFactory):
            _name = "hkMemory::BufferedAllocatorNoCleanup::clear"
        class clearAndDeallocate(HookFactory):
            _name = "hkMemory::BufferedAllocatorNoCleanup::clearAndDeallocate"
        class free(HookFactory):
            _name = "hkMemory::BufferedAllocatorNoCleanup::free"
        class malloc(HookFactory):
            _name = "hkMemory::BufferedAllocatorNoCleanup::malloc"

class hkReferencedObject:
    class deleteThisReferencedObject(HookFactory):
        _name = "hkReferencedObject::deleteThisReferencedObject"
    class addReference(HookFactory):
        _name = "hkReferencedObject::addReference"
    class removeReference(HookFactory):
        _name = "hkReferencedObject::removeReference"
    class setReferenceCount(HookFactory):
        _name = "hkReferencedObject::setReferenceCount"
    class getExactType(HookFactory):
        _name = "hkReferencedObject::getExactType"

class hkSingletonUtil__init_hkReferencedObjectLock_(HookFactory):
    _name = "hkSingletonUtil__init_hkReferencedObjectLock_"

class hkSingletonUtil__quit_hkReferencedObjectLock_(HookFactory):
    _name = "hkSingletonUtil__quit_hkReferencedObjectLock_"

class hkViewport:
    class getExactType(HookFactory):
        _name = "hkViewport::getExactType"

class hkRelArray_ArrayImpl:
    class getValue(HookFactory):
        _templates = ("T0", )
        _name = "hkRelArray_ArrayImpl<{T0}>::getValue"
    class setNumElements(HookFactory):
        _templates = ("T0", )
        _name = "hkRelArray_ArrayImpl<{T0}>::setNumElements"
    class inplaceFixup(HookFactory):
        _templates = ("T0", )
        _name = "hkRelArray_ArrayImpl<{T0}>::inplaceFixup"

class hkMpRational:
    class toLogString(HookFactory):
        _name = "hkMpRational::toLogString"

class hkQuaternionf:
    class mul(HookFactory):
        _name = "hkQuaternionf::mul"
    class normalize(HookFactory):
        _name = "hkQuaternionf::normalize"
    class getAngleSr(HookFactory):
        _name = "hkQuaternionf::getAngleSr"
    class set(HookFactory):
        _name = "hkQuaternionf::set"
    class setAxisAngle(HookFactory):
        _name = "hkQuaternionf::setAxisAngle"
        _overload: overloads.hkQuaternionf.setAxisAngle.overloads = "hkQuaternionf *, const hkVector4f *, const hkSimdFloat32 *"
        @classmethod
        def overload(cls, overload_args: overloads.hkQuaternionf.setAxisAngle.overloads):
            cls._overload = overload_args
            return cls
    class setFlippedRotation(HookFactory):
        _name = "hkQuaternionf::setFlippedRotation"
    class setSlerp(HookFactory):
        _name = "hkQuaternionf::setSlerp"
    class setUsingEulerAngles(HookFactory):
        _name = "hkQuaternionf::setUsingEulerAngles"
        _overload: overloads.hkQuaternionf.setUsingEulerAngles.overloads = "hkQuaternionf *, float, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.hkQuaternionf.setUsingEulerAngles.overloads):
            cls._overload = overload_args
            return cls

class hkTransformf:
    class set(HookFactory):
        _name = "hkTransformf::set"
    class isApproximatelyEqual(HookFactory):
        _name = "hkTransformf::isApproximatelyEqual"
    class setInverse(HookFactory):
        _name = "hkTransformf::setInverse"
    class setMul(HookFactory):
        _name = "hkTransformf::setMul"
    class setMulInverseMul(HookFactory):
        _name = "hkTransformf::setMulInverseMul"
        _overload: overloads.hkTransformf.setMulInverseMul.overloads = "hkTransformf *, const hkTransformf *, const hkTransformf *"
        @classmethod
        def overload(cls, overload_args: overloads.hkTransformf.setMulInverseMul.overloads):
            cls._overload = overload_args
            return cls
    class setMulMulInverse(HookFactory):
        _name = "hkTransformf::setMulMulInverse"

class hkBaseObject:
    class getExactType(HookFactory):
        _name = "hkBaseObject::getExactType"

class hkDefaultTaskQueue:
    class getExactType(HookFactory):
        _name = "hkDefaultTaskQueue::getExactType"
    class HandleAllocator:
        class Block:
            class Block(HookFactory):
                _name = "hkDefaultTaskQueue::HandleAllocator::Block::Block"
        class allocate(HookFactory):
            _name = "hkDefaultTaskQueue::HandleAllocator::allocate"
        class free(HookFactory):
            _name = "hkDefaultTaskQueue::HandleAllocator::free"
    class hkDefaultTaskQueue(HookFactory):
        _name = "hkDefaultTaskQueue::hkDefaultTaskQueue"
    class addAndSubmitTask(HookFactory):
        _name = "hkDefaultTaskQueue::addAndSubmitTask"
    class addDependencies(HookFactory):
        _name = "hkDefaultTaskQueue::addDependencies"
    class addDependency(HookFactory):
        _name = "hkDefaultTaskQueue::addDependency"
    class allocateHandles(HookFactory):
        _name = "hkDefaultTaskQueue::allocateHandles"
    class clearTimerData(HookFactory):
        _name = "hkDefaultTaskQueue::clearTimerData"
    class close(HookFactory):
        _name = "hkDefaultTaskQueue::close"
    class freeHandles(HookFactory):
        _name = "hkDefaultTaskQueue::freeHandles"
    class EmptyTask:
        class getName(HookFactory):
            _name = "hkDefaultTaskQueue::EmptyTask::getName"
    class getNumThreadsHint(HookFactory):
        _name = "hkDefaultTaskQueue::getNumThreadsHint"
    class getTimerData(HookFactory):
        _name = "hkDefaultTaskQueue::getTimerData"
    class initHandle(HookFactory):
        _name = "hkDefaultTaskQueue::initHandle"
    class isHandleFinished(HookFactory):
        _name = "hkDefaultTaskQueue::isHandleFinished"
    class process(HookFactory):
        _name = "hkDefaultTaskQueue::process"
    class processOnce(HookFactory):
        _name = "hkDefaultTaskQueue::processOnce"
    class processUntilFinished(HookFactory):
        _name = "hkDefaultTaskQueue::processUntilFinished"
        _overload: overloads.hkDefaultTaskQueue.processUntilFinished.overloads = "hkDefaultTaskQueue *, struct hkTaskQueue::_Handle **, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkDefaultTaskQueue.processUntilFinished.overloads):
            cls._overload = overload_args
            return cls
    class reset(HookFactory):
        _name = "hkDefaultTaskQueue::reset"
    class setMultiplicity(HookFactory):
        _name = "hkDefaultTaskQueue::setMultiplicity"
    class submitHandles(HookFactory):
        _name = "hkDefaultTaskQueue::submitHandles"

class hkGeometry:
    class getExactType(HookFactory):
        _name = "hkGeometry::getExactType"
    class hkGeometry(HookFactory):
        _name = "hkGeometry::hkGeometry"
        _overload: overloads.hkGeometry.hkGeometry.overloads = "hkGeometry *, const hkGeometry *"
        @classmethod
        def overload(cls, overload_args: overloads.hkGeometry.hkGeometry.overloads):
            cls._overload = overload_args
            return cls
    class appendGeometry(HookFactory):
        _name = "hkGeometry::appendGeometry"
    class appendVertex(HookFactory):
        _name = "hkGeometry::appendVertex"
    class clear(HookFactory):
        _name = "hkGeometry::clear"

class hkLocalFrameGroup:
    class getExactType(HookFactory):
        _name = "hkLocalFrameGroup::getExactType"
    class hkLocalFrameGroup(HookFactory):
        _name = "hkLocalFrameGroup::hkLocalFrameGroup"

class hkMonitorStreamColorTable:
    class getExactType(HookFactory):
        _name = "hkMonitorStreamColorTable::getExactType"
    class hkMonitorStreamColorTable(HookFactory):
        _name = "hkMonitorStreamColorTable::hkMonitorStreamColorTable"

class hkMonitorStreamContainer:
    class getExactType(HookFactory):
        _name = "hkMonitorStreamContainer::getExactType"
    class hkMonitorStreamContainer(HookFactory):
        _name = "hkMonitorStreamContainer::hkMonitorStreamContainer"

class hkMonitorStreamStringMap:
    class getExactType(HookFactory):
        _name = "hkMonitorStreamStringMap::getExactType"
    class hkMonitorStreamStringMap(HookFactory):
        _name = "hkMonitorStreamStringMap::hkMonitorStreamStringMap"

class hkMonitorStreamTypeMap:
    class getExactType(HookFactory):
        _name = "hkMonitorStreamTypeMap::getExactType"
    class hkMonitorStreamTypeMap(HookFactory):
        _name = "hkMonitorStreamTypeMap::hkMonitorStreamTypeMap"

class hkRefCountedProperties:
    class getExactType(HookFactory):
        _name = "hkRefCountedProperties::getExactType"
    class hkRefCountedProperties(HookFactory):
        _name = "hkRefCountedProperties::hkRefCountedProperties"
        _overload: overloads.hkRefCountedProperties.hkRefCountedProperties.overloads = "hkRefCountedProperties *, const hkRefCountedProperties *"
        @classmethod
        def overload(cls, overload_args: overloads.hkRefCountedProperties.hkRefCountedProperties.overloads):
            cls._overload = overload_args
            return cls

class hkReferencedTask:
    class getExactType(HookFactory):
        _name = "hkReferencedTask::getExactType"

class hkSimpleLocalFrame:
    class getExactType(HookFactory):
        _name = "hkSimpleLocalFrame::getExactType"
    class hkSimpleLocalFrame(HookFactory):
        _name = "hkSimpleLocalFrame::hkSimpleLocalFrame"
    class getChildFrame(HookFactory):
        _name = "hkSimpleLocalFrame::getChildFrame"
    class getLocalPosition(HookFactory):
        _name = "hkSimpleLocalFrame::getLocalPosition"
    class getNearbyFrames(HookFactory):
        _name = "hkSimpleLocalFrame::getNearbyFrames"
    class getNumChildFrames(HookFactory):
        _name = "hkSimpleLocalFrame::getNumChildFrames"
    class setGroup(HookFactory):
        _name = "hkSimpleLocalFrame::setGroup"
    class setLocalTransform(HookFactory):
        _name = "hkSimpleLocalFrame::setLocalTransform"
    class setParentFrame(HookFactory):
        _name = "hkSimpleLocalFrame::setParentFrame"

class hkTask:
    class getExactType(HookFactory):
        _name = "hkTask::getExactType"
    class getName(HookFactory):
        _name = "hkTask::getName"

class hkTaskQueue:
    class getExactType(HookFactory):
        _name = "hkTaskQueue::getExactType"
    class close(HookFactory):
        _name = "hkTaskQueue::close"
    class processAndFree(HookFactory):
        _name = "hkTaskQueue::processAndFree"
    class reset(HookFactory):
        _name = "hkTaskQueue::reset"
    class setAffinity(HookFactory):
        _name = "hkTaskQueue::setAffinity"
    class addDependencies(HookFactory):
        _name = "hkTaskQueue::addDependencies"
    class forEach(HookFactory):
        _name = "hkTaskQueue::forEach"
    class isFinished(HookFactory):
        _name = "hkTaskQueue::isFinished"
    class processUntilFinished(HookFactory):
        _name = "hkTaskQueue::processUntilFinished"
    class submitGraphAndWait(HookFactory):
        _name = "hkTaskQueue::submitGraphAndWait"

class set(HookFactory):
    _name = "set"

class hkCriticalSection:
    class hkCriticalSection(HookFactory):
        _name = "hkCriticalSection::hkCriticalSection"
        _overload: overloads.hkCriticalSection.hkCriticalSection.overloads = "hkCriticalSection *"
        @classmethod
        def overload(cls, overload_args: overloads.hkCriticalSection.hkCriticalSection.overloads):
            cls._overload = overload_args
            return cls

class hkHash:
    class appendCrc64(HookFactory):
        _name = "hkHash::appendCrc64"
    class computeCrc64(HookFactory):
        _name = "hkHash::computeCrc64"
    class computeFNV1Hash32(HookFactory):
        _name = "hkHash::computeFNV1Hash32"
    class appendCrc32(HookFactory):
        _name = "hkHash::appendCrc32"
    class computeCrc32(HookFactory):
        _name = "hkHash::computeCrc32"

class hkErrorFwd:
    class messageAssert(HookFactory):
        _name = "hkErrorFwd::messageAssert"
    class messageError(HookFactory):
        _name = "hkErrorFwd::messageError"
    class messageFatalError(HookFactory):
        _name = "hkErrorFwd::messageFatalError"
    class messageWarning(HookFactory):
        _name = "hkErrorFwd::messageWarning"
    class setEnabled(HookFactory):
        _name = "hkErrorFwd::setEnabled"

class hkBaseSystem:
    class accessLogOutput(HookFactory):
        _name = "hkBaseSystem::accessLogOutput"
    class error(HookFactory):
        _name = "hkBaseSystem::error"
    class init(HookFactory):
        _name = "hkBaseSystem::init"
    class initNodes(HookFactory):
        _name = "hkBaseSystem::initNodes"
    class InitNode:
        class internalConstruct(HookFactory):
            _name = "hkBaseSystem::InitNode::internalConstruct"
    class isInitialized(HookFactory):
        _name = "hkBaseSystem::isInitialized"
    class outputDebugString(HookFactory):
        _name = "hkBaseSystem::outputDebugString"
    class quit(HookFactory):
        _name = "hkBaseSystem::quit"
    class quitNodes(HookFactory):
        _name = "hkBaseSystem::quitNodes"
    class Detail:
        class allocateTlsTableDataIndex(HookFactory):
            _name = "hkBaseSystem::Detail::allocateTlsTableDataIndex"
        class getThreadContextSystemSharedAllocator(HookFactory):
            _name = "hkBaseSystem::Detail::getThreadContextSystemSharedAllocator"
        class initThreadContextSystem(HookFactory):
            _name = "hkBaseSystem::Detail::initThreadContextSystem"
        class quitThreadContextSystem(HookFactory):
            _name = "hkBaseSystem::Detail::quitThreadContextSystem"
        class setImplCb(HookFactory):
            _name = "hkBaseSystem::Detail::setImplCb"
        class setTlsData(HookFactory):
            _name = "hkBaseSystem::Detail::setTlsData"
        class getTlsData(HookFactory):
            _name = "hkBaseSystem::Detail::getTlsData"
    class ThreadContext:
        class createAndStoreNewContext(HookFactory):
            _name = "hkBaseSystem::ThreadContext::createAndStoreNewContext"
        class getThreadContexts(HookFactory):
            _name = "hkBaseSystem::ThreadContext::getThreadContexts"
    class ThreadContextImpl:
        class freeContext(HookFactory):
            _name = "hkBaseSystem::ThreadContextImpl::freeContext"
        class quitThreadContextSystem(HookFactory):
            _name = "hkBaseSystem::ThreadContextImpl::quitThreadContextSystem"

class hkMultiThreadCheck:
    class enableChecks(HookFactory):
        _name = "hkMultiThreadCheck::enableChecks"

class hkInetAddr:
    class hkInetAddr(HookFactory):
        _name = "hkInetAddr::hkInetAddr"
    class toLogString(HookFactory):
        _name = "hkInetAddr::toLogString"

class hkSingletonUtil__init_hkReflect__Detail__DerivedDataCache_(HookFactory):
    _name = "hkSingletonUtil__init_hkReflect__Detail__DerivedDataCache_"

class hkSingletonUtil__quit_ReflectStrings_(HookFactory):
    _name = "hkSingletonUtil__quit_ReflectStrings_"

class hkSimdFloat32:
    class ToString(HookFactory):
        _name = "hkSimdFloat32::ToString"

class hkSimdDouble64_FloatImpl:
    class getValue(HookFactory):
        _name = "hkSimdDouble64_FloatImpl::getValue"

class hkLinearBuffer:
    class blockAllocAligned(HookFactory):
        _name = "hkLinearBuffer::blockAllocAligned"
    class blockAlloc(HookFactory):
        _name = "hkLinearBuffer::blockAlloc"

class hkTupleDetail:
    class reflectToString(HookFactory):
        _name = "hkTupleDetail::reflectToString"

class assign(HookFactory):
    _name = "assign"

class hkResult:
    class ToString(HookFactory):
        _name = "hkResult::ToString"
    class reflectToString(HookFactory):
        _name = "hkResult::reflectToString"
    class toString(HookFactory):
        _name = "hkResult::toString"

class hkStreamWriter:
    class seek(HookFactory):
        _name = "hkStreamWriter::seek"
    class hkStreamWriter(HookFactory):
        _name = "hkStreamWriter::hkStreamWriter"

class hk:
    class IsValueArray:
        class Impl:
            class getValue(HookFactory):
                _name = "hk::IsValueArray::Impl::getValue"
    class Presets:
        class assign(HookFactory):
            _name = "hk::Presets::assign"
        class assignFlags(HookFactory):
            _name = "hk::Presets::assignFlags"
        class createFromParsed(HookFactory):
            _name = "hk::Presets::createFromParsed"
        class getNameByPreset(HookFactory):
            _name = "hk::Presets::getNameByPreset"
        class getNameByPresetFlags(HookFactory):
            _name = "hk::Presets::getNameByPresetFlags"
        class getPresetByName(HookFactory):
            _name = "hk::Presets::getPresetByName"
        class makePresetFlagsByName(HookFactory):
            _name = "hk::Presets::makePresetFlagsByName"
        class reflectToString(HookFactory):
            _name = "hk::Presets::reflectToString"
    class DeleteTypeInfo:
        class deleteType(HookFactory):
            _name = "hk::DeleteTypeInfo::deleteType"
    class swap(HookFactory):
        _templates = ("T0", )
        _name = "hk::swap<{T0}>"

class parseAndAppendSinglePrintable(HookFactory):
    _name = "parseAndAppendSinglePrintable"

class parseSignedDecimal(HookFactory):
    _name = "parseSignedDecimal"

class parseUnsignedDecimal(HookFactory):
    _name = "parseUnsignedDecimal"

class hkQTransformf:
    class isApproximatelyEqual(HookFactory):
        _name = "hkQTransformf::isApproximatelyEqual"
    class setMul(HookFactory):
        _name = "hkQTransformf::setMul"
    class setMulInverseMul(HookFactory):
        _name = "hkQTransformf::setMulInverseMul"

class hkSingletonUtil__init_hkUuidPseudoRandomGenerator_(HookFactory):
    _name = "hkSingletonUtil__init_hkUuidPseudoRandomGenerator_"

class hkUuid:
    class reflectionToString(HookFactory):
        _name = "hkUuid::reflectionToString"

class hkRotationImpl:
    class isOrthonormal(HookFactory):
        _templates = ("T0", )
        _name = "hkRotationImpl<{T0}>::isOrthonormal"
    class orthonormalDeviation(HookFactory):
        _templates = ("T0", )
        _name = "hkRotationImpl<{T0}>::orthonormalDeviation"
    class renormalize(HookFactory):
        _templates = ("T0", )
        _name = "hkRotationImpl<{T0}>::renormalize"
    class set(HookFactory):
        _templates = ("T0", )
        _name = "hkRotationImpl<{T0}>::set"
    class setAxisAngle(HookFactory):
        _templates = ("T0", )
        _name = "hkRotationImpl<{T0}>::setAxisAngle"

class hkVariantArray:
    class hkVariantArray(HookFactory):
        _name = "hkVariantArray::hkVariantArray"
    class clearAndDeallocate(HookFactory):
        _name = "hkVariantArray::clearAndDeallocate"

class div(HookFactory):
    _name = "div"

class toString(HookFactory):
    _name = "toString"
    _overload: overloads.toString.overloads = "const hkMpRational *, unsigned int, hkStringBuf *"
    @classmethod
    def overload(cls, overload_args: overloads.toString.overloads):
        cls._overload = overload_args
        return cls

class hkMonitorStreamFrameInfo:
    class hkMonitorStreamFrameInfo(HookFactory):
        _name = "hkMonitorStreamFrameInfo::hkMonitorStreamFrameInfo"

class hkAsyncThreadPool:
    class Cinfo:
        class Cinfo(HookFactory):
            _name = "hkAsyncThreadPool::Cinfo::Cinfo"
    class acquireThreadSemaphore(HookFactory):
        _name = "hkAsyncThreadPool::acquireThreadSemaphore"
    class driveToForeground(HookFactory):
        _name = "hkAsyncThreadPool::driveToForeground"
    class getCurrentThreadIndex(HookFactory):
        _name = "hkAsyncThreadPool::getCurrentThreadIndex"
    class getCurrentThreadPool(HookFactory):
        _name = "hkAsyncThreadPool::getCurrentThreadPool"
    class releaseThreadSemaphore(HookFactory):
        _name = "hkAsyncThreadPool::releaseThreadSemaphore"
    class tendToCurrentThreadPool(HookFactory):
        _name = "hkAsyncThreadPool::tendToCurrentThreadPool"
    class tendToThreadPool(HookFactory):
        _name = "hkAsyncThreadPool::tendToThreadPool"

class hkLocalFrame:
    class getDescendants(HookFactory):
        _name = "hkLocalFrame::getDescendants"

class hkMemoryMeshBody:
    class getTransform(HookFactory):
        _name = "hkMemoryMeshBody::getTransform"
    class getName(HookFactory):
        _name = "hkMemoryMeshBody::getName"
    class getExactType(HookFactory):
        _name = "hkMemoryMeshBody::getExactType"
    class getVertexBuffer(HookFactory):
        _name = "hkMemoryMeshBody::getVertexBuffer"
    class getNumIndexedTransforms(HookFactory):
        _name = "hkMemoryMeshBody::getNumIndexedTransforms"
    class setIndexedTransforms(HookFactory):
        _name = "hkMemoryMeshBody::setIndexedTransforms"
    class getIndexedTransforms(HookFactory):
        _name = "hkMemoryMeshBody::getIndexedTransforms"
    class getIndexedInverseTransforms(HookFactory):
        _name = "hkMemoryMeshBody::getIndexedInverseTransforms"
    class getIndexTransformsOrder(HookFactory):
        _name = "hkMemoryMeshBody::getIndexTransformsOrder"
    class getIndexTransformNames(HookFactory):
        _name = "hkMemoryMeshBody::getIndexTransformNames"
    class getIndexMappings(HookFactory):
        _name = "hkMemoryMeshBody::getIndexMappings"
    class getNumIndexMappings(HookFactory):
        _name = "hkMemoryMeshBody::getNumIndexMappings"
    class setName(HookFactory):
        _name = "hkMemoryMeshBody::setName"

class hkThreadLocalDataBase:
    class hkThreadLocalDataBase(HookFactory):
        _name = "hkThreadLocalDataBase::hkThreadLocalDataBase"

class hkSignal:
    class destroy(HookFactory):
        _name = "hkSignal::destroy"
    class getNumSubscriptions(HookFactory):
        _name = "hkSignal::getNumSubscriptions"
    class reset(HookFactory):
        _name = "hkSignal::reset"
    class unsubscribeAll(HookFactory):
        _name = "hkSignal::unsubscribeAll"
    class unsubscribeInternal(HookFactory):
        _name = "hkSignal::unsubscribeInternal"
        _overload: overloads.hkSignal.unsubscribeInternal.overloads = "hkSignal *, hkBool *, void *, const void *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkSignal.unsubscribeInternal.overloads):
            cls._overload = overload_args
            return cls

class SetThreadNameUsingException(HookFactory):
    _name = "SetThreadNameUsingException"

class hkThread:
    class getMyThreadId(HookFactory):
        _name = "hkThread::getMyThreadId"
    class setPriority(HookFactory):
        _name = "hkThread::setPriority"
    class Cinfo:
        class Cinfo(HookFactory):
            _name = "hkThread::Cinfo::Cinfo"
    class hkThread(HookFactory):
        _name = "hkThread::hkThread"

class hkHashMapDetail:
    class Entry:
        class getSentinel(HookFactory):
            _name = "hkHashMapDetail::Entry::getSentinel"
    class setSentinel_OOL(HookFactory):
        _name = "hkHashMapDetail::setSentinel_OOL"

class hkSingletonUtil__init_hkHardwareInfo_(HookFactory):
    _name = "hkSingletonUtil__init_hkHardwareInfo_"

class hkHardwareInfo:
    class hkHardwareInfo(HookFactory):
        _name = "hkHardwareInfo::hkHardwareInfo"
    class calcNumHardwareThreads(HookFactory):
        _name = "hkHardwareInfo::calcNumHardwareThreads"

class hkMatrix3Impl:
    class changeBasis(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::changeBasis"
    class diagonalizeSymmetric(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::diagonalizeSymmetric"
    class diagonalizeSymmetricApproximation(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::diagonalizeSymmetricApproximation"
    class isApproximatelyEqual(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::isApproximatelyEqual"
    class mul(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::mul"
    class setCrossSkewSymmetric(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::setCrossSkewSymmetric"
    class setInverse(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::setInverse"
    class setMul(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::setMul"
    class setMulInverse(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::setMulInverse"
    class setTranspose(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::setTranspose"
    class transpose(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix3Impl<{T0}>::transpose"

class hkVector4f:
    class ToString(HookFactory):
        _name = "hkVector4f::ToString"
    class setRotatedDir(HookFactory):
        _name = "hkVector4f::setRotatedDir"
        _overload: overloads.hkVector4f.setRotatedDir.overloads = "hkVector4f *, const hkMatrix3Impl<float> *, const hkVector4f *"
        @classmethod
        def overload(cls, overload_args: overloads.hkVector4f.setRotatedDir.overloads):
            cls._overload = overload_args
            return cls
    class setRotatedInverseDir(HookFactory):
        _name = "hkVector4f::setRotatedInverseDir"
        _overload: overloads.hkVector4f.setRotatedInverseDir.overloads = "hkVector4f *, const hkMatrix3Impl<float> *, const hkVector4f *"
        @classmethod
        def overload(cls, overload_args: overloads.hkVector4f.setRotatedInverseDir.overloads):
            cls._overload = overload_args
            return cls
    class setTransformedInversePos(HookFactory):
        _name = "hkVector4f::setTransformedInversePos"
        _overload: overloads.hkVector4f.setTransformedInversePos.overloads = "hkVector4f *, const hkQTransformf *, const hkVector4f *"
        @classmethod
        def overload(cls, overload_args: overloads.hkVector4f.setTransformedInversePos.overloads):
            cls._overload = overload_args
            return cls
    class setTransformedPos(HookFactory):
        _name = "hkVector4f::setTransformedPos"
        _overload: overloads.hkVector4f.setTransformedPos.overloads = "hkVector4f *, const hkPreciseTransform *, const hkVector4f *"
        @classmethod
        def overload(cls, overload_args: overloads.hkVector4f.setTransformedPos.overloads):
            cls._overload = overload_args
            return cls

class hkSingletonUtil__init__anonymous_namespace___Registry_(HookFactory):
    _name = "hkSingletonUtil__init__anonymous_namespace___Registry_"

class hkArrayUtil:
    class reduce(HookFactory):
        _templates = ("T0", )
        _name = "hkArrayUtil::reduce<{T0}>"
    class checkReduce(HookFactory):
        _name = "hkArrayUtil::checkReduce"

class hkLog:
    class Detail:
        class AutoMessage:
            class AutoMessage(HookFactory):
                _name = "hkLog::Detail::AutoMessage::AutoMessage"
        class AutoScope:
            class AutoScope(HookFactory):
                _name = "hkLog::Detail::AutoScope::AutoScope"
            class show(HookFactory):
                _name = "hkLog::Detail::AutoScope::show"
        class DebugOutputMessage:
            class DebugOutputMessage(HookFactory):
                _name = "hkLog::Detail::DebugOutputMessage::DebugOutputMessage"
        class addModuleLocalList(HookFactory):
            _name = "hkLog::Detail::addModuleLocalList"
        class dispatch(HookFactory):
            _name = "hkLog::Detail::dispatch"
        class getGlobalInitNode(HookFactory):
            _name = "hkLog::Detail::getGlobalInitNode"
        class removeModuleLocalList(HookFactory):
            _name = "hkLog::Detail::removeModuleLocalList"
        class rerouteToDebugOutput(HookFactory):
            _name = "hkLog::Detail::rerouteToDebugOutput"
        class shouldRerouteToDebugOutput(HookFactory):
            _name = "hkLog::Detail::shouldRerouteToDebugOutput"
    class Output:
        class Output(HookFactory):
            _name = "hkLog::Output::Output"
    class RegisteredOrigin:
        class RegisteredOrigin(HookFactory):
            _name = "hkLog::RegisteredOrigin::RegisteredOrigin"
    class Message:
        class addFormatV(HookFactory):
            _name = "hkLog::Message::addFormatV"
        class setText(HookFactory):
            _name = "hkLog::Message::setText"
    class Origin:
        class beginOutput(HookFactory):
            _name = "hkLog::Origin::beginOutput"
        class connectOutput(HookFactory):
            _name = "hkLog::Origin::connectOutput"
        class disconnectAllOutputs(HookFactory):
            _name = "hkLog::Origin::disconnectAllOutputs"
        class endOutput(HookFactory):
            _name = "hkLog::Origin::endOutput"
    class flush(HookFactory):
        _name = "hkLog::flush"
    class formatLogMessage(HookFactory):
        _name = "hkLog::formatLogMessage"
        _overload: overloads.hkLog.formatLogMessage.overloads = "const hkLog::Message *, hkIo::WriteBuffer *, int, bool"
        @classmethod
        def overload(cls, overload_args: overloads.hkLog.formatLogMessage.overloads):
            cls._overload = overload_args
            return cls

class hkSignal1:
    class fire(HookFactory):
        _templates = ("T0", )
        _name = "hkSignal1<{T0}>::fire"

class hkIo:
    class WriteBuffer:
        class write8(HookFactory):
            _name = "hkIo::WriteBuffer::write8"
        class writeRaw(HookFactory):
            _name = "hkIo::WriteBuffer::writeRaw"
        class WriteBuffer(HookFactory):
            _name = "hkIo::WriteBuffer::WriteBuffer"
        class detach(HookFactory):
            _name = "hkIo::WriteBuffer::detach"
        class implExpandBy(HookFactory):
            _name = "hkIo::WriteBuffer::implExpandBy"
        class implWriteRaw(HookFactory):
            _name = "hkIo::WriteBuffer::implWriteRaw"
        class implWriteRawAt(HookFactory):
            _name = "hkIo::WriteBuffer::implWriteRawAt"
        class writeZero(HookFactory):
            _name = "hkIo::WriteBuffer::writeZero"
    class Detail:
        class ArrayWriteBufferImpl:
            class _attachTo(HookFactory):
                _name = "hkIo::Detail::ArrayWriteBufferImpl::_attachTo"
            class _detachFrom(HookFactory):
                _name = "hkIo::Detail::ArrayWriteBufferImpl::_detachFrom"
            class _expandBy(HookFactory):
                _name = "hkIo::Detail::ArrayWriteBufferImpl::_expandBy"
            class _writeRaw(HookFactory):
                _name = "hkIo::Detail::ArrayWriteBufferImpl::_writeRaw"
            class _writeRawAt(HookFactory):
                _name = "hkIo::Detail::ArrayWriteBufferImpl::_writeRawAt"
        class createWriterImpl(HookFactory):
            _name = "hkIo::Detail::createWriterImpl"
    class copyStream(HookFactory):
        _name = "hkIo::copyStream"
    class ReadBuffer:
        class ReadBuffer(HookFactory):
            _name = "hkIo::ReadBuffer::ReadBuffer"
        class attach(HookFactory):
            _name = "hkIo::ReadBuffer::attach"
            _overload: overloads.hkIo.ReadBuffer.attach.overloads = "hkIo::ReadBuffer *, const hkIo::Detail::ReadBufferAdapter *"
            @classmethod
            def overload(cls, overload_args: overloads.hkIo.ReadBuffer.attach.overloads):
                cls._overload = overload_args
                return cls
        class getReadLimit(HookFactory):
            _name = "hkIo::ReadBuffer::getReadLimit"
        class implPrefetch(HookFactory):
            _name = "hkIo::ReadBuffer::implPrefetch"
        class implRead(HookFactory):
            _name = "hkIo::ReadBuffer::implRead"
        class implSkip(HookFactory):
            _name = "hkIo::ReadBuffer::implSkip"
        class setReadLimit(HookFactory):
            _name = "hkIo::ReadBuffer::setReadLimit"

class hkSingletonUtil__initWith_hkError_hkDefaultError_(HookFactory):
    _name = "hkSingletonUtil__initWith_hkError_hkDefaultError_"

class hkDisableError:
    class hkDisableError(HookFactory):
        _name = "hkDisableError::hkDisableError"

class hkErrStream:
    class hkErrStream(HookFactory):
        _name = "hkErrStream::hkErrStream"

class hkError:
    class hkError(HookFactory):
        _name = "hkError::hkError"

class hkErrorMessage(HookFactory):
    _name = "hkErrorMessage"

class hkSingletonUtil__init_hkErrorRouter_(HookFactory):
    _name = "hkSingletonUtil__init_hkErrorRouter_"

class hkBufferedStreamWriter:
    class isBuffered(HookFactory):
        _name = "hkBufferedStreamWriter::isBuffered"
    class hkBufferedStreamWriter(HookFactory):
        _name = "hkBufferedStreamWriter::hkBufferedStreamWriter"
        _overload: overloads.hkBufferedStreamWriter.hkBufferedStreamWriter.overloads = "hkBufferedStreamWriter *, hkStreamWriter *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkBufferedStreamWriter.hkBufferedStreamWriter.overloads):
            cls._overload = overload_args
            return cls
    class flush(HookFactory):
        _name = "hkBufferedStreamWriter::flush"
    class flushBuffer(HookFactory):
        _name = "hkBufferedStreamWriter::flushBuffer"
    class isOk(HookFactory):
        _name = "hkBufferedStreamWriter::isOk"
    class seek(HookFactory):
        _name = "hkBufferedStreamWriter::seek"
    class seekTellSupported(HookFactory):
        _name = "hkBufferedStreamWriter::seekTellSupported"
    class tell(HookFactory):
        _name = "hkBufferedStreamWriter::tell"
    class write(HookFactory):
        _name = "hkBufferedStreamWriter::write"

class hkErrorRouter:
    class message(HookFactory):
        _name = "hkErrorRouter::message"

class hkMath:
    class getFlushDenormalsInitNode(HookFactory):
        _name = "hkMath::getFlushDenormalsInitNode"
    class setFlushDenormals(HookFactory):
        _name = "hkMath::setFlushDenormals"
    class Detail:
        class countBitsSetGeneric(HookFactory):
            _name = "hkMath::Detail::countBitsSetGeneric"
    class ceil(HookFactory):
        _name = "hkMath::ceil"
    class cubeRootApprox22Bit(HookFactory):
        _name = "hkMath::cubeRootApprox22Bit"
    class doubleToFloat(HookFactory):
        _name = "hkMath::doubleToFloat"
    class quadAsin(HookFactory):
        _name = "hkMath::quadAsin"
    class quadAtan2(HookFactory):
        _name = "hkMath::quadAtan2"
    class quadCos(HookFactory):
        _name = "hkMath::quadCos"
    class quadExp(HookFactory):
        _name = "hkMath::quadExp"
    class quadLog(HookFactory):
        _name = "hkMath::quadLog"
    class quadPow(HookFactory):
        _name = "hkMath::quadPow"
    class quadSin(HookFactory):
        _name = "hkMath::quadSin"
    class quadSinCos(HookFactory):
        _name = "hkMath::quadSinCos"
    class greatestCommonDivisor(HookFactory):
        _templates = ("T0", )
        _name = "hkMath::greatestCommonDivisor<{T0}>"

class hkSystemClock:
    class getTickCounter(HookFactory):
        _name = "hkSystemClock::getTickCounter"
    class getTicksPerSecond(HookFactory):
        _name = "hkSystemClock::getTicksPerSecond"

class hkFileSystem:
    class mkdirRecursive(HookFactory):
        _name = "hkFileSystem::mkdirRecursive"
    class Entry:
        class Entry(HookFactory):
            _name = "hkFileSystem::Entry::Entry"
    class Watcher:
        class Watcher(HookFactory):
            _name = "hkFileSystem::Watcher::Watcher"
        class combineMatchingChanges(HookFactory):
            _name = "hkFileSystem::Watcher::combineMatchingChanges"
    class _handleFlags(HookFactory):
        _name = "hkFileSystem::_handleFlags"
        _overload: overloads.hkFileSystem._handleFlags.overloads = "hkFileSystem *, hkStreamReader *, hkFileSystem::OpenFlags"
        @classmethod
        def overload(cls, overload_args: overloads.hkFileSystem._handleFlags.overloads):
            cls._overload = overload_args
            return cls
    class copy(HookFactory):
        _name = "hkFileSystem::copy"
    class remove(HookFactory):
        _name = "hkFileSystem::remove"
    class Iterator:
        class nameAcceptable(HookFactory):
            _name = "hkFileSystem::Iterator::nameAcceptable"
    class openReader(HookFactory):
        _name = "hkFileSystem::openReader"
    class openWriter(HookFactory):
        _name = "hkFileSystem::openWriter"

class hkSingletonUtil__initWith_hkFileSystem_hkWin32FileSystem_(HookFactory):
    _name = "hkSingletonUtil__initWith_hkFileSystem_hkWin32FileSystem_"

class hkSocketCreate(HookFactory):
    _name = "hkSocketCreate"

class hkSocket:
    class hkSocket(HookFactory):
        _name = "hkSocket::hkSocket"
    class getAddress(HookFactory):
        _name = "hkSocket::getAddress"
    class WriterAdapter:
        class isOk(HookFactory):
            _name = "hkSocket::WriterAdapter::isOk"
        class write(HookFactory):
            _name = "hkSocket::WriterAdapter::write"
    class ReaderAdapter:
        class read(HookFactory):
            _name = "hkSocket::ReaderAdapter::read"

class hkArrayBase__anonymous_namespace___IsaInfo____growCapacity_hkBuiltinContainerAllocatorBase_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___IsaInfo____growCapacity_hkBuiltinContainerAllocatorBase_"

class hkArrayBase_hkReflect__Detail___anonymous_namespace___Entry____growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase_hkReflect__Detail___anonymous_namespace___Entry____growCapacity_hkContainerAllocator_"

class hkSingletonUtil__init_hkReflect__Detail__BuiltinTypeReg_(HookFactory):
    _name = "hkSingletonUtil__init_hkReflect__Detail__BuiltinTypeReg_"

class s_updateAlignment(HookFactory):
    _name = "s_updateAlignment"

class hkStackTracer:
    class hkStackTracer(HookFactory):
        _name = "hkStackTracer::hkStackTracer"
    class dumpStackTrace(HookFactory):
        _name = "hkStackTracer::dumpStackTrace"
        _overload: overloads.hkStackTracer.dumpStackTrace.overloads = "hkStackTracer *, const unsigned __int64 *, int, __int64 *, void *"
        @classmethod
        def overload(cls, overload_args: overloads.hkStackTracer.dumpStackTrace.overloads):
            cls._overload = overload_args
            return cls
    class getStackTrace(HookFactory):
        _name = "hkStackTracer::getStackTrace"

class hkStackTracerImpl:
    class ensureInitialized(HookFactory):
        _name = "hkStackTracerImpl::ensureInitialized"

class hkMath__checkPopCntSupport(HookFactory):
    _name = "hkMath__checkPopCntSupport"

class hkMath___anonymous_namespace___countBitsSetPopCnt(HookFactory):
    _name = "hkMath___anonymous_namespace___countBitsSetPopCnt"

class hkAssert:
    class defaultAssertHandler(HookFactory):
        _name = "hkAssert::defaultAssertHandler"
    class defaultDisableAssert(HookFactory):
        _name = "hkAssert::defaultDisableAssert"
    class assertFailed(HookFactory):
        _name = "hkAssert::assertFailed"

class hkOstream:
    class hkOstream(HookFactory):
        _name = "hkOstream::hkOstream"
    class printf(HookFactory):
        _name = "hkOstream::printf"

class hkArrayBase__anonymous_namespace___Pair_hkReflect__PointerVar_hkReflect__PointerVar______growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___Pair_hkReflect__PointerVar_hkReflect__PointerVar______growCapacity_hkContainerAllocator_"

class hkArrayBase__anonymous_namespace___Pair_hkReflect__Var_hkReflect__Var______growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___Pair_hkReflect__Var_hkReflect__Var______growCapacity_hkContainerAllocator_"

class hkSingletonUtil__init__anonymous_namespace___AfterReflectNewLock_(HookFactory):
    _name = "hkSingletonUtil__init__anonymous_namespace___AfterReflectNewLock_"

class hkSerialize:
    class Detail:
        class FlatTypeRelocs:
            class FlatTypeRelocs(HookFactory):
                _name = "hkSerialize::Detail::FlatTypeRelocs::FlatTypeRelocs"
            class resolve(HookFactory):
                _name = "hkSerialize::Detail::FlatTypeRelocs::resolve"
        class TypeWriterMap:
            class enqueueForWrite(HookFactory):
                _name = "hkSerialize::Detail::TypeWriterMap::enqueueForWrite"
                _overload: overloads.hkSerialize.Detail.TypeWriterMap.enqueueForWrite.overloads = "hkSerialize::Detail::TypeWriterMap *, const hkReflect::Type *"
                @classmethod
                def overload(cls, overload_args: overloads.hkSerialize.Detail.TypeWriterMap.enqueueForWrite.overloads):
                    cls._overload = overload_args
                    return cls
            class isWritingQueueEmpty(HookFactory):
                _name = "hkSerialize::Detail::TypeWriterMap::isWritingQueueEmpty"
            class lookupType(HookFactory):
                _name = "hkSerialize::Detail::TypeWriterMap::lookupType"
            class nextToWrite(HookFactory):
                _name = "hkSerialize::Detail::TypeWriterMap::nextToWrite"
        class TagfileBundle:
            class getAddrAndType(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::getAddrAndType"
            class getContentsVar(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::getContentsVar"
            class getItems(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::getItems"
            class getNoteOnPointer(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::getNoteOnPointer"
            class getVar(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::getVar"
            class release(HookFactory):
                _name = "hkSerialize::Detail::TagfileBundle::release"
        class TagfileArrayImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::TagfileArrayImpl::getValue"
        class TagfilePointerImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::TagfilePointerImpl::getValue"
        class TagfileStringImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::TagfileStringImpl::getValue"
        class TypeRelocs:
            class addTemplateParam(HookFactory):
                _name = "hkSerialize::Detail::TypeRelocs::addTemplateParam"
        class IndexedBundle:
            class IndexedBundle(HookFactory):
                _name = "hkSerialize::Detail::IndexedBundle::IndexedBundle"
            class getContentsVar(HookFactory):
                _name = "hkSerialize::Detail::IndexedBundle::getContentsVar"
            class getItems(HookFactory):
                _name = "hkSerialize::Detail::IndexedBundle::getItems"
            class getNoteOnPointer(HookFactory):
                _name = "hkSerialize::Detail::IndexedBundle::getNoteOnPointer"
            class release(HookFactory):
                _name = "hkSerialize::Detail::IndexedBundle::release"
        class IndexedArrayImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::IndexedArrayImpl::getValue"
        class IndexedPointerImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::IndexedPointerImpl::getValue"
            class getValueAddress(HookFactory):
                _name = "hkSerialize::Detail::IndexedPointerImpl::getValueAddress"
            class getValueAs(HookFactory):
                _name = "hkSerialize::Detail::IndexedPointerImpl::getValueAs"
        class IndexedStringImpl:
            class getValue(HookFactory):
                _name = "hkSerialize::Detail::IndexedStringImpl::getValue"
    class Bundle:
        class Bundle(HookFactory):
            _name = "hkSerialize::Bundle::Bundle"
    class ReadFormat:
        class ReadFormat(HookFactory):
            _name = "hkSerialize::ReadFormat::ReadFormat"
    class TypeWriter:
        class TypeWriter(HookFactory):
            _name = "hkSerialize::TypeWriter::TypeWriter"
    class WriteFormat:
        class WriteFormat(HookFactory):
            _name = "hkSerialize::WriteFormat::WriteFormat"
        class useTypeCompendium(HookFactory):
            _name = "hkSerialize::WriteFormat::useTypeCompendium"
    class TagfileReadFormat:
        class Impl:
            class handleDataStream(HookFactory):
                _name = "hkSerialize::TagfileReadFormat::Impl::handleDataStream"
            class handleItemsStream(HookFactory):
                _name = "hkSerialize::TagfileReadFormat::Impl::handleItemsStream"
            class handleTypeBodyStream(HookFactory):
                _templates = ("T0", )
                _name = "hkSerialize::TagfileReadFormat::Impl::handleTypeBodyStream<{T0}>"
            class Impl(HookFactory):
                _name = "hkSerialize::TagfileReadFormat::Impl::Impl"
            class read(HookFactory):
                _name = "hkSerialize::TagfileReadFormat::Impl::read"
            class readType(HookFactory):
                _name = "hkSerialize::TagfileReadFormat::Impl::readType"
        class TagfileReadFormat(HookFactory):
            _name = "hkSerialize::TagfileReadFormat::TagfileReadFormat"
        class getCompendiumState(HookFactory):
            _name = "hkSerialize::TagfileReadFormat::getCompendiumState"
        class inplace(HookFactory):
            _name = "hkSerialize::TagfileReadFormat::inplace"
        class read(HookFactory):
            _name = "hkSerialize::TagfileReadFormat::read"
        class view(HookFactory):
            _name = "hkSerialize::TagfileReadFormat::view"
    class HffReaderBase:
        class enter(HookFactory):
            _templates = ("T0", )
            _name = "hkSerialize::HffReaderBase<{T0}>::enter"
    class TagfileWriteFormat:
        class Impl:
            class Impl(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::Impl"
            class Parts:
                class Index:
                    class Index(HookFactory):
                        _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Index::Index"
                    class addVarN(HookFactory):
                        _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Index::addVarN"
                class Type:
                    class Type(HookFactory):
                        _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Type::Type"
                    class addHash(HookFactory):
                        _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Type::addHash"
                    class calcCompendiumSignatureImpl(HookFactory):
                        _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Type::calcCompendiumSignatureImpl"
                    class InternTab:
                        class writeTo(HookFactory):
                            _name = "hkSerialize::TagfileWriteFormat::Impl::Parts::Type::InternTab::writeTo"
            class endBundle(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::endBundle"
            class TagfileTypeWriter:
                class lookupType(HookFactory):
                    _name = "hkSerialize::TagfileWriteFormat::Impl::TagfileTypeWriter::lookupType"
            class useTypeCompendium(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::useTypeCompendium"
            class writeInplacePatch(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::writeInplacePatch"
            class writeInternal(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::writeInternal"
            class writeObjectRef(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::writeObjectRef"
            class writeTypeSection(HookFactory):
                _name = "hkSerialize::TagfileWriteFormat::Impl::writeTypeSection"
        class TagfileWriteFormat(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::TagfileWriteFormat"
        class beginBundle(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::beginBundle"
        class enableMultiBundle(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::enableMultiBundle"
        class endBundle(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::endBundle"
        class getCompendiumSignature(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::getCompendiumSignature"
        class useTypeCompendium(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::useTypeCompendium"
        class write(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::write"
        class writeNote(HookFactory):
            _name = "hkSerialize::TagfileWriteFormat::writeNote"
    class XmlReadFormat:
        class XmlReadFormat(HookFactory):
            _name = "hkSerialize::XmlReadFormat::XmlReadFormat"
        class Impl:
            class advanceUntilEndBlock(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::advanceUntilEndBlock"
            class AllocationImpl:
                class allocate(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::AllocationImpl::allocate"
                class allocateForClone(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::AllocationImpl::allocateForClone"
                class deallocate(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::AllocationImpl::deallocate"
            class ArrayImpl:
                class getValue(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::ArrayImpl::getValue"
            class StringImpl:
                class getValue(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::StringImpl::getValue"
            class parseObject(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::parseObject"
            class parseType(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::parseType"
            class read(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::read"
            class recalcOutstandingTypes(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::recalcOutstandingTypes"
            class recursivelyLoad(HookFactory):
                _name = "hkSerialize::XmlReadFormat::Impl::recursivelyLoad"
            class BundleXml:
                class release(HookFactory):
                    _name = "hkSerialize::XmlReadFormat::Impl::BundleXml::release"
        class read(HookFactory):
            _name = "hkSerialize::XmlReadFormat::read"
        class view(HookFactory):
            _name = "hkSerialize::XmlReadFormat::view"
    class XmlWriteFormat:
        class XmlWriteFormat(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::XmlWriteFormat"
        class beginBundle(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::beginBundle"
        class endBundle(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::endBundle"
        class hasVariantArrays(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::hasVariantArrays"
        class XmlFormatter:
            class write(HookFactory):
                _name = "hkSerialize::XmlWriteFormat::XmlFormatter::write"
        class write(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::write"
        class TypeWriter:
            class writeAllOutstandingTypes(HookFactory):
                _name = "hkSerialize::XmlWriteFormat::TypeWriter::writeAllOutstandingTypes"
            class writeType(HookFactory):
                _name = "hkSerialize::XmlWriteFormat::TypeWriter::writeType"
            class writeTypeTag(HookFactory):
                _name = "hkSerialize::XmlWriteFormat::TypeWriter::writeTypeTag"
        class writeInternal(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::writeInternal"
        class writeNote(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::writeNote"
        class writeVariantArraySubtypes(HookFactory):
            _name = "hkSerialize::XmlWriteFormat::writeVariantArraySubtypes"
    class HffWriter:
        class closeScope(HookFactory):
            _name = "hkSerialize::HffWriter::closeScope"
        class openScope(HookFactory):
            _name = "hkSerialize::HffWriter::openScope"
        class writeLeaf(HookFactory):
            _name = "hkSerialize::HffWriter::writeLeaf"

class hkRelPtr_PointerImpl:
    class getValue(HookFactory):
        _name = "hkRelPtr_PointerImpl::getValue"
    class setValue(HookFactory):
        _name = "hkRelPtr_PointerImpl::setValue"
    class inplaceFixup(HookFactory):
        _name = "hkRelPtr_PointerImpl::inplaceFixup"

class hkRelArrayUtil:
    class hkRelArrayUtil(HookFactory):
        _name = "hkRelArrayUtil::hkRelArrayUtil"
    class allocate(HookFactory):
        _name = "hkRelArrayUtil::allocate"

class hkFloatParseUtil:
    class parseFloat(HookFactory):
        _name = "hkFloatParseUtil::parseFloat"

class s_typeFromValue(HookFactory):
    _name = "s_typeFromValue"

class hkVarArgs:
    class Detail:
        class pointersFromVaList(HookFactory):
            _name = "hkVarArgs::Detail::pointersFromVaList"

class hkAttributeParser:
    class hkAttributeParser(HookFactory):
        _name = "hkAttributeParser::hkAttributeParser"
    class advance(HookFactory):
        _name = "hkAttributeParser::advance"
    class currentAttrName(HookFactory):
        _name = "hkAttributeParser::currentAttrName"
        _overload: overloads.hkAttributeParser.currentAttrName.overloads = "hkAttributeParser *, hkStringBuf *, hkStringBuf *"
        @classmethod
        def overload(cls, overload_args: overloads.hkAttributeParser.currentAttrName.overloads):
            cls._overload = overload_args
            return cls
    class currentAttrValue(HookFactory):
        _name = "hkAttributeParser::currentAttrValue"

class hkAttrData:
    class getField(HookFactory):
        _name = "hkAttrData::getField"
    class WritableField:
        class setValue(HookFactory):
            _name = "hkAttrData::WritableField::setValue"
        class setValuesArray(HookFactory):
            _name = "hkAttrData::WritableField::setValuesArray"

class hkUtf8:
    class Utf8FromWide:
        class Utf8FromWide(HookFactory):
            _name = "hkUtf8::Utf8FromWide::Utf8FromWide"
            _overload: overloads.hkUtf8.Utf8FromWide.Utf8FromWide.overloads = "hkUtf8::Utf8FromWide *, const wchar_t *"
            @classmethod
            def overload(cls, overload_args: overloads.hkUtf8.Utf8FromWide.Utf8FromWide.overloads):
                cls._overload = overload_args
                return cls
    class WideFromUtf8:
        class WideFromUtf8(HookFactory):
            _name = "hkUtf8::WideFromUtf8::WideFromUtf8"
            _overload: overloads.hkUtf8.WideFromUtf8.WideFromUtf8.overloads = "hkUtf8::WideFromUtf8 *, const hkStringBuf *"
            @classmethod
            def overload(cls, overload_args: overloads.hkUtf8.WideFromUtf8.WideFromUtf8.overloads):
                cls._overload = overload_args
                return cls
    class utf8FromValidWide(HookFactory):
        _name = "hkUtf8::utf8FromValidWide"
    class wideFromValidUtf8(HookFactory):
        _name = "hkUtf8::wideFromValidUtf8"

class hkMT19937RandomGenerator:
    class hkMT19937RandomGenerator(HookFactory):
        _name = "hkMT19937RandomGenerator::hkMT19937RandomGenerator"
    class initialize(HookFactory):
        _name = "hkMT19937RandomGenerator::initialize"

class hkStopwatch:
    class getTickCounter(HookFactory):
        _name = "hkStopwatch::getTickCounter"

class hkMonitorStream:
    class addTag(HookFactory):
        _name = "hkMonitorStream::addTag"
    class addValue(HookFactory):
        _name = "hkMonitorStream::addValue"
    class init(HookFactory):
        _name = "hkMonitorStream::init"
    class monitorAddStruct(HookFactory):
        _name = "hkMonitorStream::monitorAddStruct"
    class monitorPopDir(HookFactory):
        _name = "hkMonitorStream::monitorPopDir"
    class monitorPushDir(HookFactory):
        _name = "hkMonitorStream::monitorPushDir"
    class multiTimerBegin(HookFactory):
        _name = "hkMonitorStream::multiTimerBegin"
    class multiTimerEnd(HookFactory):
        _name = "hkMonitorStream::multiTimerEnd"
    class reset(HookFactory):
        _name = "hkMonitorStream::reset"
    class TimerCommand:
        class setTime(HookFactory):
            _name = "hkMonitorStream::TimerCommand::setTime"
    class timerBegin(HookFactory):
        _name = "hkMonitorStream::timerBegin"
    class timerBeginList(HookFactory):
        _name = "hkMonitorStream::timerBeginList"
    class timerBeginObjectName(HookFactory):
        _name = "hkMonitorStream::timerBeginObjectName"
    class timerEnd(HookFactory):
        _name = "hkMonitorStream::timerEnd"
    class timerEndList(HookFactory):
        _name = "hkMonitorStream::timerEndList"
    class timerSplitList(HookFactory):
        _name = "hkMonitorStream::timerSplitList"

class hkColor:
    class rgbFromFloats(HookFactory):
        _name = "hkColor::rgbFromFloats"

class hkDetail:
    class Func:
        class FuncBase:
            class FuncBase(HookFactory):
                _name = "hkDetail::Func::FuncBase::FuncBase"
                _overload: overloads.hkDetail.Func.FuncBase.FuncBase.overloads = "hkDetail::Func::FuncBase *, hkDetail::Func::FuncBase *"
                @classmethod
                def overload(cls, overload_args: overloads.hkDetail.Func.FuncBase.FuncBase.overloads):
                    cls._overload = overload_args
                    return cls
        class removeReferenceFromExternalFunctionalObject(HookFactory):
            _name = "hkDetail::Func::removeReferenceFromExternalFunctionalObject"

class hknpCollideSyncTask:
    class getDebugAttributes(HookFactory):
        _name = "hknpCollideSyncTask::getDebugAttributes"
    class getName(HookFactory):
        _name = "hknpCollideSyncTask::getName"
    class process(HookFactory):
        _name = "hknpCollideSyncTask::process"

class CAkSrcMediaCodecVorbis:
    class ReleaseBuffer(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::ReleaseBuffer"
    class FindClosestFileOffset(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::FindClosestFileOffset"
    class GetBuffer(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::GetBuffer"
    class GetNextPacket(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::GetNextPacket"
    class Init(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::Init"
    class Seek(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::Seek"
    class StopLooping(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::StopLooping"
    class Term(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::Term"
    class VirtualOff(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::VirtualOn"
    class Warmup(HookFactory):
        _name = "CAkSrcMediaCodecVorbis::Warmup"

class hkSemaphore:
    class hkSemaphore(HookFactory):
        _name = "hkSemaphore::hkSemaphore"
    class release(HookFactory):
        _name = "hkSemaphore::release"

class TkThread:
    class WaitOnSemaphore(HookFactory):
        _name = "TkThread::WaitOnSemaphore"
    class ThreadCheckEnabled(HookFactory):
        _name = "TkThread::ThreadCheckEnabled"
    class ThreadCheckSet(HookFactory):
        _name = "TkThread::ThreadCheckSet"
    class CreateEventFlag(HookFactory):
        _name = "TkThread::CreateEventFlag"
    class CreateMutexA(HookFactory):
        _name = "TkThread::CreateMutexA"
    class CreateSemaphoreA(HookFactory):
        _name = "TkThread::CreateSemaphoreA"
    class CreateThread(HookFactory):
        _name = "TkThread::CreateThread"
    class DestroyMutex(HookFactory):
        _name = "TkThread::DestroyMutex"
    class LockCriticalSection(HookFactory):
        _name = "TkThread::LockCriticalSection"
    class LockMutex(HookFactory):
        _name = "TkThread::LockMutex"
    class MemoryReadWriteBarrier(HookFactory):
        _name = "TkThread::MemoryReadWriteBarrier"
    class NumLogicalCores(HookFactory):
        _name = "TkThread::NumLogicalCores"
    class NumPhysicalCores(HookFactory):
        _name = "TkThread::NumPhysicalCores"
    class PlatformInit(HookFactory):
        _name = "TkThread::PlatformInit"
    class SetCurrentThreadPriority(HookFactory):
        _name = "TkThread::SetCurrentThreadPriority"
    class SignalEventFlag(HookFactory):
        _name = "TkThread::SignalEventFlag"
    class SignalSemaphore(HookFactory):
        _name = "TkThread::SignalSemaphore"
    class ThreadStub(HookFactory):
        _name = "TkThread::ThreadStub"
    class TryLockMutex(HookFactory):
        _name = "TkThread::TryLockMutex"
    class UnlockMutex(HookFactory):
        _name = "TkThread::UnlockMutex"
    class WaitOnEventFlag(HookFactory):
        _name = "TkThread::WaitOnEventFlag"

class hkAsyncThreadPoolDetail:
    class ToBackgroundQueue:
        class pushAllSemaphoresToBackground(HookFactory):
            _name = "hkAsyncThreadPoolDetail::ToBackgroundQueue::pushAllSemaphoresToBackground"
        class pushToBackground(HookFactory):
            _name = "hkAsyncThreadPoolDetail::ToBackgroundQueue::pushToBackground"

class hkAsyncHeartbeat:
    class beat(HookFactory):
        _name = "hkAsyncHeartbeat::beat"

class hkDefaultError:
    class hkDefaultError(HookFactory):
        _name = "hkDefaultError::hkDefaultError"
        _overload: overloads.hkDefaultError.hkDefaultError.overloads = "hkDefaultError *, __int64 *, void *"
        @classmethod
        def overload(cls, overload_args: overloads.hkDefaultError.hkDefaultError.overloads):
            cls._overload = overload_args
            return cls
    class enableAll(HookFactory):
        _name = "hkDefaultError::enableAll"
    class formMessage(HookFactory):
        _name = "hkDefaultError::formMessage"
    class getMessageTypeString(HookFactory):
        _name = "hkDefaultError::getMessageTypeString"
    class getMinimumMessageLevel(HookFactory):
        _name = "hkDefaultError::getMinimumMessageLevel"
    class isEnabled(HookFactory):
        _name = "hkDefaultError::isEnabled"
    class message(HookFactory):
        _name = "hkDefaultError::message"
    class sectionBegin(HookFactory):
        _name = "hkDefaultError::sectionBegin"
    class sectionEnd(HookFactory):
        _name = "hkDefaultError::sectionEnd"
    class setEnabled(HookFactory):
        _name = "hkDefaultError::setEnabled"
    class setMinimumMessageLevel(HookFactory):
        _name = "hkDefaultError::setMinimumMessageLevel"
    class shouldReportStackTrace(HookFactory):
        _name = "hkDefaultError::shouldReportStackTrace"
    class showMessage(HookFactory):
        _name = "hkDefaultError::showMessage"

class hkFreeList:
    class hkFreeList(HookFactory):
        _name = "hkFreeList::hkFreeList"
        _overload: overloads.hkFreeList.hkFreeList.overloads = "hkFreeList *"
        @classmethod
        def overload(cls, overload_args: overloads.hkFreeList.hkFreeList.overloads):
            cls._overload = overload_args
            return cls
    class _calcBlockFree(HookFactory):
        _name = "hkFreeList::_calcBlockFree"
    class _compareElements(HookFactory):
        _name = "hkFreeList::_compareElements"
    class _freeBlocks(HookFactory):
        _name = "hkFreeList::_freeBlocks"
    class addSpace(HookFactory):
        _name = "hkFreeList::addSpace"
    class findGarbage(HookFactory):
        _name = "hkFreeList::findGarbage"
    class freeAllFreeBlocks(HookFactory):
        _name = "hkFreeList::freeAllFreeBlocks"
    class freeAllMemory(HookFactory):
        _name = "hkFreeList::freeAllMemory"
    class getMemoryStatistics(HookFactory):
        _name = "hkFreeList::getMemoryStatistics"
    class incrementalFindGarbage(HookFactory):
        _name = "hkFreeList::incrementalFindGarbage"
    class init(HookFactory):
        _name = "hkFreeList::init"

class hkWin32FileSystem:
    class WatcherImpl:
        class NotificationCompletion(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::NotificationCompletion"
        class addDirectoryProc(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::addDirectoryProc"
        class addDirectoryWatch(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::addDirectoryWatch"
        class addTrackedDirectory(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::addTrackedDirectory"
        class stopWatching(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::stopWatching"
        class terminateProc2(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::terminateProc2"
        class terminateProc(HookFactory):
            _name = "hkWin32FileSystem::WatcherImpl::terminateProc"
    class _openReader(HookFactory):
        _name = "hkWin32FileSystem::_openReader"
    class _openWriter(HookFactory):
        _name = "hkWin32FileSystem::_openWriter"
    class copy(HookFactory):
        _name = "hkWin32FileSystem::copy"
    class createIterator(HookFactory):
        _name = "hkWin32FileSystem::createIterator"
    class createWatcher(HookFactory):
        _name = "hkWin32FileSystem::createWatcher"
    class getOperatingSystemPath(HookFactory):
        _name = "hkWin32FileSystem::getOperatingSystemPath"
    class mkdir(HookFactory):
        _name = "hkWin32FileSystem::mkdir"
    class moveFile(HookFactory):
        _name = "hkWin32FileSystem::moveFile"
    class remove(HookFactory):
        _name = "hkWin32FileSystem::remove"
    class stat(HookFactory):
        _name = "hkWin32FileSystem::stat"

class Win32FileSystemWatcher:
    class getCompletedChanges(HookFactory):
        _name = "Win32FileSystemWatcher::getCompletedChanges"
    class stopWatching(HookFactory):
        _name = "Win32FileSystemWatcher::stopWatching"
    class updatePendingCompletionQueue(HookFactory):
        _name = "Win32FileSystemWatcher::updatePendingCompletionQueue"

class s_entryFromFindData(HookFactory):
    _name = "s_entryFromFindData"

class hkBufferedStreamReader:
    class hkBufferedStreamReader(HookFactory):
        _name = "hkBufferedStreamReader::hkBufferedStreamReader"
    class isOk(HookFactory):
        _name = "hkBufferedStreamReader::isOk"
    class isSeekTellSupported(HookFactory):
        _name = "hkBufferedStreamReader::isSeekTellSupported"
    class peek(HookFactory):
        _name = "hkBufferedStreamReader::peek"
    class read(HookFactory):
        _name = "hkBufferedStreamReader::read"
    class seek(HookFactory):
        _name = "hkBufferedStreamReader::seek"
    class skip(HookFactory):
        _name = "hkBufferedStreamReader::skip"
    class tell(HookFactory):
        _name = "hkBufferedStreamReader::tell"

class refillBuffer(HookFactory):
    _name = "refillBuffer"

class hkBsdSocket:
    class hkBsdSocket(HookFactory):
        _name = "hkBsdSocket::hkBsdSocket"
    class canRead(HookFactory):
        _name = "hkBsdSocket::canRead"
    class canWrite(HookFactory):
        _name = "hkBsdSocket::canWrite"
    class close(HookFactory):
        _name = "hkBsdSocket::close"
    class connect(HookFactory):
        _name = "hkBsdSocket::connect"
    class createDatagramSocket(HookFactory):
        _name = "hkBsdSocket::createDatagramSocket"
    class createSocket(HookFactory):
        _name = "hkBsdSocket::createSocket"
    class getAddress(HookFactory):
        _name = "hkBsdSocket::getAddress"
    class getInetAddr(HookFactory):
        _name = "hkBsdSocket::getInetAddr"
    class getLastError(HookFactory):
        _name = "hkBsdSocket::getLastError"
    class isOk(HookFactory):
        _name = "hkBsdSocket::isOk"
    class listen(HookFactory):
        _name = "hkBsdSocket::listen"
    class pollForNewClient(HookFactory):
        _name = "hkBsdSocket::pollForNewClient"
    class read(HookFactory):
        _name = "hkBsdSocket::read"
    class receiveFrom(HookFactory):
        _name = "hkBsdSocket::receiveFrom"
    class sendTo(HookFactory):
        _name = "hkBsdSocket::sendTo"
    class setBlocking(HookFactory):
        _name = "hkBsdSocket::setBlocking"
    class write(HookFactory):
        _name = "hkBsdSocket::write"

class hkBsdGetAddressString(HookFactory):
    _name = "hkBsdGetAddressString"

class hkBsdNetworkInit(HookFactory):
    _name = "hkBsdNetworkInit"

class hkSeekableStreamReader:
    class hkSeekableStreamReader(HookFactory):
        _name = "hkSeekableStreamReader::hkSeekableStreamReader"

class hkStreamReader:
    class hkStreamReader(HookFactory):
        _name = "hkStreamReader::hkStreamReader"
    class skip(HookFactory):
        _name = "hkStreamReader::skip"

class hkThreadLocalBlockStreamAllocator:
    class hkThreadLocalBlockStreamAllocator(HookFactory):
        _name = "hkThreadLocalBlockStreamAllocator::hkThreadLocalBlockStreamAllocator"
        _overload: overloads.hkThreadLocalBlockStreamAllocator.hkThreadLocalBlockStreamAllocator.overloads = "hkThreadLocalBlockStreamAllocator *, hkBlockStreamAllocator *"
        @classmethod
        def overload(cls, overload_args: overloads.hkThreadLocalBlockStreamAllocator.hkThreadLocalBlockStreamAllocator.overloads):
            cls._overload = overload_args
            return cls
    class blockAlloc(HookFactory):
        _name = "hkThreadLocalBlockStreamAllocator::blockAlloc"
    class blockFree(HookFactory):
        _name = "hkThreadLocalBlockStreamAllocator::blockFree"
    class blockFreeBatch(HookFactory):
        _name = "hkThreadLocalBlockStreamAllocator::blockFreeBatch"
    class clear(HookFactory):
        _name = "hkThreadLocalBlockStreamAllocator::clear"

class hkTaskQueue_BatchingTask:
    class process(HookFactory):
        _name = "hkTaskQueue_BatchingTask::process"

class hkAsyncThreadPoolSimpleSemaphore:
    class hkAsyncThreadPoolSimpleSemaphore(HookFactory):
        _name = "hkAsyncThreadPoolSimpleSemaphore::hkAsyncThreadPoolSimpleSemaphore"
    class acquire(HookFactory):
        _name = "hkAsyncThreadPoolSimpleSemaphore::acquire"
    class release(HookFactory):
        _name = "hkAsyncThreadPoolSimpleSemaphore::release"

class hkAsyncThreadPoolMutex:
    class enter(HookFactory):
        _name = "hkAsyncThreadPoolMutex::enter"
    class leave(HookFactory):
        _name = "hkAsyncThreadPoolMutex::leave"
    class AsyncWaiter:
        class release(HookFactory):
            _name = "hkAsyncThreadPoolMutex::AsyncWaiter::release"
    class OtherWaiter:
        class release(HookFactory):
            _name = "hkAsyncThreadPoolMutex::OtherWaiter::release"

class hkStdioStreamReader:
    class isOk(HookFactory):
        _name = "hkStdioStreamReader::isOk"
    class open(HookFactory):
        _name = "hkStdioStreamReader::open"
    class peek(HookFactory):
        _name = "hkStdioStreamReader::peek"
    class read(HookFactory):
        _name = "hkStdioStreamReader::read"
    class seek(HookFactory):
        _name = "hkStdioStreamReader::seek"
    class tell(HookFactory):
        _name = "hkStdioStreamReader::tell"

class hkWin32StreamWriter:
    class flush(HookFactory):
        _name = "hkWin32StreamWriter::flush"
    class isOk(HookFactory):
        _name = "hkWin32StreamWriter::isOk"
    class open(HookFactory):
        _name = "hkWin32StreamWriter::open"
    class seek(HookFactory):
        _name = "hkWin32StreamWriter::seek"
    class tell(HookFactory):
        _name = "hkWin32StreamWriter::tell"
    class write(HookFactory):
        _name = "hkWin32StreamWriter::write"

class hkTaskGraph:
    class hkTaskGraph(HookFactory):
        _name = "hkTaskGraph::hkTaskGraph"
    class addReferencedTask(HookFactory):
        _name = "hkTaskGraph::addReferencedTask"
    class addReferencedTaskWithMultiplicity(HookFactory):
        _name = "hkTaskGraph::addReferencedTaskWithMultiplicity"
    class addTask(HookFactory):
        _name = "hkTaskGraph::addTask"
    class addTaskWithMultiplicity(HookFactory):
        _name = "hkTaskGraph::addTaskWithMultiplicity"
    class append(HookFactory):
        _name = "hkTaskGraph::append"
    class clear(HookFactory):
        _name = "hkTaskGraph::clear"
    class freeTaskQueueHandles(HookFactory):
        _name = "hkTaskGraph::freeTaskQueueHandles"
    class reserve(HookFactory):
        _name = "hkTaskGraph::reserve"
    class submitToTaskQueue(HookFactory):
        _name = "hkTaskGraph::submitToTaskQueue"
    class submitToTaskQueueAndWait(HookFactory):
        _name = "hkTaskGraph::submitToTaskQueueAndWait"

class hkTaskGraphEx:
    class _ensureSingleLeafTask(HookFactory):
        _name = "hkTaskGraphEx::_ensureSingleLeafTask"

class hknpBinaryAction:
    class getExactType(HookFactory):
        _name = "hknpBinaryAction::getExactType"
    class getBodies(HookFactory):
        _name = "hknpBinaryAction::getBodies"

class hknpBridgeConstraintAtomBase:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpBridgeConstraintAtomBase::_Auto::afterReflectNew"
    class afterReflectNew(HookFactory):
        _name = "hknpBridgeConstraintAtomBase::afterReflectNew"
    class init(HookFactory):
        _name = "hknpBridgeConstraintAtomBase::init"

class hknpBridgeConstraintAtom:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpBridgeConstraintAtom::_Auto::afterReflectNew"
    class hknpBridgeConstraintAtom(HookFactory):
        _name = "hknpBridgeConstraintAtom::hknpBridgeConstraintAtom"
    class afterReflectNew(HookFactory):
        _name = "hknpBridgeConstraintAtom::afterReflectNew"
    class init(HookFactory):
        _name = "hknpBridgeConstraintAtom::init"

class hknpSpringAction:
    class getExactType(HookFactory):
        _name = "hknpSpringAction::getExactType"
    class applyAction(HookFactory):
        _name = "hknpSpringAction::applyAction"
    class onWorldShifted(HookFactory):
        _name = "hknpSpringAction::onWorldShifted"

class hknpVehicleDefaultSteering:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultSteering::getExactType"
    class hknpVehicleDefaultSteering(HookFactory):
        _name = "hknpVehicleDefaultSteering::hknpVehicleDefaultSteering"
    class calcMainSteeringAngle(HookFactory):
        _name = "hknpVehicleDefaultSteering::calcMainSteeringAngle"
    class calcSteering(HookFactory):
        _name = "hknpVehicleDefaultSteering::calcSteering"

class hknpCompoundShape:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpCompoundShape::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpCompoundShape::getExactType"
    class hknpCompoundShape(HookFactory):
        _name = "hknpCompoundShape::hknpCompoundShape"
        _overload: overloads.hknpCompoundShape.hknpCompoundShape.overloads = "hknpCompoundShape *, const hknpCompoundShapeCinfo *, const hknpCompoundShape::Layout *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompoundShape.hknpCompoundShape.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hknpCompoundShape::afterReflectNew"
    class buildMassPropertiesMasked(HookFactory):
        _name = "hknpCompoundShape::buildMassPropertiesMasked"
    class makeCompoundShape(HookFactory):
        _name = "hknpCompoundShape::makeCompoundShape"
    class buildBoundingVolume(HookFactory):
        _name = "hknpCompoundShape::buildBoundingVolume"
    class rebuild(HookFactory):
        _name = "hknpCompoundShape::rebuild"
    class updateCachedBounds(HookFactory):
        _name = "hknpCompoundShape::updateCachedBounds"
    class updateInstancesInBoundingVolume(HookFactory):
        _name = "hknpCompoundShape::updateInstancesInBoundingVolume"

class hknpShapeKeyMask:
    class getExactType(HookFactory):
        _name = "hknpShapeKeyMask::getExactType"
    class _getExactType(HookFactory):
        _name = "hknpShapeKeyMask::_getExactType"

class hknpVehicleWheelCollide:
    class getExactType(HookFactory):
        _name = "hknpVehicleWheelCollide::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpVehicleWheelCollide::_Auto::afterReflectNew"
    class WheelHitCollector:
        class WheelHitCollector(HookFactory):
            _name = "hknpVehicleWheelCollide::WheelHitCollector::WheelHitCollector"
        class addHit(HookFactory):
            _name = "hknpVehicleWheelCollide::WheelHitCollector::addHit"

class hknpPointToPathConstraintData:
    class getExactType(HookFactory):
        _name = "hknpPointToPathConstraintData::getExactType"
    class hknpPointToPathConstraintData(HookFactory):
        _name = "hknpPointToPathConstraintData::hknpPointToPathConstraintData"
    class makeCloneImpl(HookFactory):
        _name = "hknpPointToPathConstraintData::makeCloneImpl"
    class setPath(HookFactory):
        _name = "hknpPointToPathConstraintData::setPath"

class hknpMaterialLibrary:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpMaterialLibrary::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpMaterialLibrary::getExactType"
    class hknpMaterialLibrary(HookFactory):
        _name = "hknpMaterialLibrary::hknpMaterialLibrary"
    class addEntry(HookFactory):
        _name = "hknpMaterialLibrary::addEntry"
        _overload: overloads.hknpMaterialLibrary.addEntry.overloads = "hknpMaterialLibrary *, hknpMaterialId *, const hknpMaterialDescriptor *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpMaterialLibrary.addEntry.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hknpMaterialLibrary::afterReflectNew"
    class findEntryByName(HookFactory):
        _name = "hknpMaterialLibrary::findEntryByName"

class hknpVehicleSuspension:
    class getExactType(HookFactory):
        _name = "hknpVehicleSuspension::getExactType"

class hknpExternMeshShapeGeometry:
    class getQuadVertices(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getQuadVertices"
    class getQuadShapeTag(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getQuadShapeTag"
    class getNumPrimitives(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getNumPrimitives"
    class getPrimitiveFlags(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getPrimitiveFlags"
    class makeClone(HookFactory):
        _name = "hknpExternMeshShapeGeometry::makeClone"
    class generateGeometry(HookFactory):
        _name = "hknpExternMeshShapeGeometry::generateGeometry"
    class getPrimitiveShapeTag(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getPrimitiveShapeTag"
    class getPrimitiveVertices(HookFactory):
        _name = "hknpExternMeshShapeGeometry::getPrimitiveVertices"

class hknpFirstPersonGun:
    class getExactType(HookFactory):
        _name = "hknpFirstPersonGun::getExactType"
    class createClone(HookFactory):
        _name = "hknpFirstPersonGun::createClone"
    class syncCloneFrom(HookFactory):
        _name = "hknpFirstPersonGun::syncCloneFrom"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpFirstPersonGun::_Auto::afterReflectNew"
    class hknpFirstPersonGun(HookFactory):
        _name = "hknpFirstPersonGun::hknpFirstPersonGun"
        _overload: overloads.hknpFirstPersonGun.hknpFirstPersonGun.overloads = "hknpFirstPersonGun *, const hknpFirstPersonGun *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpFirstPersonGun.hknpFirstPersonGun.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hknpFirstPersonGun::afterReflectNew"
    class calcVelocityToTarget(HookFactory):
        _name = "hknpFirstPersonGun::calcVelocityToTarget"
    class getName(HookFactory):
        _name = "hknpFirstPersonGun::getName"
    class quitGun(HookFactory):
        _name = "hknpFirstPersonGun::quitGun"
    class sweepSphere(HookFactory):
        _name = "hknpFirstPersonGun::sweepSphere"

class hknpBodyIntegrator:
    class getExactType(HookFactory):
        _name = "hknpBodyIntegrator::getExactType"
    class hknpBodyIntegrator(HookFactory):
        _name = "hknpBodyIntegrator::hknpBodyIntegrator"
    class calcMotionWeldManifoldType(HookFactory):
        _name = "hknpBodyIntegrator::calcMotionWeldManifoldType"
    class motionRangeBreached(HookFactory):
        _name = "hknpBodyIntegrator::motionRangeBreached"
    class motionWeldToiPlaneBreached(HookFactory):
        _name = "hknpBodyIntegrator::motionWeldToiPlaneBreached"
    class processMotionRangeBreach(HookFactory):
        _name = "hknpBodyIntegrator::processMotionRangeBreach"

class hknpConvexShape:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpConvexShape::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpConvexShape::getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpConvexShape::afterReflectNew"
    class buildConnectivity(HookFactory):
        _name = "hknpConvexShape::buildConnectivity"
    class calcAabbNoRadius(HookFactory):
        _name = "hknpConvexShape::calcAabbNoRadius"
        _overload: overloads.hknpConvexShape.calcAabbNoRadius.overloads = "hknpConvexShape *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpConvexShape.calcAabbNoRadius.overloads):
            cls._overload = overload_args
            return cls
    class combineMaximumAllowedPenetration(HookFactory):
        _name = "hknpConvexShape::combineMaximumAllowedPenetration"
    class createHullFromVertices(HookFactory):
        _name = "hknpConvexShape::createHullFromVertices"
    class makeCloneImpl(HookFactory):
        _name = "hknpConvexShape::makeCloneImpl"
    class makeFromAabb(HookFactory):
        _name = "hknpConvexShape::makeFromAabb"
    class makeFromVertices(HookFactory):
        _name = "hknpConvexShape::makeFromVertices"
    class setMaximumPenetration(HookFactory):
        _name = "hknpConvexShape::setMaximumPenetration"

class hknpPointToPlaneConstraintData:
    class getExactType(HookFactory):
        _name = "hknpPointToPlaneConstraintData::getExactType"
    class hknpPointToPlaneConstraintData(HookFactory):
        _name = "hknpPointToPlaneConstraintData::hknpPointToPlaneConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpPointToPlaneConstraintData::setInBodySpace"

class hknp6DofConstraintData:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknp6DofConstraintData::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknp6DofConstraintData::getExactType"
    class Blueprints:
        class Blueprints(HookFactory):
            _name = "hknp6DofConstraintData::Blueprints::Blueprints"
    class hknp6DofConstraintData(HookFactory):
        _name = "hknp6DofConstraintData::hknp6DofConstraintData"
        _overload: overloads.hknp6DofConstraintData.hknp6DofConstraintData.overloads = "hknp6DofConstraintData *, const hknp6DofConstraintData *"
        @classmethod
        def overload(cls, overload_args: overloads.hknp6DofConstraintData.hknp6DofConstraintData.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hknp6DofConstraintData::afterReflectNew"
    class setInBodySpace(HookFactory):
        _name = "hknp6DofConstraintData::setInBodySpace"

class hknpCompressedMeshShape:
    class getExactType(HookFactory):
        _name = "hknpCompressedMeshShape::getExactType"
    class hknpCompressedMeshShape(HookFactory):
        _name = "hknpCompressedMeshShape::hknpCompressedMeshShape"
        _overload: overloads.hknpCompressedMeshShape.hknpCompressedMeshShape.overloads = "hknpCompressedMeshShape *, const hknpCompressedMeshShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompressedMeshShape.hknpCompressedMeshShape.overloads):
            cls._overload = overload_args
            return cls
    class buildConnectivity(HookFactory):
        _name = "hknpCompressedMeshShape::buildConnectivity"
    class buildInternalData(HookFactory):
        _name = "hknpCompressedMeshShape::buildInternalData"
    class countPrimitives(HookFactory):
        _name = "hknpCompressedMeshShape::countPrimitives"
    class flagInteriorTriangles(HookFactory):
        _name = "hknpCompressedMeshShape::flagInteriorTriangles"
    class getAabb(HookFactory):
        _name = "hknpCompressedMeshShape::getAabb"
    class optimizeForSpeed(HookFactory):
        _name = "hknpCompressedMeshShape::optimizeForSpeed"

class hknpPrismaticConstraintData:
    class getExactType(HookFactory):
        _name = "hknpPrismaticConstraintData::getExactType"
    class hknpPrismaticConstraintData(HookFactory):
        _name = "hknpPrismaticConstraintData::hknpPrismaticConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpPrismaticConstraintData::setInBodySpace"

class hknpVehicleInstance:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpVehicleInstance::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpVehicleInstance::getExactType"
    class hknpVehicleInstance(HookFactory):
        _name = "hknpVehicleInstance::hknpVehicleInstance"
    class afterReflectNew(HookFactory):
        _name = "hknpVehicleInstance::afterReflectNew"
    class applyAction(HookFactory):
        _name = "hknpVehicleInstance::applyAction"
    class applyAerodynamicDrag(HookFactory):
        _name = "hknpVehicleInstance::applyAerodynamicDrag"
    class applyDampingToAxleAccumulators(HookFactory):
        _name = "hknpVehicleInstance::applyDampingToAxleAccumulators"
    class applyResultsToWheelInfo(HookFactory):
        _name = "hknpVehicleInstance::applyResultsToWheelInfo"
    class applySuspensionForces(HookFactory):
        _name = "hknpVehicleInstance::applySuspensionForces"
    class buildAccumulator(HookFactory):
        _name = "hknpVehicleInstance::buildAccumulator"
    class calcCurrentPositionAndRotation(HookFactory):
        _name = "hknpVehicleInstance::calcCurrentPositionAndRotation"
    class calcGroundBodyVelocities(HookFactory):
        _name = "hknpVehicleInstance::calcGroundBodyVelocities"
    class calcKMPH(HookFactory):
        _name = "hknpVehicleInstance::calcKMPH"
    class calcMPH(HookFactory):
        _name = "hknpVehicleInstance::calcMPH"
    class calcRPM(HookFactory):
        _name = "hknpVehicleInstance::calcRPM"
    class getAxleParamsFromWheel(HookFactory):
        _name = "hknpVehicleInstance::getAxleParamsFromWheel"
    class init(HookFactory):
        _name = "hknpVehicleInstance::init"
    class onActionAdded(HookFactory):
        _name = "hknpVehicleInstance::onActionAdded"
    class onActionRemoved(HookFactory):
        _name = "hknpVehicleInstance::onActionRemoved"
    class prepareAxleParams(HookFactory):
        _name = "hknpVehicleInstance::prepareAxleParams"
    class simulateVehicle(HookFactory):
        _name = "hknpVehicleInstance::simulateVehicle"
    class stepVehicleUsingWheelCollideOutput(HookFactory):
        _name = "hknpVehicleInstance::stepVehicleUsingWheelCollideOutput"
    class updateBeforeCollisionDetection(HookFactory):
        _name = "hknpVehicleInstance::updateBeforeCollisionDetection"
    class updateComponents(HookFactory):
        _name = "hknpVehicleInstance::updateComponents"
    class updateWheels(HookFactory):
        _name = "hknpVehicleInstance::updateWheels"

class hknpVehicleDefaultSuspension:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultSuspension::getExactType"
    class calcSuspension(HookFactory):
        _name = "hknpVehicleDefaultSuspension::calcSuspension"

class hknpDefaultExternMeshShapeGeometry:
    class getExactType(HookFactory):
        _name = "hknpDefaultExternMeshShapeGeometry::getExactType"
    class getNumTriangles(HookFactory):
        _name = "hknpDefaultExternMeshShapeGeometry::getNumTriangles"
    class getTriangleShapeTag(HookFactory):
        _name = "hknpDefaultExternMeshShapeGeometry::getTriangleShapeTag"
    class getTriangleVertices(HookFactory):
        _name = "hknpDefaultExternMeshShapeGeometry::getTriangleVertices"
    class makeClone(HookFactory):
        _name = "hknpDefaultExternMeshShapeGeometry::makeClone"

class hknpPulleyConstraintData:
    class getExactType(HookFactory):
        _name = "hknpPulleyConstraintData::getExactType"
    class hknpPulleyConstraintData(HookFactory):
        _name = "hknpPulleyConstraintData::hknpPulleyConstraintData"

class hknpExtendedExternMeshShapeGeometry:
    class getExactType(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getExactType"
    class getTriangleFlags(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getTriangleFlags"
    class getQuadFlags(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getQuadFlags"
    class getNumQuads(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getNumQuads"
    class getQuadShapeTag(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getQuadShapeTag"
    class getQuadVertices(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getQuadVertices"
    class getTriangleShapeTag(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getTriangleShapeTag"
    class getTriangleVertices(HookFactory):
        _name = "hknpExtendedExternMeshShapeGeometry::getTriangleVertices"

class hknpBallGun:
    class getExactType(HookFactory):
        _name = "hknpBallGun::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpBallGun::_Auto::afterReflectNew"
    class afterReflectNew(HookFactory):
        _name = "hknpBallGun::afterReflectNew"
    class fireGun(HookFactory):
        _name = "hknpBallGun::fireGun"
    class reset(HookFactory):
        _name = "hknpBallGun::reset"

class hknpRackAndPinionConstraintData:
    class getExactType(HookFactory):
        _name = "hknpRackAndPinionConstraintData::getExactType"
    class hknpRackAndPinionConstraintData(HookFactory):
        _name = "hknpRackAndPinionConstraintData::hknpRackAndPinionConstraintData"

class hknpGravityGun:
    class getExactType(HookFactory):
        _name = "hknpGravityGun::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpGravityGun::_Auto::afterReflectNew"
    class hknpGravityGun(HookFactory):
        _name = "hknpGravityGun::hknpGravityGun"
        _overload: overloads.hknpGravityGun.hknpGravityGun.overloads = "hknpGravityGun *, const hknpGravityGun *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpGravityGun.hknpGravityGun.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hknpGravityGun::afterReflectNew"
    class createClone(HookFactory):
        _name = "hknpGravityGun::createClone"
    class dropObject(HookFactory):
        _name = "hknpGravityGun::dropObject"
    class gravityGunPull(HookFactory):
        _name = "hknpGravityGun::gravityGunPull"
    class gravityGunPush(HookFactory):
        _name = "hknpGravityGun::gravityGunPush"
    class pickBody(HookFactory):
        _name = "hknpGravityGun::pickBody"
    class reset(HookFactory):
        _name = "hknpGravityGun::reset"
    class syncCloneFrom(HookFactory):
        _name = "hknpGravityGun::syncCloneFrom"

class hknpVehicleDefaultTransmission:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultTransmission::getExactType"
    class hknpVehicleDefaultTransmission(HookFactory):
        _name = "hknpVehicleDefaultTransmission::hknpVehicleDefaultTransmission"
    class calcIsReversing(HookFactory):
        _name = "hknpVehicleDefaultTransmission::calcIsReversing"
    class calcMainTransmittedTorque(HookFactory):
        _name = "hknpVehicleDefaultTransmission::calcMainTransmittedTorque"
    class calcTransmission(HookFactory):
        _name = "hknpVehicleDefaultTransmission::calcTransmission"
    class calcTransmissionRPM(HookFactory):
        _name = "hknpVehicleDefaultTransmission::calcTransmissionRPM"
    class getCurrentRatio(HookFactory):
        _name = "hknpVehicleDefaultTransmission::getCurrentRatio"
    class updateCurrentGear(HookFactory):
        _name = "hknpVehicleDefaultTransmission::updateCurrentGear"

class hknpTyremarksWheel:
    class getExactType(HookFactory):
        _name = "hknpTyremarksWheel::getExactType"
    class hknpTyremarksWheel(HookFactory):
        _name = "hknpTyremarksWheel::hknpTyremarksWheel"

class hknpRagdollConstraintData:
    class getExactType(HookFactory):
        _name = "hknpRagdollConstraintData::getExactType"
    class hknpRagdollConstraintData(HookFactory):
        _name = "hknpRagdollConstraintData::hknpRagdollConstraintData"
    class getConstraintFrameA(HookFactory):
        _name = "hknpRagdollConstraintData::getConstraintFrameA"
    class getConstraintFrameB(HookFactory):
        _name = "hknpRagdollConstraintData::getConstraintFrameB"
    class getPlaneMotor(HookFactory):
        _name = "hknpRagdollConstraintData::getPlaneMotor"
    class setConeMotor(HookFactory):
        _name = "hknpRagdollConstraintData::setConeMotor"
    class setInBodySpace(HookFactory):
        _name = "hknpRagdollConstraintData::setInBodySpace"
    class setInWorldSpace(HookFactory):
        _name = "hknpRagdollConstraintData::setInWorldSpace"
    class setMaxFrictionTorque(HookFactory):
        _name = "hknpRagdollConstraintData::setMaxFrictionTorque"
    class setMotor(HookFactory):
        _name = "hknpRagdollConstraintData::setMotor"
    class setPlaneMotor(HookFactory):
        _name = "hknpRagdollConstraintData::setPlaneMotor"
    class setTwistMotor(HookFactory):
        _name = "hknpRagdollConstraintData::setTwistMotor"

class hknpProjectileGun:
    class getExactType(HookFactory):
        _name = "hknpProjectileGun::getExactType"
    class clearProjectiles(HookFactory):
        _name = "hknpProjectileGun::clearProjectiles"
    class destroyAgedProjectiles(HookFactory):
        _name = "hknpProjectileGun::destroyAgedProjectiles"
    class fireGun(HookFactory):
        _name = "hknpProjectileGun::fireGun"
    class reset(HookFactory):
        _name = "hknpProjectileGun::reset"

class hknpRotationalConstraintData:
    class getExactType(HookFactory):
        _name = "hknpRotationalConstraintData::getExactType"
    class hknpRotationalConstraintData(HookFactory):
        _name = "hknpRotationalConstraintData::hknpRotationalConstraintData"

class hknpWorldSnapshot:
    class getExactType(HookFactory):
        _name = "hknpWorldSnapshot::getExactType"
    class hknpWorldSnapshot(HookFactory):
        _name = "hknpWorldSnapshot::hknpWorldSnapshot"

class hknpCompoundShapeData:
    class getExactType(HookFactory):
        _name = "hknpCompoundShapeData::getExactType"
    class hknpCompoundShapeData(HookFactory):
        _name = "hknpCompoundShapeData::hknpCompoundShapeData"
        _overload: overloads.hknpCompoundShapeData.hknpCompoundShapeData.overloads = "hknpCompoundShapeData *, const hknpCompoundShapeData *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompoundShapeData.hknpCompoundShapeData.overloads):
            cls._overload = overload_args
            return cls

class hknpTyremarksInfo:
    class getExactType(HookFactory):
        _name = "hknpTyremarksInfo::getExactType"
    class getWheelTyremarksStrips(HookFactory):
        _name = "hknpTyremarksInfo::getWheelTyremarksStrips"
    class updateTyremarksInfo(HookFactory):
        _name = "hknpTyremarksInfo::updateTyremarksInfo"

class hknpLodShape:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpLodShape::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpLodShape::getExactType"
    class hknpLodShape(HookFactory):
        _name = "hknpLodShape::hknpLodShape"
    class afterReflectNew(HookFactory):
        _name = "hknpLodShape::afterReflectNew"

class hknpStiffSpringConstraintData:
    class getExactType(HookFactory):
        _name = "hknpStiffSpringConstraintData::getExactType"
    class hknpStiffSpringConstraintData(HookFactory):
        _name = "hknpStiffSpringConstraintData::hknpStiffSpringConstraintData"

class hknpExternMeshShapeData:
    class getExactType(HookFactory):
        _name = "hknpExternMeshShapeData::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpExternMeshShapeData::_Auto::afterReflectNew"
    class hknpExternMeshShapeData(HookFactory):
        _name = "hknpExternMeshShapeData::hknpExternMeshShapeData"
    class afterReflectNew(HookFactory):
        _name = "hknpExternMeshShapeData::afterReflectNew"
    class getMemoryFootprint(HookFactory):
        _name = "hknpExternMeshShapeData::getMemoryFootprint"

class hknpFirstPersonCharacter:
    class getExactType(HookFactory):
        _name = "hknpFirstPersonCharacter::getExactType"

class hknpWheelFrictionConstraintData:
    class getExactType(HookFactory):
        _name = "hknpWheelFrictionConstraintData::getExactType"
    class hknpWheelFrictionConstraintData(HookFactory):
        _name = "hknpWheelFrictionConstraintData::hknpWheelFrictionConstraintData"

class hknpVehicleDefaultVelocityDamper:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultVelocityDamper::getExactType"
    class hknpVehicleDefaultVelocityDamper(HookFactory):
        _name = "hknpVehicleDefaultVelocityDamper::hknpVehicleDefaultVelocityDamper"

class hknpCharacterProxyCinfo:
    class getExactType(HookFactory):
        _name = "hknpCharacterProxyCinfo::getExactType"

class hknpWheelConstraintData:
    class getExactType(HookFactory):
        _name = "hknpWheelConstraintData::getExactType"
    class hknpWheelConstraintData(HookFactory):
        _name = "hknpWheelConstraintData::hknpWheelConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpWheelConstraintData::setInBodySpace"

class hknpVehicleLinearCastWheelCollide:
    class getExactType(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpVehicleLinearCastWheelCollide::_Auto::afterReflectNew"
    class hknpVehicleLinearCastWheelCollide(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::hknpVehicleLinearCastWheelCollide"
    class castSingleWheel(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::castSingleWheel"
    class collideWheels(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::collideWheels"
    class getCollisionOutputFromCastResult(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::getCollisionOutputFromCastResult"
    class getCollisionOutputWithoutHit(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::getCollisionOutputWithoutHit"
    class init(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::init"
    class makeWheelShape(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::makeWheelShape"
    class setCollisionFilterInfo(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::setCollisionFilterInfo"
    class updateBeforeCollisionDetection(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::updateBeforeCollisionDetection"
    class updateWheelState(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::updateWheelState"
    class wheelCollideCallback(HookFactory):
        _name = "hknpVehicleLinearCastWheelCollide::wheelCollideCallback"

class hknpPhysicsSystemData:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpPhysicsSystemData::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpPhysicsSystemData::getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpPhysicsSystemData::afterReflectNew"

class hknpConstraintData:
    class getExactType(HookFactory):
        _name = "hknpConstraintData::getExactType"
    class _getExactType(HookFactory):
        _name = "hknpConstraintData::_getExactType"
    class enableDirectSolverImpl(HookFactory):
        _name = "hknpConstraintData::enableDirectSolverImpl"
    class getConstraintInfoUtil(HookFactory):
        _name = "hknpConstraintData::getConstraintInfoUtil"

class hknpWrappedConstraintData:
    class getExactType(HookFactory):
        _name = "hknpWrappedConstraintData::getExactType"
    class hknpWrappedConstraintData(HookFactory):
        _name = "hknpWrappedConstraintData::hknpWrappedConstraintData"
    class getWrappedConstraintData(HookFactory):
        _name = "hknpWrappedConstraintData::getWrappedConstraintData"

class hknpCharacterProxy:
    class getExactType(HookFactory):
        _name = "hknpCharacterProxy::getExactType"
    class hknpCharacterProxy(HookFactory):
        _name = "hknpCharacterProxy::hknpCharacterProxy"
        _overload: overloads.hknpCharacterProxy.hknpCharacterProxy.overloads = "hknpCharacterProxy *, const hknpCharacterProxy *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCharacterProxy.hknpCharacterProxy.overloads):
            cls._overload = overload_args
            return cls
    class checkSupportWithCollector(HookFactory):
        _name = "hknpCharacterProxy::checkSupportWithCollector"
    class integrateWithCollectors(HookFactory):
        _name = "hknpCharacterProxy::integrateWithCollectors"
    class shift(HookFactory):
        _name = "hknpCharacterProxy::shift"
    class refreshManifold(HookFactory):
        _name = "hknpCharacterProxy::refreshManifold"
    class onPostSolveSignal(HookFactory):
        _name = "hknpCharacterProxy::onPostSolveSignal"

class hknpConnectivityGraph:
    class getExactType(HookFactory):
        _name = "hknpConnectivityGraph::getExactType"
    class CompressedIntArray:
        class CompressedIntArray(HookFactory):
            _name = "hknpConnectivityGraph::CompressedIntArray::CompressedIntArray"
    class hknpConnectivityGraph(HookFactory):
        _name = "hknpConnectivityGraph::hknpConnectivityGraph"

class hknpConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpConstraintMotor::getExactType"
    class makeClone(HookFactory):
        _name = "hknpConstraintMotor::makeClone"

class hknpVehicleData:
    class getExactType(HookFactory):
        _name = "hknpVehicleData::getExactType"
    class hknpVehicleData(HookFactory):
        _name = "hknpVehicleData::hknpVehicleData"
    class init(HookFactory):
        _name = "hknpVehicleData::init"

class hknpLimitedForceConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpLimitedForceConstraintMotor::getExactType"

class hknpCallbackConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpCallbackConstraintMotor::getExactType"
    class makeClone(HookFactory):
        _name = "hknpCallbackConstraintMotor::makeClone"

class hknpWheelFrictionConstraintAtom:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpWheelFrictionConstraintAtom::_Auto::afterReflectNew"

class hknpVehicleRayCastWheelCollide:
    class getExactType(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpVehicleRayCastWheelCollide::_Auto::afterReflectNew"
    class hknpVehicleRayCastWheelCollide(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::hknpVehicleRayCastWheelCollide"
    class calcWheelsAABB(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::calcWheelsAABB"
    class collideWheels(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::collideWheels"
    class getCollisionOutputFromCastResult(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::getCollisionOutputFromCastResult"
    class setCollisionFilterInfo(HookFactory):
        _name = "hknpVehicleRayCastWheelCollide::setCollisionFilterInfo"

class hknpCharacterRigidBodyCinfo:
    class getExactType(HookFactory):
        _name = "hknpCharacterRigidBodyCinfo::getExactType"
    class hknpCharacterRigidBodyCinfo(HookFactory):
        _name = "hknpCharacterRigidBodyCinfo::hknpCharacterRigidBodyCinfo"

class hknpShapeProperty:
    class getExactType(HookFactory):
        _templates = ("T0", )
        _name = "hknpShapeProperty<{T0}>::getExactType"

class hknpMaterialPalette:
    class getExactType(HookFactory):
        _name = "hknpMaterialPalette::getExactType"

class hknpBodyQuality:
    class getExactType(HookFactory):
        _name = "hknpBodyQuality::getExactType"

class hknpVehicleDefaultAerodynamics:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultAerodynamics::getExactType"
    class hknpVehicleDefaultAerodynamics(HookFactory):
        _name = "hknpVehicleDefaultAerodynamics::hknpVehicleDefaultAerodynamics"
    class calcAerodynamicDrag(HookFactory):
        _name = "hknpVehicleDefaultAerodynamics::calcAerodynamicDrag"
    class calcAerodynamicLift(HookFactory):
        _name = "hknpVehicleDefaultAerodynamics::calcAerodynamicLift"
    class calcAerodynamics(HookFactory):
        _name = "hknpVehicleDefaultAerodynamics::calcAerodynamics"

class hknpCircularSurfaceVelocity:
    class getExactType(HookFactory):
        _name = "hknpCircularSurfaceVelocity::getExactType"
    class hknpCircularSurfaceVelocity(HookFactory):
        _name = "hknpCircularSurfaceVelocity::hknpCircularSurfaceVelocity"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpCircularSurfaceVelocity::calcSurfaceVelocity"

class hknpLinearSurfaceVelocity:
    class getExactType(HookFactory):
        _name = "hknpLinearSurfaceVelocity::getExactType"
    class hknpLinearSurfaceVelocity(HookFactory):
        _name = "hknpLinearSurfaceVelocity::hknpLinearSurfaceVelocity"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpLinearSurfaceVelocity::calcSurfaceVelocity"

class hknpDisableCollisionFilter:
    class getExactType(HookFactory):
        _name = "hknpDisableCollisionFilter::getExactType"
    class hknpDisableCollisionFilter(HookFactory):
        _name = "hknpDisableCollisionFilter::hknpDisableCollisionFilter"
    class makeClone(HookFactory):
        _name = "hknpDisableCollisionFilter::makeClone"

class hknpAngularFrictionConstraintData:
    class getExactType(HookFactory):
        _name = "hknpAngularFrictionConstraintData::getExactType"
    class hknpAngularFrictionConstraintData(HookFactory):
        _name = "hknpAngularFrictionConstraintData::hknpAngularFrictionConstraintData"

class hknpScaledConvexShape:
    class getExactType(HookFactory):
        _name = "hknpScaledConvexShape::getExactType"
    class makeCloneImpl(HookFactory):
        _name = "hknpScaledConvexShape::makeCloneImpl"

class hknpExternMeshShape:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpExternMeshShape::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpExternMeshShape::getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpExternMeshShape::afterReflectNew"
    class getAabb(HookFactory):
        _name = "hknpExternMeshShape::getAabb"
    class init(HookFactory):
        _name = "hknpExternMeshShape::init"
    class buildBoundingVolume(HookFactory):
        _name = "hknpExternMeshShape::buildBoundingVolume"

class hknpShapePropertyBase:
    class getExactType(HookFactory):
        _name = "hknpShapePropertyBase::getExactType"
    class _getExactType(HookFactory):
        _name = "hknpShapePropertyBase::_getExactType"

class hknpBallAndSocketConstraintData:
    class getExactType(HookFactory):
        _name = "hknpBallAndSocketConstraintData::getExactType"
    class hknpBallAndSocketConstraintData(HookFactory):
        _name = "hknpBallAndSocketConstraintData::hknpBallAndSocketConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpBallAndSocketConstraintData::setInBodySpace"

class hknpCollisionFilter:
    class getExactType(HookFactory):
        _name = "hknpCollisionFilter::getExactType"
    class getLodInfo(HookFactory):
        _name = "hknpCollisionFilter::getLodInfo"
    class copyFrom(HookFactory):
        _name = "hknpCollisionFilter::copyFrom"
    class makeClone(HookFactory):
        _name = "hknpCollisionFilter::makeClone"
    class removeDisabledConstraintPairsFromStream(HookFactory):
        _name = "hknpCollisionFilter::removeDisabledConstraintPairsFromStream"

class hknpTransformedShape:
    class getExactType(HookFactory):
        _name = "hknpTransformedShape::getExactType"
    class makeCloneImpl(HookFactory):
        _name = "hknpTransformedShape::makeCloneImpl"

class hknpVehicleDefaultBrake:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultBrake::getExactType"
    class hknpVehicleDefaultBrake(HookFactory):
        _name = "hknpVehicleDefaultBrake::hknpVehicleDefaultBrake"
    class calcBreakingInfo(HookFactory):
        _name = "hknpVehicleDefaultBrake::calcBreakingInfo"

class hknpLinearClearanceConstraintData:
    class getExactType(HookFactory):
        _name = "hknpLinearClearanceConstraintData::getExactType"
    class hknpLinearClearanceConstraintData(HookFactory):
        _name = "hknpLinearClearanceConstraintData::hknpLinearClearanceConstraintData"

class hknpTriangleShape:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpTriangleShape::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpTriangleShape::getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpTriangleShape::afterReflectNew"
    class makeEmptyTriangleShape(HookFactory):
        _name = "hknpTriangleShape::makeEmptyTriangleShape"
    class setVertices(HookFactory):
        _name = "hknpTriangleShape::setVertices"
        _overload: overloads.hknpTriangleShape.setVertices.overloads = "hknpTriangleShape *, const hkVector4f *, const hkVector4f *, const hkVector4f *, const hkVector4f *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpTriangleShape.setVertices.overloads):
            cls._overload = overload_args
            return cls

class hknpMotionPropertiesLibrary:
    class getExactType(HookFactory):
        _name = "hknpMotionPropertiesLibrary::getExactType"
    class hknpMotionPropertiesLibrary(HookFactory):
        _name = "hknpMotionPropertiesLibrary::hknpMotionPropertiesLibrary"
    class addEntry(HookFactory):
        _name = "hknpMotionPropertiesLibrary::addEntry"
    class initialize(HookFactory):
        _name = "hknpMotionPropertiesLibrary::initialize"
    class setCapacity(HookFactory):
        _name = "hknpMotionPropertiesLibrary::setCapacity"

class hknpShapeConnectivityGraph:
    class getExactType(HookFactory):
        _name = "hknpShapeConnectivityGraph::getExactType"
    class getMemoryFootPrint(HookFactory):
        _name = "hknpShapeConnectivityGraph::getMemoryFootPrint"

class hknpParticlesColliderShape:
    class getExactType(HookFactory):
        _name = "hknpParticlesColliderShape::getExactType"
    class hknpParticlesColliderShape(HookFactory):
        _name = "hknpParticlesColliderShape::hknpParticlesColliderShape"

class hknpCogWheelConstraintData:
    class getExactType(HookFactory):
        _name = "hknpCogWheelConstraintData::getExactType"
    class hknpCogWheelConstraintData(HookFactory):
        _name = "hknpCogWheelConstraintData::hknpCogWheelConstraintData"

class hknpRefMaterial:
    class getExactType(HookFactory):
        _name = "hknpRefMaterial::getExactType"

class hknpConnectivityGraphMask:
    class getExactType(HookFactory):
        _name = "hknpConnectivityGraphMask::getExactType"
    class hknpConnectivityGraphMask(HookFactory):
        _name = "hknpConnectivityGraphMask::hknpConnectivityGraphMask"

class hknpShapeMassProperties:
    class getExactType(HookFactory):
        _name = "hknpShapeMassProperties::getExactType"

class hknpDeformableFixedConstraintData:
    class getExactType(HookFactory):
        _name = "hknpDeformableFixedConstraintData::getExactType"
    class hknpDeformableFixedConstraintData(HookFactory):
        _name = "hknpDeformableFixedConstraintData::hknpDeformableFixedConstraintData"

class hknpShapeMassConfigProperty:
    class getExactType(HookFactory):
        _name = "hknpShapeMassConfigProperty::getExactType"

class hknpRefDragProperties:
    class getExactType(HookFactory):
        _name = "hknpRefDragProperties::getExactType"

class hknpBodyQualityLibrary:
    class getExactType(HookFactory):
        _name = "hknpBodyQualityLibrary::getExactType"
    class hknpBodyQualityLibrary(HookFactory):
        _name = "hknpBodyQualityLibrary::hknpBodyQualityLibrary"
        _overload: overloads.hknpBodyQualityLibrary.hknpBodyQualityLibrary.overloads = "hknpBodyQualityLibrary *, const hknpBodyQualityLibrary *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpBodyQualityLibrary.hknpBodyQualityLibrary.overloads):
            cls._overload = overload_args
            return cls
    class initialize(HookFactory):
        _name = "hknpBodyQualityLibrary::initialize"

class hknpRefMassDistribution:
    class getExactType(HookFactory):
        _name = "hknpRefMassDistribution::getExactType"

class hknpMountedBallGun:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpMountedBallGun::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hknpMountedBallGun::getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpMountedBallGun::afterReflectNew"
    class fireGun(HookFactory):
        _name = "hknpMountedBallGun::fireGun"

class hknpFixedConstraintData:
    class getExactType(HookFactory):
        _name = "hknpFixedConstraintData::getExactType"
    class setInBodySpace(HookFactory):
        _name = "hknpFixedConstraintData::setInBodySpace"
    class hknpFixedConstraintData(HookFactory):
        _name = "hknpFixedConstraintData::hknpFixedConstraintData"

class hknpVehicleDriverInputAnalogStatus:
    class getExactType(HookFactory):
        _name = "hknpVehicleDriverInputAnalogStatus::getExactType"
    class clone(HookFactory):
        _name = "hknpVehicleDriverInputAnalogStatus::clone"

class hknpShape:
    class MassConfig:
        class getExactType(HookFactory):
            _name = "hknpShape::MassConfig::getExactType"
    class getExactType(HookFactory):
        _name = "hknpShape::getExactType"
    class hknpShape(HookFactory):
        _name = "hknpShape::hknpShape"
    class _getExactType(HookFactory):
        _name = "hknpShape::_getExactType"
    class setMassProperties(HookFactory):
        _name = "hknpShape::setMassProperties"
        _overload: overloads.hknpShape.setMassProperties.overloads = "hknpShape *, const hknpShape::MassConfig *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpShape.setMassProperties.overloads):
            cls._overload = overload_args
            return cls
    class SurfaceVelocityOutput:
        class setVelocityLs(HookFactory):
            _name = "hknpShape::SurfaceVelocityOutput::setVelocityLs"

class hknpMassPropertiesTree:
    class getExactType(HookFactory):
        _name = "hknpMassPropertiesTree::getExactType"
    class hknpMassPropertiesTree(HookFactory):
        _name = "hknpMassPropertiesTree::hknpMassPropertiesTree"
    class calcMassProperties(HookFactory):
        _name = "hknpMassPropertiesTree::calcMassProperties"

class hknpHingeConstraintData:
    class getExactType(HookFactory):
        _name = "hknpHingeConstraintData::getExactType"
    class hknpHingeConstraintData(HookFactory):
        _name = "hknpHingeConstraintData::hknpHingeConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpHingeConstraintData::setInBodySpace"

class hknpVehicleDefaultAnalogDriverInput:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::getExactType"
    class hknpVehicleDefaultAnalogDriverInput(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::hknpVehicleDefaultAnalogDriverInput"
    class calcAcceleratorInput(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::calcAcceleratorInput"
    class calcBrakeInput(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::calcBrakeInput"
    class calcDriverInput(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::calcDriverInput"
    class calcSteeringInput(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::calcSteeringInput"
    class calcTryingToReverse(HookFactory):
        _name = "hknpVehicleDefaultAnalogDriverInput::calcTryingToReverse"

class hknpRefWorldCinfo:
    class getExactType(HookFactory):
        _name = "hknpRefWorldCinfo::getExactType"

class hknpPhysicsSceneData:
    class getExactType(HookFactory):
        _name = "hknpPhysicsSceneData::getExactType"
    class hknpPhysicsSceneData(HookFactory):
        _name = "hknpPhysicsSceneData::hknpPhysicsSceneData"

class hknpLimitedHingeConstraintData:
    class getExactType(HookFactory):
        _name = "hknpLimitedHingeConstraintData::getExactType"
    class hknpLimitedHingeConstraintData(HookFactory):
        _name = "hknpLimitedHingeConstraintData::hknpLimitedHingeConstraintData"
    class setInBodySpace(HookFactory):
        _name = "hknpLimitedHingeConstraintData::setInBodySpace"

class hknpMaskedShape:
    class getExactType(HookFactory):
        _name = "hknpMaskedShape::getExactType"
    class hknpMaskedShape(HookFactory):
        _name = "hknpMaskedShape::hknpMaskedShape"
    class makeCloneImpl(HookFactory):
        _name = "hknpMaskedShape::makeCloneImpl"

class hknpVehicleDefaultEngine:
    class getExactType(HookFactory):
        _name = "hknpVehicleDefaultEngine::getExactType"
    class hknpVehicleDefaultEngine(HookFactory):
        _name = "hknpVehicleDefaultEngine::hknpVehicleDefaultEngine"
    class calcEngineInfo(HookFactory):
        _name = "hknpVehicleDefaultEngine::calcEngineInfo"

class hknpShapeMassPropertiesTree:
    class getExactType(HookFactory):
        _name = "hknpShapeMassPropertiesTree::getExactType"
    class getMemoryFootPrint(HookFactory):
        _name = "hknpShapeMassPropertiesTree::getMemoryFootPrint"

class hknpVehicleFrictionDescription:
    class getExactType(HookFactory):
        _name = "hknpVehicleFrictionDescription::getExactType"
    class hknpVehicleFrictionDescription(HookFactory):
        _name = "hknpVehicleFrictionDescription::hknpVehicleFrictionDescription"

class hknpAction:
    class getExactType(HookFactory):
        _name = "hknpAction::getExactType"

class hknpDefaultBroadPhaseConfig:
    class getExactType(HookFactory):
        _name = "hknpDefaultBroadPhaseConfig::getExactType"
    class getLayer(HookFactory):
        _name = "hknpDefaultBroadPhaseConfig::getLayer"
    class getLayerIndices(HookFactory):
        _name = "hknpDefaultBroadPhaseConfig::getLayerIndices"

class hknpLinearParametricCurve:
    class getExactType(HookFactory):
        _name = "hknpLinearParametricCurve::getExactType"
    class hknpLinearParametricCurve(HookFactory):
        _name = "hknpLinearParametricCurve::hknpLinearParametricCurve"
    class addPoint(HookFactory):
        _name = "hknpLinearParametricCurve::addPoint"
    class clone(HookFactory):
        _name = "hknpLinearParametricCurve::clone"
    class getBinormal(HookFactory):
        _name = "hknpLinearParametricCurve::getBinormal"
    class getEnd(HookFactory):
        _name = "hknpLinearParametricCurve::getEnd"
    class getLengthFromStart(HookFactory):
        _name = "hknpLinearParametricCurve::getLengthFromStart"
    class getNearestPoint(HookFactory):
        _name = "hknpLinearParametricCurve::getNearestPoint"
    class getPoint(HookFactory):
        _name = "hknpLinearParametricCurve::getPoint"
    class getPointsToDraw(HookFactory):
        _name = "hknpLinearParametricCurve::getPointsToDraw"
    class getTangent(HookFactory):
        _name = "hknpLinearParametricCurve::getTangent"
    class isClosedLoop(HookFactory):
        _name = "hknpLinearParametricCurve::isClosedLoop"
    class transformPoints(HookFactory):
        _name = "hknpLinearParametricCurve::transformPoints"

class hknpUnaryAction:
    class getExactType(HookFactory):
        _name = "hknpUnaryAction::getExactType"
    class getBodies(HookFactory):
        _name = "hknpUnaryAction::getBodies"

class hkRelBitField:
    class hkRelBitField(HookFactory):
        _name = "hkRelBitField::hkRelBitField"

class hkcdSimdTree:
    class hkcdSimdTree(HookFactory):
        _name = "hkcdSimdTree::hkcdSimdTree"
    class aabbCast(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::aabbCast<{T0}>"
    class closestFromAabb(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::closestFromAabb<{T0}>"
    class closestFromAabbOrdered(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::closestFromAabbOrdered<{T0}>"
    class closestFromPoint(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::closestFromPoint<{T0}>"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkcdSimdTree::_Auto::afterReflectNew"
    class aabbOverlapsNearMiss_OutOfLine(HookFactory):
        _name = "hkcdSimdTree::aabbOverlapsNearMiss_OutOfLine"
    class aabbOverlaps_OutOfLine(HookFactory):
        _name = "hkcdSimdTree::aabbOverlaps_OutOfLine"
    class insert(HookFactory):
        _name = "hkcdSimdTree::insert"
    class refitLeaf(HookFactory):
        _name = "hkcdSimdTree::refitLeaf"
    class sortByAabbsSize(HookFactory):
        _name = "hkcdSimdTree::sortByAabbsSize"
    class translate(HookFactory):
        _name = "hkcdSimdTree::translate"
    class treeOverlaps(HookFactory):
        _name = "hkcdSimdTree::treeOverlaps"
    class afterReflectNew(HookFactory):
        _name = "hkcdSimdTree::afterReflectNew"
    class buildFromAabbs(HookFactory):
        _name = "hkcdSimdTree::buildFromAabbs"
        _overload: overloads.hkcdSimdTree.buildFromAabbs.overloads = "hkcdSimdTree *, hkcdSimdTree::BuildContext *, const hkAabbFloat3 *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdSimdTree.buildFromAabbs.overloads):
            cls._overload = overload_args
            return cls
    class buildQueryMask(HookFactory):
        _name = "hkcdSimdTree::buildQueryMask"
    class BuildContext:
        class copyFrom(HookFactory):
            _name = "hkcdSimdTree::BuildContext::copyFrom"
        class splitRangeInFour(HookFactory):
            _name = "hkcdSimdTree::BuildContext::splitRangeInFour"
    class closestFromPointOrdered(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::closestFromPointOrdered<{T0}>"
    class closestFromPointParticles(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::closestFromPointParticles<{T0}>"
    class genericProcess(HookFactory):
        _templates = ("T0", )
        _name = "hkcdSimdTree::genericProcess<{T0}>"

class hknpParticleTransformsAndVelocities:
    class hknpParticleTransformsAndVelocities(HookFactory):
        _name = "hknpParticleTransformsAndVelocities::hknpParticleTransformsAndVelocities"

class hknpRagdollMotorConstraintAtom:
    class hknpRagdollMotorConstraintAtom(HookFactory):
        _name = "hknpRagdollMotorConstraintAtom::hknpRagdollMotorConstraintAtom"

class hknpStorageParticleSystem:
    class hknpStorageParticleSystem(HookFactory):
        _name = "hknpStorageParticleSystem::hknpStorageParticleSystem"
        _overload: overloads.hknpStorageParticleSystem.hknpStorageParticleSystem.overloads = "hknpStorageParticleSystem *, hknpStorageParticleSystem *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpStorageParticleSystem.hknpStorageParticleSystem.overloads):
            cls._overload = overload_args
            return cls

class hknpWorldCinfo:
    class hknpWorldCinfo(HookFactory):
        _name = "hknpWorldCinfo::hknpWorldCinfo"
        _overload: overloads.hknpWorldCinfo.hknpWorldCinfo.overloads = "hknpWorldCinfo *, const hknpWorldCinfo *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpWorldCinfo.hknpWorldCinfo.overloads):
            cls._overload = overload_args
            return cls

class hknpBoxShape:
    class getExactType(HookFactory):
        _name = "hknpBoxShape::getExactType"
    class hknpBoxShape(HookFactory):
        _name = "hknpBoxShape::hknpBoxShape"
    class initialize(HookFactory):
        _name = "hknpBoxShape::initialize"
    class makeBoxShape(HookFactory):
        _name = "hknpBoxShape::makeBoxShape"

class hknpBreakableCompoundShape:
    class getExactType(HookFactory):
        _name = "hknpBreakableCompoundShape::getExactType"
    class hknpBreakableCompoundShape(HookFactory):
        _name = "hknpBreakableCompoundShape::hknpBreakableCompoundShape"

class hknpBreakableCompoundShapeKeyMask:
    class getExactType(HookFactory):
        _name = "hknpBreakableCompoundShapeKeyMask::getExactType"
    class hknpBreakableCompoundShapeKeyMask(HookFactory):
        _name = "hknpBreakableCompoundShapeKeyMask::hknpBreakableCompoundShapeKeyMask"
        _overload: overloads.hknpBreakableCompoundShapeKeyMask.hknpBreakableCompoundShapeKeyMask.overloads = "hknpBreakableCompoundShapeKeyMask *, const hknpBreakableCompoundShapeKeyMask *, const hknpCompoundShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpBreakableCompoundShapeKeyMask.hknpBreakableCompoundShapeKeyMask.overloads):
            cls._overload = overload_args
            return cls

class hknpCapsuleShape:
    class getExactType(HookFactory):
        _name = "hknpCapsuleShape::getExactType"

class hknpCompositeShape:
    class getExactType(HookFactory):
        _name = "hknpCompositeShape::getExactType"
    class hknpCompositeShape(HookFactory):
        _name = "hknpCompositeShape::hknpCompositeShape"
        _overload: overloads.hknpCompositeShape.hknpCompositeShape.overloads = "hknpCompositeShape *, const hknpCompositeShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompositeShape.hknpCompositeShape.overloads):
            cls._overload = overload_args
            return cls

class hknpCompoundShapeInternalsCdDynamicTreeKeyMask:
    class getExactType(HookFactory):
        _name = "hknpCompoundShapeInternalsCdDynamicTreeKeyMask::getExactType"
    class hknpCompoundShapeInternalsCdDynamicTreeKeyMask(HookFactory):
        _name = "hknpCompoundShapeInternalsCdDynamicTreeKeyMask::hknpCompoundShapeInternalsCdDynamicTreeKeyMask"
        _overload: overloads.hknpCompoundShapeInternalsCdDynamicTreeKeyMask.hknpCompoundShapeInternalsCdDynamicTreeKeyMask.overloads = "hknpCompoundShapeInternalsCdDynamicTreeKeyMask *, const hknpCompoundShapeInternalsCdDynamicTreeKeyMask *, const hknpCompoundShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompoundShapeInternalsCdDynamicTreeKeyMask.hknpCompoundShapeInternalsCdDynamicTreeKeyMask.overloads):
            cls._overload = overload_args
            return cls

class hknpCompoundShapeInternalsSimdTreeKeyMask:
    class getExactType(HookFactory):
        _name = "hknpCompoundShapeInternalsSimdTreeKeyMask::getExactType"
    class hknpCompoundShapeInternalsSimdTreeKeyMask(HookFactory):
        _name = "hknpCompoundShapeInternalsSimdTreeKeyMask::hknpCompoundShapeInternalsSimdTreeKeyMask"
        _overload: overloads.hknpCompoundShapeInternalsSimdTreeKeyMask.hknpCompoundShapeInternalsSimdTreeKeyMask.overloads = "hknpCompoundShapeInternalsSimdTreeKeyMask *, const hknpCompoundShapeInternalsSimdTreeKeyMask *, const hknpCompoundShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompoundShapeInternalsSimdTreeKeyMask.hknpCompoundShapeInternalsSimdTreeKeyMask.overloads):
            cls._overload = overload_args
            return cls

class hknpCompoundShapeKeyMask:
    class getExactType(HookFactory):
        _name = "hknpCompoundShapeKeyMask::getExactType"

class hknpConstraintCollisionFilter:
    class getExactType(HookFactory):
        _name = "hknpConstraintCollisionFilter::getExactType"
    class hknpConstraintCollisionFilter(HookFactory):
        _name = "hknpConstraintCollisionFilter::hknpConstraintCollisionFilter"
        _overload: overloads.hknpConstraintCollisionFilter.hknpConstraintCollisionFilter.overloads = "hknpConstraintCollisionFilter *, const hknpConstraintCollisionFilter *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpConstraintCollisionFilter.hknpConstraintCollisionFilter.overloads):
            cls._overload = overload_args
            return cls
    class makeClone(HookFactory):
        _name = "hknpConstraintCollisionFilter::makeClone"
    class onWorldDestroyedSignal(HookFactory):
        _name = "hknpConstraintCollisionFilter::onWorldDestroyedSignal"
    class subscribeToWorld(HookFactory):
        _name = "hknpConstraintCollisionFilter::subscribeToWorld"
    class unsubscribeFromWorld(HookFactory):
        _name = "hknpConstraintCollisionFilter::unsubscribeFromWorld"

class hknpCylinderShape:
    class getExactType(HookFactory):
        _name = "hknpCylinderShape::getExactType"
    class initialize(HookFactory):
        _name = "hknpCylinderShape::initialize"

class hknpDecoratorShape:
    class getExactType(HookFactory):
        _name = "hknpDecoratorShape::getExactType"
    class hknpDecoratorShape(HookFactory):
        _name = "hknpDecoratorShape::hknpDecoratorShape"
        _overload: overloads.hknpDecoratorShape.hknpDecoratorShape.overloads = "hknpDecoratorShape *, const hknpDecoratorShape *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpDecoratorShape.hknpDecoratorShape.overloads):
            cls._overload = overload_args
            return cls
    class makeCloneCoreShape(HookFactory):
        _name = "hknpDecoratorShape::makeCloneCoreShape"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpDecoratorShape::onCoreShapeMutated"
    class subscribeToCoreShapeMutation(HookFactory):
        _name = "hknpDecoratorShape::subscribeToCoreShapeMutation"
    class unsubscribeFromCoreShapeMutation(HookFactory):
        _name = "hknpDecoratorShape::unsubscribeFromCoreShapeMutation"

class hknpDefaultHeightFieldGeometry:
    class getExactType(HookFactory):
        _name = "hknpDefaultHeightFieldGeometry::getExactType"
    class hknpDefaultHeightFieldGeometry(HookFactory):
        _name = "hknpDefaultHeightFieldGeometry::hknpDefaultHeightFieldGeometry"
    class getNumHeights(HookFactory):
        _name = "hknpDefaultHeightFieldGeometry::getNumHeights"
    class getQuadInfoAt(HookFactory):
        _name = "hknpDefaultHeightFieldGeometry::getQuadInfoAt"
    class makeClone(HookFactory):
        _name = "hknpDefaultHeightFieldGeometry::makeClone"

class hknpDummyShape:
    class getExactType(HookFactory):
        _name = "hknpDummyShape::getExactType"

class hknpGroupCollisionFilter:
    class getExactType(HookFactory):
        _name = "hknpGroupCollisionFilter::getExactType"
    class hknpGroupCollisionFilter(HookFactory):
        _name = "hknpGroupCollisionFilter::hknpGroupCollisionFilter"
        _overload: overloads.hknpGroupCollisionFilter.hknpGroupCollisionFilter.overloads = "hknpGroupCollisionFilter *, const hknpGroupCollisionFilter *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpGroupCollisionFilter.hknpGroupCollisionFilter.overloads):
            cls._overload = overload_args
            return cls
    class makeClone(HookFactory):
        _name = "hknpGroupCollisionFilter::makeClone"

class hknpHeightFieldBoundingVolume:
    class getExactType(HookFactory):
        _name = "hknpHeightFieldBoundingVolume::getExactType"
    class hknpHeightFieldBoundingVolume(HookFactory):
        _name = "hknpHeightFieldBoundingVolume::hknpHeightFieldBoundingVolume"
    class _getExactType(HookFactory):
        _name = "hknpHeightFieldBoundingVolume::_getExactType"
    class getCoarseMinMax(HookFactory):
        _name = "hknpHeightFieldBoundingVolume::getCoarseMinMax"

class hknpHeightFieldGeometry:
    class getExactType(HookFactory):
        _name = "hknpHeightFieldGeometry::getExactType"
    class hknpHeightFieldGeometry(HookFactory):
        _name = "hknpHeightFieldGeometry::hknpHeightFieldGeometry"
    class makeClone(HookFactory):
        _name = "hknpHeightFieldGeometry::makeClone"

class hknpHeightFieldShape:
    class getExactType(HookFactory):
        _name = "hknpHeightFieldShape::getExactType"
    class calcClosestDistanceSquaredLowerEstimate(HookFactory):
        _name = "hknpHeightFieldShape::calcClosestDistanceSquaredLowerEstimate"
    class calcClosestDistanceSquaredLowerEstimateWithScale(HookFactory):
        _name = "hknpHeightFieldShape::calcClosestDistanceSquaredLowerEstimateWithScale"

class hknpMalleableConstraintData:
    class getExactType(HookFactory):
        _name = "hknpMalleableConstraintData::getExactType"

class hknpMaskedCompoundShape:
    class getExactType(HookFactory):
        _name = "hknpMaskedCompoundShape::getExactType"
    class hknpMaskedCompoundShape(HookFactory):
        _name = "hknpMaskedCompoundShape::hknpMaskedCompoundShape"
    class onCoreShapeMutatedImpl(HookFactory):
        _name = "hknpMaskedCompoundShape::onCoreShapeMutatedImpl"
    class onFinishEditingMaskImpl(HookFactory):
        _name = "hknpMaskedCompoundShape::onFinishEditingMaskImpl"

class hknpMeshShape:
    class getExactType(HookFactory):
        _name = "hknpMeshShape::getExactType"
    class castShapeImpl(HookFactory):
        _name = "hknpMeshShape::castShapeImpl"
    class getClosestPointsToConvex(HookFactory):
        _name = "hknpMeshShape::getClosestPointsToConvex"

class hknpPairCollisionFilter:
    class getExactType(HookFactory):
        _name = "hknpPairCollisionFilter::getExactType"
    class hknpPairCollisionFilter(HookFactory):
        _name = "hknpPairCollisionFilter::hknpPairCollisionFilter"
        _overload: overloads.hknpPairCollisionFilter.hknpPairCollisionFilter.overloads = "hknpPairCollisionFilter *, const hknpPairCollisionFilter *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpPairCollisionFilter.hknpPairCollisionFilter.overloads):
            cls._overload = overload_args
            return cls
    class copyFrom(HookFactory):
        _name = "hknpPairCollisionFilter::copyFrom"
    class filterBodyPairs(HookFactory):
        _name = "hknpPairCollisionFilter::filterBodyPairs"
    class getLodInfo(HookFactory):
        _name = "hknpPairCollisionFilter::getLodInfo"
    class isCollisionEnabled(HookFactory):
        _name = "hknpPairCollisionFilter::isCollisionEnabled"
        _overload: overloads.hknpPairCollisionFilter.isCollisionEnabled.overloads = "hknpPairCollisionFilter *, __int64, const hknpQueryFilterData *, const hknpBody *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpPairCollisionFilter.isCollisionEnabled.overloads):
            cls._overload = overload_args
            return cls
    class makeClone(HookFactory):
        _name = "hknpPairCollisionFilter::makeClone"

class hknpPositionConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpPositionConstraintMotor::getExactType"
    class hknpPositionConstraintMotor(HookFactory):
        _name = "hknpPositionConstraintMotor::hknpPositionConstraintMotor"
    class makeClone(HookFactory):
        _name = "hknpPositionConstraintMotor::makeClone"

class hknpRagdollData:
    class getExactType(HookFactory):
        _name = "hknpRagdollData::getExactType"
    class hknpRagdollData(HookFactory):
        _name = "hknpRagdollData::hknpRagdollData"
        _overload: overloads.hknpRagdollData.hknpRagdollData.overloads = "hknpRagdollData *, const hknpRagdollData *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpRagdollData.hknpRagdollData.overloads):
            cls._overload = overload_args
            return cls
    class copyPhysicsSystemData(HookFactory):
        _name = "hknpRagdollData::copyPhysicsSystemData"

class hknpScaledConvexShapeBase:
    class getExactType(HookFactory):
        _name = "hknpScaledConvexShapeBase::getExactType"
    class hknpScaledConvexShapeBase(HookFactory):
        _name = "hknpScaledConvexShapeBase::hknpScaledConvexShapeBase"
        _overload: overloads.hknpScaledConvexShapeBase.hknpScaledConvexShapeBase.overloads = "hknpScaledConvexShapeBase *, const hknpScaledConvexShapeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpScaledConvexShapeBase.hknpScaledConvexShapeBase.overloads):
            cls._overload = overload_args
            return cls
    class createInPlace(HookFactory):
        _name = "hknpScaledConvexShapeBase::createInPlace"
        _overload: overloads.hknpScaledConvexShapeBase.createInPlace.overloads = "hknpShapeBuffer *, const hknpConvexShape *, const hknpShapeQueryScalingData *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpScaledConvexShapeBase.createInPlace.overloads):
            cls._overload = overload_args
            return cls
    class setScaleNoSignals(HookFactory):
        _name = "hknpScaledConvexShapeBase::setScaleNoSignals"

class hknpShapeTagCodec:
    class getExactType(HookFactory):
        _name = "hknpShapeTagCodec::getExactType"
    class copyFrom(HookFactory):
        _name = "hknpShapeTagCodec::copyFrom"
    class makeClone(HookFactory):
        _name = "hknpShapeTagCodec::makeClone"

class hknpSphereShape:
    class getExactType(HookFactory):
        _name = "hknpSphereShape::getExactType"

class hknpSpringDamperConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpSpringDamperConstraintMotor::getExactType"
    class hknpSpringDamperConstraintMotor(HookFactory):
        _name = "hknpSpringDamperConstraintMotor::hknpSpringDamperConstraintMotor"
    class makeClone(HookFactory):
        _name = "hknpSpringDamperConstraintMotor::makeClone"

class hknpVelocityConstraintMotor:
    class getExactType(HookFactory):
        _name = "hknpVelocityConstraintMotor::getExactType"
    class hknpVelocityConstraintMotor(HookFactory):
        _name = "hknpVelocityConstraintMotor::hknpVelocityConstraintMotor"
    class makeClone(HookFactory):
        _name = "hknpVelocityConstraintMotor::makeClone"

class hknpThreadSafeObjectPool:
    class relocateBuffer(HookFactory):
        _templates = ("T0", )
        _name = "hknpThreadSafeObjectPool<{T0}>::relocateBuffer"
    class free(HookFactory):
        _templates = ("T0", )
        _name = "hknpThreadSafeObjectPool<{T0}>::free"
    class rebuildFreeList(HookFactory):
        _templates = ("T0", )
        _name = "hknpThreadSafeObjectPool<{T0}>::rebuildFreeList"

class hknpScaledConvexShapeFunctions:
    class buildMassProperties(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcBoundingSphere"
    class calcInnerRadius(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcInnerRadius"
    class calcInnerSphere(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcMinAngleBetweenFaces"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::calcSurfaceVelocity"
    class castRay(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::castRay"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::convertVertexIdsToVertices"
    class getCircularSymmetryAxis(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getCircularSymmetryAxis"
    class getConvexVertices(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getConvexVertices"
    class getFaceInfo(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getFaceVertices"
    class getMemoryFootprint(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getMemoryFootprint"
    class getMutationSignals(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getMutationSignals"
    class getNumberOfFaces(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getNumberOfFaces"
    class getNumberOfSupportSpheres(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getNumberOfSupportSpheres"
    class getSupportSpheres(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getSupportingVertex"
    class getTypeName(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::makeClone"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::onCoreShapeMutated"
    class queryAabb(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::queryAabb"
        _overload: overloads.hknpScaledConvexShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpScaledConvexShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class getReflectType(HookFactory):
        _name = "hknpScaledConvexShapeFunctions::getReflectType"

class hknpShapeNullFunctions:
    class queryPoint(HookFactory):
        _name = "hknpShapeNullFunctions::queryPoint"
    class buildMassProperties(HookFactory):
        _name = "hknpShapeNullFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpShapeNullFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpShapeNullFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpShapeNullFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpShapeNullFunctions::calcBoundingSphere"
    class calcInnerRadius(HookFactory):
        _name = "hknpShapeNullFunctions::calcInnerRadius"
    class calcInnerSphere(HookFactory):
        _name = "hknpShapeNullFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpShapeNullFunctions::calcMinAngleBetweenFaces"
    class castRay(HookFactory):
        _name = "hknpShapeNullFunctions::castRay"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpShapeNullFunctions::convertVertexIdsToVertices"
    class estimateNumShapeKeys(HookFactory):
        _name = "hknpShapeNullFunctions::estimateNumShapeKeys"
    class getConvexVertices(HookFactory):
        _name = "hknpShapeNullFunctions::getConvexVertices"
    class getFaceInfo(HookFactory):
        _name = "hknpShapeNullFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpShapeNullFunctions::getFaceVertices"
    class getLeafShapes(HookFactory):
        _name = "hknpShapeNullFunctions::getLeafShapes"
    class getMassProperties(HookFactory):
        _name = "hknpShapeNullFunctions::getMassProperties"
    class getNumberOfFaces(HookFactory):
        _name = "hknpShapeNullFunctions::getNumberOfFaces"
    class getNumberOfSupportSpheres(HookFactory):
        _name = "hknpShapeNullFunctions::getNumberOfSupportSpheres"
    class getSignedDistanceContacts(HookFactory):
        _name = "hknpShapeNullFunctions::getSignedDistanceContacts"
    class getSignedDistances(HookFactory):
        _name = "hknpShapeNullFunctions::getSignedDistances"
    class getSupportSpheres(HookFactory):
        _name = "hknpShapeNullFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpShapeNullFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpShapeNullFunctions::getSupportingVertex"
    class makeClone(HookFactory):
        _name = "hknpShapeNullFunctions::makeClone"
    class makeShapeKeyMask(HookFactory):
        _name = "hknpShapeNullFunctions::makeShapeKeyMask"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpShapeNullFunctions::onCoreShapeMutated"
    class onFinishEditingMask(HookFactory):
        _name = "hknpShapeNullFunctions::onFinishEditingMask"
    class queryAabb(HookFactory):
        _name = "hknpShapeNullFunctions::queryAabb"
        _overload: overloads.hknpShapeNullFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpShapeNullFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class hknpCollisionQueryCollector:
    class reset(HookFactory):
        _name = "hknpCollisionQueryCollector::reset"

class hkSingletonUtil__init_hknpShapeFunctionsSingleton_(HookFactory):
    _name = "hkSingletonUtil__init_hknpShapeFunctionsSingleton_"

class hknpShapeFunctions:
    class hknpShapeFunctions(HookFactory):
        _name = "hknpShapeFunctions::hknpShapeFunctions"
    class registerDefaults(HookFactory):
        _name = "hknpShapeFunctions::registerDefaults"

class hknpShapeFunctionsSingleton:
    class hknpShapeFunctionsSingleton(HookFactory):
        _name = "hknpShapeFunctionsSingleton::hknpShapeFunctionsSingleton"

class hknpCompressedMeshShapeInternals:
    class KeyMaskFunctions:
        class commitChanges(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::KeyMaskFunctions::commitChanges"
        class getReflectType(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::KeyMaskFunctions::getReflectType"
        class makeClone(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::KeyMaskFunctions::makeClone"
    class AabbOverlaps:
        class addLeaves(HookFactory):
            _templates = ("T0", )
            _name = "hknpCompressedMeshShapeInternals::AabbOverlaps<{T0}>::addLeaves"
    class KeyMask:
        class getExactType(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::KeyMask::getExactType"
    class GeometryProvider:
        class getCustomPrimitiveDataImpl(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getCustomPrimitiveDataImpl"
        class getCustomPrimitiveInfos(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getCustomPrimitiveInfos"
        class getCustomPrimitiveVertex(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getCustomPrimitiveVertex"
        class getIndicesImpl(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getIndicesImpl"
        class getNumCustomPrimitives(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getNumCustomPrimitives"
        class getNumTriangles(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getNumTriangles"
        class getNumVertices(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getNumVertices"
        class getTriangleDataImpl(HookFactory):
            _name = "hknpCompressedMeshShapeInternals::GeometryProvider::getTriangleDataImpl"

class hknpBoxShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpBoxShapeFunctions::getReflectType"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpBoxShapeFunctions::calcMinAngleBetweenFaces"
    class buildMassProperties(HookFactory):
        _name = "hknpBoxShapeFunctions::buildMassProperties"
    class calcAabb(HookFactory):
        _name = "hknpBoxShapeFunctions::calcAabb"
    class calcBoundingSphere(HookFactory):
        _name = "hknpBoxShapeFunctions::calcBoundingSphere"
    class calcInnerSphere(HookFactory):
        _name = "hknpBoxShapeFunctions::calcInnerSphere"
    class getConvexVertices(HookFactory):
        _name = "hknpBoxShapeFunctions::getConvexVertices"
    class getMemoryFootprint(HookFactory):
        _name = "hknpBoxShapeFunctions::getMemoryFootprint"
    class getSupportingFace(HookFactory):
        _name = "hknpBoxShapeFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpBoxShapeFunctions::getSupportingVertex"
    class getTypeName(HookFactory):
        _name = "hknpBoxShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpBoxShapeFunctions::makeClone"
    class queryPoint(HookFactory):
        _name = "hknpBoxShapeFunctions::queryPoint"

class hknpBreakableCompoundShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::buildMassProperties"
    class calcAabb(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::calcAabb"
    class castRay(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::castRay"
    class getTypeName(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::makeClone"
    class makeShapeKeyMask(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::makeShapeKeyMask"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::onCoreShapeMutated"
    class queryAabb(HookFactory):
        _name = "hknpBreakableCompoundShapeFunctions::queryAabb"
        _overload: overloads.hknpBreakableCompoundShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpBreakableCompoundShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class hknpBreakableCompoundShapeKeyMaskFunctions:
    class getReflectType(HookFactory):
        _name = "hknpBreakableCompoundShapeKeyMaskFunctions::getReflectType"
    class commitChanges(HookFactory):
        _name = "hknpBreakableCompoundShapeKeyMaskFunctions::commitChanges"
    class makeClone(HookFactory):
        _name = "hknpBreakableCompoundShapeKeyMaskFunctions::makeClone"

class hknpCapsuleShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpCapsuleShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpCapsuleShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpCapsuleShapeFunctions::calcAabb"
    class calcBoundingSphere(HookFactory):
        _name = "hknpCapsuleShapeFunctions::calcBoundingSphere"
    class calcInnerSphere(HookFactory):
        _name = "hknpCapsuleShapeFunctions::calcInnerSphere"
    class castRay(HookFactory):
        _name = "hknpCapsuleShapeFunctions::castRay"
    class getConvexVertices(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getConvexVertices"
    class getFaceInfo(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getFaceVertices"
    class getSignedDistances(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getSignedDistances"
    class getSupportSpheres(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getSupportingFace"
    class getTypeName(HookFactory):
        _name = "hknpCapsuleShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpCapsuleShapeFunctions::makeClone"

class hknpCompoundShapeCdDynamicTreeKeyMaskFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCompoundShapeCdDynamicTreeKeyMaskFunctions::getReflectType"
    class commitChanges(HookFactory):
        _name = "hknpCompoundShapeCdDynamicTreeKeyMaskFunctions::commitChanges"
    class makeClone(HookFactory):
        _name = "hknpCompoundShapeCdDynamicTreeKeyMaskFunctions::makeClone"

class hknpCompoundShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCompoundShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpCompoundShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpCompoundShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpCompoundShapeFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpCompoundShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpCompoundShapeFunctions::calcBoundingSphere"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpCompoundShapeFunctions::calcSurfaceVelocity"
    class castRay(HookFactory):
        _name = "hknpCompoundShapeFunctions::castRay"
    class castShapeImpl(HookFactory):
        _name = "hknpCompoundShapeFunctions::castShapeImpl"
    class getClosestPointsImpl(HookFactory):
        _name = "hknpCompoundShapeFunctions::getClosestPointsImpl"
    class getLeafShapes(HookFactory):
        _name = "hknpCompoundShapeFunctions::getLeafShapes"
    class getMemoryFootprint(HookFactory):
        _name = "hknpCompoundShapeFunctions::getMemoryFootprint"
    class getMutationSignals(HookFactory):
        _name = "hknpCompoundShapeFunctions::getMutationSignals"
    class getTypeName(HookFactory):
        _name = "hknpCompoundShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpCompoundShapeFunctions::makeClone"
    class makeShapeKeyMask(HookFactory):
        _name = "hknpCompoundShapeFunctions::makeShapeKeyMask"
    class queryAabb(HookFactory):
        _name = "hknpCompoundShapeFunctions::queryAabb"
        _overload: overloads.hknpCompoundShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompoundShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpCompoundShapeFunctions::queryPoint"

class hknpCompoundShapeSimdTreeKeyMaskFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCompoundShapeSimdTreeKeyMaskFunctions::getReflectType"
    class commitChanges(HookFactory):
        _name = "hknpCompoundShapeSimdTreeKeyMaskFunctions::commitChanges"
    class makeClone(HookFactory):
        _name = "hknpCompoundShapeSimdTreeKeyMaskFunctions::makeClone"

class hknpCompressedMeshShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::getReflectType"
    class calcAabb(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::calcAabb"
    class castShapeImpl(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::castShapeImpl"
    class getMemoryFootprint(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::getMemoryFootprint"
    class getTypeName(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::makeClone"
    class queryAabb(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::queryAabb"
        _overload: overloads.hknpCompressedMeshShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCompressedMeshShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::buildSurfaceGeometry"
    class castRay(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::castRay"
    class getLeafShapes(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::getLeafShapes"
    class makeShapeKeyMask(HookFactory):
        _name = "hknpCompressedMeshShapeFunctions::makeShapeKeyMask"

class hknpCylinderShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpCylinderShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpCylinderShapeFunctions::buildMassProperties"
    class calcBoundingSphere(HookFactory):
        _name = "hknpCylinderShapeFunctions::calcBoundingSphere"
    class calcInnerSphere(HookFactory):
        _name = "hknpCylinderShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpCylinderShapeFunctions::calcMinAngleBetweenFaces"
    class getCircularSymmetryAxis(HookFactory):
        _name = "hknpCylinderShapeFunctions::getCircularSymmetryAxis"
    class getMemoryFootprint(HookFactory):
        _name = "hknpCylinderShapeFunctions::getMemoryFootprint"
    class getTypeName(HookFactory):
        _name = "hknpCylinderShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpCylinderShapeFunctions::makeClone"

class hknpDummyShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpDummyShapeFunctions::getReflectType"
    class calcAabb(HookFactory):
        _name = "hknpDummyShapeFunctions::calcAabb"
    class getMutationSignals(HookFactory):
        _name = "hknpDummyShapeFunctions::getMutationSignals"
    class getTypeName(HookFactory):
        _name = "hknpDummyShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpDummyShapeFunctions::makeClone"

class hknpExternMeshShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpExternMeshShapeFunctions::getReflectType"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpExternMeshShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpExternMeshShapeFunctions::calcAabb"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpExternMeshShapeFunctions::calcSurfaceVelocity"
    class castRay(HookFactory):
        _name = "hknpExternMeshShapeFunctions::castRay"
    class castShapeImpl(HookFactory):
        _name = "hknpExternMeshShapeFunctions::castShapeImpl"
    class getLeafShapes(HookFactory):
        _name = "hknpExternMeshShapeFunctions::getLeafShapes"
    class getMemoryFootprint(HookFactory):
        _name = "hknpExternMeshShapeFunctions::getMemoryFootprint"
    class getMutationSignals(HookFactory):
        _name = "hknpExternMeshShapeFunctions::getMutationSignals"
    class getTypeName(HookFactory):
        _name = "hknpExternMeshShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpExternMeshShapeFunctions::makeClone"
    class queryAabb(HookFactory):
        _name = "hknpExternMeshShapeFunctions::queryAabb"
        _overload: overloads.hknpExternMeshShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpExternMeshShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class hknpHeightFieldShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getReflectType"
    class calcAabb(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::calcAabb"
    class getMutationSignals(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getMutationSignals"
    class getTypeName(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::makeClone"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::buildSurfaceGeometry"
    class castRay(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::castRay"
    class castShapeImpl(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::castShapeImpl"
    class getClosestPointsImpl(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getClosestPointsImpl"
    class getClosestPointsToHeightfieldImpl(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getClosestPointsToHeightfieldImpl"
    class getLeafShapes(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getLeafShapes"
    class getSignedDistances(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::getSignedDistances"
    class queryAabb(HookFactory):
        _name = "hknpHeightFieldShapeFunctions::queryAabb"
        _overload: overloads.hknpHeightFieldShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpHeightFieldShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class hknpMaskedCompoundShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::buildMassProperties"
    class calcAabb(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::calcAabb"
    class getTypeName(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::makeClone"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::onCoreShapeMutated"
    class onFinishEditingMask(HookFactory):
        _name = "hknpMaskedCompoundShapeFunctions::onFinishEditingMask"

class hknpMaskedShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpMaskedShapeFunctions::getReflectType"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpMaskedShapeFunctions::buildSurfaceGeometry"
    class castRay(HookFactory):
        _name = "hknpMaskedShapeFunctions::castRay"
    class getLeafShapes(HookFactory):
        _name = "hknpMaskedShapeFunctions::getLeafShapes"
    class getMutationSignals(HookFactory):
        _name = "hknpMaskedShapeFunctions::getMutationSignals"
    class getShapeKeys(HookFactory):
        _name = "hknpMaskedShapeFunctions::getShapeKeys"
    class getTypeName(HookFactory):
        _name = "hknpMaskedShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpMaskedShapeFunctions::makeClone"
    class onCoreShapeMutated(HookFactory):
        _name = "hknpMaskedShapeFunctions::onCoreShapeMutated"
    class onFinishEditingMask(HookFactory):
        _name = "hknpMaskedShapeFunctions::onFinishEditingMask"
    class queryAabb(HookFactory):
        _name = "hknpMaskedShapeFunctions::queryAabb"
        _overload: overloads.hknpMaskedShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpMaskedShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class hknpMeshShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpMeshShapeFunctions::getReflectType"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpMeshShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpMeshShapeFunctions::calcAabb"
    class getLeafShapes(HookFactory):
        _name = "hknpMeshShapeFunctions::getLeafShapes"
    class getMemoryFootprint(HookFactory):
        _name = "hknpMeshShapeFunctions::getMemoryFootprint"
    class getTypeName(HookFactory):
        _name = "hknpMeshShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpMeshShapeFunctions::makeClone"
    class castRay(HookFactory):
        _name = "hknpMeshShapeFunctions::castRay"
    class queryAabb(HookFactory):
        _name = "hknpMeshShapeFunctions::queryAabb"
        _overload: overloads.hknpMeshShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpMeshShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpMeshShapeFunctions::queryPoint"

class hknpParticlesColliderShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::getReflectType"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::calcAabb"
    class castRay(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::castRay"
    class castShapeImpl(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::castShapeImpl"
    class getClosestPointsFromConvex(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::getClosestPointsFromConvex"
    class getLeafShapes(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::getLeafShapes"
    class getTypeName(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::getTypeName"
    class queryAabb(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::queryAabb"
        _overload: overloads.hknpParticlesColliderShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpParticlesColliderShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpParticlesColliderShapeFunctions::queryPoint"

class hknpSphereShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpSphereShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpSphereShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpSphereShapeFunctions::buildSurfaceGeometry"
    class calcBoundingRadius(HookFactory):
        _name = "hknpSphereShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpSphereShapeFunctions::calcBoundingSphere"
    class calcInnerSphere(HookFactory):
        _name = "hknpSphereShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpSphereShapeFunctions::calcMinAngleBetweenFaces"
    class castRay(HookFactory):
        _name = "hknpSphereShapeFunctions::castRay"
    class getConvexVertices(HookFactory):
        _name = "hknpSphereShapeFunctions::getConvexVertices"
    class getSupportingVertex(HookFactory):
        _name = "hknpSphereShapeFunctions::getSupportingVertex"
    class getTypeName(HookFactory):
        _name = "hknpSphereShapeFunctions::getTypeName"
    class queryPoint(HookFactory):
        _name = "hknpSphereShapeFunctions::queryPoint"

class hknpTransformedShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpTransformedShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpTransformedShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpTransformedShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcAabb"
    class calcBoundingRadius(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcBoundingRadius"
    class calcBoundingSphere(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcBoundingSphere"
    class calcInnerRadius(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcInnerRadius"
    class calcInnerSphere(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcMinAngleBetweenFaces"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpTransformedShapeFunctions::calcSurfaceVelocity"
    class castRay(HookFactory):
        _name = "hknpTransformedShapeFunctions::castRay"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpTransformedShapeFunctions::convertVertexIdsToVertices"
    class getCircularSymmetryAxis(HookFactory):
        _name = "hknpTransformedShapeFunctions::getCircularSymmetryAxis"
    class getConvexVertices(HookFactory):
        _name = "hknpTransformedShapeFunctions::getConvexVertices"
    class getFaceInfo(HookFactory):
        _name = "hknpTransformedShapeFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpTransformedShapeFunctions::getFaceVertices"
    class getLeafShapes(HookFactory):
        _name = "hknpTransformedShapeFunctions::getLeafShapes"
    class getMassProperties(HookFactory):
        _name = "hknpTransformedShapeFunctions::getMassProperties"
    class getMemoryFootprint(HookFactory):
        _name = "hknpTransformedShapeFunctions::getMemoryFootprint"
    class getMutationSignals(HookFactory):
        _name = "hknpTransformedShapeFunctions::getMutationSignals"
    class getSupportSpheres(HookFactory):
        _name = "hknpTransformedShapeFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpTransformedShapeFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpTransformedShapeFunctions::getSupportingVertex"
    class getTypeName(HookFactory):
        _name = "hknpTransformedShapeFunctions::getTypeName"
    class makeClone(HookFactory):
        _name = "hknpTransformedShapeFunctions::makeClone"
    class queryAabb(HookFactory):
        _name = "hknpTransformedShapeFunctions::queryAabb"
        _overload: overloads.hknpTransformedShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpTransformedShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpTransformedShapeFunctions::queryPoint"

class hknpTriangleShapeFunctions:
    class getReflectType(HookFactory):
        _name = "hknpTriangleShapeFunctions::getReflectType"
    class buildMassProperties(HookFactory):
        _name = "hknpTriangleShapeFunctions::buildMassProperties"
    class buildSurfaceGeometry(HookFactory):
        _name = "hknpTriangleShapeFunctions::buildSurfaceGeometry"
    class calcInnerSphere(HookFactory):
        _name = "hknpTriangleShapeFunctions::calcInnerSphere"
    class castRay(HookFactory):
        _name = "hknpTriangleShapeFunctions::castRay"
    class getConvexVertices(HookFactory):
        _name = "hknpTriangleShapeFunctions::getConvexVertices"
    class getSupportingFace(HookFactory):
        _name = "hknpTriangleShapeFunctions::getSupportingFace"
    class getTypeName(HookFactory):
        _name = "hknpTriangleShapeFunctions::getTypeName"

class hkMemoryMeshShape:
    class getNumSections(HookFactory):
        _name = "hkMemoryMeshShape::getNumSections"
    class getExactType(HookFactory):
        _name = "hkMemoryMeshShape::getExactType"
    class getName(HookFactory):
        _name = "hkMemoryMeshShape::getName"
    class setName(HookFactory):
        _name = "hkMemoryMeshShape::setName"
    class lockSection(HookFactory):
        _name = "hkMemoryMeshShape::lockSection"
    class unlockSection(HookFactory):
        _name = "hkMemoryMeshShape::unlockSection"

class hknpMinMaxQuadTree:
    class hknpMinMaxQuadTree(HookFactory):
        _name = "hknpMinMaxQuadTree::hknpMinMaxQuadTree"

class hknpTyremarkPoint:
    class hknpTyremarkPoint(HookFactory):
        _name = "hknpTyremarkPoint::hknpTyremarkPoint"

class hknpBodyCinfo:
    class hknpBodyCinfo(HookFactory):
        _name = "hknpBodyCinfo::hknpBodyCinfo"
        _overload: overloads.hknpBodyCinfo.hknpBodyCinfo.overloads = "hknpBodyCinfo *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpBodyCinfo.hknpBodyCinfo.overloads):
            cls._overload = overload_args
            return cls

class hknpBody:
    class setShape(HookFactory):
        _name = "hknpBody::setShape"
    class syncStaticBodyFromMotionTransform(HookFactory):
        _name = "hknpBody::syncStaticBodyFromMotionTransform"
    class updateBodyFromMotionTransform(HookFactory):
        _name = "hknpBody::updateBodyFromMotionTransform"
    class updateComCenteredBoundingRadius(HookFactory):
        _name = "hknpBody::updateComCenteredBoundingRadius"

class hknpMotionProperties:
    class init(HookFactory):
        _name = "hknpMotionProperties::init"

class hknpMotion:
    class buildEffMassMatrixAt(HookFactory):
        _name = "hknpMotion::buildEffMassMatrixAt"
    class getAngularVelocity(HookFactory):
        _name = "hknpMotion::getAngularVelocity"
    class getInertiaWorld(HookFactory):
        _name = "hknpMotion::getInertiaWorld"
    class getInverseInertiaWorld(HookFactory):
        _name = "hknpMotion::getInverseInertiaWorld"
    class getPointVelocity(HookFactory):
        _name = "hknpMotion::getPointVelocity"
    class init(HookFactory):
        _name = "hknpMotion::init"
    class reintegrate(HookFactory):
        _name = "hknpMotion::reintegrate"
    class setAngularVelocity(HookFactory):
        _name = "hknpMotion::setAngularVelocity"
    class setMassProperties(HookFactory):
        _name = "hknpMotion::setMassProperties"
    class setPointVelocity(HookFactory):
        _name = "hknpMotion::setPointVelocity"
    class syncSpeedLimits(HookFactory):
        _name = "hknpMotion::syncSpeedLimits"

class hknpConstraint:
    class hknpConstraint(HookFactory):
        _name = "hknpConstraint::hknpConstraint"
    class allocateRuntime(HookFactory):
        _name = "hknpConstraint::allocateRuntime"
    class transform(HookFactory):
        _name = "hknpConstraint::transform"

class hknpConvexShapeBuildConfig:
    class hknpConvexShapeBuildConfig(HookFactory):
        _name = "hknpConvexShapeBuildConfig::hknpConvexShapeBuildConfig"

class hkSignal2_hknpShape_const___unsigned_char___subscribe__anonymous_namespace___hknpLodShapeEx_void____cdecl_A0xec73bb4d__hknpLodShapeEx_____hknpShape_const___unsigned_char__(HookFactory):
    _name = "hkSignal2_hknpShape_const___unsigned_char___subscribe__anonymous_namespace___hknpLodShapeEx_void____cdecl_A0xec73bb4d__hknpLodShapeEx_____hknpShape_const___unsigned_char__"

class hkSignal3_hknpWorld___hknpBodyId_const___int___unsubscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int__(HookFactory):
    _name = "hkSignal3_hknpWorld___hknpBodyId_const___int___unsubscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int__"

class hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int_____scalar_deleting_destructor_(HookFactory):
    _name = "hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int_____scalar_deleting_destructor_"

class hkSignal2_hknpShape_const___unsigned_char___MemberSlot__anonymous_namespace___hknpLodShapeEx_void____cdecl_A0xec73bb4d__hknpLodShapeEx_____hknpShape_const___unsigned_char____subscribe(HookFactory):
    _name = "hkSignal2_hknpShape_const___unsigned_char___MemberSlot__anonymous_namespace___hknpLodShapeEx_void____cdecl_A0xec73bb4d__hknpLodShapeEx_____hknpShape_const___unsigned_char____subscribe"

class hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int____unsubscribe(HookFactory):
    _name = "hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int____unsubscribe"

class hknpDecoratorShapeFunctions:
    class buildMassProperties(HookFactory):
        _name = "hknpDecoratorShapeFunctions::buildMassProperties"
    class calcAabb(HookFactory):
        _name = "hknpDecoratorShapeFunctions::calcAabb"
    class calcInnerRadius(HookFactory):
        _name = "hknpDecoratorShapeFunctions::calcInnerRadius"
    class calcInnerSphere(HookFactory):
        _name = "hknpDecoratorShapeFunctions::calcInnerSphere"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpDecoratorShapeFunctions::calcMinAngleBetweenFaces"
    class calcSurfaceVelocity(HookFactory):
        _name = "hknpDecoratorShapeFunctions::calcSurfaceVelocity"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpDecoratorShapeFunctions::convertVertexIdsToVertices"
    class estimateNumShapeKeys(HookFactory):
        _name = "hknpDecoratorShapeFunctions::estimateNumShapeKeys"
    class getCircularSymmetryAxis(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getCircularSymmetryAxis"
    class getFaceInfo(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getFaceInfo"
    class getFaceVertices(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getFaceVertices"
    class getShapeKeys(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getShapeKeys"
    class getSignedDistanceContacts(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getSignedDistanceContacts"
    class getSignedDistances(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getSignedDistances"
    class getSupportSpheres(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getSupportSpheres"
    class getSupportingFace(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getSupportingFace"
    class getSupportingVertex(HookFactory):
        _name = "hknpDecoratorShapeFunctions::getSupportingVertex"
    class makeShapeKeyMask(HookFactory):
        _name = "hknpDecoratorShapeFunctions::makeShapeKeyMask"
    class queryPoint(HookFactory):
        _name = "hknpDecoratorShapeFunctions::queryPoint"

class hknpShapeInstance:
    class _setShapeNoReduceCurrentRefCount(HookFactory):
        _name = "hknpShapeInstance::_setShapeNoReduceCurrentRefCount"
    class calculateAabb(HookFactory):
        _name = "hknpShapeInstance::calculateAabb"
    class getFullTransform(HookFactory):
        _name = "hknpShapeInstance::getFullTransform"
    class getFullTransformInverse(HookFactory):
        _name = "hknpShapeInstance::getFullTransformInverse"
    class setScale(HookFactory):
        _name = "hknpShapeInstance::setScale"
    class setShape(HookFactory):
        _name = "hknpShapeInstance::setShape"
    class setTransform(HookFactory):
        _name = "hknpShapeInstance::setTransform"

class hknpCompoundShapeEx:
    class queryPointImpl(HookFactory):
        _templates = ("T0", )
        _name = "hknpCompoundShapeEx::queryPointImpl<{T0}>"
    class calcLocalRayAndQueryAabbHalfExtents(HookFactory):
        _name = "hknpCompoundShapeEx::calcLocalRayAndQueryAabbHalfExtents"
    class calcQueryToTargetTransformWithScale(HookFactory):
        _name = "hknpCompoundShapeEx::calcQueryToTargetTransformWithScale"
    class onChildShapeDestroyed(HookFactory):
        _name = "hknpCompoundShapeEx::onChildShapeDestroyed"
    class onChildShapeMutated(HookFactory):
        _name = "hknpCompoundShapeEx::onChildShapeMutated"
    class ClosestPointsToConvexQuery:
        class processInstance(HookFactory):
            _templates = ("T0", )
            _name = "hknpCompoundShapeEx::ClosestPointsToConvexQuery<{T0}>::processInstance"
    class PointDistanceQuery:
        class processInstance(HookFactory):
            _templates = ("T0", )
            _name = "hknpCompoundShapeEx::PointDistanceQuery<{T0}>::processInstance"
    class ShapeCast:
        class processInstance(HookFactory):
            _templates = ("T0", )
            _name = "hknpCompoundShapeEx::ShapeCast<{T0}>::processInstance"
    class MassProvider:
        class getMass(HookFactory):
            _name = "hknpCompoundShapeEx::MassProvider::getMass"
        class getNumMasses(HookFactory):
            _name = "hknpCompoundShapeEx::MassProvider::getNumMasses"
    class getMemoryFootprintImpl(HookFactory):
        _name = "hknpCompoundShapeEx::getMemoryFootprintImpl"

class hknpHitScalingCollector:
    class addHit(HookFactory):
        _name = "hknpHitScalingCollector::addHit"
    class reset(HookFactory):
        _name = "hknpHitScalingCollector::reset"

class hknpMaterial:
    class hknpMaterial(HookFactory):
        _name = "hknpMaterial::hknpMaterial"
        _overload: overloads.hknpMaterial.hknpMaterial.overloads = "hknpMaterial *, const hknpMaterial *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpMaterial.hknpMaterial.overloads):
            cls._overload = overload_args
            return cls
    class synchronizeFlags(HookFactory):
        _name = "hknpMaterial::synchronizeFlags"

class hkcdStaticMeshTree:
    class Base:
        class Base(HookFactory):
            _name = "hkcdStaticMeshTree::Base::Base"
        class commitValidKeyMasks(HookFactory):
            _name = "hkcdStaticMeshTree::Base::commitValidKeyMasks"
        class initializeValidKeyMasks(HookFactory):
            _name = "hkcdStaticMeshTree::Base::initializeValidKeyMasks"
    class Connectivity:
        class Connectivity(HookFactory):
            _name = "hkcdStaticMeshTree::Connectivity::Connectivity"
        class link(HookFactory):
            _name = "hkcdStaticMeshTree::Connectivity::link"
        class reset(HookFactory):
            _name = "hkcdStaticMeshTree::Connectivity::reset"
    class BuildStepUtils:
        class buildStep12(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::BuildStepUtils::buildStep12<{T0}>"
        class buildStep3(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::BuildStepUtils::buildStep3<{T0}>"
        class computeConnectivity(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::BuildStepUtils::computeConnectivity<{T0}>"
        class DynamicTree:
            class DynamicTree(HookFactory):
                _name = "hkcdStaticMeshTree::BuildStepUtils::DynamicTree::DynamicTree"
        class QuantizersInfos:
            class QuantizersInfos(HookFactory):
                _name = "hkcdStaticMeshTree::BuildStepUtils::QuantizersInfos::QuantizersInfos"
        class HalfEdge:
            class compare(HookFactory):
                _name = "hkcdStaticMeshTree::BuildStepUtils::HalfEdge::compare"
        class fetchPrimitiveIndices(HookFactory):
            _name = "hkcdStaticMeshTree::BuildStepUtils::fetchPrimitiveIndices"
        class Quad:
            class index(HookFactory):
                _name = "hkcdStaticMeshTree::BuildStepUtils::Quad::index"
    class SectionDecoder:
        class CustomGeometryConverterBase:
            class appendCustomPrimitiveToGeometry(HookFactory):
                _templates = ("T0", )
                _name = "hkcdStaticMeshTree::SectionDecoder<{T0}>::CustomGeometryConverterBase::appendCustomPrimitiveToGeometry"
            class getScale(HookFactory):
                _templates = ("T0", )
                _name = "hkcdStaticMeshTree::SectionDecoder<{T0}>::CustomGeometryConverterBase::getScale"
        class convertToGeometry(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::SectionDecoder<{T0}>::convertToGeometry"
        class getQuadVertices(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::SectionDecoder<{T0}>::getQuadVertices"
    class Builder:
        class build(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::Builder<{T0}>::build"
        class buildConnectivity(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::Builder<{T0}>::buildConnectivity"
        class buildSimdTree(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticMeshTree::Builder<{T0}>::buildSimdTree"
    class GeometryProvider:
        class GeometryProvider(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::GeometryProvider"
        class finalize(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::finalize"
        class getCustomPrimitiveDataImpl(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::getCustomPrimitiveDataImpl"
        class getCustomPrimitiveInfos(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::getCustomPrimitiveInfos"
        class getCustomPrimitiveVertex(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::getCustomPrimitiveVertex"
        class getIndices(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::getIndices"
        class getVertices(HookFactory):
            _name = "hkcdStaticMeshTree::GeometryProvider::getVertices"

class hkcdDefaultStaticMeshTree:
    class hkcdDefaultStaticMeshTree(HookFactory):
        _name = "hkcdDefaultStaticMeshTree::hkcdDefaultStaticMeshTree"

class hkcdStaticTree:
    class AabbTree:
        class findLeafByValue(HookFactory):
            _templates = ("T0", )
            _name = "hkcdStaticTree::AabbTree<{T0}>::findLeafByValue"

class hknpShapeCastQueryEx:
    class transformRotation(HookFactory):
        _name = "hknpShapeCastQueryEx::transformRotation"

class hknpDragProperties:
    class hknpDragProperties(HookFactory):
        _name = "hknpDragProperties::hknpDragProperties"

class hknpAllHitsCollector:
    class getHits(HookFactory):
        _name = "hknpAllHitsCollector::getHits"
    class reset(HookFactory):
        _name = "hknpAllHitsCollector::reset"
    class addHit(HookFactory):
        _name = "hknpAllHitsCollector::addHit"
    class sortHits(HookFactory):
        _name = "hknpAllHitsCollector::sortHits"

class hkcdTreeFilterUtils:
    class computeValidBranchesMask(HookFactory):
        _templates = ("T0", )
        _name = "hkcdTreeFilterUtils::computeValidBranchesMask<{T0}>"

class hknpExternMeshShapeBuildContext:
    class hknpExternMeshShapeBuildContext(HookFactory):
        _name = "hknpExternMeshShapeBuildContext::hknpExternMeshShapeBuildContext"

class queryAabbCompositeImpl(HookFactory):
    _templates = ("T0", )
    _name = "queryAabbCompositeImpl<{T0}>"

class queryAabbConvexImpl(HookFactory):
    _templates = ("T0", )
    _name = "queryAabbConvexImpl<{T0}>"

class hknpTransformedShapeEx:
    class applyScaleAndTransformToMassProperties(HookFactory):
        _name = "hknpTransformedShapeEx::applyScaleAndTransformToMassProperties"

class hkBridgeConstraintAtom_callData(HookFactory):
    _name = "hkBridgeConstraintAtom_callData"

class hknp6DofConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getConstraintInfo"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getInertiaStabilizationFactor"
    class getRuntimeInfo(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::setInertiaStabilizationFactor"
    class updateDirtyAtoms(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::updateDirtyAtoms"
    class getReflectType(HookFactory):
        _name = "hknp6DofConstraintDataFunctions::getReflectType"

class hknpEllipticalLimitConstraintAtom:
    class makeStableByUsingConeAngle(HookFactory):
        _name = "hknpEllipticalLimitConstraintAtom::makeStableByUsingConeAngle"

class hknpCogWheelConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getConstraintInfo(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpCogWheelConstraintDataFunctions::getReflectType"

class hknpRotationalConstraintDataFunctions:
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::getAppliedLinearImpulse"
    class getRuntimeInfo(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::getRuntimeInfo"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getConstraintInfo(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::getConstraintInfo"
    class isValid(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpRotationalConstraintDataFunctions::getReflectType"

class hknpAngularFrictionConstraintDataFunctions:
    class getConstraintInfo(HookFactory):
        _name = "hknpAngularFrictionConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpAngularFrictionConstraintDataFunctions::getRuntimeInfo"
    class makeClone(HookFactory):
        _name = "hknpAngularFrictionConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpAngularFrictionConstraintDataFunctions::getReflectType"

class hknpPointToPlaneConstraintDataFunctions:
    class isValid(HookFactory):
        _name = "hknpPointToPlaneConstraintDataFunctions::isValid"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpPointToPlaneConstraintDataFunctions::getAppliedLinearImpulse"
    class makeClone(HookFactory):
        _name = "hknpPointToPlaneConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpPointToPlaneConstraintDataFunctions::getReflectType"

class hknpStiffSpringConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getRuntimeInfo(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::getRuntimeInfo"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::getAppliedLinearImpulse"
    class isValid(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpStiffSpringConstraintDataFunctions::getReflectType"

class hknpDeformableFixedConstraintDataFunctions:
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpDeformableFixedConstraintDataFunctions::getAppliedLinearImpulse"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpDeformableFixedConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class makeClone(HookFactory):
        _name = "hknpDeformableFixedConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpDeformableFixedConstraintDataFunctions::getReflectType"

class hknpBallAndSocketConstraintDataFunctions:
    class getConstraintInfo(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::getConstraintInfo"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::getInertiaStabilizationFactor"
    class getMaximumAngularImpulse(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::getMaximumAngularImpulse"
    class getMaximumLinearImpulse(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::getMaximumLinearImpulse"
    class makeClone(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::setInertiaStabilizationFactor"
    class setMaximumAngularImpulse(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::setMaximumAngularImpulse"
    class setMaximumLinearImpulse(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::setMaximumLinearImpulse"
    class getReflectType(HookFactory):
        _name = "hknpBallAndSocketConstraintDataFunctions::getReflectType"

class hknpLinearClearanceConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpLinearClearanceConstraintDataFunctions::getReflectType"

class hknpFixedConstraintDataFunctions:
    class getRuntimeInfo(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getRuntimeInfo"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getInertiaStabilizationFactor"
    class getMaximumAngularImpulse(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getMaximumAngularImpulse"
    class getMaximumLinearImpulse(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getMaximumLinearImpulse"
    class makeClone(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::setInertiaStabilizationFactor"
    class setMaximumAngularImpulse(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::setMaximumAngularImpulse"
    class setMaximumLinearImpulse(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::setMaximumLinearImpulse"
    class getReflectType(HookFactory):
        _name = "hknpFixedConstraintDataFunctions::getReflectType"

class hknpHingeConstraintDataFunctions:
    class getConstraintInfo(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getConstraintInfo"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getAppliedLinearImpulse"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getInertiaStabilizationFactor"
    class getRuntimeInfo(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getRuntimeInfo"
    class makeClone(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::setInertiaStabilizationFactor"
    class getReflectType(HookFactory):
        _name = "hknpHingeConstraintDataFunctions::getReflectType"

class hknpLimitedHingeConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getConstraintInfo"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getInertiaStabilizationFactor"
    class getRuntimeInfo(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::setInertiaStabilizationFactor"
    class getReflectType(HookFactory):
        _name = "hknpLimitedHingeConstraintDataFunctions::getReflectType"

class hknpPointToPathConstraintDataFunctions:
    class buildJacobian(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::buildJacobian"
    class getConstraintInfo(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpPointToPathConstraintDataFunctions::getReflectType"

class hknpPrismaticConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::getAppliedLinearImpulse"
    class getRuntimeInfo(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpPrismaticConstraintDataFunctions::getReflectType"

class hknpPulleyConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::getConstraintInfo"
    class isValid(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpPulleyConstraintDataFunctions::getReflectType"

class hknpRackAndPinionConstraintDataFunctions:
    class getRuntimeInfo(HookFactory):
        _name = "hknpRackAndPinionConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpRackAndPinionConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpRackAndPinionConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpRackAndPinionConstraintDataFunctions::getReflectType"

class hknpRagdollConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getConstraintInfo"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getInertiaStabilizationFactor"
    class getRuntimeInfo(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::setInertiaStabilizationFactor"
    class getReflectType(HookFactory):
        _name = "hknpRagdollConstraintDataFunctions::getReflectType"

class hknpWheelFrictionConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::getAppliedLinearImpulse"
    class getRuntimeInfo(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpWheelFrictionConstraintDataFunctions::getReflectType"

class hknpWheelConstraintDataFunctions:
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::getConstraintInfo"
    class isValid(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::makeClone"
    class getReflectType(HookFactory):
        _name = "hknpWheelConstraintDataFunctions::getReflectType"

class hknpWrappedConstraintDataFunctions:
    class enableDirectSolver(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::enableDirectSolver"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::getRuntimeInfo"
    class updateDirtyAtoms(HookFactory):
        _name = "hknpWrappedConstraintDataFunctions::updateDirtyAtoms"

class hknpParticlesColliderCinfo:
    class hknpParticlesColliderCinfo(HookFactory):
        _name = "hknpParticlesColliderCinfo::hknpParticlesColliderCinfo"
        _overload: overloads.hknpParticlesColliderCinfo.hknpParticlesColliderCinfo.overloads = "hknpParticlesColliderCinfo *, const hknpParticlesColliderCinfo *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpParticlesColliderCinfo.hknpParticlesColliderCinfo.overloads):
            cls._overload = overload_args
            return cls

class hknpFirstPersonCharacterCinfo:
    class hknpFirstPersonCharacterCinfo(HookFactory):
        _name = "hknpFirstPersonCharacterCinfo::hknpFirstPersonCharacterCinfo"

class hknpCharacterProxyInternals:
    class QueryCollector:
        class QueryCollector(HookFactory):
            _name = "hknpCharacterProxyInternals::QueryCollector::QueryCollector"
        class addHit(HookFactory):
            _name = "hknpCharacterProxyInternals::QueryCollector::addHit"
        class getHits(HookFactory):
            _name = "hknpCharacterProxyInternals::QueryCollector::getHits"
        class reset(HookFactory):
            _name = "hknpCharacterProxyInternals::QueryCollector::reset"
    class resolveContacts(HookFactory):
        _name = "hknpCharacterProxyInternals::resolveContacts"
    class updateOverlappingTriggers(HookFactory):
        _name = "hknpCharacterProxyInternals::updateOverlappingTriggers"
    class updateTriggersSeen(HookFactory):
        _name = "hknpCharacterProxyInternals::updateTriggersSeen"
    class addMaxSlopePlane(HookFactory):
        _name = "hknpCharacterProxyInternals::addMaxSlopePlane"
    class compareContacts(HookFactory):
        _name = "hknpCharacterProxyInternals::compareContacts"
    class createConstraintsFromManifold(HookFactory):
        _name = "hknpCharacterProxyInternals::createConstraintsFromManifold"
    class createSurfaceConstraint(HookFactory):
        _name = "hknpCharacterProxyInternals::createSurfaceConstraint"
    class findContact(HookFactory):
        _name = "hknpCharacterProxyInternals::findContact"
    class updateManifold(HookFactory):
        _name = "hknpCharacterProxyInternals::updateManifold"
    class validateManifold(HookFactory):
        _name = "hknpCharacterProxyInternals::validateManifold"
    class fireCharacterInteraction(HookFactory):
        _name = "hknpCharacterProxyInternals::fireCharacterInteraction"
    class fireConstraintsProcessed(HookFactory):
        _name = "hknpCharacterProxyInternals::fireConstraintsProcessed"
    class fireContactAdded(HookFactory):
        _name = "hknpCharacterProxyInternals::fireContactAdded"
    class fireContactRemoved(HookFactory):
        _name = "hknpCharacterProxyInternals::fireContactRemoved"
    class fireObjectInteraction(HookFactory):
        _name = "hknpCharacterProxyInternals::fireObjectInteraction"
    class fireShapeChanged(HookFactory):
        _name = "hknpCharacterProxyInternals::fireShapeChanged"
    class fireTriggerVolumeInteraction(HookFactory):
        _name = "hknpCharacterProxyInternals::fireTriggerVolumeInteraction"

class hknpCharacterRigidBody:
    class hknpCharacterRigidBody(HookFactory):
        _name = "hknpCharacterRigidBody::hknpCharacterRigidBody"
    class addImmediateContactConstraint(HookFactory):
        _name = "hknpCharacterRigidBody::addImmediateContactConstraint"
    class checkSupport(HookFactory):
        _name = "hknpCharacterRigidBody::checkSupport"
    class findSupportingContacts(HookFactory):
        _name = "hknpCharacterRigidBody::findSupportingContacts"
    class getGround(HookFactory):
        _name = "hknpCharacterRigidBody::getGround"
    class onCollisionDetected(HookFactory):
        _name = "hknpCharacterRigidBody::onCollisionDetected"
        _overload: overloads.hknpCharacterRigidBody.onCollisionDetected.overloads = "hknpCharacterRigidBody *, const hknpEventHandlerInput *, const hknpBinaryBodyEvent *, hknpManifoldCollisionCache *, const hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant> *, const hkVector4f *, const hkVector4f *, const hkSimdFloat32 *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCharacterRigidBody.onCollisionDetected.overloads):
            cls._overload = overload_args
            return cls
    class onCollisionDetectedForwarder(HookFactory):
        _name = "hknpCharacterRigidBody::onCollisionDetectedForwarder"
    class onPostCollideSignal(HookFactory):
        _name = "hknpCharacterRigidBody::onPostCollideSignal"
    class onPotentialManifold(HookFactory):
        _name = "hknpCharacterRigidBody::onPotentialManifold"
    class onPreCollideSignal(HookFactory):
        _name = "hknpCharacterRigidBody::onPreCollideSignal"
    class setAngularVelocity(HookFactory):
        _name = "hknpCharacterRigidBody::setAngularVelocity"
    class setLinearVelocity(HookFactory):
        _name = "hknpCharacterRigidBody::setLinearVelocity"
    class setListener(HookFactory):
        _name = "hknpCharacterRigidBody::setListener"
    class setTransform(HookFactory):
        _name = "hknpCharacterRigidBody::setTransform"
    class subscribeWorldSignals(HookFactory):
        _name = "hknpCharacterRigidBody::subscribeWorldSignals"

class FileCaptureWriter:
    class PassAudioData(HookFactory):
        _name = "FileCaptureWriter::PassAudioData"
    class Destroy(HookFactory):
        _name = "FileCaptureWriter::Destroy"
    class StartCapture(HookFactory):
        _name = "FileCaptureWriter::StartCapture"
    class StopCapture(HookFactory):
        _name = "FileCaptureWriter::StopCapture"
    class WriteGenericData(HookFactory):
        _name = "FileCaptureWriter::WriteGenericData"

class hknp1dAngularFollowCamCinfo:
    class CameraSet:
        class CameraSet(HookFactory):
            _name = "hknp1dAngularFollowCamCinfo::CameraSet::CameraSet"
    class hknp1dAngularFollowCamCinfo(HookFactory):
        _name = "hknp1dAngularFollowCamCinfo::hknp1dAngularFollowCamCinfo"

class hknpMultiFrameWorldSnapshot:
    class hknpMultiFrameWorldSnapshot(HookFactory):
        _name = "hknpMultiFrameWorldSnapshot::hknpMultiFrameWorldSnapshot"

class hknpShapeUtil:
    class buildAabbMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildAabbMassProperties"
    class buildBoxMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildBoxMassProperties"
    class buildCapsuleMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildCapsuleMassProperties"
    class buildCylinderMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildCylinderMassProperties"
    class buildHullMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildHullMassProperties"
    class buildHullMassPropertiesFromVertices(HookFactory):
        _name = "hknpShapeUtil::buildHullMassPropertiesFromVertices"
    class buildPolygonMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildPolygonMassProperties"
    class buildQuadMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildQuadMassProperties"
    class buildShapeDisplayGeometries(HookFactory):
        _name = "hknpShapeUtil::buildShapeDisplayGeometries"
    class buildShapeMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildShapeMassProperties"
    class buildSphereMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildSphereMassProperties"
    class buildTriangleMassProperties(HookFactory):
        _name = "hknpShapeUtil::buildTriangleMassProperties"
    class calcAabbWithScale(HookFactory):
        _name = "hknpShapeUtil::calcAabbWithScale"
    class calcInnerSphereAabb(HookFactory):
        _name = "hknpShapeUtil::calcInnerSphereAabb"
    class calcInnerSphereConvex(HookFactory):
        _name = "hknpShapeUtil::calcInnerSphereConvex"
    class calcScalingParameters(HookFactory):
        _name = "hknpShapeUtil::calcScalingParameters"
    class createConvexHullEdges(HookFactory):
        _name = "hknpShapeUtil::createConvexHullEdges"
    class createConvexHullGeometry(HookFactory):
        _name = "hknpShapeUtil::createConvexHullGeometry"
        _overload: overloads.hknpShapeUtil.createConvexHullGeometry.overloads = "const hknpConvexHull *, float, __int64, const hkVector4f *, const hkVector4f *, hkGeometry *, hkGeometry *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hknpShapeUtil.createConvexHullGeometry.overloads):
            cls._overload = overload_args
            return cls
    class getSignedDistanceContactsImpl(HookFactory):
        _name = "hknpShapeUtil::getSignedDistanceContactsImpl"
    class queryPointUsingSphereShape(HookFactory):
        _name = "hknpShapeUtil::queryPointUsingSphereShape"

class getEdgeSdfContactPoints(HookFactory):
    _name = "getEdgeSdfContactPoints"

class hknpForwardClosestHitCollector:
    class addHit(HookFactory):
        _name = "hknpForwardClosestHitCollector::addHit"

class hknpShapeKeyMaskNullFunctions:
    class commitChanges(HookFactory):
        _name = "hknpShapeKeyMaskNullFunctions::commitChanges"
    class makeClone(HookFactory):
        _name = "hknpShapeKeyMaskNullFunctions::makeClone"
    class reset(HookFactory):
        _name = "hknpShapeKeyMaskNullFunctions::reset"

class GetClosestPointsToConvexSelectQuery:
    class isCollisionEnabled(HookFactory):
        _name = "GetClosestPointsToConvexSelectQuery::isCollisionEnabled"

class QueryPointsSelectSectionQuery:
    class isCollisionEnabled(HookFactory):
        _name = "QueryPointsSelectSectionQuery::isCollisionEnabled"

class ShapeCastSelectSectionQuery:
    class isCollisionEnabled(HookFactory):
        _name = "ShapeCastSelectSectionQuery::isCollisionEnabled"

class hknpHeightFieldShape_queryAabb_hkArray_hkHandle_unsigned_int_4294967295_hknpShapeKeyDiscriminant__hkBuiltinContainerAllocator_0_0____0_(HookFactory):
    _name = "hknpHeightFieldShape_queryAabb_hkArray_hkHandle_unsigned_int_4294967295_hknpShapeKeyDiscriminant__hkBuiltinContainerAllocator_0_0____0_"

class hknpHeightFieldShape_queryAabb_hknpCollisionQueryCollector_1_(HookFactory):
    _name = "hknpHeightFieldShape_queryAabb_hknpCollisionQueryCollector_1_"

class hknpHeightFieldShape_queryAabb_hknpCollisionQueryCollector_0_(HookFactory):
    _name = "hknpHeightFieldShape_queryAabb_hknpCollisionQueryCollector_0_"

class hknpFlippedGetClosestPointsQueryCollector:
    class addHit(HookFactory):
        _name = "hknpFlippedGetClosestPointsQueryCollector::addHit"
    class reset(HookFactory):
        _name = "hknpFlippedGetClosestPointsQueryCollector::reset"

class hknpHeightFieldShape_calcClosestDistanceSquaredLowerEstimate(HookFactory):
    _name = "hknpHeightFieldShape_calcClosestDistanceSquaredLowerEstimate"

class hknpHeightFieldShape_castShape(HookFactory):
    _name = "hknpHeightFieldShape_castShape"

class hknpHeightFieldShape_getClosestPoints(HookFactory):
    _name = "hknpHeightFieldShape_getClosestPoints"

class hknpHeightFieldShape_getClosestPointsToHeightfield(HookFactory):
    _name = "hknpHeightFieldShape_getClosestPointsToHeightfield"

class hknpCompoundShapeFunctions_castShapeImpl(HookFactory):
    _name = "hknpCompoundShapeFunctions_castShapeImpl"

class hknpFlippedShapeCastQueryCollector:
    class addHit(HookFactory):
        _name = "hknpFlippedShapeCastQueryCollector::addHit"
    class reset(HookFactory):
        _name = "hknpFlippedShapeCastQueryCollector::reset"

class hknpClosestPointFuncs:
    class compositeVsShape(HookFactory):
        _name = "hknpClosestPointFuncs::compositeVsShape"
    class compoundVsCompound(HookFactory):
        _name = "hknpClosestPointFuncs::compoundVsCompound"
    class compoundVsShape(HookFactory):
        _name = "hknpClosestPointFuncs::compoundVsShape"
    class compressedMeshVsCompressedMesh(HookFactory):
        _name = "hknpClosestPointFuncs::compressedMeshVsCompressedMesh"
    class convexVsCompound(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsCompound"
    class convexVsCompressedMesh(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsCompressedMesh"
    class convexVsConvex(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsConvex"
    class convexVsExternMesh(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsExternMesh"
    class convexVsHeightField(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsHeightField"
    class convexVsMesh(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsMesh"
    class convexVsParticleSystem(HookFactory):
        _name = "hknpClosestPointFuncs::convexVsParticleSystem"
    class externMeshVsShape(HookFactory):
        _name = "hknpClosestPointFuncs::externMeshVsShape"
    class heightFieldVsCompressedMesh(HookFactory):
        _name = "hknpClosestPointFuncs::heightFieldVsCompressedMesh"
    class heightFieldVsHeightfield(HookFactory):
        _name = "hknpClosestPointFuncs::heightFieldVsHeightfield"
    class particlesVsShape(HookFactory):
        _name = "hknpClosestPointFuncs::particlesVsShape"

class hknpSpatialQueryUtil:
    class calcQueryToTargetTransformWithScale(HookFactory):
        _name = "hknpSpatialQueryUtil::calcQueryToTargetTransformWithScale"

class hknpDeflectedLinearCast:
    class CheckStartCollector:
        class addHit(HookFactory):
            _name = "hknpDeflectedLinearCast::CheckStartCollector::addHit"
    class FilteredQueryCollector:
        class addHit(HookFactory):
            _name = "hknpDeflectedLinearCast::FilteredQueryCollector::addHit"
    class QueryFilter:
        class getLodInfo(HookFactory):
            _name = "hknpDeflectedLinearCast::QueryFilter::getLodInfo"
        class isCollisionEnabled(HookFactory):
            _name = "hknpDeflectedLinearCast::QueryFilter::isCollisionEnabled"
            _overload: overloads.hknpDeflectedLinearCast.QueryFilter.isCollisionEnabled.overloads = "hknpDeflectedLinearCast::QueryFilter *, __int64, const hknpQueryFilterData *, const hknpBody *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpDeflectedLinearCast.QueryFilter.isCollisionEnabled.overloads):
                cls._overload = overload_args
                return cls
    class linearCast(HookFactory):
        _name = "hknpDeflectedLinearCast::linearCast"

class hknpContactSolverEvent:
    class calculateManifold(HookFactory):
        _name = "hknpContactSolverEvent::calculateManifold"
    class calculateToi(HookFactory):
        _name = "hknpContactSolverEvent::calculateToi"

class hknpConstraintForceEvent:
    class printCommand(HookFactory):
        _name = "hknpConstraintForceEvent::printCommand"

class hknpConstraintForceExceededEvent:
    class printCommand(HookFactory):
        _name = "hknpConstraintForceExceededEvent::printCommand"

class hknpContactImpulseClippedEvent:
    class printCommand(HookFactory):
        _name = "hknpContactImpulseClippedEvent::printCommand"

class hknpContactImpulseEvent:
    class printCommand(HookFactory):
        _name = "hknpContactImpulseEvent::printCommand"

class hknpDeflectedLinearCastCollisionEvent:
    class printCommand(HookFactory):
        _name = "hknpDeflectedLinearCastCollisionEvent::printCommand"

class hknpFullCastCollisionEvent:
    class printCommand(HookFactory):
        _name = "hknpFullCastCollisionEvent::printCommand"

class hknpLinearIntegrationClippedEvent:
    class printCommand(HookFactory):
        _name = "hknpLinearIntegrationClippedEvent::printCommand"

class hkArrayBase__hknpWorldEx__updateMotionAndAttachedBodiesAfterModifyingTransform____2___BodyAabbAndId____growCapacity_hkBuiltinContainerAllocatorBase_(HookFactory):
    _name = "hkArrayBase__hknpWorldEx__updateMotionAndAttachedBodiesAfterModifyingTransform____2___BodyAabbAndId____growCapacity_hkBuiltinContainerAllocatorBase_"

class hknpWorldSignals:
    class hknpWorldSignals(HookFactory):
        _name = "hknpWorldSignals::hknpWorldSignals"

class hknpTaskGraph:
    class clear(HookFactory):
        _name = "hknpTaskGraph::clear"

class hknpWorldEx:
    class commitBroadphaseAdditions(HookFactory):
        _name = "hknpWorldEx::commitBroadphaseAdditions"
    class constraintCollisionFlagsChanged(HookFactory):
        _name = "hknpWorldEx::constraintCollisionFlagsChanged"
    class defaultBodyExitedSafeRegionBehavior(HookFactory):
        _name = "hknpWorldEx::defaultBodyExitedSafeRegionBehavior"
    class generateSolveTasks(HookFactory):
        _name = "hknpWorldEx::generateSolveTasks"
    class onBodyBufferChanged(HookFactory):
        _name = "hknpWorldEx::onBodyBufferChanged"
    class onConstraintBufferChanged(HookFactory):
        _name = "hknpWorldEx::onConstraintBufferChanged"
    class onMaterialCapacityChangedSignal(HookFactory):
        _name = "hknpWorldEx::onMaterialCapacityChangedSignal"
    class postCollide(HookFactory):
        _name = "hknpWorldEx::postCollide"
    class postSolve(HookFactory):
        _name = "hknpWorldEx::postSolve"
    class preCollide(HookFactory):
        _name = "hknpWorldEx::preCollide"
    class preSolve(HookFactory):
        _name = "hknpWorldEx::preSolve"
    class removeBodyFromMotion(HookFactory):
        _name = "hknpWorldEx::removeBodyFromMotion"
    class synchronizeConstraintBodyIds(HookFactory):
        _name = "hknpWorldEx::synchronizeConstraintBodyIds"
    class unregisterBodyAtActiveList(HookFactory):
        _name = "hknpWorldEx::unregisterBodyAtActiveList"
    class updateMotionAndAttachedBodiesAfterModifyingTransform(HookFactory):
        _name = "hknpWorldEx::updateMotionAndAttachedBodiesAfterModifyingTransform"
    class updateMotionMaxRotationPerStep(HookFactory):
        _name = "hknpWorldEx::updateMotionMaxRotationPerStep"

class hknpPropertyManager:
    class setProperty(HookFactory):
        _name = "hknpPropertyManager::setProperty"
    class clear(HookFactory):
        _name = "hknpPropertyManager::clear"
    class clearAllPropertiesFromItem(HookFactory):
        _name = "hknpPropertyManager::clearAllPropertiesFromItem"
    class clearProperty(HookFactory):
        _name = "hknpPropertyManager::clearProperty"
    class PropertyBuffer:
        class construct(HookFactory):
            _name = "hknpPropertyManager::PropertyBuffer::construct"
        class destruct(HookFactory):
            _name = "hknpPropertyManager::PropertyBuffer::destruct"

class hknpConstraintDataUtils:
    class getPivotIntern(HookFactory):
        _templates = ("T0", )
        _name = "hknpConstraintDataUtils::getPivotIntern<{T0}>"
    class getConstraintPivots(HookFactory):
        _name = "hknpConstraintDataUtils::getConstraintPivots"
    class getSolverImpulsesInSolverSpaceFromAtom(HookFactory):
        _name = "hknpConstraintDataUtils::getSolverImpulsesInSolverSpaceFromAtom"
    class isSupportedByDirectSolver(HookFactory):
        _name = "hknpConstraintDataUtils::isSupportedByDirectSolver"
    class transformPivot(HookFactory):
        _name = "hknpConstraintDataUtils::transformPivot"

class hkSingletonUtil__init_hknpConstraintDataFunctionsSingleton_(HookFactory):
    _name = "hkSingletonUtil__init_hknpConstraintDataFunctionsSingleton_"

class hknpConstraintDataFunctions:
    class hknpConstraintDataFunctions(HookFactory):
        _name = "hknpConstraintDataFunctions::hknpConstraintDataFunctions"
    class registerDefaults(HookFactory):
        _name = "hknpConstraintDataFunctions::registerDefaults"

class hknpBreakableConstraintDataFunctions:
    class getReflectType(HookFactory):
        _name = "hknpBreakableConstraintDataFunctions::getReflectType"
    class isValid(HookFactory):
        _name = "hknpBreakableConstraintDataFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpBreakableConstraintDataFunctions::makeClone"

class hknpMalleableConstraintDataFunctions:
    class getReflectType(HookFactory):
        _name = "hknpMalleableConstraintDataFunctions::getReflectType"
    class buildJacobian(HookFactory):
        _name = "hknpMalleableConstraintDataFunctions::buildJacobian"
    class getConstraintInfo(HookFactory):
        _name = "hknpMalleableConstraintDataFunctions::getConstraintInfo"
    class getRuntimeInfo(HookFactory):
        _name = "hknpMalleableConstraintDataFunctions::getRuntimeInfo"
    class makeClone(HookFactory):
        _name = "hknpMalleableConstraintDataFunctions::makeClone"

class hknpMotionUtil:
    class buildSolverVelocities(HookFactory):
        _name = "hknpMotionUtil::buildSolverVelocities"
    class calcFutureAabb(HookFactory):
        _name = "hknpMotionUtil::calcFutureAabb"
    class calcMotionMaxRotationPerStep(HookFactory):
        _name = "hknpMotionUtil::calcMotionMaxRotationPerStep"
    class gatherSolverVelocities(HookFactory):
        _name = "hknpMotionUtil::gatherSolverVelocities"
    class integrateMotionTransform(HookFactory):
        _name = "hknpMotionUtil::integrateMotionTransform"
    class updateBodyAfterMotionIntegration(HookFactory):
        _name = "hknpMotionUtil::updateBodyAfterMotionIntegration"
    class updateBodyAfterMotionIntegrationInternal(HookFactory):
        _name = "hknpMotionUtil::updateBodyAfterMotionIntegrationInternal"
    class updateBodyTransformFromMotion(HookFactory):
        _name = "hknpMotionUtil::updateBodyTransformFromMotion"
    class updateSweptBodyAabbWithMargin(HookFactory):
        _name = "hknpMotionUtil::updateSweptBodyAabbWithMargin"
    class applyDrag(HookFactory):
        _name = "hknpMotionUtil::applyDrag"
    class predictBodyTransform(HookFactory):
        _name = "hknpMotionUtil::predictBodyTransform"

class hkCalculateFrictionalEllipsoidScale(HookFactory):
    _name = "hkCalculateFrictionalEllipsoidScale"

class hknpVehicleFrictionSolver_buildJacobian(HookFactory):
    _name = "hknpVehicleFrictionSolver_buildJacobian"

class hknpVehicleFrictionApplyVehicleFriction(HookFactory):
    _name = "hknpVehicleFrictionApplyVehicleFriction"

class hknpVehicleFrictionDescriptionInitValues(HookFactory):
    _name = "hknpVehicleFrictionDescriptionInitValues"

class hknpBodyManager:
    class hknpBodyManager(HookFactory):
        _name = "hknpBodyManager::hknpBodyManager"
    class allocateBody(HookFactory):
        _name = "hknpBodyManager::allocateBody"
        _overload: overloads.hknpBodyManager.allocateBody.overloads = "hknpBodyManager *, _DWORD *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.hknpBodyManager.allocateBody.overloads):
            cls._overload = overload_args
            return cls
    class buildMassProperties(HookFactory):
        _name = "hknpBodyManager::buildMassProperties"
    class initialize(HookFactory):
        _name = "hknpBodyManager::initialize"
    class relocateBodyBuffer(HookFactory):
        _name = "hknpBodyManager::relocateBodyBuffer"
    class setBodyDragProperties(HookFactory):
        _name = "hknpBodyManager::setBodyDragProperties"
    class setBodyMassDistribution(HookFactory):
        _name = "hknpBodyManager::setBodyMassDistribution"
    class updatePreviousAabbsOfActiveBodies(HookFactory):
        _name = "hknpBodyManager::updatePreviousAabbsOfActiveBodies"

class hkArrayBase__anonymous_namespace___HalfEdge____growCapacity_hkBuiltinContainerAllocatorBase_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___HalfEdge____growCapacity_hkBuiltinContainerAllocatorBase_"

class hknpConvexHull:
    class calcAabb(HookFactory):
        _name = "hknpConvexHull::calcAabb"
        _overload: overloads.hknpConvexHull.calcAabb.overloads = "hknpConvexHull *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpConvexHull.calcAabb.overloads):
            cls._overload = overload_args
            return cls
    class calcBoundingRadius(HookFactory):
        _name = "hknpConvexHull::calcBoundingRadius"
    class calcConnectivity(HookFactory):
        _name = "hknpConvexHull::calcConnectivity"
    class calcFaceSupportHalfAngle(HookFactory):
        _name = "hknpConvexHull::calcFaceSupportHalfAngle"
    class calcMinAngleBetweenFaces(HookFactory):
        _name = "hknpConvexHull::calcMinAngleBetweenFaces"
    class convertVertexIdsToVertices(HookFactory):
        _name = "hknpConvexHull::convertVertexIdsToVertices"
    class getDimensions(HookFactory):
        _name = "hknpConvexHull::getDimensions"
    class getFaceVertices(HookFactory):
        _name = "hknpConvexHull::getFaceVertices"
    class getSupportingVertex(HookFactory):
        _name = "hknpConvexHull::getSupportingVertex"

class hkSingletonUtil__init_hknpGlobals_(HookFactory):
    _name = "hkSingletonUtil__init_hknpGlobals_"

class hknpGlobals:
    class hknpGlobals(HookFactory):
        _name = "hknpGlobals::hknpGlobals"

class hkSignal0:
    class fire(HookFactory):
        _name = "hkSignal0::fire"

class hknpShapeTransform:
    class transformVertices(HookFactory):
        _templates = ("T0", )
        _name = "hknpShapeTransform::transformVertices<{T0}>"

class hknpParticlesCollider:
    class castRay(HookFactory):
        _name = "hknpParticlesCollider::castRay"
    class queryAabb(HookFactory):
        _name = "hknpParticlesCollider::queryAabb"
    class queryPoint(HookFactory):
        _name = "hknpParticlesCollider::queryPoint"
    class addParticles(HookFactory):
        _name = "hknpParticlesCollider::addParticles"
    class disableParticles(HookFactory):
        _name = "hknpParticlesCollider::disableParticles"
    class enableParticles(HookFactory):
        _name = "hknpParticlesCollider::enableParticles"
    class getParticlesOutsideTheSafeRegion(HookFactory):
        _name = "hknpParticlesCollider::getParticlesOutsideTheSafeRegion"
    class rebuildParticleCollisionCaches(HookFactory):
        _name = "hknpParticlesCollider::rebuildParticleCollisionCaches"
    class removeParticles(HookFactory):
        _name = "hknpParticlesCollider::removeParticles"
    class shiftParticleCaches(HookFactory):
        _name = "hknpParticlesCollider::shiftParticleCaches"

class hknpPartitionTreeBuildContext:
    class hknpPartitionTreeBuildContext(HookFactory):
        _name = "hknpPartitionTreeBuildContext::hknpPartitionTreeBuildContext"

class hknpParticlesColliderEx:
    class getDomainAabb(HookFactory):
        _name = "hknpParticlesColliderEx::getDomainAabb"
    class getPartitionTree(HookFactory):
        _name = "hknpParticlesColliderEx::getPartitionTree"

class hknp1dAngularBilateralConstraintBuildJacobian(HookFactory):
    _name = "hknp1dAngularBilateralConstraintBuildJacobian"

class hknp1dAngularBilateralConstraintUserTauBuildJacobian(HookFactory):
    _name = "hknp1dAngularBilateralConstraintUserTauBuildJacobian"

class hknp1dLinearBilateralConstraintBuildJacobian(HookFactory):
    _name = "hknp1dLinearBilateralConstraintBuildJacobian"

class hknp1dLinearBilateralConstraintUserTauBuildJacobian(HookFactory):
    _name = "hknp1dLinearBilateralConstraintUserTauBuildJacobian"

class hknp1dLinearFrictionBuildJacobian(HookFactory):
    _name = "hknp1dLinearFrictionBuildJacobian"

class hknp1dLinearLimitBuildJacobian(HookFactory):
    _name = "hknp1dLinearLimitBuildJacobian"

class hknpSetInvMassBuildJacobian(HookFactory):
    _name = "hknpSetInvMassBuildJacobian"

class hknpCharacterProxyManager:
    class hknpCharacterProxyManager(HookFactory):
        _name = "hknpCharacterProxyManager::hknpCharacterProxyManager"
    class addCharacterProxy(HookFactory):
        _name = "hknpCharacterProxyManager::addCharacterProxy"
    class characterProxyDestroyed(HookFactory):
        _name = "hknpCharacterProxyManager::characterProxyDestroyed"
    class onWorldShifted(HookFactory):
        _name = "hknpCharacterProxyManager::onWorldShifted"

class hknpMassDistribution:
    class setFromShape(HookFactory):
        _name = "hknpMassDistribution::setFromShape"
    class setFromShapes(HookFactory):
        _name = "hknpMassDistribution::setFromShapes"

class hknpManifold:
    class init(HookFactory):
        _name = "hknpManifold::init"

class hknpContactJacobianUtil:
    class accessPointEffectiveMass(HookFactory):
        _name = "hknpContactJacobianUtil::accessPointEffectiveMass"
    class accessPointRhs(HookFactory):
        _name = "hknpContactJacobianUtil::accessPointRhs"
    class calculateManifold(HookFactory):
        _name = "hknpContactJacobianUtil::calculateManifold"
    class disableContacts(HookFactory):
        _name = "hknpContactJacobianUtil::disableContacts"
    class getBodyIdA(HookFactory):
        _name = "hknpContactJacobianUtil::getBodyIdA"
    class getBodyIdB(HookFactory):
        _name = "hknpContactJacobianUtil::getBodyIdB"
    class getBodyIndexA(HookFactory):
        _name = "hknpContactJacobianUtil::getBodyIndexA"
    class getBodyIndexB(HookFactory):
        _name = "hknpContactJacobianUtil::getBodyIndexB"
    class getManifoldType(HookFactory):
        _name = "hknpContactJacobianUtil::getManifoldType"
    class getNumContactPoints(HookFactory):
        _name = "hknpContactJacobianUtil::getNumContactPoints"
    class getShapeKeyA(HookFactory):
        _name = "hknpContactJacobianUtil::getShapeKeyA"
    class getShapeKeyB(HookFactory):
        _name = "hknpContactJacobianUtil::getShapeKeyB"
    class scaleEffectiveMass(HookFactory):
        _name = "hknpContactJacobianUtil::scaleEffectiveMass"
    class scaleFriction(HookFactory):
        _name = "hknpContactJacobianUtil::scaleFriction"
    class scalePenetrations(HookFactory):
        _name = "hknpContactJacobianUtil::scalePenetrations"
    class setMaxImpulse(HookFactory):
        _name = "hknpContactJacobianUtil::setMaxImpulse"
    class setSurfaceVelocity(HookFactory):
        _name = "hknpContactJacobianUtil::setSurfaceVelocity"

class CAkState:
    class InitNotificationSystem(HookFactory):
        _name = "CAkState::InitNotificationSystem"
    class AddRef(HookFactory):
        _name = "CAkState::AddRef"
    class Create(HookFactory):
        _name = "CAkState::Create"
    class Release(HookFactory):
        _name = "CAkState::Release"
    class SetInitialValues(HookFactory):
        _name = "CAkState::SetInitialValues"
    class TermNotificationSystem(HookFactory):
        _name = "CAkState::TermNotificationSystem"

class hknpSolverData:
    class SimpleMaterial:
        class SimpleMaterial(HookFactory):
            _name = "hknpSolverData::SimpleMaterial::SimpleMaterial"
    class hknpSolverData(HookFactory):
        _name = "hknpSolverData::hknpSolverData"
    class addImmediateContactConstraintUsingJacobian(HookFactory):
        _name = "hknpSolverData::addImmediateContactConstraintUsingJacobian"
    class beginStep(HookFactory):
        _name = "hknpSolverData::beginStep"
    class clear(HookFactory):
        _name = "hknpSolverData::clear"
    class endStep(HookFactory):
        _name = "hknpSolverData::endStep"

class hknpSingleThreadedSolverData:
    class hknpSingleThreadedSolverData(HookFactory):
        _name = "hknpSingleThreadedSolverData::hknpSingleThreadedSolverData"

class hknpManifoldEvent:
    class getNumContactPoints(HookFactory):
        _name = "hknpManifoldEvent::getNumContactPoints"
    class printCommand(HookFactory):
        _name = "hknpManifoldEvent::printCommand"

class hknpParticleBodyImpulseAppliedEvent:
    class printCommand(HookFactory):
        _name = "hknpParticleBodyImpulseAppliedEvent::printCommand"

class hknpParticleParticleImpulseAppliedEvent:
    class printCommand(HookFactory):
        _name = "hknpParticleParticleImpulseAppliedEvent::printCommand"

class hknpParticlesCollidedWithBodiesEvent:
    class printCommand(HookFactory):
        _name = "hknpParticlesCollidedWithBodiesEvent::printCommand"

class hknpParticlesCollidedWithParticlesEvent:
    class printCommand(HookFactory):
        _name = "hknpParticlesCollidedWithParticlesEvent::printCommand"

class hknpParticlesExitedSafeRegionEvent:
    class printCommand(HookFactory):
        _name = "hknpParticlesExitedSafeRegionEvent::printCommand"

class hknpReserved0Event:
    class printCommand(HookFactory):
        _name = "hknpReserved0Event::printCommand"

class hknpTriggerEvent:
    class printCommand(HookFactory):
        _name = "hknpTriggerEvent::printCommand"

class hknpConstraintManager:
    class hknpConstraintManager(HookFactory):
        _name = "hknpConstraintManager::hknpConstraintManager"
    class allocateConstraintGroup(HookFactory):
        _name = "hknpConstraintManager::allocateConstraintGroup"
    class checkGroupMotionCells(HookFactory):
        _name = "hknpConstraintManager::checkGroupMotionCells"
    class forceGroupToOneMotionCell(HookFactory):
        _name = "hknpConstraintManager::forceGroupToOneMotionCell"
        _overload: overloads.hknpConstraintManager.forceGroupToOneMotionCell.overloads = "hknpConstraintManager *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpConstraintManager.forceGroupToOneMotionCell.overloads):
            cls._overload = overload_args
            return cls
    class relocateConstraintBuffer(HookFactory):
        _name = "hknpConstraintManager::relocateConstraintBuffer"
    class removeFromGroup(HookFactory):
        _name = "hknpConstraintManager::removeFromGroup"

class hknpInplaceTriangleShape:
    class hknpInplaceTriangleShape(HookFactory):
        _name = "hknpInplaceTriangleShape::hknpInplaceTriangleShape"
        _overload: overloads.hknpInplaceTriangleShape.hknpInplaceTriangleShape.overloads = "hknpInplaceTriangleShape *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.hknpInplaceTriangleShape.hknpInplaceTriangleShape.overloads):
            cls._overload = overload_args
            return cls

class hknpShapeCollector:
    class getTriangleShape(HookFactory):
        _name = "hknpShapeCollector::getTriangleShape"

class hknpShapeQueryInterface:
    class castRay(HookFactory):
        _name = "hknpShapeQueryInterface::castRay"
    class castShape(HookFactory):
        _name = "hknpShapeQueryInterface::castShape"
        _overload: overloads.hknpShapeQueryInterface.castShape.overloads = "hknpCollisionQueryContext *, const hknpShapeCastQuery *, const hknpShapeQueryInfo *, const hknpShape *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hknpCollisionQueryCollector *, hknpCollisionQueryCollector *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpShapeQueryInterface.castShape.overloads):
            cls._overload = overload_args
            return cls
    class getClosestPoints(HookFactory):
        _name = "hknpShapeQueryInterface::getClosestPoints"

class hknpMeshShapeEx:
    class getNextMeshKey(HookFactory):
        _name = "hknpMeshShapeEx::getNextMeshKey"
    class getShapeTagForPrimitiveKey(HookFactory):
        _name = "hknpMeshShapeEx::getShapeTagForPrimitiveKey"

class hknpConvexShapeUtil:
    class getSupportingFace(HookFactory):
        _name = "hknpConvexShapeUtil::getSupportingFace"

class hknpExternMeshShapeUtil:
    class getClosestPointsToConvex(HookFactory):
        _name = "hknpExternMeshShapeUtil::getClosestPointsToConvex"

class hknpExternMeshShapeInternals:
    class GetClosestPointsToConvexQuery:
        class processLeaf(HookFactory):
            _name = "hknpExternMeshShapeInternals::GetClosestPointsToConvexQuery::processLeaf"

class hknpCollisionResult:
    class BodyInfo:
        class setNoLod(HookFactory):
            _templates = ("T0", )
            _name = "hknpCollisionResult::BodyInfo::setNoLod<{T0}>"

class hknpShapeCastFuncs:
    class castBoxQuad(HookFactory):
        _name = "hknpShapeCastFuncs::castBoxQuad"
    class castConvexConvexCalculateToi(HookFactory):
        _name = "hknpShapeCastFuncs::castConvexConvexCalculateToi"
    class castConvexConvexConservativeAdvancement(HookFactory):
        _name = "hknpShapeCastFuncs::castConvexConvexConservativeAdvancement"
    class castConvexConvexGsk(HookFactory):
        _name = "hknpShapeCastFuncs::castConvexConvexGsk"
    class castSphereQuad(HookFactory):
        _name = "hknpShapeCastFuncs::castSphereQuad"

class hknpParticleIndicesArray:
    class hknpParticleIndicesArray(HookFactory):
        _name = "hknpParticleIndicesArray::hknpParticleIndicesArray"

class hknpParticlesColliderManager:
    class hknpParticlesColliderManager(HookFactory):
        _name = "hknpParticlesColliderManager::hknpParticlesColliderManager"
    class allocateParticlesCollider(HookFactory):
        _name = "hknpParticlesColliderManager::allocateParticlesCollider"
    class clear(HookFactory):
        _name = "hknpParticlesColliderManager::clear"
    class postStepParticles(HookFactory):
        _name = "hknpParticlesColliderManager::postStepParticles"
    class queryParticlesOutsideTheAabb(HookFactory):
        _name = "hknpParticlesColliderManager::queryParticlesOutsideTheAabb"
    class shiftParticleCaches(HookFactory):
        _name = "hknpParticlesColliderManager::shiftParticleCaches"
    class updateParticleCachesOnBodyChange(HookFactory):
        _name = "hknpParticlesColliderManager::updateParticleCachesOnBodyChange"

class PostStepTask:
    class getName(HookFactory):
        _name = "PostStepTask::getName"
    class process(HookFactory):
        _name = "PostStepTask::process"

class PreStepTask:
    class getName(HookFactory):
        _name = "PreStepTask::getName"
    class process(HookFactory):
        _name = "PreStepTask::process"

class shapeContainsMesh(HookFactory):
    _name = "shapeContainsMesh"

class hknpDeactivationManager:
    class hknpDeactivationManager(HookFactory):
        _name = "hknpDeactivationManager::hknpDeactivationManager"
    class addDeactivatedCaches(HookFactory):
        _name = "hknpDeactivationManager::addDeactivatedCaches"
    class deactivateBodies(HookFactory):
        _name = "hknpDeactivationManager::deactivateBodies"
    class defragmentInactiveStreamsIncremental(HookFactory):
        _name = "hknpDeactivationManager::defragmentInactiveStreamsIncremental"
    class flushActivationEvents(HookFactory):
        _name = "hknpDeactivationManager::flushActivationEvents"
    class mergeIslands(HookFactory):
        _name = "hknpDeactivationManager::mergeIslands"
    class moveActivatedCaches(HookFactory):
        _name = "hknpDeactivationManager::moveActivatedCaches"
    class postCollideMaintenance(HookFactory):
        _name = "hknpDeactivationManager::postCollideMaintenance"
    class postSolveMaintenance(HookFactory):
        _name = "hknpDeactivationManager::postSolveMaintenance"
    class splitActivateIsland(HookFactory):
        _name = "hknpDeactivationManager::splitActivateIsland"

class hknpDeactivationStepInfo:
    class hknpDeactivationStepInfo(HookFactory):
        _name = "hknpDeactivationStepInfo::hknpDeactivationStepInfo"
    class addActiveBodyPairs(HookFactory):
        _name = "hknpDeactivationStepInfo::addActiveBodyPairs"
    class addActiveBodyPairsBegin(HookFactory):
        _name = "hknpDeactivationStepInfo::addActiveBodyPairsBegin"
    class addActiveBodyPairsEnd(HookFactory):
        _name = "hknpDeactivationStepInfo::addActiveBodyPairsEnd"
    class combineActivityBitFields(HookFactory):
        _name = "hknpDeactivationStepInfo::combineActivityBitFields"
    class getThreadData(HookFactory):
        _name = "hknpDeactivationStepInfo::getThreadData"

class hknpShapeManager:
    class hknpShapeManager(HookFactory):
        _name = "hknpShapeManager::hknpShapeManager"
    class clear(HookFactory):
        _name = "hknpShapeManager::clear"
    class deregisterBodyWithMutableShape(HookFactory):
        _name = "hknpShapeManager::deregisterBodyWithMutableShape"
    class MutableShapeInfo:
        class onShapeDestroyed(HookFactory):
            _name = "hknpShapeManager::MutableShapeInfo::onShapeDestroyed"
        class onShapeMutated(HookFactory):
            _name = "hknpShapeManager::MutableShapeInfo::onShapeMutated"
    class processMutatedShapes(HookFactory):
        _name = "hknpShapeManager::processMutatedShapes"
    class registerBodyWithMutableShape(HookFactory):
        _name = "hknpShapeManager::registerBodyWithMutableShape"

class hknpSimpleSimplexSolver:
    class examineActivePlanes(HookFactory):
        _name = "hknpSimpleSimplexSolver::examineActivePlanes"
    class Contact:
        class setContact(HookFactory):
            _name = "hknpSimpleSimplexSolver::Contact::setContact"

class hknpSimpleSimplexSolver__hkSimpleSimplexSolverSolve2d(HookFactory):
    _name = "hknpSimpleSimplexSolver__hkSimpleSimplexSolverSolve2d"

class hknpSimpleSimplexSolver__hkSimpleSimplexSolverSolve3d(HookFactory):
    _name = "hknpSimpleSimplexSolver__hkSimpleSimplexSolverSolve3d"

class hknpSolverUtil:
    class calculateProjectedPointVelocitiesUsingIntegratedVelocities(HookFactory):
        _name = "hknpSolverUtil::calculateProjectedPointVelocitiesUsingIntegratedVelocities"
    class solveSt(HookFactory):
        _name = "hknpSolverUtil::solveSt"

class hknpCollisionCacheStreams:
    class append(HookFactory):
        _name = "hknpCollisionCacheStreams::append"
    class clear(HookFactory):
        _name = "hknpCollisionCacheStreams::clear"
    class clearAndSteal(HookFactory):
        _name = "hknpCollisionCacheStreams::clearAndSteal"
    class init(HookFactory):
        _name = "hknpCollisionCacheStreams::init"
    class reset(HookFactory):
        _name = "hknpCollisionCacheStreams::reset"
    class hknpCollisionCacheStreams(HookFactory):
        _name = "hknpCollisionCacheStreams::hknpCollisionCacheStreams"

class hknpCollisionShapeKeyArrayCache:
    class construct(HookFactory):
        _name = "hknpCollisionShapeKeyArrayCache::construct"

class hknpApiCommandProcessor:
    class exec(HookFactory):
        _name = "hknpApiCommandProcessor::exec"
    class print(HookFactory):
        _name = "hknpApiCommandProcessor::print"

class hknpBodyToConstraintsMap:
    class hknpBodyToConstraintsMap(HookFactory):
        _name = "hknpBodyToConstraintsMap::hknpBodyToConstraintsMap"

class hknpMotionManager:
    class hknpMotionManager(HookFactory):
        _name = "hknpMotionManager::hknpMotionManager"
    class allocateMotion(HookFactory):
        _name = "hknpMotionManager::allocateMotion"
    class buildCellIndexToSolverIdMap(HookFactory):
        _name = "hknpMotionManager::buildCellIndexToSolverIdMap"
    class buildSolverIdToMotionIdMap(HookFactory):
        _name = "hknpMotionManager::buildSolverIdToMotionIdMap"
    class initialize(HookFactory):
        _name = "hknpMotionManager::initialize"

class hknpSolverInfo:
    class hknpSolverInfo(HookFactory):
        _name = "hknpSolverInfo::hknpSolverInfo"
    class setStepInfo(HookFactory):
        _name = "hknpSolverInfo::setStepInfo"
    class setTauAndDamping(HookFactory):
        _name = "hknpSolverInfo::setTauAndDamping"

class hknpSolverVelocityBuffer:
    class CacheAlignedBuffer:
        class clear(HookFactory):
            _name = "hknpSolverVelocityBuffer::CacheAlignedBuffer::clear"
        class setSizeBytes(HookFactory):
            _name = "hknpSolverVelocityBuffer::CacheAlignedBuffer::setSizeBytes"
    class reserve(HookFactory):
        _name = "hknpSolverVelocityBuffer::reserve"
    class setSize(HookFactory):
        _name = "hknpSolverVelocityBuffer::setSize"

class hknpBroadPhase:
    class create(HookFactory):
        _name = "hknpBroadPhase::create"
    class getClosestPointsParticles(HookFactory):
        _name = "hknpBroadPhase::getClosestPointsParticles"

class hknpCheckDeterminismUtilities:
    class baseQueryFilter(HookFactory):
        _templates = ("T0", )
        _name = "hknpCheckDeterminismUtilities::baseQueryFilter<{T0}>"
    class checkAabbCastQuery(HookFactory):
        _templates = ("T0", )
        _name = "hknpCheckDeterminismUtilities::checkAabbCastQuery<{T0}>"
    class checkAabbQuery(HookFactory):
        _templates = ("T0", )
        _name = "hknpCheckDeterminismUtilities::checkAabbQuery<{T0}>"
    class checkClosestPointsQuery(HookFactory):
        _templates = ("T0", )
        _name = "hknpCheckDeterminismUtilities::checkClosestPointsQuery<{T0}>"
    class QueryCheckingBroadPhase:
        class QueryCheckingBroadPhase(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::QueryCheckingBroadPhase"
        class appendHitsImpl(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::appendHitsImpl"
            _overload: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.appendHitsImpl.overloads = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase *, hkCheckDeterminismThreadData *, const hknpCollisionQueryCollector *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.appendHitsImpl.overloads):
                cls._overload = overload_args
                return cls
        class castAabb(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::castAabb"
            _overload: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.castAabb.overloads = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase *, const hknpAabbCastQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.castAabb.overloads):
                cls._overload = overload_args
                return cls
        class castRay(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::castRay"
        class castShape(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::castShape"
        class getClosestPoints(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::getClosestPoints"
        class getClosestPointsAdvanced(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::getClosestPointsAdvanced"
        class getClosestPointsParticles(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::getClosestPointsParticles"
        class queryAabb(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::queryAabb"
            _overload: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryAabb.overloads = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase *, const hknpAabbQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryAabb.overloads):
                cls._overload = overload_args
                return cls
        class queryAabbNmp(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::queryAabbNmp"
            _overload: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryAabbNmp.overloads = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase *, const hknpAabbQuery *, const hkAabb *, hkAabb *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryAabbNmp.overloads):
                cls._overload = overload_args
                return cls
        class queryOutsideOfAabb(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::queryOutsideOfAabb"
            _overload: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryOutsideOfAabb.overloads = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase *, const hknpAabbQuery *, hkArray<hknpBodyIndex,hkBuiltinContainerAllocator<0,0> > *"
            @classmethod
            def overload(cls, overload_args: overloads.hknpCheckDeterminismUtilities.QueryCheckingBroadPhase.queryOutsideOfAabb.overloads):
                cls._overload = overload_args
                return cls
        class queryPoint(HookFactory):
            _name = "hknpCheckDeterminismUtilities::QueryCheckingBroadPhase::queryPoint"

class constructFlipped__hknpConvexCompositeCollisionCache__construct_(HookFactory):
    _name = "constructFlipped__hknpConvexCompositeCollisionCache__construct_"

class constructFlipped__hknpSignedDistanceFieldCollisionCache__construct_(HookFactory):
    _name = "constructFlipped__hknpSignedDistanceFieldCollisionCache__construct_"

class hknpCollisionDispatcher:
    class hknpCollisionDispatcher(HookFactory):
        _name = "hknpCollisionDispatcher::hknpCollisionDispatcher"
    class dispatchBodyPairs(HookFactory):
        _name = "hknpCollisionDispatcher::dispatchBodyPairs"

class hknpNullShapeTagCodec:
    class hknpNullShapeTagCodec(HookFactory):
        _name = "hknpNullShapeTagCodec::hknpNullShapeTagCodec"
    class makeClone(HookFactory):
        _name = "hknpNullShapeTagCodec::makeClone"

class hknpCollisionCacheManager:
    class hknpCollisionCacheManager(HookFactory):
        _name = "hknpCollisionCacheManager::hknpCollisionCacheManager"
    class clear(HookFactory):
        _name = "hknpCollisionCacheManager::clear"
    class consumeForcedNewBodyPairs(HookFactory):
        _name = "hknpCollisionCacheManager::consumeForcedNewBodyPairs"
    class dispatchBodyPairs(HookFactory):
        _name = "hknpCollisionCacheManager::dispatchBodyPairs"
    class getLastFrameContactData(HookFactory):
        _name = "hknpCollisionCacheManager::getLastFrameContactData"

class hknpBodyQualityLibraryCinfo:
    class hknpBodyQualityLibraryCinfo(HookFactory):
        _name = "hknpBodyQualityLibraryCinfo::hknpBodyQualityLibraryCinfo"

class hknpDeactivationState:
    class checkMotionForDeactivation(HookFactory):
        _name = "hknpDeactivationState::checkMotionForDeactivation"
    class initDeactivationState(HookFactory):
        _name = "hknpDeactivationState::initDeactivationState"

class hknpInternalCollideSharedData:
    class hknpInternalCollideSharedData(HookFactory):
        _name = "hknpInternalCollideSharedData::hknpInternalCollideSharedData"

class hknpModifierSharedData:
    class initSt(HookFactory):
        _name = "hknpModifierSharedData::initSt"

class hknpModifierManager:
    class hknpModifierManager(HookFactory):
        _name = "hknpModifierManager::hknpModifierManager"
    class setCollisionDetector(HookFactory):
        _name = "hknpModifierManager::setCollisionDetector"

class hknpSimulationThreadContext:
    class hknpSimulationThreadContext(HookFactory):
        _name = "hknpSimulationThreadContext::hknpSimulationThreadContext"
    class finishStep(HookFactory):
        _name = "hknpSimulationThreadContext::finishStep"
    class initThreadContext(HookFactory):
        _name = "hknpSimulationThreadContext::initThreadContext"
    class initializeSharedBuffers(HookFactory):
        _name = "hknpSimulationThreadContext::initializeSharedBuffers"
    class resetCommandStreamAndWriter(HookFactory):
        _name = "hknpSimulationThreadContext::resetCommandStreamAndWriter"
    class shutdownThreadContext(HookFactory):
        _name = "hknpSimulationThreadContext::shutdownThreadContext"

class hknpCommandGrid:
    class dispatchCommands(HookFactory):
        _name = "hknpCommandGrid::dispatchCommands"

class hknpCsGrid:
    class allocateTemps(HookFactory):
        _name = "hknpCsGrid::allocateTemps"
    class freeTemps(HookFactory):
        _name = "hknpCsGrid::freeTemps"

class hknpSolverStep:
    class init(HookFactory):
        _name = "hknpSolverStep::init"

class hknpInternalCommandProcessor:
    class exec(HookFactory):
        _name = "hknpInternalCommandProcessor::exec"
    class flushRemainingEvents(HookFactory):
        _name = "hknpInternalCommandProcessor::flushRemainingEvents"
    class print(HookFactory):
        _name = "hknpInternalCommandProcessor::print"

class hknpUserCommandDispatcher:
    class hknpUserCommandDispatcher(HookFactory):
        _name = "hknpUserCommandDispatcher::hknpUserCommandDispatcher"
    class getFunctionForCmd(HookFactory):
        _name = "hknpUserCommandDispatcher::getFunctionForCmd"

class executeLambdaCommand(HookFactory):
    _name = "executeLambdaCommand"

class hknpEventDispatcher:
    class hknpEventDispatcher(HookFactory):
        _name = "hknpEventDispatcher::hknpEventDispatcher"
    class exec(HookFactory):
        _name = "hknpEventDispatcher::exec"
    class freeEntries(HookFactory):
        _name = "hknpEventDispatcher::freeEntries"
    class getSignal(HookFactory):
        _name = "hknpEventDispatcher::getSignal"
    class print(HookFactory):
        _name = "hknpEventDispatcher::print"

class hknpEventMergeAndDispatcher:
    class hknpEventMergeAndDispatcher(HookFactory):
        _name = "hknpEventMergeAndDispatcher::hknpEventMergeAndDispatcher"
    class exec(HookFactory):
        _name = "hknpEventMergeAndDispatcher::exec"
    class flushRemainingEvents(HookFactory):
        _name = "hknpEventMergeAndDispatcher::flushRemainingEvents"

class hknpSimulationContext:
    class allocateThreadContext(HookFactory):
        _name = "hknpSimulationContext::allocateThreadContext"
    class beginStep(HookFactory):
        _name = "hknpSimulationContext::beginStep"
    class dispatchCommandRange(HookFactory):
        _name = "hknpSimulationContext::dispatchCommandRange"
    class dispatchCommands(HookFactory):
        _name = "hknpSimulationContext::dispatchCommands"
    class dispatchHighPriorityCommands(HookFactory):
        _name = "hknpSimulationContext::dispatchHighPriorityCommands"
    class dispatchPostCollideCommands(HookFactory):
        _name = "hknpSimulationContext::dispatchPostCollideCommands"
    class finishStep(HookFactory):
        _name = "hknpSimulationContext::finishStep"
    class freeThreadContext(HookFactory):
        _name = "hknpSimulationContext::freeThreadContext"
    class init(HookFactory):
        _name = "hknpSimulationContext::init"

class hknpSingleThreadedSimulation:
    class collide(HookFactory):
        _name = "hknpSingleThreadedSimulation::collide"
    class solve(HookFactory):
        _name = "hknpSingleThreadedSimulation::solve"

class hknpDynamicSpaceSplitter:
    class hknpDynamicSpaceSplitter(HookFactory):
        _name = "hknpDynamicSpaceSplitter::hknpDynamicSpaceSplitter"
    class applyThreadData(HookFactory):
        _name = "hknpDynamicSpaceSplitter::applyThreadData"
    class calcInitialCellPositions(HookFactory):
        _name = "hknpDynamicSpaceSplitter::calcInitialCellPositions"
    class copyFrom(HookFactory):
        _name = "hknpDynamicSpaceSplitter::copyFrom"
    class getCellIdx(HookFactory):
        _name = "hknpDynamicSpaceSplitter::getCellIdx"
    class onShiftWorld(HookFactory):
        _name = "hknpDynamicSpaceSplitter::onShiftWorld"

class hknpSingleCellSpaceSplitter:
    class hknpSingleCellSpaceSplitter(HookFactory):
        _name = "hknpSingleCellSpaceSplitter::hknpSingleCellSpaceSplitter"
    class copyFrom(HookFactory):
        _name = "hknpSingleCellSpaceSplitter::copyFrom"

class hknpDynamicSpaceSplitter_updateCenters(HookFactory):
    _name = "hknpDynamicSpaceSplitter_updateCenters"

class hknpSpaceSplitter:
    class initSortedLinks(HookFactory):
        _name = "hknpSpaceSplitter::initSortedLinks"
    class scheduleLinks(HookFactory):
        _name = "hknpSpaceSplitter::scheduleLinks"

class hknpFinalizeNarrowPhasePairsTask:
    class hknpFinalizeNarrowPhasePairsTask(HookFactory):
        _name = "hknpFinalizeNarrowPhasePairsTask::hknpFinalizeNarrowPhasePairsTask"
    class getDebugAttributes(HookFactory):
        _name = "hknpFinalizeNarrowPhasePairsTask::getDebugAttributes"
    class getName(HookFactory):
        _name = "hknpFinalizeNarrowPhasePairsTask::getName"
    class process(HookFactory):
        _name = "hknpFinalizeNarrowPhasePairsTask::process"

class hknpMultithreadedSimulation:
    class hknpMultithreadedSimulation(HookFactory):
        _name = "hknpMultithreadedSimulation::hknpMultithreadedSimulation"
    class checkConsistency(HookFactory):
        _name = "hknpMultithreadedSimulation::checkConsistency"
    class collide(HookFactory):
        _name = "hknpMultithreadedSimulation::collide"
    class exportStatisticsToMonitorStream(HookFactory):
        _name = "hknpMultithreadedSimulation::exportStatisticsToMonitorStream"
    class solve(HookFactory):
        _name = "hknpMultithreadedSimulation::solve"

class hknpSortFinalizeNarrowPhasePairsTask:
    class hknpSortFinalizeNarrowPhasePairsTask(HookFactory):
        _name = "hknpSortFinalizeNarrowPhasePairsTask::hknpSortFinalizeNarrowPhasePairsTask"
    class getName(HookFactory):
        _name = "hknpSortFinalizeNarrowPhasePairsTask::getName"
    class process(HookFactory):
        _name = "hknpSortFinalizeNarrowPhasePairsTask::process"

class hknpPostSolveTask:
    class getDebugAttributes(HookFactory):
        _name = "hknpPostSolveTask::getDebugAttributes"
    class getName(HookFactory):
        _name = "hknpPostSolveTask::getName"
    class process(HookFactory):
        _name = "hknpPostSolveTask::process"

class hknpAddActiveBodyPairsTask:
    class getName(HookFactory):
        _name = "hknpAddActiveBodyPairsTask::getName"
    class process(HookFactory):
        _name = "hknpAddActiveBodyPairsTask::process"

class hknpDeactivationMaintenanceTask:
    class getName(HookFactory):
        _name = "hknpDeactivationMaintenanceTask::getName"
    class process(HookFactory):
        _name = "hknpDeactivationMaintenanceTask::process"

class hknpFinalizeNarrowPhaseGridTask:
    class getName(HookFactory):
        _name = "hknpFinalizeNarrowPhaseGridTask::getName"
    class process(HookFactory):
        _name = "hknpFinalizeNarrowPhaseGridTask::process"

class hknpGenSolverTasksTask:
    class getName(HookFactory):
        _name = "hknpGenSolverTasksTask::getName"
    class process(HookFactory):
        _name = "hknpGenSolverTasksTask::process"

class hknpPostCollideTask:
    class getName(HookFactory):
        _name = "hknpPostCollideTask::getName"
    class process(HookFactory):
        _name = "hknpPostCollideTask::process"

class hknpPreSolveTask:
    class getName(HookFactory):
        _name = "hknpPreSolveTask::getName"
    class process(HookFactory):
        _name = "hknpPreSolveTask::process"

class hknpProcessFullCastsTask:
    class getName(HookFactory):
        _name = "hknpProcessFullCastsTask::getName"
    class init(HookFactory):
        _name = "hknpProcessFullCastsTask::init"
    class process(HookFactory):
        _name = "hknpProcessFullCastsTask::process"

class hknpProcessNarrowPhaseGridTask:
    class getName(HookFactory):
        _name = "hknpProcessNarrowPhaseGridTask::getName"
    class ThreadOutput:
        class clear(HookFactory):
            _name = "hknpProcessNarrowPhaseGridTask::ThreadOutput::clear"
    class init(HookFactory):
        _name = "hknpProcessNarrowPhaseGridTask::init"
    class process(HookFactory):
        _name = "hknpProcessNarrowPhaseGridTask::process"

class hknpSolveFinalizeTask:
    class getName(HookFactory):
        _name = "hknpSolveFinalizeTask::getName"
    class process(HookFactory):
        _name = "hknpSolveFinalizeTask::process"

class hknpSolverFactoryTask:
    class getName(HookFactory):
        _name = "hknpSolverFactoryTask::getName"
    class process(HookFactory):
        _name = "hknpSolverFactoryTask::process"

class hknpDefaultModifierSet:
    class hknpDefaultModifierSet(HookFactory):
        _name = "hknpDefaultModifierSet::hknpDefaultModifierSet"
    class setupModifierManager(HookFactory):
        _name = "hknpDefaultModifierSet::setupModifierManager"

class hknpCollisionDetector:
    class collide(HookFactory):
        _name = "hknpCollisionDetector::collide"

class hknpContactImpulseEventCreator:
    class getEnabledFunctions(HookFactory):
        _name = "hknpContactImpulseEventCreator::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpContactImpulseEventCreator::manifoldCreatedCallback"
    class manifoldDestroyedCallback(HookFactory):
        _name = "hknpContactImpulseEventCreator::manifoldDestroyedCallback"
    class postContactSolve(HookFactory):
        _name = "hknpContactImpulseEventCreator::postContactSolve"

class hknpManifoldEventCreator:
    class getEnabledFunctions(HookFactory):
        _name = "hknpManifoldEventCreator::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpManifoldEventCreator::manifoldCreatedCallback"
    class manifoldDestroyedCallback(HookFactory):
        _name = "hknpManifoldEventCreator::manifoldDestroyedCallback"
    class manifoldFullCastCallback(HookFactory):
        _name = "hknpManifoldEventCreator::manifoldFullCastCallback"
    class manifoldProcessCallback(HookFactory):
        _name = "hknpManifoldEventCreator::manifoldProcessCallback"
    class postContactJacobianReused(HookFactory):
        _name = "hknpManifoldEventCreator::postContactJacobianReused"

class hknpRestitutionModifier:
    class getEnabledFunctions(HookFactory):
        _name = "hknpRestitutionModifier::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpRestitutionModifier::manifoldCreatedCallback"
    class postContactJacobianReused(HookFactory):
        _name = "hknpRestitutionModifier::postContactJacobianReused"
    class postContactJacobianSetup(HookFactory):
        _name = "hknpRestitutionModifier::postContactJacobianSetup"

class hknpModifier:
    class postCompositeQueryAabb(HookFactory):
        _name = "hknpModifier::postCompositeQueryAabb"

class hknpWorldShiftUtil:
    class shiftWorld(HookFactory):
        _name = "hknpWorldShiftUtil::shiftWorld"

class hknpVariableTimeStepUtil:
    class hknpVariableTimeStepUtil(HookFactory):
        _name = "hknpVariableTimeStepUtil::hknpVariableTimeStepUtil"
    class calcSolverInfo(HookFactory):
        _name = "hknpVariableTimeStepUtil::calcSolverInfo"
    class setConfig(HookFactory):
        _name = "hknpVariableTimeStepUtil::setConfig"

class hknpAtomSolverFunctions:
    class generateJacobianMatrices(HookFactory):
        _templates = ("T0", )
        _name = "hknpAtomSolverFunctions::generateJacobianMatrices<{T0}>"
    class solveQuatAngular3D(HookFactory):
        _templates = ("T0", )
        _name = "hknpAtomSolverFunctions::solveQuatAngular3D<{T0}>"
    class computeInverseVirtualMass3D(HookFactory):
        _name = "hknpAtomSolverFunctions::computeInverseVirtualMass3D"
    class computeInverseVirtualMass3D_2(HookFactory):
        _name = "hknpAtomSolverFunctions::computeInverseVirtualMass3D_2"
    class estimateFutureOrientations(HookFactory):
        _name = "hknpAtomSolverFunctions::estimateFutureOrientations"
    class solve1dBilateralUserTau(HookFactory):
        _name = "hknpAtomSolverFunctions::solve1dBilateralUserTau"
    class solve1dBilateralWithImpulseLimit(HookFactory):
        _name = "hknpAtomSolverFunctions::solve1dBilateralWithImpulseLimit"
    class solve1dLinearMotor(HookFactory):
        _name = "hknpAtomSolverFunctions::solve1dLinearMotor"
    class solveDeformableAngConstraint(HookFactory):
        _name = "hknpAtomSolverFunctions::solveDeformableAngConstraint"
    class solveDeformableLinConstraint(HookFactory):
        _name = "hknpAtomSolverFunctions::solveDeformableLinConstraint"
    class solveEllipticalLimit(HookFactory):
        _name = "hknpAtomSolverFunctions::solveEllipticalLimit"
    class solveLinear3D(HookFactory):
        _name = "hknpAtomSolverFunctions::solveLinear3D"
    class solveStableAngularConstraint3d(HookFactory):
        _name = "hknpAtomSolverFunctions::solveStableAngularConstraint3d"
    class solveStableBallSocket(HookFactory):
        _name = "hknpAtomSolverFunctions::solveStableBallSocket"
    class solveStablePulley(HookFactory):
        _name = "hknpAtomSolverFunctions::solveStablePulley"
    class solveStableStiffSpring(HookFactory):
        _name = "hknpAtomSolverFunctions::solveStableStiffSpring"
    class solveDirectlySingleConstraint(HookFactory):
        _name = "hknpAtomSolverFunctions::solveDirectlySingleConstraint"

class hknpAtomSolverFunctions___anonymous_namespace___estimateFutureTransforms(HookFactory):
    _name = "hknpAtomSolverFunctions___anonymous_namespace___estimateFutureTransforms"

class hknpAtomSolverFunctions___anonymous_namespace___estimateFutureTransformsAndVelocities(HookFactory):
    _name = "hknpAtomSolverFunctions___anonymous_namespace___estimateFutureTransformsAndVelocities"

class hknpConstraintAtomSolver:
    class exportImpl(HookFactory):
        _name = "hknpConstraintAtomSolver::exportImpl"
    class setupConstraints(HookFactory):
        _name = "hknpConstraintAtomSolver::setupConstraints"
    class solveJacobians(HookFactory):
        _name = "hknpConstraintAtomSolver::solveJacobians"
    class solveJacobiansImpl(HookFactory):
        _name = "hknpConstraintAtomSolver::solveJacobiansImpl"

class hknpStreamContactSolver:
    class bindInjectors(HookFactory):
        _name = "hknpStreamContactSolver::bindInjectors"
    class buildAndSolveLiveWeldingJacobian(HookFactory):
        _name = "hknpStreamContactSolver::buildAndSolveLiveWeldingJacobian"
    class buildJacobianV(HookFactory):
        _name = "hknpStreamContactSolver::buildJacobianV"
    class buildLiveWeldingJacobian(HookFactory):
        _name = "hknpStreamContactSolver::buildLiveWeldingJacobian"
    class cloneJacobianIntoStream(HookFactory):
        _name = "hknpStreamContactSolver::cloneJacobianIntoStream"
    class createInjectors(HookFactory):
        _name = "hknpStreamContactSolver::createInjectors"
    class destroyInjectors(HookFactory):
        _name = "hknpStreamContactSolver::destroyInjectors"
    class initMotionTransform(HookFactory):
        _name = "hknpStreamContactSolver::initMotionTransform"
    class injectJacobian(HookFactory):
        _name = "hknpStreamContactSolver::injectJacobian"
    class reuseJacobian(HookFactory):
        _name = "hknpStreamContactSolver::reuseJacobian"
    class setJacRangeEndPoint(HookFactory):
        _name = "hknpStreamContactSolver::setJacRangeEndPoint"
    class setJacRangeStartPoint(HookFactory):
        _name = "hknpStreamContactSolver::setJacRangeStartPoint"
    class solveJacobians(HookFactory):
        _name = "hknpStreamContactSolver::solveJacobians"

class StreamContactSolver:
    class buildContact(HookFactory):
        _name = "StreamContactSolver::buildContact"

class hkSignal1_hknpWorld_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld____(HookFactory):
    _name = "hkSignal1_hknpWorld_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld____"

class hkSignal2_hknpWorld___hknpStepInput_const_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpStepInput_const____(HookFactory):
    _name = "hkSignal2_hknpWorld___hknpStepInput_const_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpStepInput_const____"

class hkSignal2_hknpWorld___hkVector4f_const_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hkVector4f_const____(HookFactory):
    _name = "hkSignal2_hknpWorld___hkVector4f_const_____subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hkVector4f_const____"

class hkSignal3_hknpWorld___hknpBodyId_const___int___subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int__(HookFactory):
    _name = "hkSignal3_hknpWorld___hknpBodyId_const___int___subscribe__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int__"

class hknpActionManager:
    class hknpActionManager(HookFactory):
        _name = "hknpActionManager::hknpActionManager"
    class addAction(HookFactory):
        _name = "hknpActionManager::addAction"
    class applyActions(HookFactory):
        _name = "hknpActionManager::applyActions"
    class removeAction(HookFactory):
        _name = "hknpActionManager::removeAction"

class hkSignal1_hknpWorld_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld______subscribe(HookFactory):
    _name = "hkSignal1_hknpWorld_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld______subscribe"

class hkSignal2_hknpWorld___hknpStepInput_const_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpStepInput_const______subscribe(HookFactory):
    _name = "hkSignal2_hknpWorld___hknpStepInput_const_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpStepInput_const______subscribe"

class hkSignal2_hknpWorld___hkVector4f_const_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hkVector4f_const______subscribe(HookFactory):
    _name = "hkSignal2_hknpWorld___hkVector4f_const_____MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hkVector4f_const______subscribe"

class hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int____subscribe(HookFactory):
    _name = "hkSignal3_hknpWorld___hknpBodyId_const___int___MemberSlot__anonymous_namespace___hknpActionManagerEx_void____cdecl_A0xf159be85__hknpActionManagerEx_____hknpWorld___hknpBodyId_const___int____subscribe"

class hknpWorldUtil:
    class addBroadPhaseDecorator(HookFactory):
        _name = "hknpWorldUtil::addBroadPhaseDecorator"

class hknpConstraintDataNullFunctions:
    class buildJacobian(HookFactory):
        _name = "hknpConstraintDataNullFunctions::buildJacobian"
    class enableDirectSolver(HookFactory):
        _name = "hknpConstraintDataNullFunctions::enableDirectSolver"
    class getAppliedImpulsesInSolverSpace(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getAppliedImpulsesInSolverSpace"
    class getAppliedLinearImpulse(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getAppliedLinearImpulse"
    class getConstraintInfo(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getConstraintInfo"
    class getInertiaStabilizationFactor(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getInertiaStabilizationFactor"
    class getMaximumAngularImpulse(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getMaximumAngularImpulse"
    class getMaximumLinearImpulse(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getMaximumLinearImpulse"
    class getReflectType(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getReflectType"
    class getRuntimeInfo(HookFactory):
        _name = "hknpConstraintDataNullFunctions::getRuntimeInfo"
    class isValid(HookFactory):
        _name = "hknpConstraintDataNullFunctions::isValid"
    class makeClone(HookFactory):
        _name = "hknpConstraintDataNullFunctions::makeClone"
    class setInertiaStabilizationFactor(HookFactory):
        _name = "hknpConstraintDataNullFunctions::setInertiaStabilizationFactor"
    class setMaximumAngularImpulse(HookFactory):
        _name = "hknpConstraintDataNullFunctions::setMaximumAngularImpulse"
    class setMaximumLinearImpulse(HookFactory):
        _name = "hknpConstraintDataNullFunctions::setMaximumLinearImpulse"

class hknpParticleParticleCollider:
    class init(HookFactory):
        _name = "hknpParticleParticleCollider::init"
    class invalidateCaches(HookFactory):
        _name = "hknpParticleParticleCollider::invalidateCaches"

class hknpParticleSimulationThreadContext:
    class hknpParticleSimulationThreadContext(HookFactory):
        _name = "hknpParticleSimulationThreadContext::hknpParticleSimulationThreadContext"
    class execCommand(HookFactory):
        _name = "hknpParticleSimulationThreadContext::execCommand"

class hknpParticleSimulationContext:
    class commitLocalChanges(HookFactory):
        _name = "hknpParticleSimulationContext::commitLocalChanges"
    class dispatchCommands(HookFactory):
        _name = "hknpParticleSimulationContext::dispatchCommands"
    class init(HookFactory):
        _name = "hknpParticleSimulationContext::init"

class hknpParticlesBodyCollider:
    class hknpParticlesBodyCollider(HookFactory):
        _name = "hknpParticlesBodyCollider::hknpParticlesBodyCollider"
    class invalidateCaches(HookFactory):
        _name = "hknpParticlesBodyCollider::invalidateCaches"
    class shiftCaches(HookFactory):
        _name = "hknpParticlesBodyCollider::shiftCaches"

class hknpStreamContactJacobianUtil:
    class calcDistances(HookFactory):
        _name = "hknpStreamContactJacobianUtil::calcDistances"
    class calcMinDistance(HookFactory):
        _name = "hknpStreamContactJacobianUtil::calcMinDistance"
    class calculateManifold(HookFactory):
        _name = "hknpStreamContactJacobianUtil::calculateManifold"
    class disableContact(HookFactory):
        _name = "hknpStreamContactJacobianUtil::disableContact"
    class getContactVelocities(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getContactVelocities"
    class getDv(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getDv"
    class getJacModHdr(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getJacModHdr"
    class getJacModMfoldData(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getJacModMfoldData"
    class getJacModNormalVel(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getJacModNormalVel"
    class getPointEffMass(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getPointEffMass"
    class getPointRhs(HookFactory):
        _name = "hknpStreamContactJacobianUtil::getPointRhs"
    class scaleEffectiveMass(HookFactory):
        _name = "hknpStreamContactJacobianUtil::scaleEffectiveMass"
    class scaleFriction(HookFactory):
        _name = "hknpStreamContactJacobianUtil::scaleFriction"
    class scalePenetrations(HookFactory):
        _name = "hknpStreamContactJacobianUtil::scalePenetrations"
    class setDistances(HookFactory):
        _name = "hknpStreamContactJacobianUtil::setDistances"
    class setDynamic(HookFactory):
        _name = "hknpStreamContactJacobianUtil::setDynamic"
    class setMaxImpulse(HookFactory):
        _name = "hknpStreamContactJacobianUtil::setMaxImpulse"
    class setSurfaceVelocity(HookFactory):
        _name = "hknpStreamContactJacobianUtil::setSurfaceVelocity"

class hkFixedSizeBuffer_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts__hkFixedStackStorage_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts_______hkFixedSizeBuffer_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts__hkFixedStackStorage_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts_____(HookFactory):
    _name = "hkFixedSizeBuffer_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts__hkFixedStackStorage_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts_______hkFixedSizeBuffer_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts__hkFixedStackStorage_hkRadixSort__SortDataT_unsigned_int__hknpConstraintAtomSolverSetup__SortedConstraintStates__init____2___TwoInts_____"

class hknpConstraintGroupDirectSolver:
    class SolverSetupData:
        class SolverSetupData(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SolverSetupData::SolverSetupData"
        class addNewConstraint(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SolverSetupData::addNewConstraint"
        class clearCashedData(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SolverSetupData::clearCashedData"
        class restartConstraintCollection(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SolverSetupData::restartConstraintCollection"
        class setReferencePoint(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SolverSetupData::setReferencePoint"
    class OneConstraintInformation:
        class addAtom(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::OneConstraintInformation::addAtom"
        class addMotorInfoToTheLastAddedAtom(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::OneConstraintInformation::addMotorInfoToTheLastAddedAtom"
    class LimitsEnforcedForSolving:
        class initInFirstStepMotor(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::LimitsEnforcedForSolving::initInFirstStepMotor"
    class CompressedAtomInformation:
        class isMotor(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::CompressedAtomInformation::isMotor"
    class DenselockSquaredMatrix:
        class allocateMatrixEntries(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::DenselockSquaredMatrix::allocateMatrixEntries"
        class doLUDecomposition(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::DenselockSquaredMatrix::doLUDecomposition"
    class SparseSquaredMatrixWithLUFillIns:
        class allocateMatrixEntries(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SparseSquaredMatrixWithLUFillIns::allocateMatrixEntries"
        class doLUDecomposition(HookFactory):
            _name = "hknpConstraintGroupDirectSolver::SparseSquaredMatrixWithLUFillIns::doLUDecomposition"
    class buildMatrixWithLimitsAndStoreJacobians(HookFactory):
        _name = "hknpConstraintGroupDirectSolver::buildMatrixWithLimitsAndStoreJacobians"
    class initMatrixFromConstraintGroup(HookFactory):
        _name = "hknpConstraintGroupDirectSolver::initMatrixFromConstraintGroup"
    class predictActiveStateForLimit(HookFactory):
        _name = "hknpConstraintGroupDirectSolver::predictActiveStateForLimit"

class hknpConstraintAtomSolverSetup:
    class SortedConstraintStates:
        class SortedConstraintStates(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::SortedConstraintStates::SortedConstraintStates"
        class clearAndDeallocate(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::SortedConstraintStates::clearAndDeallocate"
        class constraintGroupsEnforceSameCell(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::SortedConstraintStates::constraintGroupsEnforceSameCell"
        class init(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::SortedConstraintStates::init"
        class sortReactivated(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::SortedConstraintStates::sortReactivated"
    class buildJacobianMt(HookFactory):
        _name = "hknpConstraintAtomSolverSetup::buildJacobianMt"
    class buildJacobiansMt(HookFactory):
        _name = "hknpConstraintAtomSolverSetup::buildJacobiansMt"
    class buildJacobiansSt(HookFactory):
        _name = "hknpConstraintAtomSolverSetup::buildJacobiansSt"
    class ConstraintStateGroups:
        class init(HookFactory):
            _name = "hknpConstraintAtomSolverSetup::ConstraintStateGroups::init"

class hknpParticleShapeProperties:
    class hknpParticleShapeProperties(HookFactory):
        _name = "hknpParticleShapeProperties::hknpParticleShapeProperties"

class hknpContinuousGsk:
    class calculateToi(HookFactory):
        _name = "hknpContinuousGsk::calculateToi"
    class calculateToiCast(HookFactory):
        _name = "hknpContinuousGsk::calculateToiCast"
    class calculateToiStaticB(HookFactory):
        _name = "hknpContinuousGsk::calculateToiStaticB"

class hknpParticlesClosestHitOnMeshCollector:
    class hknpParticlesClosestHitOnMeshCollector(HookFactory):
        _name = "hknpParticlesClosestHitOnMeshCollector::hknpParticlesClosestHitOnMeshCollector"
    class processClosestPointsCvxCvx(HookFactory):
        _name = "hknpParticlesClosestHitOnMeshCollector::processClosestPointsCvxCvx"

class hknpParticlesCollisionFilter:
    class hknpParticlesCollisionFilter(HookFactory):
        _name = "hknpParticlesCollisionFilter::hknpParticlesCollisionFilter"
    class filterBodyPairs(HookFactory):
        _name = "hknpParticlesCollisionFilter::filterBodyPairs"
    class isCollisionEnabled(HookFactory):
        _name = "hknpParticlesCollisionFilter::isCollisionEnabled"
        _overload: overloads.hknpParticlesCollisionFilter.isCollisionEnabled.overloads = "hknpParticlesCollisionFilter *, hknpCollisionQueryType::Enum, const hknpQueryFilterData *, const hknpBody *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpParticlesCollisionFilter.isCollisionEnabled.overloads):
            cls._overload = overload_args
            return cls

class hknpParticlesCollisionQueryCollector:
    class getClosestPointToConvex(HookFactory):
        _name = "hknpParticlesCollisionQueryCollector::getClosestPointToConvex"

class hknpParticleWorldQuery:
    class hknpParticleCompoundClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleCompoundClosest"
    class hknpParticleCompressedMeshClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleCompressedMeshClosest"
    class hknpParticleExternMeshClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleExternMeshClosest"
    class hknpParticleHeightFieldClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleHeightFieldClosest"
    class hknpParticleMeshClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleMeshClosest"
    class hknpParticleSDFClosest(HookFactory):
        _name = "hknpParticleWorldQuery::hknpParticleSDFClosest"

class hkTimeStampHashBase:
    class hkTimeStampHashBase(HookFactory):
        _name = "hkTimeStampHashBase::hkTimeStampHashBase"

class hknpProcessNarrowPhasePairsTask:
    class ThreadOutput:
        class ThreadOutput(HookFactory):
            _name = "hknpProcessNarrowPhasePairsTask::ThreadOutput::ThreadOutput"
    class hknpProcessNarrowPhasePairsTask(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::hknpProcessNarrowPhasePairsTask"
    class addWorkItems(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::addWorkItems"
    class getName(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::getName"
    class getNextWorkItem(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::getNextWorkItem"
    class init(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::init"
    class process(HookFactory):
        _name = "hknpProcessNarrowPhasePairsTask::process"

class hknpSubIntegrateLastStepProcess(HookFactory):
    _name = "hknpSubIntegrateLastStepProcess"

class hknpSubIntegrateProcess(HookFactory):
    _name = "hknpSubIntegrateProcess"

class hknpSolverIntegrator:
    class subIntegrate(HookFactory):
        _name = "hknpSolverIntegrator::subIntegrate"
    class subIntegrateLastStep(HookFactory):
        _name = "hknpSolverIntegrator::subIntegrateLastStep"

class hknpCollisionCacheUtils:
    class deepCopyJacobianCachePointer(HookFactory):
        _name = "hknpCollisionCacheUtils::deepCopyJacobianCachePointer"

class hknpConvexCompositeCollisionCache:
    class construct(HookFactory):
        _name = "hknpConvexCompositeCollisionCache::construct"

class hknpCompositeCompositeCollisionCache:
    class construct(HookFactory):
        _name = "hknpCompositeCompositeCollisionCache::construct"

class hknpManifoldCollisionCache:
    class allocateProperty(HookFactory):
        _name = "hknpManifoldCollisionCache::allocateProperty"
    class fireManifoldDestroyed(HookFactory):
        _name = "hknpManifoldCollisionCache::fireManifoldDestroyed"
    class initMaterialAndShapeSettings(HookFactory):
        _name = "hknpManifoldCollisionCache::initMaterialAndShapeSettings"
    class setCircularSymmetryAxes(HookFactory):
        _name = "hknpManifoldCollisionCache::setCircularSymmetryAxes"

class hknpGskCollisionCache:
    class construct(HookFactory):
        _name = "hknpGskCollisionCache::construct"
    class init(HookFactory):
        _name = "hknpGskCollisionCache::init"

class hknpSignedDistanceFieldCollisionCache:
    class construct(HookFactory):
        _name = "hknpSignedDistanceFieldCollisionCache::construct"

class hknpBroadphaseTriggerCollisionCache:
    class construct(HookFactory):
        _name = "hknpBroadphaseTriggerCollisionCache::construct"

class hknpManifoldBuffer:
    class hknpManifoldBuffer(HookFactory):
        _name = "hknpManifoldBuffer::hknpManifoldBuffer"
    class flushImpl(HookFactory):
        _name = "hknpManifoldBuffer::flushImpl"

class hknpBinaryBodyDebugEvent:
    class printCommand(HookFactory):
        _name = "hknpBinaryBodyDebugEvent::printCommand"

class hknpBodyExitedSafeRegionEvent:
    class printCommand(HookFactory):
        _name = "hknpBodyExitedSafeRegionEvent::printCommand"

class hknpUnaryBodyDebugEvent:
    class printCommand(HookFactory):
        _name = "hknpUnaryBodyDebugEvent::printCommand"

class hknpCollideTimers:
    class clear(HookFactory):
        _name = "hknpCollideTimers::clear"
    class exportTimers(HookFactory):
        _name = "hknpCollideTimers::exportTimers"

class hknpCompositeCompositeTimers:
    class exportTimers(HookFactory):
        _name = "hknpCompositeCompositeTimers::exportTimers"

class hknpCvxCompositeKeysTimers:
    class exportTimers(HookFactory):
        _name = "hknpCvxCompositeKeysTimers::exportTimers"

class hknpCvxCompositeTimers:
    class exportTimers(HookFactory):
        _name = "hknpCvxCompositeTimers::exportTimers"

class hknpCvxCvxDetectorTimers:
    class exportTimers(HookFactory):
        _name = "hknpCvxCvxDetectorTimers::exportTimers"

class hknpDebrisDetectorTimers:
    class exportTimers(HookFactory):
        _name = "hknpDebrisDetectorTimers::exportTimers"

class mergeAndCollide2StreamsIntern__anonymous_namespace___cacheConsumerWrapper_A0xc686054b__hknpCacheStarConsumers_1_A0xc686054b__hknpCollideTimersAccessor_(HookFactory):
    _name = "mergeAndCollide2StreamsIntern__anonymous_namespace___cacheConsumerWrapper_A0xc686054b__hknpCacheStarConsumers_1_A0xc686054b__hknpCollideTimersAccessor_"

class mergeAndCollide2StreamsIntern__anonymous_namespace___cacheConsumerWrapper_A0xc686054b__hknpContigCacheConsumers_1_A0xc686054b__hknpCollideTimersAccessor_(HookFactory):
    _name = "mergeAndCollide2StreamsIntern__anonymous_namespace___cacheConsumerWrapper_A0xc686054b__hknpContigCacheConsumers_1_A0xc686054b__hknpCollideTimersAccessor_"

class mergeAndCollide2StreamsIntern_hknpNarrowPhaseWorkStealingConsumer__anonymous_namespace___hknpContigCacheConsumers_0_hknpNarrowPhaseWorkStealingConsumer_(HookFactory):
    _name = "mergeAndCollide2StreamsIntern_hknpNarrowPhaseWorkStealingConsumer__anonymous_namespace___hknpContigCacheConsumers_0_hknpNarrowPhaseWorkStealingConsumer_"

class buildJacobianForManifold(HookFactory):
    _name = "buildJacobianForManifold"

class hknpCollidePipeline:
    class buildJacobiansForManifoldRange(HookFactory):
        _name = "hknpCollidePipeline::buildJacobiansForManifoldRange"
    class collideStealingWork(HookFactory):
        _name = "hknpCollidePipeline::collideStealingWork"
    class mergeAndCollide2Streams(HookFactory):
        _name = "hknpCollidePipeline::mergeAndCollide2Streams"
        _overload: overloads.hknpCollidePipeline.mergeAndCollide2Streams.overloads = "const hknpSimulationThreadContext *, const hknpInternalCollideSharedData *, int, hknpCollisionCacheConsumers *, hknpCollisionCache::RebuildMode, hknpCollisionCacheConsumers *, hknpCollisionCache::RebuildMode, hknpCollisionCacheWriters *, hknpCollisionCacheWriters *, hknpCdPairStream *, hknpCsContactJacInjector *, hknpCsContactJacInjector *, hkBlockStream::Writer *, hknpCollideTimers *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpCollidePipeline.mergeAndCollide2Streams.overloads):
            cls._overload = overload_args
            return cls

class hknpManifoldStreamIterator:
    class setupNextHeader(HookFactory):
        _templates = ("T0", )
        _name = "hknpManifoldStreamIterator<{T0}>::setupNextHeader"

class hknpFullCast:
    class ManifoldGenerator:
        class collide(HookFactory):
            _name = "hknpFullCast::ManifoldGenerator::collide"
    class collideComposite(HookFactory):
        _name = "hknpFullCast::collideComposite"
    class collideConvex(HookFactory):
        _name = "hknpFullCast::collideConvex"
    class collideExisting(HookFactory):
        _name = "hknpFullCast::collideExisting"
    class collideMain(HookFactory):
        _name = "hknpFullCast::collideMain"
    class collideNew(HookFactory):
        _name = "hknpFullCast::collideNew"
    class integrate(HookFactory):
        _name = "hknpFullCast::integrate"
    class setupBody(HookFactory):
        _name = "hknpFullCast::setupBody"
    class setupSolve(HookFactory):
        _name = "hknpFullCast::setupSolve"
    class updateManifold(HookFactory):
        _name = "hknpFullCast::updateManifold"

class hknpCollisionCacheSorter:
    class sortCaches(HookFactory):
        _name = "hknpCollisionCacheSorter::sortCaches"

class hknpApplyDragTask:
    class hknpApplyDragTask(HookFactory):
        _name = "hknpApplyDragTask::hknpApplyDragTask"
    class doesWorldHaveDrag(HookFactory):
        _name = "hknpApplyDragTask::doesWorldHaveDrag"
    class getName(HookFactory):
        _name = "hknpApplyDragTask::getName"
    class process(HookFactory):
        _name = "hknpApplyDragTask::process"
        _overload: overloads.hknpApplyDragTask.process.overloads = "hknpApplyDragTask *, hknpSimulationThreadContext *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpApplyDragTask.process.overloads):
            cls._overload = overload_args
            return cls

class hkArrayBase__anonymous_namespace___CellInfo____growCapacity_hkBuiltinContainerAllocatorBase_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___CellInfo____growCapacity_hkBuiltinContainerAllocatorBase_"

class hkArrayBase__anonymous_namespace___CellInfo____growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___CellInfo____growCapacity_hkContainerAllocator_"

class hknpSolverScheduler:
    class createFullStepTask(HookFactory):
        _name = "hknpSolverScheduler::createFullStepTask"
    class estimateNumTasks(HookFactory):
        _name = "hknpSolverScheduler::estimateNumTasks"

class hknpSolverSchedulerTask:
    class getDebugAttributes(HookFactory):
        _name = "hknpSolverSchedulerTask::getDebugAttributes"
    class getName(HookFactory):
        _name = "hknpSolverSchedulerTask::getName"
    class process(HookFactory):
        _name = "hknpSolverSchedulerTask::process"

class hknpStepConstraintJacobianProcess(HookFactory):
    _name = "hknpStepConstraintJacobianProcess"

class hknpPrepareNarrowPhaseTask:
    class hknpPrepareNarrowPhaseTask(HookFactory):
        _name = "hknpPrepareNarrowPhaseTask::hknpPrepareNarrowPhaseTask"
    class getName(HookFactory):
        _name = "hknpPrepareNarrowPhaseTask::getName"
    class process(HookFactory):
        _name = "hknpPrepareNarrowPhaseTask::process"

class hknpPrepareNarrowPhasePairsTask:
    class hknpPrepareNarrowPhasePairsTask(HookFactory):
        _name = "hknpPrepareNarrowPhasePairsTask::hknpPrepareNarrowPhasePairsTask"
    class getName(HookFactory):
        _name = "hknpPrepareNarrowPhasePairsTask::getName"
    class process(HookFactory):
        _name = "hknpPrepareNarrowPhasePairsTask::process"
    class processImpl(HookFactory):
        _name = "hknpPrepareNarrowPhasePairsTask::processImpl"

class hknpBuildConstraintJacobiansTask:
    class hknpBuildConstraintJacobiansTask(HookFactory):
        _name = "hknpBuildConstraintJacobiansTask::hknpBuildConstraintJacobiansTask"
    class getName(HookFactory):
        _name = "hknpBuildConstraintJacobiansTask::getName"
    class process(HookFactory):
        _name = "hknpBuildConstraintJacobiansTask::process"

class hknpPrepareConstraintsTask:
    class hknpPrepareConstraintsTask(HookFactory):
        _name = "hknpPrepareConstraintsTask::hknpPrepareConstraintsTask"
    class getName(HookFactory):
        _name = "hknpPrepareConstraintsTask::getName"
    class process(HookFactory):
        _name = "hknpPrepareConstraintsTask::process"

class hknpPrepareSolverData:
    class hknpPrepareSolverData(HookFactory):
        _name = "hknpPrepareSolverData::hknpPrepareSolverData"
    class initPreSolve(HookFactory):
        _name = "hknpPrepareSolverData::initPreSolve"

class gridEntryBuilder:
    class gridTuple:
        class gridTuple(HookFactory):
            _name = "gridEntryBuilder::gridTuple::gridTuple"

class hknpFinalizeNarrowPhasePairsTaskEx:
    class buildJacobiansForDeferedManifolds(HookFactory):
        _name = "hknpFinalizeNarrowPhasePairsTaskEx::buildJacobiansForDeferedManifolds"

class iterateBuildGrid(HookFactory):
    _name = "iterateBuildGrid"

class hknpContactImpulseClippedEventCreator:
    class getEnabledFunctions(HookFactory):
        _name = "hknpContactImpulseClippedEventCreator::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpContactImpulseClippedEventCreator::manifoldCreatedCallback"
    class postContactImpulseClipped(HookFactory):
        _name = "hknpContactImpulseClippedEventCreator::postContactImpulseClipped"

class hknpMassChangerModifier:
    class manifoldProcessCallback(HookFactory):
        _name = "hknpMassChangerModifier::manifoldProcessCallback"

class hknpTriggerModifier:
    class getEnabledFunctions(HookFactory):
        _name = "hknpTriggerModifier::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpTriggerModifier::manifoldCreatedCallback"
    class manifoldDestroyedCallback(HookFactory):
        _name = "hknpTriggerModifier::manifoldDestroyedCallback"
    class manifoldProcessCallback(HookFactory):
        _name = "hknpTriggerModifier::manifoldProcessCallback"
    class postContactJacobianSetup(HookFactory):
        _name = "hknpTriggerModifier::postContactJacobianSetup"
    class postContactSolve(HookFactory):
        _name = "hknpTriggerModifier::postContactSolve"

class checkContactsForRestitution(HookFactory):
    _name = "checkContactsForRestitution"

class hknpSoftContactModifier:
    class getEnabledFunctions(HookFactory):
        _name = "hknpSoftContactModifier::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "hknpSoftContactModifier::manifoldCreatedCallback"
    class manifoldFullCastCallback(HookFactory):
        _name = "hknpSoftContactModifier::manifoldFullCastCallback"
    class manifoldProcessCallback(HookFactory):
        _name = "hknpSoftContactModifier::manifoldProcessCallback"
    class postContactJacobianReused(HookFactory):
        _name = "hknpSoftContactModifier::postContactJacobianReused"
    class postContactJacobianSetup(HookFactory):
        _name = "hknpSoftContactModifier::postContactJacobianSetup"

class modifyCacheAndJacobian(HookFactory):
    _name = "modifyCacheAndJacobian"

class applySurfaceVelocity(HookFactory):
    _name = "applySurfaceVelocity"

class hknpSurfaceVelocityModifier:
    class postContactJacobianReused(HookFactory):
        _name = "hknpSurfaceVelocityModifier::postContactJacobianReused"
    class postContactJacobianSetup(HookFactory):
        _name = "hknpSurfaceVelocityModifier::postContactJacobianSetup"

class hknpPotentialManifoldEventCreator:
    class potentialManifoldCallback(HookFactory):
        _name = "hknpPotentialManifoldEventCreator::potentialManifoldCallback"

class hknpFlipBackfaceCollisionModifier:
    class manifoldFullCastCallback(HookFactory):
        _name = "hknpFlipBackfaceCollisionModifier::manifoldFullCastCallback"
    class manifoldProcessCallback(HookFactory):
        _name = "hknpFlipBackfaceCollisionModifier::manifoldProcessCallback"

class hknpMotionWeldingModifier_getClosestPoint(HookFactory):
    _name = "hknpMotionWeldingModifier_getClosestPoint"

class hknpMotionWeldingModifier_getSupportingVertices(HookFactory):
    _name = "hknpMotionWeldingModifier_getSupportingVertices"

class hknpMotionWeldingModifier:
    class postCompositeCollideCallback(HookFactory):
        _name = "hknpMotionWeldingModifier::postCompositeCollideCallback"

class hknpTriangleWeldingModifier:
    class postCompositeCollideCallback(HookFactory):
        _name = "hknpTriangleWeldingModifier::postCompositeCollideCallback"

class hknpLiveWeldingModifier:
    class weldManifolds(HookFactory):
        _name = "hknpLiveWeldingModifier::weldManifolds"

class hknpCompositeCollisionDetector:
    class copyChildCaches(HookFactory):
        _name = "hknpCompositeCollisionDetector::copyChildCaches"
    class destructCollisionCache(HookFactory):
        _name = "hknpCompositeCollisionDetector::destructCollisionCache"
    class moveAndConsumeChildCachesAndClearJacobianPointers(HookFactory):
        _name = "hknpCompositeCollisionDetector::moveAndConsumeChildCachesAndClearJacobianPointers"

class hknpConvexCompositeCollisionDetector:
    class collideConvexWithCompositeKeys(HookFactory):
        _name = "hknpConvexCompositeCollisionDetector::collideConvexWithCompositeKeys"
    class collideWithChildren(HookFactory):
        _name = "hknpConvexCompositeCollisionDetector::collideWithChildren"
    class getMaximumLinearTim(HookFactory):
        _name = "hknpConvexCompositeCollisionDetector::getMaximumLinearTim"
    class queryAabbWithNmp(HookFactory):
        _name = "hknpConvexCompositeCollisionDetector::queryAabbWithNmp"
    class reuseConvexWithComposite(HookFactory):
        _name = "hknpConvexCompositeCollisionDetector::reuseConvexWithComposite"

class hknpConvexCompositeCollisionDetector_midphase(HookFactory):
    _name = "hknpConvexCompositeCollisionDetector_midphase"

class hknpConvexConvexCollisionDetector:
    class hknpConvexConvexCollisionDetector(HookFactory):
        _name = "hknpConvexConvexCollisionDetector::hknpConvexConvexCollisionDetector"
    class destructCollisionCache(HookFactory):
        _name = "hknpConvexConvexCollisionDetector::destructCollisionCache"

class hknpCapsuleCapsuleConvexConvexManifoldGenerator:
    class collide(HookFactory):
        _name = "hknpCapsuleCapsuleConvexConvexManifoldGenerator::collide"
    class collideImpl(HookFactory):
        _name = "hknpCapsuleCapsuleConvexConvexManifoldGenerator::collideImpl"

class hknpCompositeCompositeCollisionDetector:
    class collideWithChildren(HookFactory):
        _name = "hknpCompositeCompositeCollisionDetector::collideWithChildren"

class buildSdfJacobians(HookFactory):
    _name = "buildSdfJacobians"

class hknpSignedDistanceFieldCollisionDetector:
    class collideWithChildren(HookFactory):
        _name = "hknpSignedDistanceFieldCollisionDetector::collideWithChildren"

class hknpBroadphaseTriggerCollisionDetector:
    class collide(HookFactory):
        _name = "hknpBroadphaseTriggerCollisionDetector::collide"
    class destructCollisionCache(HookFactory):
        _name = "hknpBroadphaseTriggerCollisionDetector::destructCollisionCache"

class hknpConstraintForceExceededEventCreator:
    class getEnabledFunctions(HookFactory):
        _name = "hknpConstraintForceExceededEventCreator::getEnabledFunctions"
    class postConstraintExport(HookFactory):
        _name = "hknpConstraintForceExceededEventCreator::postConstraintExport"

class hknpConstraintForceEventCreator:
    class postConstraintExport(HookFactory):
        _name = "hknpConstraintForceEventCreator::postConstraintExport"

class hknpParticleEventCreator:
    class getEnabledFunctions(HookFactory):
        _name = "hknpParticleEventCreator::getEnabledFunctions"
    class postParticleBodyImpulseApplied(HookFactory):
        _name = "hknpParticleEventCreator::postParticleBodyImpulseApplied"
    class postParticleParticleImpulseApplied(HookFactory):
        _name = "hknpParticleEventCreator::postParticleParticleImpulseApplied"
    class postParticlesCollidedWithBodies(HookFactory):
        _name = "hknpParticleEventCreator::postParticlesCollidedWithBodies"
    class postParticlesCollidedWithParticles(HookFactory):
        _name = "hknpParticleEventCreator::postParticlesCollidedWithParticles"
    class postParticlesExitedSafeRegion(HookFactory):
        _name = "hknpParticleEventCreator::postParticlesExitedSafeRegion"

class buildJacobiansAndRHSFromAllConstraints(HookFactory):
    _name = "buildJacobiansAndRHSFromAllConstraints"

class hknpDirectSolveConstraintGroup(HookFactory):
    _name = "hknpDirectSolveConstraintGroup"

class hknpAtomSolverFunctions__applyImpulses(HookFactory):
    _name = "hknpAtomSolverFunctions__applyImpulses"

class hknpAtomSolverFunctions__buildDenseMatrix(HookFactory):
    _name = "hknpAtomSolverFunctions__buildDenseMatrix"

class hknpAtomSolverFunctions__buildJacobians(HookFactory):
    _name = "hknpAtomSolverFunctions__buildJacobians"

class hknpAtomSolverFunctions__doFixedNumberSORIteration(HookFactory):
    _name = "hknpAtomSolverFunctions__doFixedNumberSORIteration"

class hknpAtomSolverFunctions__factorizeA(HookFactory):
    _name = "hknpAtomSolverFunctions__factorizeA"

class hknpAtomSolverFunctions__isSolutionOK(HookFactory):
    _name = "hknpAtomSolverFunctions__isSolutionOK"

class hknpAtomSolverFunctions__solveLinearProblem(HookFactory):
    _name = "hknpAtomSolverFunctions__solveLinearProblem"

class hknpAtomSolverFunctions__solveMLCProblem(HookFactory):
    _name = "hknpAtomSolverFunctions__solveMLCProblem"

class hknpCircularSymmetry:
    class getCircularSymmetryAxisPair(HookFactory):
        _name = "hknpCircularSymmetry::getCircularSymmetryAxisPair"

class hknpLiveWelding:
    class LeafPair:
        class LeafPair(HookFactory):
            _name = "hknpLiveWelding::LeafPair::LeafPair"
        class setPair(HookFactory):
            _name = "hknpLiveWelding::LeafPair::setPair"
        class setPreviousDisplacement(HookFactory):
            _name = "hknpLiveWelding::LeafPair::setPreviousDisplacement"
    class buildManifold(HookFactory):
        _name = "hknpLiveWelding::buildManifold"
    class buildWeldedContact(HookFactory):
        _name = "hknpLiveWelding::buildWeldedContact"
    class castPair(HookFactory):
        _name = "hknpLiveWelding::castPair"
    class collidePair(HookFactory):
        _name = "hknpLiveWelding::collidePair"
    class drawLeaf(HookFactory):
        _name = "hknpLiveWelding::drawLeaf"
    class handlePenetration(HookFactory):
        _name = "hknpLiveWelding::handlePenetration"
    class NeighborData:
        class initSource(HookFactory):
            _name = "hknpLiveWelding::NeighborData::initSource"
    class initTimJacobian(HookFactory):
        _name = "hknpLiveWelding::initTimJacobian"
    class neighborWeld(HookFactory):
        _name = "hknpLiveWelding::neighborWeld"
    class neighborWeldPair(HookFactory):
        _name = "hknpLiveWelding::neighborWeldPair"
    class reuseTimJacobian(HookFactory):
        _name = "hknpLiveWelding::reuseTimJacobian"
    class solveTimJacobian(HookFactory):
        _templates = ("T0", )
        _name = "hknpLiveWelding::solveTimJacobian<{T0}>"

class hkcdGsk:
    class ShapeInterface:
        class getPlanes(HookFactory):
            _name = "hkcdGsk::ShapeInterface::getPlanes"
    class getClosestPoint(HookFactory):
        _name = "hkcdGsk::getClosestPoint"
    class linearCast(HookFactory):
        _name = "hkcdGsk::linearCast"
    class rayCast(HookFactory):
        _name = "hkcdGsk::rayCast"
    class sphereCast(HookFactory):
        _name = "hkcdGsk::sphereCast"

class hknpGsk2DShapeInterface:
    class getPlanes(HookFactory):
        _name = "hknpGsk2DShapeInterface::getPlanes"
    class getShapeAabb(HookFactory):
        _name = "hknpGsk2DShapeInterface::getShapeAabb"
    class getSupportingVertices(HookFactory):
        _name = "hknpGsk2DShapeInterface::getSupportingVertices"

class hkcdGsk_Float3Shape:
    class getSupportingVertex(HookFactory):
        _name = "hkcdGsk_Float3Shape::getSupportingVertex"

class NpJacobianBuilder__buildSchemaFromBallSocketAtomNewPhysics(HookFactory):
    _name = "NpJacobianBuilder__buildSchemaFromBallSocketAtomNewPhysics"

class hknpSolverBuildJacobianFromAtomsNotContact(HookFactory):
    _name = "hknpSolverBuildJacobianFromAtomsNotContact"

class hknpLandscapeQuadProvider:
    class commitLocalChanges(HookFactory):
        _name = "hknpLandscapeQuadProvider::commitLocalChanges"

class hknpNarrowPhaseData:
    class init(HookFactory):
        _name = "hknpNarrowPhaseData::init"

class hknpNarrowPhaseWriters:
    class init(HookFactory):
        _name = "hknpNarrowPhaseWriters::init"

class hknpWeldingUtil:
    class applyModifiedNormal(HookFactory):
        _name = "hknpWeldingUtil::applyModifiedNormal"
    class motionWeldCvxVsCvx(HookFactory):
        _name = "hknpWeldingUtil::motionWeldCvxVsCvx"

class hknpNeighborWeldingUtil:
    class neighborWeld(HookFactory):
        _name = "hknpNeighborWeldingUtil::neighborWeld"

class getSignedDistances(HookFactory):
    _name = "getSignedDistances"

class hknpMotionWeldingUtil:
    class motionWeldCvxVsSdf(HookFactory):
        _name = "hknpMotionWeldingUtil::motionWeldCvxVsSdf"
    class setupMotionWeldConfigBodyA(HookFactory):
        _name = "hknpMotionWeldingUtil::setupMotionWeldConfigBodyA"
    class setupMotionWeldConfigBodyB(HookFactory):
        _name = "hknpMotionWeldingUtil::setupMotionWeldConfigBodyB"

class hknp1dLinearVelocityMotorBeginJacobian(HookFactory):
    _name = "hknp1dLinearVelocityMotorBeginJacobian"

class hknp1dLinearVelocityMotorCommitJacobian(HookFactory):
    _name = "hknp1dLinearVelocityMotorCommitJacobian"

class hknpCalcMotorData(HookFactory):
    _name = "hknpCalcMotorData"

class hknpSingleConstraintDirectSolverSchemaSetup(HookFactory):
    _name = "hknpSingleConstraintDirectSolverSchemaSetup"

class cTkLocklessMultiPoolAllocator:
    class Alloc(HookFactory):
        _name = "cTkLocklessMultiPoolAllocator::Alloc"
    class CalcRequiredSize(HookFactory):
        _name = "cTkLocklessMultiPoolAllocator::CalcRequiredSize"
    class Free(HookFactory):
        _name = "cTkLocklessMultiPoolAllocator::Free"
    class GetAllocSize(HookFactory):
        _name = "cTkLocklessMultiPoolAllocator::GetAllocSize"
    class Init(HookFactory):
        _name = "cTkLocklessMultiPoolAllocator::Init"

class cTkLocklessSlotAlloc:
    class Alloc(HookFactory):
        _name = "cTkLocklessSlotAlloc::Alloc"
    class Construct(HookFactory):
        _name = "cTkLocklessSlotAlloc::Construct"
    class Destruct(HookFactory):
        _name = "cTkLocklessSlotAlloc::Destruct"
    class Free(HookFactory):
        _name = "cTkLocklessSlotAlloc::Free"

class cTkDynamicMemoryPool:
    class AllocLargeBlockPages(HookFactory):
        _name = "cTkDynamicMemoryPool::AllocLargeBlockPages"
    class ContainsAddress(HookFactory):
        _name = "cTkDynamicMemoryPool::ContainsAddress"
    class Create(HookFactory):
        _name = "cTkDynamicMemoryPool::Create"
    class DoAllocation(HookFactory):
        _name = "cTkDynamicMemoryPool::DoAllocation"
    class Free(HookFactory):
        _name = "cTkDynamicMemoryPool::Free"
    class FreeLargeBlockPages(HookFactory):
        _name = "cTkDynamicMemoryPool::FreeLargeBlockPages"
    class GetAllocInfo(HookFactory):
        _name = "cTkDynamicMemoryPool::GetAllocInfo"
    class GetAllocationSize(HookFactory):
        _name = "cTkDynamicMemoryPool::GetAllocationSize"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkDynamicMemoryPool::GetHighWaterUsage"
    class GetUsage(HookFactory):
        _name = "cTkDynamicMemoryPool::GetUsage"
    class Malloc(HookFactory):
        _name = "cTkDynamicMemoryPool::Malloc"
    class SetAllocInfo(HookFactory):
        _name = "cTkDynamicMemoryPool::SetAllocInfo"

class cTkMemoryManager:
    class Calloc(HookFactory):
        _name = "cTkMemoryManager::Calloc"
    class Construct(HookFactory):
        _name = "cTkMemoryManager::Construct"
    class FrameSyncEnd(HookFactory):
        _name = "cTkMemoryManager::FrameSyncEnd"
    class Free(HookFactory):
        _name = "cTkMemoryManager::Free"
    class GetAllocationSize(HookFactory):
        _name = "cTkMemoryManager::GetAllocationSize"
    class InPausableArea(HookFactory):
        _name = "cTkMemoryManager::InPausableArea"
    class Malloc(HookFactory):
        _name = "cTkMemoryManager::Malloc"
    class Realloc(HookFactory):
        _name = "cTkMemoryManager::Realloc"
    class SetInPausableArea(HookFactory):
        _name = "cTkMemoryManager::SetInPausableArea"

class cTkSmallBlockMemoryPool:
    class Cleanup(HookFactory):
        _name = "cTkSmallBlockMemoryPool::Cleanup"
    class ContainsAddress(HookFactory):
        _name = "cTkSmallBlockMemoryPool::ContainsAddress"
    class Create(HookFactory):
        _name = "cTkSmallBlockMemoryPool::Create"
    class FallbackMalloc(HookFactory):
        _name = "cTkSmallBlockMemoryPool::FallbackMalloc"
    class Free(HookFactory):
        _name = "cTkSmallBlockMemoryPool::Free"
    class GetAllocInfo(HookFactory):
        _name = "cTkSmallBlockMemoryPool::GetAllocInfo"
    class GetAllocationSize(HookFactory):
        _name = "cTkSmallBlockMemoryPool::GetAllocationSize"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkSmallBlockMemoryPool::GetHighWaterUsage"
    class GetOverflowPool(HookFactory):
        _name = "cTkSmallBlockMemoryPool::GetOverflowPool"
    class GetUsage(HookFactory):
        _name = "cTkSmallBlockMemoryPool::GetUsage"
    class Malloc(HookFactory):
        _name = "cTkSmallBlockMemoryPool::Malloc"
    class SetAllocInfo(HookFactory):
        _name = "cTkSmallBlockMemoryPool::SetAllocInfo"
    class SetMutex(HookFactory):
        _name = "cTkSmallBlockMemoryPool::SetMutex"

class cTkSingleBufferMemoryPool:
    class ContainsAddress(HookFactory):
        _name = "cTkSingleBufferMemoryPool::ContainsAddress"
    class Create(HookFactory):
        _name = "cTkSingleBufferMemoryPool::Create"
    class FrameSyncEnd(HookFactory):
        _name = "cTkSingleBufferMemoryPool::FrameSyncEnd"
    class GetHighWaterUsage(HookFactory):
        _name = "cTkSingleBufferMemoryPool::GetHighWaterUsage"
    class GetUsage(HookFactory):
        _name = "cTkSingleBufferMemoryPool::GetUsage"
    class Malloc(HookFactory):
        _name = "cTkSingleBufferMemoryPool::Malloc"
    class Reset(HookFactory):
        _name = "cTkSingleBufferMemoryPool::Reset"
    class SetAlignment(HookFactory):
        _name = "cTkSingleBufferMemoryPool::SetAlignment"
    class SetMutex(HookFactory):
        _name = "cTkSingleBufferMemoryPool::SetMutex"

class CreateLocalAllocator(HookFactory):
    _name = "CreateLocalAllocator"

class DestroyLocalAllocator(HookFactory):
    _name = "DestroyLocalAllocator"

class DestroyLocalAllocatorAtEndOfThread(HookFactory):
    _name = "DestroyLocalAllocatorAtEndOfThread"

class DisableMainLocalAllocator(HookFactory):
    _name = "DisableMainLocalAllocator"

class EnableMainLocalAllocator(HookFactory):
    _name = "EnableMainLocalAllocator"

class GetLocalAlloc(HookFactory):
    _name = "GetLocalAlloc"

class InitLocalAllocPerThreadData(HookFactory):
    _name = "InitLocalAllocPerThreadData"

class IsUsingMainLocalAllocator(HookFactory):
    _name = "IsUsingMainLocalAllocator"

class PopLocalAllocator(HookFactory):
    _name = "PopLocalAllocator"

class PushLocalAllocator(HookFactory):
    _name = "PushLocalAllocator"

class cTkProceduralModelComponent:
    class OnAttached(HookFactory):
        _name = "cTkProceduralModelComponent::OnAttached"
    class Prepare(HookFactory):
        _name = "cTkProceduralModelComponent::Prepare"
    class GetTypeNameHash64(HookFactory):
        _name = "cTkProceduralModelComponent::GetTypeNameHash64"
    class InitData(HookFactory):
        _name = "cTkProceduralModelComponent::InitData"

class ComponentInstancercTkProceduralModelComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkProceduralModelComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkProceduralModelComponent::ConstructInstance"

class cTkAttachmentPtr:
    class cTkAttachmentPtr(HookFactory):
        _name = "cTkAttachmentPtr::cTkAttachmentPtr"

class cTkComponentInstancerBase:
    class cTkComponentInstancerBase(HookFactory):
        _name = "cTkComponentInstancerBase::cTkComponentInstancerBase"

class cTkComponentLoadInstancerBase:
    class cTkComponentLoadInstancerBase(HookFactory):
        _name = "cTkComponentLoadInstancerBase::cTkComponentLoadInstancerBase"

class cTkNGuiNodeGraph:
    class cTkNGuiNodeGraph(HookFactory):
        _name = "cTkNGuiNodeGraph::cTkNGuiNodeGraph"
    class AnimateActiveNodes(HookFactory):
        _name = "cTkNGuiNodeGraph::AnimateActiveNodes"
    class AnimateOutputActive(HookFactory):
        _name = "cTkNGuiNodeGraph::AnimateOutputActive"
    class Begin(HookFactory):
        _name = "cTkNGuiNodeGraph::Begin"
    class BeginNode(HookFactory):
        _name = "cTkNGuiNodeGraph::BeginNode"
    class DoCurve(HookFactory):
        _name = "cTkNGuiNodeGraph::DoCurve"
    class DoInOut(HookFactory):
        _name = "cTkNGuiNodeGraph::DoInOut"
    class DoInput(HookFactory):
        _name = "cTkNGuiNodeGraph::DoInput"
    class DoLink(HookFactory):
        _name = "cTkNGuiNodeGraph::DoLink"
    class DoOutput(HookFactory):
        _name = "cTkNGuiNodeGraph::DoOutput"
    class End(HookFactory):
        _name = "cTkNGuiNodeGraph::End"
    class EndNode(HookFactory):
        _name = "cTkNGuiNodeGraph::EndNode"
    class GetSelectedNodes(HookFactory):
        _name = "cTkNGuiNodeGraph::GetSelectedNodes"
    class MakeNodeHash(HookFactory):
        _name = "cTkNGuiNodeGraph::MakeNodeHash"
    class SetNodeColour(HookFactory):
        _name = "cTkNGuiNodeGraph::SetNodeColour"
    class SetSelectedNodes(HookFactory):
        _name = "cTkNGuiNodeGraph::SetSelectedNodes"
    class WasLinkCreatedThisFrame(HookFactory):
        _name = "cTkNGuiNodeGraph::WasLinkCreatedThisFrame"

class ColourPickerCallbackNoAlpha(HookFactory):
    _name = "ColourPickerCallbackNoAlpha"

class cTkSpaceshipReportCollisionCallback:
    class manifoldCreatedCallback(HookFactory):
        _name = "cTkSpaceshipReportCollisionCallback::manifoldCreatedCallback"

class cTkVehicleReportDestructionCallback:
    class getEnabledFunctions(HookFactory):
        _name = "cTkVehicleReportDestructionCallback::getEnabledFunctions"
    class manifoldCreatedCallback(HookFactory):
        _name = "cTkVehicleReportDestructionCallback::manifoldCreatedCallback"
    class manifoldProcessCallback(HookFactory):
        _name = "cTkVehicleReportDestructionCallback::manifoldProcessCallback"
    class postContactJacobianSetup(HookFactory):
        _name = "cTkVehicleReportDestructionCallback::postContactJacobianSetup"

class TkClosestRayResultCallback:
    class TkClosestRayResultCallback(HookFactory):
        _name = "TkClosestRayResultCallback::TkClosestRayResultCallback"
    class addHit(HookFactory):
        _name = "TkClosestRayResultCallback::addHit"

class cTkPhysReadJanitor:
    class cTkPhysReadJanitor(HookFactory):
        _name = "cTkPhysReadJanitor::cTkPhysReadJanitor"

class cTkPhysWriteJanitor:
    class cTkPhysWriteJanitor(HookFactory):
        _name = "cTkPhysWriteJanitor::cTkPhysWriteJanitor"

class cTkRaycastJob:
    class cTkRaycastJob(HookFactory):
        _name = "cTkRaycastJob::cTkRaycastJob"
    class CastRays(HookFactory):
        _name = "cTkRaycastJob::CastRays"
    class Close(HookFactory):
        _name = "cTkRaycastJob::Close"
    class Construct(HookFactory):
        _name = "cTkRaycastJob::Construct"
    class GetContact(HookFactory):
        _name = "cTkRaycastJob::GetContact"
    class GetContactBody(HookFactory):
        _name = "cTkRaycastJob::GetContactBody"
    class GetContactFraction(HookFactory):
        _name = "cTkRaycastJob::GetContactFraction"
    class GetContactNormal(HookFactory):
        _name = "cTkRaycastJob::GetContactNormal"
    class GetContactPoint(HookFactory):
        _name = "cTkRaycastJob::GetContactPoint"
    class GetContactRayHitFlags(HookFactory):
        _name = "cTkRaycastJob::GetContactRayHitFlags"
    class GetNumContacts(HookFactory):
        _name = "cTkRaycastJob::GetNumContacts"
    class GetNumRays(HookFactory):
        _name = "cTkRaycastJob::GetNumRays"
    class GetRayEndPoint(HookFactory):
        _name = "cTkRaycastJob::GetRayEndPoint"
    class GetRayStartPoint(HookFactory):
        _name = "cTkRaycastJob::GetRayStartPoint"
    class HasContact(HookFactory):
        _name = "cTkRaycastJob::HasContact"
    class IsValid(HookFactory):
        _name = "cTkRaycastJob::IsValid"
    class Kick(HookFactory):
        _name = "cTkRaycastJob::Kick"
    class Open(HookFactory):
        _name = "cTkRaycastJob::Open"
    class RunImmediately(HookFactory):
        _name = "cTkRaycastJob::RunImmediately"
    class SetAllAllowBackfaces(HookFactory):
        _name = "cTkRaycastJob::SetAllAllowBackfaces"
    class SetAllAllowInsideHits(HookFactory):
        _name = "cTkRaycastJob::SetAllAllowInsideHits"
    class SetAllCollideFilters(HookFactory):
        _name = "cTkRaycastJob::SetAllCollideFilters"
        _overload: overloads.cTkRaycastJob.SetAllCollideFilters.overloads = "cTkRaycastJob *, unsigned __int16"
        @classmethod
        def overload(cls, overload_args: overloads.cTkRaycastJob.SetAllCollideFilters.overloads):
            cls._overload = overload_args
            return cls
    class SetAllIgnoreBody(HookFactory):
        _name = "cTkRaycastJob::SetAllIgnoreBody"
    class SetAllIgnoreCameraInvisible(HookFactory):
        _name = "cTkRaycastJob::SetAllIgnoreCameraInvisible"
    class SetAllIgnoreGameplayFlags(HookFactory):
        _name = "cTkRaycastJob::SetAllIgnoreGameplayFlags"
    class SetAllMaxContacts(HookFactory):
        _name = "cTkRaycastJob::SetAllMaxContacts"
    class SetAllSphereRadius(HookFactory):
        _name = "cTkRaycastJob::SetAllSphereRadius"
    class SetAllowBackfaces(HookFactory):
        _name = "cTkRaycastJob::SetAllowBackfaces"
    class SetCollideFilter(HookFactory):
        _name = "cTkRaycastJob::SetCollideFilter"
    class SetIgnoreCameraInvisible(HookFactory):
        _name = "cTkRaycastJob::SetIgnoreCameraInvisible"
    class SetMaxContacts(HookFactory):
        _name = "cTkRaycastJob::SetMaxContacts"
    class SetNumRays(HookFactory):
        _name = "cTkRaycastJob::SetNumRays"
    class SetSphereRadius(HookFactory):
        _name = "cTkRaycastJob::SetSphereRadius"
    class SetUsingDelta(HookFactory):
        _name = "cTkRaycastJob::SetUsingDelta"
        _overload: overloads.cTkRaycastJob.SetUsingDelta.overloads = "cTkRaycastJob *, unsigned int, const cTkPhysRelVec3 *, const cTkVector3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkRaycastJob.SetUsingDelta.overloads):
            cls._overload = overload_args
            return cls
    class SetUsingExtents(HookFactory):
        _name = "cTkRaycastJob::SetUsingExtents"
        _overload: overloads.cTkRaycastJob.SetUsingExtents.overloads = "cTkRaycastJob *, unsigned int, const cTkPhysRelVec3 *, const cTkPhysRelVec3 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkRaycastJob.SetUsingExtents.overloads):
            cls._overload = overload_args
            return cls
    class Wait(HookFactory):
        _name = "cTkRaycastJob::Wait"

class cTkThresholdedAnyHitCollector:
    class cTkThresholdedAnyHitCollector(HookFactory):
        _name = "cTkThresholdedAnyHitCollector::cTkThresholdedAnyHitCollector"

class hkVdbCmdTag:
    class hkVdbCmdTag(HookFactory):
        _name = "hkVdbCmdTag::hkVdbCmdTag"

class CollectVerticesRecursive(HookFactory):
    _name = "CollectVerticesRecursive"

class cTkPhysExplosion:
    class Explode(HookFactory):
        _name = "cTkPhysExplosion::Explode"

class cTkRigidBodyProxy:
    class GetTkBody(HookFactory):
        _name = "cTkRigidBodyProxy::GetTkBody"
    class Init(HookFactory):
        _name = "cTkRigidBodyProxy::Init"
    class UpdatePostPhysics(HookFactory):
        _name = "cTkRigidBodyProxy::UpdatePostPhysics"
    class UpdatePrePhysics(HookFactory):
        _name = "cTkRigidBodyProxy::UpdatePrePhysics"

class HavokWorkerThread(HookFactory):
    _name = "HavokWorkerThread"

class RaycastJobThreadFunc(HookFactory):
    _name = "RaycastJobThreadFunc"

class TkBodyActivationEvent(HookFactory):
    _name = "TkBodyActivationEvent"

class TkBodyDeactivationEvent(HookFactory):
    _name = "TkBodyDeactivationEvent"

class TkBroadphaseExitFunction(HookFactory):
    _name = "TkBroadphaseExitFunction"

class TkContactCollectorFunction(HookFactory):
    _name = "TkContactCollectorFunction"

class TkTriggerHandler(HookFactory):
    _name = "TkTriggerHandler"

class TkAllRayResultCallback:
    class addHit(HookFactory):
        _name = "TkAllRayResultCallback::addHit"

class cTkCharacterBodyAction:
    class applyAction(HookFactory):
        _name = "cTkCharacterBodyAction::applyAction"
    class getBodies(HookFactory):
        _name = "cTkCharacterBodyAction::getBodies"

class cTkCharacterRigidBody:
    class checkSupport(HookFactory):
        _name = "cTkCharacterRigidBody::checkSupport"
    class findSupportingContacts(HookFactory):
        _name = "cTkCharacterRigidBody::findSupportingContacts"

class cTkHavokAabbSizeFilter:
    class filterBodyPairs(HookFactory):
        _name = "cTkHavokAabbSizeFilter::filterBodyPairs"
    class isCollisionEnabled(HookFactory):
        _name = "cTkHavokAabbSizeFilter::isCollisionEnabled"
        _overload: overloads.cTkHavokAabbSizeFilter.isCollisionEnabled.overloads = "cTkHavokAabbSizeFilter *, __int64, const hknpQueryFilterData *, const hknpBody *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkHavokAabbSizeFilter.isCollisionEnabled.overloads):
            cls._overload = overload_args
            return cls

class cTkCharacterBodyListener:
    class filterContactPoint(HookFactory):
        _name = "cTkCharacterBodyListener::filterContactPoint"
    class onPostSolve(HookFactory):
        _name = "cTkCharacterBodyListener::onPostSolve"

class freeForHavok(HookFactory):
    _name = "freeForHavok"

class cTkAngularFactorCallback:
    class getEnabledFunctions(HookFactory):
        _name = "cTkAngularFactorCallback::getEnabledFunctions"
    class manifoldProcessCallback(HookFactory):
        _name = "cTkAngularFactorCallback::manifoldProcessCallback"

class mallocForHavok(HookFactory):
    _name = "mallocForHavok"

class cTkIgnoreBackfacesModifier:
    class manifoldProcessCallback(HookFactory):
        _name = "cTkIgnoreBackfacesModifier::manifoldProcessCallback"

class hkKeycodeManager:
    class setKeycodes(HookFactory):
        _name = "hkKeycodeManager::setKeycodes"
    class getErrorMessage(HookFactory):
        _name = "hkKeycodeManager::getErrorMessage"
    class getProductName(HookFactory):
        _name = "hkKeycodeManager::getProductName"
    class setKeycode(HookFactory):
        _name = "hkKeycodeManager::setKeycode"

class cTkMcQmcLFSR:
    class cTkMcQmcLFSR(HookFactory):
        _name = "cTkMcQmcLFSR::cTkMcQmcLFSR"

class cTkPersonalRNG:
    class cTkPersonalRNG(HookFactory):
        _name = "cTkPersonalRNG::cTkPersonalRNG"
    class Reseed(HookFactory):
        _name = "cTkPersonalRNG::Reseed"

class CapturedNoise1D(HookFactory):
    _name = "CapturedNoise1D"

class CapturedNoise3D(HookFactory):
    _name = "CapturedNoise3D"

class Wombat:
    class Cellular3D_Deriv(HookFactory):
        _name = "Wombat::Cellular3D_Deriv"
    class Value3D(HookFactory):
        _name = "Wombat::Value3D"

class cTkLayeredNoise:
    class CheckerboardNoise(HookFactory):
        _name = "cTkLayeredNoise::CheckerboardNoise"
    class GenerateSmoothNoiseLayer3D(HookFactory):
        _name = "cTkLayeredNoise::GenerateSmoothNoiseLayer3D"
    class GenerateUberNoiseLayer3D_Vector(HookFactory):
        _name = "cTkLayeredNoise::GenerateUberNoiseLayer3D_Vector"
        _overload: overloads.cTkLayeredNoise.GenerateUberNoiseLayer3D_Vector.overloads = "const float *, const float *, const float *, float, cTkNoiseUberData *, int, float *, cTkVector4 *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkLayeredNoise.GenerateUberNoiseLayer3D_Vector.overloads):
            cls._overload = overload_args
            return cls
    class IqTurbulenceNoise(HookFactory):
        _name = "cTkLayeredNoise::IqTurbulenceNoise"
    class OctaveNoise(HookFactory):
        _name = "cTkLayeredNoise::OctaveNoise"
    class PlateauNoise(HookFactory):
        _name = "cTkLayeredNoise::PlateauNoise"
    class Random3f(HookFactory):
        _name = "cTkLayeredNoise::Random3f"

class cTkMcQmcLFSRStore:
    class Construct(HookFactory):
        _name = "cTkMcQmcLFSRStore::Construct"
    class Destruct(HookFactory):
        _name = "cTkMcQmcLFSRStore::Destruct"

class cTkNodeNetworkAddress:
    class Deserialise(HookFactory):
        _name = "cTkNodeNetworkAddress::Deserialise"
    class LookupNode(HookFactory):
        _name = "cTkNodeNetworkAddress::LookupNode"
    class Serialise(HookFactory):
        _name = "cTkNodeNetworkAddress::Serialise"
    class SetToNode(HookFactory):
        _name = "cTkNodeNetworkAddress::SetToNode"

class SpookyHash:
    class Final(HookFactory):
        _name = "SpookyHash::Final"
    class Hash128(HookFactory):
        _name = "SpookyHash::Hash128"
    class Init(HookFactory):
        _name = "SpookyHash::Init"
    class Short(HookFactory):
        _name = "SpookyHash::Short"
    class Update(HookFactory):
        _name = "SpookyHash::Update"

class cTkRegionNoise:
    class GetFaceIndex(HookFactory):
        _name = "cTkRegionNoise::GetFaceIndex"
    class GetFaceRight(HookFactory):
        _name = "cTkRegionNoise::GetFaceRight"
    class GetFaceUp(HookFactory):
        _name = "cTkRegionNoise::GetFaceUp"
    class VoronoiDistanceOnCube(HookFactory):
        _name = "cTkRegionNoise::VoronoiDistanceOnCube"
    class VoronoiDistanceOnCubeBatch(HookFactory):
        _name = "cTkRegionNoise::VoronoiDistanceOnCubeBatch"
    class VoronoiID(HookFactory):
        _name = "cTkRegionNoise::VoronoiID"

class GetNullSelectionResDescriptor(HookFactory):
    _name = "GetNullSelectionResDescriptor"

class cTkSimplexNoise:
    class Noise2d(HookFactory):
        _name = "cTkSimplexNoise::Noise2d"
        _overload: overloads.cTkSimplexNoise.Noise2d.overloads = "const float, const float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSimplexNoise.Noise2d.overloads):
            cls._overload = overload_args
            return cls
    class Noise3d(HookFactory):
        _name = "cTkSimplexNoise::Noise3d"
        _overload: overloads.cTkSimplexNoise.Noise3d.overloads = "const float, const float, const float"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSimplexNoise.Noise3d.overloads):
            cls._overload = overload_args
            return cls
    class Noise3dVectorised(HookFactory):
        _name = "cTkSimplexNoise::Noise3dVectorised"
        _overload: overloads.cTkSimplexNoise.Noise3dVectorised.overloads = "double, double, double"
        @classmethod
        def overload(cls, overload_args: overloads.cTkSimplexNoise.Noise3dVectorised.overloads):
            cls._overload = overload_args
            return cls

class Sha256_Final(HookFactory):
    _name = "Sha256_Final"

class Sha256_Init(HookFactory):
    _name = "Sha256_Init"

class Sha256_Update(HookFactory):
    _name = "Sha256_Update"

class Sha256_WriteByteBlock(HookFactory):
    _name = "Sha256_WriteByteBlock"

class CopyAndPadChunks(HookFactory):
    _templates = ("T0", )
    _name = "CopyAndPadChunks<{T0}>"

class cTkBvMesh:
    class PerformAabbQuery(HookFactory):
        _templates = ("T0", )
        _name = "cTkBvMesh::PerformAabbQuery<{T0}>"
    class cTkBvMesh(HookFactory):
        _name = "cTkBvMesh::cTkBvMesh"
    class AddTriangle(HookFactory):
        _name = "cTkBvMesh::AddTriangle"
    class Build(HookFactory):
        _name = "cTkBvMesh::Build"
    class PerformClosestPoints(HookFactory):
        _name = "cTkBvMesh::PerformClosestPoints"
    class PerformShapecast(HookFactory):
        _name = "cTkBvMesh::PerformShapecast"
    class ReserveTriangles(HookFactory):
        _name = "cTkBvMesh::ReserveTriangles"

class Tk:
    class cNapkinSimulator:
        class SatisfyFourConstraints(HookFactory):
            _templates = ("T0", )
            _name = "Tk::cNapkinSimulator::SatisfyFourConstraints<{T0}>"
        class CreateNapkin(HookFactory):
            _name = "Tk::cNapkinSimulator::CreateNapkin"
        class DestroyNapkin(HookFactory):
            _name = "Tk::cNapkinSimulator::DestroyNapkin"
        class ExtractConstraint(HookFactory):
            _name = "Tk::cNapkinSimulator::ExtractConstraint"
        class SatisfyConstraint_Unoptimized(HookFactory):
            _name = "Tk::cNapkinSimulator::SatisfyConstraint_Unoptimized"
    class cNapkin:
        class cNapkin(HookFactory):
            _name = "Tk::cNapkin::cNapkin"
        class AddConstraint(HookFactory):
            _name = "Tk::cNapkin::AddConstraint"
        class ApplyFrictionLimits(HookFactory):
            _name = "Tk::cNapkin::ApplyFrictionLimits"
        class GetParticlePosition(HookFactory):
            _name = "Tk::cNapkin::GetParticlePosition"
        class GetParticleVelocity(HookFactory):
            _name = "Tk::cNapkin::GetParticleVelocity"
        class Init(HookFactory):
            _name = "Tk::cNapkin::Init"
        class IsConstraintEnabled(HookFactory):
            _name = "Tk::cNapkin::IsConstraintEnabled"
        class IsParticleFixed(HookFactory):
            _name = "Tk::cNapkin::IsParticleFixed"
        class SetConstraintEnabled(HookFactory):
            _name = "Tk::cNapkin::SetConstraintEnabled"
        class SetParticleEnabled(HookFactory):
            _name = "Tk::cNapkin::SetParticleEnabled"
        class SetParticleFixed(HookFactory):
            _name = "Tk::cNapkin::SetParticleFixed"
        class SetParticlePosition(HookFactory):
            _name = "Tk::cNapkin::SetParticlePosition"
        class SetParticleVelocity(HookFactory):
            _name = "Tk::cNapkin::SetParticleVelocity"
        class ShiftWorld(HookFactory):
            _name = "Tk::cNapkin::ShiftWorld"
        class SortConstraints(HookFactory):
            _name = "Tk::cNapkin::SortConstraints"
        class Step(HookFactory):
            _name = "Tk::cNapkin::Step"
        class SwapParticles(HookFactory):
            _name = "Tk::cNapkin::SwapParticles"
    class cDistanceConstraint:
        class BothParticlesAreFixed(HookFactory):
            _name = "Tk::cDistanceConstraint::BothParticlesAreFixed"
        class IsSuitableForResolving_Internal(HookFactory):
            _name = "Tk::cDistanceConstraint::IsSuitableForResolving_Internal"
        class OnlyOnePointIsFixed_Internal(HookFactory):
            _name = "Tk::cDistanceConstraint::OnlyOnePointIsFixed_Internal"
    class cCubicSpline3d:
        class Create(HookFactory):
            _name = "Tk::cCubicSpline3d::Create"
        class GetValue(HookFactory):
            _name = "Tk::cCubicSpline3d::GetValue"
    class cCapsuleShape:
        class ExtractFourParticles(HookFactory):
            _name = "Tk::cCapsuleShape::ExtractFourParticles"
        class ExtractParticle(HookFactory):
            _name = "Tk::cCapsuleShape::ExtractParticle"
    class SegmentSegmentShortestDistance(HookFactory):
        _name = "Tk::SegmentSegmentShortestDistance"

class cTkPhysicsConstraint:
    class cTkPhysicsConstraint(HookFactory):
        _name = "cTkPhysicsConstraint::cTkPhysicsConstraint"
    class Activate(HookFactory):
        _name = "cTkPhysicsConstraint::Activate"
    class CreateMotors(HookFactory):
        _name = "cTkPhysicsConstraint::CreateMotors"
    class Deactivate(HookFactory):
        _name = "cTkPhysicsConstraint::Deactivate"
    class GetHkFrameA(HookFactory):
        _name = "cTkPhysicsConstraint::GetHkFrameA"
    class GetHkFrameB(HookFactory):
        _name = "cTkPhysicsConstraint::GetHkFrameB"
    class SetConeLimit(HookFactory):
        _name = "cTkPhysicsConstraint::SetConeLimit"
    class SetJointFriction(HookFactory):
        _name = "cTkPhysicsConstraint::SetJointFriction"
    class SetMotorParams(HookFactory):
        _name = "cTkPhysicsConstraint::SetMotorParams"
    class SetTwistLimit(HookFactory):
        _name = "cTkPhysicsConstraint::SetTwistLimit"

class cTkEigenFinder:
    class Alloc(HookFactory):
        _name = "cTkEigenFinder::Alloc"
    class Compute(HookFactory):
        _name = "cTkEigenFinder::Compute"
    class NormaliseEigenvectors(HookFactory):
        _name = "cTkEigenFinder::NormaliseEigenvectors"
    class ReconstructMatrix(HookFactory):
        _name = "cTkEigenFinder::ReconstructMatrix"

class BestAlignBasisAroundY(HookFactory):
    _name = "BestAlignBasisAroundY"

class cTkIndexedQuantizedTriList:
    class BuildFromTris(HookFactory):
        _name = "cTkIndexedQuantizedTriList::BuildFromTris"
    class CopyTrisOut(HookFactory):
        _name = "cTkIndexedQuantizedTriList::CopyTrisOut"
    class WriteIndBuf(HookFactory):
        _name = "cTkIndexedQuantizedTriList::WriteIndBuf"

class cTkQuantizedTriList:
    class CalcAabb(HookFactory):
        _name = "cTkQuantizedTriList::CalcAabb"
    class Reserve(HookFactory):
        _name = "cTkQuantizedTriList::Reserve"

class cTkReplicatedVariableArray:
    class ClearDirtyFlags(HookFactory):
        _name = "cTkReplicatedVariableArray::ClearDirtyFlags"
    class NumChangedReplicatedVariables(HookFactory):
        _name = "cTkReplicatedVariableArray::NumChangedReplicatedVariables"
    class SerializeOrDeserialize(HookFactory):
        _name = "cTkReplicatedVariableArray::SerializeOrDeserialize"
    class ShouldReplicateToPlayer(HookFactory):
        _name = "cTkReplicatedVariableArray::ShouldReplicateToPlayer"

class cTkNetworkId:
    class Construct(HookFactory):
        _name = "cTkNetworkId::Construct"

class FindFrameForTightBounds(HookFactory):
    _name = "FindFrameForTightBounds"

class IsCapsuleOrSphere(HookFactory):
    _name = "IsCapsuleOrSphere"

class MakeScaledMeshShape(HookFactory):
    _name = "MakeScaledMeshShape"

class cTkPhysicsBvMeshShapeFunctions:
    class RegisterShapeFunctions(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::RegisterShapeFunctions"
    class buildSurfaceGeometry(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::buildSurfaceGeometry"
    class calcAabb(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::calcAabb"
    class castRay(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::castRay"
    class getLeafShapes(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::getLeafShapes"
    class queryAabb(HookFactory):
        _name = "cTkPhysicsBvMeshShapeFunctions::queryAabb"
        _overload: overloads.cTkPhysicsBvMeshShapeFunctions.queryAabb.overloads = "const hknpShape *, hknpCollisionQueryContext *, const hknpAabbQuery *, const hknpShapeQueryInfo *, const hknpQueryFilterData *, const hknpShapeQueryInfo *, hkArray<hkHandle<unsigned int,4294967295,hknpShapeKeyDiscriminant>,hkBuiltinContainerAllocator<0,0> > *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkPhysicsBvMeshShapeFunctions.queryAabb.overloads):
            cls._overload = overload_args
            return cls

class cOrthonormalBasis:
    class ToLocal(HookFactory):
        _name = "cOrthonormalBasis::ToLocal"

class cTkPhysicsBvMeshShape:
    class buildSurfaceGeometry(HookFactory):
        _name = "cTkPhysicsBvMeshShape::buildSurfaceGeometry"
    class castShapeImpl(HookFactory):
        _name = "cTkPhysicsBvMeshShape::castShapeImpl"
    class getClosestPointsImpl(HookFactory):
        _name = "cTkPhysicsBvMeshShape::getClosestPointsImpl"
    class getLeafShapes(HookFactory):
        _name = "cTkPhysicsBvMeshShape::getLeafShapes"

class cTkIndexedMeshShapeCInfo:
    class getConvexShape(HookFactory):
        _name = "cTkIndexedMeshShapeCInfo::getConvexShape"
    class getIndices(HookFactory):
        _name = "cTkIndexedMeshShapeCInfo::getIndices"
    class getNumTriangles(HookFactory):
        _name = "cTkIndexedMeshShapeCInfo::getNumTriangles"
    class getNumVertices(HookFactory):
        _name = "cTkIndexedMeshShapeCInfo::getNumVertices"
    class getVertex(HookFactory):
        _name = "cTkIndexedMeshShapeCInfo::getVertex"

class cTkQuadMeshShapeCInfo:
    class getConvexShape(HookFactory):
        _name = "cTkQuadMeshShapeCInfo::getConvexShape"
    class getIndices(HookFactory):
        _name = "cTkQuadMeshShapeCInfo::getIndices"
    class getNumTriangles(HookFactory):
        _name = "cTkQuadMeshShapeCInfo::getNumTriangles"
    class getTriangleShapeTag(HookFactory):
        _name = "cTkQuadMeshShapeCInfo::getTriangleShapeTag"
    class getVertex(HookFactory):
        _name = "cTkQuadMeshShapeCInfo::getVertex"

class cTkTerrainMeshShapeCInfo:
    class getConvexShape(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getConvexShape"
    class getIndices(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getIndices"
    class getNumTriangles(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getNumTriangles"
    class getNumVertices(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getNumVertices"
    class getTriangleShapeTag(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getTriangleShapeTag"
    class getVertex(HookFactory):
        _name = "cTkTerrainMeshShapeCInfo::getVertex"

class Tk__spline(HookFactory):
    _name = "Tk__spline"

class Tk__splint(HookFactory):
    _name = "Tk__splint"

class cTkFont:
    class cTkFont(HookFactory):
        _name = "cTkFont::cTkFont"
    class AdjustForKerningPairs(HookFactory):
        _name = "cTkFont::AdjustForKerningPairs"
    class Clear(HookFactory):
        _name = "cTkFont::Clear"
    class Init(HookFactory):
        _name = "cTkFont::Init"

class cTkDynamicTexture:
    class ActivateTexture(HookFactory):
        _name = "cTkDynamicTexture::ActivateTexture"
    class Construct(HookFactory):
        _name = "cTkDynamicTexture::Construct"
    class DeactivateTexture(HookFactory):
        _name = "cTkDynamicTexture::DeactivateTexture"
    class Prepare(HookFactory):
        _name = "cTkDynamicTexture::Prepare"
    class Release(HookFactory):
        _name = "cTkDynamicTexture::Release"

class cTkFontLoader:
    class Construct(HookFactory):
        _name = "cTkFontLoader::Construct"

class cTkFontLoaderText:
    class InterpretChar(HookFactory):
        _name = "cTkFontLoaderText::InterpretChar"
    class InterpretCommon(HookFactory):
        _name = "cTkFontLoaderText::InterpretCommon"
    class InterpretInfo(HookFactory):
        _name = "cTkFontLoaderText::InterpretInfo"
    class InterpretKerning(HookFactory):
        _name = "cTkFontLoaderText::InterpretKerning"
    class Load(HookFactory):
        _name = "cTkFontLoaderText::Load"

class cTkGraphicsContext:
    class SubmitMultiple(HookFactory):
        _name = "cTkGraphicsContext::SubmitMultiple"
    class TaskComplete(HookFactory):
        _name = "cTkGraphicsContext::TaskComplete"

class ComponentInstancercTkAnimPoseComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkAnimPoseComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkAnimPoseComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkAnimPoseComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkAnimPoseComponent::DestructInstance"

class ComponentLoadInstancercTkAnimPoseComponent:
    class Register(HookFactory):
        _name = "ComponentLoadInstancercTkAnimPoseComponent::Register"

class cTkAnimTreeBuilder:
    class BlendInfo:
        class BlendInfo(HookFactory):
            _name = "cTkAnimTreeBuilder::BlendInfo::BlendInfo"
    class BuildTreeInfo(HookFactory):
        _name = "cTkAnimTreeBuilder::BuildTreeInfo"

class cTkNodeAnimationController:
    class Activate(HookFactory):
        _name = "cTkNodeAnimationController::Activate"
    class BlendTo(HookFactory):
        _name = "cTkNodeAnimationController::BlendTo"
    class ClearAnimTargetDelta(HookFactory):
        _name = "cTkNodeAnimationController::ClearAnimTargetDelta"
    class Construct(HookFactory):
        _name = "cTkNodeAnimationController::Construct"
    class FreezeAllAnims(HookFactory):
        _name = "cTkNodeAnimationController::FreezeAllAnims"
    class GenerateCommandList(HookFactory):
        _name = "cTkNodeAnimationController::GenerateCommandList"
    class GetAnimActionFrame(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimActionFrame"
    class GetAnimActionStartFrame(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimActionStartFrame"
    class GetAnimBlendedLocator(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimBlendedLocator"
    class GetAnimDuration(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimDuration"
        _overload: overloads.cTkNodeAnimationController.GetAnimDuration.overloads = "cTkNodeAnimationController *, const cTkAnimInstanceHandle *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNodeAnimationController.GetAnimDuration.overloads):
            cls._overload = overload_args
            return cls
    class GetAnimFrame(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimFrame"
    class GetAnimFrameInt(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimFrameInt"
    class GetAnimFromLayerById(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimFromLayerById"
    class GetAnimLocator(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimLocator"
    class GetAnimMirrored(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimMirrored"
    class GetAnimMoveLocatorSpeed(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimMoveLocatorSpeed"
    class GetAnimName(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimName"
        _overload: overloads.cTkNodeAnimationController.GetAnimName.overloads = "cTkNodeAnimationController *, const cTkAnimInstanceHandle *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkNodeAnimationController.GetAnimName.overloads):
            cls._overload = overload_args
            return cls
    class GetAnimSpeed(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimSpeed"
    class GetAnimTime(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimTime"
    class GetAnimType(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimType"
    class GetAnimUnscaledDuration(HookFactory):
        _name = "cTkNodeAnimationController::GetAnimUnscaledDuration"
    class GetBlendFromLayerById(HookFactory):
        _name = "cTkNodeAnimationController::GetBlendFromLayerById"
    class GetBlendNodeFromLayer(HookFactory):
        _name = "cTkNodeAnimationController::GetBlendNodeFromLayer"
    class GetFirstAnim(HookFactory):
        _name = "cTkNodeAnimationController::GetFirstAnim"
    class GetHandleForAnim(HookFactory):
        _name = "cTkNodeAnimationController::GetHandleForAnim"
    class GetHandleFromLayer(HookFactory):
        _name = "cTkNodeAnimationController::GetHandleFromLayer"
    class GetLayerFromHandle(HookFactory):
        _name = "cTkNodeAnimationController::GetLayerFromHandle"
    class GetLayerFromId(HookFactory):
        _name = "cTkNodeAnimationController::GetLayerFromId"
    class GetLayerState(HookFactory):
        _name = "cTkNodeAnimationController::GetLayerState"
    class GetLocatorForAnim(HookFactory):
        _name = "cTkNodeAnimationController::GetLocatorForAnim"
    class GetNextAnim(HookFactory):
        _name = "cTkNodeAnimationController::GetNextAnim"
    class GetNumAnimFrames(HookFactory):
        _name = "cTkNodeAnimationController::GetNumAnimFrames"
    class LoadAnimation(HookFactory):
        _name = "cTkNodeAnimationController::LoadAnimation"
    class MapAnimation(HookFactory):
        _name = "cTkNodeAnimationController::MapAnimation"
    class Prepare(HookFactory):
        _name = "cTkNodeAnimationController::Prepare"
    class RefreshParamMembers(HookFactory):
        _name = "cTkNodeAnimationController::RefreshParamMembers"
    class SetAnimFakeMoveLocatorSpeed(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimFakeMoveLocatorSpeed"
    class SetAnimMirrored(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimMirrored"
    class SetAnimSpeed(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimSpeed"
    class SetAnimTargetDelta(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimTargetDelta"
    class SetAnimTime(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimTime"
    class SetAnimTimeWithRestart(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimTimeWithRestart"
    class SetAnimWeight(HookFactory):
        _name = "cTkNodeAnimationController::SetAnimWeight"
    class SetBlendWeight(HookFactory):
        _name = "cTkNodeAnimationController::SetBlendWeight"
    class SetCanBeRemovedEvenIfControl(HookFactory):
        _name = "cTkNodeAnimationController::SetCanBeRemovedEvenIfControl"
    class SetClock(HookFactory):
        _name = "cTkNodeAnimationController::SetClock"
    class SetLayerClock(HookFactory):
        _name = "cTkNodeAnimationController::SetLayerClock"
    class SetLayerId(HookFactory):
        _name = "cTkNodeAnimationController::SetLayerId"
    class SetLayerReplication(HookFactory):
        _name = "cTkNodeAnimationController::SetLayerReplication"
    class SetMirrored(HookFactory):
        _name = "cTkNodeAnimationController::SetMirrored"
    class SetParamStruct(HookFactory):
        _name = "cTkNodeAnimationController::SetParamStruct"
    class Stop(HookFactory):
        _name = "cTkNodeAnimationController::Stop"
    class Update(HookFactory):
        _name = "cTkNodeAnimationController::Update"
    class UpdateActiveList(HookFactory):
        _name = "cTkNodeAnimationController::UpdateActiveList"

class cTkAnimationLayer:
    class AnimationIsNull(HookFactory):
        _name = "cTkAnimationLayer::AnimationIsNull"
    class ApplyMemberInfo(HookFactory):
        _name = "cTkAnimationLayer::ApplyMemberInfo"
    class GetAnimMovement(HookFactory):
        _name = "cTkAnimationLayer::GetAnimMovement"
    class GetBlendById(HookFactory):
        _name = "cTkAnimationLayer::GetBlendById"
    class GetFrame(HookFactory):
        _name = "cTkAnimationLayer::GetFrame"
    class GetIsPartial(HookFactory):
        _name = "cTkAnimationLayer::GetIsPartial"
    class GetUnitTime(HookFactory):
        _name = "cTkAnimationLayer::GetUnitTime"
    class SetUnitTime(HookFactory):
        _name = "cTkAnimationLayer::SetUnitTime"
    class Start(HookFactory):
        _name = "cTkAnimationLayer::Start"
    class UpdateInput(HookFactory):
        _name = "cTkAnimationLayer::UpdateInput"
    class UpdateStates(HookFactory):
        _name = "cTkAnimationLayer::UpdateStates"
    class WriteLayerCommands(HookFactory):
        _name = "cTkAnimationLayer::WriteLayerCommands"

class cTkAnimationInstance:
    class GetDuration(HookFactory):
        _name = "cTkAnimationInstance::GetDuration"
    class GetUnitTime(HookFactory):
        _name = "cTkAnimationInstance::GetUnitTime"
    class SetUnitTime(HookFactory):
        _name = "cTkAnimationInstance::SetUnitTime"
    class WriteInstanceCommands(HookFactory):
        _name = "cTkAnimationInstance::WriteInstanceCommands"

class cTkAnimationWeight:
    class GetWeightUncurved(HookFactory):
        _name = "cTkAnimationWeight::GetWeightUncurved"

class cTkAnimationBlendWeight:
    class SetWeight(HookFactory):
        _name = "cTkAnimationBlendWeight::SetWeight"

class SwapMatrixCols(HookFactory):
    _name = "SwapMatrixCols"

class cTkNoiseUtils:
    class TransformIndependentGaussVectorToMeanAndCovariance(HookFactory):
        _name = "cTkNoiseUtils::TransformIndependentGaussVectorToMeanAndCovariance"

class cTkBehaviourTreeConcurrentSelector:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeConcurrentSelector::Update"

class cTkBehaviourTreeNegateDecorator:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeNegateDecorator::Update"

class cTkBehaviourTreeNeverFailDecorator:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeNeverFailDecorator::Update"

class cTkBehaviourTreePrioritySelector:
    class Update(HookFactory):
        _name = "cTkBehaviourTreePrioritySelector::Update"

class cTkBehaviourTreeSelectionDecorator:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeSelectionDecorator::Update"

class cTkBehaviourTreeSequenceSelector:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeSequenceSelector::Update"

class cTkBehaviourTreeSwitchDecorator:
    class Update(HookFactory):
        _name = "cTkBehaviourTreeSwitchDecorator::Update"

class cTkAnimationBlend:
    class UpdateWeights(HookFactory):
        _name = "cTkAnimationBlend::UpdateWeights"

class cTkClassPointer:
    class cTkClassPointer(HookFactory):
        _name = "cTkClassPointer::cTkClassPointer"

class cTkDocumentReaderJSON:
    class cTkDocumentReaderJSON(HookFactory):
        _name = "cTkDocumentReaderJSON::cTkDocumentReaderJSON"
    class CloseParseFileStream(HookFactory):
        _name = "cTkDocumentReaderJSON::CloseParseFileStream"
    class CommonPostParse(HookFactory):
        _name = "cTkDocumentReaderJSON::CommonPostParse"
    class IsCursorNull(HookFactory):
        _name = "cTkDocumentReaderJSON::IsCursorNull"
    class MoveCursor(HookFactory):
        _name = "cTkDocumentReaderJSON::MoveCursor"
        _overload: overloads.cTkDocumentReaderJSON.MoveCursor.overloads = "cTkDocumentReaderJSON *, const unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkDocumentReaderJSON.MoveCursor.overloads):
            cls._overload = overload_args
            return cls
    class OpenParseFileStream(HookFactory):
        _name = "cTkDocumentReaderJSON::OpenParseFileStream"
    class Parse(HookFactory):
        _name = "cTkDocumentReaderJSON::Parse"
    class ParseInsitu(HookFactory):
        _name = "cTkDocumentReaderJSON::ParseInsitu"
    class PopContext(HookFactory):
        _name = "cTkDocumentReaderJSON::PopContext"
    class PopCursor(HookFactory):
        _name = "cTkDocumentReaderJSON::PopCursor"
    class PushContext(HookFactory):
        _name = "cTkDocumentReaderJSON::PushContext"
    class ReadArraySize(HookFactory):
        _name = "cTkDocumentReaderJSON::ReadArraySize"
    class ReadStringSize(HookFactory):
        _name = "cTkDocumentReaderJSON::ReadStringSize"
    class ReadValue(HookFactory):
        _name = "cTkDocumentReaderJSON::ReadValue"
        _overload: overloads.cTkDocumentReaderJSON.ReadValue.overloads = "cTkDocumentReaderJSON *, long double *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkDocumentReaderJSON.ReadValue.overloads):
            cls._overload = overload_args
            return cls

class cTkDocumentStreamWriterJSON:
    class cTkDocumentStreamWriterJSON(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::cTkDocumentStreamWriterJSON"
    class AddKey(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::AddKey"
    class AddValue(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::AddValue"
        _overload: overloads.cTkDocumentStreamWriterJSON.AddValue.overloads = "cTkDocumentStreamWriterJSON *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkDocumentStreamWriterJSON.AddValue.overloads):
            cls._overload = overload_args
            return cls
    class Clear(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::Clear"
    class Close(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::Close"
    class GetWriterFormat(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::GetWriterFormat"
    class OpenArray(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::OpenArray"
    class OpenObject(HookFactory):
        _name = "cTkDocumentStreamWriterJSON::OpenObject"

class cTkDocumentWriterJSON:
    class cTkDocumentWriterJSON(HookFactory):
        _name = "cTkDocumentWriterJSON::cTkDocumentWriterJSON"
    class AddKey(HookFactory):
        _name = "cTkDocumentWriterJSON::AddKey"
    class AddTabs(HookFactory):
        _name = "cTkDocumentWriterJSON::AddTabs"
    class AddTrailingComma(HookFactory):
        _name = "cTkDocumentWriterJSON::AddTrailingComma"
    class AddValue(HookFactory):
        _name = "cTkDocumentWriterJSON::AddValue"
        _overload: overloads.cTkDocumentWriterJSON.AddValue.overloads = "cTkDocumentWriterJSON *, const TkID<128> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkDocumentWriterJSON.AddValue.overloads):
            cls._overload = overload_args
            return cls
    class AddValueSuffix(HookFactory):
        _name = "cTkDocumentWriterJSON::AddValueSuffix"
    class Clear(HookFactory):
        _name = "cTkDocumentWriterJSON::Clear"
    class Close(HookFactory):
        _name = "cTkDocumentWriterJSON::Close"
    class OpenArray(HookFactory):
        _name = "cTkDocumentWriterJSON::OpenArray"
    class OpenBrace(HookFactory):
        _name = "cTkDocumentWriterJSON::OpenBrace"
    class OpenObject(HookFactory):
        _name = "cTkDocumentWriterJSON::OpenObject"

class ITkDocumentWriter:
    class AddValue(HookFactory):
        _name = "ITkDocumentWriter::AddValue"
        _overload: overloads.ITkDocumentWriter.AddValue.overloads = "ITkDocumentWriter *, int"
        @classmethod
        def overload(cls, overload_args: overloads.ITkDocumentWriter.AddValue.overloads):
            cls._overload = overload_args
            return cls

class MetadataNGuiRender:
    class Functions:
        class BeginTree(HookFactory):
            _name = "MetadataNGuiRender::Functions::BeginTree"
        class Button(HookFactory):
            _name = "MetadataNGuiRender::Functions::Button"
        class EndTree(HookFactory):
            _name = "MetadataNGuiRender::Functions::EndTree"
    class RenderData(HookFactory):
        _name = "MetadataNGuiRender::RenderData"
        _overload: overloads.MetadataNGuiRender.RenderData.overloads = "const char *, float *, const FloatEditOptions *, const FloatLimits *"
        @classmethod
        def overload(cls, overload_args: overloads.MetadataNGuiRender.RenderData.overloads):
            cls._overload = overload_args
            return cls

class cTkDbghelpLib:
    class Bind(HookFactory):
        _name = "cTkDbghelpLib::Bind"
    class Construct(HookFactory):
        _name = "cTkDbghelpLib::Construct"
    class Destruct(HookFactory):
        _name = "cTkDbghelpLib::Destruct"

class CheckReturnFiniteTkHalfVector4(HookFactory):
    _name = "CheckReturnFiniteTkHalfVector4"

class CheckReturnFiniteTkVector4(HookFactory):
    _name = "CheckReturnFiniteTkVector4"

class DigitGen(HookFactory):
    _name = "DigitGen"

class Grisu2(HookFactory):
    _name = "Grisu2"

class Prettify(HookFactory):
    _name = "Prettify"

class TkJsonFileWriteStreamBase:
    class Put(HookFactory):
        _name = "TkJsonFileWriteStreamBase::Put"

class TkJsonFileReadStream:
    class ReadData(HookFactory):
        _name = "TkJsonFileReadStream::ReadData"

class TkJsonFileWriteStream:
    class WriteData(HookFactory):
        _name = "TkJsonFileWriteStream::WriteData"

class WriteExponent(HookFactory):
    _name = "WriteExponent"

class xxtea_to_ubyte_array(HookFactory):
    _name = "xxtea_to_ubyte_array"

class xxtea_decrypt(HookFactory):
    _name = "xxtea_decrypt"

class BounceEaseOut(HookFactory):
    _name = "BounceEaseOut"

class BounceEaseOutIntegral(HookFactory):
    _name = "BounceEaseOutIntegral"

class cTkCurveFunction:
    class Calculate(HookFactory):
        _name = "cTkCurveFunction::Calculate"
        _overload: overloads.cTkCurveFunction.Calculate.overloads = "float, const cTkInOutCurve *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkCurveFunction.Calculate.overloads):
            cls._overload = overload_args
            return cls
    class CalculateIntegral(HookFactory):
        _name = "cTkCurveFunction::CalculateIntegral"

class cTkLODSettings:
    class CheckMaxObjectDistanceOverride(HookFactory):
        _name = "cTkLODSettings::CheckMaxObjectDistanceOverride"
    class GenerateRegionOverrideRadius(HookFactory):
        _name = "cTkLODSettings::GenerateRegionOverrideRadius"
    class GetAdjustedLODDistance(HookFactory):
        _name = "cTkLODSettings::GetAdjustedLODDistance"
    class GetAsteroidCountMultiplier(HookFactory):
        _name = "cTkLODSettings::GetAsteroidCountMultiplier"
    class GetAsteroidDividerMultiplier(HookFactory):
        _name = "cTkLODSettings::GetAsteroidDividerMultiplier"
    class GetAsteroidFadeRangeMultiplier(HookFactory):
        _name = "cTkLODSettings::GetAsteroidFadeRangeMultiplier"
    class GetImposterOverrideDistance(HookFactory):
        _name = "cTkLODSettings::GetImposterOverrideDistance"
    class GetImposterResolutionMultiplier(HookFactory):
        _name = "cTkLODSettings::GetImposterResolutionMultiplier"
    class GetMaxAsteroidGenerationPerFrame(HookFactory):
        _name = "cTkLODSettings::GetMaxAsteroidGenerationPerFrame"
    class GetMaxAsteroidGenerationPerFramePulseJump(HookFactory):
        _name = "cTkLODSettings::GetMaxAsteroidGenerationPerFramePulseJump"
    class GetNumberOfImposterViews(HookFactory):
        _name = "cTkLODSettings::GetNumberOfImposterViews"
    class GetOctahedralImpostersEnabled(HookFactory):
        _name = "cTkLODSettings::GetOctahedralImpostersEnabled"
    class GetViewImpostersFromSpace(HookFactory):
        _name = "cTkLODSettings::GetViewImpostersFromSpace"
    class HideRegionOverride(HookFactory):
        _name = "cTkLODSettings::HideRegionOverride"

class cTkAABB:
    class CreateFromOOBB(HookFactory):
        _name = "cTkAABB::CreateFromOOBB"
    class IsPositionInBox(HookFactory):
        _name = "cTkAABB::IsPositionInBox"
    class IsSphereOverlappingBox(HookFactory):
        _name = "cTkAABB::IsSphereOverlappingBox"

class cTkShaderBase:
    class FinishAsyncLoadFromFile(HookFactory):
        _name = "cTkShaderBase::FinishAsyncLoadFromFile"
    class LoadComputeFromFile(HookFactory):
        _name = "cTkShaderBase::LoadComputeFromFile"
    class LoadFromFile(HookFactory):
        _name = "cTkShaderBase::LoadFromFile"
    class StartAsyncLoadFromFile(HookFactory):
        _name = "cTkShaderBase::StartAsyncLoadFromFile"
    class AllocateUniformBuffersAndSetSRT(HookFactory):
        _name = "cTkShaderBase::AllocateUniformBuffersAndSetSRT"
    class GenerateUniformBufferList(HookFactory):
        _name = "cTkShaderBase::GenerateUniformBufferList"
    class LoadComputeFromMemory(HookFactory):
        _name = "cTkShaderBase::LoadComputeFromMemory"
    class LoadFromMemory(HookFactory):
        _name = "cTkShaderBase::LoadFromMemory"
    class ResolveUniformHandle(HookFactory):
        _name = "cTkShaderBase::ResolveUniformHandle"

class cTkSMShaderWindow:
    class RegisterShaderMillWindows(HookFactory):
        _name = "cTkSMShaderWindow::RegisterShaderMillWindows"
    class RenderEditorWindow(HookFactory):
        _name = "cTkSMShaderWindow::RenderEditorWindow"

class cTkAttachedDevice:
    class cTkAttachedDevice(HookFactory):
        _name = "cTkAttachedDevice::cTkAttachedDevice"
    class ClearActions(HookFactory):
        _name = "cTkAttachedDevice::ClearActions"
    class GetIcon(HookFactory):
        _name = "cTkAttachedDevice::GetIcon"
    class GetIcons(HookFactory):
        _name = "cTkAttachedDevice::GetIcons"
    class SetActions(HookFactory):
        _name = "cTkAttachedDevice::SetActions"
    class SetCustomisation(HookFactory):
        _name = "cTkAttachedDevice::SetCustomisation"
    class SetGhostActions(HookFactory):
        _name = "cTkAttachedDevice::SetGhostActions"

class sTkInputDeviceIcons:
    class sTkInputDeviceIcons(HookFactory):
        _name = "sTkInputDeviceIcons::sTkInputDeviceIcons"
    class GetIcon(HookFactory):
        _name = "sTkInputDeviceIcons::GetIcon"
    class ResolveIconSizes(HookFactory):
        _name = "sTkInputDeviceIcons::ResolveIconSizes"

class sTkInputStringHelperFns:
    class CountKeywords(HookFactory):
        _name = "sTkInputStringHelperFns::CountKeywords"

class CAkPlayListSequence:
    class RemoveAll(HookFactory):
        _name = "CAkPlayListSequence::RemoveAll"
    class CAkPlayListSequence(HookFactory):
        _name = "CAkPlayListSequence::CAkPlayListSequence"
    class Add(HookFactory):
        _name = "CAkPlayListSequence::Add"
    class Exists(HookFactory):
        _name = "CAkPlayListSequence::Exists"
    class GetPosition(HookFactory):
        _name = "CAkPlayListSequence::GetPosition"
    class GetWeight(HookFactory):
        _name = "CAkPlayListSequence::GetWeight"
    class ID(HookFactory):
        _name = "CAkPlayListSequence::ID"
    class Remove(HookFactory):
        _name = "CAkPlayListSequence::Remove"

class sTkInputDeviceIconMap:
    class FindAxisIcons(HookFactory):
        _name = "sTkInputDeviceIconMap::FindAxisIcons"
    class FindButtonIcons(HookFactory):
        _name = "sTkInputDeviceIconMap::FindButtonIcons"
    class FindOriginButtonOrAxis(HookFactory):
        _name = "sTkInputDeviceIconMap::FindOriginButtonOrAxis"
    class FindOriginIcons(HookFactory):
        _name = "sTkInputDeviceIconMap::FindOriginIcons"
    class ResolveIconSizes(HookFactory):
        _name = "sTkInputDeviceIconMap::ResolveIconSizes"

class sTkInputDeviceHelperFns:
    class GetAxisDevice(HookFactory):
        _name = "sTkInputDeviceHelperFns::GetAxisDevice"
    class GetButtonDevice(HookFactory):
        _name = "sTkInputDeviceHelperFns::GetButtonDevice"
    class GetUnboundButton(HookFactory):
        _name = "sTkInputDeviceHelperFns::GetUnboundButton"
    class IsUnboundButton(HookFactory):
        _name = "sTkInputDeviceHelperFns::IsUnboundButton"
    class PromoteAxisBasis(HookFactory):
        _name = "sTkInputDeviceHelperFns::PromoteAxisBasis"

class sTkInputBinding:
    class GetDeviceType(HookFactory):
        _name = "sTkInputBinding::GetDeviceType"

class cTkOutputPort:
    class GetInputPort(HookFactory):
        _name = "cTkOutputPort::GetInputPort"

class sTkActionState:
    class SetAnalogueValue(HookFactory):
        _name = "sTkActionState::SetAnalogueValue"
    class SetDigitalValue(HookFactory):
        _name = "sTkActionState::SetDigitalValue"

class CAkPath:
    class SetSoundUniqueID(HookFactory):
        _name = "CAkPath::SetSoundUniqueID"
    class CAkPath(HookFactory):
        _name = "CAkPath::CAkPath"
    class GetNextPathList(HookFactory):
        _name = "CAkPath::GetNextPathList"
    class InitRotationMatricesForNoFollowMode(HookFactory):
        _name = "CAkPath::InitRotationMatricesForNoFollowMode"
    class InitRotationMatrixForListener(HookFactory):
        _name = "CAkPath::InitRotationMatrixForListener"
    class IsIdle(HookFactory):
        _name = "CAkPath::IsIdle"
    class NextVertex(HookFactory):
        _name = "CAkPath::NextVertex"
    class Pause(HookFactory):
        _name = "CAkPath::Pause"
    class PickRandomList(HookFactory):
        _name = "CAkPath::PickRandomList"
    class RandomizePosition(HookFactory):
        _name = "CAkPath::RandomizePosition"
    class Resume(HookFactory):
        _name = "CAkPath::Resume"
    class SetIsLooping(HookFactory):
        _name = "CAkPath::SetIsLooping"
    class SetPathsList(HookFactory):
        _name = "CAkPath::SetPathsList"
    class SetPlayingID(HookFactory):
        _name = "CAkPath::SetPlayingID"
    class Start(HookFactory):
        _name = "CAkPath::Start"
    class Term(HookFactory):
        _name = "CAkPath::Term"
    class UpdatePosition(HookFactory):
        _name = "CAkPath::UpdatePosition"
    class UpdateStartPosition(HookFactory):
        _name = "CAkPath::UpdateStartPosition"

class cTkImmediateModeBase:
    class cTkImmediateModeBase(HookFactory):
        _name = "cTkImmediateModeBase::cTkImmediateModeBase"

class cTkCompute:
    class GetOrLoadShader(HookFactory):
        _name = "cTkCompute::GetOrLoadShader"

class cTkNGuiTextEditState:
    class cTkNGuiTextEditState(HookFactory):
        _name = "cTkNGuiTextEditState::cTkNGuiTextEditState"
    class GetCursorIndex(HookFactory):
        _name = "cTkNGuiTextEditState::GetCursorIndex"
    class GetCursorPosition(HookFactory):
        _name = "cTkNGuiTextEditState::GetCursorPosition"
    class GetSelectionBegin(HookFactory):
        _name = "cTkNGuiTextEditState::GetSelectionBegin"
    class GetSelectionEnd(HookFactory):
        _name = "cTkNGuiTextEditState::GetSelectionEnd"
    class HasSelection(HookFactory):
        _name = "cTkNGuiTextEditState::HasSelection"
    class InitBuffers(HookFactory):
        _name = "cTkNGuiTextEditState::InitBuffers"
    class InitialiseState(HookFactory):
        _name = "cTkNGuiTextEditState::InitialiseState"
    class OnClick(HookFactory):
        _name = "cTkNGuiTextEditState::OnClick"
    class OnDrag(HookFactory):
        _name = "cTkNGuiTextEditState::OnDrag"
    class OnKeyPressed(HookFactory):
        _name = "cTkNGuiTextEditState::OnKeyPressed"
    class OnPaste(HookFactory):
        _name = "cTkNGuiTextEditState::OnPaste"
    class OnRelease(HookFactory):
        _name = "cTkNGuiTextEditState::OnRelease"
    class ReadBuffers(HookFactory):
        _name = "cTkNGuiTextEditState::ReadBuffers"
    class SanitizeToMinimalPrintableAscii(HookFactory):
        _name = "cTkNGuiTextEditState::SanitizeToMinimalPrintableAscii"
    class SelectAll(HookFactory):
        _name = "cTkNGuiTextEditState::SelectAll"
    class CalcTextSize(HookFactory):
        _name = "cTkNGuiTextEditState::CalcTextSize"

class TextureTiler:
    class AllocAndMapPages(HookFactory):
        _name = "TextureTiler::AllocAndMapPages"
    class GetStoreFreeSpace(HookFactory):
        _name = "TextureTiler::GetStoreFreeSpace"
    class Init(HookFactory):
        _name = "TextureTiler::Init"
    class UnmapAndFreePages(HookFactory):
        _name = "TextureTiler::UnmapAndFreePages"
        _overload: overloads.TextureTiler.UnmapAndFreePages.overloads = "TextureTiler *, VkQueue_T *, struct VkImage_T *, unsigned __int16 *, int, int *, unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.TextureTiler.UnmapAndFreePages.overloads):
            cls._overload = overload_args
            return cls

class cTkResourceCopier:
    class Begin(HookFactory):
        _name = "cTkResourceCopier::Begin"
    class CopyData(HookFactory):
        _name = "cTkResourceCopier::CopyData"
    class Download(HookFactory):
        _name = "cTkResourceCopier::Download"
        _overload: overloads.cTkResourceCopier.Download.overloads = "cTkResourceCopier *, struct VkBuffer_T *, void *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceCopier.Download.overloads):
            cls._overload = overload_args
            return cls
    class End(HookFactory):
        _name = "cTkResourceCopier::End"
    class Submit(HookFactory):
        _name = "cTkResourceCopier::Submit"
    class TransferTexture(HookFactory):
        _name = "cTkResourceCopier::TransferTexture"
    class Upload(HookFactory):
        _name = "cTkResourceCopier::Upload"
        _overload: overloads.cTkResourceCopier.Upload.overloads = "cTkResourceCopier *, struct VkBuffer_T *, const void *, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkResourceCopier.Upload.overloads):
            cls._overload = overload_args
            return cls
    class WaitForUpload(HookFactory):
        _name = "cTkResourceCopier::WaitForUpload"
    class AllocStagingBuffer(HookFactory):
        _name = "cTkResourceCopier::AllocStagingBuffer"

class TkNGuiEffectTools:
    class ComputeCurtainReveal(HookFactory):
        _name = "TkNGuiEffectTools::ComputeCurtainReveal"
    class nvgFilledBusyRadial(HookFactory):
        _name = "TkNGuiEffectTools::nvgFilledBusyRadial"
    class nvgFilledProgressRadial(HookFactory):
        _name = "TkNGuiEffectTools::nvgFilledProgressRadial"
    class nvgPathBusyDroplet(HookFactory):
        _name = "TkNGuiEffectTools::nvgPathBusyDroplet"
    class nvgProgressSegmentedRing(HookFactory):
        _name = "TkNGuiEffectTools::nvgProgressSegmentedRing"

class GetLinearRowSlicePtch(HookFactory):
    _name = "GetLinearRowSlicePtch"

class GetResourceTilingInfo(HookFactory):
    _name = "GetResourceTilingInfo"

class GetStandardBlockSize2D(HookFactory):
    _name = "GetStandardBlockSize2D"

class STB_TEXTEDIT_LAYOUTROW(HookFactory):
    _name = "STB_TEXTEDIT_LAYOUTROW"

class stb_text_create_undo_record(HookFactory):
    _name = "stb_text_create_undo_record"

class stb_text_createundo(HookFactory):
    _name = "stb_text_createundo"

class stb_text_locate_coord(HookFactory):
    _name = "stb_text_locate_coord"

class stb_text_redo(HookFactory):
    _name = "stb_text_redo"

class stb_text_undo(HookFactory):
    _name = "stb_text_undo"

class stb_textedit_clamp(HookFactory):
    _name = "stb_textedit_clamp"

class stb_textedit_delete(HookFactory):
    _name = "stb_textedit_delete"

class stb_textedit_delete_selection(HookFactory):
    _name = "stb_textedit_delete_selection"

class stb_textedit_find_charpos(HookFactory):
    _name = "stb_textedit_find_charpos"

class stb_textedit_key(HookFactory):
    _name = "stb_textedit_key"

class stb_textedit_move_to_word_next(HookFactory):
    _name = "stb_textedit_move_to_word_next"

class stb_textedit_move_to_word_previous(HookFactory):
    _name = "stb_textedit_move_to_word_previous"

class HashShaderInputs(HookFactory):
    _name = "HashShaderInputs"

class ReflectionRecurseShaderTypeMembers(HookFactory):
    _name = "ReflectionRecurseShaderTypeMembers"

class cTkEngineUtils:
    class ComputePhysRelMatFromNode(HookFactory):
        _templates = ("T0", )
        _name = "cTkEngineUtils::ComputePhysRelMatFromNode<{T0}>"
    class GetNodeChildOBBs(HookFactory):
        _templates = ("T0", )
        _name = "cTkEngineUtils::GetNodeChildOBBs<{T0}>"
    class GetNodeOBB(HookFactory):
        _templates = ("T0", )
        _name = "cTkEngineUtils::GetNodeOBB<{T0}>"
    class AddNodesStep(HookFactory):
        _name = "cTkEngineUtils::AddNodesStep"
    class FindNode(HookFactory):
        _name = "cTkEngineUtils::FindNode"
        _overload: overloads.cTkEngineUtils.FindNode.overloads = "TkHandle *, TkHandle, unsigned int, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkEngineUtils.FindNode.overloads):
            cls._overload = overload_args
            return cls
    class FindNodeContainingString(HookFactory):
        _name = "cTkEngineUtils::FindNodeContainingString"
    class GetGroupNode(HookFactory):
        _name = "cTkEngineUtils::GetGroupNode"
    class GetMasterModelNode(HookFactory):
        _name = "cTkEngineUtils::GetMasterModelNode"
    class GetMatricesFromNode(HookFactory):
        _name = "cTkEngineUtils::GetMatricesFromNode"
    class GetModelNode(HookFactory):
        _name = "cTkEngineUtils::GetModelNode"
    class GetResHandleFromNode(HookFactory):
        _name = "cTkEngineUtils::GetResHandleFromNode"
    class GetSeedFromNode(HookFactory):
        _name = "cTkEngineUtils::GetSeedFromNode"
    class IsNodeImposter(HookFactory):
        _name = "cTkEngineUtils::IsNodeImposter"
    class ReadModelFilename(HookFactory):
        _name = "cTkEngineUtils::ReadModelFilename"
    class RepositionGroupNode(HookFactory):
        _name = "cTkEngineUtils::RepositionGroupNode"
    class RequestTexturesAlwaysResident(HookFactory):
        _name = "cTkEngineUtils::RequestTexturesAlwaysResident"
    class SetNodeActive(HookFactory):
        _name = "cTkEngineUtils::SetNodeActive"
    class SetNodeActiveRecursive(HookFactory):
        _name = "cTkEngineUtils::SetNodeActiveRecursive"
    class SetNodeMatrixWorld(HookFactory):
        _name = "cTkEngineUtils::SetNodeMatrixWorld"
        _overload: overloads.cTkEngineUtils.SetNodeMatrixWorld.overloads = "TkHandle, const cTkMatrix34 *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkEngineUtils.SetNodeMatrixWorld.overloads):
            cls._overload = overload_args
            return cls
    class SetNodeParent(HookFactory):
        _name = "cTkEngineUtils::SetNodeParent"
    class SetSceneNetworkId(HookFactory):
        _name = "cTkEngineUtils::SetSceneNetworkId"

class TkSettingsReader:
    class Read(HookFactory):
        _templates = ("T0", )
        _name = "TkSettingsReader::Read<{T0}>"
    class Write(HookFactory):
        _templates = ("T0", )
        _name = "TkSettingsReader::Write<{T0}>"

class cTkFSM:
    class ApplyEvent(HookFactory):
        _name = "cTkFSM::ApplyEvent"
    class ApplyEventToSpecificState(HookFactory):
        _name = "cTkFSM::ApplyEventToSpecificState"
    class Construct(HookFactory):
        _name = "cTkFSM::Construct"
    class Destruct(HookFactory):
        _name = "cTkFSM::Destruct"
    class Render(HookFactory):
        _name = "cTkFSM::Render"
    class RequestStateChange(HookFactory):
        _name = "cTkFSM::RequestStateChange"
    class StateChange(HookFactory):
        _name = "cTkFSM::StateChange"
    class StatePrepare(HookFactory):
        _name = "cTkFSM::StatePrepare"
    class StateRelease(HookFactory):
        _name = "cTkFSM::StateRelease"
    class StateSupportsEvenOddRendering(HookFactory):
        _name = "cTkFSM::StateSupportsEvenOddRendering"
    class Update(HookFactory):
        _name = "cTkFSM::Update"

class cTkLanguageManagerBase:
    class ChangeLanguage(HookFactory):
        _name = "cTkLanguageManagerBase::ChangeLanguage"
    class CompareIDs(HookFactory):
        _name = "cTkLanguageManagerBase::CompareIDs"
    class Construct(HookFactory):
        _name = "cTkLanguageManagerBase::Construct"
    class Contains(HookFactory):
        _name = "cTkLanguageManagerBase::Contains"
    class Find(HookFactory):
        _name = "cTkLanguageManagerBase::Find"
    class GetEntry(HookFactory):
        _name = "cTkLanguageManagerBase::GetEntry"
    class GetLanguageCode(HookFactory):
        _name = "cTkLanguageManagerBase::GetLanguageCode"
    class GetStringFromEntry(HookFactory):
        _name = "cTkLanguageManagerBase::GetStringFromEntry"
    class Load(HookFactory):
        _name = "cTkLanguageManagerBase::Load"
    class Translate(HookFactory):
        _name = "cTkLanguageManagerBase::Translate"
        _overload: overloads.cTkLanguageManagerBase.Translate.overloads = "cTkLanguageManagerBase *, const TkID<256> *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkLanguageManagerBase.Translate.overloads):
            cls._overload = overload_args
            return cls

class ChangeVsync(HookFactory):
    _name = "ChangeVsync"

class TkStringConversion:
    class impl:
        class DoUTF16ToUTF8(HookFactory):
            _name = "TkStringConversion::impl::DoUTF16ToUTF8"
        class DoUTF8ToUTF16(HookFactory):
            _name = "TkStringConversion::impl::DoUTF8ToUTF16"

class cTkBasicNoiseHelper:
    class GenerateBlob2D(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateBlob2D"
    class GenerateGridNoise2D(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateGridNoise2D"
    class GenerateHeightVariance2D(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateHeightVariance2D"
    class GenerateNoiseFromUberData3D_Vector(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateNoiseFromUberData3D_Vector"
        _overload: overloads.cTkBasicNoiseHelper.GenerateNoiseFromUberData3D_Vector.overloads = "const float *, const float *, const float *, cTkNoiseUberLayerData *, int, float *, cTkVector4 *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkBasicNoiseHelper.GenerateNoiseFromUberData3D_Vector.overloads):
            cls._overload = overload_args
            return cls
    class GenerateRegionNoise(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateRegionNoise"
    class GenerateTunnel2D(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateTunnel2D"
    class GenerateUberNoiseFromData2D_Bucketed(HookFactory):
        _name = "cTkBasicNoiseHelper::GenerateUberNoiseFromData2D_Bucketed"
        _overload: overloads.cTkBasicNoiseHelper.GenerateUberNoiseFromData2D_Bucketed.overloads = "cTkNoiseUberLayerData *, float *, float *, float *, int *, int, float *, int"
        @classmethod
        def overload(cls, overload_args: overloads.cTkBasicNoiseHelper.GenerateUberNoiseFromData2D_Bucketed.overloads):
            cls._overload = overload_args
            return cls

class GetSettingBool(HookFactory):
    _name = "GetSettingBool"

class GetSettingFloat(HookFactory):
    _name = "GetSettingFloat"

class GetSettingGraphicDetail(HookFactory):
    _name = "GetSettingGraphicDetail"

class GetSettingInt(HookFactory):
    _name = "GetSettingInt"

class GetSettingSupport(HookFactory):
    _name = "GetSettingSupport"

class cTkBasicVoxelHelper:
    class GetVoxelColourIndex(HookFactory):
        _name = "cTkBasicVoxelHelper::GetVoxelColourIndex"
    class GetVoxelTypeFromColourIndex(HookFactory):
        _name = "cTkBasicVoxelHelper::GetVoxelTypeFromColourIndex"
    class MakeSubstanceOnlyMask(HookFactory):
        _name = "cTkBasicVoxelHelper::MakeSubstanceOnlyMask"

class RefreshAniso(HookFactory):
    _name = "RefreshAniso"

class RefreshDLSSQuality(HookFactory):
    _name = "RefreshDLSSQuality"

class RefreshFFXSR2Quality(HookFactory):
    _name = "RefreshFFXSR2Quality"

class RefreshFFXSRQuality(HookFactory):
    _name = "RefreshFFXSRQuality"

class RefreshLodBiasAndAA(HookFactory):
    _name = "RefreshLodBiasAndAA"

class cTkFSMState:
    class StateChange(HookFactory):
        _name = "cTkFSMState::StateChange"

class cTkProfanityFilterTpfs:
    class Construct(HookFactory):
        _name = "cTkProfanityFilterTpfs::Construct"
    class Destruct(HookFactory):
        _name = "cTkProfanityFilterTpfs::Destruct"
    class Update(HookFactory):
        _name = "cTkProfanityFilterTpfs::Update"

class TkFiber:
    class ConvertFiberToThread(HookFactory):
        _name = "TkFiber::ConvertFiberToThread"
    class ConvertThreadToFiber(HookFactory):
        _name = "TkFiber::ConvertThreadToFiber"

class cTkUgcManagerBase:
    class DeleteCachedUGCDetails(HookFactory):
        _name = "cTkUgcManagerBase::DeleteCachedUGCDetails"

class cTkJobManagerThreadWorker:
    class Execute(HookFactory):
        _name = "cTkJobManagerThreadWorker::Execute"

class cTkUnixTimestamp:
    class Format(HookFactory):
        _name = "cTkUnixTimestamp::Format"
    class GetTimeInfo(HookFactory):
        _name = "cTkUnixTimestamp::GetTimeInfo"

class cTkUserNamesManager:
    class GetCachedName(HookFactory):
        _name = "cTkUserNamesManager::GetCachedName"

class cTkUserNamesCache:
    class GetName(HookFactory):
        _name = "cTkUserNamesCache::GetName"

class cTkTrophyManagerBase:
    class IsTrophyUnlocked(HookFactory):
        _name = "cTkTrophyManagerBase::IsTrophyUnlocked"
    class UnlockTrophy(HookFactory):
        _name = "cTkTrophyManagerBase::UnlockTrophy"

class JobResumeWrapper(HookFactory):
    _name = "JobResumeWrapper"

class QueueSwitchFunction(HookFactory):
    _name = "QueueSwitchFunction"

class SceTpfsFree(HookFactory):
    _name = "SceTpfsFree"

class SceTpfsMalloc(HookFactory):
    _name = "SceTpfsMalloc"

class SceTpfsRealloc(HookFactory):
    _name = "SceTpfsRealloc"

class SuspendFiberWrapper(HookFactory):
    _name = "SuspendFiberWrapper"

class SuspendableJobWrapper(HookFactory):
    _name = "SuspendableJobWrapper"

class cTkAudioWwiseIO:
    class Open(HookFactory):
        _name = "cTkAudioWwiseIO::Open"
        _overload: overloads.cTkAudioWwiseIO.Open.overloads = "cTkAudioWwiseIO *, const wchar_t *, AkOpenMode, AkFileSystemFlags *, bool *, AkFileDesc *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkAudioWwiseIO.Open.overloads):
            cls._overload = overload_args
            return cls
    class Read(HookFactory):
        _name = "cTkAudioWwiseIO::Read"
    class Write(HookFactory):
        _name = "cTkAudioWwiseIO::Write"
    class Close(HookFactory):
        _name = "cTkAudioWwiseIO::Close"
    class AddOrGetHandle(HookFactory):
        _name = "cTkAudioWwiseIO::AddOrGetHandle"
    class DefaultOpenFs(HookFactory):
        _name = "cTkAudioWwiseIO::DefaultOpenFs"

class AkToneGenParamBlock:
    class AkToneGenParamBlock(HookFactory):
        _name = "AkToneGenParamBlock::AkToneGenParamBlock"
    class DoTargetShuffle(HookFactory):
        _name = "AkToneGenParamBlock::DoTargetShuffle"
    class GenerateCombinedVarianceAndJitter(HookFactory):
        _name = "AkToneGenParamBlock::GenerateCombinedVarianceAndJitter"
    class GenerateParameterisedCombinedVarianceAndJitter(HookFactory):
        _name = "AkToneGenParamBlock::GenerateParameterisedCombinedVarianceAndJitter"
        _overload: overloads.AkToneGenParamBlock.GenerateParameterisedCombinedVarianceAndJitter.overloads = "AkToneGenParamBlock *, unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.AkToneGenParamBlock.GenerateParameterisedCombinedVarianceAndJitter.overloads):
            cls._overload = overload_args
            return cls
    class RandomiseMorphTargetGroup(HookFactory):
        _name = "AkToneGenParamBlock::RandomiseMorphTargetGroup"
    class SetRealtimeParamsFromSynthCCs(HookFactory):
        _name = "AkToneGenParamBlock::SetRealtimeParamsFromSynthCCs"

class TkAudioID:
    class TkAudioID(HookFactory):
        _name = "TkAudioID::TkAudioID"
        _overload: overloads.TkAudioID.TkAudioID.overloads = "TkAudioID *, const char *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.TkAudioID.TkAudioID.overloads):
            cls._overload = overload_args
            return cls

class cTkAudioParamCache:
    class CacheRunTimeValue(HookFactory):
        _name = "cTkAudioParamCache::CacheRunTimeValue"
    class CacheSwitch(HookFactory):
        _name = "cTkAudioParamCache::CacheSwitch"
    class Reset(HookFactory):
        _name = "cTkAudioParamCache::Reset"
    class SetPosition(HookFactory):
        _name = "cTkAudioParamCache::SetPosition"

class HgVocAlienParams:
    class Clone(HookFactory):
        _name = "HgVocAlienParams::Clone"
    class Init(HookFactory):
        _name = "HgVocAlienParams::Init"
    class SetParam(HookFactory):
        _name = "HgVocAlienParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "HgVocAlienParams::SetParamsBlock"
    class Term(HookFactory):
        _name = "HgVocAlienParams::Term"

class HgVaMIDIStreamDecoder:
    class CopyMorphTargetToSynthCCs(HookFactory):
        _name = "HgVaMIDIStreamDecoder::CopyMorphTargetToSynthCCs"
    class CopySynthCCsToMorphTarget(HookFactory):
        _name = "HgVaMIDIStreamDecoder::CopySynthCCsToMorphTarget"
    class LerpMorphTargetsToSynthCCs(HookFactory):
        _name = "HgVaMIDIStreamDecoder::LerpMorphTargetsToSynthCCs"
    class ProcessEdit(HookFactory):
        _name = "HgVaMIDIStreamDecoder::ProcessEdit"
    class PutMIDIChar(HookFactory):
        _name = "HgVaMIDIStreamDecoder::PutMIDIChar"
    class RandomiseSynthCCs(HookFactory):
        _name = "HgVaMIDIStreamDecoder::RandomiseSynthCCs"

class CreateHgVocAlien(HookFactory):
    _name = "CreateHgVocAlien"

class CreateHgVocAlienParams(HookFactory):
    _name = "CreateHgVocAlienParams"

class HgVocAlien:
    class Execute(HookFactory):
        _name = "HgVocAlien::Execute"
    class GetDuration(HookFactory):
        _name = "HgVocAlien::GetDuration"
    class GetEnvelope(HookFactory):
        _name = "HgVocAlien::GetEnvelope"
    class GetPluginInfo(HookFactory):
        _name = "HgVocAlien::GetPluginInfo"
    class Init(HookFactory):
        _name = "HgVocAlien::Init"
    class Reset(HookFactory):
        _name = "HgVocAlien::Reset"
    class SetDSPFromParams(HookFactory):
        _name = "HgVocAlien::SetDSPFromParams"
    class StopLooping(HookFactory):
        _name = "HgVocAlien::StopLooping"

class HgVaMidiFile:
    class FreeMIDIBuffer(HookFactory):
        _name = "HgVaMidiFile::FreeMIDIBuffer"

class HGOutputDebugString(HookFactory):
    _name = "HGOutputDebugString"

class HandleAkExecutionSuspension(HookFactory):
    _name = "HandleAkExecutionSuspension"

class HgVocAlienMIDIPlayer:
    class Process(HookFactory):
        _name = "HgVocAlienMIDIPlayer::Process"
    class Start_Play(HookFactory):
        _name = "HgVocAlienMIDIPlayer::Start_Play"

class HgVocAlienChannelManager:
    class ReserveChannel(HookFactory):
        _name = "HgVocAlienChannelManager::ReserveChannel"

class VocAlienDSP:
    class SetGlottisFrequency(HookFactory):
        _name = "VocAlienDSP::SetGlottisFrequency"

class CAkGainFX:
    class Term(HookFactory):
        _name = "CAkGainFX::Term"
    class TimeSkip(HookFactory):
        _name = "CAkGainFX::TimeSkip"
    class Execute(HookFactory):
        _name = "CAkGainFX::Execute"
    class Init(HookFactory):
        _name = "CAkGainFX::Init"

class HgVAMIDIFileReader:
    class extractVLV(HookFactory):
        _name = "HgVAMIDIFileReader::extractVLV"
    class getUInt16(HookFactory):
        _name = "HgVAMIDIFileReader::getUInt16"
    class getUInt32(HookFactory):
        _name = "HgVAMIDIFileReader::getUInt32"

class cTkStorageCloud:
    class cTkStorageCloud(HookFactory):
        _name = "cTkStorageCloud::cTkStorageCloud"

class TkStorage:
    class Blob:
        class Allocate(HookFactory):
            _name = "TkStorage::Blob::Allocate"
        class Free(HookFactory):
            _name = "TkStorage::Blob::Free"

class cTkSaveDataStreamBase:
    class CloseStream(HookFactory):
        _name = "cTkSaveDataStreamBase::CloseStream"
    class OpenStream(HookFactory):
        _name = "cTkSaveDataStreamBase::OpenStream"
    class ReadStream(HookFactory):
        _name = "cTkSaveDataStreamBase::ReadStream"
    class ReadStreamChunk(HookFactory):
        _name = "cTkSaveDataStreamBase::ReadStreamChunk"
    class WriteStream(HookFactory):
        _name = "cTkSaveDataStreamBase::WriteStream"
    class WriteStreamChunk(HookFactory):
        _name = "cTkSaveDataStreamBase::WriteStreamChunk"

class cTkStoragePersistent:
    class RenderActivityIconOverlay(HookFactory):
        _name = "cTkStoragePersistent::RenderActivityIconOverlay"
    class ReturnSortedPlayerStateSlots(HookFactory):
        _name = "cTkStoragePersistent::ReturnSortedPlayerStateSlots"
    class Data:
        class AreAnySaveGamesPresent(HookFactory):
            _name = "cTkStoragePersistent::Data::AreAnySaveGamesPresent"
        class LoadManifest(HookFactory):
            _name = "cTkStoragePersistent::Data::LoadManifest"
        class cTkSaveDataStreamPC:
            class PlatformReadFile(HookFactory):
                _name = "cTkStoragePersistent::Data::cTkSaveDataStreamPC::PlatformReadFile"
        class SaveManifest(HookFactory):
            _name = "cTkStoragePersistent::Data::SaveManifest"
    class CloseStream(HookFactory):
        _name = "cTkStoragePersistent::CloseStream"
    class Construct(HookFactory):
        _name = "cTkStoragePersistent::Construct"
    class DeleteData(HookFactory):
        _name = "cTkStoragePersistent::DeleteData"
    class FetchSlotStates(HookFactory):
        _name = "cTkStoragePersistent::FetchSlotStates"
    class HasAccessDeniedWarning(HookFactory):
        _name = "cTkStoragePersistent::HasAccessDeniedWarning"
    class HasLowSpaceWarning(HookFactory):
        _name = "cTkStoragePersistent::HasLowSpaceWarning"
    class HasValidStreamSaves(HookFactory):
        _name = "cTkStoragePersistent::HasValidStreamSaves"
    class InitStreamMetadata(HookFactory):
        _name = "cTkStoragePersistent::InitStreamMetadata"
    class IsUsingLegacyFileNaming(HookFactory):
        _name = "cTkStoragePersistent::IsUsingLegacyFileNaming"
    class Load(HookFactory):
        _name = "cTkStoragePersistent::Load"
    class OpenStream(HookFactory):
        _name = "cTkStoragePersistent::OpenStream"
    class ReadStream(HookFactory):
        _name = "cTkStoragePersistent::ReadStream"
    class Save(HookFactory):
        _name = "cTkStoragePersistent::Save"
    class SwitchFileNaming(HookFactory):
        _name = "cTkStoragePersistent::SwitchFileNaming"
    class WriteStream(HookFactory):
        _name = "cTkStoragePersistent::WriteStream"

class StorageSlotSortNewestFirst(HookFactory):
    _name = "StorageSlotSortNewestFirst"

class StorageSlotSortOldestFirst(HookFactory):
    _name = "StorageSlotSortOldestFirst"

class cTkCameraBehaviourInterpolate:
    class BeginInterpolate(HookFactory):
        _name = "cTkCameraBehaviourInterpolate::BeginInterpolate"
    class Construct(HookFactory):
        _name = "cTkCameraBehaviourInterpolate::Construct"
    class Prepare(HookFactory):
        _name = "cTkCameraBehaviourInterpolate::Prepare"
    class Release(HookFactory):
        _name = "cTkCameraBehaviourInterpolate::Release"
    class Update(HookFactory):
        _name = "cTkCameraBehaviourInterpolate::Update"

class cTkCameraBehaviourFly:
    class CalcFlyMatrix(HookFactory):
        _name = "cTkCameraBehaviourFly::CalcFlyMatrix"
    class Construct(HookFactory):
        _name = "cTkCameraBehaviourFly::Construct"
    class Prepare(HookFactory):
        _name = "cTkCameraBehaviourFly::Prepare"

class cTkCameraBehaviourOffset:
    class Construct(HookFactory):
        _name = "cTkCameraBehaviourOffset::Construct"
    class GetOffsetMatrix(HookFactory):
        _name = "cTkCameraBehaviourOffset::GetOffsetMatrix"
    class Prepare(HookFactory):
        _name = "cTkCameraBehaviourOffset::Prepare"
    class Update(HookFactory):
        _name = "cTkCameraBehaviourOffset::Update"

class CopyMiniStateToFullState(HookFactory):
    _name = "CopyMiniStateToFullState"

class cTkCameraBehaviourTimeBased:
    class GetTimeCurvePosition(HookFactory):
        _name = "cTkCameraBehaviourTimeBased::GetTimeCurvePosition"

class cTkInputDualShock4:
    class ReadImpl(HookFactory):
        _name = "cTkInputDualShock4::ReadImpl"

class cTkOpenVRDeviceBridge:
    class ActivityCheck(HookFactory):
        _name = "cTkOpenVRDeviceBridge::ActivityCheck"
    class InitIconLookup(HookFactory):
        _name = "cTkOpenVRDeviceBridge::InitIconLookup"
    class IsAvailable(HookFactory):
        _name = "cTkOpenVRDeviceBridge::IsAvailable"
    class PullInput(HookFactory):
        _name = "cTkOpenVRDeviceBridge::PullInput"
    class PushOutput(HookFactory):
        _name = "cTkOpenVRDeviceBridge::PushOutput"

class cTkInputManagerOpenVR:
    class Construct(HookFactory):
        _name = "cTkInputManagerOpenVR::Construct"
    class GetAnalogInput(HookFactory):
        _name = "cTkInputManagerOpenVR::GetAnalogInput"
    class GetButtonInput(HookFactory):
        _name = "cTkInputManagerOpenVR::GetButtonInput"
    class GetDeviceSpecMetadataFile(HookFactory):
        _name = "cTkInputManagerOpenVR::GetDeviceSpecMetadataFile"
    class GetDeviceVRViewResetLayerName(HookFactory):
        _name = "cTkInputManagerOpenVR::GetDeviceVRViewResetLayerName"
    class GetMappedIcon(HookFactory):
        _name = "cTkInputManagerOpenVR::GetMappedIcon"
    class HasAnalogActionBound(HookFactory):
        _name = "cTkInputManagerOpenVR::HasAnalogActionBound"
    class HasDigitalActionBound(HookFactory):
        _name = "cTkInputManagerOpenVR::HasDigitalActionBound"
    class Prepare(HookFactory):
        _name = "cTkInputManagerOpenVR::Prepare"
    class RefreshControlMap(HookFactory):
        _name = "cTkInputManagerOpenVR::RefreshControlMap"
    class SetActiveActionSet(HookFactory):
        _name = "cTkInputManagerOpenVR::SetActiveActionSet"
    class Update(HookFactory):
        _name = "cTkInputManagerOpenVR::Update"

class sTkOpenVRData:
    class FindControllerSpecPath(HookFactory):
        _name = "sTkOpenVRData::FindControllerSpecPath"
    class Prepare(HookFactory):
        _name = "sTkOpenVRData::Prepare"
    class UpdateOpenVRActionSetState(HookFactory):
        _name = "sTkOpenVRData::UpdateOpenVRActionSetState"

class sTkOpenVRAction:
    class GetInputAxisValues(HookFactory):
        _name = "sTkOpenVRAction::GetInputAxisValues"
    class Prepare(HookFactory):
        _name = "sTkOpenVRAction::Prepare"
    class Update(HookFactory):
        _name = "sTkOpenVRAction::Update"

class sTkOpenVRActionSet:
    class Prepare(HookFactory):
        _name = "sTkOpenVRActionSet::Prepare"

class OpenVRRumble:
    class RegisterVibrationAction(HookFactory):
        _name = "OpenVRRumble::RegisterVibrationAction"

class RotateMatrix44(HookFactory):
    _name = "RotateMatrix44"

class WaitPosesJob(HookFactory):
    _name = "WaitPosesJob"

class AssertDialogMsgProc(HookFactory):
    _name = "AssertDialogMsgProc"

class cTkStorageTemp:
    class CloseBinary(HookFactory):
        _name = "cTkStorageTemp::CloseBinary"
    class Construct(HookFactory):
        _name = "cTkStorageTemp::Construct"
    class Data:
        class CreateFullPath(HookFactory):
            _name = "cTkStorageTemp::Data::CreateFullPath"
    class Format(HookFactory):
        _name = "cTkStorageTemp::Format"
    class Load(HookFactory):
        _name = "cTkStorageTemp::Load"
    class WriteBinary(HookFactory):
        _name = "cTkStorageTemp::WriteBinary"
    class Save(HookFactory):
        _name = "cTkStorageTemp::Save"

class FileHandles:
    class CloseHandles(HookFactory):
        _name = "FileHandles::CloseHandles"
    class OpenFiles(HookFactory):
        _name = "FileHandles::OpenFiles"

class GetFilenameForSlot(HookFactory):
    _name = "GetFilenameForSlot"

class cTkUserServiceGalaxy:
    class GetPlatformId(HookFactory):
        _name = "cTkUserServiceGalaxy::GetPlatformId"
    class AllowedMultiplayer(HookFactory):
        _name = "cTkUserServiceGalaxy::AllowedMultiplayer"
    class Construct(HookFactory):
        _name = "cTkUserServiceGalaxy::Construct"
    class Destruct(HookFactory):
        _name = "cTkUserServiceGalaxy::Destruct"
    class GalaxyListenerHub:
        class OnAuthFailure(HookFactory):
            _name = "cTkUserServiceGalaxy::GalaxyListenerHub::OnAuthFailure"
        class OnAuthSuccess(HookFactory):
            _name = "cTkUserServiceGalaxy::GalaxyListenerHub::OnAuthSuccess"
        class OnOperationalStateChanged(HookFactory):
            _name = "cTkUserServiceGalaxy::GalaxyListenerHub::OnOperationalStateChanged"
    class GalaxyListenerEncTicket:
        class OnEncryptedAppTicketRetrieveSuccess(HookFactory):
            _name = "cTkUserServiceGalaxy::GalaxyListenerEncTicket::OnEncryptedAppTicketRetrieveSuccess"
    class RequestAuthenticationToken(HookFactory):
        _name = "cTkUserServiceGalaxy::RequestAuthenticationToken"
    class Update(HookFactory):
        _name = "cTkUserServiceGalaxy::Update"

class cTkUserServiceNull:
    class GetPlatformId(HookFactory):
        _name = "cTkUserServiceNull::GetPlatformId"
    class Construct(HookFactory):
        _name = "cTkUserServiceNull::Construct"
    class CreateUserIdentity(HookFactory):
        _name = "cTkUserServiceNull::CreateUserIdentity"
    class Destruct(HookFactory):
        _name = "cTkUserServiceNull::Destruct"
    class RequestAuthenticationToken(HookFactory):
        _name = "cTkUserServiceNull::RequestAuthenticationToken"
    class Update(HookFactory):
        _name = "cTkUserServiceNull::Update"

class IsResolutionALessThanResolutionB(HookFactory):
    _name = "IsResolutionALessThanResolutionB"

class PostSlackAssert(HookFactory):
    _name = "PostSlackAssert"

class PurecallHandler(HookFactory):
    _name = "PurecallHandler"

class ShowAssertDialog(HookFactory):
    _name = "ShowAssertDialog"

class VmaAllocator_T:
    class VmaAllocator_T(HookFactory):
        _name = "VmaAllocator_T::VmaAllocator_T"
    class AllocateVulkanMemory(HookFactory):
        _name = "VmaAllocator_T::AllocateVulkanMemory"
    class BindBufferMemory(HookFactory):
        _name = "VmaAllocator_T::BindBufferMemory"
    class BindImageMemory(HookFactory):
        _name = "VmaAllocator_T::BindImageMemory"
    class CreatePool(HookFactory):
        _name = "VmaAllocator_T::CreatePool"
    class FreeDedicatedMemory(HookFactory):
        _name = "VmaAllocator_T::FreeDedicatedMemory"
    class FreeMemory(HookFactory):
        _name = "VmaAllocator_T::FreeMemory"
    class FreeVulkanMemory(HookFactory):
        _name = "VmaAllocator_T::FreeVulkanMemory"
    class GetAllocationInfo(HookFactory):
        _name = "VmaAllocator_T::GetAllocationInfo"
    class Init(HookFactory):
        _name = "VmaAllocator_T::Init"
    class Map(HookFactory):
        _name = "VmaAllocator_T::Map"
    class Unmap(HookFactory):
        _name = "VmaAllocator_T::Unmap"

class VmaStringBuilder:
    class AddNumber(HookFactory):
        _name = "VmaStringBuilder::AddNumber"
        _overload: overloads.VmaStringBuilder.AddNumber.overloads = "VmaStringBuilder *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.VmaStringBuilder.AddNumber.overloads):
            cls._overload = overload_args
            return cls

class VmaBlockMetadata_Buddy:
    class AddPoolStats(HookFactory):
        _name = "VmaBlockMetadata_Buddy::AddPoolStats"
    class CalcAllocationStatInfo(HookFactory):
        _name = "VmaBlockMetadata_Buddy::CalcAllocationStatInfo"
    class CalcAllocationStatInfoNode(HookFactory):
        _name = "VmaBlockMetadata_Buddy::CalcAllocationStatInfoNode"
    class CheckCorruption(HookFactory):
        _name = "VmaBlockMetadata_Buddy::CheckCorruption"
    class DeleteNode(HookFactory):
        _name = "VmaBlockMetadata_Buddy::DeleteNode"
    class FreeAtOffset(HookFactory):
        _name = "VmaBlockMetadata_Buddy::FreeAtOffset"
        _overload: overloads.VmaBlockMetadata_Buddy.FreeAtOffset.overloads = "VmaBlockMetadata_Buddy *, VmaAllocation_T *, unsigned __int64"
        @classmethod
        def overload(cls, overload_args: overloads.VmaBlockMetadata_Buddy.FreeAtOffset.overloads):
            cls._overload = overload_args
            return cls
    class GetAllocationCount(HookFactory):
        _name = "VmaBlockMetadata_Buddy::GetAllocationCount"
    class GetSumFreeSize(HookFactory):
        _name = "VmaBlockMetadata_Buddy::GetSumFreeSize"
    class GetUnusedRangeSizeMax(HookFactory):
        _name = "VmaBlockMetadata_Buddy::GetUnusedRangeSizeMax"
    class Init(HookFactory):
        _name = "VmaBlockMetadata_Buddy::Init"
    class IsEmpty(HookFactory):
        _name = "VmaBlockMetadata_Buddy::IsEmpty"
    class MakeRequestedAllocationsLost(HookFactory):
        _name = "VmaBlockMetadata_Buddy::MakeRequestedAllocationsLost"
    class PrintDetailedMap(HookFactory):
        _name = "VmaBlockMetadata_Buddy::PrintDetailedMap"
    class PrintDetailedMapNode(HookFactory):
        _name = "VmaBlockMetadata_Buddy::PrintDetailedMapNode"
    class Validate(HookFactory):
        _name = "VmaBlockMetadata_Buddy::Validate"
    class ValidateNode(HookFactory):
        _name = "VmaBlockMetadata_Buddy::ValidateNode"

class VmaBlockMetadata_Generic:
    class AddPoolStats(HookFactory):
        _name = "VmaBlockMetadata_Generic::AddPoolStats"
    class CalcAllocationStatInfo(HookFactory):
        _name = "VmaBlockMetadata_Generic::CalcAllocationStatInfo"
    class FreeAtOffset(HookFactory):
        _name = "VmaBlockMetadata_Generic::FreeAtOffset"
    class GetAllocationCount(HookFactory):
        _name = "VmaBlockMetadata_Generic::GetAllocationCount"
    class GetUnusedRangeSizeMax(HookFactory):
        _name = "VmaBlockMetadata_Generic::GetUnusedRangeSizeMax"
    class Init(HookFactory):
        _name = "VmaBlockMetadata_Generic::Init"
    class IsEmpty(HookFactory):
        _name = "VmaBlockMetadata_Generic::IsEmpty"
    class MakeAllocationsLost(HookFactory):
        _name = "VmaBlockMetadata_Generic::MakeAllocationsLost"
    class MakeRequestedAllocationsLost(HookFactory):
        _name = "VmaBlockMetadata_Generic::MakeRequestedAllocationsLost"
    class PrintDetailedMap(HookFactory):
        _name = "VmaBlockMetadata_Generic::PrintDetailedMap"
    class Validate(HookFactory):
        _name = "VmaBlockMetadata_Generic::Validate"
    class ValidateFreeSuballocationList(HookFactory):
        _name = "VmaBlockMetadata_Generic::ValidateFreeSuballocationList"

class cTkDynamicResScaling:
    class ApplyDynamicResScale(HookFactory):
        _name = "cTkDynamicResScaling::ApplyDynamicResScale"
    class ForceDynamicResolutionIndexThisFrame(HookFactory):
        _name = "cTkDynamicResScaling::ForceDynamicResolutionIndexThisFrame"
    class GetCurrentDynamicResScale(HookFactory):
        _name = "cTkDynamicResScaling::GetCurrentDynamicResScale"
    class GetDynamicScaleForResolution(HookFactory):
        _name = "cTkDynamicResScaling::GetDynamicScaleForResolution"
    class GetLowestPossibleSupportedScalingFactorForGraphicsSettings(HookFactory):
        _name = "cTkDynamicResScaling::GetLowestPossibleSupportedScalingFactorForGraphicsSettings"
    class GetSensibleDefaultForGraphicsSettings(HookFactory):
        _name = "cTkDynamicResScaling::GetSensibleDefaultForGraphicsSettings"

class VmaJsonWriter:
    class BeginArray(HookFactory):
        _name = "VmaJsonWriter::BeginArray"
    class BeginObject(HookFactory):
        _name = "VmaJsonWriter::BeginObject"
    class BeginValue(HookFactory):
        _name = "VmaJsonWriter::BeginValue"
    class ContinueString(HookFactory):
        _name = "VmaJsonWriter::ContinueString"
    class WriteIndent(HookFactory):
        _name = "VmaJsonWriter::WriteIndent"
    class WriteString(HookFactory):
        _name = "VmaJsonWriter::WriteString"

class VmaBlockVector:
    class CreateBlock(HookFactory):
        _name = "VmaBlockVector::CreateBlock"
    class Free(HookFactory):
        _name = "VmaBlockVector::Free"

class VmaDeviceMemoryBlock:
    class Destroy(HookFactory):
        _name = "VmaDeviceMemoryBlock::Destroy"
    class Init(HookFactory):
        _name = "VmaDeviceMemoryBlock::Init"

class DeviceIsUsable(HookFactory):
    _name = "DeviceIsUsable"

class FindValidAllocator(HookFactory):
    _name = "FindValidAllocator"

class cTkFfxFsr2:
    class GetJitter(HookFactory):
        _name = "cTkFfxFsr2::GetJitter"
    class PrepareLanczos2LutTexture(HookFactory):
        _name = "cTkFfxFsr2::PrepareLanczos2LutTexture"
    class SetQualityScaleFromLevel(HookFactory):
        _name = "cTkFfxFsr2::SetQualityScaleFromLevel"
    class UpdateConfig(HookFactory):
        _name = "cTkFfxFsr2::UpdateConfig"
    class UpdateShaderConsts(HookFactory):
        _name = "cTkFfxFsr2::UpdateShaderConsts"

class GetStreamingMemoryUsed(HookFactory):
    _name = "GetStreamingMemoryUsed"

class Halton(HookFactory):
    _name = "Halton"

class LoadIridasLut(HookFactory):
    _name = "LoadIridasLut"

class MemoryPanic(HookFactory):
    _name = "MemoryPanic"

class VmaBlockMetadata:
    class PrintDetailedMap_Allocation(HookFactory):
        _name = "VmaBlockMetadata::PrintDetailedMap_Allocation"
    class PrintDetailedMap_Begin(HookFactory):
        _name = "VmaBlockMetadata::PrintDetailedMap_Begin"
    class PrintDetailedMap_End(HookFactory):
        _name = "VmaBlockMetadata::PrintDetailedMap_End"
    class PrintDetailedMap_UnusedRange(HookFactory):
        _name = "VmaBlockMetadata::PrintDetailedMap_UnusedRange"

class VmaAllocation_T:
    class PrintParameters(HookFactory):
        _name = "VmaAllocation_T::PrintParameters"
    class SetUserData(HookFactory):
        _name = "VmaAllocation_T::SetUserData"

class VmaRawList:
    class PushBack(HookFactory):
        _templates = ("T0", )
        _name = "VmaRawList<{T0}>::PushBack"

class SetShaderConsts(HookFactory):
    _name = "SetShaderConsts"

class TkDebugReportCallback(HookFactory):
    _name = "TkDebugReportCallback"

class VmaRecorder:
    class WriteConfiguration(HookFactory):
        _name = "VmaRecorder::WriteConfiguration"

class cFrameBuffer:
    class init(HookFactory):
        _name = "cFrameBuffer::init"

class vmaAllocateMemoryForBuffer(HookFactory):
    _name = "vmaAllocateMemoryForBuffer"

class vmaAllocateMemoryForImage(HookFactory):
    _name = "vmaAllocateMemoryForImage"

class vmaCreatePool(HookFactory):
    _name = "vmaCreatePool"

class vmaFindMemoryTypeIndex(HookFactory):
    _name = "vmaFindMemoryTypeIndex"

class vmaMapMemory(HookFactory):
    _name = "vmaMapMemory"

class vmaUnmapMemory(HookFactory):
    _name = "vmaUnmapMemory"

class cTkPhysicsComponentUpdater:
    class OnInit(HookFactory):
        _name = "cTkPhysicsComponentUpdater::OnInit"
    class UpdateComponents(HookFactory):
        _name = "cTkPhysicsComponentUpdater::UpdateComponents"
    class UpdateComponentsPostPhysics(HookFactory):
        _name = "cTkPhysicsComponentUpdater::UpdateComponentsPostPhysics"
    class OnComponentFree(HookFactory):
        _name = "cTkPhysicsComponentUpdater::OnComponentFree"
    class AddToPostPhysQueue(HookFactory):
        _name = "cTkPhysicsComponentUpdater::AddToPostPhysQueue"
    class GetInstance(HookFactory):
        _name = "cTkPhysicsComponentUpdater::GetInstance"

class ComponentInstancercTkPhysicsComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkPhysicsComponent::Register"
    class AllocateInstances(HookFactory):
        _name = "ComponentInstancercTkPhysicsComponent::AllocateInstances"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkPhysicsComponent::ConstructInstance"
    class DestructInstance(HookFactory):
        _name = "ComponentInstancercTkPhysicsComponent::DestructInstance"

class cTkStaticPhysicsComponentUpdater:
    class UpdateComponents(HookFactory):
        _name = "cTkStaticPhysicsComponentUpdater::UpdateComponents"
    class QueueStaticPhysicsJob(HookFactory):
        _name = "cTkStaticPhysicsComponentUpdater::QueueStaticPhysicsJob"

class ComponentInstancercTkStaticPhysicsComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkStaticPhysicsComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkStaticPhysicsComponent::ConstructInstance"

class ComponentInstancercTkDynamicChainComponent:
    class Register(HookFactory):
        _name = "ComponentInstancercTkDynamicChainComponent::Register"
    class ConstructInstance(HookFactory):
        _name = "ComponentInstancercTkDynamicChainComponent::ConstructInstance"

class cTkHavokWorld:
    class cTkHavokWorld(HookFactory):
        _name = "cTkHavokWorld::cTkHavokWorld"
    class CastLocalRaySingle(HookFactory):
        _name = "cTkHavokWorld::CastLocalRaySingle"
    class CastRaySingle(HookFactory):
        _name = "cTkHavokWorld::CastRaySingle"
    class Render(HookFactory):
        _name = "cTkHavokWorld::Render"
    class SetGravity(HookFactory):
        _name = "cTkHavokWorld::SetGravity"
    class stepSimulation(HookFactory):
        _name = "cTkHavokWorld::stepSimulation"

class cTkWindEigenvectors:
    class AllocElementVectors(HookFactory):
        _name = "cTkWindEigenvectors::AllocElementVectors"
    class CompactElementVectors(HookFactory):
        _name = "cTkWindEigenvectors::CompactElementVectors"

class AllocWindEigenvectors(HookFactory):
    _name = "AllocWindEigenvectors"

class cTkHavokProxyCharacterController:
    class Construct(HookFactory):
        _name = "cTkHavokProxyCharacterController::Construct"
    class Destruct(HookFactory):
        _name = "cTkHavokProxyCharacterController::Destruct"
    class ForcedUpdate(HookFactory):
        _name = "cTkHavokProxyCharacterController::ForcedUpdate"
    class GetPosition(HookFactory):
        _name = "cTkHavokProxyCharacterController::GetPosition"
    class Prepare(HookFactory):
        _name = "cTkHavokProxyCharacterController::Prepare"
    class Release(HookFactory):
        _name = "cTkHavokProxyCharacterController::Release"
    class SetMatrix(HookFactory):
        _name = "cTkHavokProxyCharacterController::SetMatrix"
    class SetPosition(HookFactory):
        _name = "cTkHavokProxyCharacterController::SetPosition"
    class applyAction(HookFactory):
        _name = "cTkHavokProxyCharacterController::applyAction"

class FindWindEigenvectorsJob(HookFactory):
    _name = "FindWindEigenvectorsJob"

class TkBit:
    class BitIterator:
        class Next(HookFactory):
            _name = "TkBit::BitIterator::Next"

class TkDrawPhysicsSphere(HookFactory):
    _name = "TkDrawPhysicsSphere"

class VecIntrinsics:
    class VOrthoNormalise(HookFactory):
        _name = "VecIntrinsics::VOrthoNormalise"

class cTkHavokGroupMaskFilter:
    class filterBodyPairs(HookFactory):
        _name = "cTkHavokGroupMaskFilter::filterBodyPairs"
    class isCollisionEnabled(HookFactory):
        _name = "cTkHavokGroupMaskFilter::isCollisionEnabled"
        _overload: overloads.cTkHavokGroupMaskFilter.isCollisionEnabled.overloads = "cTkHavokGroupMaskFilter *, hknpCollisionQueryType::Enum, const hknpQueryFilterData *, const hknpBody *"
        @classmethod
        def overload(cls, overload_args: overloads.cTkHavokGroupMaskFilter.isCollisionEnabled.overloads):
            cls._overload = overload_args
            return cls

class loopSubdivSphereTri(HookFactory):
    _name = "loopSubdivSphereTri"

class cTkBankInfo:
    class cTkBankInfo(HookFactory):
        _name = "cTkBankInfo::cTkBankInfo"

class sComponentEvent:
    class sComponentEvent(HookFactory):
        _name = "sComponentEvent::sComponentEvent"
    class Call(HookFactory):
        _name = "sComponentEvent::Call"

class sSketchCurve:
    class sSketchCurve(HookFactory):
        _name = "sSketchCurve::sSketchCurve"
    class DoCurveCallback(HookFactory):
        _name = "sSketchCurve::DoCurveCallback"
    class DoCurveEditor(HookFactory):
        _name = "sSketchCurve::DoCurveEditor"
    class DrawCurve(HookFactory):
        _name = "sSketchCurve::DrawCurve"
    class GetValue(HookFactory):
        _name = "sSketchCurve::GetValue"
    class RenderNGui(HookFactory):
        _name = "sSketchCurve::RenderNGui"

class sSketchStack:
    class CheckBufferSpace(HookFactory):
        _name = "sSketchStack::CheckBufferSpace"
    class FreeBuffer(HookFactory):
        _name = "sSketchStack::FreeBuffer"

class cTkSketchWindow:
    class CheckStringFilter(HookFactory):
        _name = "cTkSketchWindow::CheckStringFilter"
    class DoNodeAndChildren(HookFactory):
        _name = "cTkSketchWindow::DoNodeAndChildren"
    class ExtractComponentNameOnly(HookFactory):
        _name = "cTkSketchWindow::ExtractComponentNameOnly"
    class FindNodeIndexForFilter(HookFactory):
        _name = "cTkSketchWindow::FindNodeIndexForFilter"
    class FindSketchComponentForModel(HookFactory):
        _name = "cTkSketchWindow::FindSketchComponentForModel"
    class FindSketchComponentForSelectedNode(HookFactory):
        _name = "cTkSketchWindow::FindSketchComponentForSelectedNode"
    class OpenWindow(HookFactory):
        _name = "cTkSketchWindow::OpenWindow"
    class RefreshSelectedNode(HookFactory):
        _name = "cTkSketchWindow::RefreshSelectedNode"
    class RegisterSketchWindows(HookFactory):
        _name = "cTkSketchWindow::RegisterSketchWindows"
    class RenderEditorWindow(HookFactory):
        _name = "cTkSketchWindow::RenderEditorWindow"
    class RenderHierarchyWindow(HookFactory):
        _name = "cTkSketchWindow::RenderHierarchyWindow"
    class RenderVariablesWindow(HookFactory):
        _name = "cTkSketchWindow::RenderVariablesWindow"
    class SetSelectedNode(HookFactory):
        _name = "cTkSketchWindow::SetSelectedNode"

class ConstructFIOS(HookFactory):
    _name = "ConstructFIOS"

class GetVectorFromState(HookFactory):
    _name = "GetVectorFromState"

class TkSketchMaths:
    class ParseNumber(HookFactory):
        _name = "TkSketchMaths::ParseNumber"
    class RunFunction(HookFactory):
        _name = "TkSketchMaths::RunFunction"
    class ValidateFunction(HookFactory):
        _name = "TkSketchMaths::ValidateFunction"

class sSketchEvent:
    class RaiseEvent(HookFactory):
        _name = "sSketchEvent::RaiseEvent"

class cTkBlackboardValue:
    class RenderNGui(HookFactory):
        _name = "cTkBlackboardValue::RenderNGui"

class ResolveAlgebra(HookFactory):
    _name = "ResolveAlgebra"

class cTkIKChain:
    class Solve(HookFactory):
        _name = "cTkIKChain::Solve"

class cTkTransientHeap:
    class cTkTransientHeap(HookFactory):
        _name = "cTkTransientHeap::cTkTransientHeap"
    class Allocate(HookFactory):
        _name = "cTkTransientHeap::Allocate"
    class NewSubHeap(HookFactory):
        _name = "cTkTransientHeap::NewSubHeap"
    class ResetForReuse(HookFactory):
        _name = "cTkTransientHeap::ResetForReuse"

class cTkSlotAlloc:
    class Alloc(HookFactory):
        _name = "cTkSlotAlloc::Alloc"
    class Construct(HookFactory):
        _name = "cTkSlotAlloc::Construct"
    class Free(HookFactory):
        _name = "cTkSlotAlloc::Free"
    class GetTotalMemSizeIncAllocator(HookFactory):
        _name = "cTkSlotAlloc::GetTotalMemSizeIncAllocator"

class cTkRichPresenceData:
    class ApplyIdle(HookFactory):
        _name = "cTkRichPresenceData::ApplyIdle"
    class Evaluate(HookFactory):
        _name = "cTkRichPresenceData::Evaluate"

class cTkNGuiInput:
    class CentreCursor(HookFactory):
        _name = "cTkNGuiInput::CentreCursor"
    class ResetCursorToOrigin(HookFactory):
        _name = "cTkNGuiInput::ResetCursorToOrigin"

class cTkNGuiAnimationData:
    class GetUnitTime(HookFactory):
        _name = "cTkNGuiAnimationData::GetUnitTime"
    class StartActivate(HookFactory):
        _name = "cTkNGuiAnimationData::StartActivate"
    class UpdateEvents(HookFactory):
        _name = "cTkNGuiAnimationData::UpdateEvents"

class cTkNGuiFilter:
    class IsFiltered(HookFactory):
        _name = "cTkNGuiFilter::IsFiltered"

class NVGRegisterTexture(HookFactory):
    _name = "NVGRegisterTexture"

class NVGcreate(HookFactory):
    _name = "NVGcreate"

class cTkIconSelectPopup:
    class Render(HookFactory):
        _name = "cTkIconSelectPopup::Render"

class GLNVGtexture:
    class SetTexture(HookFactory):
        _name = "GLNVGtexture::SetTexture"

class glnvg__ActualEndFrame(HookFactory):
    _name = "glnvg__ActualEndFrame"

class glnvg__allocCall(HookFactory):
    _name = "glnvg__allocCall"

class glnvg__allocFragUniforms(HookFactory):
    _name = "glnvg__allocFragUniforms"

class glnvg__allocPaths(HookFactory):
    _name = "glnvg__allocPaths"

class glnvg__allocTexture(HookFactory):
    _name = "glnvg__allocTexture"

class glnvg__allocVerts(HookFactory):
    _name = "glnvg__allocVerts"

class glnvg__convertPaint(HookFactory):
    _name = "glnvg__convertPaint"

class glnvg__deleteTexture(HookFactory):
    _name = "glnvg__deleteTexture"

class glnvg(HookFactory):
    _name = "glnvg"

class glnvg__findTexture(HookFactory):
    _name = "glnvg__findTexture"

class glnvg__maxVertCount(HookFactory):
    _name = "glnvg__maxVertCount"

class glnvg__renderCancel(HookFactory):
    _name = "glnvg__renderCancel"

class glnvg__renderCreate(HookFactory):
    _name = "glnvg__renderCreate"

class glnvg__renderCreateTexture(HookFactory):
    _name = "glnvg__renderCreateTexture"

class glnvg__renderDelete(HookFactory):
    _name = "glnvg__renderDelete"

class glnvg__renderDeleteTexture(HookFactory):
    _name = "glnvg__renderDeleteTexture"

class glnvg__renderFill(HookFactory):
    _name = "glnvg__renderFill"

class glnvg__renderFlush(HookFactory):
    _name = "glnvg__renderFlush"

class glnvg__renderGetTextureSize(HookFactory):
    _name = "glnvg__renderGetTextureSize"

class glnvg__renderStroke(HookFactory):
    _name = "glnvg__renderStroke"

class glnvg__renderTriangles(HookFactory):
    _name = "glnvg__renderTriangles"

class glnvg__renderUpdateTexture(HookFactory):
    _name = "glnvg__renderUpdateTexture"

class glnvg__renderViewport(HookFactory):
    _name = "glnvg__renderViewport"

class glnvg__setUniforms(HookFactory):
    _name = "glnvg__setUniforms"

class glnvg__stroke(HookFactory):
    _name = "glnvg__stroke"

class cTkAsyncIOManagerImp:
    class cTkAsyncIOManagerImp(HookFactory):
        _name = "cTkAsyncIOManagerImp::cTkAsyncIOManagerImp"
    class FreeFilesystemOp(HookFactory):
        _name = "cTkAsyncIOManagerImp::FreeFilesystemOp"
    class OnAsyncOpCompletion(HookFactory):
        _name = "cTkAsyncIOManagerImp::OnAsyncOpCompletion"
    class OpThreadEntry(HookFactory):
        _name = "cTkAsyncIOManagerImp::OpThreadEntry"
    class Read(HookFactory):
        _name = "cTkAsyncIOManagerImp::Read"
    class ThreadUpdateOpsBlocking(HookFactory):
        _name = "cTkAsyncIOManagerImp::ThreadUpdateOpsBlocking"
    class ThreadUpdateOpsNonBlocking(HookFactory):
        _name = "cTkAsyncIOManagerImp::ThreadUpdateOpsNonBlocking"

class cTkFileSystemCache:
    class cTkFileSystemCache(HookFactory):
        _name = "cTkFileSystemCache::cTkFileSystemCache"
    class FindCachedFileSection(HookFactory):
        _name = "cTkFileSystemCache::FindCachedFileSection"
    class FreeOldestItem(HookFactory):
        _name = "cTkFileSystemCache::FreeOldestItem"
    class InvalidatePath(HookFactory):
        _name = "cTkFileSystemCache::InvalidatePath"
    class IsCacheablePath(HookFactory):
        _name = "cTkFileSystemCache::IsCacheablePath"
    class PollToPrecache(HookFactory):
        _name = "cTkFileSystemCache::PollToPrecache"
    class PrecacheFile(HookFactory):
        _name = "cTkFileSystemCache::PrecacheFile"
    class PrecacheFromFile(HookFactory):
        _name = "cTkFileSystemCache::PrecacheFromFile"
    class Read(HookFactory):
        _name = "cTkFileSystemCache::Read"
    class TryCachePathData(HookFactory):
        _name = "cTkFileSystemCache::TryCachePathData"

class cTkSimpleMemoryPool:
    class Allocate(HookFactory):
        _name = "cTkSimpleMemoryPool::Allocate"
    class Deallocate(HookFactory):
        _name = "cTkSimpleMemoryPool::Deallocate"
    class MergeBlocksRight(HookFactory):
        _name = "cTkSimpleMemoryPool::MergeBlocksRight"

class cTkAsyncIOManager:
    class CancelOp(HookFactory):
        _name = "cTkAsyncIOManager::CancelOp"
    class ClearFileCache(HookFactory):
        _name = "cTkAsyncIOManager::ClearFileCache"
    class Construct(HookFactory):
        _name = "cTkAsyncIOManager::Construct"
    class DeleteOpHandle(HookFactory):
        _name = "cTkAsyncIOManager::DeleteOpHandle"
    class DeleteOpHandles(HookFactory):
        _name = "cTkAsyncIOManager::DeleteOpHandles"
    class Destruct(HookFactory):
        _name = "cTkAsyncIOManager::Destruct"
    class GetNumActiveOps(HookFactory):
        _name = "cTkAsyncIOManager::GetNumActiveOps"
    class GetNumOpsCompleted(HookFactory):
        _name = "cTkAsyncIOManager::GetNumOpsCompleted"
    class GetOpData(HookFactory):
        _name = "cTkAsyncIOManager::GetOpData"
    class GetOpDataSize(HookFactory):
        _name = "cTkAsyncIOManager::GetOpDataSize"
    class GetOpPath(HookFactory):
        _name = "cTkAsyncIOManager::GetOpPath"
    class GetOpStatus(HookFactory):
        _name = "cTkAsyncIOManager::GetOpStatus"
    class IsOpCancelled(HookFactory):
        _name = "cTkAsyncIOManager::IsOpCancelled"
    class LockOpCritical(HookFactory):
        _name = "cTkAsyncIOManager::LockOpCritical"
    class Read(HookFactory):
        _name = "cTkAsyncIOManager::Read"
    class UnlockOpCritical(HookFactory):
        _name = "cTkAsyncIOManager::UnlockOpCritical"

class cTkHilbertMortonHelper:
    class cTkHilbertMortonHelper(HookFactory):
        _name = "cTkHilbertMortonHelper::cTkHilbertMortonHelper"

class cTkPolygoniserCuberille:
    class AddQuad(HookFactory):
        _name = "cTkPolygoniserCuberille::AddQuad"
    class Polygonise(HookFactory):
        _name = "cTkPolygoniserCuberille::Polygonise"
    class _IsFull(HookFactory):
        _name = "cTkPolygoniserCuberille::_IsFull"

class cTkPolygoniserDualContouring:
    class CalculateMaterials(HookFactory):
        _name = "cTkPolygoniserDualContouring::CalculateMaterials"
    class DualContouring(HookFactory):
        _name = "cTkPolygoniserDualContouring::DualContouring"
    class GeneratePolygons(HookFactory):
        _name = "cTkPolygoniserDualContouring::GeneratePolygons"
    class Polygonise(HookFactory):
        _name = "cTkPolygoniserDualContouring::Polygonise"

class cTkPolygoniserHeightmap:
    class GetMaterialsForTriangle(HookFactory):
        _name = "cTkPolygoniserHeightmap::GetMaterialsForTriangle"
    class Polygonise(HookFactory):
        _name = "cTkPolygoniserHeightmap::Polygonise"

class cTkPolygoniserMarchingCubes:
    class MarchCube(HookFactory):
        _name = "cTkPolygoniserMarchingCubes::MarchCube"
    class Polygonise(HookFactory):
        _name = "cTkPolygoniserMarchingCubes::Polygonise"
    class vGetNormal(HookFactory):
        _name = "cTkPolygoniserMarchingCubes::vGetNormal"

class MarkNeighbor(HookFactory):
    _name = "MarkNeighbor"

class CreateShaderModule(HookFactory):
    _name = "CreateShaderModule"

class MarkSelfAndAllMemberVarsAsUsed(HookFactory):
    _name = "MarkSelfAndAllMemberVarsAsUsed"

class ParseDecorations(HookFactory):
    _name = "ParseDecorations"

class ParseDescriptorBindings(HookFactory):
    _name = "ParseDescriptorBindings"

class ParseDescriptorBlockVariable(HookFactory):
    _name = "ParseDescriptorBlockVariable"

class ParseDescriptorBlockVariableSizes(HookFactory):
    _name = "ParseDescriptorBlockVariableSizes"

class ParseDescriptorBlockVariableUsage(HookFactory):
    _name = "ParseDescriptorBlockVariableUsage"

class ParseEntryPoints(HookFactory):
    _name = "ParseEntryPoints"

class ParseEntrypointDescriptorSets(HookFactory):
    _name = "ParseEntrypointDescriptorSets"

class ParseExecutionModes(HookFactory):
    _name = "ParseExecutionModes"

class ParseFormat(HookFactory):
    _name = "ParseFormat"

class ParseFunction(HookFactory):
    _name = "ParseFunction"

class ParseFunctions(HookFactory):
    _name = "ParseFunctions"

class ParseInterfaceVariable(HookFactory):
    _name = "ParseInterfaceVariable"

class ParseInterfaceVariables(HookFactory):
    _name = "ParseInterfaceVariables"

class ParseMemberCounts(HookFactory):
    _name = "ParseMemberCounts"

class ParseNodes(HookFactory):
    _name = "ParseNodes"

class ParsePushConstantBlocks(HookFactory):
    _name = "ParsePushConstantBlocks"

class ParseStaticallyUsedResources(HookFactory):
    _name = "ParseStaticallyUsedResources"

class ParseType(HookFactory):
    _name = "ParseType"

class SafeFreeBlockVariables(HookFactory):
    _name = "SafeFreeBlockVariables"

class SafeFreeInterfaceVariable(HookFactory):
    _name = "SafeFreeInterfaceVariable"

class SafeFreeTypes(HookFactory):
    _name = "SafeFreeTypes"

class SortCompareDescriptorBinding(HookFactory):
    _name = "SortCompareDescriptorBinding"

class AkFDNQSortCompare(HookFactory):
    _name = "AkFDNQSortCompare"

class SynchronizeDescriptorSets(HookFactory):
    _name = "SynchronizeDescriptorSets"

class TraverseCallGraph(HookFactory):
    _name = "TraverseCallGraph"

class spvReflectCreateShaderModule2(HookFactory):
    _name = "spvReflectCreateShaderModule2"

class spvReflectDestroyShaderModule(HookFactory):
    _name = "spvReflectDestroyShaderModule"

class spvReflectEnumerateDescriptorBindings(HookFactory):
    _name = "spvReflectEnumerateDescriptorBindings"

class spvReflectEnumerateInputVariables(HookFactory):
    _name = "spvReflectEnumerateInputVariables"

class cTkUserServiceWin:
    class AllowedMultiplayer(HookFactory):
        _name = "cTkUserServiceWin::AllowedMultiplayer"
    class GetCountryCode(HookFactory):
        _name = "cTkUserServiceWin::GetCountryCode"

class ProcessGainInt(HookFactory):
    _templates = ("T0", )
    _name = "ProcessGainInt<{T0}>"

class CreateAudioInputSource(HookFactory):
    _name = "CreateAudioInputSource"

class CreateAudioInputSourceParams(HookFactory):
    _name = "CreateAudioInputSourceParams"

class CAkFXSrcAudioInput:
    class Execute(HookFactory):
        _name = "CAkFXSrcAudioInput::Execute"
    class GetGain(HookFactory):
        _name = "CAkFXSrcAudioInput::GetGain"
    class Init(HookFactory):
        _name = "CAkFXSrcAudioInput::Init"

class CAkFXSrcSine:
    class GetPluginInfo(HookFactory):
        _name = "CAkFXSrcSine::GetPluginInfo"
    class Execute(HookFactory):
        _name = "CAkFXSrcSine::Execute"
    class GetDuration(HookFactory):
        _name = "CAkFXSrcSine::GetDuration"
    class Init(HookFactory):
        _name = "CAkFXSrcSine::Init"
    class Reset(HookFactory):
        _name = "CAkFXSrcSine::Reset"
    class StopLooping(HookFactory):
        _name = "CAkFXSrcSine::StopLooping"
    class TimeSkip(HookFactory):
        _name = "CAkFXSrcSine::TimeSkip"

class SetAudioInputCallbacks(HookFactory):
    _name = "SetAudioInputCallbacks"

class CAkFxSrcAudioInputParams:
    class CAkFxSrcAudioInputParams(HookFactory):
        _name = "CAkFxSrcAudioInputParams::CAkFxSrcAudioInputParams"
    class Clone(HookFactory):
        _name = "CAkFxSrcAudioInputParams::Clone"
    class Init(HookFactory):
        _name = "CAkFxSrcAudioInputParams::Init"
    class SetParam(HookFactory):
        _name = "CAkFxSrcAudioInputParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkFxSrcAudioInputParams::SetParamsBlock"

class AK__DSP__ApplyGain(HookFactory):
    _name = "AK__DSP__ApplyGain"

class AK__DSP__ApplyGain_0(HookFactory):
    _name = "AK__DSP__ApplyGain_0"

class CreateAkCompressorFX(HookFactory):
    _name = "CreateAkCompressorFX"

class CAkCompressorFX:
    class Execute(HookFactory):
        _name = "CAkCompressorFX::Execute"
    class GetPluginInfo(HookFactory):
        _name = "CAkCompressorFX::GetPluginInfo"
    class Init(HookFactory):
        _name = "CAkCompressorFX::Init"
    class Process(HookFactory):
        _name = "CAkCompressorFX::Process"
    class ProcessLinked(HookFactory):
        _name = "CAkCompressorFX::ProcessLinked"
    class ProcessMultiObjects(HookFactory):
        _name = "CAkCompressorFX::ProcessMultiObjects"
    class Reset(HookFactory):
        _name = "CAkCompressorFX::Reset"
    class Term(HookFactory):
        _name = "CAkCompressorFX::Term"

class ExecuteCompression(HookFactory):
    _name = "ExecuteCompression"

class AK__MixPower(HookFactory):
    _name = "AK__MixPower"

class CAkCompressorFXParams:
    class Clone(HookFactory):
        _name = "CAkCompressorFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkCompressorFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkCompressorFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkCompressorFXParams::SetParamsBlock"

class CreateAkCompressorFXParams(HookFactory):
    _name = "CreateAkCompressorFXParams"

class ExecuteCompression_AVX2(HookFactory):
    _name = "ExecuteCompression_AVX2"

class AkMismatchBuffer:
    class AddZeroes(HookFactory):
        _name = "AkMismatchBuffer::AddZeroes"
    class BufferInput(HookFactory):
        _name = "AkMismatchBuffer::BufferInput"

class AK__DSP__ApplyGainRamp(HookFactory):
    _name = "AK__DSP__ApplyGainRamp"

class ComputeSVtr(HookFactory):
    _name = "ComputeSVtr"

class CreateAkConvolutionReverbFX(HookFactory):
    _name = "CreateAkConvolutionReverbFX"

class CAkConvolutionReverbFX:
    class Execute(HookFactory):
        _name = "CAkConvolutionReverbFX::Execute"
    class Init(HookFactory):
        _name = "CAkConvolutionReverbFX::Init"
    class ParametersUpdate(HookFactory):
        _name = "CAkConvolutionReverbFX::ParametersUpdate"
    class ProcessSurroundChannels(HookFactory):
        _name = "CAkConvolutionReverbFX::ProcessSurroundChannels"
    class RelocateMedia(HookFactory):
        _name = "CAkConvolutionReverbFX::RelocateMedia"
    class Reset(HookFactory):
        _name = "CAkConvolutionReverbFX::Reset"
    class ResetFrontBackDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::ResetFrontBackDelay"
    class ResetPreDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::ResetPreDelay"
    class SetupFrontBackDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::SetupFrontBackDelay"
    class SetupPreDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::SetupPreDelay"
    class Term(HookFactory):
        _name = "CAkConvolutionReverbFX::Term"
    class TermFrontBackDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::TermFrontBackDelay"
    class TermPreDelay(HookFactory):
        _name = "CAkConvolutionReverbFX::TermPreDelay"
    class UpMix(HookFactory):
        _name = "CAkConvolutionReverbFX::UpMix"

class FillMxFBRotate(HookFactory):
    _name = "FillMxFBRotate"

class CAkRoomVerbFX:
    class GetPluginInfo(HookFactory):
        _name = "CAkRoomVerbFX::GetPluginInfo"
    class ComputeTCCoefs1(HookFactory):
        _name = "CAkRoomVerbFX::ComputeTCCoefs1"
    class ComputeTCCoefs2(HookFactory):
        _name = "CAkRoomVerbFX::ComputeTCCoefs2"
    class ComputeTCCoefs3(HookFactory):
        _name = "CAkRoomVerbFX::ComputeTCCoefs3"
    class Execute(HookFactory):
        _name = "CAkRoomVerbFX::Execute"
    class Init(HookFactory):
        _name = "CAkRoomVerbFX::Init"
    class LiveParametersUpdate(HookFactory):
        _name = "CAkRoomVerbFX::LiveParametersUpdate"
    class ProcessAmbisonics1stOrder(HookFactory):
        _name = "CAkRoomVerbFX::ProcessAmbisonics1stOrder"
    class ProcessHOA(HookFactory):
        _name = "CAkRoomVerbFX::ProcessHOA"
    class ProcessSpread1Out(HookFactory):
        _name = "CAkRoomVerbFX::ProcessSpread1Out"
    class ProcessSpread2Out(HookFactory):
        _name = "CAkRoomVerbFX::ProcessSpread2Out"
    class ProcessSpread3Out(HookFactory):
        _name = "CAkRoomVerbFX::ProcessSpread3Out"
    class ProcessSpread4Out(HookFactory):
        _name = "CAkRoomVerbFX::ProcessSpread4Out"
    class RTPCParametersUpdate(HookFactory):
        _name = "CAkRoomVerbFX::RTPCParametersUpdate"
    class Reset(HookFactory):
        _name = "CAkRoomVerbFX::Reset"
    class ResetFDNs(HookFactory):
        _name = "CAkRoomVerbFX::ResetFDNs"
    class ResetToneControlFilters(HookFactory):
        _name = "CAkRoomVerbFX::ResetToneControlFilters"
    class ReverbPreProcess(HookFactory):
        _name = "CAkRoomVerbFX::ReverbPreProcess"
    class SetupFDNs(HookFactory):
        _name = "CAkRoomVerbFX::SetupFDNs"
    class SetupReverbDelay(HookFactory):
        _name = "CAkRoomVerbFX::SetupReverbDelay"
    class SetupToneControlFilters(HookFactory):
        _name = "CAkRoomVerbFX::SetupToneControlFilters"
    class Term(HookFactory):
        _name = "CAkRoomVerbFX::Term"
    class TermERUnit(HookFactory):
        _name = "CAkRoomVerbFX::TermERUnit"
    class TermFDNs(HookFactory):
        _name = "CAkRoomVerbFX::TermFDNs"
    class WetPreProcess(HookFactory):
        _name = "CAkRoomVerbFX::WetPreProcess"

class CAkConvolutionReverbFXParams:
    class Clone(HookFactory):
        _name = "CAkConvolutionReverbFXParams::Clone"
    class GetParams(HookFactory):
        _name = "CAkConvolutionReverbFXParams::GetParams"
    class SetParam(HookFactory):
        _name = "CAkConvolutionReverbFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkConvolutionReverbFXParams::SetParamsBlock"

class CreateAkConvolutionReverbFXParams(HookFactory):
    _name = "CreateAkConvolutionReverbFXParams"

class CAkGuitarDistortionFXParams:
    class Init(HookFactory):
        _name = "CAkGuitarDistortionFXParams::Init"
    class Clone(HookFactory):
        _name = "CAkGuitarDistortionFXParams::Clone"
    class GetParams(HookFactory):
        _name = "CAkGuitarDistortionFXParams::GetParams"
    class SetParam(HookFactory):
        _name = "CAkGuitarDistortionFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkGuitarDistortionFXParams::SetParamsBlock"

class DSP:
    class CDelayLight:
        class Init(HookFactory):
            _name = "DSP::CDelayLight::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::CDelayLight::ProcessBuffer"
        class Reset(HookFactory):
            _name = "DSP::CDelayLight::Reset"
    class DelayLine:
        class Term(HookFactory):
            _name = "DSP::DelayLine::Term"
        class Init(HookFactory):
            _name = "DSP::DelayLine::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::DelayLine::ProcessBuffer"
            _overload: overloads.DSP.DelayLine.ProcessBuffer.overloads = "DSP::DelayLine *, float *, float *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.DSP.DelayLine.ProcessBuffer.overloads):
                cls._overload = overload_args
                return cls
        class Reset(HookFactory):
            _name = "DSP::DelayLine::Reset"
    class Mix2(HookFactory):
        _name = "DSP::Mix2"
        _overload: overloads.DSP.Mix2.overloads = "float *, float *, float *, double, float, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.DSP.Mix2.overloads):
            cls._overload = overload_args
            return cls
    class Mix2Interp(HookFactory):
        _name = "DSP::Mix2Interp"
        _overload: overloads.DSP.Mix2Interp.overloads = "float *, float *, float *, float, float, float, float, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.DSP.Mix2Interp.overloads):
            cls._overload = overload_args
            return cls
    class ComputeLRMixGains(HookFactory):
        _name = "DSP::ComputeLRMixGains"
    class MixStereoWidth(HookFactory):
        _name = "DSP::MixStereoWidth"
        _overload: overloads.DSP.MixStereoWidth.overloads = "float *, float *, float *, float *, unsigned int, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.DSP.MixStereoWidth.overloads):
            cls._overload = overload_args
            return cls
    class AkDownMix(HookFactory):
        _name = "DSP::AkDownMix"
    class UniComb:
        class Init(HookFactory):
            _name = "DSP::UniComb::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::UniComb::ProcessBuffer"
        class ProcessBufferLFO(HookFactory):
            _name = "DSP::UniComb::ProcessBufferLFO"
        class Reset(HookFactory):
            _name = "DSP::UniComb::Reset"
        class SetParams(HookFactory):
            _name = "DSP::UniComb::SetParams"
        class Term(HookFactory):
            _name = "DSP::UniComb::Term"
    class SIMD:
        class _SetCoefs(HookFactory):
            _templates = ("T0", )
            _name = "DSP::SIMD::_SetCoefs<{T0}>"
        class BiquadMultiCoefs:
            class _Init(HookFactory):
                _name = "DSP::SIMD::BiquadMultiCoefs::_Init"
        class BiquadMonoCoefs:
            class ComputeCoefs(HookFactory):
                _name = "DSP::SIMD::BiquadMonoCoefs::ComputeCoefs"
        class ParallelBiquad:
            class ProcessBuffers(HookFactory):
                _name = "DSP::SIMD::ParallelBiquad::ProcessBuffers"
    class CAkMultiBandEQ:
        class CAkMultiBandEQ(HookFactory):
            _name = "DSP::CAkMultiBandEQ::CAkMultiBandEQ"
        class Init(HookFactory):
            _name = "DSP::CAkMultiBandEQ::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::CAkMultiBandEQ::ProcessBuffer"
        class Reset(HookFactory):
            _name = "DSP::CAkMultiBandEQ::Reset"
        class SetBandActive(HookFactory):
            _name = "DSP::CAkMultiBandEQ::SetBandActive"
        class SetCoefficients(HookFactory):
            _name = "DSP::CAkMultiBandEQ::SetCoefficients"
        class Term(HookFactory):
            _name = "DSP::CAkMultiBandEQ::Term"
    class CAkDistortion:
        class CAkDistortion(HookFactory):
            _name = "DSP::CAkDistortion::CAkDistortion"
        class ProcessBuffer(HookFactory):
            _name = "DSP::CAkDistortion::ProcessBuffer"
        class ProcessClip(HookFactory):
            _name = "DSP::CAkDistortion::ProcessClip"
        class ProcessFuzz(HookFactory):
            _name = "DSP::CAkDistortion::ProcessFuzz"
        class ProcessHeavy(HookFactory):
            _name = "DSP::CAkDistortion::ProcessHeavy"
        class ProcessOverdrive(HookFactory):
            _name = "DSP::CAkDistortion::ProcessOverdrive"
        class SetParameters(HookFactory):
            _name = "DSP::CAkDistortion::SetParameters"
    class CAkRectifier:
        class ProcessBuffer(HookFactory):
            _name = "DSP::CAkRectifier::ProcessBuffer"
        class ProcessChannel(HookFactory):
            _name = "DSP::CAkRectifier::ProcessChannel"
        class SetRectification(HookFactory):
            _name = "DSP::CAkRectifier::SetRectification"
    class OnePoleZeroHPFilter:
        class ProcessBuffer(HookFactory):
            _name = "DSP::OnePoleZeroHPFilter::ProcessBuffer"
        class ProcessBufferWithGain(HookFactory):
            _name = "DSP::OnePoleZeroHPFilter::ProcessBufferWithGain"
    class BUTTERFLYSET_NAMESPACE:
        class CAkPhaseVocoder:
            class CAkPhaseVocoder(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkPhaseVocoder::CAkPhaseVocoder"
            class Init(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkPhaseVocoder::Init"
            class Reset(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkPhaseVocoder::Reset"
            class Term(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkPhaseVocoder::Term"
        class CAkResamplingPhaseVocoder:
            class CAkResamplingPhaseVocoder(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::CAkResamplingPhaseVocoder"
            class Init(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::Init"
            class ProcessPitchChannel(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::ProcessPitchChannel"
            class Reset(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::Reset"
            class ResetInputFill(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::ResetInputFill"
            class Term(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkResamplingPhaseVocoder::Term"
        class CAkFreqWindow:
            class Alloc(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::Alloc"
            class CartToPol(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::CartToPol"
                _overload: overloads.DSP.BUTTERFLYSET_NAMESPACE.CAkFreqWindow.CartToPol.overloads = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow *, AkFft::cpx_bin *"
                @classmethod
                def overload(cls, overload_args: overloads.DSP.BUTTERFLYSET_NAMESPACE.CAkFreqWindow.CartToPol.overloads):
                    cls._overload = overload_args
                    return cls
            class Compute(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::Compute"
            class ComputeVocoderSpectrum(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::ComputeVocoderSpectrum"
                _overload: overloads.DSP.BUTTERFLYSET_NAMESPACE.CAkFreqWindow.ComputeVocoderSpectrum.overloads = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow *, DSP::AkPolar *, DSP::AkPolar *, float *, unsigned int, float, bool, DSP::AkPolar *"
                @classmethod
                def overload(cls, overload_args: overloads.DSP.BUTTERFLYSET_NAMESPACE.CAkFreqWindow.ComputeVocoderSpectrum.overloads):
                    cls._overload = overload_args
                    return cls
            class ConvertToTimeDomain(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::ConvertToTimeDomain"
            class Free(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::Free"
            class PolToCart(HookFactory):
                _name = "DSP::BUTTERFLYSET_NAMESPACE::CAkFreqWindow::PolToCart"
        class PairedCartToPol(HookFactory):
            _name = "DSP::BUTTERFLYSET_NAMESPACE::PairedCartToPol"
        class PolarToCart(HookFactory):
            _name = "DSP::BUTTERFLYSET_NAMESPACE::PolarToCart"
    class CAkCircularBuffer:
        class AdvanceFrames(HookFactory):
            _name = "DSP::CAkCircularBuffer::AdvanceFrames"
        class Init(HookFactory):
            _name = "DSP::CAkCircularBuffer::Init"
        class ReadFrameBlock(HookFactory):
            _name = "DSP::CAkCircularBuffer::ReadFrameBlock"
        class Reset(HookFactory):
            _name = "DSP::CAkCircularBuffer::Reset"
        class Term(HookFactory):
            _name = "DSP::CAkCircularBuffer::Term"
    class CAkOLACircularBuffer:
        class Init(HookFactory):
            _name = "DSP::CAkOLACircularBuffer::Init"
        class IsDoneTail(HookFactory):
            _name = "DSP::CAkOLACircularBuffer::IsDoneTail"
        class PopFrames(HookFactory):
            _name = "DSP::CAkOLACircularBuffer::PopFrames"
        class PushOverlappedWindow(HookFactory):
            _name = "DSP::CAkOLACircularBuffer::PushOverlappedWindow"
            _overload: overloads.DSP.CAkOLACircularBuffer.PushOverlappedWindow.overloads = "DSP::CAkOLACircularBuffer *, float *, unsigned int, float *"
            @classmethod
            def overload(cls, overload_args: overloads.DSP.CAkOLACircularBuffer.PushOverlappedWindow.overloads):
                cls._overload = overload_args
                return cls
    class CAkTimeWindow:
        class Apply(HookFactory):
            _name = "DSP::CAkTimeWindow::Apply"
            _overload: overloads.DSP.CAkTimeWindow.Apply.overloads = "DSP::CAkTimeWindow *, float *, unsigned int, float *"
            @classmethod
            def overload(cls, overload_args: overloads.DSP.CAkTimeWindow.Apply.overloads):
                cls._overload = overload_args
                return cls
        class Init(HookFactory):
            _name = "DSP::CAkTimeWindow::Init"
        class Term(HookFactory):
            _name = "DSP::CAkTimeWindow::Term"
    class CAkResamplingCircularBuffer:
        class PushFrames(HookFactory):
            _name = "DSP::CAkResamplingCircularBuffer::PushFrames"
        class Reset(HookFactory):
            _name = "DSP::CAkResamplingCircularBuffer::Reset"
    class ERUnitDual:
        class Init(HookFactory):
            _name = "DSP::ERUnitDual::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::ERUnitDual::ProcessBuffer"
        class Reset(HookFactory):
            _name = "DSP::ERUnitDual::Reset"
    class AllpassFilter:
        class Init(HookFactory):
            _name = "DSP::AllpassFilter::Init"
        class ProcessBuffer(HookFactory):
            _name = "DSP::AllpassFilter::ProcessBuffer"
        class Reset(HookFactory):
            _name = "DSP::AllpassFilter::Reset"
    class FDN4:
        class ChangeDecay(HookFactory):
            _name = "DSP::FDN4::ChangeDecay"
        class ComputeMaxStableHFRatio(HookFactory):
            _name = "DSP::FDN4::ComputeMaxStableHFRatio"
        class Init(HookFactory):
            _name = "DSP::FDN4::Init"
        class ProcessBufferAccum(HookFactory):
            _name = "DSP::FDN4::ProcessBufferAccum"
            _overload: overloads.DSP.FDN4.ProcessBufferAccum.overloads = "DSP::FDN4 *, float *, float *, float *, float *, unsigned int"
            @classmethod
            def overload(cls, overload_args: overloads.DSP.FDN4.ProcessBufferAccum.overloads):
                cls._overload = overload_args
                return cls
        class Reset(HookFactory):
            _name = "DSP::FDN4::Reset"
        class Term(HookFactory):
            _name = "DSP::FDN4::Term"
    class ConstantPowerChannelMixdown(HookFactory):
        _name = "DSP::ConstantPowerChannelMixdown"
    class Mix3Interp(HookFactory):
        _name = "DSP::Mix3Interp"

class CAkPartitionedConvolutionEngine:
    class CAkPartitionedConvolutionEngine(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::CAkPartitionedConvolutionEngine"
    class ExecuteChannels(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::ExecuteChannels"
    class Init(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::Init"
    class InitConvolutionInstance(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::InitConvolutionInstance"
    class RelocateMedia(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::RelocateMedia"
    class Reset(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::Reset"
    class Term(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::Term"
    class TermOverlapSaveBuffer(HookFactory):
        _name = "CAkPartitionedConvolutionEngine::TermOverlapSaveBuffer"

class CAkHalfPrecisionConvolutionEngine:
    class CAkHalfPrecisionConvolutionEngine(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::CAkHalfPrecisionConvolutionEngine"
    class ExecuteChannels(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::ExecuteChannels"
    class Init(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::Init"
    class InitConvolutionInstance(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::InitConvolutionInstance"
    class RelocateMedia(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::RelocateMedia"
    class Reset(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::Reset"
    class Term(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::Term"
    class TermHistoryBuffer(HookFactory):
        _name = "CAkHalfPrecisionConvolutionEngine::TermHistoryBuffer"

class AkFft:
    class DetermineFftStages(HookFactory):
        _name = "AkFft::DetermineFftStages"
    class FftKernel(HookFactory):
        _name = "AkFft::FftKernel"
    class FftReal(HookFactory):
        _name = "AkFft::FftReal"
    class GetFftConfigSize(HookFactory):
        _name = "AkFft::GetFftConfigSize"
    class GetFftTempSize(HookFactory):
        _name = "AkFft::GetFftTempSize"
    class GetNumStages(HookFactory):
        _name = "AkFft::GetNumStages"
    class IfftReal(HookFactory):
        _name = "AkFft::IfftReal"
    class InitFftConfig(HookFactory):
        _name = "AkFft::InitFftConfig"
    class InitFftConfigOffsets(HookFactory):
        _name = "AkFft::InitFftConfigOffsets"
    class InitTwiddleTable(HookFactory):
        _name = "AkFft::InitTwiddleTable"
    class InitTwiddleTablePtrs(HookFactory):
        _name = "AkFft::InitTwiddleTablePtrs"
    class Radix3_Stage_Scalar(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix3_Stage_Scalar<{T0}>"
    class Radix4_Stage_Scalar(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix4_Stage_Scalar<{T0}>"
    class Radix5_Stage_Scalar(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix5_Stage_Scalar<{T0}>"
    class Radix8_Stage0_Scalar(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix8_Stage0_Scalar<{T0}>"
    class RadixGeneric_StageFin_Scalar(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::RadixGeneric_StageFin_Scalar<{T0}>"
    class CpxToReal_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::CpxToReal_V4F32<{T0}>"
    class Radix3_Stage_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix3_Stage_V4F32<{T0}>"
    class Radix4_StageFinal_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix4_StageFinal_V4F32<{T0}>"
    class Radix4_Stage_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix4_Stage_V4F32<{T0}>"
    class Radix5_Stage_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix5_Stage_V4F32<{T0}>"
    class Radix8_Stage0_V4F32(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix8_Stage0_V4F32<{T0}>"
    class CpxToReal_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::CpxToReal_AVX2<{T0}>"
    class Radix3_Stage_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix3_Stage_AVX2<{T0}>"
    class Radix4_StageFinal_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix4_StageFinal_AVX2<{T0}>"
    class Radix4_Stage_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix4_Stage_AVX2<{T0}>"
    class Radix5_Stage_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix5_Stage_AVX2<{T0}>"
    class Radix8_Stage0_AVX2(HookFactory):
        _templates = ("T0", )
        _name = "AkFft::Radix8_Stage0_AVX2<{T0}>"

class FreqDomainBufferMult_V4F32(HookFactory):
    _name = "FreqDomainBufferMult_V4F32"

class StoreAccumulatedFreq_V4F32(HookFactory):
    _name = "StoreAccumulatedFreq_V4F32"

class WriteHistoryPartition_V4F32(HookFactory):
    _name = "WriteHistoryPartition_V4F32"

class FreqDomainBufferMult_V8_F16C(HookFactory):
    _name = "FreqDomainBufferMult_V8_F16C"

class StoreAccumulatedFreq_V8F32(HookFactory):
    _name = "StoreAccumulatedFreq_V8F32"

class WriteHistoryPartition_V8_F16C(HookFactory):
    _name = "WriteHistoryPartition_V8_F16C"

class FreqDomainBufferMult_V8_AVX2(HookFactory):
    _name = "FreqDomainBufferMult_V8_AVX2"

class CreateAkDelayFX(HookFactory):
    _name = "CreateAkDelayFX"

class CreateAkDelayFXParams(HookFactory):
    _name = "CreateAkDelayFXParams"

class CAkDelayFX:
    class Execute(HookFactory):
        _name = "CAkDelayFX::Execute"
    class Init(HookFactory):
        _name = "CAkDelayFX::Init"
    class Reset(HookFactory):
        _name = "CAkDelayFX::Reset"
    class Term(HookFactory):
        _name = "CAkDelayFX::Term"

class CAkTremoloFX:
    class GetPluginInfo(HookFactory):
        _name = "CAkTremoloFX::GetPluginInfo"
    class Execute(HookFactory):
        _name = "CAkTremoloFX::Execute"
    class Init(HookFactory):
        _name = "CAkTremoloFX::Init"

class CAkDelayFXParams:
    class CAkDelayFXParams(HookFactory):
        _name = "CAkDelayFXParams::CAkDelayFXParams"
    class Clone(HookFactory):
        _name = "CAkDelayFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkDelayFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkDelayFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkDelayFXParams::SetParamsBlock"

class CAkDelayFXDSP:
    class CAkDelayFXDSP(HookFactory):
        _name = "CAkDelayFXDSP::CAkDelayFXDSP"
    class ComputeTailLength(HookFactory):
        _name = "CAkDelayFXDSP::ComputeTailLength"
    class Process(HookFactory):
        _name = "CAkDelayFXDSP::Process"
    class ResetDelay(HookFactory):
        _name = "CAkDelayFXDSP::ResetDelay"
    class Setup(HookFactory):
        _name = "CAkDelayFXDSP::Setup"
    class TermDelay(HookFactory):
        _name = "CAkDelayFXDSP::TermDelay"

class CreateAkFlangerFX(HookFactory):
    _name = "CreateAkFlangerFX"

class CAkFlangerFX:
    class Execute(HookFactory):
        _name = "CAkFlangerFX::Execute"
    class Init(HookFactory):
        _name = "CAkFlangerFX::Init"
    class LiveParametersUpdate(HookFactory):
        _name = "CAkFlangerFX::LiveParametersUpdate"
    class Reset(HookFactory):
        _name = "CAkFlangerFX::Reset"
    class Term(HookFactory):
        _name = "CAkFlangerFX::Term"
    class TermUniCombs(HookFactory):
        _name = "CAkFlangerFX::TermUniCombs"

class CAkFlangerFXParams:
    class Clone(HookFactory):
        _name = "CAkFlangerFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkFlangerFXParams::Init"
    class SetDirty(HookFactory):
        _name = "CAkFlangerFXParams::SetDirty"
    class SetParam(HookFactory):
        _name = "CAkFlangerFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkFlangerFXParams::SetParamsBlock"

class CreateAkFlangerFXParams(HookFactory):
    _name = "CreateAkFlangerFXParams"

class CreateAkGainFX(HookFactory):
    _name = "CreateAkGainFX"

class CAkGainFXParams:
    class Clone(HookFactory):
        _name = "CAkGainFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkGainFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkGainFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkGainFXParams::SetParamsBlock"

class CreateAkGainFXParams(HookFactory):
    _name = "CreateAkGainFXParams"

class CreateAkGuitarDistortionFX(HookFactory):
    _name = "CreateAkGuitarDistortionFX"

class CAkGuitarDistortionFX:
    class Execute(HookFactory):
        _name = "CAkGuitarDistortionFX::Execute"
    class Init(HookFactory):
        _name = "CAkGuitarDistortionFX::Init"
    class Reset(HookFactory):
        _name = "CAkGuitarDistortionFX::Reset"
    class SetupEQs(HookFactory):
        _name = "CAkGuitarDistortionFX::SetupEQs"
    class Term(HookFactory):
        _name = "CAkGuitarDistortionFX::Term"

class AkGuitarDistortionFXParams:
    class AkGuitarDistortionFXParams(HookFactory):
        _name = "AkGuitarDistortionFXParams::AkGuitarDistortionFXParams"

class CreateAkGuitarDistortionFXParams(HookFactory):
    _name = "CreateAkGuitarDistortionFXParams"

class DSP__ComputeBiquadCoefs(HookFactory):
    _name = "DSP__ComputeBiquadCoefs"

class CAkPathManager:
    class CAkPathManager(HookFactory):
        _name = "CAkPathManager::CAkPathManager"
    class AddPathToList(HookFactory):
        _name = "CAkPathManager::AddPathToList"
    class AddPathUser(HookFactory):
        _name = "CAkPathManager::AddPathUser"
    class AddPotentialUser(HookFactory):
        _name = "CAkPathManager::AddPotentialUser"
    class Init(HookFactory):
        _name = "CAkPathManager::Init"
    class Pause(HookFactory):
        _name = "CAkPathManager::Pause"
    class ProcessPathsList(HookFactory):
        _name = "CAkPathManager::ProcessPathsList"
    class RemovePathFromList(HookFactory):
        _name = "CAkPathManager::RemovePathFromList"
    class RemovePathUser(HookFactory):
        _name = "CAkPathManager::RemovePathUser"
    class RemovePotentialUser(HookFactory):
        _name = "CAkPathManager::RemovePotentialUser"
    class Resume(HookFactory):
        _name = "CAkPathManager::Resume"
    class SetPathsList(HookFactory):
        _name = "CAkPathManager::SetPathsList"
    class Start(HookFactory):
        _name = "CAkPathManager::Start"
    class Term(HookFactory):
        _name = "CAkPathManager::Term"

class CreateAkHarmonizerFX(HookFactory):
    _name = "CreateAkHarmonizerFX"

class CAkHarmonizerFX:
    class Execute(HookFactory):
        _name = "CAkHarmonizerFX::Execute"
    class Init(HookFactory):
        _name = "CAkHarmonizerFX::Init"
    class InitDryDelay(HookFactory):
        _name = "CAkHarmonizerFX::InitDryDelay"
    class InitPitchVoices(HookFactory):
        _name = "CAkHarmonizerFX::InitPitchVoices"
    class Reset(HookFactory):
        _name = "CAkHarmonizerFX::Reset"
    class ResetDryDelay(HookFactory):
        _name = "CAkHarmonizerFX::ResetDryDelay"
    class ResetPitchVoices(HookFactory):
        _name = "CAkHarmonizerFX::ResetPitchVoices"
    class Term(HookFactory):
        _name = "CAkHarmonizerFX::Term"
    class TermDryDelay(HookFactory):
        _name = "CAkHarmonizerFX::TermDryDelay"
    class TermPitchVoices(HookFactory):
        _name = "CAkHarmonizerFX::TermPitchVoices"

class CAkHarmonizerFXParams:
    class Clone(HookFactory):
        _name = "CAkHarmonizerFXParams::Clone"
    class GetParams(HookFactory):
        _name = "CAkHarmonizerFXParams::GetParams"
    class SetParam(HookFactory):
        _name = "CAkHarmonizerFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkHarmonizerFXParams::SetParamsBlock"

class CreateAkHarmonizerFXParams(HookFactory):
    _name = "CreateAkHarmonizerFXParams"

class AkHarmonizerDSPProcess(HookFactory):
    _name = "AkHarmonizerDSPProcess"

class AkHarmonizerDSPProcessVoice(HookFactory):
    _name = "AkHarmonizerDSPProcessVoice"

class CreateAkMatrixReverbFX(HookFactory):
    _name = "CreateAkMatrixReverbFX"

class CAkFDNReverbFX:
    class Execute(HookFactory):
        _name = "CAkFDNReverbFX::Execute"
    class Init(HookFactory):
        _name = "CAkFDNReverbFX::Init"
    class ProcessFivePointOne12(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointOne12"
    class ProcessFivePointOne16(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointOne16"
    class ProcessFivePointOne4(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointOne4"
    class ProcessFivePointOne8(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointOne8"
    class ProcessFivePointZero12(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointZero12"
    class ProcessFivePointZero16(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointZero16"
    class ProcessFivePointZero4(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointZero4"
    class ProcessFivePointZero8(HookFactory):
        _name = "CAkFDNReverbFX::ProcessFivePointZero8"
    class ProcessMono12(HookFactory):
        _name = "CAkFDNReverbFX::ProcessMono12"
    class ProcessMono16(HookFactory):
        _name = "CAkFDNReverbFX::ProcessMono16"
    class ProcessMono4(HookFactory):
        _name = "CAkFDNReverbFX::ProcessMono4"
    class ProcessMono8(HookFactory):
        _name = "CAkFDNReverbFX::ProcessMono8"
    class ProcessN12(HookFactory):
        _name = "CAkFDNReverbFX::ProcessN12"
    class ProcessN16(HookFactory):
        _name = "CAkFDNReverbFX::ProcessN16"
    class ProcessN4(HookFactory):
        _name = "CAkFDNReverbFX::ProcessN4"
    class ProcessN8(HookFactory):
        _name = "CAkFDNReverbFX::ProcessN8"
    class ProcessStereo12(HookFactory):
        _name = "CAkFDNReverbFX::ProcessStereo12"
    class ProcessStereo16(HookFactory):
        _name = "CAkFDNReverbFX::ProcessStereo16"
    class ProcessStereo4(HookFactory):
        _name = "CAkFDNReverbFX::ProcessStereo4"
    class ProcessStereo8(HookFactory):
        _name = "CAkFDNReverbFX::ProcessStereo8"
    class Reset(HookFactory):
        _name = "CAkFDNReverbFX::Reset"
    class Term(HookFactory):
        _name = "CAkFDNReverbFX::Term"
    class TermDelayLines(HookFactory):
        _name = "CAkFDNReverbFX::TermDelayLines"

class CAkFDNReverbFXParams:
    class Clone(HookFactory):
        _name = "CAkFDNReverbFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkFDNReverbFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkFDNReverbFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkFDNReverbFXParams::SetParamsBlock"

class CreateAkMatrixReverbFXParams(HookFactory):
    _name = "CreateAkMatrixReverbFXParams"

class AkMemFreeDefault(HookFactory):
    _name = "AkMemFreeDefault"

class AkMemMalignDefault(HookFactory):
    _name = "AkMemMalignDefault"

class AkMemMallocDefault(HookFactory):
    _name = "AkMemMallocDefault"

class AkMemReallocAlignedDefault(HookFactory):
    _name = "AkMemReallocAlignedDefault"

class AkMemReallocDefault(HookFactory):
    _name = "AkMemReallocDefault"

class AkMemSizeOfMemoryDefault(HookFactory):
    _name = "AkMemSizeOfMemoryDefault"

class AkMemTermForThreadDefault(HookFactory):
    _name = "AkMemTermForThreadDefault"

class AkMemTotalReservedMemorySizeDefault(HookFactory):
    _name = "AkMemTotalReservedMemorySizeDefault"

class AKPLATFORM:
    class AllocVM(HookFactory):
        _name = "AKPLATFORM::AllocVM"
    class FreeVM(HookFactory):
        _name = "AKPLATFORM::FreeVM"
    class AkWideCharToChar(HookFactory):
        _name = "AKPLATFORM::AkWideCharToChar"
    class AkSetThreadName(HookFactory):
        _name = "AKPLATFORM::AkSetThreadName"
    class SafeStrCpy(HookFactory):
        _name = "AKPLATFORM::SafeStrCpy"

class ak_rpaligned_alloc(HookFactory):
    _name = "ak_rpaligned_alloc"

class ak_rpaligned_realloc(HookFactory):
    _name = "ak_rpaligned_realloc"

class ak_rpfree(HookFactory):
    _name = "ak_rpfree"

class ak_rpmalloc(HookFactory):
    _name = "ak_rpmalloc"

class ak_rpmalloc_finalize(HookFactory):
    _name = "ak_rpmalloc_finalize"

class ak_rpmalloc_heap_acquire(HookFactory):
    _name = "ak_rpmalloc_heap_acquire"

class ak_rpmalloc_heap_aligned_alloc(HookFactory):
    _name = "ak_rpmalloc_heap_aligned_alloc"

class ak_rpmalloc_heap_aligned_realloc(HookFactory):
    _name = "ak_rpmalloc_heap_aligned_realloc"

class ak_rpmalloc_heap_alloc(HookFactory):
    _name = "ak_rpmalloc_heap_alloc"

class ak_rpmalloc_heap_free(HookFactory):
    _name = "ak_rpmalloc_heap_free"

class ak_rpmalloc_heap_realloc(HookFactory):
    _name = "ak_rpmalloc_heap_realloc"

class ak_rpmalloc_heap_release(HookFactory):
    _name = "ak_rpmalloc_heap_release"

class ak_rpmalloc_initialize_config(HookFactory):
    _name = "ak_rpmalloc_initialize_config"

class ak_rpmalloc_thread_finalize(HookFactory):
    _name = "ak_rpmalloc_thread_finalize"

class ak_rpmalloc_total_reserved_size(HookFactory):
    _name = "ak_rpmalloc_total_reserved_size"

class ak_rpmalloc_usable_size(HookFactory):
    _name = "ak_rpmalloc_usable_size"

class ak_rprealloc(HookFactory):
    _name = "ak_rprealloc"

class get_thread_heap(HookFactory):
    _name = "get_thread_heap"

class AkMeterApplyBallistics(HookFactory):
    _name = "AkMeterApplyBallistics"

class AkMeterGetValue(HookFactory):
    _name = "AkMeterGetValue"

class AkMeterGetValueMultiObjects(HookFactory):
    _name = "AkMeterGetValueMultiObjects"

class CreateAkMeterFX(HookFactory):
    _name = "CreateAkMeterFX"

class CAkMeterFX:
    class Execute(HookFactory):
        _name = "CAkMeterFX::Execute"
    class Init(HookFactory):
        _name = "CAkMeterFX::Init"
    class Reset(HookFactory):
        _name = "CAkMeterFX::Reset"
    class Term(HookFactory):
        _name = "CAkMeterFX::Term"

class CAkMeterFXParams:
    class Clone(HookFactory):
        _name = "CAkMeterFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkMeterFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkMeterFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkMeterFXParams::SetParamsBlock"

class CreateAkMeterFXParams(HookFactory):
    _name = "CreateAkMeterFXParams"

class AkMeterFXRegisterCallback(HookFactory):
    _name = "AkMeterFXRegisterCallback"

class CAkMeterManager:
    class BehavioralExtension(HookFactory):
        _name = "CAkMeterManager::BehavioralExtension"
    class Execute(HookFactory):
        _name = "CAkMeterManager::Execute"
    class Instance(HookFactory):
        _name = "CAkMeterManager::Instance"
    class Register(HookFactory):
        _name = "CAkMeterManager::Register"
    class Unregister(HookFactory):
        _name = "CAkMeterManager::Unregister"

class AkPBIParams:
    class AkPBIParams(HookFactory):
        _name = "AkPBIParams::AkPBIParams"
        _overload: overloads.AkPBIParams.AkPBIParams.overloads = "AkPBIParams *"
        @classmethod
        def overload(cls, overload_args: overloads.AkPBIParams.AkPBIParams.overloads):
            cls._overload = overload_args
            return cls
    class GetMidiTargetID(HookFactory):
        _name = "AkPBIParams::GetMidiTargetID"
    class PopulateInitialSoundParams(HookFactory):
        _name = "AkPBIParams::PopulateInitialSoundParams"

class CAkMusicRenderer:
    class AddChild(HookFactory):
        _name = "CAkMusicRenderer::AddChild"
    class CleanPendingStateChanges(HookFactory):
        _name = "CAkMusicRenderer::CleanPendingStateChanges"
    class DestroyMusicRenderer(HookFactory):
        _name = "CAkMusicRenderer::DestroyMusicRenderer"
    class MusicNotification(HookFactory):
        _name = "CAkMusicRenderer::MusicNotification"
    class Pause(HookFactory):
        _name = "CAkMusicRenderer::Pause"
    class PerformDelayedStateChange(HookFactory):
        _name = "CAkMusicRenderer::PerformDelayedStateChange"
    class Play(HookFactory):
        _name = "CAkMusicRenderer::Play"
    class ProcessNextFrame(HookFactory):
        _name = "CAkMusicRenderer::ProcessNextFrame"
    class RemoveChild(HookFactory):
        _name = "CAkMusicRenderer::RemoveChild"
    class RescheduleDelayedStateChange(HookFactory):
        _name = "CAkMusicRenderer::RescheduleDelayedStateChange"
    class Resume(HookFactory):
        _name = "CAkMusicRenderer::Resume"
    class SeekPercent(HookFactory):
        _name = "CAkMusicRenderer::SeekPercent"
    class SeekTimeAbsolute(HookFactory):
        _name = "CAkMusicRenderer::SeekTimeAbsolute"
    class SetState(HookFactory):
        _name = "CAkMusicRenderer::SetState"
    class Stop(HookFactory):
        _name = "CAkMusicRenderer::Stop"
    class StopNoteIfUsingData(HookFactory):
        _name = "CAkMusicRenderer::StopNoteIfUsingData"

class CAkMusicCtx:
    class CAkMusicCtx(HookFactory):
        _name = "CAkMusicCtx::CAkMusicCtx"
    class AddChild(HookFactory):
        _name = "CAkMusicCtx::AddChild"
    class HasStopTrans(HookFactory):
        _name = "CAkMusicCtx::HasStopTrans"
    class Init(HookFactory):
        _name = "CAkMusicCtx::Init"
    class _EndFrame(HookFactory):
        _name = "CAkMusicCtx::_EndFrame"
    class OnLastFrame(HookFactory):
        _name = "CAkMusicCtx::OnLastFrame"
    class OnPaused(HookFactory):
        _name = "CAkMusicCtx::OnPaused"
    class OnPlayed(HookFactory):
        _name = "CAkMusicCtx::OnPlayed"
    class OnPropertyChange(HookFactory):
        _name = "CAkMusicCtx::OnPropertyChange"
    class OnResumed(HookFactory):
        _name = "CAkMusicCtx::OnResumed"
    class OnStopped(HookFactory):
        _name = "CAkMusicCtx::OnStopped"
    class OnTriggerModulators(HookFactory):
        _name = "CAkMusicCtx::OnTriggerModulators"
    class Release(HookFactory):
        _name = "CAkMusicCtx::Release"
    class RemoveChild(HookFactory):
        _name = "CAkMusicCtx::RemoveChild"
    class SetPBIFade(HookFactory):
        _name = "CAkMusicCtx::SetPBIFade"
    class TransUpdateValue(HookFactory):
        _name = "CAkMusicCtx::TransUpdateValue"
    class VirtualAddRef(HookFactory):
        _name = "CAkMusicCtx::VirtualAddRef"
    class VirtualRelease(HookFactory):
        _name = "CAkMusicCtx::VirtualRelease"
    class _Cancel(HookFactory):
        _name = "CAkMusicCtx::_Cancel"
    class _NotifyPropertyChange(HookFactory):
        _name = "CAkMusicCtx::_NotifyPropertyChange"
    class _Pause(HookFactory):
        _name = "CAkMusicCtx::_Pause"
    class _Play(HookFactory):
        _name = "CAkMusicCtx::_Play"
    class _Resume(HookFactory):
        _name = "CAkMusicCtx::_Resume"
    class _Stop(HookFactory):
        _name = "CAkMusicCtx::_Stop"

class CAkMusicPBI:
    class FixStartTimeForFadeIn(HookFactory):
        _name = "CAkMusicPBI::FixStartTimeForFadeIn"
    class GetAndClearStopOffset(HookFactory):
        _name = "CAkMusicPBI::GetAndClearStopOffset"
    class GetTargetedParamsSet(HookFactory):
        _name = "CAkMusicPBI::GetTargetedParamsSet"
    class Init(HookFactory):
        _name = "CAkMusicPBI::Init"
    class NotifyVirtualOff(HookFactory):
        _name = "CAkMusicPBI::NotifyVirtualOff"
    class OnLastFrame(HookFactory):
        _name = "CAkMusicPBI::OnLastFrame"
    class OnPaused(HookFactory):
        _name = "CAkMusicPBI::OnPaused"
    class OnPropertyChange(HookFactory):
        _name = "CAkMusicPBI::OnPropertyChange"
    class OnResumed(HookFactory):
        _name = "CAkMusicPBI::OnResumed"
    class RefreshParameters(HookFactory):
        _name = "CAkMusicPBI::RefreshParameters"
    class SetAutomationValue(HookFactory):
        _name = "CAkMusicPBI::SetAutomationValue"
    class SetPBIFade(HookFactory):
        _name = "CAkMusicPBI::SetPBIFade"
    class Term(HookFactory):
        _name = "CAkMusicPBI::Term"
    class _Stop(HookFactory):
        _name = "CAkMusicPBI::_Stop"
        _overload: overloads.CAkMusicPBI._Stop.overloads = "CAkMusicPBI *, AkPBIStopMode, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicPBI._Stop.overloads):
            cls._overload = overload_args
            return cls

class CAkPBI:
    class NotifyParamsChanged(HookFactory):
        _name = "CAkPBI::NotifyParamsChanged"
    class CAkPBI(HookFactory):
        _name = "CAkPBI::CAkPBI"
    class CalculateMutedEffectiveVolume(HookFactory):
        _name = "CAkPBI::CalculateMutedEffectiveVolume"
    class ClearLimiters(HookFactory):
        _name = "CAkPBI::ClearLimiters"
    class ComputePriorityWithDistance(HookFactory):
        _name = "CAkPBI::ComputePriorityWithDistance"
    class DecrementPlayCount(HookFactory):
        _name = "CAkPBI::DecrementPlayCount"
    class Destroy(HookFactory):
        _name = "CAkPBI::Destroy"
    class Devirtualize(HookFactory):
        _name = "CAkPBI::Devirtualize"
    class FetchPriorityMetadata(HookFactory):
        _name = "CAkPBI::FetchPriorityMetadata"
    class FindAlternateMedia(HookFactory):
        _name = "CAkPBI::FindAlternateMedia"
    class ForceVirtualize(HookFactory):
        _name = "CAkPBI::ForceVirtualize"
    class GetAndClearStopOffset(HookFactory):
        _name = "CAkPBI::GetAndClearStopOffset"
    class GetFX(HookFactory):
        _name = "CAkPBI::GetFX"
    class GetFXDataID(HookFactory):
        _name = "CAkPBI::GetFXDataID"
    class GetModulatorTriggerParams(HookFactory):
        _name = "CAkPBI::GetModulatorTriggerParams"
    class GetPauseResumeTransition(HookFactory):
        _name = "CAkPBI::GetPauseResumeTransition"
    class GetPlayStopTransition(HookFactory):
        _name = "CAkPBI::GetPlayStopTransition"
    class GetVirtualBehavior(HookFactory):
        _name = "CAkPBI::GetVirtualBehavior"
    class Init(HookFactory):
        _name = "CAkPBI::Init"
    class IsUsingThisSlot(HookFactory):
        _name = "CAkPBI::IsUsingThisSlot"
        _overload: overloads.CAkPBI.IsUsingThisSlot.overloads = "CAkPBI *, const unsigned __int8 *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPBI.IsUsingThisSlot.overloads):
            cls._overload = overload_args
            return cls
    class Kick(HookFactory):
        _name = "CAkPBI::Kick"
    class MuteNotification(HookFactory):
        _name = "CAkPBI::MuteNotification"
    class NotifAddedAsSA(HookFactory):
        _name = "CAkPBI::NotifAddedAsSA"
    class NotifyBypass(HookFactory):
        _name = "CAkPBI::NotifyBypass"
    class OnPathAdded(HookFactory):
        _name = "CAkPBI::OnPathAdded"
    class Pause(HookFactory):
        _name = "CAkPBI::Pause"
    class Play(HookFactory):
        _name = "CAkPBI::Play"
    class PlayToEnd(HookFactory):
        _name = "CAkPBI::PlayToEnd"
    class ProcessCommand(HookFactory):
        _name = "CAkPBI::ProcessCommand"
    class ProcessContextNotif(HookFactory):
        _name = "CAkPBI::ProcessContextNotif"
    class RefreshParameters(HookFactory):
        _name = "CAkPBI::RefreshParameters"
    class SeekPercent(HookFactory):
        _name = "CAkPBI::SeekPercent"
    class SeekTimeAbsolute(HookFactory):
        _name = "CAkPBI::SeekTimeAbsolute"
        _overload: overloads.CAkPBI.SeekTimeAbsolute.overloads = "CAkPBI *, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPBI.SeekTimeAbsolute.overloads):
            cls._overload = overload_args
            return cls
    class SetMuteMapEntry(HookFactory):
        _name = "CAkPBI::SetMuteMapEntry"
    class ShouldChangeVirtualBehaviourForInterruption(HookFactory):
        _name = "CAkPBI::ShouldChangeVirtualBehaviourForInterruption"
    class Stop(HookFactory):
        _name = "CAkPBI::Stop"
    class Term(HookFactory):
        _name = "CAkPBI::Term"
    class TransUpdateValue(HookFactory):
        _name = "CAkPBI::TransUpdateValue"
    class TriggerModulators(HookFactory):
        _name = "CAkPBI::TriggerModulators"
    class UpdateFX(HookFactory):
        _name = "CAkPBI::UpdateFX"
    class UpdateLimiters(HookFactory):
        _name = "CAkPBI::UpdateLimiters"
    class UpdatePriority(HookFactory):
        _name = "CAkPBI::UpdatePriority"
    class UpdatePriorityWithDistance(HookFactory):
        _name = "CAkPBI::UpdatePriorityWithDistance"
    class UpdateTargetParam(HookFactory):
        _name = "CAkPBI::UpdateTargetParam"
    class VirtualPositionUpdate(HookFactory):
        _name = "CAkPBI::VirtualPositionUpdate"
    class Virtualize(HookFactory):
        _name = "CAkPBI::Virtualize"
    class _InitPlay(HookFactory):
        _name = "CAkPBI::_InitPlay"
    class _Pause(HookFactory):
        _name = "CAkPBI::_Pause"
        _overload: overloads.CAkPBI._Pause.overloads = "CAkPBI *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPBI._Pause.overloads):
            cls._overload = overload_args
            return cls
    class _Play(HookFactory):
        _name = "CAkPBI::_Play"
    class _Resume(HookFactory):
        _name = "CAkPBI::_Resume"
        _overload: overloads.CAkPBI._Resume.overloads = "CAkPBI *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPBI._Resume.overloads):
            cls._overload = overload_args
            return cls
    class _Stop(HookFactory):
        _name = "CAkPBI::_Stop"
        _overload: overloads.CAkPBI._Stop.overloads = "CAkPBI *, const TransParams *, _BOOL8"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPBI._Stop.overloads):
            cls._overload = overload_args
            return cls

class CAkMatrixSequencer:
    class CAkMatrixSequencer(HookFactory):
        _name = "CAkMatrixSequencer::CAkMatrixSequencer"
    class Execute(HookFactory):
        _name = "CAkMatrixSequencer::Execute"
    class GetActiveNode(HookFactory):
        _name = "CAkMatrixSequencer::GetActiveNode"
    class GetEarliestStateSyncTime(HookFactory):
        _name = "CAkMatrixSequencer::GetEarliestStateSyncTime"
    class GetMusicSyncFlags(HookFactory):
        _name = "CAkMatrixSequencer::GetMusicSyncFlags"
    class HandleTrigger(HookFactory):
        _name = "CAkMatrixSequencer::HandleTrigger"
    class OnStopped(HookFactory):
        _name = "CAkMatrixSequencer::OnStopped"
    class Process(HookFactory):
        _name = "CAkMatrixSequencer::Process"
    class ProcessDelayedStateChange(HookFactory):
        _name = "CAkMatrixSequencer::ProcessDelayedStateChange"
    class ProcessStingers(HookFactory):
        _name = "CAkMatrixSequencer::ProcessStingers"
    class QueryStateChangeDelay(HookFactory):
        _name = "CAkMatrixSequencer::QueryStateChangeDelay"
    class RemoveAllPendingStingers(HookFactory):
        _name = "CAkMatrixSequencer::RemoveAllPendingStingers"
    class RescheduleCancelledActions(HookFactory):
        _name = "CAkMatrixSequencer::RescheduleCancelledActions"
    class ScheduleStingerForPlayback(HookFactory):
        _name = "CAkMatrixSequencer::ScheduleStingerForPlayback"
    class Trigger(HookFactory):
        _name = "CAkMatrixSequencer::Trigger"

class CAkScheduledItem:
    class CAkScheduledItem(HookFactory):
        _name = "CAkScheduledItem::CAkScheduledItem"
    class AttachStopCmd(HookFactory):
        _name = "CAkScheduledItem::AttachStopCmd"
    class CanDestroy(HookFactory):
        _name = "CAkScheduledItem::CanDestroy"
    class CancelPlayback(HookFactory):
        _name = "CAkScheduledItem::CancelPlayback"
    class Destroy(HookFactory):
        _name = "CAkScheduledItem::Destroy"
    class ForcePostExit(HookFactory):
        _name = "CAkScheduledItem::ForcePostExit"
    class GetInfo(HookFactory):
        _name = "CAkScheduledItem::GetInfo"
    class NotifyMusicCallbacks(HookFactory):
        _name = "CAkScheduledItem::NotifyMusicCallbacks"
    class OnPaused(HookFactory):
        _name = "CAkScheduledItem::OnPaused"
    class OnStopped(HookFactory):
        _name = "CAkScheduledItem::OnStopped"
    class PopAssociatedActionsToRescheduleAfterTransitionSyncPoint(HookFactory):
        _name = "CAkScheduledItem::PopAssociatedActionsToRescheduleAfterTransitionSyncPoint"
    class Prepare(HookFactory):
        _name = "CAkScheduledItem::Prepare"
    class Process(HookFactory):
        _name = "CAkScheduledItem::Process"
    class SetFadeIn(HookFactory):
        _name = "CAkScheduledItem::SetFadeIn"
    class _CancelPlayback(HookFactory):
        _name = "CAkScheduledItem::_CancelPlayback"

class AkTimeConv__SamplesToMilliseconds(HookFactory):
    _name = "AkTimeConv__SamplesToMilliseconds"

class AkMusicBank:
    class LoadBankItem(HookFactory):
        _name = "AkMusicBank::LoadBankItem"
    class UnloadBankSlot(HookFactory):
        _name = "AkMusicBank::UnloadBankSlot"

class CAkMusicTransAware:
    class CAkMusicTransAware(HookFactory):
        _name = "CAkMusicTransAware::CAkMusicTransAware"
    class GetPanicTransitionRule(HookFactory):
        _name = "CAkMusicTransAware::GetPanicTransitionRule"
    class GetTransitionRule(HookFactory):
        _name = "CAkMusicTransAware::GetTransitionRule"
        _overload: overloads.CAkMusicTransAware.GetTransitionRule.overloads = "CAkMusicTransAware *, unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicTransAware.GetTransitionRule.overloads):
            cls._overload = overload_args
            return cls
    class PrepareMusicalDependencies(HookFactory):
        _name = "CAkMusicTransAware::PrepareMusicalDependencies"
    class SetMusicTransNodeParams(HookFactory):
        _name = "CAkMusicTransAware::SetMusicTransNodeParams"
    class TermPanicTransitionRule(HookFactory):
        _name = "CAkMusicTransAware::TermPanicTransitionRule"
    class UnPrepareMusicalDependencies(HookFactory):
        _name = "CAkMusicTransAware::UnPrepareMusicalDependencies"

class CAkParentNode:
    class AddChildInternal(HookFactory):
        _templates = ("T0", )
        _name = "CAkParentNode<{T0}>::AddChildInternal"
    class Children(HookFactory):
        _templates = ("T0", )
        _name = "CAkParentNode<{T0}>::Children"
    class GatherSounds(HookFactory):
        _templates = ("T0", )
        _name = "CAkParentNode<{T0}>::GatherSounds"
    class GetChildren(HookFactory):
        _templates = ("T0", )
        _name = "CAkParentNode<{T0}>::GetChildren"
    class RemoveChild(HookFactory):
        _templates = ("T0", )
        _name = "CAkParentNode<{T0}>::RemoveChild"

class CAkActiveParent:
    class ClearLimiters(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ClearLimiters"
    class ForAllPBI(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ForAllPBI"
    class MuteNotification(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::MuteNotification"
    class NotifyBypass(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::NotifyBypass"
    class PlayToEnd(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::PlayToEnd"
    class PropagatePositioningNotification(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::PropagatePositioningNotification"
    class RecalcNotification(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::RecalcNotification"
    class UpdateFX(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::UpdateFX"
    class ExecuteAction(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ExecuteActionExcept"
    class ExecuteActionNoPropagate(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ExecuteActionNoPropagate"
    class ParamNotification(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::ParamNotification"
    class PrepareData(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::PrepareData"
    class UnPrepareData(HookFactory):
        _templates = ("T0", )
        _name = "CAkActiveParent<{T0}>::UnPrepareData"

class CAkParamNodeStateAware:
    class GetStateProperties(HookFactory):
        _name = "CAkParamNodeStateAware::GetStateProperties"
    class CAkParamNodeStateAware(HookFactory):
        _name = "CAkParamNodeStateAware::CAkParamNodeStateAware"
    class EnsureStateData(HookFactory):
        _name = "CAkParamNodeStateAware::EnsureStateData"
    class IsStateProperty(HookFactory):
        _name = "CAkParamNodeStateAware::IsStateProperty"
    class NotifyStateParamTargets(HookFactory):
        _name = "CAkParamNodeStateAware::NotifyStateParamTargets"
    class PushStateParamUpdate(HookFactory):
        _name = "CAkParamNodeStateAware::PushStateParamUpdate"
    class ReadStateChunk(HookFactory):
        _name = "CAkParamNodeStateAware::ReadStateChunk"
    class SetStateProperties(HookFactory):
        _name = "CAkParamNodeStateAware::SetStateProperties"
    class StateTransitionAdded(HookFactory):
        _name = "CAkParamNodeStateAware::StateTransitionAdded"
    class StateTransitionRemoved(HookFactory):
        _name = "CAkParamNodeStateAware::StateTransitionRemoved"
    class UpdateStateParamTargets(HookFactory):
        _name = "CAkParamNodeStateAware::UpdateStateParamTargets"

class CAkMusicNode:
    class NotifyParamChanged(HookFactory):
        _name = "CAkMusicNode::NotifyParamChanged"
    class NotifyParamsChanged(HookFactory):
        _name = "CAkMusicNode::NotifyParamsChanged"
    class CAkMusicNode(HookFactory):
        _name = "CAkMusicNode::CAkMusicNode"
    class ExecuteAction(HookFactory):
        _name = "CAkMusicNode::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkMusicNode::ExecuteActionExcept"
    class ExecuteActionNoPropagate(HookFactory):
        _name = "CAkMusicNode::ExecuteActionNoPropagate"
    class FlushStingers(HookFactory):
        _name = "CAkMusicNode::FlushStingers"
    class GetMidiTargetNode(HookFactory):
        _name = "CAkMusicNode::GetMidiTargetNode"
    class GetMidiTargetTempo(HookFactory):
        _name = "CAkMusicNode::GetMidiTargetTempo"
    class GetMidiTempoSource(HookFactory):
        _name = "CAkMusicNode::GetMidiTempoSource"
    class GetMusicGrid(HookFactory):
        _name = "CAkMusicNode::GetMusicGrid"
    class GetMusicParams(HookFactory):
        _name = "CAkMusicNode::GetMusicParams"
    class GetStingers(HookFactory):
        _name = "CAkMusicNode::GetStingers"
    class MusicNotification(HookFactory):
        _name = "CAkMusicNode::MusicNotification"
    class ParamNotification(HookFactory):
        _name = "CAkMusicNode::ParamNotification"
    class PrepareData(HookFactory):
        _name = "CAkMusicNode::PrepareData"
    class PrepareMusicalDependencies(HookFactory):
        _name = "CAkMusicNode::PrepareMusicalDependencies"
    class PushParamUpdate(HookFactory):
        _name = "CAkMusicNode::PushParamUpdate"
    class RecalcNotificationWithBitArray(HookFactory):
        _name = "CAkMusicNode::RecalcNotificationWithBitArray"
    class RecalcNotificationWithID(HookFactory):
        _name = "CAkMusicNode::RecalcNotificationWithID"
    class SetAkProp(HookFactory):
        _name = "CAkMusicNode::SetAkProp"
        _overload: overloads.CAkMusicNode.SetAkProp.overloads = "CAkMusicNode *, AkPropID, int, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicNode.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetMusicNodeParams(HookFactory):
        _name = "CAkMusicNode::SetMusicNodeParams"
    class SetStingers(HookFactory):
        _name = "CAkMusicNode::SetStingers"
    class UnPrepareData(HookFactory):
        _name = "CAkMusicNode::UnPrepareData"
    class UnPrepareMusicalDependencies(HookFactory):
        _name = "CAkMusicNode::UnPrepareMusicalDependencies"

class CAkParameterNode:
    class ParamMustNotify(HookFactory):
        _name = "CAkParameterNode::ParamMustNotify"
    class ParamOverriden(HookFactory):
        _name = "CAkParameterNode::ParamOverriden"
    class SetBelowThresholdBehavior(HookFactory):
        _name = "CAkParameterNode::SetBelowThresholdBehavior"
    class CAkParameterNode(HookFactory):
        _name = "CAkParameterNode::CAkParameterNode"
    class ApplyMaxNumInstances(HookFactory):
        _name = "CAkParameterNode::ApplyMaxNumInstances"
    class AssociateLayer(HookFactory):
        _name = "CAkParameterNode::AssociateLayer"
    class DecrementPlayCount(HookFactory):
        _name = "CAkParameterNode::DecrementPlayCount"
    class DelayPlayback(HookFactory):
        _name = "CAkParameterNode::DelayPlayback"
    class DissociateLayer(HookFactory):
        _name = "CAkParameterNode::DissociateLayer"
    class ExecuteActionExceptParentCheck(HookFactory):
        _name = "CAkParameterNode::ExecuteActionExceptParentCheck"
    class FilterAndTransformMidiEvent(HookFactory):
        _name = "CAkParameterNode::FilterAndTransformMidiEvent"
    class GetAudioParameters(HookFactory):
        _name = "CAkParameterNode::GetAudioParameters"
    class GetFX(HookFactory):
        _name = "CAkParameterNode::GetFX"
    class GetFXDataID(HookFactory):
        _name = "CAkParameterNode::GetFXDataID"
    class GetMidiNoteOffAction(HookFactory):
        _name = "CAkParameterNode::GetMidiNoteOffAction"
    class GetMidiNoteOnAction(HookFactory):
        _name = "CAkParameterNode::GetMidiNoteOnAction"
    class GetMidiPlayOnNoteType(HookFactory):
        _name = "CAkParameterNode::GetMidiPlayOnNoteType"
    class GetVirtualBehavior(HookFactory):
        _name = "CAkParameterNode::GetVirtualBehavior"
    class HandleInitialDelay(HookFactory):
        _name = "CAkParameterNode::HandleInitialDelay"
    class IncrementLESyncCount(HookFactory):
        _name = "CAkParameterNode::IncrementLESyncCount"
    class IncrementPlayCount(HookFactory):
        _name = "CAkParameterNode::IncrementPlayCount"
    class IsOrIsChildOf(HookFactory):
        _name = "CAkParameterNode::IsOrIsChildOf"
    class Mute(HookFactory):
        _name = "CAkParameterNode::Mute"
    class PlayAndContinueAlternate(HookFactory):
        _name = "CAkParameterNode::PlayAndContinueAlternate"
    class SetAdvSettingsParams(HookFactory):
        _name = "CAkParameterNode::SetAdvSettingsParams"
    class SetAkProp(HookFactory):
        _name = "CAkParameterNode::SetAkProp"
        _overload: overloads.CAkParameterNode.SetAkProp.overloads = "CAkParameterNode *, AkPropID, int, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkParameterNode.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetInitialFxParams(HookFactory):
        _name = "CAkParameterNode::SetInitialFxParams"
    class SetInitialMetadataParams(HookFactory):
        _name = "CAkParameterNode::SetInitialMetadataParams"
    class SetInitialParams(HookFactory):
        _name = "CAkParameterNode::SetInitialParams"
    class TriggerModulators(HookFactory):
        _name = "CAkParameterNode::TriggerModulators"
    class UnmuteAll(HookFactory):
        _name = "CAkParameterNode::UnmuteAll"
    class UnmuteAllObj(HookFactory):
        _name = "CAkParameterNode::UnmuteAllObj"
    class Play(HookFactory):
        _name = "CAkParameterNode::Play"

class CAkSegmentInfoRepository:
    class CAkSegmentInfoRepository(HookFactory):
        _name = "CAkSegmentInfoRepository::CAkSegmentInfoRepository"
    class CreateEntry(HookFactory):
        _name = "CAkSegmentInfoRepository::CreateEntry"
    class GetSegmentInfo(HookFactory):
        _name = "CAkSegmentInfoRepository::GetSegmentInfo"
    class RemoveEntry(HookFactory):
        _name = "CAkSegmentInfoRepository::RemoveEntry"
    class Term(HookFactory):
        _name = "CAkSegmentInfoRepository::Term"
    class UpdateSegmentInfo(HookFactory):
        _name = "CAkSegmentInfoRepository::UpdateSegmentInfo"

class CAkChildCtx:
    class CAkChildCtx(HookFactory):
        _name = "CAkChildCtx::CAkChildCtx"
    class Connect(HookFactory):
        _name = "CAkChildCtx::Connect"
    class Disconnect(HookFactory):
        _name = "CAkChildCtx::Disconnect"

class AkMusicActionPlayClip:
    class AttachClipAutomation(HookFactory):
        _name = "AkMusicActionPlayClip::AttachClipAutomation"

class CAkConversionTable:
    class ConvertInternal(HookFactory):
        _name = "CAkConversionTable::ConvertInternal"
    class RecomputeCoefficients(HookFactory):
        _name = "CAkConversionTable::RecomputeCoefficients"
    class CopyPoints(HookFactory):
        _name = "CAkConversionTable::CopyPoints"
    class GetLine(HookFactory):
        _name = "CAkConversionTable::GetLine"
    class Linearize(HookFactory):
        _name = "CAkConversionTable::Linearize"
    class Set(HookFactory):
        _name = "CAkConversionTable::Set"

class CAkSubTrackCtx:
    class Create(HookFactory):
        _name = "CAkSubTrackCtx::Create"
    class ExecuteSequencerCmds(HookFactory):
        _name = "CAkSubTrackCtx::ExecuteSequencerCmds"
    class GetSourceInfoForPlaybackRestart(HookFactory):
        _name = "CAkSubTrackCtx::GetSourceInfoForPlaybackRestart"
    class Init(HookFactory):
        _name = "CAkSubTrackCtx::Init"
    class OnPaused(HookFactory):
        _name = "CAkSubTrackCtx::OnPaused"
    class OnPlayed(HookFactory):
        _name = "CAkSubTrackCtx::OnPlayed"
    class OnStopped(HookFactory):
        _name = "CAkSubTrackCtx::OnStopped"
    class OnTriggerModulators(HookFactory):
        _name = "CAkSubTrackCtx::OnTriggerModulators"
    class Prepare(HookFactory):
        _name = "CAkSubTrackCtx::Prepare"
    class Process(HookFactory):
        _name = "CAkSubTrackCtx::Process"
    class RemoveReferences(HookFactory):
        _name = "CAkSubTrackCtx::RemoveReferences"
    class ScheduleSequencerCmds(HookFactory):
        _name = "CAkSubTrackCtx::ScheduleSequencerCmds"

class CAkSequenceCtx:
    class SetPBIFade(HookFactory):
        _name = "CAkSequenceCtx::SetPBIFade"
    class CAkSequenceCtx(HookFactory):
        _name = "CAkSequenceCtx::CAkSequenceCtx"
    class AppendItem(HookFactory):
        _name = "CAkSequenceCtx::AppendItem"
    class EndInit(HookFactory):
        _name = "CAkSequenceCtx::EndInit"
    class Grow(HookFactory):
        _name = "CAkSequenceCtx::Grow"
    class HandleFatalError(HookFactory):
        _name = "CAkSequenceCtx::HandleFatalError"
    class Init(HookFactory):
        _name = "CAkSequenceCtx::Init"
    class IsValid(HookFactory):
        _name = "CAkSequenceCtx::IsValid"
    class NotifyItemSync(HookFactory):
        _name = "CAkSequenceCtx::NotifyItemSync"
    class OnLastFrame(HookFactory):
        _name = "CAkSequenceCtx::OnLastFrame"
    class PlaylistJump(HookFactory):
        _name = "CAkSequenceCtx::PlaylistJump"
    class ScheduleNextSegment(HookFactory):
        _name = "CAkSequenceCtx::ScheduleNextSegment"
    class UpdateChainLength(HookFactory):
        _name = "CAkSequenceCtx::UpdateChainLength"

class CAkChainCtx:
    class CAkChainCtx(HookFactory):
        _name = "CAkChainCtx::CAkChainCtx"
    class CanRestartPlaying(HookFactory):
        _name = "CAkChainCtx::CanRestartPlaying"
    class CancelPlayback(HookFactory):
        _name = "CAkChainCtx::CancelPlayback"
    class EnqueueItem(HookFactory):
        _name = "CAkChainCtx::EnqueueItem"
    class Flush(HookFactory):
        _name = "CAkChainCtx::Flush"
    class GetNextScheduleWindow(HookFactory):
        _name = "CAkChainCtx::GetNextScheduleWindow"
    class GetSegmentPosition(HookFactory):
        _name = "CAkChainCtx::GetSegmentPosition"
    class OnStopped(HookFactory):
        _name = "CAkChainCtx::OnStopped"
    class Prepare(HookFactory):
        _name = "CAkChainCtx::Prepare"
    class Process(HookFactory):
        _name = "CAkChainCtx::Process"
    class QueryLookAheadInfo(HookFactory):
        _name = "CAkChainCtx::QueryLookAheadInfo"
    class RefreshWindow(HookFactory):
        _name = "CAkChainCtx::RefreshWindow"

class AkScheduledChain:
    class SelfContainedIter:
        class CtxTimeToSegmentPosition(HookFactory):
            _name = "AkScheduledChain::SelfContainedIter::CtxTimeToSegmentPosition"
        class GetScheduledItemTime(HookFactory):
            _name = "AkScheduledChain::SelfContainedIter::GetScheduledItemTime"
        class SegmentPositionToCtxTime(HookFactory):
            _name = "AkScheduledChain::SelfContainedIter::SegmentPositionToCtxTime"

class CAkMusicSwitchCtx:
    class Node(HookFactory):
        _name = "CAkMusicSwitchCtx::Node"
    class CAkMusicSwitchCtx(HookFactory):
        _name = "CAkMusicSwitchCtx::CAkMusicSwitchCtx"
    class CanRestartPlaying(HookFactory):
        _name = "CAkMusicSwitchCtx::CanRestartPlaying"
    class CancelPlayback(HookFactory):
        _name = "CAkMusicSwitchCtx::CancelPlayback"
    class CreateDestinationContext(HookFactory):
        _name = "CAkMusicSwitchCtx::CreateDestinationContext"
    class CreateMusicContext(HookFactory):
        _name = "CAkMusicSwitchCtx::CreateMusicContext"
    class DequeueCancellableTransitions(HookFactory):
        _name = "CAkMusicSwitchCtx::DequeueCancellableTransitions"
    class EndInit(HookFactory):
        _name = "CAkMusicSwitchCtx::EndInit"
    class GetNextScheduleWindow(HookFactory):
        _name = "CAkMusicSwitchCtx::GetNextScheduleWindow"
    class GetPlaybackHistory(HookFactory):
        _name = "CAkMusicSwitchCtx::GetPlaybackHistory"
    class HasOrAscendentHasPendingTransition(HookFactory):
        _name = "CAkMusicSwitchCtx::HasOrAscendentHasPendingTransition"
    class Init(HookFactory):
        _name = "CAkMusicSwitchCtx::Init"
    class OnPlayed(HookFactory):
        _name = "CAkMusicSwitchCtx::OnPlayed"
    class OnStopped(HookFactory):
        _name = "CAkMusicSwitchCtx::OnStopped"
    class PerformDelayedSwitchChange(HookFactory):
        _name = "CAkMusicSwitchCtx::PerformDelayedSwitchChange"
    class Prepare(HookFactory):
        _name = "CAkMusicSwitchCtx::Prepare"
    class Process(HookFactory):
        _name = "CAkMusicSwitchCtx::Process"
    class QueryLookAheadInfo(HookFactory):
        _name = "CAkMusicSwitchCtx::QueryLookAheadInfo"
    class RefreshWindow(HookFactory):
        _name = "CAkMusicSwitchCtx::RefreshWindow"
    class ResolveAudioNode(HookFactory):
        _name = "CAkMusicSwitchCtx::ResolveAudioNode"
    class ScheduleSwitchTransition(HookFactory):
        _name = "CAkMusicSwitchCtx::ScheduleSwitchTransition"
    class ScheduleTransition(HookFactory):
        _name = "CAkMusicSwitchCtx::ScheduleTransition"
    class SeekPercent(HookFactory):
        _name = "CAkMusicSwitchCtx::SeekPercent"
    class SeekTimeAbsolute(HookFactory):
        _name = "CAkMusicSwitchCtx::SeekTimeAbsolute"
    class SetInitialSwitch(HookFactory):
        _name = "CAkMusicSwitchCtx::SetInitialSwitch"
    class SetPlaybackHistory(HookFactory):
        _name = "CAkMusicSwitchCtx::SetPlaybackHistory"
        _overload: overloads.CAkMusicSwitchCtx.SetPlaybackHistory.overloads = "CAkMusicSwitchCtx *, unsigned int, const CAkMusicPackedHistory *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicSwitchCtx.SetPlaybackHistory.overloads):
            cls._overload = overload_args
            return cls
    class TryPropagateDelayedSwitchChange(HookFactory):
        _name = "CAkMusicSwitchCtx::TryPropagateDelayedSwitchChange"

class CAkScheduleWindow:
    class CAkScheduleWindow(HookFactory):
        _name = "CAkScheduleWindow::CAkScheduleWindow"
        _overload: overloads.CAkScheduleWindow.CAkScheduleWindow.overloads = "CAkScheduleWindow *, CAkMatrixAwareCtx *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkScheduleWindow.CAkScheduleWindow.overloads):
            cls._overload = overload_args
            return cls
    class CancelActionsAfterTransitionSyncPoint(HookFactory):
        _name = "CAkScheduleWindow::CancelActionsAfterTransitionSyncPoint"
    class ChainCtxTimeRelativeToLevel(HookFactory):
        _name = "CAkScheduleWindow::ChainCtxTimeRelativeToLevel"
    class CtxTimeToSegmentPosition(HookFactory):
        _name = "CAkScheduleWindow::CtxTimeToSegmentPosition"
    class FindSyncPoint(HookFactory):
        _name = "CAkScheduleWindow::FindSyncPoint"
    class GetNode(HookFactory):
        _name = "CAkScheduleWindow::GetNode"
    class IsAtExitCue(HookFactory):
        _name = "CAkScheduleWindow::IsAtExitCue"
    class NotifyMusicCallbacks(HookFactory):
        _name = "CAkScheduleWindow::NotifyMusicCallbacks"
    class SetBranch(HookFactory):
        _name = "CAkScheduleWindow::SetBranch"
    class SetDuration(HookFactory):
        _name = "CAkScheduleWindow::SetDuration"
    class SetScheduledItem(HookFactory):
        _name = "CAkScheduleWindow::SetScheduledItem"
    class StartTime(HookFactory):
        _name = "CAkScheduleWindow::StartTime"
    class StartTimeRelativeToCurrentLevel(HookFactory):
        _name = "CAkScheduleWindow::StartTimeRelativeToCurrentLevel"

class CAkSegmentCtx:
    class CAkSegmentCtx(HookFactory):
        _name = "CAkSegmentCtx::CAkSegmentCtx"
    class AddSwitchTrackNotif(HookFactory):
        _name = "CAkSegmentCtx::AddSwitchTrackNotif"
    class ExecuteSequencerCmds(HookFactory):
        _name = "CAkSegmentCtx::ExecuteSequencerCmds"
    class GameObjectPtr(HookFactory):
        _name = "CAkSegmentCtx::GameObjectPtr"
    class GetClipPosition(HookFactory):
        _name = "CAkSegmentCtx::GetClipPosition"
    class GetTimeWindowSize(HookFactory):
        _name = "CAkSegmentCtx::GetTimeWindowSize"
    class GetUserParams(HookFactory):
        _name = "CAkSegmentCtx::GetUserParams"
    class Init(HookFactory):
        _name = "CAkSegmentCtx::Init"
    class OnPaused(HookFactory):
        _name = "CAkSegmentCtx::OnPaused"
    class OnPlayed(HookFactory):
        _name = "CAkSegmentCtx::OnPlayed"
    class OnStopped(HookFactory):
        _name = "CAkSegmentCtx::OnStopped"
    class PlayDirectly(HookFactory):
        _name = "CAkSegmentCtx::PlayDirectly"
    class PlayingID(HookFactory):
        _name = "CAkSegmentCtx::PlayingID"
    class Prepare(HookFactory):
        _name = "CAkSegmentCtx::Prepare"
    class Process(HookFactory):
        _name = "CAkSegmentCtx::Process"
    class RemoveReferences(HookFactory):
        _name = "CAkSegmentCtx::RemoveReferences"
    class RescheduleSwitchTrack(HookFactory):
        _name = "CAkSegmentCtx::RescheduleSwitchTrack"
    class ScheduleSequencerCmds(HookFactory):
        _name = "CAkSegmentCtx::ScheduleSequencerCmds"
    class ScheduleSequencerPlayCmdsOnSwitch(HookFactory):
        _name = "CAkSegmentCtx::ScheduleSequencerPlayCmdsOnSwitch"

class CAkRTPCMgr:
    class GetRTPCConvertedValue(HookFactory):
        _templates = ("T0", )
        _name = "CAkRTPCMgr::GetRTPCConvertedValue<{T0}>"
    class GetRTPCValue(HookFactory):
        _templates = ("T0", )
        _name = "CAkRTPCMgr::GetRTPCValue<{T0}>"
    class CAkRTPCMgr(HookFactory):
        _name = "CAkRTPCMgr::CAkRTPCMgr"
    class AddBuiltInParamBinding(HookFactory):
        _name = "CAkRTPCMgr::AddBuiltInParamBinding"
    class AkRTPCEntry:
        class AddRefSubcription(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::AddRefSubcription"
        class CreateOrModifyTransition(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::CreateOrModifyTransition"
        class Move(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::Move"
        class NotifyRTPCChange(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::NotifyRTPCChange"
        class RemoveMatchingValues(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::RemoveMatchingValues"
        class RemoveSubscriptionIfNoCurvesRemain(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::RemoveSubscriptionIfNoCurvesRemain"
        class RemoveValue(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::RemoveValue"
        class SetRTPC(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCEntry::SetRTPC"
    class AkRTPCSubscription:
        class ConvertCurves(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCSubscription::ConvertCurves"
        class GetParamValues(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCSubscription::GetParamValues"
        class PushUpdate(HookFactory):
            _name = "CAkRTPCMgr::AkRTPCSubscription::PushUpdate"
    class GetDefaultValue(HookFactory):
        _name = "CAkRTPCMgr::GetDefaultValue"
    class GetRTPCEntry(HookFactory):
        _name = "CAkRTPCMgr::GetRTPCEntry"
    class GetSubscription(HookFactory):
        _name = "CAkRTPCMgr::GetSubscription"
    class Init(HookFactory):
        _name = "CAkRTPCMgr::Init"
    class RegisterLayer(HookFactory):
        _name = "CAkRTPCMgr::RegisterLayer"
    class RegisterSwitchGroup(HookFactory):
        _name = "CAkRTPCMgr::RegisterSwitchGroup"
    class RemoveBuiltInParamBindings(HookFactory):
        _name = "CAkRTPCMgr::RemoveBuiltInParamBindings"
    class RemoveReferencesToSubscription(HookFactory):
        _name = "CAkRTPCMgr::RemoveReferencesToSubscription"
    class RemovedScopedRtpcObj(HookFactory):
        _name = "CAkRTPCMgr::RemovedScopedRtpcObj"
    class ResetRTPCValue(HookFactory):
        _name = "CAkRTPCMgr::ResetRTPCValue"
        _overload: overloads.CAkRTPCMgr.ResetRTPCValue.overloads = "CAkRTPCMgr *, unsigned int, const AkRTPCKey *, TransParamsBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkRTPCMgr.ResetRTPCValue.overloads):
            cls._overload = overload_args
            return cls
    class SetBuiltInParamValue(HookFactory):
        _name = "CAkRTPCMgr::SetBuiltInParamValue"
    class SetDefaultParamValue(HookFactory):
        _name = "CAkRTPCMgr::SetDefaultParamValue"
    class SetMidiParameterValue(HookFactory):
        _name = "CAkRTPCMgr::SetMidiParameterValue"
    class SetRTPCInternal(HookFactory):
        _name = "CAkRTPCMgr::SetRTPCInternal"
        _overload: overloads.CAkRTPCMgr.SetRTPCInternal.overloads = "CAkRTPCMgr *, unsigned int, float, const AkRTPCKey *, TransParamsBase *, AkValueMeaning, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkRTPCMgr.SetRTPCInternal.overloads):
            cls._overload = overload_args
            return cls
    class SetRTPCRamping(HookFactory):
        _name = "CAkRTPCMgr::SetRTPCRamping"
    class SubscribeRTPC(HookFactory):
        _name = "CAkRTPCMgr::SubscribeRTPC"
    class Term(HookFactory):
        _name = "CAkRTPCMgr::Term"
    class ToggleLayerSubscription(HookFactory):
        _name = "CAkRTPCMgr::ToggleLayerSubscription"
    class CAkRTPCTransition:
        class TransUpdateValue(HookFactory):
            _name = "CAkRTPCMgr::CAkRTPCTransition::TransUpdateValue"
    class UnSubscribeRTPC(HookFactory):
        _name = "CAkRTPCMgr::UnSubscribeRTPC"
        _overload: overloads.CAkRTPCMgr.UnSubscribeRTPC.overloads = "CAkRTPCMgr *, void *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkRTPCMgr.UnSubscribeRTPC.overloads):
            cls._overload = overload_args
            return cls
    class UnregisterSwitchGroup(HookFactory):
        _name = "CAkRTPCMgr::UnregisterSwitchGroup"
    class UpdateSubscription(HookFactory):
        _name = "CAkRTPCMgr::UpdateSubscription"

class CAkMusicSegment:
    class ActiveDuration(HookFactory):
        _name = "CAkMusicSegment::ActiveDuration"
    class CanAddChild(HookFactory):
        _name = "CAkMusicSegment::CanAddChild"
    class Create(HookFactory):
        _name = "CAkMusicSegment::Create"
    class CreateContext(HookFactory):
        _name = "CAkMusicSegment::CreateContext"
    class CreateLowLevelSegmentCtxAndAddRef(HookFactory):
        _name = "CAkMusicSegment::CreateLowLevelSegmentCtxAndAddRef"
    class CreateSegmentContext(HookFactory):
        _name = "CAkMusicSegment::CreateSegmentContext"
    class ExecuteAction(HookFactory):
        _name = "CAkMusicSegment::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkMusicSegment::ExecuteActionExcept"
    class GetClosestCuePosition(HookFactory):
        _name = "CAkMusicSegment::GetClosestCuePosition"
    class GetEntrySyncPos(HookFactory):
        _name = "CAkMusicSegment::GetEntrySyncPos"
    class GetExitSyncPos(HookFactory):
        _name = "CAkMusicSegment::GetExitSyncPos"
    class GetNumCuesWithFilter(HookFactory):
        _name = "CAkMusicSegment::GetNumCuesWithFilter"
    class GetNumMusicGridInRange(HookFactory):
        _name = "CAkMusicSegment::GetNumMusicGridInRange"
    class GetRandomCue(HookFactory):
        _name = "CAkMusicSegment::GetRandomCue"
    class GetStateSyncTypes(HookFactory):
        _name = "CAkMusicSegment::GetStateSyncTypes"
    class NotifyUserCuesInRange(HookFactory):
        _name = "CAkMusicSegment::NotifyUserCuesInRange"
    class PlayInternal(HookFactory):
        _name = "CAkMusicSegment::PlayInternal"
    class PostExitDuration(HookFactory):
        _name = "CAkMusicSegment::PostExitDuration"
    class PreEntryDuration(HookFactory):
        _name = "CAkMusicSegment::PreEntryDuration"
    class SetInitialValues(HookFactory):
        _name = "CAkMusicSegment::SetInitialValues"
    class Track(HookFactory):
        _name = "CAkMusicSegment::Track"

class CAkMusicRanSeqCntr:
    class AddPlaylistChildren(HookFactory):
        _name = "CAkMusicRanSeqCntr::AddPlaylistChildren"
    class CanAddChild(HookFactory):
        _name = "CAkMusicRanSeqCntr::CanAddChild"
    class CloneGlobalRSInfo(HookFactory):
        _name = "CAkMusicRanSeqCntr::CloneGlobalRSInfo"
    class Create(HookFactory):
        _name = "CAkMusicRanSeqCntr::Create"
    class CreateContext(HookFactory):
        _name = "CAkMusicRanSeqCntr::CreateContext"
    class CreateSequenceCtx(HookFactory):
        _name = "CAkMusicRanSeqCntr::CreateSequenceCtx"
    class ExecuteAction(HookFactory):
        _name = "CAkMusicRanSeqCntr::ExecuteAction"
    class FlushPlaylist(HookFactory):
        _name = "CAkMusicRanSeqCntr::FlushPlaylist"
    class GetGlobalRSInfo(HookFactory):
        _name = "CAkMusicRanSeqCntr::GetGlobalRSInfo"
    class PlayInternal(HookFactory):
        _name = "CAkMusicRanSeqCntr::PlayInternal"
    class SetInitialValues(HookFactory):
        _name = "CAkMusicRanSeqCntr::SetInitialValues"
    class SetPlayList(HookFactory):
        _name = "CAkMusicRanSeqCntr::SetPlayList"

class CAkMusicTrack:
    class AddPlaylistItem(HookFactory):
        _name = "CAkMusicTrack::AddPlaylistItem"
    class ComputeMinSrcLookAhead(HookFactory):
        _name = "CAkMusicTrack::ComputeMinSrcLookAhead"
    class Create(HookFactory):
        _name = "CAkMusicTrack::Create"
    class GatherSounds(HookFactory):
        _name = "CAkMusicTrack::GatherSounds"
    class GetDefaultSwitch(HookFactory):
        _name = "CAkMusicTrack::GetDefaultSwitch"
    class GetMidiTargetNode(HookFactory):
        _name = "CAkMusicTrack::GetMidiTargetNode"
    class GetMidiTempoSource(HookFactory):
        _name = "CAkMusicTrack::GetMidiTempoSource"
    class GetNextRS(HookFactory):
        _name = "CAkMusicTrack::GetNextRS"
    class GetSourcePtr(HookFactory):
        _name = "CAkMusicTrack::GetSourcePtr"
    class GetStateSyncTypes(HookFactory):
        _name = "CAkMusicTrack::GetStateSyncTypes"
    class HasBankSource(HookFactory):
        _name = "CAkMusicTrack::HasBankSource"
    class MuteNotification(HookFactory):
        _name = "CAkMusicTrack::MuteNotification"
        _overload: overloads.CAkMusicTrack.MuteNotification.overloads = "CAkMusicTrack *, float, AkMutedMapItem *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkMusicTrack.MuteNotification.overloads):
            cls._overload = overload_args
            return cls
    class PrepareData(HookFactory):
        _name = "CAkMusicTrack::PrepareData"
    class RemoveAllSourcesNoCheck(HookFactory):
        _name = "CAkMusicTrack::RemoveAllSourcesNoCheck"
    class SetInitialValues(HookFactory):
        _name = "CAkMusicTrack::SetInitialValues"
    class ClipAutomationArray:
        class Term(HookFactory):
            _name = "CAkMusicTrack::ClipAutomationArray::Term"
    class UnPrepareData(HookFactory):
        _name = "CAkMusicTrack::UnPrepareData"

class TrackSwitchInfo:
    class SetSwitchParams(HookFactory):
        _name = "TrackSwitchInfo::SetSwitchParams"

class CAkMusicActionSequencer:
    class CAkMusicActionSequencer(HookFactory):
        _name = "CAkMusicActionSequencer::CAkMusicActionSequencer"
    class Flush(HookFactory):
        _name = "CAkMusicActionSequencer::Flush"
    class PopImminentAction(HookFactory):
        _name = "CAkMusicActionSequencer::PopImminentAction"
    class ScheduleAction(HookFactory):
        _name = "CAkMusicActionSequencer::ScheduleAction"

class CAkMusicSubTrackSequencer:
    class ClearSubTrackCtx(HookFactory):
        _name = "CAkMusicSubTrackSequencer::ClearSubTrackCtx"

class CAkSwitchTrackInfo:
    class Create(HookFactory):
        _name = "CAkSwitchTrackInfo::Create"
    class InitSwitch(HookFactory):
        _name = "CAkSwitchTrackInfo::InitSwitch"
    class IsSubTrackActive(HookFactory):
        _name = "CAkSwitchTrackInfo::IsSubTrackActive"
    class SetSwitch(HookFactory):
        _name = "CAkSwitchTrackInfo::SetSwitch"
    class UpdateActiveSubTrack(HookFactory):
        _name = "CAkSwitchTrackInfo::UpdateActiveSubTrack"

class CAkRandomInfo:
    class Destroy(HookFactory):
        _name = "CAkRandomInfo::Destroy"
    class CAkRandomInfo(HookFactory):
        _name = "CAkRandomInfo::CAkRandomInfo"
    class Clone(HookFactory):
        _name = "CAkRandomInfo::Clone"
    class DeserializeHistory(HookFactory):
        _name = "CAkRandomInfo::DeserializeHistory"
    class FlagAsBlocked(HookFactory):
        _name = "CAkRandomInfo::FlagAsBlocked"
    class FlagAsUnBlocked(HookFactory):
        _name = "CAkRandomInfo::FlagAsUnBlocked"
    class FlagSetPlayed(HookFactory):
        _name = "CAkRandomInfo::FlagSetPlayed"
    class GetRandomValue(HookFactory):
        _name = "CAkRandomInfo::GetRandomValue"
    class Init(HookFactory):
        _name = "CAkRandomInfo::Init"
    class IsFlagBlocked(HookFactory):
        _name = "CAkRandomInfo::IsFlagBlocked"
    class IsFlagSetPlayed(HookFactory):
        _name = "CAkRandomInfo::IsFlagSetPlayed"
    class ResetFlagsPlayed(HookFactory):
        _name = "CAkRandomInfo::ResetFlagsPlayed"
    class SerializeHistory(HookFactory):
        _name = "CAkRandomInfo::SerializeHistory"

class CAkSequencableSegmentCtx:
    class CAkSequencableSegmentCtx(HookFactory):
        _name = "CAkSequencableSegmentCtx::CAkSequencableSegmentCtx"
    class GetPlayingSegmentInfo(HookFactory):
        _name = "CAkSequencableSegmentCtx::GetPlayingSegmentInfo"
    class Init(HookFactory):
        _name = "CAkSequencableSegmentCtx::Init"
    class Node(HookFactory):
        _name = "CAkSequencableSegmentCtx::Node"
    class Seek(HookFactory):
        _name = "CAkSequencableSegmentCtx::Seek"
    class SeekPercent(HookFactory):
        _name = "CAkSequencableSegmentCtx::SeekPercent"
    class SeekTimeAbsolute(HookFactory):
        _name = "CAkSequencableSegmentCtx::SeekTimeAbsolute"
    class SetupSegmentChain(HookFactory):
        _name = "CAkSequencableSegmentCtx::SetupSegmentChain"

class AkRSIterator:
    class AkRSIterator(HookFactory):
        _name = "AkRSIterator::AkRSIterator"
    class CreateRSInfo(HookFactory):
        _name = "AkRSIterator::CreateRSInfo"
        _overload: overloads.AkRSIterator.CreateRSInfo.overloads = "CAkRSSub *"
        @classmethod
        def overload(cls, overload_args: overloads.AkRSIterator.CreateRSInfo.overloads):
            cls._overload = overload_args
            return cls
    class CreateRandomInfo(HookFactory):
        _name = "AkRSIterator::CreateRandomInfo"
    class DeserializeGlobalRSInfo(HookFactory):
        _name = "AkRSIterator::DeserializeGlobalRSInfo"
    class DeserializeSegmentInfo(HookFactory):
        _name = "AkRSIterator::DeserializeSegmentInfo"
    class FindAndSelect(HookFactory):
        _name = "AkRSIterator::FindAndSelect"
    class FlushGlobalRSInfo(HookFactory):
        _name = "AkRSIterator::FlushGlobalRSInfo"
    class FlushStack(HookFactory):
        _name = "AkRSIterator::FlushStack"
    class ForceSelectRandomly(HookFactory):
        _name = "AkRSIterator::ForceSelectRandomly"
    class Init(HookFactory):
        _name = "AkRSIterator::Init"
    class JumpNext(HookFactory):
        _name = "AkRSIterator::JumpNext"
    class JumpTo(HookFactory):
        _name = "AkRSIterator::JumpTo"
    class MoveToNextSegment(HookFactory):
        _name = "AkRSIterator::MoveToNextSegment"
    class NotifySegmentPlay(HookFactory):
        _name = "AkRSIterator::NotifySegmentPlay"
    class PackIterator(HookFactory):
        _name = "AkRSIterator::PackIterator"
    class PopObsoleteStackedItems(HookFactory):
        _name = "AkRSIterator::PopObsoleteStackedItems"
    class Select(HookFactory):
        _name = "AkRSIterator::Select"
    class SelectRandomly(HookFactory):
        _name = "AkRSIterator::SelectRandomly"
    class SerializeIterator(HookFactory):
        _name = "AkRSIterator::SerializeIterator"
    class SkipToNextSegment(HookFactory):
        _name = "AkRSIterator::SkipToNextSegment"
    class StackItem(HookFactory):
        _name = "AkRSIterator::StackItem"
    class Term(HookFactory):
        _name = "AkRSIterator::Term"
    class UnpackGlobalRSInfo(HookFactory):
        _name = "AkRSIterator::UnpackGlobalRSInfo"
    class UnpackIterator(HookFactory):
        _name = "AkRSIterator::UnpackIterator"
    class UpdateRandomItem(HookFactory):
        _name = "AkRSIterator::UpdateRandomItem"

class RSStackItem:
    class Deserialize(HookFactory):
        _name = "RSStackItem::Deserialize"

class CAkRSNode:
    class GetInitialLoopCountLoop(HookFactory):
        _name = "CAkRSNode::GetInitialLoopCountLoop"

class CAkRSSub:
    class WasSegmentLeafFound(HookFactory):
        _name = "CAkRSSub::WasSegmentLeafFound"

class CAkNothingCtx:
    class OnStopped(HookFactory):
        _name = "CAkNothingCtx::OnStopped"

class CAkMusicSwitchMonitor:
    class SetSwitch(HookFactory):
        _name = "CAkMusicSwitchMonitor::SetSwitch"

class CreateAkParametricEQFX(HookFactory):
    _name = "CreateAkParametricEQFX"

class CAkParametricEQFX:
    class Execute(HookFactory):
        _name = "CAkParametricEQFX::Execute"
    class Init(HookFactory):
        _name = "CAkParametricEQFX::Init"
    class Reset(HookFactory):
        _name = "CAkParametricEQFX::Reset"
    class Term(HookFactory):
        _name = "CAkParametricEQFX::Term"

class CAkParameterEQFXParams:
    class Clone(HookFactory):
        _name = "CAkParameterEQFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkParameterEQFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkParameterEQFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkParameterEQFXParams::SetParamsBlock"

class CreateAkParametricEQFXParams(HookFactory):
    _name = "CreateAkParametricEQFXParams"

class CreateAkPeakLimiterFX(HookFactory):
    _name = "CreateAkPeakLimiterFX"

class CAkPeakLimiterFX:
    class Execute(HookFactory):
        _name = "CAkPeakLimiterFX::Execute"
    class Init(HookFactory):
        _name = "CAkPeakLimiterFX::Init"
    class InitDelayLine(HookFactory):
        _name = "CAkPeakLimiterFX::InitDelayLine"
    class Process(HookFactory):
        _name = "CAkPeakLimiterFX::Process"
    class ProcessLinked(HookFactory):
        _name = "CAkPeakLimiterFX::ProcessLinked"
    class ProcessLinkedNoLFE(HookFactory):
        _name = "CAkPeakLimiterFX::ProcessLinkedNoLFE"
    class Reset(HookFactory):
        _name = "CAkPeakLimiterFX::Reset"
    class Term(HookFactory):
        _name = "CAkPeakLimiterFX::Term"

class CAkPeakLimiterFXParams:
    class Clone(HookFactory):
        _name = "CAkPeakLimiterFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkPeakLimiterFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkPeakLimiterFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkPeakLimiterFXParams::SetParamsBlock"

class CreateAkPeakLimiterFXParams(HookFactory):
    _name = "CreateAkPeakLimiterFXParams"

class CreateAkPitchShifterFX(HookFactory):
    _name = "CreateAkPitchShifterFX"

class CAkPitchShifterFX:
    class Execute(HookFactory):
        _name = "CAkPitchShifterFX::Execute"
    class Init(HookFactory):
        _name = "CAkPitchShifterFX::Init"
    class InitDryDelay(HookFactory):
        _name = "CAkPitchShifterFX::InitDryDelay"
    class InitPitchVoice(HookFactory):
        _name = "CAkPitchShifterFX::InitPitchVoice"
    class Reset(HookFactory):
        _name = "CAkPitchShifterFX::Reset"
    class ResetDryDelay(HookFactory):
        _name = "CAkPitchShifterFX::ResetDryDelay"
    class ResetPitchVoice(HookFactory):
        _name = "CAkPitchShifterFX::ResetPitchVoice"
    class Term(HookFactory):
        _name = "CAkPitchShifterFX::Term"
    class TermDryDelay(HookFactory):
        _name = "CAkPitchShifterFX::TermDryDelay"
    class TermPitchVoice(HookFactory):
        _name = "CAkPitchShifterFX::TermPitchVoice"

class CAkPitchShifterFXParams:
    class Clone(HookFactory):
        _name = "CAkPitchShifterFXParams::Clone"
    class GetParams(HookFactory):
        _name = "CAkPitchShifterFXParams::GetParams"
    class SetParam(HookFactory):
        _name = "CAkPitchShifterFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkPitchShifterFXParams::SetParamsBlock"

class CreateAkPitchShifterFXParams(HookFactory):
    _name = "CreateAkPitchShifterFXParams"

class AkPitchShifterDSPProcess(HookFactory):
    _name = "AkPitchShifterDSPProcess"

class DelayLengths__AkDelayQSortCompareFloat(HookFactory):
    _name = "DelayLengths__AkDelayQSortCompareFloat"

class DelayLengths__ComputeDiffusionFiltersDelayTimes(HookFactory):
    _name = "DelayLengths__ComputeDiffusionFiltersDelayTimes"

class DelayLengths__ComputeFDNDelayTimes(HookFactory):
    _name = "DelayLengths__ComputeFDNDelayTimes"

class DelayLengths__ComputeFDNInputDelayTimes(HookFactory):
    _name = "DelayLengths__ComputeFDNInputDelayTimes"

class DelayLengths__ComputePrimeDelayLengths(HookFactory):
    _name = "DelayLengths__ComputePrimeDelayLengths"

class CreateAkRoomVerbFX(HookFactory):
    _name = "CreateAkRoomVerbFX"

class AkAudioBuffer:
    class GetLFE(HookFactory):
        _name = "AkAudioBuffer::GetLFE"
    class ZeroPadToMaxFrames(HookFactory):
        _name = "AkAudioBuffer::ZeroPadToMaxFrames"

class SetupDecorrelationAPF(HookFactory):
    _name = "SetupDecorrelationAPF"

class CAkRoomVerbFXParams:
    class Clone(HookFactory):
        _name = "CAkRoomVerbFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkRoomVerbFXParams::Init"
    class SetParam(HookFactory):
        _name = "CAkRoomVerbFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkRoomVerbFXParams::SetParamsBlock"

class CreateAkRoomVerbFXParams(HookFactory):
    _name = "CreateAkRoomVerbFXParams"

class FDNLPFilter:
    class ComputeFDNLPCoefs(HookFactory):
        _name = "FDNLPFilter::ComputeFDNLPCoefs"

class CAkFxSrcSilenceParams:
    class Clone(HookFactory):
        _name = "CAkFxSrcSilenceParams::Clone"
    class Init(HookFactory):
        _name = "CAkFxSrcSilenceParams::Init"
    class SetParam(HookFactory):
        _name = "CAkFxSrcSilenceParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkFxSrcSilenceParams::SetParamsBlock"

class CreateAkSilenceSource(HookFactory):
    _name = "CreateAkSilenceSource"

class CreateAkSilenceSourceParams(HookFactory):
    _name = "CreateAkSilenceSourceParams"

class CAkFXSrcSilence:
    class Execute(HookFactory):
        _name = "CAkFXSrcSilence::Execute"
    class GetDuration(HookFactory):
        _name = "CAkFXSrcSilence::GetDuration"
    class Init(HookFactory):
        _name = "CAkFXSrcSilence::Init"
    class Reset(HookFactory):
        _name = "CAkFXSrcSilence::Reset"
    class Seek(HookFactory):
        _name = "CAkFXSrcSilence::Seek"
    class StopLooping(HookFactory):
        _name = "CAkFXSrcSilence::StopLooping"
    class TimeSkip(HookFactory):
        _name = "CAkFXSrcSilence::TimeSkip"

class CreateSineSource(HookFactory):
    _name = "CreateSineSource"

class CreateSineSourceParams(HookFactory):
    _name = "CreateSineSourceParams"

class CAkFxSrcSineParams:
    class CAkFxSrcSineParams(HookFactory):
        _name = "CAkFxSrcSineParams::CAkFxSrcSineParams"
    class Clone(HookFactory):
        _name = "CAkFxSrcSineParams::Clone"
    class Init(HookFactory):
        _name = "CAkFxSrcSineParams::Init"
    class SetParam(HookFactory):
        _name = "CAkFxSrcSineParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkFxSrcSineParams::SetParamsBlock"

class AK__SoundEngine___SetMultiplePositions_AkChannelEmitter_(HookFactory):
    _name = "AK__SoundEngine___SetMultiplePositions_AkChannelEmitter_"

class CAkAudioLibIndex:
    class CAkAudioLibIndex(HookFactory):
        _name = "CAkAudioLibIndex::CAkAudioLibIndex"
    class GetNodeLock(HookFactory):
        _name = "CAkAudioLibIndex::GetNodeLock"
    class GetNodePtrAndAddRef(HookFactory):
        _name = "CAkAudioLibIndex::GetNodePtrAndAddRef"
        _overload: overloads.CAkAudioLibIndex.GetNodePtrAndAddRef.overloads = "CAkAudioLibIndex *, WwiseObjectIDext *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkAudioLibIndex.GetNodePtrAndAddRef.overloads):
            cls._overload = overload_args
            return cls
    class Init(HookFactory):
        _name = "CAkAudioLibIndex::Init"
    class ReleaseDynamicSequences(HookFactory):
        _name = "CAkAudioLibIndex::ReleaseDynamicSequences"
    class ReleaseTempObjects(HookFactory):
        _name = "CAkAudioLibIndex::ReleaseTempObjects"
    class Term(HookFactory):
        _name = "CAkAudioLibIndex::Term"

class AKRANDOM:
    class AkRandomInit(HookFactory):
        _name = "AKRANDOM::AkRandomInit"

class AkExternalSourceArray:
    class Create(HookFactory):
        _name = "AkExternalSourceArray::Create"
    class Release(HookFactory):
        _name = "AkExternalSourceArray::Release"

class AK__SoundEngine__GetBankIDFromString(HookFactory):
    _name = "AK__SoundEngine__GetBankIDFromString"

class AK__SoundEngine__GetBankIDFromString_0(HookFactory):
    _name = "AK__SoundEngine__GetBankIDFromString_0"

class CAkBusFX:
    class GetMaxBufferLength(HookFactory):
        _name = "CAkBusFX::GetMaxBufferLength"
    class CAkBusFX(HookFactory):
        _name = "CAkBusFX::CAkBusFX"
    class CanCollectProcessorObject(HookFactory):
        _name = "CAkBusFX::CanCollectProcessorObject"
    class Processor:
        class Collect(HookFactory):
            _name = "CAkBusFX::Processor::Collect"
        class Drop(HookFactory):
            _name = "CAkBusFX::Processor::Drop"
        class Execute(HookFactory):
            _name = "CAkBusFX::Processor::Execute"
        class SetEffect(HookFactory):
            _name = "CAkBusFX::Processor::SetEffect"
        class _DropEffect(HookFactory):
            _name = "CAkBusFX::Processor::_DropEffect"
    class ComputeSphericalVBAPGains(HookFactory):
        _name = "CAkBusFX::ComputeSphericalVBAPGains"
    class DropFx(HookFactory):
        _name = "CAkBusFX::DropFx"
    class DropFxFromIndex(HookFactory):
        _name = "CAkBusFX::DropFxFromIndex"
    class EnableMetering(HookFactory):
        _name = "CAkBusFX::EnableMetering"
    class GetAudioNodeID(HookFactory):
        _name = "CAkBusFX::GetAudioNodeID"
    class GetDownstreamGain(HookFactory):
        _name = "CAkBusFX::GetDownstreamGain"
    class GetGameObjectID(HookFactory):
        _name = "CAkBusFX::GetGameObjectID"
    class GetGameObjectInfo(HookFactory):
        _name = "CAkBusFX::GetGameObjectInfo"
    class GetOutputConfig(HookFactory):
        _name = "CAkBusFX::GetOutputConfig"
    class GetOutputID(HookFactory):
        _name = "CAkBusFX::GetOutputID"
    class GetOutputObjects(HookFactory):
        _name = "CAkBusFX::GetOutputObjects"
    class GetParentChannelConfig(HookFactory):
        _name = "CAkBusFX::GetParentChannelConfig"
    class GetPluginCustomGameData(HookFactory):
        _name = "CAkBusFX::GetPluginCustomGameData"
    class GetPluginCustomGameDataForInsertFx(HookFactory):
        _name = "CAkBusFX::GetPluginCustomGameDataForInsertFx"
    class GetPluginMedia(HookFactory):
        _name = "CAkBusFX::GetPluginMedia"
    class GetSpeakerAngles(HookFactory):
        _name = "CAkBusFX::GetSpeakerAngles"
    class InitSphericalVBAP(HookFactory):
        _name = "CAkBusFX::InitSphericalVBAP"
    class RebuildFxFromIndex(HookFactory):
        _name = "CAkBusFX::RebuildFxFromIndex"
    class RefreshMeterWatch(HookFactory):
        _name = "CAkBusFX::RefreshMeterWatch"
    class SetInsertFxBypass(HookFactory):
        _name = "CAkBusFX::SetInsertFxBypass"
    class SetInsertFxMask(HookFactory):
        _name = "CAkBusFX::SetInsertFxMask"
    class SetMixerPlugin(HookFactory):
        _name = "CAkBusFX::SetMixerPlugin"
    class SetupEffectChain(HookFactory):
        _name = "CAkBusFX::SetupEffectChain"
    class TermSphericalVBAP(HookFactory):
        _name = "CAkBusFX::TermSphericalVBAP"
    class Object:
        class Transfer(HookFactory):
            _name = "CAkBusFX::Object::Transfer"
    class UpdateBypassFx(HookFactory):
        _name = "CAkBusFX::UpdateBypassFx"
    class SetFxBypassAll(HookFactory):
        _name = "CAkBusFX::SetFxBypassAll"

class AK__SoundEngine__DynamicSequence__GetSequence(HookFactory):
    _name = "AK__SoundEngine__DynamicSequence__GetSequence"

class CAkEffectContextBase:
    class GetStreamMgr(HookFactory):
        _name = "CAkEffectContextBase::GetStreamMgr"
    class IsUsingThisSlot(HookFactory):
        _name = "CAkEffectContextBase::IsUsingThisSlot"
        _overload: overloads.CAkEffectContextBase.IsUsingThisSlot.overloads = "CAkEffectContextBase *, const unsigned __int8 *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkEffectContextBase.IsUsingThisSlot.overloads):
            cls._overload = overload_args
            return cls
    class PostMonitorMessage(HookFactory):
        _name = "CAkEffectContextBase::PostMonitorMessage"

class AK__SoundEngine__PreInit(HookFactory):
    _name = "AK__SoundEngine__PreInit"

class AK__SoundEngine__PrepareEventInternal(HookFactory):
    _name = "AK__SoundEngine__PrepareEventInternal"

class AK__SoundEngine__PrepareGameSyncsInternal(HookFactory):
    _name = "AK__SoundEngine__PrepareGameSyncsInternal"

class CreateSrcMediaNodePCM(HookFactory):
    _name = "CreateSrcMediaNodePCM"

class CAkEffectsMgr:
    class Alloc(HookFactory):
        _name = "CAkEffectsMgr::Alloc"
    class AllocCodecSrc(HookFactory):
        _name = "CAkEffectsMgr::AllocCodecSrc"
    class AllocFileCodec(HookFactory):
        _name = "CAkEffectsMgr::AllocFileCodec"
    class AllocGrainCodec(HookFactory):
        _name = "CAkEffectsMgr::AllocGrainCodec"
    class AllocParams(HookFactory):
        _name = "CAkEffectsMgr::AllocParams"
    class FreeFileCodec(HookFactory):
        _name = "CAkEffectsMgr::FreeFileCodec"
    class FreeGrainCodec(HookFactory):
        _name = "CAkEffectsMgr::FreeGrainCodec"
    class GetEffectTypeRecord(HookFactory):
        _name = "CAkEffectsMgr::GetEffectTypeRecord"
    class Init(HookFactory):
        _name = "CAkEffectsMgr::Init"
    class RegisterCodec(HookFactory):
        _name = "CAkEffectsMgr::RegisterCodec"
    class RegisterPlugin(HookFactory):
        _name = "CAkEffectsMgr::RegisterPlugin"
    class RegisterPluginList(HookFactory):
        _name = "CAkEffectsMgr::RegisterPluginList"
    class Term(HookFactory):
        _name = "CAkEffectsMgr::Term"
    class ValidatePluginInfo(HookFactory):
        _name = "CAkEffectsMgr::ValidatePluginInfo"

class CreateSrcMediaCodecPCM(HookFactory):
    _name = "CreateSrcMediaCodecPCM"

class CAkConnectedListeners:
    class GetAuxAssocs(HookFactory):
        _name = "CAkConnectedListeners::GetAuxAssocs"
    class GetDefault(HookFactory):
        _name = "CAkConnectedListeners::GetDefault"
    class GetUserAssocs(HookFactory):
        _name = "CAkConnectedListeners::GetUserAssocs"
    class CAkConnectedListeners(HookFactory):
        _name = "CAkConnectedListeners::CAkConnectedListeners"
    class AddListeners(HookFactory):
        _name = "CAkConnectedListeners::AddListeners"
    class BuildListenerSet(HookFactory):
        _name = "CAkConnectedListeners::BuildListenerSet"
    class RemoveListeners(HookFactory):
        _name = "CAkConnectedListeners::RemoveListeners"
    class ResetListenersToDefault(HookFactory):
        _name = "CAkConnectedListeners::ResetListenersToDefault"
    class SetAllUserGains(HookFactory):
        _name = "CAkConnectedListeners::SetAllUserGains"
    class SetAuxGains(HookFactory):
        _name = "CAkConnectedListeners::SetAuxGains"
    class SetListeners(HookFactory):
        _name = "CAkConnectedListeners::SetListeners"
    class SetUserGain(HookFactory):
        _name = "CAkConnectedListeners::SetUserGain"
    class Term(HookFactory):
        _name = "CAkConnectedListeners::Term"

class AkTlsAllocateSlot(HookFactory):
    _name = "AkTlsAllocateSlot"

class AkTlsFreeSlot(HookFactory):
    _name = "AkTlsFreeSlot"

class AkTlsGetValue(HookFactory):
    _name = "AkTlsGetValue"

class AkTlsSetValue(HookFactory):
    _name = "AkTlsSetValue"

class CAkGameObject:
    class CreateComponent(HookFactory):
        _templates = ("T0", )
        _name = "CAkGameObject::CreateComponent<{T0}>"
    class CAkGameObject(HookFactory):
        _name = "CAkGameObject::CAkGameObject"

class CAkBehavioralCtx:
    class CAkBehavioralCtx(HookFactory):
        _name = "CAkBehavioralCtx::CAkBehavioralCtx"
    class CacheEmitterPosition(HookFactory):
        _name = "CAkBehavioralCtx::CacheEmitterPosition"
    class CalculateMutedEffectiveVolume(HookFactory):
        _name = "CAkBehavioralCtx::CalculateMutedEffectiveVolume"
    class ComputeEmitterListenerPairs(HookFactory):
        _name = "CAkBehavioralCtx::ComputeEmitterListenerPairs"
    class EnableObstruction(HookFactory):
        _name = "CAkBehavioralCtx::EnableObstruction"
    class EvaluateFocus(HookFactory):
        _name = "CAkBehavioralCtx::EvaluateFocus"
    class EvaluateSpread(HookFactory):
        _name = "CAkBehavioralCtx::EvaluateSpread"
    class FetchCustomMetadata(HookFactory):
        _name = "CAkBehavioralCtx::FetchCustomMetadata"
    class Get3DParams(HookFactory):
        _name = "CAkBehavioralCtx::Get3DParams"
    class GetAuxSendsValues(HookFactory):
        _name = "CAkBehavioralCtx::GetAuxSendsValues"
    class GetControlBus(HookFactory):
        _name = "CAkBehavioralCtx::GetControlBus"
    class GetEmitterListenerPair(HookFactory):
        _name = "CAkBehavioralCtx::GetEmitterListenerPair"
    class GetGameObjectPosition(HookFactory):
        _name = "CAkBehavioralCtx::GetGameObjectPosition"
    class GetListenerData(HookFactory):
        _name = "CAkBehavioralCtx::GetListenerData"
    class GetModulatorTriggerParams(HookFactory):
        _name = "CAkBehavioralCtx::GetModulatorTriggerParams"
    class GetNumRays(HookFactory):
        _name = "CAkBehavioralCtx::GetNumRays"
    class GetOutputBusPtr(HookFactory):
        _name = "CAkBehavioralCtx::GetOutputBusPtr"
    class GetRay(HookFactory):
        _name = "CAkBehavioralCtx::GetRay"
    class GetSoundID(HookFactory):
        _name = "CAkBehavioralCtx::GetSoundID"
    class GetTargetedParamsSet(HookFactory):
        _name = "CAkBehavioralCtx::GetTargetedParamsSet"
    class Init(HookFactory):
        _name = "CAkBehavioralCtx::Init"
    class InitObjectMetadata(HookFactory):
        _name = "CAkBehavioralCtx::InitObjectMetadata"
    class InitSpatialAudioVoice(HookFactory):
        _name = "CAkBehavioralCtx::InitSpatialAudioVoice"
    class IsAuxRoutable(HookFactory):
        _name = "CAkBehavioralCtx::IsAuxRoutable"
    class IsInitiallyUnderThreshold(HookFactory):
        _name = "CAkBehavioralCtx::IsInitiallyUnderThreshold"
    class MultiPositionType(HookFactory):
        _name = "CAkBehavioralCtx::MultiPositionType"
    class NotifyParamsChanged(HookFactory):
        _name = "CAkBehavioralCtx::NotifyParamsChanged"
    class OnPathAdded(HookFactory):
        _name = "CAkBehavioralCtx::OnPathAdded"
    class ParamNotification(HookFactory):
        _name = "CAkBehavioralCtx::ParamNotification"
    class PausePath(HookFactory):
        _name = "CAkBehavioralCtx::PausePath"
    class PositioningChangeNotification(HookFactory):
        _name = "CAkBehavioralCtx::PositioningChangeNotification"
    class PreInit(HookFactory):
        _name = "CAkBehavioralCtx::PreInit"
    class RecalcNotification(HookFactory):
        _name = "CAkBehavioralCtx::RecalcNotification"
    class ReleaseModulators(HookFactory):
        _name = "CAkBehavioralCtx::ReleaseModulators"
    class Reset3DParams(HookFactory):
        _name = "CAkBehavioralCtx::Reset3DParams"
    class Scale3DUserDefRTPCValue(HookFactory):
        _name = "CAkBehavioralCtx::Scale3DUserDefRTPCValue"
    class SetParam(HookFactory):
        _name = "CAkBehavioralCtx::SetParam"
    class SetupPath(HookFactory):
        _name = "CAkBehavioralCtx::SetupPath"
    class SpatialAudioParamsUpdated(HookFactory):
        _name = "CAkBehavioralCtx::SpatialAudioParamsUpdated"
    class StartPath(HookFactory):
        _name = "CAkBehavioralCtx::StartPath"
    class Term(HookFactory):
        _name = "CAkBehavioralCtx::Term"
    class UpdateAttenuation(HookFactory):
        _name = "CAkBehavioralCtx::UpdateAttenuation"
    class UpdateTargetParam(HookFactory):
        _name = "CAkBehavioralCtx::UpdateTargetParam"
    class UseSpatialAudioPanningMode(HookFactory):
        _name = "CAkBehavioralCtx::UseSpatialAudioPanningMode"

class AkPositionStore:
    class GetGameRayParams(HookFactory):
        _name = "AkPositionStore::GetGameRayParams"
    class SetObstructionOcclusion(HookFactory):
        _name = "AkPositionStore::SetObstructionOcclusion"
    class ClearDataForListenersNotInSet(HookFactory):
        _name = "AkPositionStore::ClearDataForListenersNotInSet"

class AkPositioningParams:
    class GetRawAttenuation(HookFactory):
        _name = "AkPositioningParams::GetRawAttenuation"
    class AkPositioningParams(HookFactory):
        _name = "AkPositioningParams::AkPositioningParams"
    class ReleaseAttenuation(HookFactory):
        _name = "AkPositioningParams::ReleaseAttenuation"

class PluginRTPCSub:
    class NotifyRtpcParamChanged(HookFactory):
        _name = "PluginRTPCSub::NotifyRtpcParamChanged"
    class UpdateTargetRtpcParam(HookFactory):
        _name = "PluginRTPCSub::UpdateTargetRtpcParam"
    class CalculatePropertyUpdateStates(HookFactory):
        _name = "PluginRTPCSub::CalculatePropertyUpdateStates"
    class Clone(HookFactory):
        _name = "PluginRTPCSub::Clone"
        _overload: overloads.PluginRTPCSub.Clone.overloads = "PluginRTPCSub *, CAkFxBase *, const AkRTPCKey *, CAkModulatorData *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.PluginRTPCSub.Clone.overloads):
            cls._overload = overload_args
            return cls
    class GetPluginID(HookFactory):
        _name = "PluginRTPCSub::GetPluginID"
    class SubscribeRTPC(HookFactory):
        _name = "PluginRTPCSub::SubscribeRTPC"
    class TakeFrom(HookFactory):
        _name = "PluginRTPCSub::TakeFrom"
    class Term(HookFactory):
        _name = "PluginRTPCSub::Term"
    class UpdateTargetParam(HookFactory):
        _name = "PluginRTPCSub::UpdateTargetParam"
    class _Clone(HookFactory):
        _name = "PluginRTPCSub::_Clone"
    class _RecalculatePropertyUpdate(HookFactory):
        _name = "PluginRTPCSub::_RecalculatePropertyUpdate"

class AkInitialSoundParams:
    class Clear(HookFactory):
        _name = "AkInitialSoundParams::Clear"
    class DoCopy(HookFactory):
        _name = "AkInitialSoundParams::DoCopy"

class AkMutedMap:
    class MuteNotification(HookFactory):
        _name = "AkMutedMap::MuteNotification"

class CAkURenderer:
    class AddLimiter(HookFactory):
        _name = "CAkURenderer::AddLimiter"
    class AddToActiveNodes(HookFactory):
        _name = "CAkURenderer::AddToActiveNodes"
    class ClearPBIAndDecrement(HookFactory):
        _name = "CAkURenderer::ClearPBIAndDecrement"
    class DecrementDangerousVirtualCount(HookFactory):
        _name = "CAkURenderer::DecrementDangerousVirtualCount"
    class DecrementVirtualCount(HookFactory):
        _name = "CAkURenderer::DecrementVirtualCount"
    class DropAllEffectsUsingThisMedia(HookFactory):
        _name = "CAkURenderer::DropAllEffectsUsingThisMedia"
    class EnqueueContext(HookFactory):
        _name = "CAkURenderer::EnqueueContext"
    class EnqueueContextNotif(HookFactory):
        _name = "CAkURenderer::EnqueueContextNotif"
    class GetMaxRadius(HookFactory):
        _name = "CAkURenderer::GetMaxRadius"
        _overload: overloads.CAkURenderer.GetMaxRadius.overloads = "AkArray<AK::SoundEngine::Query::GameObjDst,AK::SoundEngine::Query::GameObjDst const &,AkArrayAllocatorNoAlign<0>,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy<AK::SoundEngine::Query::GameObjDst> > *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkURenderer.GetMaxRadius.overloads):
            cls._overload = overload_args
            return cls
    class GetMinDistance(HookFactory):
        _name = "CAkURenderer::GetMinDistance"
    class GetVirtualBehaviorAction(HookFactory):
        _name = "CAkURenderer::GetVirtualBehaviorAction"
    class IncrementDangerousVirtualCount(HookFactory):
        _name = "CAkURenderer::IncrementDangerousVirtualCount"
    class IncrementPlayCountAndInit(HookFactory):
        _name = "CAkURenderer::IncrementPlayCountAndInit"
    class Init(HookFactory):
        _name = "CAkURenderer::Init"
    class Kick(HookFactory):
        _name = "CAkURenderer::Kick"
    class PerformContextNotif(HookFactory):
        _name = "CAkURenderer::PerformContextNotif"
    class Play(HookFactory):
        _name = "CAkURenderer::Play"
    class ProcessLimiters(HookFactory):
        _name = "CAkURenderer::ProcessLimiters"
    class RemoveFromActiveNodes(HookFactory):
        _name = "CAkURenderer::RemoveFromActiveNodes"
    class RemoveLimiter(HookFactory):
        _name = "CAkURenderer::RemoveLimiter"
    class StopAll(HookFactory):
        _name = "CAkURenderer::StopAll"
    class StopAllPBIs(HookFactory):
        _name = "CAkURenderer::StopAllPBIs"
    class Term(HookFactory):
        _name = "CAkURenderer::Term"
    class ValidateLimits(HookFactory):
        _name = "CAkURenderer::ValidateLimits"
    class _CalcInitialPriority(HookFactory):
        _name = "CAkURenderer::_CalcInitialPriority"

class CAkPlayingMgr:
    class AddItemActiveCount(HookFactory):
        _name = "CAkPlayingMgr::AddItemActiveCount"
    class AddPlayingID(HookFactory):
        _name = "CAkPlayingMgr::AddPlayingID"
        _overload: overloads.CAkPlayingMgr.AddPlayingID.overloads = "CAkPlayingMgr *, AkQueuedMsg_EventBase *, __int64 *, void *, unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkPlayingMgr.AddPlayingID.overloads):
            cls._overload = overload_args
            return cls
    class AddedNewModulatorCtx(HookFactory):
        _name = "CAkPlayingMgr::AddedNewModulatorCtx"
    class AddedNewRtpcValue(HookFactory):
        _name = "CAkPlayingMgr::AddedNewRtpcValue"
    class CancelCallback(HookFactory):
        _name = "CAkPlayingMgr::CancelCallback"
    class CancelCallbackCookie(HookFactory):
        _name = "CAkPlayingMgr::CancelCallbackCookie"
    class CancelCallbackGameObject(HookFactory):
        _name = "CAkPlayingMgr::CancelCallbackGameObject"
    class CheckRemovePlayingID(HookFactory):
        _name = "CAkPlayingMgr::CheckRemovePlayingID"
    class GetCookie(HookFactory):
        _name = "CAkPlayingMgr::GetCookie"
    class GetEventIDFromPlayingID(HookFactory):
        _name = "CAkPlayingMgr::GetEventIDFromPlayingID"
    class GetGameObjectFromPlayingID(HookFactory):
        _name = "CAkPlayingMgr::GetGameObjectFromPlayingID"
    class GetPBIs(HookFactory):
        _name = "CAkPlayingMgr::GetPBIs"
    class GetPlayingIDsFromGameObject(HookFactory):
        _name = "CAkPlayingMgr::GetPlayingIDsFromGameObject"
    class Init(HookFactory):
        _name = "CAkPlayingMgr::Init"
    class MusicPlaylistCallback(HookFactory):
        _name = "CAkPlayingMgr::MusicPlaylistCallback"
    class NotifyDuration(HookFactory):
        _name = "CAkPlayingMgr::NotifyDuration"
    class NotifyEndOfDynamicSequenceItem(HookFactory):
        _name = "CAkPlayingMgr::NotifyEndOfDynamicSequenceItem"
    class NotifyMarker(HookFactory):
        _name = "CAkPlayingMgr::NotifyMarker"
    class NotifyMarkers(HookFactory):
        _name = "CAkPlayingMgr::NotifyMarkers"
    class NotifyMidiEvent(HookFactory):
        _name = "CAkPlayingMgr::NotifyMidiEvent"
    class NotifyMusic(HookFactory):
        _name = "CAkPlayingMgr::NotifyMusic"
    class NotifyMusicPlayStarted(HookFactory):
        _name = "CAkPlayingMgr::NotifyMusicPlayStarted"
    class NotifyMusicUserCues(HookFactory):
        _name = "CAkPlayingMgr::NotifyMusicUserCues"
    class NotifySpeakerVolumeMatrix(HookFactory):
        _name = "CAkPlayingMgr::NotifySpeakerVolumeMatrix"
    class NotifyStarvation(HookFactory):
        _name = "CAkPlayingMgr::NotifyStarvation"
    class Remove(HookFactory):
        _name = "CAkPlayingMgr::Remove"
    class RemoveItemActiveCount(HookFactory):
        _name = "CAkPlayingMgr::RemoveItemActiveCount"
    class SetPBI(HookFactory):
        _name = "CAkPlayingMgr::SetPBI"
    class Term(HookFactory):
        _name = "CAkPlayingMgr::Term"
    class UseExistingItem(HookFactory):
        _name = "CAkPlayingMgr::UseExistingItem"

class CAkLimiter:
    class CAkLimiter(HookFactory):
        _name = "CAkLimiter::CAkLimiter"
    class Add(HookFactory):
        _name = "CAkLimiter::Add"
    class Remove(HookFactory):
        _name = "CAkLimiter::Remove"
    class Update(HookFactory):
        _name = "CAkLimiter::Update"
    class UpdateFlags(HookFactory):
        _name = "CAkLimiter::UpdateFlags"

class StructMaxInst:
    class DisableLimiter(HookFactory):
        _name = "StructMaxInst::DisableLimiter"

class CAkParamTargetLimiter:
    class GetTargetedParamsSet(HookFactory):
        _name = "CAkParamTargetLimiter::GetTargetedParamsSet"
    class Init(HookFactory):
        _name = "CAkParamTargetLimiter::Init"
    class UpdateTargetParam(HookFactory):
        _name = "CAkParamTargetLimiter::UpdateTargetParam"

class CAkParamNodeStateTargetData:
    class RemoveTarget(HookFactory):
        _name = "CAkParamNodeStateTargetData::RemoveTarget"

class AkPendingAction:
    class AkPendingAction(HookFactory):
        _name = "AkPendingAction::AkPendingAction"
    class GameObjID(HookFactory):
        _name = "AkPendingAction::GameObjID"
    class TransUpdateValue(HookFactory):
        _name = "AkPendingAction::TransUpdateValue"

class CAkAudioMgr:
    class CAkAudioMgr(HookFactory):
        _name = "CAkAudioMgr::CAkAudioMgr"
    class BreakPendingAction(HookFactory):
        _name = "CAkAudioMgr::BreakPendingAction"
    class ClearCrossFadeOccurence(HookFactory):
        _name = "CAkAudioMgr::ClearCrossFadeOccurence"
    class ClearPendingItems(HookFactory):
        _name = "CAkAudioMgr::ClearPendingItems"
    class ComputeFramesToRender(HookFactory):
        _name = "CAkAudioMgr::ComputeFramesToRender"
    class EnqueueOrExecuteAction(HookFactory):
        _name = "CAkAudioMgr::EnqueueOrExecuteAction"
    class ExecuteEvent(HookFactory):
        _name = "CAkAudioMgr::ExecuteEvent"
    class Init(HookFactory):
        _name = "CAkAudioMgr::Init"
    class InitSinkPlugin(HookFactory):
        _name = "CAkAudioMgr::InitSinkPlugin"
    class InsertAsPaused(HookFactory):
        _name = "CAkAudioMgr::InsertAsPaused"
    class IsAnException(HookFactory):
        _name = "CAkAudioMgr::IsAnException"
    class MidiNoteOffExecuted(HookFactory):
        _name = "CAkAudioMgr::MidiNoteOffExecuted"
    class PausePending(HookFactory):
        _name = "CAkAudioMgr::PausePending"
    class PausePendingAction(HookFactory):
        _name = "CAkAudioMgr::PausePendingAction"
        _overload: overloads.CAkAudioMgr.PausePendingAction.overloads = "CAkAudioMgr *, CAkAction *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkAudioMgr.PausePendingAction.overloads):
            cls._overload = overload_args
            return cls
    class PausePendingActionAllExcept(HookFactory):
        _name = "CAkAudioMgr::PausePendingActionAllExcept"
    class PausePendingItems(HookFactory):
        _name = "CAkAudioMgr::PausePendingItems"
    class Perform(HookFactory):
        _name = "CAkAudioMgr::Perform"
    class ProcessAllActions(HookFactory):
        _name = "CAkAudioMgr::ProcessAllActions"
        _overload: overloads.CAkAudioMgr.ProcessAllActions.overloads = "CAkAudioMgr *, CAkEvent *, AkQueuedMsg_EventAction *, CAkRegisteredObj *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkAudioMgr.ProcessAllActions.overloads):
            cls._overload = overload_args
            return cls
    class ProcessMsgQueue(HookFactory):
        _name = "CAkAudioMgr::ProcessMsgQueue"
    class ProcessPendingList(HookFactory):
        _name = "CAkAudioMgr::ProcessPendingList"
    class RemoveAllPreallocAndReferences(HookFactory):
        _name = "CAkAudioMgr::RemoveAllPreallocAndReferences"
    class RemovePausedPendingAction(HookFactory):
        _name = "CAkAudioMgr::RemovePausedPendingAction"
    class RemovePendingAction(HookFactory):
        _name = "CAkAudioMgr::RemovePendingAction"
    class RenderAudio(HookFactory):
        _name = "CAkAudioMgr::RenderAudio"
    class ReserveForWrite(HookFactory):
        _name = "CAkAudioMgr::ReserveForWrite"
    class ReserveQueue(HookFactory):
        _name = "CAkAudioMgr::ReserveQueue"
    class ResumePausedPendingAction(HookFactory):
        _name = "CAkAudioMgr::ResumePausedPendingAction"
        _overload: overloads.CAkAudioMgr.ResumePausedPendingAction.overloads = "CAkAudioMgr *, CAkAction *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkAudioMgr.ResumePausedPendingAction.overloads):
            cls._overload = overload_args
            return cls
    class ResumePausedPendingActionAllExcept(HookFactory):
        _name = "CAkAudioMgr::ResumePausedPendingActionAllExcept"
    class ResumePausedPendingItems(HookFactory):
        _name = "CAkAudioMgr::ResumePausedPendingItems"
    class StampTimeLastBuffer(HookFactory):
        _name = "CAkAudioMgr::StampTimeLastBuffer"
    class Start(HookFactory):
        _name = "CAkAudioMgr::Start"
    class Stop(HookFactory):
        _name = "CAkAudioMgr::Stop"
    class StopAction(HookFactory):
        _name = "CAkAudioMgr::StopAction"
    class StopPending(HookFactory):
        _name = "CAkAudioMgr::StopPending"
    class StopPendingAction(HookFactory):
        _name = "CAkAudioMgr::StopPendingAction"
    class StopPendingActionAllExcept(HookFactory):
        _name = "CAkAudioMgr::StopPendingActionAllExcept"
    class SuspendWakeup(HookFactory):
        _name = "CAkAudioMgr::SuspendWakeup"
    class Term(HookFactory):
        _name = "CAkAudioMgr::Term"
    class TransferToPending(HookFactory):
        _name = "CAkAudioMgr::TransferToPending"
    class WaitOnMsgQueuewriters(HookFactory):
        _name = "CAkAudioMgr::WaitOnMsgQueuewriters"

class GetListeners(HookFactory):
    _name = "GetListeners"

class RandomizerModifier:
    class GetMod(HookFactory):
        _templates = ("T0", )
        _name = "RandomizerModifier::GetMod<{T0}>"
    class GetModValue(HookFactory):
        _templates = ("T0", )
        _name = "RandomizerModifier::GetModValue<{T0}>"

class CAkSoundBase:
    class CAkSoundBase(HookFactory):
        _name = "CAkSoundBase::CAkSoundBase"
    class ClearLimiters(HookFactory):
        _name = "CAkSoundBase::ClearLimiters"
    class ForAllPBI(HookFactory):
        _name = "CAkSoundBase::ForAllPBI"
    class IsInfiniteLooping(HookFactory):
        _name = "CAkSoundBase::IsInfiniteLooping"
    class Loop(HookFactory):
        _name = "CAkSoundBase::Loop"
    class MuteNotification(HookFactory):
        _name = "CAkSoundBase::MuteNotification"
        _overload: overloads.CAkSoundBase.MuteNotification.overloads = "CAkSoundBase *, float, AkMutedMapItem *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkSoundBase.MuteNotification.overloads):
            cls._overload = overload_args
            return cls
    class NotifyBypass(HookFactory):
        _name = "CAkSoundBase::NotifyBypass"
    class ParamNotification(HookFactory):
        _name = "CAkSoundBase::ParamNotification"
    class PlayToEnd(HookFactory):
        _name = "CAkSoundBase::PlayToEnd"
    class ProcessCommand(HookFactory):
        _name = "CAkSoundBase::ProcessCommand"
    class PropagatePositioningNotification(HookFactory):
        _name = "CAkSoundBase::PropagatePositioningNotification"
    class RecalcNotification(HookFactory):
        _name = "CAkSoundBase::RecalcNotification"
    class UpdateFX(HookFactory):
        _name = "CAkSoundBase::UpdateFX"

class CAkMidiClipMgr:
    class CAkMidiClipMgr(HookFactory):
        _name = "CAkMidiClipMgr::CAkMidiClipMgr"
    class AddClipCtx(HookFactory):
        _name = "CAkMidiClipMgr::AddClipCtx"
    class NextFrame(HookFactory):
        _name = "CAkMidiClipMgr::NextFrame"
    class StopNoteIfUsingData(HookFactory):
        _name = "CAkMidiClipMgr::StopNoteIfUsingData"
    class UpdateOnFirstNote(HookFactory):
        _name = "CAkMidiClipMgr::UpdateOnFirstNote"

class AkAudioLibSettings:
    class SetAudioBufferSettings(HookFactory):
        _name = "AkAudioLibSettings::SetAudioBufferSettings"

class CAkTransition:
    class CAkTransition(HookFactory):
        _name = "CAkTransition::CAkTransition"
    class ComputeTransition(HookFactory):
        _name = "CAkTransition::ComputeTransition"
    class InitParameters(HookFactory):
        _name = "CAkTransition::InitParameters"
    class IsFadingOut(HookFactory):
        _name = "CAkTransition::IsFadingOut"
    class UpdateFilteringCoeff(HookFactory):
        _name = "CAkTransition::UpdateFilteringCoeff"

class AkInterpolation:
    class InterpolateNoCheck(HookFactory):
        _name = "AkInterpolation::InterpolateNoCheck"

class CAkTransitionManager:
    class AddTransitionToList(HookFactory):
        _name = "CAkTransitionManager::AddTransitionToList"
    class AddTransitionUser(HookFactory):
        _name = "CAkTransitionManager::AddTransitionUser"
    class ChangeParameter(HookFactory):
        _name = "CAkTransitionManager::ChangeParameter"
    class Pause(HookFactory):
        _name = "CAkTransitionManager::Pause"
    class PauseAllStateTransitions(HookFactory):
        _name = "CAkTransitionManager::PauseAllStateTransitions"
    class ProcessTransitionsList(HookFactory):
        _name = "CAkTransitionManager::ProcessTransitionsList"
        _overload: overloads.CAkTransitionManager.ProcessTransitionsList.overloads = "CAkTransitionManager *, unsigned int, AkArray<CAkTransition *,CAkTransition *,AkArrayAllocatorNoAlign<0>,AkGrowByPolicy_Proportional,AkAssignmentMovePolicy<CAkTransition *> > *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkTransitionManager.ProcessTransitionsList.overloads):
            cls._overload = overload_args
            return cls
    class RemoveTransitionUser(HookFactory):
        _name = "CAkTransitionManager::RemoveTransitionUser"
    class Resume(HookFactory):
        _name = "CAkTransitionManager::Resume"
    class ResumeAllStateTransitions(HookFactory):
        _name = "CAkTransitionManager::ResumeAllStateTransitions"
    class Term(HookFactory):
        _name = "CAkTransitionManager::Term"
    class TermList(HookFactory):
        _name = "CAkTransitionManager::TermList"

class CAkParameterTarget:
    class CAkParameterTarget(HookFactory):
        _name = "CAkParameterTarget::CAkParameterTarget"
    class RegisterParamTarget(HookFactory):
        _name = "CAkParameterTarget::RegisterParamTarget"
    class SetRootNode(HookFactory):
        _name = "CAkParameterTarget::SetRootNode"
    class TermTargets(HookFactory):
        _name = "CAkParameterTarget::TermTargets"
    class UnregisterParamTarget(HookFactory):
        _name = "CAkParameterTarget::UnregisterParamTarget"
    class UpdateAllParameterTargets(HookFactory):
        _name = "CAkParameterTarget::UpdateAllParameterTargets"
    class UpdateTargetNodeParam(HookFactory):
        _name = "CAkParameterTarget::UpdateTargetNodeParam"

class CAkRTPCSubscriberNode:
    class CAkRTPCSubscriberNode(HookFactory):
        _name = "CAkRTPCSubscriberNode::CAkRTPCSubscriberNode"
    class CreateData(HookFactory):
        _name = "CAkRTPCSubscriberNode::CreateData"
    class DestroyData(HookFactory):
        _name = "CAkRTPCSubscriberNode::DestroyData"
    class EnableParam(HookFactory):
        _name = "CAkRTPCSubscriberNode::EnableParam"
    class GetModulatorParamXfrm(HookFactory):
        _name = "CAkRTPCSubscriberNode::GetModulatorParamXfrm"
    class NotifyParamChanged(HookFactory):
        _name = "CAkRTPCSubscriberNode::NotifyParamChanged"
    class NotifyParamsChanged(HookFactory):
        _name = "CAkRTPCSubscriberNode::NotifyParamsChanged"
    class PushParamUpdate(HookFactory):
        _name = "CAkRTPCSubscriberNode::PushParamUpdate"
    class PushParamUpdate_All(HookFactory):
        _name = "CAkRTPCSubscriberNode::PushParamUpdate_All"
    class PushParamUpdate_Scoped(HookFactory):
        _name = "CAkRTPCSubscriberNode::PushParamUpdate_Scoped"
    class PushParamUpdate_ScopedExcept(HookFactory):
        _name = "CAkRTPCSubscriberNode::PushParamUpdate_ScopedExcept"
    class SetRTPC(HookFactory):
        _name = "CAkRTPCSubscriberNode::SetRTPC"
    class UnregisterAllParameterTargets(HookFactory):
        _name = "CAkRTPCSubscriberNode::UnregisterAllParameterTargets"
    class UnsetRTPC(HookFactory):
        _name = "CAkRTPCSubscriberNode::UnsetRTPC"

class AkParamTargetList:
    class Add(HookFactory):
        _name = "AkParamTargetList::Add"
    class Remove(HookFactory):
        _name = "AkParamTargetList::Remove"

class AkSortedParamTrtArray:
    class RemoveTarget(HookFactory):
        _name = "AkSortedParamTrtArray::RemoveTarget"

class RegisterGameObjectAsActive(HookFactory):
    _name = "RegisterGameObjectAsActive"

class UnregisterGameObjectAsActive(HookFactory):
    _name = "UnregisterGameObjectAsActive"

class CAkStateMgr:
    class CAkStateMgr(HookFactory):
        _name = "CAkStateMgr::CAkStateMgr"
    class AddStateGroup(HookFactory):
        _name = "CAkStateMgr::AddStateGroup"
    class AddStateGroupMember(HookFactory):
        _name = "CAkStateMgr::AddStateGroupMember"
    class AddStateTransition(HookFactory):
        _name = "CAkStateMgr::AddStateTransition"
    class GetPreparationItem(HookFactory):
        _name = "CAkStateMgr::GetPreparationItem"
    class GetState(HookFactory):
        _name = "CAkStateMgr::GetState"
        _overload: overloads.CAkStateMgr.GetState.overloads = "CAkStateMgr *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkStateMgr.GetState.overloads):
            cls._overload = overload_args
            return cls
    class Init(HookFactory):
        _name = "CAkStateMgr::Init"
    class PrepareGameSync(HookFactory):
        _name = "CAkStateMgr::PrepareGameSync"
    class RegisterSwitch(HookFactory):
        _name = "CAkStateMgr::RegisterSwitch"
    class RegisterTrigger(HookFactory):
        _name = "CAkStateMgr::RegisterTrigger"
    class RemoveAllStateGroups(HookFactory):
        _name = "CAkStateMgr::RemoveAllStateGroups"
    class RemoveStateGroupMember(HookFactory):
        _name = "CAkStateMgr::RemoveStateGroupMember"
    class SetStateInternal(HookFactory):
        _name = "CAkStateMgr::SetStateInternal"
    class SetdefaultTransitionTime(HookFactory):
        _name = "CAkStateMgr::SetdefaultTransitionTime"
    class Term(HookFactory):
        _name = "CAkStateMgr::Term"
    class TermPreparationGroup(HookFactory):
        _name = "CAkStateMgr::TermPreparationGroup"
    class Trigger(HookFactory):
        _name = "CAkStateMgr::Trigger"
    class UnregisterSwitch(HookFactory):
        _name = "CAkStateMgr::UnregisterSwitch"
    class UnregisterTrigger(HookFactory):
        _name = "CAkStateMgr::UnregisterTrigger"

class CAkBankReader:
    class CAkBankReader(HookFactory):
        _name = "CAkBankReader::CAkBankReader"
    class CloseFile(HookFactory):
        _name = "CAkBankReader::CloseFile"
    class FillData(HookFactory):
        _name = "CAkBankReader::FillData"
    class FillDataEx(HookFactory):
        _name = "CAkBankReader::FillDataEx"
    class FinalizeStreamInit(HookFactory):
        _name = "CAkBankReader::FinalizeStreamInit"
    class GetData(HookFactory):
        _name = "CAkBankReader::GetData"
    class Init(HookFactory):
        _name = "CAkBankReader::Init"
    class ReleaseData(HookFactory):
        _name = "CAkBankReader::ReleaseData"
    class Reset(HookFactory):
        _name = "CAkBankReader::Reset"
    class SetBankLoadIOSettings(HookFactory):
        _name = "CAkBankReader::SetBankLoadIOSettings"
    class SetFile(HookFactory):
        _name = "CAkBankReader::SetFile"
        _overload: overloads.CAkBankReader.SetFile.overloads = "CAkBankReader *, __int64, unsigned int, unsigned int, void *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkBankReader.SetFile.overloads):
            cls._overload = overload_args
            return cls
    class Skip(HookFactory):
        _name = "CAkBankReader::Skip"
    class Term(HookFactory):
        _name = "CAkBankReader::Term"

class CAkBankMgr:
    class ReadSourceParent(HookFactory):
        _templates = ("T0", )
        _name = "CAkBankMgr::ReadSourceParent<{T0}>"
    class CAkBankMgr(HookFactory):
        _name = "CAkBankMgr::CAkBankMgr"
    class AddLoadedItem(HookFactory):
        _name = "CAkBankMgr::AddLoadedItem"
    class AddMediaToTable(HookFactory):
        _name = "CAkBankMgr::AddMediaToTable"
    class ClearBanksInternal(HookFactory):
        _name = "CAkBankMgr::ClearBanksInternal"
    class ClearPreparedEvents(HookFactory):
        _name = "CAkBankMgr::ClearPreparedEvents"
    class DecodeMedia(HookFactory):
        _name = "CAkBankMgr::DecodeMedia"
    class ExecuteCommand(HookFactory):
        _name = "CAkBankMgr::ExecuteCommand"
    class GetBankInfoFromPtr(HookFactory):
        _name = "CAkBankMgr::GetBankInfoFromPtr"
    class GetBufferSizeForDecodedMedia(HookFactory):
        _name = "CAkBankMgr::GetBufferSizeForDecodedMedia"
    class GetMedia(HookFactory):
        _name = "CAkBankMgr::GetMedia"
    class Init(HookFactory):
        _name = "CAkBankMgr::Init"
    class KillSlot(HookFactory):
        _name = "CAkBankMgr::KillSlot"
    class KillSlotAsync(HookFactory):
        _name = "CAkBankMgr::KillSlotAsync"
    class KillSlotSync(HookFactory):
        _name = "CAkBankMgr::KillSlotSync"
    class LoadBank(HookFactory):
        _name = "CAkBankMgr::LoadBank"
    class LoadMedia(HookFactory):
        _name = "CAkBankMgr::LoadMedia"
    class LoadSingleMedia(HookFactory):
        _name = "CAkBankMgr::LoadSingleMedia"
    class LoadSource(HookFactory):
        _name = "CAkBankMgr::LoadSource"
    class NotifyCompletion(HookFactory):
        _name = "CAkBankMgr::NotifyCompletion"
    class PrepareBankInternal(HookFactory):
        _name = "CAkBankMgr::PrepareBankInternal"
    class PrepareEvent(HookFactory):
        _name = "CAkBankMgr::PrepareEvent"
    class PrepareEventInternal(HookFactory):
        _name = "CAkBankMgr::PrepareEventInternal"
    class PrepareGameSync(HookFactory):
        _name = "CAkBankMgr::PrepareGameSync"
    class PrepareMedia(HookFactory):
        _name = "CAkBankMgr::PrepareMedia"
    class PrepareSingleMedia(HookFactory):
        _name = "CAkBankMgr::PrepareSingleMedia"
    class ProcessAccumulated(HookFactory):
        _name = "CAkBankMgr::ProcessAccumulated"
    class ProcessCustomPlatformChunk(HookFactory):
        _name = "CAkBankMgr::ProcessCustomPlatformChunk"
    class ProcessGlobalSettingsChunk(HookFactory):
        _name = "CAkBankMgr::ProcessGlobalSettingsChunk"
    class ProcessHircChunk(HookFactory):
        _name = "CAkBankMgr::ProcessHircChunk"
    class ProcessPluginChunk(HookFactory):
        _name = "CAkBankMgr::ProcessPluginChunk"
    class ProcessStringMappingChunk(HookFactory):
        _name = "CAkBankMgr::ProcessStringMappingChunk"
    class QueueBankCommand(HookFactory):
        _name = "CAkBankMgr::QueueBankCommand"
    class ReadAction(HookFactory):
        _name = "CAkBankMgr::ReadAction"
    class ReadBus(HookFactory):
        _name = "CAkBankMgr::ReadBus"
    class ReleaseMedia(HookFactory):
        _name = "CAkBankMgr::ReleaseMedia"
    class ReleaseMediaHashTableEntry(HookFactory):
        _name = "CAkBankMgr::ReleaseMediaHashTableEntry"
    class ReleaseSingleMedia(HookFactory):
        _name = "CAkBankMgr::ReleaseSingleMedia"
    class RemoveMediaFromTable(HookFactory):
        _name = "CAkBankMgr::RemoveMediaFromTable"
    class SignalLastBankUnloaded(HookFactory):
        _name = "CAkBankMgr::SignalLastBankUnloaded"
    class Term(HookFactory):
        _name = "CAkBankMgr::Term"
    class TryRemoveMediaFromTable(HookFactory):
        _name = "CAkBankMgr::TryRemoveMediaFromTable"
    class UnPrepareAllBank(HookFactory):
        _name = "CAkBankMgr::UnPrepareAllBank"
    class UnPrepareMedia(HookFactory):
        _name = "CAkBankMgr::UnPrepareMedia"
    class UnloadAll(HookFactory):
        _name = "CAkBankMgr::UnloadAll"
    class UnloadBankPre(HookFactory):
        _name = "CAkBankMgr::UnloadBankPre"
    class UnloadMedia(HookFactory):
        _name = "CAkBankMgr::UnloadMedia"
    class UnprepareEvent(HookFactory):
        _name = "CAkBankMgr::UnprepareEvent"
    class UnprepareEventInternal(HookFactory):
        _name = "CAkBankMgr::UnprepareEventInternal"
    class UnprepareSingleMedia(HookFactory):
        _name = "CAkBankMgr::UnprepareSingleMedia"
    class WaitForSyncOp(HookFactory):
        _name = "CAkBankMgr::WaitForSyncOp"

class AkMediaEntry:
    class AddAlternateSource(HookFactory):
        _name = "AkMediaEntry::AddAlternateSource"
    class RemoveAlternateSourceWithoutSlot(HookFactory):
        _name = "AkMediaEntry::RemoveAlternateSourceWithoutSlot"

class AkFileNameString:
    class Copy(HookFactory):
        _name = "AkFileNameString::Copy"
        _overload: overloads.AkFileNameString.Copy.overloads = "AkFileNameString *, const char *, const char *"
        @classmethod
        def overload(cls, overload_args: overloads.AkFileNameString.Copy.overloads):
            cls._overload = overload_args
            return cls
    class Set(HookFactory):
        _name = "AkFileNameString::Set"
    class Term(HookFactory):
        _name = "AkFileNameString::Term"

class CAkBus:
    class GetDeviceShareset(HookFactory):
        _name = "CAkBus::GetDeviceShareset"
    class CAkBus(HookFactory):
        _name = "CAkBus::CAkBus"
    class AddChildInternal(HookFactory):
        _name = "CAkBus::AddChildInternal"
    class AddStateGroup(HookFactory):
        _name = "CAkBus::AddStateGroup"
    class ApplyMaxNumInstances(HookFactory):
        _name = "CAkBus::ApplyMaxNumInstances"
    class BackgroundMusic_Unmute(HookFactory):
        _name = "CAkBus::BackgroundMusic_Unmute"
    class CanAddChild(HookFactory):
        _name = "CAkBus::CanAddChild"
    class Children(HookFactory):
        _name = "CAkBus::Children"
    class ClampWindowTop(HookFactory):
        _name = "CAkBus::ClampWindowTop"
    class ClearLimiters(HookFactory):
        _name = "CAkBus::ClearLimiters"
    class Create(HookFactory):
        _name = "CAkBus::Create"
    class DecrementActivityCount(HookFactory):
        _name = "CAkBus::DecrementActivityCount"
    class DecrementPlayCount(HookFactory):
        _name = "CAkBus::DecrementPlayCount"
    class Duck(HookFactory):
        _name = "CAkBus::Duck"
    class DuckNotif(HookFactory):
        _name = "CAkBus::DuckNotif"
    class ExecuteAction(HookFactory):
        _name = "CAkBus::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkBus::ExecuteActionExcept"
    class ExecuteMasterBusAction(HookFactory):
        _name = "CAkBus::ExecuteMasterBusAction"
    class ExecuteMasterBusActionExcept(HookFactory):
        _name = "CAkBus::ExecuteMasterBusActionExcept"
    class ForAllPBI(HookFactory):
        _name = "CAkBus::ForAllPBI"
    class GetAudioParameters(HookFactory):
        _name = "CAkBus::GetAudioParameters"
    class GetBypassAllFX(HookFactory):
        _name = "CAkBus::GetBypassAllFX"
    class GetControlBusParams(HookFactory):
        _name = "CAkBus::GetControlBusParams"
    class GetDuckedVolume(HookFactory):
        _name = "CAkBus::GetDuckedVolume"
    class GetFX(HookFactory):
        _name = "CAkBus::GetFX"
    class GetFXDataID(HookFactory):
        _name = "CAkBus::GetFXDataID"
    class GetGameParamID(HookFactory):
        _name = "CAkBus::GetGameParamID"
    class GetMixerPlugin(HookFactory):
        _name = "CAkBus::GetMixerPlugin"
    class GetMixerPluginDataID(HookFactory):
        _name = "CAkBus::GetMixerPluginDataID"
    class GetMixingBus(HookFactory):
        _name = "CAkBus::GetMixingBus"
    class GetMixingBusParameters(HookFactory):
        _name = "CAkBus::GetMixingBusParameters"
    class GetNonMixingBusParameters(HookFactory):
        _name = "CAkBus::GetNonMixingBusParameters"
    class GetSIS(HookFactory):
        _name = "CAkBus::GetSIS"
    class GetStateSyncTypes(HookFactory):
        _name = "CAkBus::GetStateSyncTypes"
    class IncrementActivityCount(HookFactory):
        _name = "CAkBus::IncrementActivityCount"
    class IncrementPlayCount(HookFactory):
        _name = "CAkBus::IncrementPlayCount"
    class IsBackgroundMusicMuted(HookFactory):
        _name = "CAkBus::IsBackgroundMusicMuted"
    class IsMixingBus(HookFactory):
        _name = "CAkBus::IsMixingBus"
    class IsOrIsChildOf(HookFactory):
        _name = "CAkBus::IsOrIsChildOf"
    class IsTopBus(HookFactory):
        _name = "CAkBus::IsTopBus"
    class Mute(HookFactory):
        _name = "CAkBus::Mute"
    class MuteBackgroundMusic(HookFactory):
        _name = "CAkBus::MuteBackgroundMusic"
    class MuteNotification(HookFactory):
        _name = "CAkBus::MuteNotification"
    class NotifyBypass(HookFactory):
        _name = "CAkBus::NotifyBypass"
    class NotifyParamChanged(HookFactory):
        _name = "CAkBus::NotifyParamChanged"
    class NotifyParamsChanged(HookFactory):
        _name = "CAkBus::NotifyParamsChanged"
    class ParamNotification(HookFactory):
        _name = "CAkBus::ParamNotification"
    class PlayToEnd(HookFactory):
        _name = "CAkBus::PlayToEnd"
    class PositioningChangeNotification(HookFactory):
        _name = "CAkBus::PositioningChangeNotification"
    class PropagatePositioningNotification(HookFactory):
        _name = "CAkBus::PropagatePositioningNotification"
    class PushParamUpdate(HookFactory):
        _name = "CAkBus::PushParamUpdate"
    class RecalcNotification(HookFactory):
        _name = "CAkBus::RecalcNotification"
    class RemoveChild(HookFactory):
        _name = "CAkBus::RemoveChild"
    class RemoveStateGroup(HookFactory):
        _name = "CAkBus::RemoveStateGroup"
    class ReplaceTopBusSharesets(HookFactory):
        _name = "CAkBus::ReplaceTopBusSharesets"
    class SetAkProp(HookFactory):
        _name = "CAkBus::SetAkProp"
        _overload: overloads.CAkBus.SetAkProp.overloads = "CAkBus *, AkPropID, float, float"
        @classmethod
        def overload(cls, overload_args: overloads.CAkBus.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetBusDevice(HookFactory):
        _name = "CAkBus::SetBusDevice"
    class SetInitialFxParams(HookFactory):
        _name = "CAkBus::SetInitialFxParams"
    class SetInitialMetadataParams(HookFactory):
        _name = "CAkBus::SetInitialMetadataParams"
    class SetInitialParams(HookFactory):
        _name = "CAkBus::SetInitialParams"
    class SetInitialValues(HookFactory):
        _name = "CAkBus::SetInitialValues"
    class SetMixerPlugin(HookFactory):
        _name = "CAkBus::SetMixerPlugin"
    class SetRTPC(HookFactory):
        _name = "CAkBus::SetRTPC"
    class SetStateProperties(HookFactory):
        _name = "CAkBus::SetStateProperties"
    class StartDuckTransitions(HookFactory):
        _name = "CAkBus::StartDuckTransitions"
    class TriggerModulators(HookFactory):
        _name = "CAkBus::TriggerModulators"
    class Unmute(HookFactory):
        _name = "CAkBus::Unmute"
    class UnmuteAll(HookFactory):
        _name = "CAkBus::UnmuteAll"
    class UnmuteBackgroundMusic(HookFactory):
        _name = "CAkBus::UnmuteBackgroundMusic"
    class UnsetRTPC(HookFactory):
        _name = "CAkBus::UnsetRTPC"
    class UpdateDuckedBus(HookFactory):
        _name = "CAkBus::UpdateDuckedBus"
    class UpdateFX(HookFactory):
        _name = "CAkBus::UpdateFX"
    class UpdateStateGroups(HookFactory):
        _name = "CAkBus::UpdateStateGroups"
    class GetHdrBallistics(HookFactory):
        _name = "CAkBus::GetHdrBallistics"
    class GetHdrGainComputer(HookFactory):
        _name = "CAkBus::GetHdrGainComputer"

class LogWrongBankVersion(HookFactory):
    _name = "LogWrongBankVersion"

class CAkUsageSlot:
    class Release(HookFactory):
        _name = "CAkUsageSlot::Release"
    class ReleasePrepare(HookFactory):
        _name = "CAkUsageSlot::ReleasePrepare"
    class RemoveContent(HookFactory):
        _name = "CAkUsageSlot::RemoveContent"
    class UnloadCompletionNotification(HookFactory):
        _name = "CAkUsageSlot::UnloadCompletionNotification"

class CAkStateAware:
    class CAkStateAware(HookFactory):
        _name = "CAkStateAware::CAkStateAware"
    class AddStateGroup(HookFactory):
        _name = "CAkStateAware::AddStateGroup"
    class CheckSyncTypes(HookFactory):
        _name = "CAkStateAware::CheckSyncTypes"
    class FlushStateTransitions(HookFactory):
        _name = "CAkStateAware::FlushStateTransitions"
    class HasState(HookFactory):
        _name = "CAkStateAware::HasState"
    class IsStateProperty(HookFactory):
        _name = "CAkStateAware::IsStateProperty"
    class NotifyStateParametersModified(HookFactory):
        _name = "CAkStateAware::NotifyStateParametersModified"
    class PauseTransitions(HookFactory):
        _name = "CAkStateAware::PauseTransitions"
    class ReadStateChunk(HookFactory):
        _name = "CAkStateAware::ReadStateChunk"
    class RemoveStateGroup(HookFactory):
        _name = "CAkStateAware::RemoveStateGroup"
    class RemoveStateGroups(HookFactory):
        _name = "CAkStateAware::RemoveStateGroups"
    class SetStateProperties(HookFactory):
        _name = "CAkStateAware::SetStateProperties"
    class UpdateStateGroups(HookFactory):
        _name = "CAkStateAware::UpdateStateGroups"
    class UseState(HookFactory):
        _name = "CAkStateAware::UseState"

class AkStateGroupChunk:
    class AddState(HookFactory):
        _name = "AkStateGroupChunk::AddState"
    class FlushStateTransitions(HookFactory):
        _name = "AkStateGroupChunk::FlushStateTransitions"
    class GetState(HookFactory):
        _name = "AkStateGroupChunk::GetState"
    class RemoveState(HookFactory):
        _name = "AkStateGroupChunk::RemoveState"
    class TransUpdateValue(HookFactory):
        _name = "AkStateGroupChunk::TransUpdateValue"

class CAkPBIAware:
    class CreatePBI(HookFactory):
        _name = "CAkPBIAware::CreatePBI"

class CreateDelayedAction(HookFactory):
    _name = "CreateDelayedAction"

class CreateDelayedPendingAction(HookFactory):
    _name = "CreateDelayedPendingAction"

class AkTimeConv__SecondsToSamples(HookFactory):
    _name = "AkTimeConv__SecondsToSamples"

class CAkModulatorData:
    class CAkModulatorData(HookFactory):
        _name = "CAkModulatorData::CAkModulatorData"
    class AllocData(HookFactory):
        _name = "CAkModulatorData::AllocData"

class CAkModulatorPBIData:
    class AddModulationSource(HookFactory):
        _name = "CAkModulatorPBIData::AddModulationSource"
    class ClearModulationSources(HookFactory):
        _name = "CAkModulatorPBIData::ClearModulationSources"
    class GetBufferList(HookFactory):
        _name = "CAkModulatorPBIData::GetBufferList"
    class GetCtrlRateOutput(HookFactory):
        _name = "CAkModulatorPBIData::GetCtrlRateOutput"
    class GetModulatorCtxs(HookFactory):
        _name = "CAkModulatorPBIData::GetModulatorCtxs"
    class GetNumAutomatedModulators(HookFactory):
        _name = "CAkModulatorPBIData::GetNumAutomatedModulators"
    class GetPeakOutput(HookFactory):
        _name = "CAkModulatorPBIData::GetPeakOutput"
    class HasModulationSource(HookFactory):
        _name = "CAkModulatorPBIData::HasModulationSource"
    class Pause(HookFactory):
        _name = "CAkModulatorPBIData::Pause"
    class Resume(HookFactory):
        _name = "CAkModulatorPBIData::Resume"
    class Term(HookFactory):
        _name = "CAkModulatorPBIData::Term"
    class TriggerRelease(HookFactory):
        _name = "CAkModulatorPBIData::TriggerRelease"

class CAkModCtxRefContainer:
    class HasModulatorCtx(HookFactory):
        _name = "CAkModCtxRefContainer::HasModulatorCtx"
    class Release(HookFactory):
        _name = "CAkModCtxRefContainer::Release"

class CAkSwitchAware:
    class CAkSwitchAware(HookFactory):
        _name = "CAkSwitchAware::CAkSwitchAware"
    class GetSwitchToUse(HookFactory):
        _name = "CAkSwitchAware::GetSwitchToUse"
    class SubscribeSwitch(HookFactory):
        _name = "CAkSwitchAware::SubscribeSwitch"
    class UnsubscribeSwitches(HookFactory):
        _name = "CAkSwitchAware::UnsubscribeSwitches"

class CAkEmitter:
    class CAkEmitter(HookFactory):
        _name = "CAkEmitter::CAkEmitter"
    class SetMultipleObstructionAndOcclusion(HookFactory):
        _name = "CAkEmitter::SetMultipleObstructionAndOcclusion"
    class SetObjectObstructionAndOcclusion(HookFactory):
        _name = "CAkEmitter::SetObjectObstructionAndOcclusion"
    class SetPosition(HookFactory):
        _name = "CAkEmitter::SetPosition"
    class UpdateCachedPositions(HookFactory):
        _name = "CAkEmitter::UpdateCachedPositions"

class CAkModifiedNodes:
    class CAkModifiedNodes(HookFactory):
        _name = "CAkModifiedNodes::CAkModifiedNodes"
    class SetNodeAsModified(HookFactory):
        _name = "CAkModifiedNodes::SetNodeAsModified"

class CAkRegisteredObj:
    class GetConnectedListeners(HookFactory):
        _name = "CAkRegisteredObj::GetConnectedListeners"
    class GetListeners(HookFactory):
        _name = "CAkRegisteredObj::GetListeners"
    class GetNumEmitterListenerPairs(HookFactory):
        _name = "CAkRegisteredObj::GetNumEmitterListenerPairs"
    class UpdateBuiltIn(HookFactory):
        _name = "CAkRegisteredObj::UpdateBuiltIn"

class CurrentValue:
    class GetModulatorOutput(HookFactory):
        _name = "CurrentValue::GetModulatorOutput"
    class ModulatorSupportsAutomatedParams(HookFactory):
        _name = "CurrentValue::ModulatorSupportsAutomatedParams"

class GetNumberOfRTPC(HookFactory):
    _name = "GetNumberOfRTPC"

class CAkIndexable:
    class CAkIndexable(HookFactory):
        _name = "CAkIndexable::CAkIndexable"

class CAkPreparationAware:
    class GetPreparedContent(HookFactory):
        _name = "CAkPreparationAware::GetPreparedContent"
    class SubscribePrepare(HookFactory):
        _name = "CAkPreparationAware::SubscribePrepare"
    class UnsubscribePrepare(HookFactory):
        _name = "CAkPreparationAware::UnsubscribePrepare"

class AkDecisionTree:
    class AkDecisionTree(HookFactory):
        _name = "AkDecisionTree::AkDecisionTree"
    class AddCandidate(HookFactory):
        _name = "AkDecisionTree::AddCandidate"
    class GetAudioNodeForState(HookFactory):
        _name = "AkDecisionTree::GetAudioNodeForState"
    class GetSwitchNodeAssoc(HookFactory):
        _name = "AkDecisionTree::GetSwitchNodeAssoc"
    class ResolvePath(HookFactory):
        _name = "AkDecisionTree::ResolvePath"
    class ResolvePathWeighted(HookFactory):
        _name = "AkDecisionTree::ResolvePathWeighted"
    class SetTree(HookFactory):
        _name = "AkDecisionTree::SetTree"
    class _ResolvePath(HookFactory):
        _name = "AkDecisionTree::_ResolvePath"
    class _ResolvePathWeighted(HookFactory):
        _name = "AkDecisionTree::_ResolvePathWeighted"

class CAkSwitchMgr:
    class CAkSwitchMgr(HookFactory):
        _name = "CAkSwitchMgr::CAkSwitchMgr"
    class SwitchingInThisScope:
        class SwitchingInThisScope(HookFactory):
            _name = "CAkSwitchMgr::SwitchingInThisScope::SwitchingInThisScope"
    class AkSwitchEntry:
        class AddRTPC(HookFactory):
            _name = "CAkSwitchMgr::AkSwitchEntry::AddRTPC"
        class SetSwitchFromRTPCMgr(HookFactory):
            _name = "CAkSwitchMgr::AkSwitchEntry::SetSwitchFromRTPCMgr"
        class SetSwitchInternal(HookFactory):
            _name = "CAkSwitchMgr::AkSwitchEntry::SetSwitchInternal"
    class AddSwitchRTPC(HookFactory):
        _name = "CAkSwitchMgr::AddSwitchRTPC"
    class GetSwitch(HookFactory):
        _name = "CAkSwitchMgr::GetSwitch"
        _overload: overloads.CAkSwitchMgr.GetSwitch.overloads = "CAkSwitchMgr *, unsigned int, const AkRTPCKey *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkSwitchMgr.GetSwitch.overloads):
            cls._overload = overload_args
            return cls
    class GetSwitchEntry(HookFactory):
        _name = "CAkSwitchMgr::GetSwitchEntry"
    class Init(HookFactory):
        _name = "CAkSwitchMgr::Init"
    class RemoveSubscriptionFromEntry(HookFactory):
        _name = "CAkSwitchMgr::RemoveSubscriptionFromEntry"
    class SubscribeSwitch(HookFactory):
        _name = "CAkSwitchMgr::SubscribeSwitch"
    class Term(HookFactory):
        _name = "CAkSwitchMgr::Term"
    class UnSubscribeSwitch(HookFactory):
        _name = "CAkSwitchMgr::UnSubscribeSwitch"
    class UnregisterGameObject(HookFactory):
        _name = "CAkSwitchMgr::UnregisterGameObject"
    class _SubscribeSwitch(HookFactory):
        _name = "CAkSwitchMgr::_SubscribeSwitch"
    class _UnSubscribeSwitch(HookFactory):
        _name = "CAkSwitchMgr::_UnSubscribeSwitch"

class CAkSource:
    class CAkSource(HookFactory):
        _name = "CAkSource::CAkSource"
    class Clone(HookFactory):
        _name = "CAkSource::Clone"
    class LockDataPtr(HookFactory):
        _name = "CAkSource::LockDataPtr"
    class PrepareData(HookFactory):
        _name = "CAkSource::PrepareData"
    class SetSource(HookFactory):
        _name = "CAkSource::SetSource"
        _overload: overloads.CAkSource.SetSource.overloads = "CAkSource *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkSource.SetSource.overloads):
            cls._overload = overload_args
            return cls
    class UnLockDataPtr(HookFactory):
        _name = "CAkSource::UnLockDataPtr"
    class UnPrepareData(HookFactory):
        _name = "CAkSource::UnPrepareData"

class CAkMidiClipCtx:
    class CAkMidiClipCtx(HookFactory):
        _name = "CAkMidiClipCtx::CAkMidiClipCtx"
    class CheckIsMuted(HookFactory):
        _name = "CAkMidiClipCtx::CheckIsMuted"
    class GetAbsoluteStop(HookFactory):
        _name = "CAkMidiClipCtx::GetAbsoluteStop"
    class GetCCEvents(HookFactory):
        _name = "CAkMidiClipCtx::GetCCEvents"
    class GetMidiMgr(HookFactory):
        _name = "CAkMidiClipCtx::GetMidiMgr"
    class GetTargetedParamsSet(HookFactory):
        _name = "CAkMidiClipCtx::GetTargetedParamsSet"
    class GetTrackID(HookFactory):
        _name = "CAkMidiClipCtx::GetTrackID"
    class Init(HookFactory):
        _name = "CAkMidiClipCtx::Init"
    class IsUsingThisSlot(HookFactory):
        _name = "CAkMidiClipCtx::IsUsingThisSlot"
    class MuteNotification(HookFactory):
        _name = "CAkMidiClipCtx::MuteNotification"
    class OnFrame(HookFactory):
        _name = "CAkMidiClipCtx::OnFrame"
    class OnLastFrame(HookFactory):
        _name = "CAkMidiClipCtx::OnLastFrame"
    class OnPaused(HookFactory):
        _name = "CAkMidiClipCtx::OnPaused"
    class OnResumed(HookFactory):
        _name = "CAkMidiClipCtx::OnResumed"
    class RelocateMedia(HookFactory):
        _name = "CAkMidiClipCtx::RelocateMedia"
    class ResolveMidiTarget(HookFactory):
        _name = "CAkMidiClipCtx::ResolveMidiTarget"
    class VirtualAddRef(HookFactory):
        _name = "CAkMidiClipCtx::VirtualAddRef"
    class VirtualRelease(HookFactory):
        _name = "CAkMidiClipCtx::VirtualRelease"

class CAkSequenceInfo:
    class CAkSequenceInfo(HookFactory):
        _name = "CAkSequenceInfo::CAkSequenceInfo"
    class Clone(HookFactory):
        _name = "CAkSequenceInfo::Clone"
    class DeserializeHistory(HookFactory):
        _name = "CAkSequenceInfo::DeserializeHistory"

class CAkAudioThread:
    class CAkAudioThread(HookFactory):
        _name = "CAkAudioThread::CAkAudioThread"
    class EventMgrThreadFunc(HookFactory):
        _name = "CAkAudioThread::EventMgrThreadFunc"
    class Start(HookFactory):
        _name = "CAkAudioThread::Start"
    class Stop(HookFactory):
        _name = "CAkAudioThread::Stop"
    class WakeupEventsConsumer(HookFactory):
        _name = "CAkAudioThread::WakeupEventsConsumer"

class AkPipelineChannelMappingFunc(HookFactory):
    _name = "AkPipelineChannelMappingFunc"

class AkVorbisChannelMappingFunc(HookFactory):
    _name = "AkVorbisChannelMappingFunc"

class AkWaveChannelMappingFunc(HookFactory):
    _name = "AkWaveChannelMappingFunc"

class AkPipelineBufferBase:
    class ClearFreeListBuckets(HookFactory):
        _name = "AkPipelineBufferBase::ClearFreeListBuckets"
    class GetCachedBuffer(HookFactory):
        _name = "AkPipelineBufferBase::GetCachedBuffer"
    class InitFreeListBuckets(HookFactory):
        _name = "AkPipelineBufferBase::InitFreeListBuckets"
    class ReleaseCachedBuffer(HookFactory):
        _name = "AkPipelineBufferBase::ReleaseCachedBuffer"

class ComputeFiltering3D_Template(HookFactory):
    _templates = ("T0", )
    _name = "ComputeFiltering3D_Template<{T0}>"

class ComputeVolumeRays_Template(HookFactory):
    _templates = ("T0", )
    _name = "ComputeVolumeRays_Template<{T0}>"

class CAkListener:
    class CAkListener(HookFactory):
        _name = "CAkListener::CAkListener"
    class Apply3dTransforms(HookFactory):
        _name = "CAkListener::Apply3dTransforms"
    class ComputeFiltering3D(HookFactory):
        _name = "CAkListener::ComputeFiltering3D"
    class ComputeRayDistanceAndAngles(HookFactory):
        _name = "CAkListener::ComputeRayDistanceAndAngles"
    class ComputeRayWeightsCorrection(HookFactory):
        _name = "CAkListener::ComputeRayWeightsCorrection"
    class ComputeSphericalCoordinates(HookFactory):
        _name = "CAkListener::ComputeSphericalCoordinates"
    class ComputeVolumeRays(HookFactory):
        _name = "CAkListener::ComputeVolumeRays"
    class GatherRays(HookFactory):
        _name = "CAkListener::GatherRays"
    class GetListenerData(HookFactory):
        _name = "CAkListener::GetListenerData"
    class GetListenerMatrix(HookFactory):
        _name = "CAkListener::GetListenerMatrix"
    class GetListenerSpatialization(HookFactory):
        _name = "CAkListener::GetListenerSpatialization"
    class Init(HookFactory):
        _name = "CAkListener::Init"
    class MultiDirectionGainCorrectionForObjects(HookFactory):
        _name = "CAkListener::MultiDirectionGainCorrectionForObjects"
    class OnBeginFrame(HookFactory):
        _name = "CAkListener::OnBeginFrame"
    class ResetListenerData(HookFactory):
        _name = "CAkListener::ResetListenerData"
    class SetPosition(HookFactory):
        _name = "CAkListener::SetPosition"
    class SetScalingFactor(HookFactory):
        _name = "CAkListener::SetScalingFactor"
    class SetTransform(HookFactory):
        _name = "CAkListener::SetTransform"
    class Term(HookFactory):
        _name = "CAkListener::Term"

class SpeakerVolumeMatrixCallback:
    class operator(HookFactory):
        _name = "SpeakerVolumeMatrixCallback::operator"

class CAkModulatorMgr:
    class CAkModulatorMgr(HookFactory):
        _name = "CAkModulatorMgr::CAkModulatorMgr"
    class AddSubscription(HookFactory):
        _name = "CAkModulatorMgr::AddSubscription"
    class CleanUpFinishedCtxs(HookFactory):
        _name = "CAkModulatorMgr::CleanUpFinishedCtxs"
    class GetCurrentModulatorOutput(HookFactory):
        _name = "CAkModulatorMgr::GetCurrentModulatorOutput"
    class GetModulators(HookFactory):
        _name = "CAkModulatorMgr::GetModulators"
    class GetParamXfrm(HookFactory):
        _name = "CAkModulatorMgr::GetParamXfrm"
    class Init(HookFactory):
        _name = "CAkModulatorMgr::Init"
    class ProcessModulators(HookFactory):
        _name = "CAkModulatorMgr::ProcessModulators"
    class RemoveSubscription(HookFactory):
        _name = "CAkModulatorMgr::RemoveSubscription"
    class RemovedScopedRtpcObj(HookFactory):
        _name = "CAkModulatorMgr::RemovedScopedRtpcObj"
    class SupportsAutomatedParams(HookFactory):
        _name = "CAkModulatorMgr::SupportsAutomatedParams"
    class Term(HookFactory):
        _name = "CAkModulatorMgr::Term"
    class TermModulatorEngine(HookFactory):
        _name = "CAkModulatorMgr::TermModulatorEngine"
    class Trigger(HookFactory):
        _name = "CAkModulatorMgr::Trigger"
        _overload: overloads.CAkModulatorMgr.Trigger.overloads = "CAkModulatorMgr *, const AkModulatorSubscriberInfo *, const AkModulatorTriggerParams *, CAkModulatorData *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkModulatorMgr.Trigger.overloads):
            cls._overload = overload_args
            return cls

class CAkModulator:
    class AddSubscription(HookFactory):
        _name = "CAkModulator::AddSubscription"
    class AddRef(HookFactory):
        _name = "CAkModulator::AddRef"
    class Create(HookFactory):
        _name = "CAkModulator::Create"
    class GetCurrentOutput(HookFactory):
        _name = "CAkModulator::GetCurrentOutput"
    class ModCtx_MarkFinishedAndRelease(HookFactory):
        _name = "CAkModulator::ModCtx_MarkFinishedAndRelease"
    class ModCtx_NotifySubscribers(HookFactory):
        _name = "CAkModulator::ModCtx_NotifySubscribers"
    class ModCtx_SetParam(HookFactory):
        _name = "CAkModulator::ModCtx_SetParam"
    class NotifySubscribers(HookFactory):
        _name = "CAkModulator::NotifySubscribers"
    class Release(HookFactory):
        _name = "CAkModulator::Release"
    class RemoveCtxsMatchingKey(HookFactory):
        _name = "CAkModulator::RemoveCtxsMatchingKey"
    class SetInitialValues(HookFactory):
        _name = "CAkModulator::SetInitialValues"
    class SetParamFromRTPCMgr(HookFactory):
        _name = "CAkModulator::SetParamFromRTPCMgr"
    class StopWhenFinished(HookFactory):
        _name = "CAkModulator::StopWhenFinished"
    class ToggleRTPCSubscription(HookFactory):
        _name = "CAkModulator::ToggleRTPCSubscription"
    class Trigger(HookFactory):
        _name = "CAkModulator::Trigger"
    class _Trigger(HookFactory):
        _name = "CAkModulator::_Trigger"

class AkModulatorTriggerParams:
    class GetRTPCKey(HookFactory):
        _name = "AkModulatorTriggerParams::GetRTPCKey"

class AkFileParser:
    class Parse(HookFactory):
        _name = "AkFileParser::Parse"

class CAkSpeakerPan:
    class ContractPoints(HookFactory):
        _templates = ("T0", )
        _name = "CAkSpeakerPan::ContractPoints<{T0}>"
    class AddHeadphonePower(HookFactory):
        _name = "CAkSpeakerPan::AddHeadphonePower"
    class AddPowerVbap2d(HookFactory):
        _name = "CAkSpeakerPan::AddPowerVbap2d"
    class ComputeDecoderMatrix(HookFactory):
        _name = "CAkSpeakerPan::ComputeDecoderMatrix"
    class ConvertSpeakerAngles(HookFactory):
        _name = "CAkSpeakerPan::ConvertSpeakerAngles"
    class ConvertSpeakerAnglesToRad(HookFactory):
        _name = "CAkSpeakerPan::ConvertSpeakerAnglesToRad"
    class CreatePanCache2D(HookFactory):
        _name = "CAkSpeakerPan::CreatePanCache2D"
    class CreatePanCache(HookFactory):
        _name = "CAkSpeakerPan::CreatePanCache"
    class EncodeToAmbisonics(HookFactory):
        _name = "CAkSpeakerPan::EncodeToAmbisonics"
    class EncodeVector(HookFactory):
        _name = "CAkSpeakerPan::EncodeVector"
    class GetReWeights(HookFactory):
        _name = "CAkSpeakerPan::GetReWeights"
    class GetSampledHarmonics3D(HookFactory):
        _name = "CAkSpeakerPan::GetSampledHarmonics3D"
    class Init(HookFactory):
        _name = "CAkSpeakerPan::Init"
    class SetSpeakerAngles(HookFactory):
        _name = "CAkSpeakerPan::SetSpeakerAngles"
    class Term(HookFactory):
        _name = "CAkSpeakerPan::Term"
    class ValidateSpeakerAngles(HookFactory):
        _name = "CAkSpeakerPan::ValidateSpeakerAngles"
    class _ComputeSN3DphericalHarmonics(HookFactory):
        _name = "CAkSpeakerPan::_ComputeSN3DphericalHarmonics"

class RotateAndContractPointsSIMD_ContractInside_(HookFactory):
    _name = "RotateAndContractPointsSIMD_ContractInside_"

class RotateAndContractPointsSIMD_ContractOutside_(HookFactory):
    _name = "RotateAndContractPointsSIMD_ContractOutside_"

class CopyRotatedCopiesOntoChannels(HookFactory):
    _name = "CopyRotatedCopiesOntoChannels"

class DownmixGridToChannels(HookFactory):
    _name = "DownmixGridToChannels"

class GenPointsForZeroSpread(HookFactory):
    _name = "GenPointsForZeroSpread"

class SpeakerPan:
    class MultiDirection:
        class GetMultiDirObjectNormalizationGains(HookFactory):
            _name = "SpeakerPan::MultiDirection::GetMultiDirObjectNormalizationGains"
    class Steering:
        class Steer(HookFactory):
            _name = "SpeakerPan::Steering::Steer"

class GetSampledHarmonics2D(HookFactory):
    _name = "GetSampledHarmonics2D"

class RotateAndContractPointsWithRotationSIMD(HookFactory):
    _name = "RotateAndContractPointsWithRotationSIMD"

class RotateAndContractPointsWithRotationScalar(HookFactory):
    _name = "RotateAndContractPointsWithRotationScalar"

class TransformSampledSphereNoSpread(HookFactory):
    _name = "TransformSampledSphereNoSpread"

class TransformSampledSphereSIMD(HookFactory):
    _name = "TransformSampledSphereSIMD"

class AkUnion_unsigned___int64_AkHybridAllocator_8_16_4__AkGrowByPolicy_Proportional_(HookFactory):
    _name = "AkUnion_unsigned___int64_AkHybridAllocator_8_16_4__AkGrowByPolicy_Proportional_"

class CAkOutputMgr:
    class AddOutputCaptureMarker(HookFactory):
        _name = "CAkOutputMgr::AddOutputCaptureMarker"
    class AddOutputDevice(HookFactory):
        _name = "CAkOutputMgr::AddOutputDevice"
    class CallSinkCallback(HookFactory):
        _name = "CAkOutputMgr::CallSinkCallback"
    class EnableMeteringCallback(HookFactory):
        _name = "CAkOutputMgr::EnableMeteringCallback"
    class EndOfFrame(HookFactory):
        _name = "CAkOutputMgr::EndOfFrame"
    class FindDevice(HookFactory):
        _name = "CAkOutputMgr::FindDevice"
    class FindDeviceOfType(HookFactory):
        _name = "CAkOutputMgr::FindDeviceOfType"
    class GetDevice(HookFactory):
        _name = "CAkOutputMgr::GetDevice"
        _overload: overloads.CAkOutputMgr.GetDevice.overloads = "unsigned int, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkOutputMgr.GetDevice.overloads):
            cls._overload = overload_args
            return cls
    class GetPrimaryDevice(HookFactory):
        _name = "CAkOutputMgr::GetPrimaryDevice"
    class Init(HookFactory):
        _name = "CAkOutputMgr::Init"
    class InitMainDevice(HookFactory):
        _name = "CAkOutputMgr::InitMainDevice"
    class IsDataNeeded(HookFactory):
        _name = "CAkOutputMgr::IsDataNeeded"
    class ManageDevicesState(HookFactory):
        _name = "CAkOutputMgr::ManageDevicesState"
    class RemoveOutputDevice(HookFactory):
        _name = "CAkOutputMgr::RemoveOutputDevice"
    class RenderIsActive(HookFactory):
        _name = "CAkOutputMgr::RenderIsActive"
    class ReplaceDevice(HookFactory):
        _name = "CAkOutputMgr::ReplaceDevice"
    class ResetMainDevice(HookFactory):
        _name = "CAkOutputMgr::ResetMainDevice"
    class SetDeviceSuspended(HookFactory):
        _name = "CAkOutputMgr::SetDeviceSuspended"
    class StartOutputCapture(HookFactory):
        _name = "CAkOutputMgr::StartOutputCapture"
    class StartSilentMode(HookFactory):
        _name = "CAkOutputMgr::StartSilentMode"
    class StopOutputCapture(HookFactory):
        _name = "CAkOutputMgr::StopOutputCapture"
    class SuspendedThread(HookFactory):
        _name = "CAkOutputMgr::SuspendedThread"
    class Term(HookFactory):
        _name = "CAkOutputMgr::Term"
    class UnsetListenersOnDevice(HookFactory):
        _name = "CAkOutputMgr::UnsetListenersOnDevice"
    class _AddOutputDevice(HookFactory):
        _name = "CAkOutputMgr::_AddOutputDevice"

class CAkInsertFXContext:
    class GlobalContext(HookFactory):
        _name = "CAkInsertFXContext::GlobalContext"
    class CAkInsertFXContext(HookFactory):
        _name = "CAkInsertFXContext::CAkInsertFXContext"
    class GetOutputObjects(HookFactory):
        _name = "CAkInsertFXContext::GetOutputObjects"
    class GetParentChannelConfig(HookFactory):
        _name = "CAkInsertFXContext::GetParentChannelConfig"
    class GetPluginMedia(HookFactory):
        _name = "CAkInsertFXContext::GetPluginMedia"
    class GetVoiceInfo(HookFactory):
        _name = "CAkInsertFXContext::GetVoiceInfo"
    class Init(HookFactory):
        _name = "CAkInsertFXContext::Init"

class ReplaceIDForDefaultDevice(HookFactory):
    _name = "ReplaceIDForDefaultDevice"

class CAkWinDeviceCache:
    class AddNotif(HookFactory):
        _name = "CAkWinDeviceCache::AddNotif"
    class AddRef(HookFactory):
        _name = "CAkWinDeviceCache::AddRef"
    class Count(HookFactory):
        _name = "CAkWinDeviceCache::Count"
    class Create(HookFactory):
        _name = "CAkWinDeviceCache::Create"
    class EnumDevices(HookFactory):
        _name = "CAkWinDeviceCache::EnumDevices"
    class FindDevice(HookFactory):
        _name = "CAkWinDeviceCache::FindDevice"
    class FindDeviceIdx(HookFactory):
        _name = "CAkWinDeviceCache::FindDeviceIdx"
    class GetDefault(HookFactory):
        _name = "CAkWinDeviceCache::GetDefault"
    class IsDeviceActive(HookFactory):
        _name = "CAkWinDeviceCache::IsDeviceActive"
    class Item(HookFactory):
        _name = "CAkWinDeviceCache::Item"
    class Lock(HookFactory):
        _name = "CAkWinDeviceCache::Lock"
    class OnDefaultDeviceChanged(HookFactory):
        _name = "CAkWinDeviceCache::OnDefaultDeviceChanged"
    class OnDeviceAdded(HookFactory):
        _name = "CAkWinDeviceCache::OnDeviceAdded"
    class OnDeviceRemoved(HookFactory):
        _name = "CAkWinDeviceCache::OnDeviceRemoved"
    class OnDeviceStateChanged(HookFactory):
        _name = "CAkWinDeviceCache::OnDeviceStateChanged"
    class OnPropertyValueChanged(HookFactory):
        _name = "CAkWinDeviceCache::OnPropertyValueChanged"
    class ProcessDeviceNotif(HookFactory):
        _name = "CAkWinDeviceCache::ProcessDeviceNotif"
    class QueryInterface(HookFactory):
        _name = "CAkWinDeviceCache::QueryInterface"
    class Release(HookFactory):
        _name = "CAkWinDeviceCache::Release"
    class Reset(HookFactory):
        _name = "CAkWinDeviceCache::Reset"
    class Unlock(HookFactory):
        _name = "CAkWinDeviceCache::Unlock"

class CAkLEngine:
    class ApplyGlobalSettings(HookFactory):
        _name = "CAkLEngine::ApplyGlobalSettings"
    class GetDefaultOutputSettingsCommon(HookFactory):
        _name = "CAkLEngine::GetDefaultOutputSettingsCommon"
    class GetDefaultPlatformThreadInitSettings(HookFactory):
        _name = "CAkLEngine::GetDefaultPlatformThreadInitSettings"
    class GetNumBufferNeededAndSubmit(HookFactory):
        _name = "CAkLEngine::GetNumBufferNeededAndSubmit"
    class GetPluginDLLFullPath(HookFactory):
        _name = "CAkLEngine::GetPluginDLLFullPath"
    class SetPanningRule(HookFactory):
        _name = "CAkLEngine::SetPanningRule"
    class VPLDestroySource(HookFactory):
        _name = "CAkLEngine::VPLDestroySource"
    class AddSound(HookFactory):
        _name = "CAkLEngine::AddSound"
    class AnalyzeMixingGraph(HookFactory):
        _name = "CAkLEngine::AnalyzeMixingGraph"
    class BusTask(HookFactory):
        _name = "CAkLEngine::BusTask"
    class BypassBusFx(HookFactory):
        _name = "CAkLEngine::BypassBusFx"
    class ConnectSourceToGraph(HookFactory):
        _name = "CAkLEngine::ConnectSourceToGraph"
    class DisconnectMixable(HookFactory):
        _name = "CAkLEngine::DisconnectMixable"
    class DoGraphReeval(HookFactory):
        _name = "CAkLEngine::DoGraphReeval"
    class DropAllEffectsUsingThisMedia(HookFactory):
        _name = "CAkLEngine::DropAllEffectsUsingThisMedia"
    class EnableMeteringCallback(HookFactory):
        _name = "CAkLEngine::EnableMeteringCallback"
    class EnableVolumeCallback(HookFactory):
        _name = "CAkLEngine::EnableVolumeCallback"
    class EnsureVPLExists(HookFactory):
        _name = "CAkLEngine::EnsureVPLExists"
    class FinalizeVoiceProcessing(HookFactory):
        _name = "CAkLEngine::FinalizeVoiceProcessing"
    class GetAuxBus(HookFactory):
        _name = "CAkLEngine::GetAuxBus"
    class GetExistingVPLMixBus(HookFactory):
        _name = "CAkLEngine::GetExistingVPLMixBus"
    class IsParallelProcessingAvailable(HookFactory):
        _name = "CAkLEngine::IsParallelProcessingAvailable"
    class MixBusParamNotification(HookFactory):
        _name = "CAkLEngine::MixBusParamNotification"
    class PositioningChangeNotification(HookFactory):
        _name = "CAkLEngine::PositioningChangeNotification"
    class ProcessGraph(HookFactory):
        _name = "CAkLEngine::ProcessGraph"
    class PushToDevice(HookFactory):
        _name = "CAkLEngine::PushToDevice"
    class ReevaluateGraph(HookFactory):
        _name = "CAkLEngine::ReevaluateGraph"
    class ResetBusVolume(HookFactory):
        _name = "CAkLEngine::ResetBusVolume"
    class ResolveCommandVPL(HookFactory):
        _name = "CAkLEngine::ResolveCommandVPL"
    class RunVPL(HookFactory):
        _name = "CAkLEngine::RunVPL"
    class SoftwareInit(HookFactory):
        _name = "CAkLEngine::SoftwareInit"
    class SoftwarePerform(HookFactory):
        _name = "CAkLEngine::SoftwarePerform"
    class SoftwareTerm(HookFactory):
        _name = "CAkLEngine::SoftwareTerm"
    class SortSiblingVPLs(HookFactory):
        _name = "CAkLEngine::SortSiblingVPLs"
    class SortVPLs(HookFactory):
        _name = "CAkLEngine::SortVPLs"
    class Stop(HookFactory):
        _name = "CAkLEngine::Stop"
    class StopMixBussesUsingThisSlot(HookFactory):
        _name = "CAkLEngine::StopMixBussesUsingThisSlot"
    class UpdateChannelConfig(HookFactory):
        _name = "CAkLEngine::UpdateChannelConfig"
    class UpdateDeviceFX(HookFactory):
        _name = "CAkLEngine::UpdateDeviceFX"
    class UpdateDeviceFXBypassMask(HookFactory):
        _name = "CAkLEngine::UpdateDeviceFXBypassMask"
    class UpdateMixBusFX(HookFactory):
        _name = "CAkLEngine::UpdateMixBusFX"
    class VPLRefreshDepth(HookFactory):
        _name = "CAkLEngine::VPLRefreshDepth"
    class VPLTryConnectSource(HookFactory):
        _name = "CAkLEngine::VPLTryConnectSource"
    class VoiceRangeTask(HookFactory):
        _name = "CAkLEngine::VoiceRangeTask"
    class GetDefaultOutputSettings(HookFactory):
        _name = "CAkLEngine::GetDefaultOutputSettings"
    class GetDefaultPlatformInitSettings(HookFactory):
        _name = "CAkLEngine::GetDefaultPlatformInitSettings"
    class GetPlatformDeviceList(HookFactory):
        _name = "CAkLEngine::GetPlatformDeviceList"
    class Init(HookFactory):
        _name = "CAkLEngine::Init"
    class InitPlatformContext(HookFactory):
        _name = "CAkLEngine::InitPlatformContext"
    class OnThreadEnd(HookFactory):
        _name = "CAkLEngine::OnThreadEnd"
    class OnThreadStart(HookFactory):
        _name = "CAkLEngine::OnThreadStart"
    class Perform(HookFactory):
        _name = "CAkLEngine::Perform"
    class Term(HookFactory):
        _name = "CAkLEngine::Term"
    class TermPlatformContext(HookFactory):
        _name = "CAkLEngine::TermPlatformContext"

class AddVPLToArray(HookFactory):
    _name = "AddVPLToArray"

class AkHdrBus:
    class ComputeHdrAttenuation(HookFactory):
        _name = "AkHdrBus::ComputeHdrAttenuation"
    class NotifyHdrWindowTop(HookFactory):
        _name = "AkHdrBus::NotifyHdrWindowTop"

class AkVPL:
    class Init(HookFactory):
        _name = "AkVPL::Init"

class MixRecordsToOutputs(HookFactory):
    _name = "MixRecordsToOutputs"

class CAkVPL3dMixable:
    class _ComputeVolumeRays(HookFactory):
        _name = "CAkVPL3dMixable::_ComputeVolumeRays"
    class GetEmitterListenerPair(HookFactory):
        _name = "CAkVPL3dMixable::GetEmitterListenerPair"
    class GetGameObjectID(HookFactory):
        _name = "CAkVPL3dMixable::GetGameObjectID"
    class GetGameObjectMultiPositionType(HookFactory):
        _name = "CAkVPL3dMixable::GetGameObjectMultiPositionType"
    class GetGameObjectPosition(HookFactory):
        _name = "CAkVPL3dMixable::GetGameObjectPosition"
    class GetGameObjectScaling(HookFactory):
        _name = "CAkVPL3dMixable::GetGameObjectScaling"
    class GetListenerData(HookFactory):
        _name = "CAkVPL3dMixable::GetListenerData"
    class GetListeners(HookFactory):
        _name = "CAkVPL3dMixable::GetListeners"
    class GetNumEmitterListenerPairs(HookFactory):
        _name = "CAkVPL3dMixable::GetNumEmitterListenerPairs"
    class GetNumGameObjectPositions(HookFactory):
        _name = "CAkVPL3dMixable::GetNumGameObjectPositions"
    class AddOutputBus(HookFactory):
        _name = "CAkVPL3dMixable::AddOutputBus"
    class DisconnectAllInputs(HookFactory):
        _name = "CAkVPL3dMixable::DisconnectAllInputs"
    class GetFirstDirectConnection(HookFactory):
        _name = "CAkVPL3dMixable::GetFirstDirectConnection"
    class GetNumForwardConnectionsToDepth(HookFactory):
        _name = "CAkVPL3dMixable::GetNumForwardConnectionsToDepth"
    class GetVolumes(HookFactory):
        _name = "CAkVPL3dMixable::GetVolumes"
    class ManageAuxSends(HookFactory):
        _name = "CAkVPL3dMixable::ManageAuxSends"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPL3dMixable::ReleaseBuffer"
    class RemoveOutputBus(HookFactory):
        _name = "CAkVPL3dMixable::RemoveOutputBus"
    class SetPreviousSilentOnAllConnections(HookFactory):
        _name = "CAkVPL3dMixable::SetPreviousSilentOnAllConnections"
    class UpdateConnections(HookFactory):
        _name = "CAkVPL3dMixable::UpdateConnections"
    class UpdateHDR(HookFactory):
        _name = "CAkVPL3dMixable::UpdateHDR"

class DeviceEnumHelper:
    class DeviceEnumHelper(HookFactory):
        _name = "DeviceEnumHelper::DeviceEnumHelper"

class CAkWindowsContext:
    class GetDeviceEnum(HookFactory):
        _name = "CAkWindowsContext::GetDeviceEnum"

class CAkRegistryMgr:
    class CAkRegistryMgr(HookFactory):
        _name = "CAkRegistryMgr::CAkRegistryMgr"
    class ClearSwitchHist(HookFactory):
        _name = "CAkRegistryMgr::ClearSwitchHist"
    class EnsureListenersExist(HookFactory):
        _name = "CAkRegistryMgr::EnsureListenersExist"
    class GetActiveGameObjects(HookFactory):
        _name = "CAkRegistryMgr::GetActiveGameObjects"
    class GetObj(HookFactory):
        _name = "CAkRegistryMgr::GetObj"
    class GetObjAndAddref(HookFactory):
        _name = "CAkRegistryMgr::GetObjAndAddref"
    class Init(HookFactory):
        _name = "CAkRegistryMgr::Init"
    class IsGameObjectActive(HookFactory):
        _name = "CAkRegistryMgr::IsGameObjectActive"
    class NotifyListenerPosChanged(HookFactory):
        _name = "CAkRegistryMgr::NotifyListenerPosChanged"
    class RegisterObject(HookFactory):
        _name = "CAkRegistryMgr::RegisterObject"
    class RegisterObjectAsActive(HookFactory):
        _name = "CAkRegistryMgr::RegisterObjectAsActive"
    class ResetListenersToDefault(HookFactory):
        _name = "CAkRegistryMgr::ResetListenersToDefault"
    class SetGameObjectAuxSendValues(HookFactory):
        _name = "CAkRegistryMgr::SetGameObjectAuxSendValues"
    class SetGameObjectOutputBusVolume(HookFactory):
        _name = "CAkRegistryMgr::SetGameObjectOutputBusVolume"
    class SetGameObjectScalingFactor(HookFactory):
        _name = "CAkRegistryMgr::SetGameObjectScalingFactor"
    class SetMultipleObstructionAndOcclusion(HookFactory):
        _name = "CAkRegistryMgr::SetMultipleObstructionAndOcclusion"
    class SetNodeIDAsModified(HookFactory):
        _name = "CAkRegistryMgr::SetNodeIDAsModified"
    class SetObjectObstructionAndOcclusion(HookFactory):
        _name = "CAkRegistryMgr::SetObjectObstructionAndOcclusion"
    class SetPosition(HookFactory):
        _name = "CAkRegistryMgr::SetPosition"
    class SetSwitchDormant(HookFactory):
        _name = "CAkRegistryMgr::SetSwitchDormant"
    class SetSwitchHistItem(HookFactory):
        _name = "CAkRegistryMgr::SetSwitchHistItem"
    class Term(HookFactory):
        _name = "CAkRegistryMgr::Term"
    class UnregisterAll(HookFactory):
        _name = "CAkRegistryMgr::UnregisterAll"
    class UnregisterObject(HookFactory):
        _name = "CAkRegistryMgr::UnregisterObject"
    class UnregisterObjectAsActive(HookFactory):
        _name = "CAkRegistryMgr::UnregisterObjectAsActive"
    class UpdateDefaultListeners(HookFactory):
        _name = "CAkRegistryMgr::UpdateDefaultListeners"
    class UpdateGameObjectPositions(HookFactory):
        _name = "CAkRegistryMgr::UpdateGameObjectPositions"
    class UpdateListeners(HookFactory):
        _name = "CAkRegistryMgr::UpdateListeners"

class CAkDynamicSequence:
    class AddRef(HookFactory):
        _name = "CAkDynamicSequence::AddRef"
    class AllExec(HookFactory):
        _name = "CAkDynamicSequence::AllExec"
    class Break(HookFactory):
        _name = "CAkDynamicSequence::Break"
    class Create(HookFactory):
        _name = "CAkDynamicSequence::Create"
    class CreatePBI(HookFactory):
        _name = "CAkDynamicSequence::CreatePBI"
    class GetNextToPlay(HookFactory):
        _name = "CAkDynamicSequence::GetNextToPlay"
    class GetPauseTimes(HookFactory):
        _name = "CAkDynamicSequence::GetPauseTimes"
    class GetQueuedItem(HookFactory):
        _name = "CAkDynamicSequence::GetQueuedItem"
    class Pause(HookFactory):
        _name = "CAkDynamicSequence::Pause"
    class Play(HookFactory):
        _name = "CAkDynamicSequence::Play"
    class Release(HookFactory):
        _name = "CAkDynamicSequence::Release"
    class Resume(HookFactory):
        _name = "CAkDynamicSequence::Resume"
    class ResumeWaiting(HookFactory):
        _name = "CAkDynamicSequence::ResumeWaiting"
    class Seek(HookFactory):
        _name = "CAkDynamicSequence::Seek"
    class SetGameObject(HookFactory):
        _name = "CAkDynamicSequence::SetGameObject"
    class Stop(HookFactory):
        _name = "CAkDynamicSequence::Stop"
    class UnlockPlaylist(HookFactory):
        _name = "CAkDynamicSequence::UnlockPlaylist"
    class _GetNextToPlay(HookFactory):
        _name = "CAkDynamicSequence::_GetNextToPlay"
    class _PlayNode(HookFactory):
        _name = "CAkDynamicSequence::_PlayNode"
    class _Stop(HookFactory):
        _name = "CAkDynamicSequence::_Stop"

class CAkDialogueEvent:
    class AddRef(HookFactory):
        _name = "CAkDialogueEvent::AddRef"
    class Create(HookFactory):
        _name = "CAkDialogueEvent::Create"
    class FindCustomProp(HookFactory):
        _name = "CAkDialogueEvent::FindCustomProp"
    class Release(HookFactory):
        _name = "CAkDialogueEvent::Release"
    class ResolveArgumentValueNames(HookFactory):
        _name = "CAkDialogueEvent::ResolveArgumentValueNames"
        _overload: overloads.CAkDialogueEvent.ResolveArgumentValueNames.overloads = "CAkDialogueEvent *, const char **, unsigned int *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkDialogueEvent.ResolveArgumentValueNames.overloads):
            cls._overload = overload_args
            return cls
    class SetInitialValues(HookFactory):
        _name = "CAkDialogueEvent::SetInitialValues"

class CAkBusCallbackMgr:
    class CAkBusCallbackMgr(HookFactory):
        _name = "CAkBusCallbackMgr::CAkBusCallbackMgr"
    class DoVolumeCallback(HookFactory):
        _name = "CAkBusCallbackMgr::DoVolumeCallback"
    class IsMeteringCallbackEnabled(HookFactory):
        _name = "CAkBusCallbackMgr::IsMeteringCallbackEnabled"
    class IsVolumeCallbackEnabled(HookFactory):
        _name = "CAkBusCallbackMgr::IsVolumeCallbackEnabled"
    class SetDeviceMeteringCallback(HookFactory):
        _name = "CAkBusCallbackMgr::SetDeviceMeteringCallback"
    class SetMeteringCallback(HookFactory):
        _name = "CAkBusCallbackMgr::SetMeteringCallback"
    class SetVolumeCallback(HookFactory):
        _name = "CAkBusCallbackMgr::SetVolumeCallback"

class AkCaptureFile:
    class AddMarkerData(HookFactory):
        _name = "AkCaptureFile::AddMarkerData"
    class AddOutputCaptureMarker(HookFactory):
        _name = "AkCaptureFile::AddOutputCaptureMarker"
    class PassSampleData(HookFactory):
        _name = "AkCaptureFile::PassSampleData"
    class StopCapture(HookFactory):
        _name = "AkCaptureFile::StopCapture"

class AkCaptureMgr:
    class Instance(HookFactory):
        _name = "AkCaptureMgr::Instance"

class CAkThreadedBankMgr:
    class CAkThreadedBankMgr(HookFactory):
        _name = "CAkThreadedBankMgr::CAkThreadedBankMgr"
    class BankThreadFunc(HookFactory):
        _name = "CAkThreadedBankMgr::BankThreadFunc"
    class CancelCookie(HookFactory):
        _name = "CAkThreadedBankMgr::CancelCookie"
    class Init(HookFactory):
        _name = "CAkThreadedBankMgr::Init"
    class InitSyncOp(HookFactory):
        _name = "CAkThreadedBankMgr::InitSyncOp"
    class KillSlot(HookFactory):
        _name = "CAkThreadedBankMgr::KillSlot"
    class QueueBankCommand(HookFactory):
        _name = "CAkThreadedBankMgr::QueueBankCommand"
    class StopThread(HookFactory):
        _name = "CAkThreadedBankMgr::StopThread"
    class Term(HookFactory):
        _name = "CAkThreadedBankMgr::Term"
    class WaitForSyncOp(HookFactory):
        _name = "CAkThreadedBankMgr::WaitForSyncOp"

class CAkRanSeqCntr:
    class AddNewContListItem(HookFactory):
        _name = "CAkRanSeqCntr::AddNewContListItem"
    class CanPlayPosition(HookFactory):
        _name = "CAkRanSeqCntr::CanPlayPosition"
    class Create(HookFactory):
        _name = "CAkRanSeqCntr::Create"
    class CreatePBI(HookFactory):
        _name = "CAkRanSeqCntr::CreatePBI"
    class CreateRandomInfo(HookFactory):
        _name = "CAkRanSeqCntr::CreateRandomInfo"
    class CreateSequenceInfo(HookFactory):
        _name = "CAkRanSeqCntr::CreateSequenceInfo"
    class DeserializeHistory(HookFactory):
        _name = "CAkRanSeqCntr::DeserializeHistory"
    class DestroySpecificInfo(HookFactory):
        _name = "CAkRanSeqCntr::DestroySpecificInfo"
    class GetExistingRandomInfo(HookFactory):
        _name = "CAkRanSeqCntr::GetExistingRandomInfo"
    class GetExistingSequenceInfo(HookFactory):
        _name = "CAkRanSeqCntr::GetExistingSequenceInfo"
    class GetNextToPlay(HookFactory):
        _name = "CAkRanSeqCntr::GetNextToPlay"
    class GetNextToPlayContinuous(HookFactory):
        _name = "CAkRanSeqCntr::GetNextToPlayContinuous"
    class IsInfiniteLooping(HookFactory):
        _name = "CAkRanSeqCntr::IsInfiniteLooping"
    class PlayInternal(HookFactory):
        _name = "CAkRanSeqCntr::PlayInternal"
    class ResetSpecificInfo(HookFactory):
        _name = "CAkRanSeqCntr::ResetSpecificInfo"
    class SafeResetSpecificInfo(HookFactory):
        _name = "CAkRanSeqCntr::SafeResetSpecificInfo"
    class SelectRandomly(HookFactory):
        _name = "CAkRanSeqCntr::SelectRandomly"
    class SelectSequentially(HookFactory):
        _name = "CAkRanSeqCntr::SelectSequentially"
    class SerializeHistory(HookFactory):
        _name = "CAkRanSeqCntr::SerializeHistory"
    class SetInitialValues(HookFactory):
        _name = "CAkRanSeqCntr::SetInitialValues"
    class SetPlaylistWithoutCheck(HookFactory):
        _name = "CAkRanSeqCntr::SetPlaylistWithoutCheck"
    class TransitionMode(HookFactory):
        _name = "CAkRanSeqCntr::TransitionMode"
    class TransitionTime(HookFactory):
        _name = "CAkRanSeqCntr::TransitionTime"
    class Unregister(HookFactory):
        _name = "CAkRanSeqCntr::Unregister"
    class UpdateNormalAvoidRepeat(HookFactory):
        _name = "CAkRanSeqCntr::UpdateNormalAvoidRepeat"
    class _PlayTrigger(HookFactory):
        _name = "CAkRanSeqCntr::_PlayTrigger"

class CAkVirtualAcousticsMgr:
    class AddAcousticTexture(HookFactory):
        _name = "CAkVirtualAcousticsMgr::AddAcousticTexture"
    class GetAcousticTexture(HookFactory):
        _name = "CAkVirtualAcousticsMgr::GetAcousticTexture"

class CAkVirtualAcoustics:
    class AddRef(HookFactory):
        _name = "CAkVirtualAcoustics::AddRef"
    class Release(HookFactory):
        _name = "CAkVirtualAcoustics::Release"

class CAkAcousticTexture:
    class SetAkProp(HookFactory):
        _name = "CAkAcousticTexture::SetAkProp"

class CAkEnvironmentsMgr:
    class Init(HookFactory):
        _name = "CAkEnvironmentsMgr::Init"
    class SetObsOccCurve(HookFactory):
        _name = "CAkEnvironmentsMgr::SetObsOccCurve"
    class Term(HookFactory):
        _name = "CAkEnvironmentsMgr::Term"

class CAkPositionRepository:
    class AddSource(HookFactory):
        _name = "CAkPositionRepository::AddSource"
    class GetBuffering(HookFactory):
        _name = "CAkPositionRepository::GetBuffering"
    class GetCurrPositions(HookFactory):
        _name = "CAkPositionRepository::GetCurrPositions"
    class Init(HookFactory):
        _name = "CAkPositionRepository::Init"
    class RemovePlayingIDForBuffering(HookFactory):
        _name = "CAkPositionRepository::RemovePlayingIDForBuffering"
    class RemoveSource(HookFactory):
        _name = "CAkPositionRepository::RemoveSource"
    class SetRate(HookFactory):
        _name = "CAkPositionRepository::SetRate"
    class Term(HookFactory):
        _name = "CAkPositionRepository::Term"
    class UpdateBufferingInfo(HookFactory):
        _name = "CAkPositionRepository::UpdateBufferingInfo"
    class UpdatePositionInfo(HookFactory):
        _name = "CAkPositionRepository::UpdatePositionInfo"

class AkCacheGameSyncMon:
    class AddRef(HookFactory):
        _name = "AkCacheGameSyncMon::AddRef"
    class Release(HookFactory):
        _name = "AkCacheGameSyncMon::Release"
    class SetSwitch(HookFactory):
        _name = "AkCacheGameSyncMon::SetSwitch"

class AkCachePinnedFileSet:
    class GatherAndPinFilesInStreamCache(HookFactory):
        _name = "AkCachePinnedFileSet::GatherAndPinFilesInStreamCache"
    class UnpinFilesInStreamCache(HookFactory):
        _name = "AkCachePinnedFileSet::UnpinFilesInStreamCache"
    class UnsetAllGameSyncs(HookFactory):
        _name = "AkCachePinnedFileSet::UnsetAllGameSyncs"

class GetBufferStatusForPinnedFiles(HookFactory):
    _name = "GetBufferStatusForPinnedFiles"

class PinFilesInStreamCache(HookFactory):
    _name = "PinFilesInStreamCache"

class UnpinAllFilesInStreamCache(HookFactory):
    _name = "UnpinAllFilesInStreamCache"

class UnpinFilesInStreamCache(HookFactory):
    _name = "UnpinFilesInStreamCache"

class CAkMidiDeviceMgr:
    class AddCtx(HookFactory):
        _name = "CAkMidiDeviceMgr::AddCtx"
    class Create(HookFactory):
        _name = "CAkMidiDeviceMgr::Create"
    class Destroy(HookFactory):
        _name = "CAkMidiDeviceMgr::Destroy"
    class ExecuteAction(HookFactory):
        _name = "CAkMidiDeviceMgr::ExecuteAction"
    class GlobalCallback(HookFactory):
        _name = "CAkMidiDeviceMgr::GlobalCallback"
    class PostEvents(HookFactory):
        _name = "CAkMidiDeviceMgr::PostEvents"
    class StopAll(HookFactory):
        _name = "CAkMidiDeviceMgr::StopAll"

class CAkVPLFilterNodeBase:
    class CAkVPLFilterNodeBase(HookFactory):
        _name = "CAkVPLFilterNodeBase::CAkVPLFilterNodeBase"
    class Init(HookFactory):
        _name = "CAkVPLFilterNodeBase::Init"
    class Term(HookFactory):
        _name = "CAkVPLFilterNodeBase::Term"
    class VirtualOff(HookFactory):
        _name = "CAkVPLFilterNodeBase::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkVPLFilterNodeBase::VirtualOn"

class CAkVPLFilterNodeOutOfPlace:
    class CAkVPLFilterNodeOutOfPlace(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::CAkVPLFilterNodeOutOfPlace"
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::ConsumeBuffer"
    class GetBuffer(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::GetBuffer"
    class GetOutputConfig(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::GetOutputConfig"
    class Init(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::Init"
    class PopMarkers(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::PopMarkers"
    class ProcessDone(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::ProcessDone"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::ReleaseBuffer"
    class ReleaseInputBuffer(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::ReleaseInputBuffer"
    class ReleaseMemory(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::ReleaseMemory"
    class Seek(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::Seek"
    class Term(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::Term"
    class TimeSkip(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::TimeSkip"
    class VirtualOn(HookFactory):
        _name = "CAkVPLFilterNodeOutOfPlace::VirtualOn"

class CAkVPLSrcCbxNode:
    class CAkVPLSrcCbxNode(HookFactory):
        _name = "CAkVPLSrcCbxNode::CAkVPLSrcCbxNode"
    class AddPipeline(HookFactory):
        _name = "CAkVPLSrcCbxNode::AddPipeline"
    class AddSrc(HookFactory):
        _name = "CAkVPLSrcCbxNode::AddSrc"
        _overload: overloads.CAkVPLSrcCbxNode.AddSrc.overloads = "CAkVPLSrcCbxNode *, CAkPBI *, bool"
        @classmethod
        def overload(cls, overload_args: overloads.CAkVPLSrcCbxNode.AddSrc.overloads):
            cls._overload = overload_args
            return cls
    class ClearVPL(HookFactory):
        _name = "CAkVPLSrcCbxNode::ClearVPL"
    class ComputePriorityWithDistance(HookFactory):
        _name = "CAkVPLSrcCbxNode::ComputePriorityWithDistance"
    class ComputeVolumeRays(HookFactory):
        _name = "CAkVPLSrcCbxNode::ComputeVolumeRays"
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLSrcCbxNode::ConsumeBuffer"
    class FetchStreamedData(HookFactory):
        _name = "CAkVPLSrcCbxNode::FetchStreamedData"
    class GetAnalyzedEnvelope(HookFactory):
        _name = "CAkVPLSrcCbxNode::GetAnalyzedEnvelope"
    class GetBuffer(HookFactory):
        _name = "CAkVPLSrcCbxNode::GetBuffer"
    class GetOneSourceBuffer(HookFactory):
        _name = "CAkVPLSrcCbxNode::GetOneSourceBuffer"
    class GetPlayingID(HookFactory):
        _name = "CAkVPLSrcCbxNode::GetPlayingID"
    class GetPriority(HookFactory):
        _name = "CAkVPLSrcCbxNode::GetPriority"
    class HandleSourceStarvation(HookFactory):
        _name = "CAkVPLSrcCbxNode::HandleSourceStarvation"
    class IsUsingThisSlot(HookFactory):
        _name = "CAkVPLSrcCbxNode::IsUsingThisSlot"
        _overload: overloads.CAkVPLSrcCbxNode.IsUsingThisSlot.overloads = "CAkVPLSrcCbxNode *, const unsigned __int8 *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkVPLSrcCbxNode.IsUsingThisSlot.overloads):
            cls._overload = overload_args
            return cls
    class NotifyMarkers(HookFactory):
        _name = "CAkVPLSrcCbxNode::NotifyMarkers"
    class Pause(HookFactory):
        _name = "CAkVPLSrcCbxNode::Pause"
    class RefreshBypassFx(HookFactory):
        _name = "CAkVPLSrcCbxNode::RefreshBypassFx"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLSrcCbxNode::ReleaseBuffer"
    class RelocateMedia(HookFactory):
        _name = "CAkVPLSrcCbxNode::RelocateMedia"
    class RemovePipeline(HookFactory):
        _name = "CAkVPLSrcCbxNode::RemovePipeline"
    class RestorePreviousVolumes(HookFactory):
        _name = "CAkVPLSrcCbxNode::RestorePreviousVolumes"
    class Resume(HookFactory):
        _name = "CAkVPLSrcCbxNode::Resume"
    class SeekSource(HookFactory):
        _name = "CAkVPLSrcCbxNode::SeekSource"
    class SetFxBypass(HookFactory):
        _name = "CAkVPLSrcCbxNode::SetFxBypass"
    class SetMixableBuffer(HookFactory):
        _name = "CAkVPLSrcCbxNode::SetMixableBuffer"
    class Start(HookFactory):
        _name = "CAkVPLSrcCbxNode::Start"
    class StartRun(HookFactory):
        _name = "CAkVPLSrcCbxNode::StartRun"
    class Stop(HookFactory):
        _name = "CAkVPLSrcCbxNode::Stop"
    class StopLooping(HookFactory):
        _name = "CAkVPLSrcCbxNode::StopLooping"
    class SwitchToNextSrc(HookFactory):
        _name = "CAkVPLSrcCbxNode::SwitchToNextSrc"
    class Term(HookFactory):
        _name = "CAkVPLSrcCbxNode::Term"
    class TrySwitchToNextSrc(HookFactory):
        _name = "CAkVPLSrcCbxNode::TrySwitchToNextSrc"
    class UpdateBypass(HookFactory):
        _name = "CAkVPLSrcCbxNode::UpdateBypass"
    class UpdateFX(HookFactory):
        _name = "CAkVPLSrcCbxNode::UpdateFX"
    class UpdateMakeUpLinearNormalized(HookFactory):
        _name = "CAkVPLSrcCbxNode::UpdateMakeUpLinearNormalized"
    class VerifySATransition(HookFactory):
        _name = "CAkVPLSrcCbxNode::VerifySATransition"
    class _GetVoiceInfo(HookFactory):
        _name = "CAkVPLSrcCbxNode::_GetVoiceInfo"

class AreSourcesSACompatible(HookFactory):
    _name = "AreSourcesSACompatible"

class CAkMarkersQueue:
    class Dequeue(HookFactory):
        _name = "CAkMarkersQueue::Dequeue"
    class Enqueue(HookFactory):
        _name = "CAkMarkersQueue::Enqueue"

class CAkVPLNode:
    class GetChannelMappingFunc(HookFactory):
        _name = "CAkVPLNode::GetChannelMappingFunc"
    class GetPitch(HookFactory):
        _name = "CAkVPLNode::GetPitch"
    class PopMarkers(HookFactory):
        _name = "CAkVPLNode::PopMarkers"
    class Seek(HookFactory):
        _name = "CAkVPLNode::Seek"
    class VirtualOff(HookFactory):
        _name = "CAkVPLNode::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkVPLNode::VirtualOn"

class CAkVPLFilterNode:
    class GetPlugin(HookFactory):
        _name = "CAkVPLFilterNode::GetPlugin"
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLFilterNode::ConsumeBuffer"
    class GetBuffer(HookFactory):
        _name = "CAkVPLFilterNode::GetBuffer"
    class GetOutputConfig(HookFactory):
        _name = "CAkVPLFilterNode::GetOutputConfig"
    class Init(HookFactory):
        _name = "CAkVPLFilterNode::Init"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLFilterNode::ReleaseBuffer"
    class ReleaseMemory(HookFactory):
        _name = "CAkVPLFilterNode::ReleaseMemory"
    class Seek(HookFactory):
        _name = "CAkVPLFilterNode::Seek"
    class Term(HookFactory):
        _name = "CAkVPLFilterNode::Term"
    class TimeSkip(HookFactory):
        _name = "CAkVPLFilterNode::TimeSkip"
    class VirtualOn(HookFactory):
        _name = "CAkVPLFilterNode::VirtualOn"

class AkFXMemAlloc:
    class Malloc(HookFactory):
        _name = "AkFXMemAlloc::Malloc"
    class Malign(HookFactory):
        _name = "AkFXMemAlloc::Malign"
    class Realloc(HookFactory):
        _name = "AkFXMemAlloc::Realloc"
    class ReallocAligned(HookFactory):
        _name = "AkFXMemAlloc::ReallocAligned"
    class Free(HookFactory):
        _name = "AkFXMemAlloc::Free"

class CAkSrcMedia:
    class CAkSrcMedia(HookFactory):
        _name = "CAkSrcMedia::CAkSrcMedia"
    class ChangeSourcePosition(HookFactory):
        _name = "CAkSrcMedia::ChangeSourcePosition"
    class GetAnalyzedEnvelope(HookFactory):
        _name = "CAkSrcMedia::GetAnalyzedEnvelope"
    class GetBuffer(HookFactory):
        _name = "CAkSrcMedia::GetBuffer"
    class GetChannelMappingFunc(HookFactory):
        _name = "CAkSrcMedia::GetChannelMappingFunc"
    class GetDuration(HookFactory):
        _name = "CAkSrcMedia::GetDuration"
    class GetPitch(HookFactory):
        _name = "CAkSrcMedia::GetPitch"
    class GetSourceOffset(HookFactory):
        _name = "CAkSrcMedia::GetSourceOffset"
    class InitCodec(HookFactory):
        _name = "CAkSrcMedia::InitCodec"
    class MustRelocateAnalysisDataOnMediaRelocation(HookFactory):
        _name = "CAkSrcMedia::MustRelocateAnalysisDataOnMediaRelocation"
    class MustRelocatePitchInputBufferOnMediaRelocation(HookFactory):
        _name = "CAkSrcMedia::MustRelocatePitchInputBufferOnMediaRelocation"
    class PrepareNextBuffer(HookFactory):
        _name = "CAkSrcMedia::PrepareNextBuffer"
    class PrepareSourceSwitch(HookFactory):
        _name = "CAkSrcMedia::PrepareSourceSwitch"
    class ReleaseBuffer(HookFactory):
        _name = "CAkSrcMedia::ReleaseBuffer"
    class RelocateMedia(HookFactory):
        _name = "CAkSrcMedia::RelocateMedia"
    class Seek(HookFactory):
        _name = "CAkSrcMedia::Seek"
    class SeekTo(HookFactory):
        _name = "CAkSrcMedia::SeekTo"
    class SrcProcessOrder(HookFactory):
        _name = "CAkSrcMedia::SrcProcessOrder"
    class StartStream(HookFactory):
        _name = "CAkSrcMedia::StartStream"
    class StopLooping(HookFactory):
        _name = "CAkSrcMedia::StopLooping"
    class StopStream(HookFactory):
        _name = "CAkSrcMedia::StopStream"
    class SupportResampling(HookFactory):
        _name = "CAkSrcMedia::SupportResampling"
    class TimeSkip(HookFactory):
        _name = "CAkSrcMedia::TimeSkip"
    class UpdateBufferingInfo(HookFactory):
        _name = "CAkSrcMedia::UpdateBufferingInfo"
    class VirtualOff(HookFactory):
        _name = "CAkSrcMedia::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkSrcMedia::VirtualOn"

class CAkVPLSrcNode:
    class GetPitch(HookFactory):
        _name = "CAkVPLSrcNode::GetPitch"
    class CAkVPLSrcNode(HookFactory):
        _name = "CAkVPLSrcNode::CAkVPLSrcNode"
    class Create(HookFactory):
        _name = "CAkVPLSrcNode::Create"
    class FetchStreamedData(HookFactory):
        _name = "CAkVPLSrcNode::FetchStreamedData"
    class Pause(HookFactory):
        _name = "CAkVPLSrcNode::Pause"
    class Resume(HookFactory):
        _name = "CAkVPLSrcNode::Resume"
    class Seek(HookFactory):
        _name = "CAkVPLSrcNode::Seek"
    class Start(HookFactory):
        _name = "CAkVPLSrcNode::Start"
    class Stop(HookFactory):
        _name = "CAkVPLSrcNode::Stop"
    class Term(HookFactory):
        _name = "CAkVPLSrcNode::Term"
    class TimeSkip(HookFactory):
        _name = "CAkVPLSrcNode::TimeSkip"

class CAkSrcMediaCodecPCM:
    class CAkSrcMediaCodecPCM(HookFactory):
        _name = "CAkSrcMediaCodecPCM::CAkSrcMediaCodecPCM"
    class FindClosestFileOffset(HookFactory):
        _name = "CAkSrcMediaCodecPCM::FindClosestFileOffset"
    class GetBuffer(HookFactory):
        _name = "CAkSrcMediaCodecPCM::GetBuffer"
    class Init(HookFactory):
        _name = "CAkSrcMediaCodecPCM::Init"
    class SwitchToNext(HookFactory):
        _name = "CAkSrcMediaCodecPCM::SwitchToNext"
    class ReleaseBuffer(HookFactory):
        _name = "CAkSrcMediaCodecPCM::ReleaseBuffer"
    class Seek(HookFactory):
        _name = "CAkSrcMediaCodecPCM::Seek"
    class Term(HookFactory):
        _name = "CAkSrcMediaCodecPCM::Term"

class CAkLstnrAssocs:
    class CopyFrom(HookFactory):
        _name = "CAkLstnrAssocs::CopyFrom"
    class GetGains(HookFactory):
        _name = "CAkLstnrAssocs::GetGains"
    class PreAssocRemoved(HookFactory):
        _name = "CAkLstnrAssocs::PreAssocRemoved"
    class SetGain(HookFactory):
        _name = "CAkLstnrAssocs::SetGain"
    class SetGains(HookFactory):
        _name = "CAkLstnrAssocs::SetGains"
    class SetListeners(HookFactory):
        _name = "CAkLstnrAssocs::SetListeners"
    class Term(HookFactory):
        _name = "CAkLstnrAssocs::Term"

class CreateListenerComponents(HookFactory):
    _name = "CreateListenerComponents"

class CAkEvent:
    class AddRef(HookFactory):
        _name = "CAkEvent::AddRef"
    class AddToIndex(HookFactory):
        _name = "CAkEvent::AddToIndex"
    class CreateNoIndex(HookFactory):
        _name = "CAkEvent::CreateNoIndex"
    class GatherSounds(HookFactory):
        _name = "CAkEvent::GatherSounds"
    class QueryAudioObjectIDs(HookFactory):
        _name = "CAkEvent::QueryAudioObjectIDs"
    class Release(HookFactory):
        _name = "CAkEvent::Release"
    class SetInitialValues(HookFactory):
        _name = "CAkEvent::SetInitialValues"

class Ak3DAutomationParams:
    class Ak3DAutomationParams(HookFactory):
        _name = "Ak3DAutomationParams::Ak3DAutomationParams"

class CAk3DAutomationParamsEx:
    class FreePathInfo(HookFactory):
        _name = "CAk3DAutomationParamsEx::FreePathInfo"
    class SetPath(HookFactory):
        _name = "CAk3DAutomationParamsEx::SetPath"

class CAk3DAutomationParams:
    class PathIsDifferent(HookFactory):
        _name = "CAk3DAutomationParams::PathIsDifferent"
    class SetPathPlayList(HookFactory):
        _name = "CAk3DAutomationParams::SetPathPlayList"
    class SetTransition(HookFactory):
        _name = "CAk3DAutomationParams::SetTransition"

class CAkFxBase:
    class CAkFxBase(HookFactory):
        _name = "CAkFxBase::CAkFxBase"
    class RecalculatePropertyValue(HookFactory):
        _name = "CAkFxBase::RecalculatePropertyValue"
    class RecalculatePropertyValues(HookFactory):
        _name = "CAkFxBase::RecalculatePropertyValues"
    class SetFX(HookFactory):
        _name = "CAkFxBase::SetFX"
    class SetInitialValues(HookFactory):
        _name = "CAkFxBase::SetInitialValues"
    class SetRTPC(HookFactory):
        _name = "CAkFxBase::SetRTPC"
    class SubscribeRTPC(HookFactory):
        _name = "CAkFxBase::SubscribeRTPC"

class CAkAudioDevice:
    class AddRef(HookFactory):
        _name = "CAkAudioDevice::AddRef"
    class Create(HookFactory):
        _name = "CAkAudioDevice::Create"
    class Release(HookFactory):
        _name = "CAkAudioDevice::Release"
    class SetInitialValues(HookFactory):
        _name = "CAkAudioDevice::SetInitialValues"
    class UpdateBypass(HookFactory):
        _name = "CAkAudioDevice::UpdateBypass"
    class UpdateFX(HookFactory):
        _name = "CAkAudioDevice::UpdateFX"

class CAkFxCustom:
    class AddRef(HookFactory):
        _name = "CAkFxCustom::AddRef"
    class Create(HookFactory):
        _name = "CAkFxCustom::Create"
    class Release(HookFactory):
        _name = "CAkFxCustom::Release"

class CAkFxShareSet:
    class AddRef(HookFactory):
        _name = "CAkFxShareSet::AddRef"
    class Create(HookFactory):
        _name = "CAkFxShareSet::Create"
    class Release(HookFactory):
        _name = "CAkFxShareSet::Release"

class AkSinkPluginParams:
    class TakeFrom(HookFactory):
        _name = "AkSinkPluginParams::TakeFrom"

class AkAudioDeviceEffectParams:
    class Term(HookFactory):
        _name = "AkAudioDeviceEffectParams::Term"

class AkRayBuilder:
    class BuildApiRays(HookFactory):
        _name = "AkRayBuilder::BuildApiRays"
    class SubmitLast(HookFactory):
        _name = "AkRayBuilder::SubmitLast"

class CAkVolumeRayComponent:
    class BuildCachedVolumeRays(HookFactory):
        _name = "CAkVolumeRayComponent::BuildCachedVolumeRays"
    class GetRayVolumeData(HookFactory):
        _name = "CAkVolumeRayComponent::GetRayVolumeData"
    class UpdateBuiltInParamValues(HookFactory):
        _name = "CAkVolumeRayComponent::UpdateBuiltInParamValues"

class CAkSpatialAudioReflectBusCtx:
    class GetAuxBusID(HookFactory):
        _name = "CAkSpatialAudioReflectBusCtx::GetAuxBusID"
    class GetAuxSendsValues(HookFactory):
        _name = "CAkSpatialAudioReflectBusCtx::GetAuxSendsValues"
    class Init(HookFactory):
        _name = "CAkSpatialAudioReflectBusCtx::Init"
    class Term(HookFactory):
        _name = "CAkSpatialAudioReflectBusCtx::Term"

class CAkSpatialAudioEmitterVoiceCtx:
    class GetAuxSendsValues(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::GetAuxSendsValues"
    class GetReflectionsAuxBus(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::GetReflectionsAuxBus"
    class HasTransmission(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::HasTransmission"
    class HasReflections(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::HasReflections"
    class Init(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::Init"
    class ParamsUpdated(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::ParamsUpdated"
    class Term(HookFactory):
        _name = "CAkSpatialAudioEmitterVoiceCtx::Term"

class CAkSpatialAudioRoomBusCtx:
    class Init(HookFactory):
        _name = "CAkSpatialAudioRoomBusCtx::Init"
    class Term(HookFactory):
        _name = "CAkSpatialAudioRoomBusCtx::Term"

class CAkScopedRtpcObj:
    class CAkScopedRtpcObj(HookFactory):
        _name = "CAkScopedRtpcObj::CAkScopedRtpcObj"
    class AddedNewModulatorCtx(HookFactory):
        _name = "CAkScopedRtpcObj::AddedNewModulatorCtx"
    class AddedNewRtpcValue(HookFactory):
        _name = "CAkScopedRtpcObj::AddedNewRtpcValue"
    class Term(HookFactory):
        _name = "CAkScopedRtpcObj::Term"

class CAkLEngineCmds:
    class DequeuePBI(HookFactory):
        _name = "CAkLEngineCmds::DequeuePBI"
    class DestroyDisconnectedSources(HookFactory):
        _name = "CAkLEngineCmds::DestroyDisconnectedSources"
    class EnqueueAction(HookFactory):
        _name = "CAkLEngineCmds::EnqueueAction"
    class Init(HookFactory):
        _name = "CAkLEngineCmds::Init"
    class ProcessAllCommands(HookFactory):
        _name = "CAkLEngineCmds::ProcessAllCommands"
    class ProcessDisconnectedSources(HookFactory):
        _name = "CAkLEngineCmds::ProcessDisconnectedSources"
    class ProcessPendingCommands(HookFactory):
        _name = "CAkLEngineCmds::ProcessPendingCommands"
    class ProcessPlayCommands(HookFactory):
        _name = "CAkLEngineCmds::ProcessPlayCommands"
    class Term(HookFactory):
        _name = "CAkLEngineCmds::Term"

class CAkMidiNoteEvent:
    class CAkMidiNoteEvent(HookFactory):
        _name = "CAkMidiNoteEvent::CAkMidiNoteEvent"
    class NoteOnToNoteOff(HookFactory):
        _name = "CAkMidiNoteEvent::NoteOnToNoteOff"
    class PairWithExistingNote(HookFactory):
        _name = "CAkMidiNoteEvent::PairWithExistingNote"
    class PlayNode(HookFactory):
        _name = "CAkMidiNoteEvent::PlayNode"
    class Release(HookFactory):
        _name = "CAkMidiNoteEvent::Release"
    class ScheduleMidiEvent(HookFactory):
        _name = "CAkMidiNoteEvent::ScheduleMidiEvent"
    class StopPBIsNoFade(HookFactory):
        _name = "CAkMidiNoteEvent::StopPBIsNoFade"
    class Update(HookFactory):
        _name = "CAkMidiNoteEvent::Update"
    class _ExecutePause(HookFactory):
        _name = "CAkMidiNoteEvent::_ExecutePause"
    class _ExecuteResume(HookFactory):
        _name = "CAkMidiNoteEvent::_ExecuteResume"
    class _ExecuteWwiseCmd(HookFactory):
        _name = "CAkMidiNoteEvent::_ExecuteWwiseCmd"

class CAkMidiNoteState:
    class AddRef(HookFactory):
        _name = "CAkMidiNoteState::AddRef"
    class Release(HookFactory):
        _name = "CAkMidiNoteState::Release"

class AkMath:
    class Distance(HookFactory):
        _name = "AkMath::Distance"

class CAkEffectSlots:
    class GetFX(HookFactory):
        _name = "CAkEffectSlots::GetFX"
    class SetAsRendered(HookFactory):
        _name = "CAkEffectSlots::SetAsRendered"
    class SetFX(HookFactory):
        _name = "CAkEffectSlots::SetFX"
    class SetFXBypass(HookFactory):
        _name = "CAkEffectSlots::SetFXBypass"
    class SetInitialValues(HookFactory):
        _name = "CAkEffectSlots::SetInitialValues"
    class Term(HookFactory):
        _name = "CAkEffectSlots::Term"

class CAkSIS:
    class GetSISValue(HookFactory):
        _name = "CAkSIS::GetSISValue"
    class TransUpdateValue(HookFactory):
        _name = "CAkSIS::TransUpdateValue"

class CAkAction:
    class CAkAction(HookFactory):
        _name = "CAkAction::CAkAction"
    class AddRef(HookFactory):
        _name = "CAkAction::AddRef"
    class AddToIndex(HookFactory):
        _name = "CAkAction::AddToIndex"
    class Create(HookFactory):
        _name = "CAkAction::Create"
    class GetAndRefTarget(HookFactory):
        _name = "CAkAction::GetAndRefTarget"
    class GetDelayTime(HookFactory):
        _name = "CAkAction::GetDelayTime"
    class GetTransitionTime(HookFactory):
        _name = "CAkAction::GetTransitionTime"
    class PlayDirectly(HookFactory):
        _name = "CAkAction::PlayDirectly"
    class Release(HookFactory):
        _name = "CAkAction::Release"
    class SetAkProp(HookFactory):
        _name = "CAkAction::SetAkProp"
        _overload: overloads.CAkAction.SetAkProp.overloads = "CAkAction *, AkPropID, int, int, int"
        @classmethod
        def overload(cls, overload_args: overloads.CAkAction.SetAkProp.overloads):
            cls._overload = overload_args
            return cls
    class SetInitialValues(HookFactory):
        _name = "CAkAction::SetInitialValues"
    class SetPlayDirectly(HookFactory):
        _name = "CAkAction::SetPlayDirectly"

class CAkSound:
    class Create(HookFactory):
        _name = "CAkSound::Create"
    class ExecuteAction(HookFactory):
        _name = "CAkSound::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkSound::ExecuteActionExcept"
    class ExecuteActionInternal(HookFactory):
        _name = "CAkSound::ExecuteActionInternal"
    class ExecuteActionNoPropagate(HookFactory):
        _name = "CAkSound::ExecuteActionNoPropagate"
    class GatherSounds(HookFactory):
        _name = "CAkSound::GatherSounds"
    class GetAudioParameters(HookFactory):
        _name = "CAkSound::GetAudioParameters"
    class IsPlayable(HookFactory):
        _name = "CAkSound::IsPlayable"
    class PlayInternal(HookFactory):
        _name = "CAkSound::PlayInternal"
    class PrepareData(HookFactory):
        _name = "CAkSound::PrepareData"
    class SetInitialValues(HookFactory):
        _name = "CAkSound::SetInitialValues"
    class UnPrepareData(HookFactory):
        _name = "CAkSound::UnPrepareData"

class CAkActionStop:
    class Create(HookFactory):
        _name = "CAkActionStop::Create"
    class Execute(HookFactory):
        _name = "CAkActionStop::Execute"
    class SetActionActiveParams(HookFactory):
        _name = "CAkActionStop::SetActionActiveParams"
    class SetActionSpecificParams(HookFactory):
        _name = "CAkActionStop::SetActionSpecificParams"

class CAkActionPlayAndContinue:
    class AssignMidi(HookFactory):
        _name = "CAkActionPlayAndContinue::AssignMidi"
    class AssignModulator(HookFactory):
        _name = "CAkActionPlayAndContinue::AssignModulator"
        _overload: overloads.CAkActionPlayAndContinue.AssignModulator.overloads = "CAkActionPlayAndContinue *, CAkModCtxRefContainer *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionPlayAndContinue.AssignModulator.overloads):
            cls._overload = overload_args
            return cls
    class BreakToNode(HookFactory):
        _name = "CAkActionPlayAndContinue::BreakToNode"
    class Create(HookFactory):
        _name = "CAkActionPlayAndContinue::Create"
    class Execute(HookFactory):
        _name = "CAkActionPlayAndContinue::Execute"
    class GetHistArray(HookFactory):
        _name = "CAkActionPlayAndContinue::GetHistArray"
    class HasModulator(HookFactory):
        _name = "CAkActionPlayAndContinue::HasModulator"
    class NeedNotifyDelay(HookFactory):
        _name = "CAkActionPlayAndContinue::NeedNotifyDelay"
    class Resume(HookFactory):
        _name = "CAkActionPlayAndContinue::Resume"
    class SetFadeBack(HookFactory):
        _name = "CAkActionPlayAndContinue::SetFadeBack"
    class SetHistory(HookFactory):
        _name = "CAkActionPlayAndContinue::SetHistory"
    class SetInitialPlaybackState(HookFactory):
        _name = "CAkActionPlayAndContinue::SetInitialPlaybackState"
    class SetInstigator(HookFactory):
        _name = "CAkActionPlayAndContinue::SetInstigator"
    class SetIsFirstPlay(HookFactory):
        _name = "CAkActionPlayAndContinue::SetIsFirstPlay"
    class SetPathInfo(HookFactory):
        _name = "CAkActionPlayAndContinue::SetPathInfo"
    class SetPauseResumeTransition(HookFactory):
        _name = "CAkActionPlayAndContinue::SetPauseResumeTransition"
    class SetPlayStopTransition(HookFactory):
        _name = "CAkActionPlayAndContinue::SetPlayStopTransition"
    class SetSAInfo(HookFactory):
        _name = "CAkActionPlayAndContinue::SetSAInfo"
    class StartAsPaused(HookFactory):
        _name = "CAkActionPlayAndContinue::StartAsPaused"
    class UnsetFadeBack(HookFactory):
        _name = "CAkActionPlayAndContinue::UnsetFadeBack"

class AkCustomPluginDataStore:
    class GetPluginCustomGameData(HookFactory):
        _name = "AkCustomPluginDataStore::GetPluginCustomGameData"
    class SetPluginCustomGameData(HookFactory):
        _name = "AkCustomPluginDataStore::SetPluginCustomGameData"
    class TermPluginCustomGameData(HookFactory):
        _name = "AkCustomPluginDataStore::TermPluginCustomGameData"

class CAkMidiBaseCtx:
    class CAkMidiBaseCtx(HookFactory):
        _name = "CAkMidiBaseCtx::CAkMidiBaseCtx"
    class AddMidiEvent(HookFactory):
        _name = "CAkMidiBaseCtx::AddMidiEvent"
    class AddRef(HookFactory):
        _name = "CAkMidiBaseCtx::AddRef"
    class CleanupActions(HookFactory):
        _name = "CAkMidiBaseCtx::CleanupActions"
    class Init(HookFactory):
        _name = "CAkMidiBaseCtx::Init"
    class Release(HookFactory):
        _name = "CAkMidiBaseCtx::Release"

class CAkMidiBaseMgr:
    class CAkMidiBaseMgr(HookFactory):
        _name = "CAkMidiBaseMgr::CAkMidiBaseMgr"
    class AttachCtx(HookFactory):
        _name = "CAkMidiBaseMgr::AttachCtx"
    class CcUpdateMidiNotes(HookFactory):
        _name = "CAkMidiBaseMgr::CcUpdateMidiNotes"
    class CleanupActions(HookFactory):
        _name = "CAkMidiBaseMgr::CleanupActions"
    class DetachCtx(HookFactory):
        _name = "CAkMidiBaseMgr::DetachCtx"
    class KillAllNotes(HookFactory):
        _name = "CAkMidiBaseMgr::KillAllNotes"
    class KillNotes(HookFactory):
        _name = "CAkMidiBaseMgr::KillNotes"
    class OnNoteStateFinished(HookFactory):
        _name = "CAkMidiBaseMgr::OnNoteStateFinished"
    class OnPaused(HookFactory):
        _name = "CAkMidiBaseMgr::OnPaused"
    class OnResumed(HookFactory):
        _name = "CAkMidiBaseMgr::OnResumed"
    class ScheduleMidiEvent(HookFactory):
        _name = "CAkMidiBaseMgr::ScheduleMidiEvent"
    class ScheduleMidiEvents(HookFactory):
        _name = "CAkMidiBaseMgr::ScheduleMidiEvents"
    class UpdateMidiNotes(HookFactory):
        _name = "CAkMidiBaseMgr::UpdateMidiNotes"

class CAkBankCallbackMgr:
    class CAkBankCallbackMgr(HookFactory):
        _name = "CAkBankCallbackMgr::CAkBankCallbackMgr"
    class AddCookie(HookFactory):
        _name = "CAkBankCallbackMgr::AddCookie"
    class CancelCookie(HookFactory):
        _name = "CAkBankCallbackMgr::CancelCookie"
    class DoCallback(HookFactory):
        _name = "CAkBankCallbackMgr::DoCallback"

class CAkBankList:
    class Init(HookFactory):
        _name = "CAkBankList::Init"

class CAkAttenuation:
    class AddRef(HookFactory):
        _name = "CAkAttenuation::AddRef"
    class ClearRTPCs(HookFactory):
        _name = "CAkAttenuation::ClearRTPCs"
    class Create(HookFactory):
        _name = "CAkAttenuation::Create"
    class Release(HookFactory):
        _name = "CAkAttenuation::Release"
    class SetInitialValues(HookFactory):
        _name = "CAkAttenuation::SetInitialValues"
    class SetRTPC(HookFactory):
        _name = "CAkAttenuation::SetRTPC"

class SetInitialRTPC(HookFactory):
    _templates = ("T0", )
    _name = "SetInitialRTPC<{T0}>"

class CAkModulatorCtx:
    class GetCurrentOutput(HookFactory):
        _name = "CAkModulatorCtx::GetCurrentOutput"
    class GetLastOutput(HookFactory):
        _name = "CAkModulatorCtx::GetLastOutput"
    class Release(HookFactory):
        _name = "CAkModulatorCtx::Release"
    class Tick(HookFactory):
        _name = "CAkModulatorCtx::Tick"
    class CAkModulatorCtx(HookFactory):
        _name = "CAkModulatorCtx::CAkModulatorCtx"
    class IsFinished(HookFactory):
        _name = "CAkModulatorCtx::IsFinished"
    class Term(HookFactory):
        _name = "CAkModulatorCtx::Term"
    class Trigger(HookFactory):
        _name = "CAkModulatorCtx::Trigger"
    class TriggerRelease(HookFactory):
        _name = "CAkModulatorCtx::TriggerRelease"

class CAkEnvelopeModulator:
    class GetInitialParams(HookFactory):
        _name = "CAkEnvelopeModulator::GetInitialParams"
    class IsTriggerOk(HookFactory):
        _name = "CAkEnvelopeModulator::IsTriggerOk"

class CAkLFOModulator:
    class GetInitialParams(HookFactory):
        _name = "CAkLFOModulator::GetInitialParams"
    class IsTriggerOk(HookFactory):
        _name = "CAkLFOModulator::IsTriggerOk"

class CAkTimeModulator:
    class GetInitialParams(HookFactory):
        _name = "CAkTimeModulator::GetInitialParams"

class CAkTimeModCtx:
    class Tick(HookFactory):
        _name = "CAkTimeModCtx::Tick"
    class CalcBufferNeeded(HookFactory):
        _name = "CAkTimeModCtx::CalcBufferNeeded"
    class SetParam(HookFactory):
        _name = "CAkTimeModCtx::SetParam"

class CAkActorMixer:
    class CanAddChild(HookFactory):
        _name = "CAkActorMixer::CanAddChild"
    class Create(HookFactory):
        _name = "CAkActorMixer::Create"
    class SetInitialValues(HookFactory):
        _name = "CAkActorMixer::SetInitialValues"

class CAkAuxBus:
    class Create(HookFactory):
        _name = "CAkAuxBus::Create"
    class NodeCategory(HookFactory):
        _name = "CAkAuxBus::NodeCategory"

class CAkSwitchCntr:
    class AddNodeInSwitch(HookFactory):
        _name = "CAkSwitchCntr::AddNodeInSwitch"
    class Create(HookFactory):
        _name = "CAkSwitchCntr::Create"
    class DecrementActivityCount(HookFactory):
        _name = "CAkSwitchCntr::DecrementActivityCount"
    class DecrementPlayCount(HookFactory):
        _name = "CAkSwitchCntr::DecrementPlayCount"
    class ExecuteAction(HookFactory):
        _name = "CAkSwitchCntr::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkSwitchCntr::ExecuteActionExcept"
    class ExecuteActionInternal(HookFactory):
        _name = "CAkSwitchCntr::ExecuteActionInternal"
    class ExecuteActionNoPropagate(HookFactory):
        _name = "CAkSwitchCntr::ExecuteActionNoPropagate"
    class GatherSounds(HookFactory):
        _name = "CAkSwitchCntr::GatherSounds"
    class IncrementActivityCount(HookFactory):
        _name = "CAkSwitchCntr::IncrementActivityCount"
    class IncrementPlayCount(HookFactory):
        _name = "CAkSwitchCntr::IncrementPlayCount"
    class IsContinuousPlayback(HookFactory):
        _name = "CAkSwitchCntr::IsContinuousPlayback"
    class IsInfiniteLooping(HookFactory):
        _name = "CAkSwitchCntr::IsInfiniteLooping"
    class ModifyActiveState(HookFactory):
        _name = "CAkSwitchCntr::ModifyActiveState"
    class NotifyEndContinuous(HookFactory):
        _name = "CAkSwitchCntr::NotifyEndContinuous"
    class OnPreRelease(HookFactory):
        _name = "CAkSwitchCntr::OnPreRelease"
    class PerformSwitchChange(HookFactory):
        _name = "CAkSwitchCntr::PerformSwitchChange"
    class PlayInternal(HookFactory):
        _name = "CAkSwitchCntr::PlayInternal"
    class PrepareData(HookFactory):
        _name = "CAkSwitchCntr::PrepareData"
    class PrepareNodeList(HookFactory):
        _name = "CAkSwitchCntr::PrepareNodeList"
    class RemoveChild(HookFactory):
        _name = "CAkSwitchCntr::RemoveChild"
    class SetInitialValues(HookFactory):
        _name = "CAkSwitchCntr::SetInitialValues"
    class SetSwitch(HookFactory):
        _name = "CAkSwitchCntr::SetSwitch"
    class StopContSwitchInst(HookFactory):
        _name = "CAkSwitchCntr::StopContSwitchInst"
    class StopPrevious(HookFactory):
        _name = "CAkSwitchCntr::StopPrevious"
    class Term(HookFactory):
        _name = "CAkSwitchCntr::Term"
    class TriggerModulators(HookFactory):
        _name = "CAkSwitchCntr::TriggerModulators"
    class UnPrepareData(HookFactory):
        _name = "CAkSwitchCntr::UnPrepareData"
    class UnPrepareNodeList(HookFactory):
        _name = "CAkSwitchCntr::UnPrepareNodeList"

class CAkLayerCntr:
    class AddChildInternal(HookFactory):
        _name = "CAkLayerCntr::AddChildInternal"
    class Create(HookFactory):
        _name = "CAkLayerCntr::Create"
    class DecrementActivityCount(HookFactory):
        _name = "CAkLayerCntr::DecrementActivityCount"
    class DecrementPlayCount(HookFactory):
        _name = "CAkLayerCntr::DecrementPlayCount"
    class ExecuteAction(HookFactory):
        _name = "CAkLayerCntr::ExecuteAction"
    class ExecuteActionExcept(HookFactory):
        _name = "CAkLayerCntr::ExecuteActionExcept"
    class ExecuteActionInternal(HookFactory):
        _name = "CAkLayerCntr::ExecuteActionInternal"
    class ExecuteActionNoPropagate(HookFactory):
        _name = "CAkLayerCntr::ExecuteActionNoPropagate"
    class IncrementActivityCount(HookFactory):
        _name = "CAkLayerCntr::IncrementActivityCount"
    class IncrementPlayCount(HookFactory):
        _name = "CAkLayerCntr::IncrementPlayCount"
    class NotifyEndContinuous(HookFactory):
        _name = "CAkLayerCntr::NotifyEndContinuous"
    class OnPreRelease(HookFactory):
        _name = "CAkLayerCntr::OnPreRelease"
    class PlayInternal(HookFactory):
        _name = "CAkLayerCntr::PlayInternal"
    class RemoveChild(HookFactory):
        _name = "CAkLayerCntr::RemoveChild"
    class SetInitialValues(HookFactory):
        _name = "CAkLayerCntr::SetInitialValues"
    class StopContInst(HookFactory):
        _name = "CAkLayerCntr::StopContInst"

class CAkContinueListItem:
    class CAkContinueListItem(HookFactory):
        _name = "CAkContinueListItem::CAkContinueListItem"

class CAkContinuationList:
    class AddRef(HookFactory):
        _name = "CAkContinuationList::AddRef"
    class Create(HookFactory):
        _name = "CAkContinuationList::Create"
    class Release(HookFactory):
        _name = "CAkContinuationList::Release"

class CAkLayer:
    class AddRef(HookFactory):
        _name = "CAkLayer::AddRef"
    class Create(HookFactory):
        _name = "CAkLayer::Create"
    class DecrementPlayCount(HookFactory):
        _name = "CAkLayer::DecrementPlayCount"
    class GetAudioParameters(HookFactory):
        _name = "CAkLayer::GetAudioParameters"
    class GetModulatorParamXfrms(HookFactory):
        _name = "CAkLayer::GetModulatorParamXfrms"
    class IncrementPlayCount(HookFactory):
        _name = "CAkLayer::IncrementPlayCount"
    class CAssociatedChildData:
        class IsOutsideOfActiveRange(HookFactory):
            _name = "CAkLayer::CAssociatedChildData::IsOutsideOfActiveRange"
        class UpdateChildPtr(HookFactory):
            _name = "CAkLayer::CAssociatedChildData::UpdateChildPtr"
    class IsPlaying(HookFactory):
        _name = "CAkLayer::IsPlaying"
    class OnRTPCChanged(HookFactory):
        _name = "CAkLayer::OnRTPCChanged"
    class RecalcNotification(HookFactory):
        _name = "CAkLayer::RecalcNotification"
    class Release(HookFactory):
        _name = "CAkLayer::Release"
    class SetChildAssoc(HookFactory):
        _name = "CAkLayer::SetChildAssoc"
    class SetInitialValues(HookFactory):
        _name = "CAkLayer::SetInitialValues"
    class SetOwner(HookFactory):
        _name = "CAkLayer::SetOwner"
    class SetParamComplexFromRTPCManager(HookFactory):
        _name = "CAkLayer::SetParamComplexFromRTPCManager"
    class ToggleRTPCSubscription(HookFactory):
        _name = "CAkLayer::ToggleRTPCSubscription"
    class TriggerModulators(HookFactory):
        _name = "CAkLayer::TriggerModulators"
    class UnsetChildAssoc(HookFactory):
        _name = "CAkLayer::UnsetChildAssoc"
    class UpdateChildPtr(HookFactory):
        _name = "CAkLayer::UpdateChildPtr"

class PropagateMute(HookFactory):
    _name = "PropagateMute"

class AkContParamsAndPath:
    class AkContParamsAndPath(HookFactory):
        _name = "AkContParamsAndPath::AkContParamsAndPath"

class CAkMultiPlayNode:
    class CAkMultiPlayNode(HookFactory):
        _name = "CAkMultiPlayNode::CAkMultiPlayNode"
    class AddMultiplayItem(HookFactory):
        _name = "CAkMultiPlayNode::AddMultiplayItem"
    class ContGetList(HookFactory):
        _name = "CAkMultiPlayNode::ContGetList"
    class ContRefList(HookFactory):
        _name = "CAkMultiPlayNode::ContRefList"
    class ContUnrefList(HookFactory):
        _name = "CAkMultiPlayNode::ContUnrefList"
    class Init(HookFactory):
        _name = "CAkMultiPlayNode::Init"
    class PlayAndContinueAlternateMultiPlay(HookFactory):
        _name = "CAkMultiPlayNode::PlayAndContinueAlternateMultiPlay"
    class Term(HookFactory):
        _name = "CAkMultiPlayNode::Term"

class SafeContinuationList:
    class SafeContinuationList(HookFactory):
        _name = "SafeContinuationList::SafeContinuationList"

class CAkEnvelopeCtx:
    class CalcBufferNeeded(HookFactory):
        _name = "CAkEnvelopeCtx::CalcBufferNeeded"
    class InitializeOutput(HookFactory):
        _name = "CAkEnvelopeCtx::InitializeOutput"
    class SetParam(HookFactory):
        _name = "CAkEnvelopeCtx::SetParam"

class AkMidiParseSe:
    class AkMidiParseSe(HookFactory):
        _name = "AkMidiParseSe::AkMidiParseSe"
    class GetCurrentPos(HookFactory):
        _name = "AkMidiParseSe::GetCurrentPos"
    class GetNextEvent(HookFactory):
        _name = "AkMidiParseSe::GetNextEvent"
    class MoveEventWindow(HookFactory):
        _name = "AkMidiParseSe::MoveEventWindow"
    class RelocateMedia(HookFactory):
        _name = "AkMidiParseSe::RelocateMedia"
    class SeekToStart(HookFactory):
        _name = "AkMidiParseSe::SeekToStart"
    class SeekToTime(HookFactory):
        _name = "AkMidiParseSe::SeekToTime"
    class SetBuffer(HookFactory):
        _name = "AkMidiParseSe::SetBuffer"
    class SetCurrentPos(HookFactory):
        _name = "AkMidiParseSe::SetCurrentPos"
    class SetLoopOk(HookFactory):
        _name = "AkMidiParseSe::SetLoopOk"
    class SetTempo(HookFactory):
        _name = "AkMidiParseSe::SetTempo"

class DecodeVariableLength(HookFactory):
    _name = "DecodeVariableLength"

class ResetSeek(HookFactory):
    _name = "ResetSeek"

class SeekNextEvent(HookFactory):
    _name = "SeekNextEvent"

class CAkActionDuck:
    class CAkActionDuck(HookFactory):
        _name = "CAkActionDuck::CAkActionDuck"
    class Execute(HookFactory):
        _name = "CAkActionDuck::Execute"

class CAkDuckItem:
    class Init(HookFactory):
        _name = "CAkDuckItem::Init"
    class Term(HookFactory):
        _name = "CAkDuckItem::Term"
    class TransUpdateValue(HookFactory):
        _name = "CAkDuckItem::TransUpdateValue"

class AkConnectedObject:
    class AkConnectedObject(HookFactory):
        _name = "AkConnectedObject::AkConnectedObject"
    class Transfer(HookFactory):
        _name = "AkConnectedObject::Transfer"

class CAkMixConnections:
    class Create(HookFactory):
        _name = "CAkMixConnections::Create"

class AkMixConnection:
    class CreateObject(HookFactory):
        _name = "AkMixConnection::CreateObject"
    class Get3DPosition(HookFactory):
        _name = "AkMixConnection::Get3DPosition"
    class Get3DPositionType(HookFactory):
        _name = "AkMixConnection::Get3DPositionType"
    class Get3DSpatializationMode(HookFactory):
        _name = "AkMixConnection::Get3DSpatializationMode"
    class GetCenterPerc(HookFactory):
        _name = "AkMixConnection::GetCenterPerc"
    class GetConnectionType(HookFactory):
        _name = "AkMixConnection::GetConnectionType"
    class GetFocus(HookFactory):
        _name = "AkMixConnection::GetFocus"
    class GetGameObjectInfo(HookFactory):
        _name = "AkMixConnection::GetGameObjectInfo"
    class GetInputParam(HookFactory):
        _name = "AkMixConnection::GetInputParam"
    class GetMaxAttenuationDistance(HookFactory):
        _name = "AkMixConnection::GetMaxAttenuationDistance"
    class GetNum3DPositions(HookFactory):
        _name = "AkMixConnection::GetNum3DPositions"
    class GetOutputBus(HookFactory):
        _name = "AkMixConnection::GetOutputBus"
    class GetOutputBusCtx(HookFactory):
        _name = "AkMixConnection::GetOutputBusCtx"
    class GetOutputConfig(HookFactory):
        _name = "AkMixConnection::GetOutputConfig"
    class GetPannerPosition(HookFactory):
        _name = "AkMixConnection::GetPannerPosition"
    class GetSpatializedVolumes(HookFactory):
        _name = "AkMixConnection::GetSpatializedVolumes"
    class GetSpeakerPanningType(HookFactory):
        _name = "AkMixConnection::GetSpeakerPanningType"
    class GetSpread(HookFactory):
        _name = "AkMixConnection::GetSpread"
    class GetUserData(HookFactory):
        _name = "AkMixConnection::GetUserData"
    class GetVoiceInfo(HookFactory):
        _name = "AkMixConnection::GetVoiceInfo"
    class HasListenerRelativeRouting(HookFactory):
        _name = "AkMixConnection::HasListenerRelativeRouting"
    class SetUserData(HookFactory):
        _name = "AkMixConnection::SetUserData"

class AkAudioObject:
    class Transfer(HookFactory):
        _name = "AkAudioObject::Transfer"
    class CopyContents(HookFactory):
        _name = "AkAudioObject::CopyContents"

class CAkEnvelopeProcess:
    class _Process(HookFactory):
        _templates = ("T0", )
        _name = "CAkEnvelopeProcess::_Process<{T0}>"

class CAkModulatorEngine:
    class AddContext(HookFactory):
        _name = "CAkModulatorEngine::AddContext"
    class CleanUpFinishedCtxs(HookFactory):
        _name = "CAkModulatorEngine::CleanUpFinishedCtxs"
    class ProcessModulators(HookFactory):
        _name = "CAkModulatorEngine::ProcessModulators"

class BufferOutputPolicy:
    class Ramp(HookFactory):
        _name = "BufferOutputPolicy::Ramp"

class CAkMarkers:
    class CAkMarkers(HookFactory):
        _name = "CAkMarkers::CAkMarkers"
    class Allocate(HookFactory):
        _name = "CAkMarkers::Allocate"
    class Free(HookFactory):
        _name = "CAkMarkers::Free"
    class GetClosestMarker(HookFactory):
        _name = "CAkMarkers::GetClosestMarker"
    class NotifyRelevantMarkers(HookFactory):
        _name = "CAkMarkers::NotifyRelevantMarkers"
    class SaveMarkersForBuffer(HookFactory):
        _name = "CAkMarkers::SaveMarkersForBuffer"
    class SetLabel(HookFactory):
        _name = "CAkMarkers::SetLabel"

class AkVBAPMap:
    class AddPointsInArea(HookFactory):
        _name = "AkVBAPMap::AddPointsInArea"
    class Allocate(HookFactory):
        _name = "AkVBAPMap::Allocate"
    class ComputeVBAP3D(HookFactory):
        _name = "AkVBAPMap::ComputeVBAP3D"
    class ComputeVBAP(HookFactory):
        _name = "AkVBAPMap::ComputeVBAP"
    class ComputeVBAPSquared(HookFactory):
        _name = "AkVBAPMap::ComputeVBAPSquared"
        _overload: overloads.AkVBAPMap.ComputeVBAPSquared.overloads = "AkVBAPMap *, float, float, unsigned int, float *"
        @classmethod
        def overload(cls, overload_args: overloads.AkVBAPMap.ComputeVBAPSquared.overloads):
            cls._overload = overload_args
            return cls
    class FindPointInTriangle(HookFactory):
        _name = "AkVBAPMap::FindPointInTriangle"
    class FindTriangle(HookFactory):
        _name = "AkVBAPMap::FindTriangle"
    class NormalizePreSquaredGain(HookFactory):
        _name = "AkVBAPMap::NormalizePreSquaredGain"
    class PointsToVBAPMap(HookFactory):
        _name = "AkVBAPMap::PointsToVBAPMap"
    class RunTriangulation(HookFactory):
        _name = "AkVBAPMap::RunTriangulation"
    class Term(HookFactory):
        _name = "AkVBAPMap::Term"

class AkAudioObjectRegistry:
    class AkAudioObjectRegistry(HookFactory):
        _name = "AkAudioObjectRegistry::AkAudioObjectRegistry"
    class Record:
        class Record(HookFactory):
            _name = "AkAudioObjectRegistry::Record::Record"
        class Transfer(HookFactory):
            _name = "AkAudioObjectRegistry::Record::Transfer"
    class CollectGarbage(HookFactory):
        _name = "AkAudioObjectRegistry::CollectGarbage"
    class CreateOrUpdateRecord(HookFactory):
        _name = "AkAudioObjectRegistry::CreateOrUpdateRecord"
    class Init(HookFactory):
        _name = "AkAudioObjectRegistry::Init"
    class Term(HookFactory):
        _name = "AkAudioObjectRegistry::Term"
    class Triage(HookFactory):
        _name = "AkAudioObjectRegistry::Triage"
    class WriteSystemAudioObjectPointers(HookFactory):
        _name = "AkAudioObjectRegistry::WriteSystemAudioObjectPointers"

class CAkVPLMixBusNode:
    class CAkVPLMixBusNode(HookFactory):
        _name = "CAkVPLMixBusNode::CAkVPLMixBusNode"
    class Connect(HookFactory):
        _name = "CAkVPLMixBusNode::Connect"
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLMixBusNode::ConsumeBuffer"
    class Disconnect(HookFactory):
        _name = "CAkVPLMixBusNode::Disconnect"
    class PostProcessFx(HookFactory):
        _name = "CAkVPLMixBusNode::PostProcessFx"
    class ProcessInputAndPushToConnections(HookFactory):
        _name = "CAkVPLMixBusNode::ProcessInputAndPushToConnections"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLMixBusNode::ReleaseBuffer"

class ComputeChannelKPower(HookFactory):
    _name = "ComputeChannelKPower"

class ConvolvePolyPhase(HookFactory):
    _name = "ConvolvePolyPhase"

class AkMeterCtxFactory:
    class CreateMeterContext(HookFactory):
        _name = "AkMeterCtxFactory::CreateMeterContext"

class MeterBuffer(HookFactory):
    _name = "MeterBuffer"

class CAkBusVolumes:
    class _GetOutputID(HookFactory):
        _name = "CAkBusVolumes::_GetOutputID"

class CAkSinkDummy:
    class CAkSinkDummy(HookFactory):
        _name = "CAkSinkDummy::CAkSinkDummy"
    class Init(HookFactory):
        _name = "CAkSinkDummy::Init"
    class IsDataNeeded(HookFactory):
        _name = "CAkSinkDummy::IsDataNeeded"

class AkCreateDummySink(HookFactory):
    _name = "AkCreateDummySink"

class CAkSinkCoreAudio:
    class GetPluginInfo(HookFactory):
        _name = "CAkSinkCoreAudio::GetPluginInfo"
    class CAkSinkCoreAudio(HookFactory):
        _name = "CAkSinkCoreAudio::CAkSinkCoreAudio"
    class Get3DAudioCapabilities(HookFactory):
        _name = "CAkSinkCoreAudio::Get3DAudioCapabilities"
    class Init(HookFactory):
        _name = "CAkSinkCoreAudio::Init"
    class InitializeSpatialStream(HookFactory):
        _name = "CAkSinkCoreAudio::InitializeSpatialStream"
    class InitializeWasapiStream(HookFactory):
        _name = "CAkSinkCoreAudio::InitializeWasapiStream"
    class IsDataNeeded(HookFactory):
        _name = "CAkSinkCoreAudio::IsDataNeeded"
    class IsStarved(HookFactory):
        _name = "CAkSinkCoreAudio::IsStarved"
    class MixAndInterleave(HookFactory):
        _name = "CAkSinkCoreAudio::MixAndInterleave"
    class NegotiateWasapiConfig(HookFactory):
        _name = "CAkSinkCoreAudio::NegotiateWasapiConfig"
    class OnFrameEnd(HookFactory):
        _name = "CAkSinkCoreAudio::OnFrameEnd"
    class ResetStarved(HookFactory):
        _name = "CAkSinkCoreAudio::ResetStarved"
    class SpatialSinkWorkCallback(HookFactory):
        _name = "CAkSinkCoreAudio::SpatialSinkWorkCallback"
    class SubmitWasapiBuffer(HookFactory):
        _name = "CAkSinkCoreAudio::SubmitWasapiBuffer"
    class Term(HookFactory):
        _name = "CAkSinkCoreAudio::Term"

class AkMixer:
    class InitMixerFunctTable(HookFactory):
        _name = "AkMixer::InitMixerFunctTable"
    class MixBypassNinNChannels(HookFactory):
        _name = "AkMixer::MixBypassNinNChannels"
    class MixChannel(HookFactory):
        _name = "AkMixer::MixChannel"
    class MixFilterNinNChannels(HookFactory):
        _name = "AkMixer::MixFilterNinNChannels"
    class MixNinNChannels(HookFactory):
        _name = "AkMixer::MixNinNChannels"

class DummySinkParams:
    class DummySinkParams(HookFactory):
        _name = "DummySinkParams::DummySinkParams"
    class Clone(HookFactory):
        _name = "DummySinkParams::Clone"

class AkCreateDummySinkParam(HookFactory):
    _name = "AkCreateDummySinkParam"

class AkCreateSystemSinkParam(HookFactory):
    _name = "AkCreateSystemSinkParam"

class SystemSinkParams:
    class Clone(HookFactory):
        _name = "SystemSinkParams::Clone"
    class SetParam(HookFactory):
        _name = "SystemSinkParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "SystemSinkParams::SetParamsBlock"

class AkSinkPluginParam:
    class Init(HookFactory):
        _name = "AkSinkPluginParam::Init"

class CAkVPLBQFNode:
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLBQFNode::ConsumeBuffer"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLBQFNode::ReleaseBuffer"
    class VirtualOn(HookFactory):
        _name = "CAkVPLBQFNode::VirtualOn"

class CAkResampler:
    class CAkResampler(HookFactory):
        _name = "CAkResampler::CAkResampler"
    class Execute(HookFactory):
        _name = "CAkResampler::Execute"
    class GetLastRate(HookFactory):
        _name = "CAkResampler::GetLastRate"
    class Init(HookFactory):
        _name = "CAkResampler::Init"
    class InitDSPFunctTable(HookFactory):
        _name = "CAkResampler::InitDSPFunctTable"
    class InterleaveAndSwapOutput(HookFactory):
        _name = "CAkResampler::InterleaveAndSwapOutput"
    class ResetOffsets(HookFactory):
        _name = "CAkResampler::ResetOffsets"
    class SetChannelMapping(HookFactory):
        _name = "CAkResampler::SetChannelMapping"
    class SetPitch(HookFactory):
        _name = "CAkResampler::SetPitch"
    class SetPitchForTimeSkip(HookFactory):
        _name = "CAkResampler::SetPitchForTimeSkip"
    class SwitchTo(HookFactory):
        _name = "CAkResampler::SwitchTo"
    class Term(HookFactory):
        _name = "CAkResampler::Term"

class CAkVPLVolAutmNode:
    class ApplyModsToVolume(HookFactory):
        _name = "CAkVPLVolAutmNode::ApplyModsToVolume"
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLVolAutmNode::ConsumeBuffer"
    class Execute(HookFactory):
        _name = "CAkVPLVolAutmNode::Execute"
    class Init(HookFactory):
        _name = "CAkVPLVolAutmNode::Init"

class CAkBusFXContext:
    class CAkBusFXContext(HookFactory):
        _name = "CAkBusFXContext::CAkBusFXContext"
    class ComputeSpeakerVolumesDirect(HookFactory):
        _name = "CAkBusFXContext::ComputeSpeakerVolumesDirect"
    class GetAudioNodeID(HookFactory):
        _name = "CAkBusFXContext::GetAudioNodeID"
    class GetDownstreamGain(HookFactory):
        _name = "CAkBusFXContext::GetDownstreamGain"
    class GetMixerCtx(HookFactory):
        _name = "CAkBusFXContext::GetMixerCtx"
    class GetOutputID(HookFactory):
        _name = "CAkBusFXContext::GetOutputID"
    class GetOutputObjects(HookFactory):
        _name = "CAkBusFXContext::GetOutputObjects"
    class GetParentChannelConfig(HookFactory):
        _name = "CAkBusFXContext::GetParentChannelConfig"
    class GetPluginCustomGameData(HookFactory):
        _name = "CAkBusFXContext::GetPluginCustomGameData"
    class GetPluginMedia(HookFactory):
        _name = "CAkBusFXContext::GetPluginMedia"
    class IsSendModeEffect(HookFactory):
        _name = "CAkBusFXContext::IsSendModeEffect"

class AkDataReferenceArray:
    class AcquireData(HookFactory):
        _name = "AkDataReferenceArray::AcquireData"
    class FindAlternateMedia(HookFactory):
        _name = "AkDataReferenceArray::FindAlternateMedia"

class CAkMixBusCtx:
    class CAkMixBusCtx(HookFactory):
        _name = "CAkMixBusCtx::CAkMixBusCtx"
    class GetTargetedParamsSet(HookFactory):
        _name = "CAkMixBusCtx::GetTargetedParamsSet"
    class Init(HookFactory):
        _name = "CAkMixBusCtx::Init"
    class ManageAuxRoutableBusses(HookFactory):
        _name = "CAkMixBusCtx::ManageAuxRoutableBusses"
    class NotifyParamChanged(HookFactory):
        _name = "CAkMixBusCtx::NotifyParamChanged"
    class RefreshParameters(HookFactory):
        _name = "CAkMixBusCtx::RefreshParameters"
    class Term(HookFactory):
        _name = "CAkMixBusCtx::Term"
    class UpdateTargetParam(HookFactory):
        _name = "CAkMixBusCtx::UpdateTargetParam"

class AkHashIndexAdd(HookFactory):
    _name = "AkHashIndexAdd"

class AkHashIndexGetEntry(HookFactory):
    _name = "AkHashIndexGetEntry"

class AkHashIndexGetFirst(HookFactory):
    _name = "AkHashIndexGetFirst"

class AkHashIndexGetNext(HookFactory):
    _name = "AkHashIndexGetNext"

class AkHashIndexInit(HookFactory):
    _name = "AkHashIndexInit"

class AkHashIndexRemove(HookFactory):
    _name = "AkHashIndexRemove"

class AkHashIndexTerm(HookFactory):
    _name = "AkHashIndexTerm"

class Grow(HookFactory):
    _name = "Grow"

class CAkDynamicSequencePBI:
    class CAkDynamicSequencePBI(HookFactory):
        _name = "CAkDynamicSequencePBI::CAkDynamicSequencePBI"
    class PlayNextElement(HookFactory):
        _name = "CAkDynamicSequencePBI::PlayNextElement"
    class PrepareNextToPlay(HookFactory):
        _name = "CAkDynamicSequencePBI::PrepareNextToPlay"
    class Term(HookFactory):
        _name = "CAkDynamicSequencePBI::Term"

class FileCaptureWriterFactory:
    class CreateWriter(HookFactory):
        _name = "FileCaptureWriterFactory::CreateWriter"
    class Instance(HookFactory):
        _name = "FileCaptureWriterFactory::Instance"

class CAkContainerBase:
    class CAkContainerBase(HookFactory):
        _name = "CAkContainerBase::CAkContainerBase"
    class CanAddChild(HookFactory):
        _name = "CAkContainerBase::CanAddChild"

class CAkPlayListRandom:
    class CAkPlayListRandom(HookFactory):
        _name = "CAkPlayListRandom::CAkPlayListRandom"
    class Add(HookFactory):
        _name = "CAkPlayListRandom::Add"
    class CalculateTotalWeight(HookFactory):
        _name = "CAkPlayListRandom::CalculateTotalWeight"
    class Destroy(HookFactory):
        _name = "CAkPlayListRandom::Destroy"
    class Exists(HookFactory):
        _name = "CAkPlayListRandom::Exists"
    class GetPosition(HookFactory):
        _name = "CAkPlayListRandom::GetPosition"
    class GetWeight(HookFactory):
        _name = "CAkPlayListRandom::GetWeight"
    class ID(HookFactory):
        _name = "CAkPlayListRandom::ID"
    class Remove(HookFactory):
        _name = "CAkPlayListRandom::Remove"
    class SetWeight(HookFactory):
        _name = "CAkPlayListRandom::SetWeight"

class CAkContinuousPBI:
    class CAkContinuousPBI(HookFactory):
        _name = "CAkContinuousPBI::CAkContinuousPBI"
    class CanSeek(HookFactory):
        _name = "CAkContinuousPBI::CanSeek"
    class Init(HookFactory):
        _name = "CAkContinuousPBI::Init"
    class PlayToEnd(HookFactory):
        _name = "CAkContinuousPBI::PlayToEnd"
    class PrepareNextToPlay(HookFactory):
        _name = "CAkContinuousPBI::PrepareNextToPlay"
    class PrepareSampleAccurateTransition(HookFactory):
        _name = "CAkContinuousPBI::PrepareSampleAccurateTransition"
    class SeekPercent(HookFactory):
        _name = "CAkContinuousPBI::SeekPercent"
    class SeekTimeAbsolute(HookFactory):
        _name = "CAkContinuousPBI::SeekTimeAbsolute"
    class SetEstimatedLength(HookFactory):
        _name = "CAkContinuousPBI::SetEstimatedLength"
    class SetPauseStateForContinuous(HookFactory):
        _name = "CAkContinuousPBI::SetPauseStateForContinuous"
    class Term(HookFactory):
        _name = "CAkContinuousPBI::Term"
    class _Stop(HookFactory):
        _name = "CAkContinuousPBI::_Stop"

class AkTimeConv__MillisecondsToSamples(HookFactory):
    _name = "AkTimeConv__MillisecondsToSamples"

class CAkSrcLpHpFilter:
    class CAkSrcLpHpFilter(HookFactory):
        _name = "CAkSrcLpHpFilter::CAkSrcLpHpFilter"
    class BypassMono(HookFactory):
        _name = "CAkSrcLpHpFilter::BypassMono"
    class Execute(HookFactory):
        _name = "CAkSrcLpHpFilter::Execute"
    class ExecuteOutOfPlace(HookFactory):
        _name = "CAkSrcLpHpFilter::ExecuteOutOfPlace"
    class ManageBQFChange(HookFactory):
        _name = "CAkSrcLpHpFilter::ManageBQFChange"
    class ResetRamp(HookFactory):
        _name = "CAkSrcLpHpFilter::ResetRamp"
    class Term(HookFactory):
        _name = "CAkSrcLpHpFilter::Term"
    class Transfer(HookFactory):
        _name = "CAkSrcLpHpFilter::Transfer"

class CAkVPLPitchNode:
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLPitchNode::ConsumeBuffer"
    class GetBuffer(HookFactory):
        _name = "CAkVPLPitchNode::GetBuffer"
    class Init(HookFactory):
        _name = "CAkVPLPitchNode::Init"
    class PipelineAdded(HookFactory):
        _name = "CAkVPLPitchNode::PipelineAdded"
    class PopMarkers(HookFactory):
        _name = "CAkVPLPitchNode::PopMarkers"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVPLPitchNode::ReleaseBuffer"
    class ReleaseInputBuffer(HookFactory):
        _name = "CAkVPLPitchNode::ReleaseInputBuffer"
    class RelocateMedia(HookFactory):
        _name = "CAkVPLPitchNode::RelocateMedia"
    class Seek(HookFactory):
        _name = "CAkVPLPitchNode::Seek"
    class SwitchToNextSrc(HookFactory):
        _name = "CAkVPLPitchNode::SwitchToNextSrc"
    class Term(HookFactory):
        _name = "CAkVPLPitchNode::Term"
    class TimeSkip(HookFactory):
        _name = "CAkVPLPitchNode::TimeSkip"
    class VirtualOff(HookFactory):
        _name = "CAkVPLPitchNode::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkVPLPitchNode::VirtualOn"

class CAkVPLFilterNodeObjectProc:
    class ConsumeBuffer(HookFactory):
        _name = "CAkVPLFilterNodeObjectProc::ConsumeBuffer"
    class TimeSkip(HookFactory):
        _name = "CAkVPLFilterNodeObjectProc::TimeSkip"

class CAkSpatialAudioComponent:
    class CAkSpatialAudioComponent(HookFactory):
        _name = "CAkSpatialAudioComponent::CAkSpatialAudioComponent"
    class GetEarlyReflectionsAuxSends(HookFactory):
        _name = "CAkSpatialAudioComponent::GetEarlyReflectionsAuxSends"
    class GetRoomReverbAuxSends(HookFactory):
        _name = "CAkSpatialAudioComponent::GetRoomReverbAuxSends"
    class IsReflectionsAuxBus(HookFactory):
        _name = "CAkSpatialAudioComponent::IsReflectionsAuxBus"
    class TrackReflectAuxBusCtx(HookFactory):
        _name = "CAkSpatialAudioComponent::TrackReflectAuxBusCtx"
    class TrackVoice(HookFactory):
        _name = "CAkSpatialAudioComponent::TrackVoice"
    class UntrackReflectAuxBusCtx(HookFactory):
        _name = "CAkSpatialAudioComponent::UntrackReflectAuxBusCtx"
    class UntrackVoice(HookFactory):
        _name = "CAkSpatialAudioComponent::UntrackVoice"
    class UpdateTracking(HookFactory):
        _name = "CAkSpatialAudioComponent::UpdateTracking"

class CAkActionPlay:
    class CAkActionPlay(HookFactory):
        _name = "CAkActionPlay::CAkActionPlay"
    class Create(HookFactory):
        _name = "CAkActionPlay::Create"
    class Execute(HookFactory):
        _name = "CAkActionPlay::Execute"
    class SetActionParams(HookFactory):
        _name = "CAkActionPlay::SetActionParams"

class CAkActionPause:
    class Create(HookFactory):
        _name = "CAkActionPause::Create"
    class Execute(HookFactory):
        _name = "CAkActionPause::Execute"
    class SetActionActiveParams(HookFactory):
        _name = "CAkActionPause::SetActionActiveParams"
    class SetActionSpecificParams(HookFactory):
        _name = "CAkActionPause::SetActionSpecificParams"

class CAkActionResume:
    class Create(HookFactory):
        _name = "CAkActionResume::Create"
    class Execute(HookFactory):
        _name = "CAkActionResume::Execute"
    class SetActionActiveParams(HookFactory):
        _name = "CAkActionResume::SetActionActiveParams"

class CAkActionBreak:
    class Create(HookFactory):
        _name = "CAkActionBreak::Create"
    class Execute(HookFactory):
        _name = "CAkActionBreak::Execute"

class CAkActionMute:
    class Create(HookFactory):
        _name = "CAkActionMute::Create"
    class ExecResetValue(HookFactory):
        _name = "CAkActionMute::ExecResetValue"
        _overload: overloads.CAkActionMute.ExecResetValue.overloads = "CAkActionMute *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionMute.ExecResetValue.overloads):
            cls._overload = overload_args
            return cls
    class ExecResetValueExcept(HookFactory):
        _name = "CAkActionMute::ExecResetValueExcept"
        _overload: overloads.CAkActionMute.ExecResetValueExcept.overloads = "CAkActionMute *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionMute.ExecResetValueExcept.overloads):
            cls._overload = overload_args
            return cls
    class ExecSetValue(HookFactory):
        _name = "CAkActionMute::ExecSetValue"
        _overload: overloads.CAkActionMute.ExecSetValue.overloads = "CAkActionMute *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionMute.ExecSetValue.overloads):
            cls._overload = overload_args
            return cls

class CAkActionSetAkProp:
    class Create(HookFactory):
        _name = "CAkActionSetAkProp::Create"
    class ExecResetValue(HookFactory):
        _name = "CAkActionSetAkProp::ExecResetValue"
        _overload: overloads.CAkActionSetAkProp.ExecResetValue.overloads = "CAkActionSetAkProp *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionSetAkProp.ExecResetValue.overloads):
            cls._overload = overload_args
            return cls
    class ExecResetValueExcept(HookFactory):
        _name = "CAkActionSetAkProp::ExecResetValueExcept"
        _overload: overloads.CAkActionSetAkProp.ExecResetValueExcept.overloads = "CAkActionSetAkProp *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionSetAkProp.ExecResetValueExcept.overloads):
            cls._overload = overload_args
            return cls
    class ExecSetValue(HookFactory):
        _name = "CAkActionSetAkProp::ExecSetValue"
        _overload: overloads.CAkActionSetAkProp.ExecSetValue.overloads = "CAkActionSetAkProp *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionSetAkProp.ExecSetValue.overloads):
            cls._overload = overload_args
            return cls
    class ExecSetValueInternal(HookFactory):
        _name = "CAkActionSetAkProp::ExecSetValueInternal"
    class SetActionSpecificParams(HookFactory):
        _name = "CAkActionSetAkProp::SetActionSpecificParams"

class CAkActionSetState:
    class Create(HookFactory):
        _name = "CAkActionSetState::Create"
    class Execute(HookFactory):
        _name = "CAkActionSetState::Execute"

class CAkActionSetSwitch:
    class SetActionParams(HookFactory):
        _name = "CAkActionSetSwitch::SetActionParams"
    class Create(HookFactory):
        _name = "CAkActionSetSwitch::Create"
    class Execute(HookFactory):
        _name = "CAkActionSetSwitch::Execute"

class CAkActionSetGameParameter:
    class Create(HookFactory):
        _name = "CAkActionSetGameParameter::Create"
    class ExecResetValue(HookFactory):
        _name = "CAkActionSetGameParameter::ExecResetValue"
        _overload: overloads.CAkActionSetGameParameter.ExecResetValue.overloads = "CAkActionSetGameParameter *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionSetGameParameter.ExecResetValue.overloads):
            cls._overload = overload_args
            return cls
    class ExecSetValue(HookFactory):
        _name = "CAkActionSetGameParameter::ExecSetValue"
        _overload: overloads.CAkActionSetGameParameter.ExecSetValue.overloads = "CAkActionSetGameParameter *, CAkParameterNodeBase *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkActionSetGameParameter.ExecSetValue.overloads):
            cls._overload = overload_args
            return cls
    class SetActionSpecificParams(HookFactory):
        _name = "CAkActionSetGameParameter::SetActionSpecificParams"

class CAkActionUseState:
    class Create(HookFactory):
        _name = "CAkActionUseState::Create"
    class Execute(HookFactory):
        _name = "CAkActionUseState::Execute"

class CAkActionBypassFX:
    class Create(HookFactory):
        _name = "CAkActionBypassFX::Create"
    class Execute(HookFactory):
        _name = "CAkActionBypassFX::Execute"
    class ResetBypassFXAEHelper(HookFactory):
        _name = "CAkActionBypassFX::ResetBypassFXAEHelper"
    class SetActionParams(HookFactory):
        _name = "CAkActionBypassFX::SetActionParams"

class CAkActionTrigger:
    class Create(HookFactory):
        _name = "CAkActionTrigger::Create"
    class Execute(HookFactory):
        _name = "CAkActionTrigger::Execute"

class CAkActionSeek:
    class Create(HookFactory):
        _name = "CAkActionSeek::Create"
    class Execute(HookFactory):
        _name = "CAkActionSeek::Execute"
    class SetActionParams(HookFactory):
        _name = "CAkActionSeek::SetActionParams"

class CAkActionRelease:
    class Create(HookFactory):
        _name = "CAkActionRelease::Create"
    class Execute(HookFactory):
        _name = "CAkActionRelease::Execute"

class CAkActionPlayEvent:
    class Create(HookFactory):
        _name = "CAkActionPlayEvent::Create"
    class Execute(HookFactory):
        _name = "CAkActionPlayEvent::Execute"

class CAkActionResetPlaylist:
    class Create(HookFactory):
        _name = "CAkActionResetPlaylist::Create"
    class Execute(HookFactory):
        _name = "CAkActionResetPlaylist::Execute"

class CAkActionActive:
    class CAkActionActive(HookFactory):
        _name = "CAkActionActive::CAkActionActive"
    class AllExecExcept(HookFactory):
        _name = "CAkActionActive::AllExecExcept"
    class Exec(HookFactory):
        _name = "CAkActionActive::Exec"

class CAkActionSetValue:
    class SetActionParams(HookFactory):
        _name = "CAkActionSetValue::SetActionParams"
    class CAkActionSetValue(HookFactory):
        _name = "CAkActionSetValue::CAkActionSetValue"
    class Execute(HookFactory):
        _name = "CAkActionSetValue::Execute"
    class ResetAEHelper(HookFactory):
        _name = "CAkActionSetValue::ResetAEHelper"

class AkAtomicListAdd(HookFactory):
    _name = "AkAtomicListAdd"

class AkAtomicListGetFirst(HookFactory):
    _name = "AkAtomicListGetFirst"

class AkAtomicListInit(HookFactory):
    _name = "AkAtomicListInit"

class AkAtomicListRemove(HookFactory):
    _name = "AkAtomicListRemove"

class AkAtomicListRemoveAll(HookFactory):
    _name = "AkAtomicListRemoveAll"

class AkAtomicListTerm(HookFactory):
    _name = "AkAtomicListTerm"

class AkAudioMix:
    class Allocate(HookFactory):
        _name = "AkAudioMix::Allocate"
    class Free(HookFactory):
        _name = "AkAudioMix::Free"

class AkSystemOutputMeta:
    class Clone(HookFactory):
        _name = "AkSystemOutputMeta::Clone"
    class Init(HookFactory):
        _name = "AkSystemOutputMeta::Init"
    class SetParam(HookFactory):
        _name = "AkSystemOutputMeta::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "AkSystemOutputMeta::SetParamsBlock"

class CreateAkSystemOutputMeta(HookFactory):
    _name = "CreateAkSystemOutputMeta"

class AkCreateDefaultSink(HookFactory):
    _name = "AkCreateDefaultSink"

class AkSpatialSinkWorkCallback(HookFactory):
    _name = "AkSpatialSinkWorkCallback"

class CopyWAVEFORMATEX(HookFactory):
    _name = "CopyWAVEFORMATEX"

class WaveFormatToChannelConfig(HookFactory):
    _name = "WaveFormatToChannelConfig"

class MixChannel_V4F32(HookFactory):
    _name = "MixChannel_V4F32"

class MixNinNChannels_V4F32(HookFactory):
    _name = "MixNinNChannels_V4F32"

class MixChannel_V8F32_AVX2(HookFactory):
    _name = "MixChannel_V8F32_AVX2"

class MixNinNChannels_V8F32_AVX2(HookFactory):
    _name = "MixNinNChannels_V8F32_AVX2"

class Bypass_I16_1ChanV4F32(HookFactory):
    _name = "Bypass_I16_1ChanV4F32"

class Bypass_I16_2ChanV4F32(HookFactory):
    _name = "Bypass_I16_2ChanV4F32"

class Bypass_I16_NChanV4F32(HookFactory):
    _name = "Bypass_I16_NChanV4F32"

class Fixed_I16_1ChanV4F32(HookFactory):
    _name = "Fixed_I16_1ChanV4F32"

class Fixed_I16_2ChanV4F32(HookFactory):
    _name = "Fixed_I16_2ChanV4F32"

class Fixed_I16_NChanV4F32(HookFactory):
    _name = "Fixed_I16_NChanV4F32"

class Fixed_Native_1ChanV4F32(HookFactory):
    _name = "Fixed_Native_1ChanV4F32"

class Fixed_Native_2ChanV4F32(HookFactory):
    _name = "Fixed_Native_2ChanV4F32"

class Fixed_Native_NChanV4F32(HookFactory):
    _name = "Fixed_Native_NChanV4F32"

class Interpolating_I16_1Chan(HookFactory):
    _name = "Interpolating_I16_1Chan"

class Interpolating_I16_2Chan(HookFactory):
    _name = "Interpolating_I16_2Chan"

class Interpolating_Native_1Chan(HookFactory):
    _name = "Interpolating_Native_1Chan"

class Interpolating_Native_2Chan(HookFactory):
    _name = "Interpolating_Native_2Chan"

class Bypass_I16_1ChanAVX2(HookFactory):
    _name = "Bypass_I16_1ChanAVX2"

class Bypass_I16_2ChanAVX2(HookFactory):
    _name = "Bypass_I16_2ChanAVX2"

class Bypass_I16_NChanAVX2(HookFactory):
    _name = "Bypass_I16_NChanAVX2"

class Fixed_I16_1ChanAVX2(HookFactory):
    _name = "Fixed_I16_1ChanAVX2"

class Fixed_I16_2ChanAVX2(HookFactory):
    _name = "Fixed_I16_2ChanAVX2"

class Fixed_I16_NChanAVX2(HookFactory):
    _name = "Fixed_I16_NChanAVX2"

class Fixed_Native_1ChanAVX2(HookFactory):
    _name = "Fixed_Native_1ChanAVX2"

class Fixed_Native_2ChanAVX2(HookFactory):
    _name = "Fixed_Native_2ChanAVX2"

class Fixed_Native_NChanAVX2(HookFactory):
    _name = "Fixed_Native_NChanAVX2"

class Bypass_Native_NChan(HookFactory):
    _name = "Bypass_Native_NChan"

class Interleave_Native_NChan(HookFactory):
    _name = "Interleave_Native_NChan"

class Interpolating_I16_NChan(HookFactory):
    _name = "Interpolating_I16_NChan"

class Interpolating_Native_NChan(HookFactory):
    _name = "Interpolating_Native_NChan"

class CAkSrcPhysModel:
    class CAkSrcPhysModel(HookFactory):
        _name = "CAkSrcPhysModel::CAkSrcPhysModel"
    class AllocGrainCodec(HookFactory):
        _name = "CAkSrcPhysModel::AllocGrainCodec"
    class ChangeSourcePosition(HookFactory):
        _name = "CAkSrcPhysModel::ChangeSourcePosition"
    class ComputePriorityWithDistance(HookFactory):
        _name = "CAkSrcPhysModel::ComputePriorityWithDistance"
    class FreeGrainCodec(HookFactory):
        _name = "CAkSrcPhysModel::FreeGrainCodec"
    class GetAnalyzedEnvelope(HookFactory):
        _name = "CAkSrcPhysModel::GetAnalyzedEnvelope"
    class GetAudioNodeID(HookFactory):
        _name = "CAkSrcPhysModel::GetAudioNodeID"
    class GetBuffer(HookFactory):
        _name = "CAkSrcPhysModel::GetBuffer"
    class GetCookie(HookFactory):
        _name = "CAkSrcPhysModel::GetCookie"
    class GetDuration(HookFactory):
        _name = "CAkSrcPhysModel::GetDuration"
    class GetEmitterListenerPair(HookFactory):
        _name = "CAkSrcPhysModel::GetEmitterListenerPair"
    class GetGameObjectID(HookFactory):
        _name = "CAkSrcPhysModel::GetGameObjectID"
    class GetGameObjectInfo(HookFactory):
        _name = "CAkSrcPhysModel::GetGameObjectInfo"
    class GetGameObjectMultiPositionType(HookFactory):
        _name = "CAkSrcPhysModel::GetGameObjectMultiPositionType"
    class GetGameObjectPosition(HookFactory):
        _name = "CAkSrcPhysModel::GetGameObjectPosition"
    class GetGameObjectScaling(HookFactory):
        _name = "CAkSrcPhysModel::GetGameObjectScaling"
    class GetListenerData(HookFactory):
        _name = "CAkSrcPhysModel::GetListenerData"
    class GetListeners(HookFactory):
        _name = "CAkSrcPhysModel::GetListeners"
    class GetMidiEvent(HookFactory):
        _name = "CAkSrcPhysModel::GetMidiEvent"
    class GetNumEmitterListenerPairs(HookFactory):
        _name = "CAkSrcPhysModel::GetNumEmitterListenerPairs"
    class GetNumGameObjectPositions(HookFactory):
        _name = "CAkSrcPhysModel::GetNumGameObjectPositions"
    class GetNumLoops(HookFactory):
        _name = "CAkSrcPhysModel::GetNumLoops"
    class GetOutputBusNode(HookFactory):
        _name = "CAkSrcPhysModel::GetOutputBusNode"
    class GetParentChannelConfig(HookFactory):
        _name = "CAkSrcPhysModel::GetParentChannelConfig"
    class GetPlayingID(HookFactory):
        _name = "CAkSrcPhysModel::GetPlayingID"
    class GetPluginMedia(HookFactory):
        _name = "CAkSrcPhysModel::GetPluginMedia"
    class GetPriority(HookFactory):
        _name = "CAkSrcPhysModel::GetPriority"
    class GetVoiceInfo(HookFactory):
        _name = "CAkSrcPhysModel::GetVoiceInfo"
    class IsUsingThisSlot(HookFactory):
        _name = "CAkSrcPhysModel::IsUsingThisSlot"
        _overload: overloads.CAkSrcPhysModel.IsUsingThisSlot.overloads = "CAkSrcPhysModel *, const unsigned __int8 *"
        @classmethod
        def overload(cls, overload_args: overloads.CAkSrcPhysModel.IsUsingThisSlot.overloads):
            cls._overload = overload_args
            return cls
    class ReleaseBuffer(HookFactory):
        _name = "CAkSrcPhysModel::ReleaseBuffer"
    class RestartSourcePlugin(HookFactory):
        _name = "CAkSrcPhysModel::RestartSourcePlugin"
    class StartStream(HookFactory):
        _name = "CAkSrcPhysModel::StartStream"
    class StopLooping(HookFactory):
        _name = "CAkSrcPhysModel::StopLooping"
    class StopStream(HookFactory):
        _name = "CAkSrcPhysModel::StopStream"
    class PluginParams:
        class Term(HookFactory):
            _name = "CAkSrcPhysModel::PluginParams::Term"
    class TimeSkip(HookFactory):
        _name = "CAkSrcPhysModel::TimeSkip"
    class VirtualOn(HookFactory):
        _name = "CAkSrcPhysModel::VirtualOn"

class CAkSrcFileADPCM:
    class CAkSrcFileADPCM(HookFactory):
        _name = "CAkSrcFileADPCM::CAkSrcFileADPCM"
    class ChangeSourcePosition(HookFactory):
        _name = "CAkSrcFileADPCM::ChangeSourcePosition"
    class FindClosestFileOffset(HookFactory):
        _name = "CAkSrcFileADPCM::FindClosestFileOffset"
    class GetBuffer(HookFactory):
        _name = "CAkSrcFileADPCM::GetBuffer"
    class ParseHeader(HookFactory):
        _name = "CAkSrcFileADPCM::ParseHeader"
    class StopStream(HookFactory):
        _name = "CAkSrcFileADPCM::StopStream"
    class VirtualOn(HookFactory):
        _name = "CAkSrcFileADPCM::VirtualOn"

class CAkSrcBaseEx:
    class OnLoopComplete(HookFactory):
        _name = "CAkSrcBaseEx::OnLoopComplete"
    class SetInfiniteLooping(HookFactory):
        _name = "CAkSrcBaseEx::SetInfiniteLooping"
    class CAkSrcBaseEx(HookFactory):
        _name = "CAkSrcBaseEx::CAkSrcBaseEx"
    class GetAnalyzedEnvelope(HookFactory):
        _name = "CAkSrcBaseEx::GetAnalyzedEnvelope"
    class GetDuration(HookFactory):
        _name = "CAkSrcBaseEx::GetDuration"
    class GetSourceOffset(HookFactory):
        _name = "CAkSrcBaseEx::GetSourceOffset"
    class GetSourceSampleRate(HookFactory):
        _name = "CAkSrcBaseEx::GetSourceSampleRate"
    class Seek(HookFactory):
        _name = "CAkSrcBaseEx::Seek"
    class StopLooping(HookFactory):
        _name = "CAkSrcBaseEx::StopLooping"
    class StopStream(HookFactory):
        _name = "CAkSrcBaseEx::StopStream"
    class TimeSkip(HookFactory):
        _name = "CAkSrcBaseEx::TimeSkip"

class AkHpfParamEval:
    class EvalCutoff(HookFactory):
        _name = "AkHpfParamEval::EvalCutoff"

class AkLpfParamEval:
    class EvalCutoff(HookFactory):
        _name = "AkLpfParamEval::EvalCutoff"

class CAkSrcFileBase:
    class CAkSrcFileBase(HookFactory):
        _name = "CAkSrcFileBase::CAkSrcFileBase"
    class ChangeSourcePosition(HookFactory):
        _name = "CAkSrcFileBase::ChangeSourcePosition"
    class CreateStream(HookFactory):
        _name = "CAkSrcFileBase::CreateStream"
    class FetchStreamBuffer(HookFactory):
        _name = "CAkSrcFileBase::FetchStreamBuffer"
    class IsInitialPrebufferingReady(HookFactory):
        _name = "CAkSrcFileBase::IsInitialPrebufferingReady"
    class MustRelocateAnalysisDataOnMediaRelocation(HookFactory):
        _name = "CAkSrcFileBase::MustRelocateAnalysisDataOnMediaRelocation"
    class ProcessFirstBuffer(HookFactory):
        _name = "CAkSrcFileBase::ProcessFirstBuffer"
    class ProcessStreamBuffer(HookFactory):
        _name = "CAkSrcFileBase::ProcessStreamBuffer"
    class RelocateMedia(HookFactory):
        _name = "CAkSrcFileBase::RelocateMedia"
    class SeekStream(HookFactory):
        _name = "CAkSrcFileBase::SeekStream"
    class SeekToSourceOffset(HookFactory):
        _name = "CAkSrcFileBase::SeekToSourceOffset"
    class SetStreamPosition(HookFactory):
        _name = "CAkSrcFileBase::SetStreamPosition"
    class StartStream(HookFactory):
        _name = "CAkSrcFileBase::StartStream"
    class StopLooping(HookFactory):
        _name = "CAkSrcFileBase::StopLooping"
    class StopStream(HookFactory):
        _name = "CAkSrcFileBase::StopStream"
    class StoreAnalysisData(HookFactory):
        _name = "CAkSrcFileBase::StoreAnalysisData"
    class UpdateBufferingInfo(HookFactory):
        _name = "CAkSrcFileBase::UpdateBufferingInfo"
    class VirtualOff(HookFactory):
        _name = "CAkSrcFileBase::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkSrcFileBase::VirtualOn"
    class _StartStream(HookFactory):
        _name = "CAkSrcFileBase::_StartStream"

class CAkADPCMCodec:
    class Decode(HookFactory):
        _name = "CAkADPCMCodec::Decode"

class PtADPCM:
    class DecodeBlocks(HookFactory):
        _name = "PtADPCM::DecodeBlocks"

class CreateAkStereoDelayFX(HookFactory):
    _name = "CreateAkStereoDelayFX"

class CAkStereoDelayFX:
    class Execute(HookFactory):
        _name = "CAkStereoDelayFX::Execute"
    class Init(HookFactory):
        _name = "CAkStereoDelayFX::Init"
    class Reset(HookFactory):
        _name = "CAkStereoDelayFX::Reset"
    class Term(HookFactory):
        _name = "CAkStereoDelayFX::Term"

class CAkStereoDelayFXParams:
    class Clone(HookFactory):
        _name = "CAkStereoDelayFXParams::Clone"
    class GetParams(HookFactory):
        _name = "CAkStereoDelayFXParams::GetParams"
    class SetParam(HookFactory):
        _name = "CAkStereoDelayFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkStereoDelayFXParams::SetParamsBlock"

class CreateAkStereoDelayFXParams(HookFactory):
    _name = "CreateAkStereoDelayFXParams"

class AkStereoDelayDSPProcess(HookFactory):
    _name = "AkStereoDelayDSPProcess"

class AK__DSP__ApplyGain_1(HookFactory):
    _name = "AK__DSP__ApplyGain_1"

class ProcessSurroundChannels(HookFactory):
    _name = "ProcessSurroundChannels"

class AkBuddyBlockPool:
    class AkBuddyBlockPool(HookFactory):
        _name = "AkBuddyBlockPool::AkBuddyBlockPool"
    class CoalesceBlock(HookFactory):
        _name = "AkBuddyBlockPool::CoalesceBlock"
    class CoalesceMem(HookFactory):
        _name = "AkBuddyBlockPool::CoalesceMem"
    class Init(HookFactory):
        _name = "AkBuddyBlockPool::Init"
    class JoinFreeBlock(HookFactory):
        _name = "AkBuddyBlockPool::JoinFreeBlock"
    class SubdivideMem(HookFactory):
        _name = "AkBuddyBlockPool::SubdivideMem"

class CreateAkTremoloFX(HookFactory):
    _name = "CreateAkTremoloFX"

class CAkTremoloFXParams:
    class Clone(HookFactory):
        _name = "CAkTremoloFXParams::Clone"
    class Init(HookFactory):
        _name = "CAkTremoloFXParams::Init"
    class SetDirty(HookFactory):
        _name = "CAkTremoloFXParams::SetDirty"
    class SetParam(HookFactory):
        _name = "CAkTremoloFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "CAkTremoloFXParams::SetParamsBlock"

class CreateAkTremoloFXParams(HookFactory):
    _name = "CreateAkTremoloFXParams"

class CreateVorbisSrcPlugin(HookFactory):
    _name = "CreateVorbisSrcPlugin"

class CreateVorbisFileCodec(HookFactory):
    _name = "CreateVorbisFileCodec"

class CreateVorbisGrainCodec(HookFactory):
    _name = "CreateVorbisGrainCodec"

class CAkVorbisGrainCodec:
    class CAkVorbisGrainCodec(HookFactory):
        _name = "CAkVorbisGrainCodec::CAkVorbisGrainCodec"
    class GetBuffer(HookFactory):
        _name = "CAkVorbisGrainCodec::GetBuffer"
    class Init(HookFactory):
        _name = "CAkVorbisGrainCodec::Init"
    class ReleaseBuffer(HookFactory):
        _name = "CAkVorbisGrainCodec::ReleaseBuffer"
    class SeekTo(HookFactory):
        _name = "CAkVorbisGrainCodec::SeekTo"
    class Term(HookFactory):
        _name = "CAkVorbisGrainCodec::Term"

class CAkSrcBankVorbis:
    class ChangeSourcePosition(HookFactory):
        _name = "CAkSrcBankVorbis::ChangeSourcePosition"
    class GetBuffer(HookFactory):
        _name = "CAkSrcBankVorbis::GetBuffer"
    class LoopInit(HookFactory):
        _name = "CAkSrcBankVorbis::LoopInit"
    class OnLoopComplete(HookFactory):
        _name = "CAkSrcBankVorbis::OnLoopComplete"
    class ReleaseBuffer(HookFactory):
        _name = "CAkSrcBankVorbis::ReleaseBuffer"
    class RelocateMedia(HookFactory):
        _name = "CAkSrcBankVorbis::RelocateMedia"
    class Seek(HookFactory):
        _name = "CAkSrcBankVorbis::Seek"
    class SeekToNativeOffset(HookFactory):
        _name = "CAkSrcBankVorbis::SeekToNativeOffset"
    class StartStream(HookFactory):
        _name = "CAkSrcBankVorbis::StartStream"
    class StopLooping(HookFactory):
        _name = "CAkSrcBankVorbis::StopLooping"
    class StopStream(HookFactory):
        _name = "CAkSrcBankVorbis::StopStream"
    class VirtualOff(HookFactory):
        _name = "CAkSrcBankVorbis::VirtualOff"
    class VirtualOn(HookFactory):
        _name = "CAkSrcBankVorbis::VirtualOn"
    class VirtualSeek(HookFactory):
        _name = "CAkSrcBankVorbis::VirtualSeek"
    class VorbisDSPRestart(HookFactory):
        _name = "CAkSrcBankVorbis::VorbisDSPRestart"

class CAkVorbisFileCodec:
    class DecodeFile(HookFactory):
        _name = "CAkVorbisFileCodec::DecodeFile"

class CreateVorbisCodec(HookFactory):
    _name = "CreateVorbisCodec"

class vorbis_dsp_clear(HookFactory):
    _name = "vorbis_dsp_clear"

class vorbis_dsp_init(HookFactory):
    _name = "vorbis_dsp_init"

class vorbis_dsp_pcmout(HookFactory):
    _name = "vorbis_dsp_pcmout"

class vorbis_dsp_restart(HookFactory):
    _name = "vorbis_dsp_restart"

class vorbis_dsp_synthesis(HookFactory):
    _name = "vorbis_dsp_synthesis"

class vorbis_shift_dct(HookFactory):
    _name = "vorbis_shift_dct"

class DecodeVorbis(HookFactory):
    _name = "DecodeVorbis"

class DecodeVorbisInternal(HookFactory):
    _name = "DecodeVorbisInternal"

class AkVorbisCodebookMgr:
    class Decodebook(HookFactory):
        _name = "AkVorbisCodebookMgr::Decodebook"
    class ReleaseCodebook(HookFactory):
        _name = "AkVorbisCodebookMgr::ReleaseCodebook"

class Codebook:
    class Term(HookFactory):
        _name = "Codebook::Term"

class ilog(HookFactory):
    _name = "ilog"

class mapping_info_unpack(HookFactory):
    _name = "mapping_info_unpack"

class mapping_inverse(HookFactory):
    _name = "mapping_inverse"

class floor1_inverse2_template(HookFactory):
    _templates = ("T0", )
    _name = "floor1_inverse2_template<{T0}>"

class InitFloorFunc(HookFactory):
    _name = "InitFloorFunc"

class floor1_info_unpack(HookFactory):
    _name = "floor1_info_unpack"

class floor1_inverse1(HookFactory):
    _name = "floor1_inverse1"

class mergesort(HookFactory):
    _name = "mergesort"

class mdct_backward(HookFactory):
    _name = "mdct_backward"

class mdct_first_2stages_SIMD_Ex(HookFactory):
    _name = "mdct_first_2stages_SIMD_Ex"

class mdct_presymmetry_SIMD_Ex(HookFactory):
    _name = "mdct_presymmetry_SIMD_Ex"

class mdct_reverse_step7_step8(HookFactory):
    _name = "mdct_reverse_step7_step8"

class mdct_unroll_lap(HookFactory):
    _name = "mdct_unroll_lap"

class vorbis_info_init(HookFactory):
    _name = "vorbis_info_init"

class vorbis_unpack_books(HookFactory):
    _name = "vorbis_unpack_books"

class res_inverse(HookFactory):
    _name = "res_inverse"

class res_unpack(HookFactory):
    _name = "res_unpack"

class vorbis_book_decodev_add_SIMD_2(HookFactory):
    _templates = ("T0", )
    _name = "vorbis_book_decodev_add_SIMD_2<{T0}>"

class vorbis_book_decodev_add_SIMD_4(HookFactory):
    _templates = ("T0", )
    _name = "vorbis_book_decodev_add_SIMD_4<{T0}>"

class vorbis_book_decodev_add_SIMD_4_2ch(HookFactory):
    _templates = ("T0", )
    _name = "vorbis_book_decodev_add_SIMD_4_2ch<{T0}>"

class vorbis_book_decodev_add_SIMD_8_2ch(HookFactory):
    _templates = ("T0", )
    _name = "vorbis_book_decodev_add_SIMD_8_2ch<{T0}>"

class BuildTree(HookFactory):
    _name = "BuildTree"

class GrowableAlloc:
    class Grow(HookFactory):
        _name = "GrowableAlloc::Grow"

class ak_vorbis_book_decode(HookFactory):
    _name = "ak_vorbis_book_decode"

class decpack(HookFactory):
    _name = "decpack"

class pack_sub_tree(HookFactory):
    _name = "pack_sub_tree"

class vorbis_book_unpack(HookFactory):
    _name = "vorbis_book_unpack"

class floor1_inverse2_AVX(HookFactory):
    _name = "floor1_inverse2_AVX"

class floor1_inverse2_AVX2(HookFactory):
    _name = "floor1_inverse2_AVX2"

class hkcdPlanarCsgOperand:
    class getExactType(HookFactory):
        _name = "hkcdPlanarCsgOperand::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkcdPlanarCsgOperand::_Auto::afterReflectNew"
    class hkcdPlanarCsgOperand(HookFactory):
        _name = "hkcdPlanarCsgOperand::hkcdPlanarCsgOperand"
    class afterReflectNew(HookFactory):
        _name = "hkcdPlanarCsgOperand::afterReflectNew"

class hkcdPlanarEntity:
    class getExactType(HookFactory):
        _name = "hkcdPlanarEntity::getExactType"

class hkcdPlanarGeometry:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkcdPlanarGeometry::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hkcdPlanarGeometry::getExactType"
    class hkcdPlanarGeometry(HookFactory):
        _name = "hkcdPlanarGeometry::hkcdPlanarGeometry"
        _overload: overloads.hkcdPlanarGeometry.hkcdPlanarGeometry.overloads = "hkcdPlanarGeometry *, const hkcdPlanarGeometry *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdPlanarGeometry.hkcdPlanarGeometry.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hkcdPlanarGeometry::afterReflectNew"
    class extractGeometry(HookFactory):
        _name = "hkcdPlanarGeometry::extractGeometry"
    class VertexStorage:
        class getExactType(HookFactory):
            _name = "hkcdPlanarGeometry::VertexStorage::getExactType"
    class recomputeVerticesCache(HookFactory):
        _name = "hkcdPlanarGeometry::recomputeVerticesCache"

class hkcdPlanarSolid:
    class NodeStorage:
        class getExactType(HookFactory):
            _name = "hkcdPlanarSolid::NodeStorage::getExactType"
        class NodeStorage(HookFactory):
            _name = "hkcdPlanarSolid::NodeStorage::NodeStorage"
    class getExactType(HookFactory):
        _name = "hkcdPlanarSolid::getExactType"
    class hkcdPlanarSolid(HookFactory):
        _name = "hkcdPlanarSolid::hkcdPlanarSolid"
        _overload: overloads.hkcdPlanarSolid.hkcdPlanarSolid.overloads = "hkcdPlanarSolid *, const hkcdPlanarSolid *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdPlanarSolid.hkcdPlanarSolid.overloads):
            cls._overload = overload_args
            return cls

class hkcdPlanarGeometryPlanesCollection:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkcdPlanarGeometryPlanesCollection::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hkcdPlanarGeometryPlanesCollection::getExactType"
    class hkcdPlanarGeometryPlanesCollection(HookFactory):
        _name = "hkcdPlanarGeometryPlanesCollection::hkcdPlanarGeometryPlanesCollection"
        _overload: overloads.hkcdPlanarGeometryPlanesCollection.hkcdPlanarGeometryPlanesCollection.overloads = "hkcdPlanarGeometryPlanesCollection *, const hkcdPlanarGeometryPlanesCollection *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdPlanarGeometryPlanesCollection.hkcdPlanarGeometryPlanesCollection.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hkcdPlanarGeometryPlanesCollection::afterReflectNew"
    class createBoundaryPlanes(HookFactory):
        _name = "hkcdPlanarGeometryPlanesCollection::createBoundaryPlanes"

class hkcdPlanarGeometryPrimitives:
    class Plane:
        class _Auto:
            class afterReflectNew(HookFactory):
                _name = "hkcdPlanarGeometryPrimitives::Plane::_Auto::afterReflectNew"
        class afterReflectNew(HookFactory):
            _name = "hkcdPlanarGeometryPrimitives::Plane::afterReflectNew"
    class Collection:
        class getExactType(HookFactory):
            _templates = ("T0", )
            _name = "hkcdPlanarGeometryPrimitives::Collection<{T0}>::getExactType"
        class clear(HookFactory):
            _templates = ("T0", )
            _name = "hkcdPlanarGeometryPrimitives::Collection<{T0}>::clear"
        class copy(HookFactory):
            _templates = ("T0", )
            _name = "hkcdPlanarGeometryPrimitives::Collection<{T0}>::copy"
        class create(HookFactory):
            _templates = ("T0", )
            _name = "hkcdPlanarGeometryPrimitives::Collection<{T0}>::create"

class hkcdPlanarGeometryPolygonCollection:
    class getExactType(HookFactory):
        _name = "hkcdPlanarGeometryPolygonCollection::getExactType"
    class hkcdPlanarGeometryPolygonCollection(HookFactory):
        _name = "hkcdPlanarGeometryPolygonCollection::hkcdPlanarGeometryPolygonCollection"
        _overload: overloads.hkcdPlanarGeometryPolygonCollection.hkcdPlanarGeometryPolygonCollection.overloads = "hkcdPlanarGeometryPolygonCollection *, const hkcdPlanarGeometryPolygonCollection *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdPlanarGeometryPolygonCollection.hkcdPlanarGeometryPolygonCollection.overloads):
            cls._overload = overload_args
            return cls

class hkcdTriangleUtil:
    class checkForFlatConvexQuad(HookFactory):
        _name = "hkcdTriangleUtil::checkForFlatConvexQuad"
    class isDegenerate(HookFactory):
        _name = "hkcdTriangleUtil::isDegenerate"

class hkcdObb:
    class computeDistance(HookFactory):
        _name = "hkcdObb::computeDistance"
    class getWorldAabb(HookFactory):
        _name = "hkcdObb::getWorldAabb"
    class set(HookFactory):
        _name = "hkcdObb::set"
        _overload: overloads.hkcdObb.set.overloads = "hkcdObb *, const hkStridedVertices *"
        @classmethod
        def overload(cls, overload_args: overloads.hkcdObb.set.overloads):
            cls._overload = overload_args
            return cls

class rebuildInternal(HookFactory):
    _name = "rebuildInternal"

class recurseRefitLeaf(HookFactory):
    _name = "recurseRefitLeaf"

class hkcdSimdTreeUtils:
    class Build:
        class IRefit:
            class _refitBranchDepthFirstMemoryLayout(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::IRefit::_refitBranchDepthFirstMemoryLayout<{T0}>"
            class _refitBranchGeneric(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::IRefit::_refitBranchGeneric<{T0}>"
        class build(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::build"
        class buildHierarchy(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::buildHierarchy"
        class RefitT:
            class getLeafAabb(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::RefitT<{T0}>::getLeafAabb"
            class refitBranch(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::RefitT<{T0}>::refitBranch"
            class refitNode(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::RefitT<{T0}>::refitNode"
        class hkcdBuildFirstNLevels:
            class getName(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdBuildFirstNLevels<{T0}>::getName"
            class process(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdBuildFirstNLevels<{T0}>::process"
        class hkcdBuildRangesTask:
            class getName(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdBuildRangesTask<{T0}>::getName"
            class process(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdBuildRangesTask<{T0}>::process"
        class hkcdFinalizeTreeTask:
            class getName(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdFinalizeTreeTask<{T0}>::getName"
            class process(HookFactory):
                _templates = ("T0", )
                _name = "hkcdSimdTreeUtils::Build::hkcdFinalizeTreeTask<{T0}>::process"
        class partitionSAH1(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::partitionSAH1"
        class partitionSAH3(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::partitionSAH3"
        class partitionSah3FixedSplit(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::partitionSah3FixedSplit"
        class Task:
            class run(HookFactory):
                _name = "hkcdSimdTreeUtils::Build::Task::run"
        class splitSmallRangeSah3(HookFactory):
            _name = "hkcdSimdTreeUtils::Build::splitSmallRangeSah3"

class hkSimplexSolverExamineActivePlanes(HookFactory):
    _name = "hkSimplexSolverExamineActivePlanes"

class hkSimplexSolverSolve1d(HookFactory):
    _name = "hkSimplexSolverSolve1d"

class hkSimplexSolverSolve2d(HookFactory):
    _name = "hkSimplexSolverSolve2d"

class hkSimplexSolverSolve3d(HookFactory):
    _name = "hkSimplexSolverSolve3d"

class hkSimplexSolverSortInfo(HookFactory):
    _name = "hkSimplexSolverSortInfo"

class hkSimplexSolverSolve(HookFactory):
    _name = "hkSimplexSolverSolve"

class hkcdDistanceSegmentQuad(HookFactory):
    _name = "hkcdDistanceSegmentQuad"

class hkgpDeprecatedConvexDecomposition:
    class Config:
        class Config(HookFactory):
            _name = "hkgpDeprecatedConvexDecomposition::Config::Config"
    class GuardGenConfig:
        class GuardGenConfig(HookFactory):
            _name = "hkgpDeprecatedConvexDecomposition::GuardGenConfig::GuardGenConfig"
    class MeshPreProcessorConfig:
        class MeshPreProcessorConfig(HookFactory):
            _name = "hkgpDeprecatedConvexDecomposition::MeshPreProcessorConfig::MeshPreProcessorConfig"

class hkInt64Vector4:
    class countLeadingZeros(HookFactory):
        _templates = ("T0", )
        _name = "hkInt64Vector4::countLeadingZeros<{T0}>"

class hkcdPlanarGeometryPredicates:
    class computeIntersectionDeterminants(HookFactory):
        _name = "hkcdPlanarGeometryPredicates::computeIntersectionDeterminants"

class hkcdGsk_Float3ShapeAOnlyInterface:
    class getShapeAabb(HookFactory):
        _name = "hkcdGsk_Float3ShapeAOnlyInterface::getShapeAabb"
    class getSupportingVertices(HookFactory):
        _name = "hkcdGsk_Float3ShapeAOnlyInterface::getSupportingVertices"

class hkcdGsk_Float3ShapeInterface:
    class getSupportingVertices(HookFactory):
        _name = "hkcdGsk_Float3ShapeInterface::getSupportingVertices"

class sphereCastOutOfLine(HookFactory):
    _name = "sphereCastOutOfLine"

class hkcdGskBase:
    class handlePenetration(HookFactory):
        _name = "hkcdGskBase::handlePenetration"

class hkcdConvexPenetrationUtilExact:
    class calculatePenetrationDepth(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::calculatePenetrationDepth"
    class computeExactFaceNormal(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::computeExactFaceNormal"
    class computeFaceBarycentricAndTrilinear(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::computeFaceBarycentricAndTrilinear"
    class computeFaceNormal(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::computeFaceNormal"
    class computeFaceVisibilities(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::computeFaceVisibilities"
    class constructOutput(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::constructOutput"
    class createInitialFaces(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::createInitialFaces"
    class defineOffset(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::defineOffset"
    class findResultingFace(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::findResultingFace"
    class replaceVisibleFaces(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::replaceVisibleFaces"
    class setupInitialStructure(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::setupInitialStructure"
    class setupVisibleBoundaryEdgeChainSingleFace(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::setupVisibleBoundaryEdgeChainSingleFace"
    class tryAddSupportingVertex(HookFactory):
        _name = "hkcdConvexPenetrationUtilExact::tryAddSupportingVertex"

class hkMemoryMeshTexture:
    class getExactType(HookFactory):
        _name = "hkMemoryMeshTexture::getExactType"
    class hkMemoryMeshTexture(HookFactory):
        _name = "hkMemoryMeshTexture::hkMemoryMeshTexture"
    class equals(HookFactory):
        _name = "hkMemoryMeshTexture::equals"
    class getData(HookFactory):
        _name = "hkMemoryMeshTexture::getData"
    class getFilterMode(HookFactory):
        _name = "hkMemoryMeshTexture::getFilterMode"
    class getFormat(HookFactory):
        _name = "hkMemoryMeshTexture::getFormat"
    class getHasMipMaps(HookFactory):
        _name = "hkMemoryMeshTexture::getHasMipMaps"
    class getTextureCoordChannel(HookFactory):
        _name = "hkMemoryMeshTexture::getTextureCoordChannel"
    class getUsageHint(HookFactory):
        _name = "hkMemoryMeshTexture::getUsageHint"
    class setData(HookFactory):
        _name = "hkMemoryMeshTexture::setData"
    class setFilename(HookFactory):
        _name = "hkMemoryMeshTexture::setFilename"
    class setFilterMode(HookFactory):
        _name = "hkMemoryMeshTexture::setFilterMode"
    class setHasMipMaps(HookFactory):
        _name = "hkMemoryMeshTexture::setHasMipMaps"
    class setTextureCoordChannel(HookFactory):
        _name = "hkMemoryMeshTexture::setTextureCoordChannel"
    class setUsageHint(HookFactory):
        _name = "hkMemoryMeshTexture::setUsageHint"

class hkMemoryMeshVertexBuffer:
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkMemoryMeshVertexBuffer::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::getExactType"
    class hkMemoryMeshVertexBuffer(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::hkMemoryMeshVertexBuffer"
        _overload: overloads.hkMemoryMeshVertexBuffer.hkMemoryMeshVertexBuffer.overloads = "hkMemoryMeshVertexBuffer *, const hkVertexFormat *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkMemoryMeshVertexBuffer.hkMemoryMeshVertexBuffer.overloads):
            cls._overload = overload_args
            return cls
    class afterReflectNew(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::afterReflectNew"
    class clone(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::clone"
    class getElementVectorArray(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::getElementVectorArray"
    class getLockedVerticesBuffer(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::getLockedVerticesBuffer"
    class getNumVertices(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::getNumVertices"
    class isSharable(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::isSharable"
    class lock(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::lock"
    class partialLock(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::partialLock"
    class setElementIntArray(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::setElementIntArray"
    class unlock(HookFactory):
        _name = "hkMemoryMeshVertexBuffer::unlock"

class hkSkinBinding:
    class getExactType(HookFactory):
        _name = "hkSkinBinding::getExactType"
    class hkSkinBinding(HookFactory):
        _name = "hkSkinBinding::hkSkinBinding"
    class getName(HookFactory):
        _name = "hkSkinBinding::getName"
    class getNumSections(HookFactory):
        _name = "hkSkinBinding::getNumSections"
    class lockSection(HookFactory):
        _name = "hkSkinBinding::lockSection"
    class setName(HookFactory):
        _name = "hkSkinBinding::setName"
    class unlockSection(HookFactory):
        _name = "hkSkinBinding::unlockSection"

class hkStorageSkinnedMeshShape:
    class getExactType(HookFactory):
        _name = "hkStorageSkinnedMeshShape::getExactType"
    class hkStorageSkinnedMeshShape(HookFactory):
        _name = "hkStorageSkinnedMeshShape::hkStorageSkinnedMeshShape"
    class addBoneSet(HookFactory):
        _name = "hkStorageSkinnedMeshShape::addBoneSet"
    class addPart(HookFactory):
        _name = "hkStorageSkinnedMeshShape::addPart"
    class getBoneSection(HookFactory):
        _name = "hkStorageSkinnedMeshShape::getBoneSection"
    class getName(HookFactory):
        _name = "hkStorageSkinnedMeshShape::getName"
    class getPart(HookFactory):
        _name = "hkStorageSkinnedMeshShape::getPart"
    class setName(HookFactory):
        _name = "hkStorageSkinnedMeshShape::setName"
    class sortParts(HookFactory):
        _name = "hkStorageSkinnedMeshShape::sortParts"

class hkDefaultCompoundMeshShape:
    class getExactType(HookFactory):
        _name = "hkDefaultCompoundMeshShape::getExactType"
    class getNumSections(HookFactory):
        _name = "hkDefaultCompoundMeshShape::getNumSections"
    class lockSection(HookFactory):
        _name = "hkDefaultCompoundMeshShape::lockSection"
    class unlockSection(HookFactory):
        _name = "hkDefaultCompoundMeshShape::unlockSection"

class hkSkinnedRefMeshShape:
    class getExactType(HookFactory):
        _name = "hkSkinnedRefMeshShape::getExactType"
    class getName(HookFactory):
        _name = "hkSkinnedRefMeshShape::getName"
    class setName(HookFactory):
        _name = "hkSkinnedRefMeshShape::setName"

class hkDefaultCompoundMeshBody:
    class getExactType(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getExactType"
    class getNumIndexedTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getNumIndexedTransforms"
    class getIndexedTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getIndexedTransforms"
    class getIndexedInverseTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getIndexedInverseTransforms"
    class completeUpdate(HookFactory):
        _name = "hkDefaultCompoundMeshBody::completeUpdate"
        _overload: overloads.hkDefaultCompoundMeshBody.completeUpdate.overloads = "hkDefaultCompoundMeshBody *, const hkMatrix4Impl<float> *"
        @classmethod
        def overload(cls, overload_args: overloads.hkDefaultCompoundMeshBody.completeUpdate.overloads):
            cls._overload = overload_args
            return cls
    class ensureInverseTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::ensureInverseTransforms"
    class getTransform(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getTransform"
    class getVertexBuffer(HookFactory):
        _name = "hkDefaultCompoundMeshBody::getVertexBuffer"
    class setIndexedInverseTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::setIndexedInverseTransforms"
    class setIndexedTransforms(HookFactory):
        _name = "hkDefaultCompoundMeshBody::setIndexedTransforms"
    class setPickingData(HookFactory):
        _name = "hkDefaultCompoundMeshBody::setPickingData"
    class setTransform(HookFactory):
        _name = "hkDefaultCompoundMeshBody::setTransform"

class hkMeshBoneIndexMapping:
    class hkMeshBoneIndexMapping(HookFactory):
        _name = "hkMeshBoneIndexMapping::hkMeshBoneIndexMapping"

class hkIndexedTransformSet:
    class getExactType(HookFactory):
        _name = "hkIndexedTransformSet::getExactType"
    class calculateMatrices(HookFactory):
        _name = "hkIndexedTransformSet::calculateMatrices"
    class getInverseMatrices(HookFactory):
        _name = "hkIndexedTransformSet::getInverseMatrices"
    class getMatrices(HookFactory):
        _name = "hkIndexedTransformSet::getMatrices"
    class setInverseMatrices(HookFactory):
        _name = "hkIndexedTransformSet::setInverseMatrices"
    class setMatrices(HookFactory):
        _name = "hkIndexedTransformSet::setMatrices"

class hkMeshVertexBuffer:
    class getExactType(HookFactory):
        _name = "hkMeshVertexBuffer::getExactType"
    class hkMeshVertexBuffer(HookFactory):
        _name = "hkMeshVertexBuffer::hkMeshVertexBuffer"

class hkMultipleVertexBuffer:
    class getExactType(HookFactory):
        _name = "hkMultipleVertexBuffer::getExactType"
    class getNumVertices(HookFactory):
        _name = "hkMultipleVertexBuffer::getNumVertices"
    class getVertexFormat(HookFactory):
        _name = "hkMultipleVertexBuffer::getVertexFormat"
    class isSharable(HookFactory):
        _name = "hkMultipleVertexBuffer::isSharable"
    class getElementIntArray(HookFactory):
        _name = "hkMultipleVertexBuffer::getElementIntArray"
    class setElementVectorArray(HookFactory):
        _name = "hkMultipleVertexBuffer::setElementVectorArray"
    class hkMultipleVertexBuffer(HookFactory):
        _name = "hkMultipleVertexBuffer::hkMultipleVertexBuffer"
    class _less(HookFactory):
        _name = "hkMultipleVertexBuffer::_less"
    class _lockElements(HookFactory):
        _name = "hkMultipleVertexBuffer::_lockElements"
    class _unlockVertexBuffers(HookFactory):
        _name = "hkMultipleVertexBuffer::_unlockVertexBuffers"
    class clone(HookFactory):
        _name = "hkMultipleVertexBuffer::clone"
    class lock(HookFactory):
        _name = "hkMultipleVertexBuffer::lock"
    class partialLock(HookFactory):
        _name = "hkMultipleVertexBuffer::partialLock"
    class unlock(HookFactory):
        _name = "hkMultipleVertexBuffer::unlock"

class hkaSkeleton:
    class getExactType(HookFactory):
        _name = "hkaSkeleton::getExactType"
    class hkaSkeleton(HookFactory):
        _name = "hkaSkeleton::hkaSkeleton"
        _overload: overloads.hkaSkeleton.hkaSkeleton.overloads = "hkaSkeleton *, const hkaSkeleton *"
        @classmethod
        def overload(cls, overload_args: overloads.hkaSkeleton.hkaSkeleton.overloads):
            cls._overload = overload_args
            return cls

class hkCompressedMassProperties:
    class pack(HookFactory):
        _name = "hkCompressedMassProperties::pack"
    class unpack(HookFactory):
        _name = "hkCompressedMassProperties::unpack"
        _overload: overloads.hkCompressedMassProperties.unpack.overloads = "hkCompressedMassProperties *, hkMassProperties *"
        @classmethod
        def overload(cls, overload_args: overloads.hkCompressedMassProperties.unpack.overloads):
            cls._overload = overload_args
            return cls

class hkDiagonalizedMassProperties:
    class pack(HookFactory):
        _name = "hkDiagonalizedMassProperties::pack"
    class reset(HookFactory):
        _name = "hkDiagonalizedMassProperties::reset"
    class unpack(HookFactory):
        _name = "hkDiagonalizedMassProperties::unpack"

class hkMassProperties:
    class applyScale(HookFactory):
        _name = "hkMassProperties::applyScale"
    class scaleToDensity(HookFactory):
        _name = "hkMassProperties::scaleToDensity"

class hkInertiaTensorComputer:
    class combineMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::combineMassProperties"
    class computeBoxVolumeMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeBoxVolumeMassProperties"
    class computeBoxVolumeMassPropertiesDiagonalized(HookFactory):
        _name = "hkInertiaTensorComputer::computeBoxVolumeMassPropertiesDiagonalized"
    class computeCapsuleVolumeMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeCapsuleVolumeMassProperties"
    class computeCylinderVolumeMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeCylinderVolumeMassProperties"
    class computeGeometryVolumeMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeGeometryVolumeMassProperties"
    class computeSphereVolumeMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeSphereVolumeMassProperties"
    class computeTriangleSurfaceMassProperties(HookFactory):
        _name = "hkInertiaTensorComputer::computeTriangleSurfaceMassProperties"
    class convertInertiaTensorToPrincipleAxis(HookFactory):
        _name = "hkInertiaTensorComputer::convertInertiaTensorToPrincipleAxis"
    class shiftInertiaFromCom(HookFactory):
        _name = "hkInertiaTensorComputer::shiftInertiaFromCom"

class InternalInertiaTensorComputer:
    class compFaceIntegrals(HookFactory):
        _name = "InternalInertiaTensorComputer::compFaceIntegrals"
    class compProjectionIntegrals(HookFactory):
        _name = "InternalInertiaTensorComputer::compProjectionIntegrals"
    class compVolumeIntegrals(HookFactory):
        _name = "InternalInertiaTensorComputer::compVolumeIntegrals"

class hkGeometryUtils:
    class _weldVertices(HookFactory):
        _name = "hkGeometryUtils::_weldVertices"
    class appendCapsule(HookFactory):
        _name = "hkGeometryUtils::appendCapsule"
    class appendSphere(HookFactory):
        _name = "hkGeometryUtils::appendSphere"
    class calculateInnerSphere(HookFactory):
        _name = "hkGeometryUtils::calculateInnerSphere"
    class weldVertices(HookFactory):
        _name = "hkGeometryUtils::weldVertices"
    class weldVerticesVirtual(HookFactory):
        _name = "hkGeometryUtils::weldVerticesVirtual"

class buildIcosahedron(HookFactory):
    _name = "buildIcosahedron"

class calculateResultingVelocity(HookFactory):
    _name = "calculateResultingVelocity"

class findNextPlane(HookFactory):
    _name = "findNextPlane"

class findNextTouchingPlane(HookFactory):
    _name = "findNextTouchingPlane"

class hkFindUniquePositionsUtil:
    class addPosition(HookFactory):
        _name = "hkFindUniquePositionsUtil::addPosition"

class hkMemoryResourceContainer:
    class getName(HookFactory):
        _name = "hkMemoryResourceContainer::getName"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hkMemoryResourceContainer::_Auto::afterReflectNew"
    class getExactType(HookFactory):
        _name = "hkMemoryResourceContainer::getExactType"
    class hkMemoryResourceContainer(HookFactory):
        _name = "hkMemoryResourceContainer::hkMemoryResourceContainer"
    class afterReflectNew(HookFactory):
        _name = "hkMemoryResourceContainer::afterReflectNew"
    class createContainer(HookFactory):
        _name = "hkMemoryResourceContainer::createContainer"
    class createResource(HookFactory):
        _name = "hkMemoryResourceContainer::createResource"
    class destroyContainer(HookFactory):
        _name = "hkMemoryResourceContainer::destroyContainer"
    class destroyResource(HookFactory):
        _name = "hkMemoryResourceContainer::destroyResource"
    class findContainerByName(HookFactory):
        _name = "hkMemoryResourceContainer::findContainerByName"
    class findResourceByName(HookFactory):
        _name = "hkMemoryResourceContainer::findResourceByName"
    class findResourceByType(HookFactory):
        _name = "hkMemoryResourceContainer::findResourceByType"
    class parentTo(HookFactory):
        _name = "hkMemoryResourceContainer::parentTo"

class hkSkinnedMeshShape:
    class BoneSection:
        class BoneSection(HookFactory):
            _name = "hkSkinnedMeshShape::BoneSection::BoneSection"
    class dbgOut(HookFactory):
        _name = "hkSkinnedMeshShape::dbgOut"
    class Part:
        class less(HookFactory):
            _name = "hkSkinnedMeshShape::Part::less"

class hkVertexFormat:
    class hkVertexFormat(HookFactory):
        _name = "hkVertexFormat::hkVertexFormat"
        _overload: overloads.hkVertexFormat.hkVertexFormat.overloads = "hkVertexFormat *, const hkVertexFormat *"
        @classmethod
        def overload(cls, overload_args: overloads.hkVertexFormat.hkVertexFormat.overloads):
            cls._overload = overload_args
            return cls
    class addElement(HookFactory):
        _name = "hkVertexFormat::addElement"
    class calculateSharingType(HookFactory):
        _name = "hkVertexFormat::calculateSharingType"
    class findElementIndex(HookFactory):
        _name = "hkVertexFormat::findElementIndex"
    class makeCanonicalOrder(HookFactory):
        _name = "hkVertexFormat::makeCanonicalOrder"

class hkVertexFormat_orderComponents(HookFactory):
    _name = "hkVertexFormat_orderComponents"

class hkMeshPrimitiveUtil:
    class calculateNumIndices(HookFactory):
        _name = "hkMeshPrimitiveUtil::calculateNumIndices"

class hkMeshVertexBufferUtil:
    class convert(HookFactory):
        _name = "hkMeshVertexBufferUtil::convert"
    class getElementIntArray(HookFactory):
        _name = "hkMeshVertexBufferUtil::getElementIntArray"
    class getElementVectorArray(HookFactory):
        _name = "hkMeshVertexBufferUtil::getElementVectorArray"
        _overload: overloads.hkMeshVertexBufferUtil.getElementVectorArray.overloads = "const hkMeshVertexBuffer::LockedVertices::Buffer *, float *, char *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkMeshVertexBufferUtil.getElementVectorArray.overloads):
            cls._overload = overload_args
            return cls
    class setElementIntArray(HookFactory):
        _name = "hkMeshVertexBufferUtil::setElementIntArray"
    class setElementVectorArray(HookFactory):
        _name = "hkMeshVertexBufferUtil::setElementVectorArray"
        _overload: overloads.hkMeshVertexBufferUtil.setElementVectorArray.overloads = "const hkMeshVertexBuffer::LockedVertices::Buffer *, const float *, __m128 *, unsigned int"
        @classmethod
        def overload(cls, overload_args: overloads.hkMeshVertexBufferUtil.setElementVectorArray.overloads):
            cls._overload = overload_args
            return cls
    class stridedCopy(HookFactory):
        _name = "hkMeshVertexBufferUtil::stridedCopy"

class hkMeshVertexBufferUtil_convertArgb32ToToFloat32(HookFactory):
    _name = "hkMeshVertexBufferUtil_convertArgb32ToToFloat32"

class hkMeshVertexBufferUtil_convertFloat32ToUint8(HookFactory):
    _name = "hkMeshVertexBufferUtil_convertFloat32ToUint8"

class hkMeshVertexBufferUtil_convertUint8DwordToUint8(HookFactory):
    _name = "hkMeshVertexBufferUtil_convertUint8DwordToUint8"

class hkMeshVertexBufferUtil_convertUint8ToFloat32(HookFactory):
    _name = "hkMeshVertexBufferUtil_convertUint8ToFloat32"

class hkMeshVertexBufferUtil_convertUint8ToUint8Dword(HookFactory):
    _name = "hkMeshVertexBufferUtil_convertUint8ToUint8Dword"

class hkGeometryProcessing:
    class buildTransposedArray(HookFactory):
        _name = "hkGeometryProcessing::buildTransposedArray"
    class getSupportingVertex(HookFactory):
        _name = "hkGeometryProcessing::getSupportingVertex"
    class octahedronToNormal(HookFactory):
        _name = "hkGeometryProcessing::octahedronToNormal"

class hkArrayBase__anonymous_namespace___EdgeData____growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___EdgeData____growCapacity_hkContainerAllocator_"

class hkArrayBase__anonymous_namespace___VertexInfo____growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___VertexInfo____growCapacity_hkContainerAllocator_"

class hkgpConvexHullImpl:
    class buildBevelPlanes(HookFactory):
        _templates = ("T0", )
        _name = "hkgpConvexHullImpl::buildBevelPlanes<{T0}>"
    class buildIndices(HookFactory):
        _templates = ("T0", )
        _name = "hkgpConvexHullImpl::buildIndices<{T0}>"
    class buildMassProperties(HookFactory):
        _templates = ("T0", )
        _name = "hkgpConvexHullImpl::buildMassProperties<{T0}>"
    class getCentroid(HookFactory):
        _templates = ("T0", )
        _name = "hkgpConvexHullImpl::getCentroid<{T0}>"
    class hkgpConvexHullImpl(HookFactory):
        _name = "hkgpConvexHullImpl::hkgpConvexHullImpl"
    class clone(HookFactory):
        _name = "hkgpConvexHullImpl::clone"
    class generatePlanesPerVertex(HookFactory):
        _name = "hkgpConvexHullImpl::generatePlanesPerVertex"
    class isPointInside(HookFactory):
        _name = "hkgpConvexHullImpl::isPointInside"
    class rebuildDomainParameters(HookFactory):
        _name = "hkgpConvexHullImpl::rebuildDomainParameters"
    class reset(HookFactory):
        _name = "hkgpConvexHullImpl::reset"
    class build(HookFactory):
        _name = "hkgpConvexHullImpl::build"
    class clearHorizon(HookFactory):
        _name = "hkgpConvexHullImpl::clearHorizon"
    class computeProjectionPlane(HookFactory):
        _name = "hkgpConvexHullImpl::computeProjectionPlane"
    class flushPending(HookFactory):
        _name = "hkgpConvexHullImpl::flushPending"

class hkgpConvexHull:
    class AbsoluteScaleConfig:
        class AbsoluteScaleConfig(HookFactory):
            _name = "hkgpConvexHull::AbsoluteScaleConfig::AbsoluteScaleConfig"
    class BuildConfig:
        class BuildConfig(HookFactory):
            _name = "hkgpConvexHull::BuildConfig::BuildConfig"
    class hkgpConvexHull(HookFactory):
        _name = "hkgpConvexHull::hkgpConvexHull"
    class absoluteScale(HookFactory):
        _name = "hkgpConvexHull::absoluteScale"
    class build(HookFactory):
        _name = "hkgpConvexHull::build"
        _overload: overloads.hkgpConvexHull.build.overloads = "hkgpConvexHull *, const hkStridedVertices *, const hkgpConvexHull::BuildConfig *"
        @classmethod
        def overload(cls, overload_args: overloads.hkgpConvexHull.build.overloads):
            cls._overload = overload_args
            return cls
    class buildFromDiscs(HookFactory):
        _name = "hkgpConvexHull::buildFromDiscs"
    class buildFromPlanes(HookFactory):
        _name = "hkgpConvexHull::buildFromPlanes"
        _overload: overloads.hkgpConvexHull.buildFromPlanes.overloads = "hkgpConvexHull *, const hkVector4f *, int, const hkgpConvexHull::BuildConfig *"
        @classmethod
        def overload(cls, overload_args: overloads.hkgpConvexHull.buildFromPlanes.overloads):
            cls._overload = overload_args
            return cls
    class buildPlanar(HookFactory):
        _name = "hkgpConvexHull::buildPlanar"
        _overload: overloads.hkgpConvexHull.buildPlanar.overloads = "hkgpConvexHull *, const hkStridedVertices *, const hkVector4f *, const hkgpConvexHull::BuildConfig *"
        @classmethod
        def overload(cls, overload_args: overloads.hkgpConvexHull.buildPlanar.overloads):
            cls._overload = overload_args
            return cls
    class calculatePlaneEquation(HookFactory):
        _name = "hkgpConvexHull::calculatePlaneEquation"
    class clone(HookFactory):
        _name = "hkgpConvexHull::clone"
    class collapseEdges(HookFactory):
        _name = "hkgpConvexHull::collapseEdges"
    class expandByPlanarMargin(HookFactory):
        _name = "hkgpConvexHull::expandByPlanarMargin"
    class fetchPlanes(HookFactory):
        _name = "hkgpConvexHull::fetchPlanes"
    class fetchPositions(HookFactory):
        _name = "hkgpConvexHull::fetchPositions"
    class generateGeometry(HookFactory):
        _name = "hkgpConvexHull::generateGeometry"
    class generateIndexedFaces(HookFactory):
        _name = "hkgpConvexHull::generateIndexedFaces"
    class getBestProjectionPlane(HookFactory):
        _name = "hkgpConvexHull::getBestProjectionPlane"
    class getCentroid(HookFactory):
        _name = "hkgpConvexHull::getCentroid"
    class getDimensions(HookFactory):
        _name = "hkgpConvexHull::getDimensions"
    class getIndex(HookFactory):
        _name = "hkgpConvexHull::getIndex"
    class getLocalInertia(HookFactory):
        _name = "hkgpConvexHull::getLocalInertia"
    class getNumPlanes(HookFactory):
        _name = "hkgpConvexHull::getNumPlanes"
    class getNumVertices(HookFactory):
        _name = "hkgpConvexHull::getNumVertices"
    class getPlane(HookFactory):
        _name = "hkgpConvexHull::getPlane"
    class getPlaneIndex(HookFactory):
        _name = "hkgpConvexHull::getPlaneIndex"
    class getProjectionPlane(HookFactory):
        _name = "hkgpConvexHull::getProjectionPlane"
    class getSupportingVertex(HookFactory):
        _name = "hkgpConvexHull::getSupportingVertex"
    class getSurfaceArea(HookFactory):
        _name = "hkgpConvexHull::getSurfaceArea"
    class getVolume(HookFactory):
        _name = "hkgpConvexHull::getVolume"
    class getWidthBounds(HookFactory):
        _name = "hkgpConvexHull::getWidthBounds"
    class hasMassProperties(HookFactory):
        _name = "hkgpConvexHull::hasMassProperties"
    class hasValidMassProperties(HookFactory):
        _name = "hkgpConvexHull::hasValidMassProperties"
    class mergePlanes(HookFactory):
        _name = "hkgpConvexHull::mergePlanes"

class hkFixedStackStorage__anonymous_namespace___EdgeCollapseData__QuadricErrorMetrics____hkFixedStackStorage__anonymous_namespace___EdgeCollapseData__QuadricErrorMetrics_(HookFactory):
    _name = "hkFixedStackStorage__anonymous_namespace___EdgeCollapseData__QuadricErrorMetrics____hkFixedStackStorage__anonymous_namespace___EdgeCollapseData__QuadricErrorMetrics_"

class hkGeometryUtility:
    class createMinBoundingSphere(HookFactory):
        _name = "hkGeometryUtility::createMinBoundingSphere"

class setKeycodes(HookFactory):
    _name = "setKeycodes"

class hkgpCgo:
    class Config:
        class getExactType(HookFactory):
            _name = "hkgpCgo::Config::getExactType"

class IConvexOverlapImpl:
    class ShapeInterface:
        class getSupportingVertices(HookFactory):
            _name = "IConvexOverlapImpl::ShapeInterface::getSupportingVertices"
        class getShapeAabb(HookFactory):
            _name = "IConvexOverlapImpl::ShapeInterface::getShapeAabb"
    class distance(HookFactory):
        _name = "IConvexOverlapImpl::distance"
    class checkOverlap(HookFactory):
        _name = "IConvexOverlapImpl::checkOverlap"

class hkSingletonUtil__initWith_hkKeycodeDataBase_hkKeycodeData_(HookFactory):
    _name = "hkSingletonUtil__initWith_hkKeycodeDataBase_hkKeycodeData_"

class hkVersionUtils:
    class getHavokTime(HookFactory):
        _name = "hkVersionUtils::getHavokTime"
    class getSystemTime(HookFactory):
        _name = "hkVersionUtils::getSystemTime"
    class linkProduct(HookFactory):
        _name = "hkVersionUtils::linkProduct"

class hknpCompressedMeshShapeData:
    class getExactType(HookFactory):
        _name = "hknpCompressedMeshShapeData::getExactType"
    class _Auto:
        class afterReflectNew(HookFactory):
            _name = "hknpCompressedMeshShapeData::_Auto::afterReflectNew"
    class hknpCompressedMeshShapeData(HookFactory):
        _name = "hknpCompressedMeshShapeData::hknpCompressedMeshShapeData"
    class _getExactType(HookFactory):
        _name = "hknpCompressedMeshShapeData::_getExactType"
    class afterReflectNew(HookFactory):
        _name = "hknpCompressedMeshShapeData::afterReflectNew"
    class getMemoryFootprint(HookFactory):
        _name = "hknpCompressedMeshShapeData::getMemoryFootprint"

class hkArrayBase__anonymous_namespace___InternalEdgeSortingStruct____growCapacity_hkBuiltinContainerAllocatorBase_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___InternalEdgeSortingStruct____growCapacity_hkBuiltinContainerAllocatorBase_"

class hkArrayBase__anonymous_namespace___InternalEdgeSortingStruct____growCapacity_hkContainerAllocator_(HookFactory):
    _name = "hkArrayBase__anonymous_namespace___InternalEdgeSortingStruct____growCapacity_hkContainerAllocator_"

class hknpRayCastQuery:
    class hknpRayCastQuery(HookFactory):
        _name = "hknpRayCastQuery::hknpRayCastQuery"

class hknpCompressedMeshShapeUtil:
    class getClosestPointsToCompressedMesh(HookFactory):
        _name = "hknpCompressedMeshShapeUtil::getClosestPointsToCompressedMesh"
    class getClosestPointsToConvex(HookFactory):
        _name = "hknpCompressedMeshShapeUtil::getClosestPointsToConvex"
    class getClosestPointsToHeightfield(HookFactory):
        _name = "hknpCompressedMeshShapeUtil::getClosestPointsToHeightfield"

class calcFanNMP(HookFactory):
    _name = "calcFanNMP"

class hkcdPointConvexVoronoiImpl(HookFactory):
    _name = "hkcdPointConvexVoronoiImpl"

class hkcdPointVsConvexHull(HookFactory):
    _name = "hkcdPointVsConvexHull"

class hknpGsk2D:
    class getClosestPoints(HookFactory):
        _name = "hknpGsk2D::getClosestPoints"

class hknpConvexConvexShapeBaseInterface:
    class getPlanes(HookFactory):
        _name = "hknpConvexConvexShapeBaseInterface::getPlanes"
    class getShapeAabb(HookFactory):
        _name = "hknpConvexConvexShapeBaseInterface::getShapeAabb"
    class getSupportingVertices(HookFactory):
        _name = "hknpConvexConvexShapeBaseInterface::getSupportingVertices"

class hknpProcessFlyingColors(HookFactory):
    _name = "hknpProcessFlyingColors"

class hknpCollision2DFastProcessUtil:
    class buildFaceManifold(HookFactory):
        _name = "hknpCollision2DFastProcessUtil::buildFaceManifold"
    class collideWithInteriorTriangle(HookFactory):
        _name = "hknpCollision2DFastProcessUtil::collideWithInteriorTriangle"

class hknpFaceClipConvexConvexManifoldGenerator:
    class collide(HookFactory):
        _name = "hknpFaceClipConvexConvexManifoldGenerator::collide"

class detectBinaryPackfile2014(HookFactory):
    _name = "detectBinaryPackfile2014"

class detectBinaryTagfile2014(HookFactory):
    _name = "detectBinaryTagfile2014"

class detectBinaryTagfile2015(HookFactory):
    _name = "detectBinaryTagfile2015"

class detectBinaryTagfile(HookFactory):
    _name = "detectBinaryTagfile"

class detectBinaryTagfileNT6(HookFactory):
    _name = "detectBinaryTagfileNT6"

class detectCompressedTagfile(HookFactory):
    _name = "detectCompressedTagfile"

class detectXmlPackfile2014(HookFactory):
    _name = "detectXmlPackfile2014"

class detectXmlTagfile2014(HookFactory):
    _name = "detectXmlTagfile2014"

class detectXmlTagfile(HookFactory):
    _name = "detectXmlTagfile"

class detectYamlFile(HookFactory):
    _name = "detectYamlFile"

class hkSerialize__TagfileReadFormat__Impl__handleCompendiumReference(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleCompendiumReference"

class hkSerialize__TagfileReadFormat__Impl__handlePropertyDecls(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handlePropertyDecls"

class hkSerialize__TagfileReadFormat__Impl__inplaceTypeHashes(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__inplaceTypeHashes"

class hkSerialize__TagfileReadFormat__Impl__inplacePropertyHashes(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__inplacePropertyHashes"

class hkSerialize__TagfileReadFormat__Impl__handleItems(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleItems"

class hkSerialize__TagfileReadFormat__Impl__handlePatchData(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handlePatchData"

class hkSerialize__TagfileReadFormat__Impl__handleNativePointers(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleNativePointers"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_104_1_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_104_1_"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_120_1_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_120_1_"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_136_1_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_136_1_"

class hkSerialize__TagfileReadFormat__Impl__handleTypeIdentity_1_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeIdentity_1_"

class hkSerialize__TagfileReadFormat__Impl__handleTypeBody_1_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeBody_1_"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_104_0_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_104_0_"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_120_0_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_120_0_"

class hkSerialize__TagfileReadFormat__Impl__readStringsRbv_136_0_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__readStringsRbv_136_0_"

class hkSerialize__TagfileReadFormat__Impl__handleTypeIdentity_0_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeIdentity_0_"

class hkSerialize__TagfileReadFormat__Impl__handleTypeBody_0_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeBody_0_"

class hkSerialize__TagfileReadFormat__Impl__parseSubsection_17__hkSerialize__TagfileReadFormat__Impl__s_types__0(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__parseSubsection_17__hkSerialize__TagfileReadFormat__Impl__s_types__0"

class hkSerialize__TagfileReadFormat__Impl__parseSubsection_2__hkSerialize__TagfileReadFormat__Impl__s_index__0(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__parseSubsection_2__hkSerialize__TagfileReadFormat__Impl__s_index__0"

class hkSerialize__TagfileReadFormat__Impl__inplaceTypeHashesImpl__anonymous_namespace___LocalTypeHasher_(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__inplaceTypeHashesImpl__anonymous_namespace___LocalTypeHasher_"

class binaryTagfileCreateRead(HookFactory):
    _name = "binaryTagfileCreateRead"

class hkSerialize__Detail__PatchDataHandlerBase__hkSerialize__TagfileReadFormat__Impl__handlePatchData____34___PatchDataHandler___handleSection(HookFactory):
    _name = "hkSerialize__Detail__PatchDataHandlerBase__hkSerialize__TagfileReadFormat__Impl__handlePatchData____34___PatchDataHandler___handleSection"

class hkSerialize__Detail__PatchDataHandlerBase__hkSerialize__TagfileReadFormat__Impl__handlePatchData____11___PatchDataHandler___handleSection(HookFactory):
    _name = "hkSerialize__Detail__PatchDataHandlerBase__hkSerialize__TagfileReadFormat__Impl__handlePatchData____11___PatchDataHandler___handleSection"

class hkSerialize__TagfileReadFormat__Impl__handleTypeBodyImpl(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeBodyImpl"

class hkSerialize__TagfileReadFormat__Impl__handleTypeIdentityImpl(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__handleTypeIdentityImpl"

class hkSerialize__TagfileReadFormat__Impl__view(HookFactory):
    _name = "hkSerialize__TagfileReadFormat__Impl__view"

class binaryTagfileCreateWrite(HookFactory):
    _name = "binaryTagfileCreateWrite"

class padUp(HookFactory):
    _name = "padUp"

class xmlTagfileCreateRead(HookFactory):
    _name = "xmlTagfileCreateRead"

class xmlTagfileCreateWrite(HookFactory):
    _name = "xmlTagfileCreateWrite"

class hctClothSetup20151Options:
    class getExactType(HookFactory):
        _name = "hctClothSetup20151Options::getExactType"

class hctClothSetupObjectData20151:
    class getExactType(HookFactory):
        _name = "hctClothSetupObjectData20151::getExactType"

class hctClothSetupClothData20151Options:
    class getExactType(HookFactory):
        _name = "hctClothSetupClothData20151Options::getExactType"
    class hctClothSetupClothData20151Options(HookFactory):
        _name = "hctClothSetupClothData20151Options::hctClothSetupClothData20151Options"

class hkMemoryResourceHandle:
    class getExactType(HookFactory):
        _name = "hkMemoryResourceHandle::getExactType"
    class hkMemoryResourceHandle(HookFactory):
        _name = "hkMemoryResourceHandle::hkMemoryResourceHandle"
    class addExternalLink(HookFactory):
        _name = "hkMemoryResourceHandle::addExternalLink"
    class clearExternalLinks(HookFactory):
        _name = "hkMemoryResourceHandle::clearExternalLinks"
    class getExternalLinks(HookFactory):
        _name = "hkMemoryResourceHandle::getExternalLinks"
    class getName(HookFactory):
        _name = "hkMemoryResourceHandle::getName"
    class getObjectType(HookFactory):
        _name = "hkMemoryResourceHandle::getObjectType"
    class removeExternalLink(HookFactory):
        _name = "hkMemoryResourceHandle::removeExternalLink"
    class setName(HookFactory):
        _name = "hkMemoryResourceHandle::setName"
    class setObject(HookFactory):
        _name = "hkMemoryResourceHandle::setObject"

class hkXmlStreamParser:
    class hkXmlStreamParser(HookFactory):
        _name = "hkXmlStreamParser::hkXmlStreamParser"
    class _advance(HookFactory):
        _name = "hkXmlStreamParser::_advance"
    class _extractAttributes(HookFactory):
        _name = "hkXmlStreamParser::_extractAttributes"
    class _pushLexeme(HookFactory):
        _name = "hkXmlStreamParser::_pushLexeme"
    class advance(HookFactory):
        _name = "hkXmlStreamParser::advance"
    class decodeString(HookFactory):
        _name = "hkXmlStreamParser::decodeString"
    class getBlockName(HookFactory):
        _name = "hkXmlStreamParser::getBlockName"
    class getIntAttribute(HookFactory):
        _name = "hkXmlStreamParser::getIntAttribute"
    class getValue(HookFactory):
        _name = "hkXmlStreamParser::getValue"
    class hasAttribute(HookFactory):
        _name = "hkXmlStreamParser::hasAttribute"
    class parseInt(HookFactory):
        _name = "hkXmlStreamParser::parseInt"

class hkResourceContainer:
    class findAllResourceRecursively(HookFactory):
        _name = "hkResourceContainer::findAllResourceRecursively"
    class tryToResolveLinks(HookFactory):
        _name = "hkResourceContainer::tryToResolveLinks"

class hkResourceHandle:
    class tryToResolveLinks(HookFactory):
        _name = "hkResourceHandle::tryToResolveLinks"

class hkParserBuffer:
    class hkParserBuffer(HookFactory):
        _name = "hkParserBuffer::hkParserBuffer"
    class bufferCommit(HookFactory):
        _name = "hkParserBuffer::bufferCommit"
    class lexemeCommit(HookFactory):
        _name = "hkParserBuffer::lexemeCommit"
    class match(HookFactory):
        _name = "hkParserBuffer::match"
    class matchAndConsume(HookFactory):
        _name = "hkParserBuffer::matchAndConsume"
    class read(HookFactory):
        _name = "hkParserBuffer::read"

class hkXmlLexAnalyzer:
    class hkXmlLexAnalyzer(HookFactory):
        _name = "hkXmlLexAnalyzer::hkXmlLexAnalyzer"
    class _lexWhiteSpace(HookFactory):
        _name = "hkXmlLexAnalyzer::_lexWhiteSpace"
    class _matchInBrackets(HookFactory):
        _name = "hkXmlLexAnalyzer::_matchInBrackets"
    class _matchOutsideBrackets(HookFactory):
        _name = "hkXmlLexAnalyzer::_matchOutsideBrackets"
    class advance(HookFactory):
        _name = "hkXmlLexAnalyzer::advance"

class hkVdb:
    class Detail:
        class ToString:
            class ToString(HookFactory):
                _name = "hkVdb::Detail::ToString::ToString"
            class toString(HookFactory):
                _name = "hkVdb::Detail::ToString::toString"

class hkVdbReflect:
    class Var:
        class end(HookFactory):
            _name = "hkVdbReflect::Var::end"

class hkSingletonUtil__init_hkProcessFactory_(HookFactory):
    _name = "hkSingletonUtil__init_hkProcessFactory_"

class hkDisplayGeometry:
    class getWireframeGeometry(HookFactory):
        _name = "hkDisplayGeometry::getWireframeGeometry"

class hkDisplaySphere:
    class hkDisplaySphere(HookFactory):
        _name = "hkDisplaySphere::hkDisplaySphere"
    class buildGeometry(HookFactory):
        _name = "hkDisplaySphere::buildGeometry"
    class getWireframeGeometry(HookFactory):
        _name = "hkDisplaySphere::getWireframeGeometry"

class hkDisplayCapsule:
    class hkDisplayCapsule(HookFactory):
        _name = "hkDisplayCapsule::hkDisplayCapsule"
    class buildGeometry(HookFactory):
        _name = "hkDisplayCapsule::buildGeometry"
    class getWireframeGeometry(HookFactory):
        _name = "hkDisplayCapsule::getWireframeGeometry"

class hkDisplayAABB:
    class hkDisplayAABB(HookFactory):
        _name = "hkDisplayAABB::hkDisplayAABB"
    class buildGeometry(HookFactory):
        _name = "hkDisplayAABB::buildGeometry"
    class getWireframeGeometry(HookFactory):
        _name = "hkDisplayAABB::getWireframeGeometry"

class hkDisplayWireframe:
    class hkDisplayWireframe(HookFactory):
        _name = "hkDisplayWireframe::hkDisplayWireframe"
    class getWireframeGeometry(HookFactory):
        _name = "hkDisplayWireframe::getWireframeGeometry"

class hkDebugCommandProcessor:
    class exec(HookFactory):
        _name = "hkDebugCommandProcessor::exec"
    class print(HookFactory):
        _name = "hkDebugCommandProcessor::print"

class hkDebugDisplayHandler:
    class hkDebugDisplayHandler(HookFactory):
        _name = "hkDebugDisplayHandler::hkDebugDisplayHandler"
    class addGeometry(HookFactory):
        _name = "hkDebugDisplayHandler::addGeometry"
    class addGeometryInstance(HookFactory):
        _name = "hkDebugDisplayHandler::addGeometryInstance"
    class displayFrame(HookFactory):
        _name = "hkDebugDisplayHandler::displayFrame"
    class updateGeometryTransform(HookFactory):
        _name = "hkDebugDisplayHandler::updateGeometryTransform"

class hkSingletonUtil__init_hkDebugDisplay_(HookFactory):
    _name = "hkSingletonUtil__init_hkDebugDisplay_"

class hkDebugDisplay:
    class addGeometry(HookFactory):
        _name = "hkDebugDisplay::addGeometry"
    class addGeometryInstance(HookFactory):
        _name = "hkDebugDisplay::addGeometryInstance"
    class addGeometryInstanceEx(HookFactory):
        _name = "hkDebugDisplay::addGeometryInstanceEx"
    class clearGeometryFlagBits(HookFactory):
        _name = "hkDebugDisplay::clearGeometryFlagBits"
    class displayFrame(HookFactory):
        _name = "hkDebugDisplay::displayFrame"
    class flushDisplay(HookFactory):
        _name = "hkDebugDisplay::flushDisplay"
    class removeCamera(HookFactory):
        _name = "hkDebugDisplay::removeCamera"
    class removeGeometry(HookFactory):
        _name = "hkDebugDisplay::removeGeometry"
    class setDisplayOptions(HookFactory):
        _name = "hkDebugDisplay::setDisplayOptions"
    class setGeometryAlpha(HookFactory):
        _name = "hkDebugDisplay::setGeometryAlpha"
    class setGeometryColor(HookFactory):
        _name = "hkDebugDisplay::setGeometryColor"
    class setGeometryFlagBits(HookFactory):
        _name = "hkDebugDisplay::setGeometryFlagBits"
    class updateCamera(HookFactory):
        _name = "hkDebugDisplay::updateCamera"
    class updateGeometryMaterialData(HookFactory):
        _name = "hkDebugDisplay::updateGeometryMaterialData"
    class updateGeometryTransform(HookFactory):
        _name = "hkDebugDisplay::updateGeometryTransform"
    class updateGeometryTransformEx(HookFactory):
        _name = "hkDebugDisplay::updateGeometryTransformEx"
    class updateGeometryVerts(HookFactory):
        _name = "hkDebugDisplay::updateGeometryVerts"

class jediIsInitialized(HookFactory):
    _name = "jediIsInitialized"

class scePadGetControllerInformation(HookFactory):
    _name = "scePadGetControllerInformation"

class scePadInit(HookFactory):
    _name = "scePadInit"

class scePadOpen(HookFactory):
    _name = "scePadOpen"

class scePadRead(HookFactory):
    _name = "scePadRead"

class scePadSetAngularVelocityDeadbandState(HookFactory):
    _name = "scePadSetAngularVelocityDeadbandState"

class scePadSetTiltCorrectionState(HookFactory):
    _name = "scePadSetTiltCorrectionState"

class scePadSetVibration(HookFactory):
    _name = "scePadSetVibration"

class scePadTerminate(HookFactory):
    _name = "scePadTerminate"

class sub_1427C7220(HookFactory):
    _name = "sub_1427C7220"

class sub_1427C73B0(HookFactory):
    _name = "sub_1427C73B0"

class sub_1427C7470(HookFactory):
    _name = "sub_1427C7470"

class sub_1427C77D0(HookFactory):
    _name = "sub_1427C77D0"

class sub_1427C84E0(HookFactory):
    _name = "sub_1427C84E0"

class sub_1427C8850(HookFactory):
    _name = "sub_1427C8850"

class sub_1427C8A70(HookFactory):
    _name = "sub_1427C8A70"

class getDeviceByDeviceId(HookFactory):
    _name = "getDeviceByDeviceId"

class getDeviceByHandle(HookFactory):
    _name = "getDeviceByHandle"

class isBond(HookFactory):
    _name = "isBond"

class isClone(HookFactory):
    _name = "isClone"

class isHunt(HookFactory):
    _name = "isHunt"

class isJedi(HookFactory):
    _name = "isJedi"

class isPs5GenController(HookFactory):
    _name = "isPs5GenController"

class sub_1427C9CB0(HookFactory):
    _name = "sub_1427C9CB0"

class sub_1427C9D90(HookFactory):
    _name = "sub_1427C9D90"

class sub_1427CA670(HookFactory):
    _name = "sub_1427CA670"

class sub_1427CA6B0(HookFactory):
    _name = "sub_1427CA6B0"

class sub_1427CA830(HookFactory):
    _name = "sub_1427CA830"

class sub_1427CB620(HookFactory):
    _name = "sub_1427CB620"

class sub_1427CB8D0(HookFactory):
    _name = "sub_1427CB8D0"

class sub_1427CBC50(HookFactory):
    _name = "sub_1427CBC50"

class sub_1427CBD70(HookFactory):
    _name = "sub_1427CBD70"

class sub_1427CBDA0(HookFactory):
    _name = "sub_1427CBDA0"

class sub_1427CBDE0(HookFactory):
    _name = "sub_1427CBDE0"

class sub_1427CC820(HookFactory):
    _name = "sub_1427CC820"

class sub_1427CCA70(HookFactory):
    _name = "sub_1427CCA70"

class StartAddress(HookFactory):
    _name = "StartAddress"

class sub_1427CDE60(HookFactory):
    _name = "sub_1427CDE60"

class sub_1427CDE90(HookFactory):
    _name = "sub_1427CDE90"

class sub_1427CE130(HookFactory):
    _name = "sub_1427CE130"

class sub_1427CE440(HookFactory):
    _name = "sub_1427CE440"

class sub_1427CE5F0(HookFactory):
    _name = "sub_1427CE5F0"

class setTimerResolution(HookFactory):
    _name = "setTimerResolution"

class sub_1427CE7D0(HookFactory):
    _name = "sub_1427CE7D0"

class sub_1427CEC80(HookFactory):
    _name = "sub_1427CEC80"

class getCrc32OnBtHid(HookFactory):
    _name = "getCrc32OnBtHid"

class hasCrcErrorOnBtHid(HookFactory):
    _name = "hasCrcErrorOnBtHid"

class sub_1427CF170(HookFactory):
    _name = "sub_1427CF170"

class sce:
    class Vectormath:
        class Libpad:
            class Aos:
                class inverse(HookFactory):
                    _name = "sce::Vectormath::Libpad::Aos::inverse"

class sub_1427D0150(HookFactory):
    _name = "sub_1427D0150"

class gbeInit(HookFactory):
    _name = "gbeInit"

class gbeSetup(HookFactory):
    _name = "gbeSetup"

class gbeUpdate(HookFactory):
    _name = "gbeUpdate"

class ChannelManager:
    class BiquadFilters:
        class BiquadFilters(HookFactory):
            _name = "ChannelManager::BiquadFilters::BiquadFilters"
    class FindFreeObjectContext(HookFactory):
        _name = "ChannelManager::FindFreeObjectContext"
    class Init(HookFactory):
        _name = "ChannelManager::Init"
    class PostProcessBuffers(HookFactory):
        _name = "ChannelManager::PostProcessBuffers"
    class PreProcessBuffers(HookFactory):
        _name = "ChannelManager::PreProcessBuffers"
    class ProcessBuffers(HookFactory):
        _name = "ChannelManager::ProcessBuffers"
    class ProcessCompressor(HookFactory):
        _name = "ChannelManager::ProcessCompressor"
    class ProcessContext(HookFactory):
        _name = "ChannelManager::ProcessContext"
    class ResetContexts(HookFactory):
        _name = "ChannelManager::ResetContexts"
    class Term(HookFactory):
        _name = "ChannelManager::Term"
    class UpdateConfig(HookFactory):
        _name = "ChannelManager::UpdateConfig"
    class UpdateContext(HookFactory):
        _name = "ChannelManager::UpdateContext"

class ChannelManagerUpdate:
    class ChannelManagerUpdate(HookFactory):
        _name = "ChannelManagerUpdate::ChannelManagerUpdate"

class SceAudioMasterWork:
    class SceAudioMasterWork(HookFactory):
        _name = "SceAudioMasterWork::SceAudioMasterWork"

class MasteringSuiteFX:
    class CreateChannelManager(HookFactory):
        _name = "MasteringSuiteFX::CreateChannelManager"
    class Execute(HookFactory):
        _name = "MasteringSuiteFX::Execute"
    class GetBufferTick(HookFactory):
        _name = "MasteringSuiteFX::GetBufferTick"
    class GetPluginInfo(HookFactory):
        _name = "MasteringSuiteFX::GetPluginInfo"
    class Init(HookFactory):
        _name = "MasteringSuiteFX::Init"
    class Reset(HookFactory):
        _name = "MasteringSuiteFX::Reset"
    class SoftwareDirtyParams(HookFactory):
        _name = "MasteringSuiteFX::SoftwareDirtyParams"
    class SoftwareExecute(HookFactory):
        _name = "MasteringSuiteFX::SoftwareExecute"
    class SoftwareFinalizeOutput(HookFactory):
        _name = "MasteringSuiteFX::SoftwareFinalizeOutput"
    class SoftwareInit(HookFactory):
        _name = "MasteringSuiteFX::SoftwareInit"
    class SoftwarePrepareInput(HookFactory):
        _name = "MasteringSuiteFX::SoftwarePrepareInput"
    class Term(HookFactory):
        _name = "MasteringSuiteFX::Term"
    class UpdateChannelManager(HookFactory):
        _name = "MasteringSuiteFX::UpdateChannelManager"

class CreateMasteringSuiteFX(HookFactory):
    _name = "CreateMasteringSuiteFX"

class CreateMasteringSuiteFXParams(HookFactory):
    _name = "CreateMasteringSuiteFXParams"

class SceAudioOut2MasteringModuleWork:
    class AllocateMemory(HookFactory):
        _name = "SceAudioOut2MasteringModuleWork::AllocateMemory"

class SceAudioOut2MasteringModuleCheckParams(HookFactory):
    _name = "SceAudioOut2MasteringModuleCheckParams"

class SceAudioOut2MasteringModuleCoreProcess(HookFactory):
    _name = "SceAudioOut2MasteringModuleCoreProcess"

class SceAudioOut2MasteringModuleTerm(HookFactory):
    _name = "SceAudioOut2MasteringModuleTerm"

class MasteringSuiteFXParams:
    class MasteringSuiteFXParams(HookFactory):
        _name = "MasteringSuiteFXParams::MasteringSuiteFXParams"
    class Clone(HookFactory):
        _name = "MasteringSuiteFXParams::Clone"
    class Init(HookFactory):
        _name = "MasteringSuiteFXParams::Init"
    class SetParam(HookFactory):
        _name = "MasteringSuiteFXParams::SetParam"
    class SetParamsBlock(HookFactory):
        _name = "MasteringSuiteFXParams::SetParamsBlock"
    class UpdateEqBandFilterMode(HookFactory):
        _name = "MasteringSuiteFXParams::UpdateEqBandFilterMode"

class GetChannelMapping(HookFactory):
    _name = "GetChannelMapping"

class InitializeSystemModuleFunctionEntryPoints(HookFactory):
    _name = "InitializeSystemModuleFunctionEntryPoints"

class sceAudioMasterCheckParams(HookFactory):
    _name = "sceAudioMasterCheckParams"

class sceAudioMasterGetStates(HookFactory):
    _name = "sceAudioMasterGetStates"

class sceAudioMasterInit(HookFactory):
    _name = "sceAudioMasterInit"

class sceAudioMasterProcessing(HookFactory):
    _name = "sceAudioMasterProcessing"

class sceAudioMasterSetModuleBypass(HookFactory):
    _name = "sceAudioMasterSetModuleBypass"

class sceAudioMasterSetParams(HookFactory):
    _name = "sceAudioMasterSetParams"

class sceAudioMasterSystemInit(HookFactory):
    _name = "sceAudioMasterSystemInit"

class sceAudioMasterSystemReconfig(HookFactory):
    _name = "sceAudioMasterSystemReconfig"

class sceAudioMasterTerm(HookFactory):
    _name = "sceAudioMasterTerm"

class sceAudioMasterParamEqCheckParams(HookFactory):
    _name = "sceAudioMasterParamEqCheckParams"

class sceAudioMasterParamEqInit(HookFactory):
    _name = "sceAudioMasterParamEqInit"

class sceAudioMasterParamEqProcess(HookFactory):
    _name = "sceAudioMasterParamEqProcess"

class sceAudioMasterParamEqSetParams(HookFactory):
    _name = "sceAudioMasterParamEqSetParams"

class sceAudioMasterParamEqTerm(HookFactory):
    _name = "sceAudioMasterParamEqTerm"

class sceAudioMasterCompressorCheckParams(HookFactory):
    _name = "sceAudioMasterCompressorCheckParams"

class sceAudioMasterCompressorGetStates(HookFactory):
    _name = "sceAudioMasterCompressorGetStates"

class sceAudioMasterCompressorInit(HookFactory):
    _name = "sceAudioMasterCompressorInit"

class sceAudioMasterCompressorProcess(HookFactory):
    _name = "sceAudioMasterCompressorProcess"

class sceAudioMasterCompressorSetParams(HookFactory):
    _name = "sceAudioMasterCompressorSetParams"

class sceAudioMasterCompressorTerm(HookFactory):
    _name = "sceAudioMasterCompressorTerm"

class sceAudioMasterLimiterCheckParams(HookFactory):
    _name = "sceAudioMasterLimiterCheckParams"

class sceAudioMasterLimiterGetStates(HookFactory):
    _name = "sceAudioMasterLimiterGetStates"

class sceAudioMasterLimiterInit(HookFactory):
    _name = "sceAudioMasterLimiterInit"

class sceAudioMasterLimiterProcess(HookFactory):
    _name = "sceAudioMasterLimiterProcess"

class sceAudioMasterLimiterSetParams(HookFactory):
    _name = "sceAudioMasterLimiterSetParams"

class sceAudioMasterMasterVolumeCheckParams(HookFactory):
    _name = "sceAudioMasterMasterVolumeCheckParams"

class sceAudioMasterMasterVolumeInit(HookFactory):
    _name = "sceAudioMasterMasterVolumeInit"

class sceAudioMasterMasterVolumeProcess(HookFactory):
    _name = "sceAudioMasterMasterVolumeProcess"

class sceAudioMasterMasterVolumeSetParams(HookFactory):
    _name = "sceAudioMasterMasterVolumeSetParams"

class FilterProcess(HookFactory):
    _name = "FilterProcess"

class FilterSetParams(HookFactory):
    _name = "FilterSetParams"

class MultichannelCalcBiQuadTransferCoEffs(HookFactory):
    _name = "MultichannelCalcBiQuadTransferCoEffs"

class paramValidationWithClampFloat(HookFactory):
    _name = "paramValidationWithClampFloat"

class akCompressorAccumulate(HookFactory):
    _name = "akCompressorAccumulate"

class akMultichannelCompressorProcess(HookFactory):
    _name = "akMultichannelCompressorProcess"

class akMultichannelXChCompressorProcess(HookFactory):
    _name = "akMultichannelXChCompressorProcess"

class GetSavedGainsPtrs(HookFactory):
    _name = "GetSavedGainsPtrs"

class akMultichannelAdvancedLimiterProcess(HookFactory):
    _name = "akMultichannelAdvancedLimiterProcess"

class akMultichannelHardLimiterProcess(HookFactory):
    _name = "akMultichannelHardLimiterProcess"

class akMultichannelSoftLimiterProcess(HookFactory):
    _name = "akMultichannelSoftLimiterProcess"

class akMultichannelXChHardLimiterProcess(HookFactory):
    _name = "akMultichannelXChHardLimiterProcess"

class akMultichannelXChSoftLimiterProcess(HookFactory):
    _name = "akMultichannelXChSoftLimiterProcess"

class akMultichannelMasterVolumeProcess(HookFactory):
    _name = "akMultichannelMasterVolumeProcess"

class akFilterProcess(HookFactory):
    _name = "akFilterProcess"

class NVSDK_NGX_Parameter_GetD(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetD"

class NVSDK_NGX_Parameter_GetD3d11Resource(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetD3d11Resource"

class NVSDK_NGX_Parameter_GetD3d12Resource(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetD3d12Resource"

class NVSDK_NGX_Parameter_GetF(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetF"

class NVSDK_NGX_Parameter_GetI(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetI"

class NVSDK_NGX_Parameter_GetUI(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetUI"

class NVSDK_NGX_Parameter_GetULL(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetULL"

class NVSDK_NGX_Parameter_GetVoidPointer(HookFactory):
    _name = "NVSDK_NGX_Parameter_GetVoidPointer"

class NVSDK_NGX_Parameter_SetD(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetD"

class NVSDK_NGX_Parameter_SetD3d11Resource(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetD3d11Resource"

class NVSDK_NGX_Parameter_SetD3d12Resource(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetD3d12Resource"

class NVSDK_NGX_Parameter_SetF(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetF"

class NVSDK_NGX_Parameter_SetI(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetI"

class NVSDK_NGX_Parameter_SetUI(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetUI"

class NVSDK_NGX_Parameter_SetULL(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetULL"

class NVSDK_NGX_Parameter_SetVoidPointer(HookFactory):
    _name = "NVSDK_NGX_Parameter_SetVoidPointer"

class GetLUIDFromVkPhysicalDevice(HookFactory):
    _name = "GetLUIDFromVkPhysicalDevice"

class NVSDK_NGX_VULKAN_Init_Common(HookFactory):
    _name = "NVSDK_NGX_VULKAN_Init_Common"

class NVSDK_NGX_VULKAN_ShutdownCommon(HookFactory):
    _name = "NVSDK_NGX_VULKAN_ShutdownCommon"

class NVSDK_NGX_VULKAN_AllocateParameters(HookFactory):
    _name = "NVSDK_NGX_VULKAN_AllocateParameters"

class NVSDK_NGX_VULKAN_CreateFeature(HookFactory):
    _name = "NVSDK_NGX_VULKAN_CreateFeature"

class NVSDK_NGX_VULKAN_CreateFeature1(HookFactory):
    _name = "NVSDK_NGX_VULKAN_CreateFeature1"

class NVSDK_NGX_VULKAN_DestroyParameters(HookFactory):
    _name = "NVSDK_NGX_VULKAN_DestroyParameters"

class NVSDK_NGX_VULKAN_EvaluateFeature(HookFactory):
    _name = "NVSDK_NGX_VULKAN_EvaluateFeature"

class NVSDK_NGX_VULKAN_EvaluateFeature_C(HookFactory):
    _name = "NVSDK_NGX_VULKAN_EvaluateFeature_C"

class NVSDK_NGX_VULKAN_GetCapabilityParameters(HookFactory):
    _name = "NVSDK_NGX_VULKAN_GetCapabilityParameters"

class NVSDK_NGX_VULKAN_GetParameters(HookFactory):
    _name = "NVSDK_NGX_VULKAN_GetParameters"

class NVSDK_NGX_VULKAN_GetScratchBufferSize(HookFactory):
    _name = "NVSDK_NGX_VULKAN_GetScratchBufferSize"

class NVSDK_NGX_VULKAN_Init(HookFactory):
    _name = "NVSDK_NGX_VULKAN_Init"

class NVSDK_NGX_VULKAN_ReleaseFeature(HookFactory):
    _name = "NVSDK_NGX_VULKAN_ReleaseFeature"

class NVSDK_NGX_VULKAN_RequiredExtensions(HookFactory):
    _name = "NVSDK_NGX_VULKAN_RequiredExtensions"

class NVSDK_NGX_VULKAN_Shutdown(HookFactory):
    _name = "NVSDK_NGX_VULKAN_Shutdown"

class NVSDK_NGX_VULKAN_Shutdown1(HookFactory):
    _name = "NVSDK_NGX_VULKAN_Shutdown1"

class ngx__CreateSHFolderFilePath(HookFactory):
    _name = "ngx__CreateSHFolderFilePath"

class ngx__CreateSystemFilePath(HookFactory):
    _name = "ngx__CreateSystemFilePath"

class ngx__GetSignerInfoTimeStamp(HookFactory):
    _name = "ngx__GetSignerInfoTimeStamp"

class ngx__IsCryptSvcPausedOrRunning(HookFactory):
    _name = "ngx__IsCryptSvcPausedOrRunning"

class ngx__IsNvidiaSubordinatePublicKey(HookFactory):
    _name = "ngx__IsNvidiaSubordinatePublicKey"

class ngx__IsPeNvidiaSigned(HookFactory):
    _name = "ngx__IsPeNvidiaSigned"

class ngx__IsTrustedLocation(HookFactory):
    _name = "ngx__IsTrustedLocation"

class ngx__IsWindowsBuildOrGreater(HookFactory):
    _name = "ngx__IsWindowsBuildOrGreater"

class ngx__OverrideSignatureVerificationFailure(HookFactory):
    _name = "ngx__OverrideSignatureVerificationFailure"

class ngx__ParseASN1Timestamp(HookFactory):
    _name = "ngx__ParseASN1Timestamp"

class ngx__QueryRegistryValueFromKey(HookFactory):
    _name = "ngx__QueryRegistryValueFromKey"

class ngx__TestCertificateChain(HookFactory):
    _name = "ngx__TestCertificateChain"

class ngx__VerifySingleSignature(HookFactory):
    _name = "ngx__VerifySingleSignature"

class ngx__VerifyTimeStampRFC3161(HookFactory):
    _name = "ngx__VerifyTimeStampRFC3161"

class ngx__VerifyTimeStampSignerInfo(HookFactory):
    _name = "ngx__VerifyTimeStampSignerInfo"

class ngx___preloadSystemDlls(HookFactory):
    _name = "ngx___preloadSystemDlls"

class ngx:
    class nvLoadSignedLibraryExW(HookFactory):
        _name = "ngx::nvLoadSignedLibraryExW"
    class nvVerifyFileSignatureW(HookFactory):
        _name = "ngx::nvVerifyFileSignatureW"
    class util:
        class log(HookFactory):
            _name = "ngx::util::log"
        class logva(HookFactory):
            _name = "ngx::util::logva"
        class logverbose(HookFactory):
            _name = "ngx::util::logverbose"
        class setLogFilename(HookFactory):
            _name = "ngx::util::setLogFilename"

class nvFPrintf(HookFactory):
    _name = "nvFPrintf"

class nvSWprintf(HookFactory):
    _name = "nvSWprintf"

class nvSprintf(HookFactory):
    _name = "nvSprintf"

class ngx__util__DefaultErrorCallback(HookFactory):
    _name = "ngx__util__DefaultErrorCallback"

class XInputGetState_0(HookFactory):
    _name = "XInputGetState_0"

class XInputSetState_0(HookFactory):
    _name = "XInputSetState_0"

class pre_c_initialization(HookFactory):
    _name = "pre_c_initialization"

class post_pgo_initialization(HookFactory):
    _name = "post_pgo_initialization"

class mainCRTStartup(HookFactory):
    _name = "mainCRTStartup"

class atexit(HookFactory):
    _name = "atexit"

class capture_previous_context(HookFactory):
    _name = "capture_previous_context"

class strstr_0(HookFactory):
    _name = "strstr_0"

class strchr_0(HookFactory):
    _name = "strchr_0"

class strrchr_0(HookFactory):
    _name = "strrchr_0"

class wcsstr_0(HookFactory):
    _name = "wcsstr_0"

class memcpy_0(HookFactory):
    _name = "memcpy_0"

class memmove_0(HookFactory):
    _name = "memmove_0"

class memset_0(HookFactory):
    _name = "memset_0"

class memcmp_0(HookFactory):
    _name = "memcmp_0"

class memchr_0(HookFactory):
    _name = "memchr_0"

class wcsrchr_0(HookFactory):
    _name = "wcsrchr_0"

class exit_0(HookFactory):
    _name = "exit_0"

class roundf_0(HookFactory):
    _name = "roundf_0"

class strcmp_0(HookFactory):
    _name = "strcmp_0"

class fabs_0(HookFactory):
    _name = "fabs_0"

class sqrt_0(HookFactory):
    _name = "sqrt_0"

class floor_0(HookFactory):
    _name = "floor_0"

class ceilf(HookFactory):
    _name = "ceilf"

class fmodf_0(HookFactory):
    _name = "fmodf_0"

class isalpha_0(HookFactory):
    _name = "isalpha_0"

class floorf_0(HookFactory):
    _name = "floorf_0"

class sqrtf_0(HookFactory):
    _name = "sqrtf_0"

class isdigit_0(HookFactory):
    _name = "isdigit_0"

class atan2f_0(HookFactory):
    _name = "atan2f_0"

class cosf_0(HookFactory):
    _name = "cosf_0"

class expf_0(HookFactory):
    _name = "expf_0"

class logf_0(HookFactory):
    _name = "logf_0"

class powf_0(HookFactory):
    _name = "powf_0"

class sinf_0(HookFactory):
    _name = "sinf_0"

class acosf_0(HookFactory):
    _name = "acosf_0"

class atanf_0(HookFactory):
    _name = "atanf_0"

class log10_0(HookFactory):
    _name = "log10_0"

class log10f_0(HookFactory):
    _name = "log10f_0"

class cos_0(HookFactory):
    _name = "cos_0"

class exp_0(HookFactory):
    _name = "exp_0"

class log_0(HookFactory):
    _name = "log_0"

class tanf_0(HookFactory):
    _name = "tanf_0"

class pow_0(HookFactory):
    _name = "pow_0"

class hkConcurrent:
    class FixedCapacityWaitFreeMap64:
        class FixedCapacityWaitFreeMap64(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::FixedCapacityWaitFreeMap64"
        class allocateBuckets(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::allocateBuckets"
        class editKey(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::editKey"
        class erase(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::erase"
        class Bucket:
            class lockOutOfLine(HookFactory):
                _name = "hkConcurrent::FixedCapacityWaitFreeMap64::Bucket::lockOutOfLine"
        class resizeThreadUnsafe(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::resizeThreadUnsafe"
        class tryGet(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::tryGet"
        class tryInsert(HookFactory):
            _name = "hkConcurrent::FixedCapacityWaitFreeMap64::tryInsert"

class hkAabb:
    class includePoints(HookFactory):
        _name = "hkAabb::includePoints"
        _overload: overloads.hkAabb.includePoints.overloads = "hkAabb *, const hkFloat3 *, int"
        @classmethod
        def overload(cls, overload_args: overloads.hkAabb.includePoints.overloads):
            cls._overload = overload_args
            return cls
    class isValid(HookFactory):
        _name = "hkAabb::isValid"

class hkAabbUtil:
    class calcAabb(HookFactory):
        _name = "hkAabbUtil::calcAabb"
        _overload: overloads.hkAabbUtil.calcAabb.overloads = "const hkTransformf *, const hkAabb *, hkAabb *"
        @classmethod
        def overload(cls, overload_args: overloads.hkAabbUtil.calcAabb.overloads):
            cls._overload = overload_args
            return cls

class hkStepInfo:
    class set(HookFactory):
        _name = "hkStepInfo::set"

class hkLineSegmentUtil:
    class capsuleCapsuleManifold(HookFactory):
        _name = "hkLineSegmentUtil::capsuleCapsuleManifold"

class hkUnionFind:
    class addEdge(HookFactory):
        _name = "hkUnionFind::addEdge"
    class collapseTree(HookFactory):
        _name = "hkUnionFind::collapseTree"
    class findRootOfNode(HookFactory):
        _name = "hkUnionFind::findRootOfNode"
    class sortByGroupIdUnchecked(HookFactory):
        _name = "hkUnionFind::sortByGroupIdUnchecked"

class hkPrimaryCommandDispatcher:
    class hkPrimaryCommandDispatcher(HookFactory):
        _name = "hkPrimaryCommandDispatcher::hkPrimaryCommandDispatcher"
        _overload: overloads.hkPrimaryCommandDispatcher.hkPrimaryCommandDispatcher.overloads = "hkPrimaryCommandDispatcher *, hkPrimaryCommandDispatcher *"
        @classmethod
        def overload(cls, overload_args: overloads.hkPrimaryCommandDispatcher.hkPrimaryCommandDispatcher.overloads):
            cls._overload = overload_args
            return cls
    class exec(HookFactory):
        _name = "hkPrimaryCommandDispatcher::exec"
    class registerDispatcher(HookFactory):
        _name = "hkPrimaryCommandDispatcher::registerDispatcher"

class hkSecondaryCommandDispatcher:
    class hkSecondaryCommandDispatcher(HookFactory):
        _name = "hkSecondaryCommandDispatcher::hkSecondaryCommandDispatcher"

class hkPreciseTransform:
    class setMul(HookFactory):
        _name = "hkPreciseTransform::setMul"

class hkParallel:
    class CoordinatorContext:
        class CoordinatorContext(HookFactory):
            _name = "hkParallel::CoordinatorContext::CoordinatorContext"
    class IteratorContext:
        class addMoreItems(HookFactory):
            _name = "hkParallel::IteratorContext::addMoreItems"
        class getItems(HookFactory):
            _name = "hkParallel::IteratorContext::getItems"
        class initThreadInfo(HookFactory):
            _name = "hkParallel::IteratorContext::initThreadInfo"
        class refillLocalQueueAndGetItems(HookFactory):
            _name = "hkParallel::IteratorContext::refillLocalQueueAndGetItems"
        class resetIterator(HookFactory):
            _name = "hkParallel::IteratorContext::resetIterator"
    class Coordinator:
        class barrier(HookFactory):
            _name = "hkParallel::Coordinator::barrier"
        class isLastSingle(HookFactory):
            _name = "hkParallel::Coordinator::isLastSingle"
    class CoordinatorWithIterator:
        class parallelFor(HookFactory):
            _name = "hkParallel::CoordinatorWithIterator::parallelFor"

class hkSingletonUtil__init_hkConcurrency_(HookFactory):
    _name = "hkSingletonUtil__init_hkConcurrency_"

class hkConcurrency:
    class getMaxNumThreads(HookFactory):
        _name = "hkConcurrency::getMaxNumThreads"

class hkPackedVector3:
    class pack(HookFactory):
        _name = "hkPackedVector3::pack"

class hkDynamicBlockStreamAllocator:
    class hkDynamicBlockStreamAllocator(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::hkDynamicBlockStreamAllocator"
    class blockAllocBatch(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::blockAllocBatch"
    class blockFreeBatch(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::blockFreeBatch"
    class expand(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::expand"
    class freeAllRemainingAllocations(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::freeAllRemainingAllocations"
    class getBytesUsed(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::getBytesUsed"
    class getMaxBytesUsed(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::getMaxBytesUsed"
    class getMemoryStatistics(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::getMemoryStatistics"
    class releaseUnusedBlocks(HookFactory):
        _name = "hkDynamicBlockStreamAllocator::releaseUnusedBlocks"

class hkOptionalComponent:
    class addToList(HookFactory):
        _name = "hkOptionalComponent::addToList"
    class request(HookFactory):
        _name = "hkOptionalComponent::request"

class hkMatrix4Impl:
    class setInverse(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix4Impl<{T0}>::setInverse"
    class sub(HookFactory):
        _templates = ("T0", )
        _name = "hkMatrix4Impl<{T0}>::sub"

class hkInt256:
    class addMul(HookFactory):
        _name = "hkInt256::addMul"
    class computeDiv32(HookFactory):
        _name = "hkInt256::computeDiv32"
    class setAdd(HookFactory):
        _name = "hkInt256::setAdd"
    class setMul(HookFactory):
        _name = "hkInt256::setMul"
        _overload: overloads.hkInt256.setMul.overloads = "hkInt256 *, const hkInt128 *, const hkInt128 *"
        @classmethod
        def overload(cls, overload_args: overloads.hkInt256.setMul.overloads):
            cls._overload = overload_args
            return cls
    class setNeg(HookFactory):
        _name = "hkInt256::setNeg"

class hkLargeIntImpl:
    class countLeadingZeros(HookFactory):
        _name = "hkLargeIntImpl::countLeadingZeros"
    class countTrailingZeros(HookFactory):
        _name = "hkLargeIntImpl::countTrailingZeros"
    class multiplyUnsigned(HookFactory):
        _name = "hkLargeIntImpl::multiplyUnsigned"

class hkLargeIntDivideUnsigned(HookFactory):
    _name = "hkLargeIntDivideUnsigned"

class hkInt128:
    class setGreatestCommonDivisor(HookFactory):
        _name = "hkInt128::setGreatestCommonDivisor"
    class setUnsignedDiv(HookFactory):
        _name = "hkInt128::setUnsignedDiv"

class hk1AxisSweep:
    class AabbInt:
        class set(HookFactory):
            _name = "hk1AxisSweep::AabbInt::set"
    class sortAabbs(HookFactory):
        _name = "hk1AxisSweep::sortAabbs"

class hkUintVle:
    class read(HookFactory):
        _name = "hkUintVle::read"
    class write(HookFactory):
        _name = "hkUintVle::write"

class hkSingletonUtil__init_ReflectStrings_(HookFactory):
    _name = "hkSingletonUtil__init_ReflectStrings_"

class ReflectStrings:
    class intern(HookFactory):
        _name = "ReflectStrings::intern"

class hkRefVariant:
    class getType(HookFactory):
        _name = "hkRefVariant::getType"
    class set(HookFactory):
        _name = "hkRefVariant::set"

class hkRadixSortDetail:
    class SortSharedData:
        class SortSharedData(HookFactory):
            _name = "hkRadixSortDetail::SortSharedData::SortSharedData"

class hknpCollisionQueryContext:
    class hknpCollisionQueryContext(HookFactory):
        _name = "hknpCollisionQueryContext::hknpCollisionQueryContext"

class hknpAnyHitCollector:
    class addHit(HookFactory):
        _name = "hknpAnyHitCollector::addHit"

class hknpSimdTreeBroadPhase:
    class Layer:
        class Layer(HookFactory):
            _name = "hknpSimdTreeBroadPhase::Layer::Layer"
        class clear(HookFactory):
            _name = "hknpSimdTreeBroadPhase::Layer::clear"
    class hknpSimdTreeBroadPhase(HookFactory):
        _name = "hknpSimdTreeBroadPhase::hknpSimdTreeBroadPhase"
    class addBodies(HookFactory):
        _name = "hknpSimdTreeBroadPhase::addBodies"
    class castAabb(HookFactory):
        _name = "hknpSimdTreeBroadPhase::castAabb"
        _overload: overloads.hknpSimdTreeBroadPhase.castAabb.overloads = "hknpSimdTreeBroadPhase *, const hknpAabbCastQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpSimdTreeBroadPhase.castAabb.overloads):
            cls._overload = overload_args
            return cls
    class castRay(HookFactory):
        _name = "hknpSimdTreeBroadPhase::castRay"
    class castShape(HookFactory):
        _name = "hknpSimdTreeBroadPhase::castShape"
    class copyFrom(HookFactory):
        _name = "hknpSimdTreeBroadPhase::copyFrom"
    class findAllPairs(HookFactory):
        _name = "hknpSimdTreeBroadPhase::findAllPairs"
    class findNewPairs(HookFactory):
        _name = "hknpSimdTreeBroadPhase::findNewPairs"
    class getClosestPoints(HookFactory):
        _name = "hknpSimdTreeBroadPhase::getClosestPoints"
    class getClosestPointsAdvanced(HookFactory):
        _name = "hknpSimdTreeBroadPhase::getClosestPointsAdvanced"
    class getClosestPointsParticles(HookFactory):
        _name = "hknpSimdTreeBroadPhase::getClosestPointsParticles"
    class getConfig(HookFactory):
        _name = "hknpSimdTreeBroadPhase::getConfig"
    class getExtents(HookFactory):
        _name = "hknpSimdTreeBroadPhase::getExtents"
    class markBodiesDirty(HookFactory):
        _name = "hknpSimdTreeBroadPhase::markBodiesDirty"
    class queryAabb(HookFactory):
        _name = "hknpSimdTreeBroadPhase::queryAabb"
        _overload: overloads.hknpSimdTreeBroadPhase.queryAabb.overloads = "hknpSimdTreeBroadPhase *, const hknpAabbQuery *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpSimdTreeBroadPhase.queryAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryAabbNmp(HookFactory):
        _name = "hknpSimdTreeBroadPhase::queryAabbNmp"
        _overload: overloads.hknpSimdTreeBroadPhase.queryAabbNmp.overloads = "hknpSimdTreeBroadPhase *, const hknpAabbQuery *, const hkAabb *, hkAabb *, hkArray<hknpBodyId,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpSimdTreeBroadPhase.queryAabbNmp.overloads):
            cls._overload = overload_args
            return cls
    class queryOutsideOfAabb(HookFactory):
        _name = "hknpSimdTreeBroadPhase::queryOutsideOfAabb"
        _overload: overloads.hknpSimdTreeBroadPhase.queryOutsideOfAabb.overloads = "hknpSimdTreeBroadPhase *, const hknpAabbQuery *, hkArray<hknpBodyIndex,hkBuiltinContainerAllocator<0,0> > *"
        @classmethod
        def overload(cls, overload_args: overloads.hknpSimdTreeBroadPhase.queryOutsideOfAabb.overloads):
            cls._overload = overload_args
            return cls
    class queryPoint(HookFactory):
        _name = "hknpSimdTreeBroadPhase::queryPoint"
    class removeBodies(HookFactory):
        _name = "hknpSimdTreeBroadPhase::removeBodies"
    class setBodyBuffer(HookFactory):
        _name = "hknpSimdTreeBroadPhase::setBodyBuffer"
    class translate(HookFactory):
        _name = "hknpSimdTreeBroadPhase::translate"
    class updateBodyAabbs(HookFactory):
        _name = "hknpSimdTreeBroadPhase::updateBodyAabbs"

class TreeOverlapsBufferedPairCollector:
    class addPairs(HookFactory):
        _templates = ("T0", )
        _name = "TreeOverlapsBufferedPairCollector<{T0}>::addPairs"

class hknpSimdTreeBroadPhaseInternal:
    class collideBranch(HookFactory):
        _name = "hknpSimdTreeBroadPhaseInternal::collideBranch"
    class prepareTreeBuildData(HookFactory):
        _name = "hknpSimdTreeBroadPhaseInternal::prepareTreeBuildData"
    class updatePointIdMapping(HookFactory):
        _name = "hknpSimdTreeBroadPhaseInternal::updatePointIdMapping"

class createSimdTreeBroadPhase(HookFactory):
    _name = "createSimdTreeBroadPhase"

class hknpSimdTreeBroadPhaseTasks:
    class CollideTrees:
        class getDebugAttributes(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::CollideTrees::getDebugAttributes"
        class getName(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::CollideTrees::getName"
        class process(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::CollideTrees::process"
    class PrepareTreeBuildData:
        class getDebugAttributes(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::PrepareTreeBuildData::getDebugAttributes"
        class getName(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::PrepareTreeBuildData::getName"
        class process(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::PrepareTreeBuildData::process"
    class CopyAabbsAndMarkActiveBodiesDirty:
        class getName(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::CopyAabbsAndMarkActiveBodiesDirty::getName"
        class process(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::CopyAabbsAndMarkActiveBodiesDirty::process"
    class Finalize:
        class getName(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::Finalize::getName"
        class process(HookFactory):
            _name = "hknpSimdTreeBroadPhaseTasks::Finalize::process"

class QueryNarrowPhaseProcessing:
    class QueryAabbImpl:
        class processSimdTreeLeaves(HookFactory):
            _templates = ("T0", )
            _name = "QueryNarrowPhaseProcessing::QueryAabbImpl<{T0}>::processSimdTreeLeaves"
    class GetClosestPointsImpl:
        class processSimdTreeLeaves(HookFactory):
            _name = "QueryNarrowPhaseProcessing::GetClosestPointsImpl::processSimdTreeLeaves"

class hknpCompressedMeshShapeCinfo:
    class hknpCompressedMeshShapeCinfo(HookFactory):
        _name = "hknpCompressedMeshShapeCinfo::hknpCompressedMeshShapeCinfo"
    class getConvexShapeTag(HookFactory):
        _name = "hknpCompressedMeshShapeCinfo::getConvexShapeTag"

class asinf_0(HookFactory):
    _name = "asinf_0"

class log2f_0(HookFactory):
    _name = "log2f_0"

class sub_14280EB25(HookFactory):
    _name = "sub_14280EB25"

class sub_14280EB7B(HookFactory):
    _name = "sub_14280EB7B"

class sub_14280EBAB(HookFactory):
    _name = "sub_14280EBAB"

